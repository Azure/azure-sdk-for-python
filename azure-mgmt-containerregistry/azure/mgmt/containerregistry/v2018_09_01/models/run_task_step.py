# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .task_step_properties import TaskStepProperties


class RunTaskStep(TaskStepProperties):
    """The properties of a generic task run step.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar base_image_dependencies: List of base image dependencies for a step.
    :vartype base_image_dependencies:
     list[~azure.mgmt.containerregistry.v2018_09_01.models.BaseImageDependency]
    :param type: Required. Constant filled by server.
    :type type: str
    :param task_definition_content: Required. Base64 encoded value of the
     template/definition file content.
    :type task_definition_content: str
    :param values_content: Base64 encoded value of the parameters/values file
     content.
    :type values_content: str
    :param values: The collection of overridable values that can be passed
     when running a task.
    :type values:
     list[~azure.mgmt.containerregistry.v2018_09_01.models.SetValue]
    """

    _validation = {
        'base_image_dependencies': {'readonly': True},
        'type': {'required': True},
        'task_definition_content': {'required': True},
    }

    _attribute_map = {
        'base_image_dependencies': {'key': 'baseImageDependencies', 'type': '[BaseImageDependency]'},
        'type': {'key': 'type', 'type': 'str'},
        'task_definition_content': {'key': 'taskDefinitionContent', 'type': 'str'},
        'values_content': {'key': 'valuesContent', 'type': 'str'},
        'values': {'key': 'values', 'type': '[SetValue]'},
    }

    def __init__(self, **kwargs):
        super(RunTaskStep, self).__init__(**kwargs)
        self.task_definition_content = kwargs.get('task_definition_content', None)
        self.values_content = kwargs.get('values_content', None)
        self.values = kwargs.get('values', None)
        self.type = 'RunTask'
