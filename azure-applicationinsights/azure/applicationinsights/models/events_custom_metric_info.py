# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class EventsCustomMetricInfo(Model):
    """The custom metric info.

    :param name: The name of the custom metric
    :type name: str
    :param value: The value of the custom metric
    :type value: float
    :param value_sum: The sum of the custom metric
    :type value_sum: float
    :param value_count: The count of the custom metric
    :type value_count: int
    :param value_min: The minimum value of the custom metric
    :type value_min: float
    :param value_max: The maximum value of the custom metric
    :type value_max: float
    :param value_std_dev: The standard deviation of the custom metric
    :type value_std_dev: float
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'float'},
        'value_sum': {'key': 'valueSum', 'type': 'float'},
        'value_count': {'key': 'valueCount', 'type': 'int'},
        'value_min': {'key': 'valueMin', 'type': 'float'},
        'value_max': {'key': 'valueMax', 'type': 'float'},
        'value_std_dev': {'key': 'valueStdDev', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(EventsCustomMetricInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)
        self.value_sum = kwargs.get('value_sum', None)
        self.value_count = kwargs.get('value_count', None)
        self.value_min = kwargs.get('value_min', None)
        self.value_max = kwargs.get('value_max', None)
        self.value_std_dev = kwargs.get('value_std_dev', None)
