# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .action import Action


class AlertingAction(Action):
    """Specifiy action need to be taken when rule type is Alert.

    All required parameters must be populated in order to send to Azure.

    :param action_group_id: the id of the action group to use.
    :type action_group_id: str
    :param webhook_properties:
    :type webhook_properties: dict[str, str]
    :param odatatype: Required. Constant filled by server.
    :type odatatype: str
    :param severity: Severity of the alert. Possible values include: '0', '1',
     '2', '3', '4'
    :type severity: str or ~azure.mgmt.monitor.models.AlertSeverity
    :param azns_action: Required. azns notification group reference.
    :type azns_action: ~azure.mgmt.monitor.models.AzNsActionGroup
    :param throttle_till_date: Time untill alert should not be fired in
     ISO8601 format.
    :type throttle_till_date: datetime
    :param trigger: Required. The trigger condition that results in the alert
     rule being.
    :type trigger: ~azure.mgmt.monitor.models.TriggerCondition
    """

    _validation = {
        'odatatype': {'required': True},
        'azns_action': {'required': True},
        'trigger': {'required': True},
    }

    _attribute_map = {
        'action_group_id': {'key': 'actionGroupId', 'type': 'str'},
        'webhook_properties': {'key': 'webhookProperties', 'type': '{str}'},
        'odatatype': {'key': 'odata\\.type', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'azns_action': {'key': 'aznsAction', 'type': 'AzNsActionGroup'},
        'throttle_till_date': {'key': 'throttleTillDate', 'type': 'iso-8601'},
        'trigger': {'key': 'trigger', 'type': 'TriggerCondition'},
    }

    def __init__(self, *, azns_action, trigger, action_group_id: str=None, webhook_properties=None, severity=None, throttle_till_date=None, **kwargs) -> None:
        super(AlertingAction, self).__init__(action_group_id=action_group_id, webhook_properties=webhook_properties, **kwargs)
        self.severity = severity
        self.azns_action = azns_action
        self.throttle_till_date = throttle_till_date
        self.trigger = trigger
        self.odatatype = 'Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction'
