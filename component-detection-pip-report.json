{
  "version": "1",
  "pip_version": "24.2",
  "install": [
    {
      "download_info": {
        "url": "file:///mnt/vss/_work/1/s/tools/azure-sdk-tools",
        "dir_info": {}
      },
      "is_direct": true,
      "is_yanked": false,
      "requested": true,
      "metadata": {
        "metadata_version": "2.1",
        "name": "azure-sdk-tools",
        "version": "0.0.0",
        "description": "Build and test tooling for the Azure SDK for Python\n",
        "home_page": "https://github.com/Azure/azure-sdk-for-python",
        "author": "Microsoft Corporation",
        "author_email": "azpysdkhelp@microsoft.com",
        "requires_dist": [
          "packaging",
          "wheel",
          "Jinja2",
          "MarkupSafe",
          "json-delta >=2.0",
          "pytest-cov",
          "pytest >=3.5.1",
          "readme-renderer",
          "pyopenssl",
          "python-dotenv",
          "PyYAML",
          "urllib3",
          "tomli-w ==1.0.0",
          "ConfigArgParse >=0.12.0",
          "tomli ==2.0.1 ; python_version<'3.11'",
          "pytest-asyncio >=0.9.0 ; python_version>='3.5'",
          "six ; extra == 'build'",
          "setuptools ; extra == 'build'",
          "pyparsing ; extra == 'build'",
          "certifi ; extra == 'build'",
          "cibuildwheel ; extra == 'build'",
          "beautifulsoup4 ; extra == 'conda'",
          "GitPython ; extra == 'ghtools'",
          "PyGithub >=1.59.0 ; extra == 'ghtools'",
          "requests >=2.0 ; extra == 'ghtools'",
          "aiohttp >=3.0 ; extra == 'systemperf'",
          "requests >=2.0 ; extra == 'systemperf'",
          "tornado ==6.0.3 ; extra == 'systemperf'",
          "httpx >=0.21 ; extra == 'systemperf'",
          "azure-core ; extra == 'systemperf'"
        ],
        "provides_extra": [
          "build",
          "conda",
          "ghtools",
          "systemperf"
        ]
      },
      "requested_extras": [
        "build"
      ]
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/bb/01/1da9c66ecb20f31ed5aa5316a957e0b1a5e786a0d9689616ece4ceaf1321/tomli_w-1.0.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=9f2a07e8be30a0729e533ec968016807069991ae2fd921a78d42f429ae5f4463",
          "hashes": {
            "sha256": "9f2a07e8be30a0729e533ec968016807069991ae2fd921a78d42f429ae5f4463"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "tomli_w",
        "version": "1.0.0",
        "summary": "A lil' TOML writer",
        "description": "[![Build Status](https://github.com/hukkin/tomli-w/workflows/Tests/badge.svg?branch=master)](https://github.com/hukkin/tomli-w/actions?query=workflow%3ATests+branch%3Amaster+event%3Apush)\n[![codecov.io](https://codecov.io/gh/hukkin/tomli-w/branch/master/graph/badge.svg)](https://codecov.io/gh/hukkin/tomli-w)\n[![PyPI version](https://img.shields.io/pypi/v/tomli-w)](https://pypi.org/project/tomli-w)\n\n# Tomli-W\n\n> A lil' TOML writer\n\n**Table of Contents**  *generated with [mdformat-toc](https://github.com/hukkin/mdformat-toc)*\n\n<!-- mdformat-toc start --slug=github --maxlevel=6 --minlevel=2 -->\n\n- [Intro](#intro)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Write to string](#write-to-string)\n  - [Write to file](#write-to-file)\n- [FAQ](#faq)\n  - [Does Tomli-W sort the document?](#does-tomli-w-sort-the-document)\n  - [Does Tomli-W support writing documents with comments or custom whitespace?](#does-tomli-w-support-writing-documents-with-comments-or-custom-whitespace)\n  - [Why does Tomli-W not write a multi-line string if the string value contains newlines?](#why-does-tomli-w-not-write-a-multi-line-string-if-the-string-value-contains-newlines)\n  - [Is Tomli-W output guaranteed to be valid TOML?](#is-tomli-w-output-guaranteed-to-be-valid-toml)\n\n<!-- mdformat-toc end -->\n\n## Intro<a name=\"intro\"></a>\n\nTomli-W is a Python library for writing [TOML](https://toml.io).\nIt is a write-only counterpart to [Tomli](https://github.com/hukkin/tomli),\nwhich is a read-only TOML parser.\nTomli-W is fully compatible with [TOML v1.0.0](https://toml.io/en/v1.0.0).\n\n## Installation<a name=\"installation\"></a>\n\n```bash\npip install tomli-w\n```\n\n## Usage<a name=\"usage\"></a>\n\n### Write to string<a name=\"write-to-string\"></a>\n\n```python\nimport tomli_w\n\ndoc = {\"table\": {\"nested\": {}, \"val3\": 3}, \"val2\": 2, \"val1\": 1}\nexpected_toml = \"\"\"\\\nval2 = 2\nval1 = 1\n\n[table]\nval3 = 3\n\n[table.nested]\n\"\"\"\nassert tomli_w.dumps(doc) == expected_toml\n```\n\n### Write to file<a name=\"write-to-file\"></a>\n\n```python\nimport tomli_w\n\ndoc = {\"one\": 1, \"two\": 2, \"pi\": 3}\nwith open(\"path_to_file/conf.toml\", \"wb\") as f:\n    tomli_w.dump(doc, f)\n```\n\n## FAQ<a name=\"faq\"></a>\n\n### Does Tomli-W sort the document?<a name=\"does-tomli-w-sort-the-document\"></a>\n\nNo, but it respects sort order of the input data,\nso one could sort the content of the `dict` (recursively) before calling `tomli_w.dumps`.\n\n### Does Tomli-W support writing documents with comments or custom whitespace?<a name=\"does-tomli-w-support-writing-documents-with-comments-or-custom-whitespace\"></a>\n\nNo.\n\n### Why does Tomli-W not write a multi-line string if the string value contains newlines?<a name=\"why-does-tomli-w-not-write-a-multi-line-string-if-the-string-value-contains-newlines\"></a>\n\nThis default was chosen to achieve lossless parse/write round-trips.\n\nTOML strings can contain newlines where exact bytes matter, e.g.\n\n```toml\ns = \"here's a newline\\r\\n\"\n```\n\nTOML strings also can contain newlines where exact byte representation is not relevant, e.g.\n\n```toml\ns = \"\"\"here's a newline\n\"\"\"\n```\n\nA parse/write round-trip that converts the former example to the latter does not preserve the original newline byte sequence.\nThis is why Tomli-W avoids writing multi-line strings.\n\nA keyword argument is provided for users who do not need newline bytes to be preserved:\n\n```python\nimport tomli_w\n\ndoc = {\"s\": \"here's a newline\\r\\n\"}\nexpected_toml = '''\\\ns = \"\"\"\nhere's a newline\n\"\"\"\n'''\nassert tomli_w.dumps(doc, multiline_strings=True) == expected_toml\n```\n\n### Is Tomli-W output guaranteed to be valid TOML?<a name=\"is-tomli-w-output-guaranteed-to-be-valid-toml\"></a>\n\nNo.\nIf there's a chance that your input data is bad and you need output validation,\nparse the output string once with `tomli.loads`.\nIf the parse is successful (does not raise `tomli.TOMLDecodeError`) then the string is valid TOML.\n\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "toml",
          "tomli"
        ],
        "author_email": "Taneli Hukkinen <hukkin@users.noreply.github.com>",
        "classifier": [
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX :: Linux",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Typing :: Typed"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Changelog, https://github.com/hukkin/tomli-w/blob/master/CHANGELOG.md",
          "Homepage, https://github.com/hukkin/tomli-w"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/6f/b3/b4ac838711fd74a2b4e6f746703cf9dd2cf5462d17dac07e349234e21b97/ConfigArgParse-1.7-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=d249da6591465c6c26df64a9f73d2536e743be2f244eb3ebe61114af2f94f86b",
          "hashes": {
            "sha256": "d249da6591465c6c26df64a9f73d2536e743be2f244eb3ebe61114af2f94f86b"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "ConfigArgParse",
        "version": "1.7",
        "summary": "A drop-in replacement for argparse that allows options to also be set via config files and/or environment variables.",
        "description": "ConfigArgParse\n--------------\n\n.. image:: https://img.shields.io/pypi/v/ConfigArgParse.svg?style=flat\n    :alt: PyPI version\n    :target: https://pypi.python.org/pypi/ConfigArgParse\n\n.. image:: https://img.shields.io/pypi/pyversions/ConfigArgParse.svg\n    :alt: Supported Python versions\n    :target: https://pypi.python.org/pypi/ConfigArgParse\n\n.. image:: https://static.pepy.tech/badge/configargparse/week\n    :alt: Downloads per week\n    :target: https://pepy.tech/project/configargparse\n\n.. image:: https://img.shields.io/badge/-API_Documentation-blue\n    :alt: API Documentation\n    :target: https://bw2.github.io/ConfigArgParse/\n\n\t     \nOverview\n~~~~~~~~\n\nApplications with more than a handful of user-settable options are best\nconfigured through a combination of command line args, config files,\nhard-coded defaults, and in some cases, environment variables.\n\nPython's command line parsing modules such as argparse have very limited\nsupport for config files and environment variables, so this module\nextends argparse to add these features.\n\nAvailable on PyPI: http://pypi.python.org/pypi/ConfigArgParse\n\n\nFeatures\n~~~~~~~~\n\n-  command-line, config file, env var, and default settings can now be\n   defined, documented, and parsed in one go using a single API (if a\n   value is specified in more than one way then: command line >\n   environment variables > config file values > defaults)\n-  config files can have .ini or .yaml style syntax (eg. key=value or\n   key: value)\n-  user can provide a config file via a normal-looking command line arg\n   (eg. -c path/to/config.txt) rather than the argparse-style @config.txt\n-  one or more default config file paths can be specified\n   (eg. ['/etc/bla.conf', '~/.my_config'] )\n-  all argparse functionality is fully supported, so this module can\n   serve as a drop-in replacement (verified by argparse unittests).\n-  env vars and config file keys & syntax are automatically documented\n   in the -h help message\n-  new method :code:`print_values()` can report keys & values and where\n   they were set (eg. command line, env var, config file, or default).\n-  lite-weight (no 3rd-party library dependencies except (optionally) PyYAML)\n-  extensible (:code:`ConfigFileParser` can be subclassed to define a new\n   config file format)\n-  unittested by running the unittests that came with argparse but on\n   configargparse, and using tox to test with Python 3.5+\n\nExample\n~~~~~~~\n\n*config_test.py*:\n\nScript that defines 4 options and a positional arg and then parses and prints the values. Also,\nit prints out the help message as well as the string produced by :code:`format_values()` to show\nwhat they look like.\n\n.. code:: py\n\n   import configargparse\n\n   p = configargparse.ArgParser(default_config_files=['/etc/app/conf.d/*.conf', '~/.my_settings'])\n   p.add('-c', '--my-config', required=True, is_config_file=True, help='config file path')\n   p.add('--genome', required=True, help='path to genome file')  # this option can be set in a config file because it starts with '--'\n   p.add('-v', help='verbose', action='store_true')\n   p.add('-d', '--dbsnp', help='known variants .vcf', env_var='DBSNP_PATH')  # this option can be set in a config file because it starts with '--'\n   p.add('vcf', nargs='+', help='variant file(s)')\n\n   options = p.parse_args()\n\n   print(options)\n   print(\"----------\")\n   print(p.format_help())\n   print(\"----------\")\n   print(p.format_values())    # useful for logging where different settings came from\n\n\n*config.txt:*\n\nSince the script above set the config file as required=True, lets create a config file to give it:\n\n.. code:: py\n\n    # settings for config_test.py\n    genome = HCMV     # cytomegalovirus genome\n    dbsnp = /data/dbsnp/variants.vcf\n\n\n*command line:*\n\nNow run the script and pass it the config file:\n\n.. code:: bash\n\n    DBSNP_PATH=/data/dbsnp/variants_v2.vcf python config_test.py --my-config config.txt f1.vcf f2.vcf\n\n*output:*\n\nHere is the result:\n\n.. code:: bash\n\n    Namespace(dbsnp='/data/dbsnp/variants_v2.vcf', genome='HCMV', my_config='config.txt', v=False, vcf=['f1.vcf', 'f2.vcf'])\n    ----------\n    usage: config_test.py [-h] -c MY_CONFIG --genome GENOME [-v] [-d DBSNP]\n                          vcf [vcf ...]\n    \n    Args that start with '--' (eg. --genome) can also be set in a config file\n    (/etc/app/conf.d/*.conf or ~/.my_settings or specified via -c). Config file\n    syntax allows: key=value, flag=true, stuff=[a,b,c] (for details, see syntax at\n    https://goo.gl/R74nmi). If an arg is specified in more than one place, then\n    commandline values override environment variables which override config file\n    values which override defaults.\n    \n    positional arguments:\n      vcf                   variant file(s)\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -c MY_CONFIG, --my-config MY_CONFIG\n                            config file path\n      --genome GENOME       path to genome file\n      -v                    verbose\n      -d DBSNP, --dbsnp DBSNP\n                            known variants .vcf [env var: DBSNP_PATH]\n    \n    ----------\n    Command Line Args:   --my-config config.txt f1.vcf f2.vcf\n    Environment Variables:\n      DBSNP_PATH:        /data/dbsnp/variants_v2.vcf\n    Config File (config.txt):\n      genome:            HCMV\n\nSpecial Values\n~~~~~~~~~~~~~~\n\nUnder the hood, configargparse handles environment variables and config file\nvalues by converting them to their corresponding command line arg. For\nexample, \"key = value\" will be processed as if \"--key value\" was specified\non the command line.\n\nAlso, the following special values (whether in a config file or an environment\nvariable) are handled in a special way to support booleans and lists:\n\n-  :code:`key = true` is handled as if \"--key\" was specified on the command line.\n   In your python code this key must be defined as a boolean flag\n   (eg. action=\"store_true\" or similar).\n\n-  :code:`key = [value1, value2, ...]` is handled as if \"--key value1 --key value2\"\n   etc. was specified on the command line. In your python code this key must\n   be defined as a list (eg. action=\"append\").\n\nConfig File Syntax\n~~~~~~~~~~~~~~~~~~\n\nOnly command line args that have a long version (eg. one that starts with '--')\ncan be set in a config file. For example, \"--color\" can be set by putting\n\"color=green\" in a config file. The config file syntax depends on the constructor\narg: :code:`config_file_parser_class` which can be set to one of the provided\nclasses: :code:`DefaultConfigFileParser`, :code:`YAMLConfigFileParser`,\n:code:`ConfigparserConfigFileParser` or to your own subclass of the\n:code:`ConfigFileParser` abstract class.\n\n*DefaultConfigFileParser*  - the full range of valid syntax is:\n\n.. code:: yaml\n\n        # this is a comment\n        ; this is also a comment (.ini style)\n        ---            # lines that start with --- are ignored (yaml style)\n        -------------------\n        [section]      # .ini-style section names are treated as comments\n\n        # how to specify a key-value pair (all of these are equivalent):\n        name value     # key is case sensitive: \"Name\" isn't \"name\"\n        name = value   # (.ini style)  (white space is ignored, so name = value same as name=value)\n        name: value    # (yaml style)\n        --name value   # (argparse style)\n\n        # how to set a flag arg (eg. arg which has action=\"store_true\")\n        --name\n        name\n        name = True    # \"True\" and \"true\" are the same\n\n        # how to specify a list arg (eg. arg which has action=\"append\")\n        fruit = [apple, orange, lemon]\n        indexes = [1, 12, 35 , 40]\n\n\n*YAMLConfigFileParser*  - allows a subset of YAML syntax (http://goo.gl/VgT2DU)\n\n.. code:: yaml\n\n        # a comment\n        name1: value\n        name2: true    # \"True\" and \"true\" are the same\n\n        fruit: [apple, orange, lemon]\n        indexes: [1, 12, 35, 40]\n        colors:\n          - green\n          - red\n          - blue\n\n*ConfigparserConfigFileParser*  - allows a subset of python's configparser\nmodule syntax (https://docs.python.org/3.7/library/configparser.html). In\nparticular the following configparser options are set:\n\n.. code:: py\n\n        config = configparser.ArgParser(\n            delimiters=(\"=\",\":\"),\n            allow_no_value=False,\n            comment_prefixes=(\"#\",\";\"),\n            inline_comment_prefixes=(\"#\",\";\"),\n            strict=True,\n            empty_lines_in_values=False,\n        )\n\nOnce configparser parses the config file all section names are removed, thus all\nkeys must have unique names regardless of which INI section they are defined\nunder. Also, any keys which have python list syntax are converted to lists by\nevaluating them as python code using ast.literal_eval\n(https://docs.python.org/3/library/ast.html#ast.literal_eval). To facilitate\nthis all multi-line values are converted to single-line values. Thus multi-line\nstring values will have all new-lines converted to spaces. Note, since key-value\npairs that have python dictionary syntax are saved as single-line strings, even\nif formatted across multiple lines in the config file, dictionaries can be read\nin and converted to valid python dictionaries with PyYAML's safe_load. Example\ngiven below:\n\n.. code:: py\n\n        # inside your config file (e.g. config.ini)\n        [section1]  # INI sections treated as comments\n        system1_settings: { # start of multi-line dictionary\n            'a':True,\n            'b':[2, 4, 8, 16],\n            'c':{'start':0, 'stop':1000},\n            'd':'experiment 32 testing simulation with parameter a on'\n            } # end of multi-line dictionary value\n\n        .......\n\n        # in your configargparse setup\n        import configargparse\n        import yaml\n\n        parser = configargparse.ArgParser(\n            config_file_parser_class=configargparse.ConfigparserConfigFileParser\n        )\n        parser.add_argument('--system1_settings', type=yaml.safe_load)\n        \n        args = parser.parse_args() # now args.system1 is a valid python dict\n\n*IniConfigParser*  - INI parser with support for sections.\n\nThis parser somewhat ressembles ``ConfigparserConfigFileParser``. It uses configparser and apply the same kind of processing to \nvalues written with python list syntax. \n\nWith the following additions: \n   - Must be created with argument to bind the parser to a list of sections.\n   - Does not convert multiline strings to single line.\n   - Optional support for converting multiline strings to list (if ``split_ml_text_to_list=True``). \n   - Optional support for quoting strings in config file \n      (useful when text must not be converted to list or when text \n      should contain trailing whitespaces).\n\nThis config parser can be used to integrate with ``setup.cfg`` files.\n\nExample::\n\n      # this is a comment\n      ; also a comment\n      [my_super_tool]\n      # how to specify a key-value pair\n      format-string: restructuredtext \n      # white space are ignored, so name = value same as name=value\n      # this is why you can quote strings \n      quoted-string = '\\thello\\tmom...  '\n      # how to set an arg which has action=\"store_true\"\n      warnings-as-errors = true\n      # how to set an arg which has action=\"count\" or type=int\n      verbosity = 1\n      # how to specify a list arg (eg. arg which has action=\"append\")\n      repeatable-option = [\"https://docs.python.org/3/objects.inv\",\n                     \"https://twistedmatrix.com/documents/current/api/objects.inv\"]\n      # how to specify a multiline text:\n      multi-line-text = \n         Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n         Vivamus tortor odio, dignissim non ornare non, laoreet quis nunc. \n         Maecenas quis dapibus leo, a pellentesque leo. \n\nIf you use ``IniConfigParser(sections, split_ml_text_to_list=True)``::\n\n      # the same rules are applicable with the following changes:\n      [my-software]\n      # how to specify a list arg (eg. arg which has action=\"append\")\n      repeatable-option = # Just enter one value per line (the list literal format can also be used)\n         https://docs.python.org/3/objects.inv\n         https://twistedmatrix.com/documents/current/api/objects.inv\n      # how to specify a multiline text (you have to quote it):\n      multi-line-text = '''\n         Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n         Vivamus tortor odio, dignissim non ornare non, laoreet quis nunc. \n         Maecenas quis dapibus leo, a pellentesque leo. \n         '''\n\nUsage:\n\n.. code:: py\n\n   import configargparse\n   parser = configargparse.ArgParser(\n            default_config_files=['setup.cfg', 'my_super_tool.ini'],\n            config_file_parser_class=configargparse.IniConfigParser(['tool:my_super_tool', 'my_super_tool']),\n        )\n   ...\n\n*TomlConfigParser*  - TOML parser with support for sections.\n\n`TOML <https://github.com/toml-lang/toml/blob/main/toml.md>`_ parser. This config parser can be used to integrate with ``pyproject.toml`` files.\n\nExample::\n\n   # this is a comment\n   [tool.my-software] # TOML section table.\n   # how to specify a key-value pair\n   format-string = \"restructuredtext\" # strings must be quoted\n   # how to set an arg which has action=\"store_true\"\n   warnings-as-errors = true\n   # how to set an arg which has action=\"count\" or type=int\n   verbosity = 1\n   # how to specify a list arg (eg. arg which has action=\"append\")\n   repeatable-option = [\"https://docs.python.org/3/objects.inv\",\n                  \"https://twistedmatrix.com/documents/current/api/objects.inv\"]\n   # how to specify a multiline text:\n   multi-line-text = '''\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n      Vivamus tortor odio, dignissim non ornare non, laoreet quis nunc. \n      Maecenas quis dapibus leo, a pellentesque leo. \n      '''\n\nUsage:\n\n.. code:: py\n\n   import configargparse\n   parser = configargparse.ArgParser(\n            default_config_files=['pyproject.toml', 'my_super_tool.toml'],\n            config_file_parser_class=configargparse.TomlConfigParser(['tool.my_super_tool']),\n        )\n   ...\n\n*CompositeConfigParser*  - Create a config parser to understand multiple formats.\n\nThis parser will successively try to parse the file with each parser, until it succeeds, \nelse fail showing all encountered error messages.\n\nThe following code will make configargparse understand both TOML and INI formats. \nMaking it easy to integrate in both ``pyproject.toml`` and ``setup.cfg``.\n\n.. code:: py\n\n   import configargparse\n   my_tool_sections = ['tool.my_super_tool', 'tool:my_super_tool', 'my_super_tool']\n                    # pyproject.toml like section, setup.cfg like section, custom section\n   parser = configargparse.ArgParser(\n            default_config_files=['setup.cfg', 'my_super_tool.ini'],\n            config_file_parser_class=configargparse.CompositeConfigParser(\n               [configargparse.TomlConfigParser(my_tool_sections), \n                configargparse.IniConfigParser(my_tool_sections, split_ml_text_to_list=True)]\n               ),\n        )\n   ...\n\nNote that it's required to put the TOML parser first because the INI syntax basically would accept anything whereas TOML. \n\nArgParser Singletons\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo make it easier to configure different modules in an application,\nconfigargparse provides globally-available ArgumentParser instances\nvia configargparse.get_argument_parser('name') (similar to\nlogging.getLogger('name')).\n\nHere is an example of an application with a utils module that also\ndefines and retrieves its own command-line args.\n\n*main.py*\n\n.. code:: py\n\n    import configargparse\n    import utils\n\n    p = configargparse.get_argument_parser()\n    p.add_argument(\"-x\", help=\"Main module setting\")\n    p.add_argument(\"--m-setting\", help=\"Main module setting\")\n    options = p.parse_known_args()   # using p.parse_args() here may raise errors.\n\n*utils.py*\n\n.. code:: py\n\n    import configargparse\n    p = configargparse.get_argument_parser()\n    p.add_argument(\"--utils-setting\", help=\"Config-file-settable option for utils\")\n\n    if __name__ == \"__main__\":\n       options = p.parse_known_args()\n\nHelp Formatters\n~~~~~~~~~~~~~~~\n\n:code:`ArgumentDefaultsRawHelpFormatter` is a new HelpFormatter that both adds\ndefault values AND disables line-wrapping. It can be passed to the constructor:\n:code:`ArgParser(.., formatter_class=ArgumentDefaultsRawHelpFormatter)`\n\n\nAliases\n~~~~~~~\n\nThe configargparse.ArgumentParser API inherits its class and method\nnames from argparse and also provides the following shorter names for\nconvenience:\n\n-  p = configargparse.get_arg_parser()  # get global singleton instance\n-  p = configargparse.get_parser()\n-  p = configargparse.ArgParser()  # create a new instance\n-  p = configargparse.Parser()\n-  p.add_arg(..)\n-  p.add(..)\n-  options = p.parse(..)\n\nHelpFormatters:\n\n- RawFormatter = RawDescriptionHelpFormatter\n- DefaultsFormatter = ArgumentDefaultsHelpFormatter\n- DefaultsRawFormatter = ArgumentDefaultsRawHelpFormatter\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nYou can review the generated API Documentation for the ``configargparse`` module: `HERE <https://bw2.github.io/ConfigArgParse/>`_\n\nDesign Notes\n~~~~~~~~~~~~\n\nUnit tests:\n\ntests/test_configargparse.py contains custom unittests for features\nspecific to this module (such as config file and env-var support), as\nwell as a hook to load and run argparse unittests (see the built-in\ntest.test_argparse module) but on configargparse in place of argparse.\nThis ensures that configargparse will work as a drop in replacement for\nargparse in all usecases.\n\nPreviously existing modules (PyPI search keywords: config argparse):\n\n-  argparse (built-in module Python v2.7+)\n\n   -  Good:\n\n      -  fully featured command line parsing\n      -  can read args from files using an easy to understand mechanism\n\n   -  Bad:\n\n      -  syntax for specifying config file path is unusual (eg.\n         @file.txt)and not described in the user help message.\n      -  default config file syntax doesn't support comments and is\n         unintuitive (eg. --namevalue)\n      -  no support for environment variables\n\n-  ConfArgParse v1.0.15\n   (https://pypi.python.org/pypi/ConfArgParse)\n\n   -  Good:\n\n      -  extends argparse with support for config files parsed by\n         ConfigParser\n      -  clear documentation in README\n\n   -  Bad:\n\n      -  config file values are processed using\n         ArgumentParser.set_defaults(..) which means \"required\" and\n         \"choices\" are not handled as expected. For example, if you\n         specify a required value in a config file, you still have to\n         specify it again on the command line.\n      -  doesn't work with Python 3 yet\n      -  no unit tests, code not well documented\n\n-  appsettings v0.5 (https://pypi.python.org/pypi/appsettings)\n\n   -  Good:\n\n      -  supports config file (yaml format) and env_var parsing\n      -  supports config-file-only setting for specifying lists and\n         dicts\n\n   -  Bad:\n\n      -  passes in config file and env settings via parse_args\n         namespace param\n      -  tests not finished and don't work with Python 3 (import\n         StringIO)\n\n-  argparse_config v0.5.1\n   (https://pypi.python.org/pypi/argparse_config)\n\n   -  Good:\n\n      -  similar features to ConfArgParse v1.0.15\n\n   -  Bad:\n\n      -  doesn't work with Python 3 (error during pip install)\n\n-  yconf v0.3.2 - (https://pypi.python.org/pypi/yconf) - features\n   and interface not that great\n-  hieropt v0.3 - (https://pypi.python.org/pypi/hieropt) - doesn't\n   appear to be maintained, couldn't find documentation\n\n-  configurati v0.2.3 - (https://pypi.python.org/pypi/configurati)\n\n   -  Good:\n\n      -  JSON, YAML, or Python configuration files\n      -  handles rich data structures such as dictionaries\n      -  can group configuration names into sections (like .ini files)\n\n   -  Bad:\n\n      -  doesn't work with Python 3\n      -  2+ years since last release to PyPI\n      -  apparently unmaintained\n\n\nDesign choices:\n\n1. all options must be settable via command line. Having options that\n   can only be set using config files or env. vars adds complexity to\n   the API, and is not a useful enough feature since the developer can\n   split up options into sections and call a section \"config file keys\",\n   with command line args that are just \"--\" plus the config key.\n2. config file and env. var settings should be processed by appending\n   them to the command line (another benefit of #1). This is an\n   easy-to-implement solution and implicitly takes care of checking that\n   all \"required\" args are provided, etc., plus the behavior should be\n   easy for users to understand.\n3. configargparse shouldn't override argparse's\n   convert_arg_line_to_args method so that all argparse unit tests\n   can be run on configargparse.\n4. in terms of what to allow for config file keys, the \"dest\" value of\n   an option can't serve as a valid config key because many options can\n   have the same dest. Instead, since multiple options can't use the\n   same long arg (eg. \"--long-arg-x\"), let the config key be either\n   \"--long-arg-x\" or \"long-arg-x\". This means the developer can allow\n   only a subset of the command-line args to be specified via config\n   file (eg. short args like -x would be excluded). Also, that way\n   config keys are automatically documented whenever the command line\n   args are documented in the help message.\n5. don't force users to put config file settings in the right .ini [sections].\n   This doesn't have a clear benefit since all options are command-line settable,\n   and so have a globally unique key anyway.\n   Enforcing sections just makes things harder for the user and adds complexity to the implementation.\n   NOTE: This design choice was preventing configargparse from integrating with common Python project\n   config files like setup.cfg or pyproject.toml,\n   so additional parser classes were added that parse only a subset of the values defined in INI or\n   TOML config files.\n6. if necessary, config-file-only args can be added later by\n   implementing a separate add method and using the namespace arg as in\n   appsettings_v0.5\n\nRelevant sites:\n\n-  http://stackoverflow.com/questions/6133517/parse-config-file-environment-and-command-line-arguments-to-get-a-single-coll\n-  http://tricksntweaks.blogspot.com/2013_05_01_archive.html\n-  http://www.youtube.com/watch?v=vvCwqHgZJc8#t=35\n\n\n\nVersioning\n~~~~~~~~~~\n\nThis software follows `Semantic Versioning`_\n\n.. _Semantic Versioning: http://semver.org/\n",
        "keywords": [
          "options",
          "argparse",
          "ConfigArgParse",
          "config",
          "environment variables",
          "envvars",
          "ENV",
          "environment",
          "optparse",
          "YAML",
          "INI"
        ],
        "home_page": "https://github.com/bw2/ConfigArgParse",
        "license": "MIT",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Natural Language :: English",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.5",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy"
        ],
        "requires_dist": [
          "mock ; extra == 'test'",
          "PyYAML ; extra == 'test'",
          "pytest ; extra == 'test'",
          "PyYAML ; extra == 'yaml'"
        ],
        "requires_python": ">=3.5",
        "provides_extra": [
          "test",
          "yaml"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/3c/c7/473eca109cb96df86673bcb6180413bb5ae6d0bca97ceac7625cc87968cc/json_delta-2.0.2-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=12bc798354ea722fa04fae21ea06879321c47b0887572c27384accd6ef28efbf",
          "hashes": {
            "sha256": "12bc798354ea722fa04fae21ea06879321c47b0887572c27384accd6ef28efbf"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "json-delta",
        "version": "2.0.2",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "A diff/patch pair for JSON-serialized data structures.",
        "description": "json-delta: A diff/patch pair and library for JSON data\nstructures. (http://json_delta.readthedocs.org/)\n\nJSON-delta is a multi-language software suite for computing deltas\nbetween JSON-serialized data structures, and applying those deltas as\npatches.  It enables separate programs at either end of a\ncommunications channel (e.g. client and server over HTTP, or two\nprocesses talking to one another using bidirectional IPC) to\nmanipulate a data structure while minimizing communications overhead.\n\nThis is the python implementation.  It requires Python version 2.7 or\nnewer (including Python 3).  It can be installed in the standard way:\n\n$ python setup.py install\n\n(potentially needing superuser privileges).  This will install a\nsingle module named json_delta, and scripts named json_diff,\njson_patch and json_cat.\n\nHTML documentation for all four of these can be found in the doc/\ndirectory, along with manpages for the scripts.\n\nDonations to support the continuing development of JSON-delta will be\ngratefully received via gratipay (https://gratipay.com/phijaro),\nPayPal (himself@phil-roberts.name) or\nBitcoin: (`1HPJHRpVSm1Y4zrgppd2c6LysjxeabbQN4\n<bitcoin:1HPJHRpVSm1Y4zrgppd2c6LysjxeabbQN4>`_).\n\n\n\n",
        "keywords": [
          "JSON",
          "delta",
          "diff",
          "patch",
          "compression"
        ],
        "home_page": "http://json-delta.readthedocs.org/",
        "author": "Phil Roberts",
        "author_email": "himself@phil-roberts.name",
        "license": "BSD",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 2.7",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.2",
          "Programming Language :: Python :: 3.3",
          "Programming Language :: Python :: 3.4"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/6b/77/7440a06a8ead44c7757a64362dd22df5760f9b12dc5f11b6188cd2fc27a0/pytest-8.3.3-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=a6853c7375b2663155079443d2e45de913a911a11d669df02a50814944db57b2",
          "hashes": {
            "sha256": "a6853c7375b2663155079443d2e45de913a911a11d669df02a50814944db57b2"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pytest",
        "version": "8.3.3",
        "summary": "pytest: simple powerful testing with Python",
        "description": ".. image:: https://github.com/pytest-dev/pytest/raw/main/doc/en/img/pytest_logo_curves.svg\n   :target: https://docs.pytest.org/en/stable/\n   :align: center\n   :height: 200\n   :alt: pytest\n\n\n------\n\n.. image:: https://img.shields.io/pypi/v/pytest.svg\n    :target: https://pypi.org/project/pytest/\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytest.svg\n    :target: https://anaconda.org/conda-forge/pytest\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest.svg\n    :target: https://pypi.org/project/pytest/\n\n.. image:: https://codecov.io/gh/pytest-dev/pytest/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/pytest-dev/pytest\n    :alt: Code coverage Status\n\n.. image:: https://github.com/pytest-dev/pytest/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/pytest-dev/pytest/actions?query=workflow%3Atest\n\n.. image:: https://results.pre-commit.ci/badge/github/pytest-dev/pytest/main.svg\n   :target: https://results.pre-commit.ci/latest/github/pytest-dev/pytest/main\n   :alt: pre-commit.ci status\n\n.. image:: https://www.codetriage.com/pytest-dev/pytest/badges/users.svg\n    :target: https://www.codetriage.com/pytest-dev/pytest\n\n.. image:: https://readthedocs.org/projects/pytest/badge/?version=latest\n    :target: https://pytest.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://img.shields.io/badge/Discord-pytest--dev-blue\n    :target: https://discord.com/invite/pytest-dev\n    :alt: Discord\n\n.. image:: https://img.shields.io/badge/Libera%20chat-%23pytest-orange\n    :target: https://web.libera.chat/#pytest\n    :alt: Libera chat\n\n\nThe ``pytest`` framework makes it easy to write small tests, yet\nscales to support complex functional testing for applications and libraries.\n\nAn example of a simple test:\n\n.. code-block:: python\n\n    # content of test_sample.py\n    def inc(x):\n        return x + 1\n\n\n    def test_answer():\n        assert inc(3) == 5\n\n\nTo execute it::\n\n    $ pytest\n    ============================= test session starts =============================\n    collected 1 items\n\n    test_sample.py F\n\n    ================================== FAILURES ===================================\n    _________________________________ test_answer _________________________________\n\n        def test_answer():\n    >       assert inc(3) == 5\n    E       assert 4 == 5\n    E        +  where 4 = inc(3)\n\n    test_sample.py:5: AssertionError\n    ========================== 1 failed in 0.04 seconds ===========================\n\n\nDue to ``pytest``'s detailed assertion introspection, only plain ``assert`` statements are used. See `getting-started <https://docs.pytest.org/en/stable/getting-started.html#our-first-test-run>`_ for more examples.\n\n\nFeatures\n--------\n\n- Detailed info on failing `assert statements <https://docs.pytest.org/en/stable/how-to/assert.html>`_ (no need to remember ``self.assert*`` names)\n\n- `Auto-discovery\n  <https://docs.pytest.org/en/stable/explanation/goodpractices.html#python-test-discovery>`_\n  of test modules and functions\n\n- `Modular fixtures <https://docs.pytest.org/en/stable/explanation/fixtures.html>`_ for\n  managing small or parametrized long-lived test resources\n\n- Can run `unittest <https://docs.pytest.org/en/stable/how-to/unittest.html>`_ (or trial)\n  test suites out of the box\n\n- Python 3.8+ or PyPy3\n\n- Rich plugin architecture, with over 1300+ `external plugins <https://docs.pytest.org/en/latest/reference/plugin_list.html>`_ and thriving community\n\n\nDocumentation\n-------------\n\nFor full documentation, including installation, tutorials and PDF documents, please see https://docs.pytest.org/en/stable/.\n\n\nBugs/Requests\n-------------\n\nPlease use the `GitHub issue tracker <https://github.com/pytest-dev/pytest/issues>`_ to submit bugs or request features.\n\n\nChangelog\n---------\n\nConsult the `Changelog <https://docs.pytest.org/en/stable/changelog.html>`__ page for fixes and enhancements of each version.\n\n\nSupport pytest\n--------------\n\n`Open Collective`_ is an online funding platform for open and transparent communities.\nIt provides tools to raise money and share your finances in full transparency.\n\nIt is the platform of choice for individuals and companies that want to make one-time or\nmonthly donations directly to the project.\n\nSee more details in the `pytest collective`_.\n\n.. _Open Collective: https://opencollective.com\n.. _pytest collective: https://opencollective.com/pytest\n\n\npytest for enterprise\n---------------------\n\nAvailable as part of the Tidelift Subscription.\n\nThe maintainers of pytest and thousands of other packages are working with Tidelift to deliver commercial support and\nmaintenance for the open source dependencies you use to build your applications.\nSave time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use.\n\n`Learn more. <https://tidelift.com/subscription/pkg/pypi-pytest?utm_source=pypi-pytest&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_\n\nSecurity\n^^^^^^^^\n\npytest has never been associated with a security vulnerability, but in any case, to report a\nsecurity vulnerability please use the `Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\n\nLicense\n-------\n\nCopyright Holger Krekel and others, 2004.\n\nDistributed under the terms of the `MIT`_ license, pytest is free and open source software.\n\n.. _`MIT`: https://github.com/pytest-dev/pytest/blob/main/LICENSE\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "test",
          "unittest"
        ],
        "author": "Holger Krekel, Bruno Oliveira, Ronny Pfannschmidt, Floris Bruynooghe, Brianna Laugher, Florian Bruhin, Others (See AUTHORS)",
        "license": "MIT",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX",
          "Operating System :: Unix",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Topic :: Software Development :: Libraries",
          "Topic :: Software Development :: Testing",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "iniconfig",
          "packaging",
          "pluggy <2,>=1.5",
          "exceptiongroup >=1.0.0rc8 ; python_version < \"3.11\"",
          "tomli >=1 ; python_version < \"3.11\"",
          "colorama ; sys_platform == \"win32\"",
          "argcomplete ; extra == 'dev'",
          "attrs >=19.2 ; extra == 'dev'",
          "hypothesis >=3.56 ; extra == 'dev'",
          "mock ; extra == 'dev'",
          "pygments >=2.7.2 ; extra == 'dev'",
          "requests ; extra == 'dev'",
          "setuptools ; extra == 'dev'",
          "xmlschema ; extra == 'dev'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Changelog, https://docs.pytest.org/en/stable/changelog.html",
          "Homepage, https://docs.pytest.org/en/latest/",
          "Source, https://github.com/pytest-dev/pytest",
          "Tracker, https://github.com/pytest-dev/pytest/issues",
          "Twitter, https://twitter.com/pytestdotorg"
        ],
        "provides_extra": [
          "dev"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/96/31/6607dab48616902f76885dfcf62c08d929796fc3b2d2318faf9fd54dbed9/pytest_asyncio-0.24.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=a811296ed596b69bf0b6f3dc40f83bcaf341b155a269052d82efa2b25ac7037b",
          "hashes": {
            "sha256": "a811296ed596b69bf0b6f3dc40f83bcaf341b155a269052d82efa2b25ac7037b"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pytest-asyncio",
        "version": "0.24.0",
        "summary": "Pytest support for asyncio",
        "description": "pytest-asyncio\n==============\n\n.. image:: https://img.shields.io/pypi/v/pytest-asyncio.svg\n    :target: https://pypi.python.org/pypi/pytest-asyncio\n.. image:: https://github.com/pytest-dev/pytest-asyncio/workflows/CI/badge.svg\n    :target: https://github.com/pytest-dev/pytest-asyncio/actions?workflow=CI\n.. image:: https://codecov.io/gh/pytest-dev/pytest-asyncio/branch/main/graph/badge.svg\n    :target: https://codecov.io/gh/pytest-dev/pytest-asyncio\n.. image:: https://img.shields.io/pypi/pyversions/pytest-asyncio.svg\n    :target: https://github.com/pytest-dev/pytest-asyncio\n    :alt: Supported Python versions\n.. image:: https://img.shields.io/badge/Matrix-%23pytest--asyncio-brightgreen\n    :alt: Matrix chat room: #pytest-asyncio\n    :target: https://matrix.to/#/#pytest-asyncio:matrix.org\n\n`pytest-asyncio <https://pytest-asyncio.readthedocs.io/en/latest/>`_ is a `pytest <https://docs.pytest.org/en/latest/contents.html>`_ plugin. It facilitates testing of code that uses the `asyncio <https://docs.python.org/3/library/asyncio.html>`_ library.\n\nSpecifically, pytest-asyncio provides support for coroutines as test functions. This allows users to *await* code inside their tests. For example, the following code is executed as a test item by pytest:\n\n.. code-block:: python\n\n    @pytest.mark.asyncio\n    async def test_some_asyncio_code():\n        res = await library.do_something()\n        assert b\"expected result\" == res\n\nMore details can be found in the `documentation <https://pytest-asyncio.readthedocs.io/en/latest/>`_.\n\nNote that test classes subclassing the standard `unittest <https://docs.python.org/3/library/unittest.html>`__ library are not supported. Users\nare advised to use `unittest.IsolatedAsyncioTestCase <https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase>`__\nor an async framework such as `asynctest <https://asynctest.readthedocs.io/en/latest>`__.\n\n\npytest-asyncio is available under the `Apache License 2.0 <https://github.com/pytest-dev/pytest-asyncio/blob/main/LICENSE>`_.\n\n\nInstallation\n------------\n\nTo install pytest-asyncio, simply:\n\n.. code-block:: bash\n\n    $ pip install pytest-asyncio\n\nThis is enough for pytest to pick up pytest-asyncio.\n\n\nContributing\n------------\nContributions are very welcome. Tests can be run with ``tox``, please ensure\nthe coverage at least stays the same before you submit a pull request.\n",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/pytest-dev/pytest-asyncio",
        "author": "Tin Tvrtković <tinchester@gmail.com>",
        "author_email": "tinchester@gmail.com",
        "license": "Apache 2.0",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Topic :: Software Development :: Testing",
          "Framework :: AsyncIO",
          "Framework :: Pytest",
          "Typing :: Typed"
        ],
        "requires_dist": [
          "pytest<9,>=8.2",
          "sphinx>=5.3; extra == \"docs\"",
          "sphinx-rtd-theme>=1.0; extra == \"docs\"",
          "coverage>=6.2; extra == \"testing\"",
          "hypothesis>=5.7.1; extra == \"testing\""
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Documentation, https://pytest-asyncio.readthedocs.io",
          "Changelog, https://pytest-asyncio.readthedocs.io/en/latest/reference/changelog.html",
          "Source Code, https://github.com/pytest-dev/pytest-asyncio",
          "Bug Tracker, https://github.com/pytest-dev/pytest-asyncio/issues"
        ],
        "provides_extra": [
          "docs",
          "testing"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/12/90/3c9ff0512038035f59d279fddeb79f5f1eccd8859f06d6163c58798b9487/certifi-2024.8.30-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=922820b53db7a7257ffbda3f597266d435245903d80737e34f8a45ff3e3230d8",
          "hashes": {
            "sha256": "922820b53db7a7257ffbda3f597266d435245903d80737e34f8a45ff3e3230d8"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "certifi",
        "version": "2024.8.30",
        "summary": "Python package for providing Mozilla's CA Bundle.",
        "description": "Certifi: Python SSL Certificates\n================================\n\nCertifi provides Mozilla's carefully curated collection of Root Certificates for\nvalidating the trustworthiness of SSL certificates while verifying the identity\nof TLS hosts. It has been extracted from the `Requests`_ project.\n\nInstallation\n------------\n\n``certifi`` is available on PyPI. Simply install it with ``pip``::\n\n    $ pip install certifi\n\nUsage\n-----\n\nTo reference the installed certificate authority (CA) bundle, you can use the\nbuilt-in function::\n\n    >>> import certifi\n\n    >>> certifi.where()\n    '/usr/local/lib/python3.7/site-packages/certifi/cacert.pem'\n\nOr from the command line::\n\n    $ python -m certifi\n    /usr/local/lib/python3.7/site-packages/certifi/cacert.pem\n\nEnjoy!\n\n.. _`Requests`: https://requests.readthedocs.io/en/master/\n\nAddition/Removal of Certificates\n--------------------------------\n\nCertifi does not support any addition/removal or other modification of the\nCA trust store content. This project is intended to provide a reliable and\nhighly portable root of trust to python deployments. Look to upstream projects\nfor methods to use alternate trust.\n",
        "home_page": "https://github.com/certifi/python-certifi",
        "author": "Kenneth Reitz",
        "author_email": "me@kennethreitz.com",
        "license": "MPL-2.0",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
          "Natural Language :: English",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.6",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12"
        ],
        "requires_python": ">=3.6",
        "project_url": [
          "Source, https://github.com/certifi/python-certifi"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/cd/88/e5910a33d783963974f3d949213db442f38fcc0aa76d5de85d18918be4f0/cibuildwheel-2.21.3-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f1d036a13603a6ce4019d8b1bd52c296cf32461a3b3be8441434b60b8b378b80",
          "hashes": {
            "sha256": "f1d036a13603a6ce4019d8b1bd52c296cf32461a3b3be8441434b60b8b378b80"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.3",
        "name": "cibuildwheel",
        "version": "2.21.3",
        "summary": "Build Python wheels on CI with minimal configuration.",
        "description": "cibuildwheel\n============\n\n[![PyPI](https://img.shields.io/pypi/v/cibuildwheel.svg)](https://pypi.python.org/pypi/cibuildwheel)\n[![Documentation Status](https://readthedocs.org/projects/cibuildwheel/badge/?version=stable)](https://cibuildwheel.pypa.io/en/stable/?badge=stable)\n[![Actions Status](https://github.com/pypa/cibuildwheel/workflows/Test/badge.svg)](https://github.com/pypa/cibuildwheel/actions)\n[![Travis Status](https://img.shields.io/travis/com/pypa/cibuildwheel/main?logo=travis)](https://travis-ci.com/pypa/cibuildwheel)\n[![Appveyor status](https://ci.appveyor.com/api/projects/status/gt3vwl88yt0y3hur/branch/main?svg=true)](https://ci.appveyor.com/project/joerick/cibuildwheel/branch/main)\n[![CircleCI Status](https://img.shields.io/circleci/build/gh/pypa/cibuildwheel/main?logo=circleci)](https://circleci.com/gh/pypa/cibuildwheel)\n[![Azure Status](https://dev.azure.com/joerick0429/cibuildwheel/_apis/build/status/pypa.cibuildwheel?branchName=main)](https://dev.azure.com/joerick0429/cibuildwheel/_build/latest?definitionId=4&branchName=main)\n\n\n[Documentation](https://cibuildwheel.pypa.io)\n\n<!--intro-start-->\n\nPython wheels are great. Building them across **Mac, Linux, Windows**, on **multiple versions of Python**, is not.\n\n`cibuildwheel` is here to help. `cibuildwheel` runs on your CI server - currently it supports GitHub Actions, Azure Pipelines, Travis CI, AppVeyor, CircleCI, and GitLab CI - and it builds and tests your wheels across all of your platforms.\n\n\nWhat does it do?\n----------------\n\n|                | macOS Intel | macOS Apple Silicon | Windows 64bit | Windows 32bit | Windows Arm64 | manylinux<br/>musllinux x86_64 | manylinux<br/>musllinux i686 | manylinux<br/>musllinux aarch64 | manylinux<br/>musllinux ppc64le | manylinux<br/>musllinux s390x | musllinux armv7l | Pyodide |\n|----------------|----|-----|-----|-----|-----|----|-----|----|-----|-----|---|-----|\n| CPython 3.6    | ✅ | N/A | ✅  | ✅  | N/A | ✅  | ✅  | ✅ | ✅  | ✅  | ✅ | N/A |\n| CPython 3.7    | ✅ | N/A | ✅  | ✅  | N/A | ✅ | ✅  | ✅ | ✅  | ✅  | ✅ | N/A |\n| CPython 3.8    | ✅ | ✅  | ✅  | ✅  | N/A | ✅ | ✅  | ✅ | ✅  | ✅  | ✅ | N/A |\n| CPython 3.9    | ✅ | ✅  | ✅  | ✅  | ✅² | ✅ | ✅ | ✅ | ✅  | ✅  | ✅ | N/A |\n| CPython 3.10   | ✅ | ✅  | ✅  | ✅  | ✅² | ✅ | ✅  | ✅ | ✅  | ✅  | ✅ | N/A |\n| CPython 3.11   | ✅ | ✅  | ✅  | ✅  | ✅² | ✅ | ✅  | ✅ | ✅  | ✅  | ✅ | N/A |\n| CPython 3.12   | ✅ | ✅  | ✅  | ✅  | ✅² | ✅ | ✅  | ✅ | ✅  | ✅  | ✅  | ✅⁴ |\n| CPython 3.13³  | ✅ | ✅  | ✅  | ✅  | ✅² | ✅ | ✅  | ✅ | ✅  | ✅  | ✅  | N/A |\n| PyPy 3.7 v7.3  | ✅ | N/A | ✅  | N/A | N/A | ✅¹ | ✅¹  | ✅¹ | N/A | N/A | N/A | N/A |\n| PyPy 3.8 v7.3  | ✅ | ✅  | ✅  | N/A | N/A | ✅¹ | ✅¹  | ✅¹ | N/A | N/A | N/A | N/A |\n| PyPy 3.9 v7.3  | ✅ | ✅  | ✅  | N/A | N/A | ✅¹ | ✅¹  | ✅¹ | N/A | N/A | N/A | N/A |\n| PyPy 3.10 v7.3 | ✅ | ✅  | ✅  | N/A | N/A | ✅¹ | ✅¹  | ✅¹ | N/A | N/A | N/A | N/A |\n\n<sup>¹ PyPy is only supported for manylinux wheels.</sup><br>\n<sup>² Windows arm64 support is experimental.</sup><br>\n<sup>³ Free-threaded mode requires opt-in using [`CIBW_FREE_THREADED_SUPPORT`](https://cibuildwheel.pypa.io/en/stable/options/#free-threaded-support).</sup><br>\n<sup>⁴ Experimental, not yet supported on PyPI, but can be used directly in web deployment. Use `--platform pyodide` to build.</sup><br>\n\n- Builds manylinux, musllinux, macOS 10.9+ (10.13+ for Python 3.12+), and Windows wheels for CPython and PyPy\n- Works on GitHub Actions, Azure Pipelines, Travis CI, AppVeyor, CircleCI, GitLab CI, and Cirrus CI\n- Bundles shared library dependencies on Linux and macOS through [auditwheel](https://github.com/pypa/auditwheel) and [delocate](https://github.com/matthew-brett/delocate)\n- Runs your library's tests against the wheel-installed version of your library\n\nSee the [cibuildwheel 1 documentation](https://cibuildwheel.pypa.io/en/1.x/) if you need to build unsupported versions of Python, such as Python 2.\n\nUsage\n-----\n\n`cibuildwheel` runs inside a CI service. Supported platforms depend on which service you're using:\n\n|                 | Linux | macOS | Windows | Linux ARM | macOS ARM | Windows ARM |\n|-----------------|-------|-------|---------|-----------|-----------|-------------|\n| GitHub Actions  | ✅    | ✅    | ✅       | ✅¹       | ✅        | ✅²         |\n| Azure Pipelines | ✅    | ✅    | ✅       |           | ✅        | ✅²         |\n| Travis CI       | ✅    |       | ✅      | ✅        |           |             |\n| AppVeyor        | ✅    | ✅    | ✅      |           | ✅        | ✅²         |\n| CircleCI        | ✅    | ✅    |         | ✅        | ✅        |             |\n| Gitlab CI       | ✅    | ✅    | ✅      | ✅¹       | ✅        |             |\n| Cirrus CI       | ✅    | ✅    | ✅      | ✅        | ✅        |             |\n\n<sup>¹ [Requires emulation](https://cibuildwheel.pypa.io/en/stable/faq/#emulation), distributed separately. Other services may also support Linux ARM through emulation or third-party build hosts, but these are not tested in our CI.</sup><br>\n<sup>² [Uses cross-compilation](https://cibuildwheel.pypa.io/en/stable/faq/#windows-arm64). It is not possible to test `arm64` on this CI platform.</sup>\n\n<!--intro-end-->\n\nExample setup\n-------------\n\nTo build manylinux, musllinux, macOS, and Windows wheels on GitHub Actions, you could use this `.github/workflows/wheels.yml`:\n\n```yaml\nname: Build\n\non: [push, pull_request]\n\njobs:\n  build_wheels:\n    name: Build wheels on ${{ matrix.os }}\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]\n\n    steps:\n      - uses: actions/checkout@v4\n\n      # Used to host cibuildwheel\n      - uses: actions/setup-python@v5\n\n      - name: Install cibuildwheel\n        run: python -m pip install cibuildwheel==2.21.3\n\n      - name: Build wheels\n        run: python -m cibuildwheel --output-dir wheelhouse\n        # to supply options, put them in 'env', like:\n        # env:\n        #   CIBW_SOME_OPTION: value\n\n      - uses: actions/upload-artifact@v4\n        with:\n          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}\n          path: ./wheelhouse/*.whl\n```\n\nFor more information, including PyPI deployment, and the use of other CI services or the dedicated GitHub Action, check out the [documentation](https://cibuildwheel.pypa.io) and the [examples](https://github.com/pypa/cibuildwheel/tree/main/examples).\n\nHow it works\n------------\n\nThe following diagram summarises the steps that cibuildwheel takes on each platform.\n\n![](docs/data/how-it-works.png)\n\n<sup>Explore an interactive version of this diagram [in the docs](https://cibuildwheel.pypa.io/en/stable/#how-it-works).</sup>\n\nOptions\n-------\n\n|   | Option | Description |\n|---|--------|-------------|\n| **Build selection** | [`CIBW_PLATFORM`](https://cibuildwheel.pypa.io/en/stable/options/#platform)  | Override the auto-detected target platform |\n|   | [`CIBW_BUILD`](https://cibuildwheel.pypa.io/en/stable/options/#build-skip)  <br> [`CIBW_SKIP`](https://cibuildwheel.pypa.io/en/stable/options/#build-skip)  | Choose the Python versions to build |\n|   | [`CIBW_ARCHS`](https://cibuildwheel.pypa.io/en/stable/options/#archs)  | Change the architectures built on your machine by default. |\n|   | [`CIBW_PROJECT_REQUIRES_PYTHON`](https://cibuildwheel.pypa.io/en/stable/options/#requires-python)  | Manually set the Python compatibility of your project |\n|   | [`CIBW_PRERELEASE_PYTHONS`](https://cibuildwheel.pypa.io/en/stable/options/#prerelease-pythons)  | Enable building with pre-release versions of Python if available |\n| **Build customization** | [`CIBW_BUILD_FRONTEND`](https://cibuildwheel.pypa.io/en/stable/options/#build-frontend)  | Set the tool to use to build, either \"pip\" (default for now) or \"build\" |\n|   | [`CIBW_ENVIRONMENT`](https://cibuildwheel.pypa.io/en/stable/options/#environment)  | Set environment variables needed during the build |\n|   | [`CIBW_ENVIRONMENT_PASS_LINUX`](https://cibuildwheel.pypa.io/en/stable/options/#environment-pass)  | Set environment variables on the host to pass-through to the container during the build. |\n|   | [`CIBW_BEFORE_ALL`](https://cibuildwheel.pypa.io/en/stable/options/#before-all)  | Execute a shell command on the build system before any wheels are built. |\n|   | [`CIBW_BEFORE_BUILD`](https://cibuildwheel.pypa.io/en/stable/options/#before-build)  | Execute a shell command preparing each wheel's build |\n|   | [`CIBW_REPAIR_WHEEL_COMMAND`](https://cibuildwheel.pypa.io/en/stable/options/#repair-wheel-command)  | Execute a shell command to repair each built wheel |\n|   | [`CIBW_MANYLINUX_*_IMAGE`<br/>`CIBW_MUSLLINUX_*_IMAGE`](https://cibuildwheel.pypa.io/en/stable/options/#linux-image)  | Specify alternative manylinux / musllinux Docker images |\n|   | [`CIBW_CONTAINER_ENGINE`](https://cibuildwheel.pypa.io/en/stable/options/#container-engine)  | Specify which container engine to use when building Linux wheels |\n|   | [`CIBW_DEPENDENCY_VERSIONS`](https://cibuildwheel.pypa.io/en/stable/options/#dependency-versions)  | Specify how cibuildwheel controls the versions of the tools it uses |\n| **Testing** | [`CIBW_TEST_COMMAND`](https://cibuildwheel.pypa.io/en/stable/options/#test-command)  | Execute a shell command to test each built wheel |\n|   | [`CIBW_BEFORE_TEST`](https://cibuildwheel.pypa.io/en/stable/options/#before-test)  | Execute a shell command before testing each wheel |\n|   | [`CIBW_TEST_REQUIRES`](https://cibuildwheel.pypa.io/en/stable/options/#test-requires)  | Install Python dependencies before running the tests |\n|   | [`CIBW_TEST_EXTRAS`](https://cibuildwheel.pypa.io/en/stable/options/#test-extras)  | Install your wheel for testing using extras_require |\n|   | [`CIBW_TEST_SKIP`](https://cibuildwheel.pypa.io/en/stable/options/#test-skip)  | Skip running tests on some builds |\n| **Other** | [`CIBW_BUILD_VERBOSITY`](https://cibuildwheel.pypa.io/en/stable/options/#build-verbosity)  | Increase/decrease the output of pip wheel |\n\nThese options can be specified in a pyproject.toml file, as well; see [configuration](https://cibuildwheel.pypa.io/en/stable/options/#configuration).\n\nWorking examples\n----------------\n\nHere are some repos that use cibuildwheel.\n\n<!-- START bin/projects.py -->\n\n<!-- this section is generated by bin/projects.py. Don't edit it directly, instead, edit docs/data/projects.yml -->\n\n| Name                              | CI | OS | Notes |\n|-----------------------------------|----|----|:------|\n| [scikit-learn][]                  | ![github icon][] | ![windows icon][] ![apple icon][] ![linux icon][] | The machine learning library. A complex but clean config using many of cibuildwheel's features to build a large project with Cython and C++ extensions.  |\n| [pytorch-fairseq][]               | ![github icon][] | ![apple icon][] ![linux icon][] | Facebook AI Research Sequence-to-Sequence Toolkit written in Python. |\n| [NumPy][]                         | ![github icon][] ![travisci icon][] | ![windows icon][] ![apple icon][] ![linux icon][] | The fundamental package for scientific computing with Python. |\n| [duckdb][]                        | ![github icon][] | ![apple icon][] ![linux icon][] ![windows icon][] | DuckDB is an analytical in-process SQL database management system |\n| [Tornado][]                       | ![github icon][] | ![linux icon][] ![apple icon][] ![windows icon][] | Tornado is a Python web framework and asynchronous networking library. Uses stable ABI for a small C extension. |\n| [NCNN][]                          | ![github icon][] | ![windows icon][] ![apple icon][] ![linux icon][] | ncnn is a high-performance neural network inference framework optimized for the mobile platform |\n| [Matplotlib][]                    | ![github icon][] | ![windows icon][] ![apple icon][] ![linux icon][] | The venerable Matplotlib, a Python library with C++ portions |\n| [Prophet][]                       | ![github icon][] | ![windows icon][] ![apple icon][] ![linux icon][] | Tool for producing high quality forecasts for time series data that has multiple seasonality with linear or non-linear growth. |\n| [MyPy][]                          | ![github icon][] | ![apple icon][] ![linux icon][] ![windows icon][] | The compiled version of MyPy using MyPyC. |\n| [Kivy][]                          | ![github icon][] | ![windows icon][] ![apple icon][] ![linux icon][] | Open source UI framework written in Python, running on Windows, Linux, macOS, Android and iOS |\n\n[scikit-learn]: https://github.com/scikit-learn/scikit-learn\n[pytorch-fairseq]: https://github.com/facebookresearch/fairseq\n[NumPy]: https://github.com/numpy/numpy\n[duckdb]: https://github.com/duckdb/duckdb\n[Tornado]: https://github.com/tornadoweb/tornado\n[NCNN]: https://github.com/Tencent/ncnn\n[Matplotlib]: https://github.com/matplotlib/matplotlib\n[Prophet]: https://github.com/facebook/prophet\n[MyPy]: https://github.com/mypyc/mypy_mypyc-wheels\n[Kivy]: https://github.com/kivy/kivy\n\n[appveyor icon]: docs/data/readme_icons/appveyor.svg\n[github icon]: docs/data/readme_icons/github.svg\n[azurepipelines icon]: docs/data/readme_icons/azurepipelines.svg\n[circleci icon]: docs/data/readme_icons/circleci.svg\n[gitlab icon]: docs/data/readme_icons/gitlab.svg\n[travisci icon]: docs/data/readme_icons/travisci.svg\n[cirrusci icon]: docs/data/readme_icons/cirrusci.svg\n[windows icon]: docs/data/readme_icons/windows.svg\n[apple icon]: docs/data/readme_icons/apple.svg\n[linux icon]: docs/data/readme_icons/linux.svg\n\n<!-- END bin/projects.py -->\n\n> ℹ️ That's just a handful, there are many more! Check out the [Working Examples](https://cibuildwheel.pypa.io/en/stable/working-examples) page in the docs.\n\nLegal note\n----------\n\nSince `cibuildwheel` repairs the wheel with `delocate` or `auditwheel`, it might automatically bundle dynamically linked libraries from the build machine.\n\nIt helps ensure that the library can run without any dependencies outside of the pip toolchain.\n\nThis is similar to static linking, so it might have some license implications. Check the license for any code you're pulling in to make sure that's allowed.\n\nChangelog\n=========\n\n<!-- START bin/update_readme_changelog.py -->\n\n<!-- this section was generated by bin/update_readme_changelog.py -- do not edit manually -->\n\n### v2.21.3\n\n_9 October 2024_\n\n- 🛠 Update CPython 3.13 to 3.13.0 final release (#2032)\n- 📚 Docs updates and tidy ups (#2035)\n\n### v2.21.2\n\n_2 October 2024_\n\n- ✨ Adds support for building 32-bit armv7l wheels on musllinux. On a Linux system with emulation set up, set [CIBW_ARCHS](https://cibuildwheel.pypa.io/en/stable/options/#archs) to `armv7l` on Linux to try it out if you're interested! (#2017)\n- 🐛 Fix Linux Podman builds on some systems (#2016)\n- ✨ Adds official support for running on Python 3.13 (#2026)\n- 🛠 Update CPython 3.13 to 3.13.0rc3 (#2029)\n\nNote: the default [manylinux image](https://cibuildwheel.pypa.io/en/stable/options/#linux-image) is **scheduled to change** from `manylinux2014` to `manylinux_2_28` in a cibuildwheel release on or after **6th May 2025** - you can set the value now to avoid getting upgraded if you want. (#1992)\n\n### v2.21.1\n\n_16 September 2024_\n\n- 🐛 Fix a bug in the Linux build, where files copied to the container would have invalid ownership permissions (#2007)\n- 🐛 Fix a bug on Windows where cibuildwheel would call upon `uv` to install dependencies for versions of CPython that it does not support (#2005)\n- 🐛 Fix a bug where `uv 0.4.10` would not use the right Python when testing on Linux. (#2008)\n- 🛠 Bump our documentation pins, fixes an issue with a missing package (#2011)\n\n### v2.21.0\n\n_13 September 2024_\n\n- ⚠️ Update CPython 3.12 to 3.12.6, which changes the macOS minimum deployment target on CPython 3.12 from macOS 10.9 to macOS 10.13 (#1998)\n- 🛠 Changes the behaviour when inheriting `config-settings` in TOML overrides - rather than extending each key, which is rarely useful, individual keys will override previously set values. (#1803)\n- 🛠 Update CPython 3.13 to 3.13.0rc2 (#1998)\n- ✨ Adds support for multiarch OCI images (#1961)\n- 🐛 Fixes some bugs building Linux wheels on macOS. (#1961)\n- ⚠️ Changes the minimum version of Docker/Podman to Docker API version 1.43, Podman API version 3. The only mainstream runner this should affect is Travis Graviton2 runners - if so you can [upgrade your version of Docker](https://github.com/pypa/cibuildwheel/pull/1961#issuecomment-2304060019). (#1961)\n\n\n### v2.20.0\n\n_4 August 2024_\n\n- 🌟 CPython 3.13 wheels are now built by default - without the `CIBW_PRERELEASE_PYTHONS` flag. It's time to build and upload these wheels to PyPI! This release includes CPython 3.13.0rc1, which is guaranteed to be ABI compatible with the final release. Free-threading is still behind a flag/config option. (#1950)\n- ✨ Provide a `CIBW_ALLOW_EMPTY` environment variable as an alternative to the command line flag. (#1937)\n- 🐛 Don't use uv on PyPy3.8 on Windows, it stopped working starting in 0.2.25. Note that PyPy 3.8 is EoL. (#1868)\n- 🛠 Set the `VSCMD_ARG_TGT_ARCH` variable based on target arch. (#1876)\n- 🛠 Undo cleaner output on pytest 8-8.2 now that 8.3 is out. (#1943)\n- 📚 Update examples to use Python 3.12 on host  (cibuildwheel will require Python 3.11+ on the host machine starting in October 2024) (#1919)\n\n<!-- END bin/update_readme_changelog.py -->\n\n---\n\nThat's the last few versions.\n\nℹ️ **Want more changelog? Head over to [the changelog page in the docs](https://cibuildwheel.pypa.io/en/stable/changelog/).**\n\n---\n\nContributing\n============\n\nFor more info on how to contribute to cibuildwheel, see the [docs](https://cibuildwheel.pypa.io/en/latest/contributing/).\n\nEveryone interacting with the cibuildwheel project via codebase, issue tracker, chat rooms, or otherwise is expected to follow the [PSF Code of Conduct](https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md).\n\nMaintainers\n-----------\n\n- Joe Rickerby [@joerick](https://github.com/joerick)\n- Yannick Jadoul [@YannickJadoul](https://github.com/YannickJadoul)\n- Matthieu Darbois [@mayeut](https://github.com/mayeut)\n- Henry Schreiner [@henryiii](https://github.com/henryiii)\n- Grzegorz Bokota [@Czaki](https://github.com/Czaki)\n\nCredits\n-------\n\n`cibuildwheel` stands on the shoulders of giants.\n\n- ⭐️ @matthew-brett for [multibuild](https://github.com/multi-build/multibuild) and [matthew-brett/delocate](http://github.com/matthew-brett/delocate)\n- @PyPA for the manylinux Docker images [pypa/manylinux](https://github.com/pypa/manylinux)\n- @ogrisel for [wheelhouse-uploader](https://github.com/ogrisel/wheelhouse-uploader) and `run_with_env.cmd`\n\nMassive props also to-\n\n- @zfrenchee for [help debugging many issues](https://github.com/pypa/cibuildwheel/issues/2)\n- @lelit for some great bug reports and [contributions](https://github.com/pypa/cibuildwheel/pull/73)\n- @mayeut for a [phenomenal PR](https://github.com/pypa/cibuildwheel/pull/71) patching Python itself for better compatibility!\n- @czaki for being a super-contributor over many PRs and helping out with countless issues!\n- @mattip for his help with adding PyPy support to cibuildwheel\n\nSee also\n========\n\nAnother very similar tool to consider is [matthew-brett/multibuild](http://github.com/matthew-brett/multibuild). `multibuild` is a shell script toolbox for building a wheel on various platforms. It is used as a basis to build some of the big data science tools, like SciPy.\n\nIf you are building Rust wheels, you can get by without some of the tricks required to make GLIBC work via manylinux; this is especially relevant for cross-compiling, which is easy with Rust. See [maturin-action](https://github.com/PyO3/maturin-action) for a tool that is optimized for building Rust wheels and cross-compiling.\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "appveyor",
          "ci",
          "linux",
          "macos",
          "packaging",
          "pypi",
          "travis",
          "wheel",
          "windows"
        ],
        "author_email": "Joe Rickerby <joerick@mac.com>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Natural Language :: English",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: Implementation :: CPython",
          "Topic :: Software Development :: Build Tools"
        ],
        "requires_dist": [
          "bashlex!=0.13",
          "bracex",
          "certifi",
          "filelock",
          "packaging>=20.9",
          "platformdirs",
          "tomli; python_version < '3.11'",
          "typing-extensions>=4.1.0; python_version < '3.11'",
          "click; extra == 'bin'",
          "packaging>=21.0; extra == 'bin'",
          "pip-tools; extra == 'bin'",
          "pygithub; extra == 'bin'",
          "pyyaml; extra == 'bin'",
          "requests; extra == 'bin'",
          "rich>=9.6; extra == 'bin'",
          "build; extra == 'dev'",
          "click; extra == 'dev'",
          "jinja2; extra == 'dev'",
          "packaging>=21.0; extra == 'dev'",
          "pip-tools; extra == 'dev'",
          "pygithub; extra == 'dev'",
          "pytest-timeout; extra == 'dev'",
          "pytest-xdist; extra == 'dev'",
          "pytest>=6; extra == 'dev'",
          "pyyaml; extra == 'dev'",
          "requests; extra == 'dev'",
          "rich>=9.6; extra == 'dev'",
          "setuptools; extra == 'dev'",
          "tomli-w; extra == 'dev'",
          "validate-pyproject; extra == 'dev'",
          "jinja2>=3.1.2; extra == 'docs'",
          "mkdocs-include-markdown-plugin==6.2.2; extra == 'docs'",
          "mkdocs-macros-plugin; extra == 'docs'",
          "mkdocs==1.6.1; extra == 'docs'",
          "pymdown-extensions; extra == 'docs'",
          "build; extra == 'test'",
          "jinja2; extra == 'test'",
          "pytest-timeout; extra == 'test'",
          "pytest-xdist; extra == 'test'",
          "pytest>=6; extra == 'test'",
          "setuptools; extra == 'test'",
          "tomli-w; extra == 'test'",
          "validate-pyproject; extra == 'test'",
          "uv; extra == 'uv'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Changelog, https://github.com/pypa/cibuildwheel#changelog",
          "Documentation, https://cibuildwheel.pypa.io",
          "Homepage, https://github.com/pypa/cibuildwheel"
        ],
        "provides_extra": [
          "bin",
          "dev",
          "docs",
          "test",
          "uv"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/08/aa/cc0199a5f0ad350994d660967a8efb233fe0416e4639146c089643407ce6/packaging-24.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=5b8f2217dbdbd2f7f384c41c628544e6d52f2d0f53c6d0c3ea61aa5d1d7ff124",
          "hashes": {
            "sha256": "5b8f2217dbdbd2f7f384c41c628544e6d52f2d0f53c6d0c3ea61aa5d1d7ff124"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "packaging",
        "version": "24.1",
        "summary": "Core utilities for Python packages",
        "description": "packaging\n=========\n\n.. start-intro\n\nReusable core utilities for various Python Packaging\n`interoperability specifications <https://packaging.python.org/specifications/>`_.\n\nThis library provides utilities that implement the interoperability\nspecifications which have clearly one correct behaviour (eg: :pep:`440`)\nor benefit greatly from having a single shared implementation (eg: :pep:`425`).\n\n.. end-intro\n\nThe ``packaging`` project includes the following: version handling, specifiers,\nmarkers, requirements, tags, utilities.\n\nDocumentation\n-------------\n\nThe `documentation`_ provides information and the API for the following:\n\n- Version Handling\n- Specifiers\n- Markers\n- Requirements\n- Tags\n- Utilities\n\nInstallation\n------------\n\nUse ``pip`` to install these utilities::\n\n    pip install packaging\n\nThe ``packaging`` library uses calendar-based versioning (``YY.N``).\n\nDiscussion\n----------\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nYou can also join ``#pypa`` on Freenode to ask questions or get involved.\n\n\n.. _`documentation`: https://packaging.pypa.io/\n.. _`issue tracker`: https://github.com/pypa/packaging/issues\n\n\nCode of Conduct\n---------------\n\nEveryone interacting in the packaging project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the `PSF Code of Conduct`_.\n\n.. _PSF Code of Conduct: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\n\nContributing\n------------\n\nThe ``CONTRIBUTING.rst`` file outlines how to contribute to this project as\nwell as how to report a potential security issue. The documentation for this\nproject also covers information about `project development`_ and `security`_.\n\n.. _`project development`: https://packaging.pypa.io/en/latest/development/\n.. _`security`: https://packaging.pypa.io/en/latest/security/\n\nProject History\n---------------\n\nPlease review the ``CHANGELOG.rst`` file or the `Changelog documentation`_ for\nrecent changes and project history.\n\n.. _`Changelog documentation`: https://packaging.pypa.io/en/latest/changelog/\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Donald Stufft <donald@stufft.io>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Typing :: Typed"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Documentation, https://packaging.pypa.io/",
          "Source, https://github.com/pypa/packaging"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/31/80/3a54838c3fb461f6fec263ebf3a3a41771bd05190238de3486aae8540c36/jinja2-3.1.4-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=bc5dd2abb727a5319567b7a813e6a2e7318c39f4f487cfe6c89c6f9c7d25197d",
          "hashes": {
            "sha256": "bc5dd2abb727a5319567b7a813e6a2e7318c39f4f487cfe6c89c6f9c7d25197d"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "Jinja2",
        "version": "3.1.4",
        "summary": "A very fast and expressive template engine.",
        "description": "# Jinja\n\nJinja is a fast, expressive, extensible templating engine. Special\nplaceholders in the template allow writing code similar to Python\nsyntax. Then the template is passed data to render the final document.\n\nIt includes:\n\n-   Template inheritance and inclusion.\n-   Define and import macros within templates.\n-   HTML templates can use autoescaping to prevent XSS from untrusted\n    user input.\n-   A sandboxed environment can safely render untrusted templates.\n-   AsyncIO support for generating templates and calling async\n    functions.\n-   I18N support with Babel.\n-   Templates are compiled to optimized Python code just-in-time and\n    cached, or can be compiled ahead-of-time.\n-   Exceptions point to the correct line in templates to make debugging\n    easier.\n-   Extensible filters, tests, functions, and even syntax.\n\nJinja's philosophy is that while application logic belongs in Python if\npossible, it shouldn't make the template designer's job difficult by\nrestricting functionality too much.\n\n\n## In A Nutshell\n\n.. code-block:: jinja\n\n    {% extends \"base.html\" %}\n    {% block title %}Members{% endblock %}\n    {% block content %}\n      <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.url }}\">{{ user.username }}</a></li>\n      {% endfor %}\n      </ul>\n    {% endblock %}\n\n\n## Donate\n\nThe Pallets organization develops and supports Jinja and other popular\npackages. In order to grow the community of contributors and users, and\nallow the maintainers to devote more time to the projects, [please\ndonate today][].\n\n[please donate today]: https://palletsprojects.com/donate\n\n",
        "description_content_type": "text/markdown",
        "maintainer_email": "Pallets <contact@palletsprojects.com>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
          "Topic :: Text Processing :: Markup :: HTML",
          "Typing :: Typed"
        ],
        "requires_dist": [
          "MarkupSafe>=2.0",
          "Babel>=2.7 ; extra == \"i18n\""
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Changes, https://jinja.palletsprojects.com/changes/",
          "Chat, https://discord.gg/pallets",
          "Documentation, https://jinja.palletsprojects.com/",
          "Donate, https://palletsprojects.com/donate",
          "Source, https://github.com/pallets/jinja/"
        ],
        "provides_extra": [
          "i18n"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/f3/f0/89e7aadfb3749d0f52234a0c8c7867877876e0a20b60e2188e9850794c17/MarkupSafe-3.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=e17c96c14e19278594aa4841ec148115f9c7615a47382ecb6b82bd8fea3ab0c8",
          "hashes": {
            "sha256": "e17c96c14e19278594aa4841ec148115f9c7615a47382ecb6b82bd8fea3ab0c8"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "MarkupSafe",
        "version": "3.0.2",
        "summary": "Safely add untrusted strings to HTML/XML markup.",
        "description": "# MarkupSafe\n\nMarkupSafe implements a text object that escapes characters so it is\nsafe to use in HTML and XML. Characters that have special meanings are\nreplaced so that they display as the actual characters. This mitigates\ninjection attacks, meaning untrusted user input can safely be displayed\non a page.\n\n\n## Examples\n\n```pycon\n>>> from markupsafe import Markup, escape\n\n>>> # escape replaces special characters and wraps in Markup\n>>> escape(\"<script>alert(document.cookie);</script>\")\nMarkup('&lt;script&gt;alert(document.cookie);&lt;/script&gt;')\n\n>>> # wrap in Markup to mark text \"safe\" and prevent escaping\n>>> Markup(\"<strong>Hello</strong>\")\nMarkup('<strong>hello</strong>')\n\n>>> escape(Markup(\"<strong>Hello</strong>\"))\nMarkup('<strong>hello</strong>')\n\n>>> # Markup is a str subclass\n>>> # methods and operators escape their arguments\n>>> template = Markup(\"Hello <em>{name}</em>\")\n>>> template.format(name='\"World\"')\nMarkup('Hello <em>&#34;World&#34;</em>')\n```\n\n## Donate\n\nThe Pallets organization develops and supports MarkupSafe and other\npopular packages. In order to grow the community of contributors and\nusers, and allow the maintainers to devote more time to the projects,\n[please donate today][].\n\n[please donate today]: https://palletsprojects.com/donate\n",
        "description_content_type": "text/markdown",
        "maintainer_email": "Pallets <contact@palletsprojects.com>",
        "license": "Copyright 2010 Pallets\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1.  Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
          "Topic :: Text Processing :: Markup :: HTML",
          "Typing :: Typed"
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Donate, https://palletsprojects.com/donate",
          "Documentation, https://markupsafe.palletsprojects.com/",
          "Changes, https://markupsafe.palletsprojects.com/changes/",
          "Source, https://github.com/pallets/markupsafe/",
          "Chat, https://discord.gg/pallets"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/d9/dd/e0aa7ebef5168c75b772eda64978c597a9129b46be17779054652a7999e4/pyOpenSSL-24.2.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=967d5719b12b243588573f39b0c677637145c7a1ffedcd495a487e58177fbb8d",
          "hashes": {
            "sha256": "967d5719b12b243588573f39b0c677637145c7a1ffedcd495a487e58177fbb8d"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pyOpenSSL",
        "version": "24.2.1",
        "summary": "Python wrapper module around the OpenSSL library",
        "description": "========================================================\npyOpenSSL -- A Python wrapper around the OpenSSL library\n========================================================\n\n.. image:: https://readthedocs.org/projects/pyopenssl/badge/?version=stable\n   :target: https://pyopenssl.org/en/stable/\n   :alt: Stable Docs\n\n.. image:: https://github.com/pyca/pyopenssl/workflows/CI/badge.svg?branch=main\n   :target: https://github.com/pyca/pyopenssl/actions?query=workflow%3ACI+branch%3Amain\n\n.. image:: https://codecov.io/github/pyca/pyopenssl/branch/main/graph/badge.svg\n   :target: https://codecov.io/github/pyca/pyopenssl\n   :alt: Test coverage\n\n**Note:** The Python Cryptographic Authority **strongly suggests** the use of `pyca/cryptography`_\nwhere possible. If you are using pyOpenSSL for anything other than making a TLS connection\n**you should move to cryptography and drop your pyOpenSSL dependency**.\n\nHigh-level wrapper around a subset of the OpenSSL library. Includes\n\n* ``SSL.Connection`` objects, wrapping the methods of Python's portable sockets\n* Callbacks written in Python\n* Extensive error-handling mechanism, mirroring OpenSSL's error codes\n\n... and much more.\n\nYou can find more information in the documentation_.\nDevelopment takes place on GitHub_.\n\n\nDiscussion\n==========\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nWe maintain a cryptography-dev_ mailing list for both user and development discussions.\n\nYou can also join ``#pyca`` on ``irc.libera.chat`` to ask questions or get involved.\n\n\n.. _documentation: https://pyopenssl.org/\n.. _`issue tracker`: https://github.com/pyca/pyopenssl/issues\n.. _cryptography-dev: https://mail.python.org/mailman/listinfo/cryptography-dev\n.. _GitHub: https://github.com/pyca/pyopenssl\n.. _`pyca/cryptography`: https://github.com/pyca/cryptography\n\n\nRelease Information\n===================\n\n24.2.1 (2024-07-20)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- Fixed changelog to remove sphinx specific restructured text strings.\n\n\n24.2.0 (2024-07-20)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeprecations:\n^^^^^^^^^^^^^\n\n- Deprecated ``OpenSSL.crypto.X509Req``, ``OpenSSL.crypto.load_certificate_request``, ``OpenSSL.crypto.dump_certificate_request``. Instead, ``cryptography.x509.CertificateSigningRequest``, ``cryptography.x509.CertificateSigningRequestBuilder``, ``cryptography.x509.load_der_x509_csr``, or ``cryptography.x509.load_pem_x509_csr`` should be used.\n\nChanges:\n^^^^^^^^\n\n- Added type hints for the ``SSL`` module.\n  `#1308 <https://github.com/pyca/pyopenssl/pull/1308>`_.\n- Changed ``OpenSSL.crypto.PKey.from_cryptography_key`` to accept public and private EC, ED25519, ED448 keys.\n  `#1310 <https://github.com/pyca/pyopenssl/pull/1310>`_.\n\n24.1.0 (2024-03-09)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n* Removed the deprecated ``OpenSSL.crypto.PKCS12`` and\n  ``OpenSSL.crypto.NetscapeSPKI``. ``OpenSSL.crypto.PKCS12`` may be replaced\n  by the PKCS#12 APIs in the ``cryptography`` package.\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n24.0.0 (2024-01-22)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- Added ``OpenSSL.SSL.Connection.get_selected_srtp_profile`` to determine which SRTP profile was negotiated.\n  `#1279 <https://github.com/pyca/pyopenssl/pull/1279>`_.\n\n23.3.0 (2023-10-25)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Dropped support for Python 3.6.\n- The minimum ``cryptography`` version is now 41.0.5.\n- Removed ``OpenSSL.crypto.load_pkcs7`` and ``OpenSSL.crypto.load_pkcs12`` which had been deprecated for 3 years.\n- Added ``OpenSSL.SSL.OP_LEGACY_SERVER_CONNECT`` to allow legacy insecure renegotiation between OpenSSL and unpatched servers.\n  `#1234 <https://github.com/pyca/pyopenssl/pull/1234>`_.\n\nDeprecations:\n^^^^^^^^^^^^^\n\n- Deprecated ``OpenSSL.crypto.PKCS12`` (which was intended to have been deprecated at the same time as ``OpenSSL.crypto.load_pkcs12``).\n- Deprecated ``OpenSSL.crypto.NetscapeSPKI``.\n- Deprecated ``OpenSSL.crypto.CRL``\n- Deprecated ``OpenSSL.crypto.Revoked``\n- Deprecated ``OpenSSL.crypto.load_crl`` and ``OpenSSL.crypto.dump_crl``\n- Deprecated ``OpenSSL.crypto.sign`` and ``OpenSSL.crypto.verify``\n- Deprecated ``OpenSSL.crypto.X509Extension``\n\nChanges:\n^^^^^^^^\n\n- Changed ``OpenSSL.crypto.X509Store.add_crl`` to also accept\n  ``cryptography``'s ``x509.CertificateRevocationList`` arguments in addition\n  to the now deprecated ``OpenSSL.crypto.CRL`` arguments.\n- Fixed ``test_set_default_verify_paths`` test so that it is skipped if no\n  network connection is available.\n\n23.2.0 (2023-05-30)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Removed ``X509StoreFlags.NOTIFY_POLICY``.\n  `#1213 <https://github.com/pyca/pyopenssl/pull/1213>`_.\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- ``cryptography`` maximum version has been increased to 41.0.x.\n- Invalid versions are now rejected in ``OpenSSL.crypto.X509Req.set_version``.\n- Added ``X509VerificationCodes`` to ``OpenSSL.SSL``.\n  `#1202 <https://github.com/pyca/pyopenssl/pull/1202>`_.\n\n23.1.1 (2023-03-28)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- Worked around an issue in OpenSSL 3.1.0 which caused `X509Extension.get_short_name` to raise an exception when no short name was known to OpenSSL.\n  `#1204 <https://github.com/pyca/pyopenssl/pull/1204>`_.\n\n23.1.0 (2023-03-24)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- ``cryptography`` maximum version has been increased to 40.0.x.\n- Add ``OpenSSL.SSL.Connection.DTLSv1_get_timeout`` and ``OpenSSL.SSL.Connection.DTLSv1_handle_timeout``\n  to support DTLS timeouts `#1180 <https://github.com/pyca/pyopenssl/pull/1180>`_.\n\n23.0.0 (2023-01-01)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- Add ``OpenSSL.SSL.X509StoreFlags.PARTIAL_CHAIN`` constant to allow for users\n  to perform certificate verification on partial certificate chains.\n  `#1166 <https://github.com/pyca/pyopenssl/pull/1166>`_\n- ``cryptography`` maximum version has been increased to 39.0.x.\n\n22.1.0 (2022-09-25)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Remove support for SSLv2 and SSLv3.\n- The minimum ``cryptography`` version is now 38.0.x (and we now pin releases\n  against ``cryptography`` major versions to prevent future breakage)\n- The ``OpenSSL.crypto.X509StoreContextError`` exception has been refactored,\n  changing its internal attributes.\n  `#1133 <https://github.com/pyca/pyopenssl/pull/1133>`_\n\nDeprecations:\n^^^^^^^^^^^^^\n\n- ``OpenSSL.SSL.SSLeay_version`` is deprecated in favor of\n  ``OpenSSL.SSL.OpenSSL_version``. The constants ``OpenSSL.SSL.SSLEAY_*`` are\n  deprecated in favor of ``OpenSSL.SSL.OPENSSL_*``.\n\nChanges:\n^^^^^^^^\n\n- Add ``OpenSSL.SSL.Connection.set_verify`` and ``OpenSSL.SSL.Connection.get_verify_mode``\n  to override the context object's verification flags.\n  `#1073 <https://github.com/pyca/pyopenssl/pull/1073>`_\n- Add ``OpenSSL.SSL.Connection.use_certificate`` and ``OpenSSL.SSL.Connection.use_privatekey``\n  to set a certificate per connection (and not just per context) `#1121 <https://github.com/pyca/pyopenssl/pull/1121>`_.\n\n22.0.0 (2022-01-29)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Drop support for Python 2.7.\n  `#1047 <https://github.com/pyca/pyopenssl/pull/1047>`_\n- The minimum ``cryptography`` version is now 35.0.\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- Expose wrappers for some `DTLS\n  <https://en.wikipedia.org/wiki/Datagram_Transport_Layer_Security>`_\n  primitives. `#1026 <https://github.com/pyca/pyopenssl/pull/1026>`_\n\n21.0.0 (2021-09-28)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- The minimum ``cryptography`` version is now 3.3.\n- Drop support for Python 3.5\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- Raise an error when an invalid ALPN value is set.\n  `#993 <https://github.com/pyca/pyopenssl/pull/993>`_\n- Added ``OpenSSL.SSL.Context.set_min_proto_version`` and ``OpenSSL.SSL.Context.set_max_proto_version``\n  to set the minimum and maximum supported TLS version `#985 <https://github.com/pyca/pyopenssl/pull/985>`_.\n- Updated ``to_cryptography`` and ``from_cryptography`` methods to support an upcoming release of ``cryptography`` without raising deprecation warnings.\n  `#1030 <https://github.com/pyca/pyopenssl/pull/1030>`_\n\n20.0.1 (2020-12-15)\n-------------------\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeprecations:\n^^^^^^^^^^^^^\n\nChanges:\n^^^^^^^^\n\n- Fixed compatibility with OpenSSL 1.1.0.\n\n20.0.0 (2020-11-27)\n-------------------\n\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- The minimum ``cryptography`` version is now 3.2.\n- Remove deprecated ``OpenSSL.tsafe`` module.\n- Removed deprecated ``OpenSSL.SSL.Context.set_npn_advertise_callback``, ``OpenSSL.SSL.Context.set_npn_select_callback``, and ``OpenSSL.SSL.Connection.get_next_proto_negotiated``.\n- Drop support for Python 3.4\n- Drop support for OpenSSL 1.0.1 and 1.0.2\n\nDeprecations:\n^^^^^^^^^^^^^\n\n- Deprecated ``OpenSSL.crypto.load_pkcs7`` and ``OpenSSL.crypto.load_pkcs12``.\n\nChanges:\n^^^^^^^^\n\n- Added a new optional ``chain`` parameter to ``OpenSSL.crypto.X509StoreContext()``\n  where additional untrusted certificates can be specified to help chain building.\n  `#948 <https://github.com/pyca/pyopenssl/pull/948>`_\n- Added ``OpenSSL.crypto.X509Store.load_locations`` to set trusted\n  certificate file bundles and/or directories for verification.\n  `#943 <https://github.com/pyca/pyopenssl/pull/943>`_\n- Added ``Context.set_keylog_callback`` to log key material.\n  `#910 <https://github.com/pyca/pyopenssl/pull/910>`_\n- Added ``OpenSSL.SSL.Connection.get_verified_chain`` to retrieve the\n  verified certificate chain of the peer.\n  `#894 <https://github.com/pyca/pyopenssl/pull/894>`_.\n- Make verification callback optional in ``Context.set_verify``.\n  If omitted, OpenSSL's default verification is used.\n  `#933 <https://github.com/pyca/pyopenssl/pull/933>`_\n- Fixed a bug that could truncate or cause a zero-length key error due to a\n  null byte in private key passphrase in ``OpenSSL.crypto.load_privatekey``\n  and ``OpenSSL.crypto.dump_privatekey``.\n  `#947 <https://github.com/pyca/pyopenssl/pull/947>`_\n\n19.1.0 (2019-11-18)\n-------------------\n\n\nBackward-incompatible changes:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n- Removed deprecated ``ContextType``, ``ConnectionType``, ``PKeyType``, ``X509NameType``, ``X509ReqType``, ``X509Type``, ``X509StoreType``, ``CRLType``, ``PKCS7Type``, ``PKCS12Type``, and ``NetscapeSPKIType`` aliases.\n  Use the classes without the ``Type`` suffix instead.\n  `#814 <https://github.com/pyca/pyopenssl/pull/814>`_\n- The minimum ``cryptography`` version is now 2.8 due to issues on macOS with a transitive dependency.\n  `#875 <https://github.com/pyca/pyopenssl/pull/875>`_\n\nDeprecations:\n^^^^^^^^^^^^^\n\n- Deprecated ``OpenSSL.SSL.Context.set_npn_advertise_callback``, ``OpenSSL.SSL.Context.set_npn_select_callback``, and ``OpenSSL.SSL.Connection.get_next_proto_negotiated``.\n  ALPN should be used instead.\n  `#820 <https://github.com/pyca/pyopenssl/pull/820>`_\n\n\nChanges:\n^^^^^^^^\n\n- Support ``bytearray`` in ``SSL.Connection.send()`` by using cffi's from_buffer.\n  `#852 <https://github.com/pyca/pyopenssl/pull/852>`_\n- The ``OpenSSL.SSL.Context.set_alpn_select_callback`` can return a new ``NO_OVERLAPPING_PROTOCOLS`` sentinel value\n  to allow a TLS handshake to complete without an application protocol.\n\n`Full changelog <https://pyopenssl.org/en/stable/changelog.html>`_.\n\n",
        "home_page": "https://pyopenssl.org/",
        "author": "The pyOpenSSL developers",
        "author_email": "cryptography-dev@python.org",
        "license": "Apache License, Version 2.0",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Security :: Cryptography",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: System :: Networking"
        ],
        "requires_dist": [
          "cryptography <44,>=41.0.5",
          "sphinx !=5.2.0,!=5.2.0.post0,!=7.2.5 ; extra == 'docs'",
          "sphinx-rtd-theme ; extra == 'docs'",
          "pytest-rerunfailures ; extra == 'test'",
          "pretend ; extra == 'test'",
          "pytest >=3.0.1 ; extra == 'test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Source, https://github.com/pyca/pyopenssl"
        ],
        "provides_extra": [
          "docs",
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/be/ec/2eb3cd785efd67806c46c13a17339708ddc346cbb684eade7a6e6f79536a/pyparsing-3.2.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=93d9577b88da0bbea8cc8334ee8b918ed014968fd2ec383e868fb8afb1ccef84",
          "hashes": {
            "sha256": "93d9577b88da0bbea8cc8334ee8b918ed014968fd2ec383e868fb8afb1ccef84"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pyparsing",
        "version": "3.2.0",
        "summary": "pyparsing module - Classes and methods to define and execute parsing grammars",
        "description": "PyParsing -- A Python Parsing Module\n====================================\n\n|Version| |Build Status| |Coverage| |License| |Python Versions| |Snyk Score|\n\nIntroduction\n============\n\nThe pyparsing module is an alternative approach to creating and\nexecuting simple grammars, vs. the traditional lex/yacc approach, or the\nuse of regular expressions. The pyparsing module provides a library of\nclasses that client code uses to construct the grammar directly in\nPython code.\n\n*[Since first writing this description of pyparsing in late 2003, this\ntechnique for developing parsers has become more widespread, under the\nname Parsing Expression Grammars - PEGs. See more information on PEGs*\n`here <https://en.wikipedia.org/wiki/Parsing_expression_grammar>`__\n*.]*\n\nHere is a program to parse ``\"Hello, World!\"`` (or any greeting of the form\n``\"salutation, addressee!\"``):\n\n.. code:: python\n\n    from pyparsing import Word, alphas\n    greet = Word(alphas) + \",\" + Word(alphas) + \"!\"\n    hello = \"Hello, World!\"\n    print(hello, \"->\", greet.parseString(hello))\n\nThe program outputs the following::\n\n    Hello, World! -> ['Hello', ',', 'World', '!']\n\nThe Python representation of the grammar is quite readable, owing to the\nself-explanatory class names, and the use of '+', '|' and '^' operator\ndefinitions.\n\nThe parsed results returned from ``parseString()`` is a collection of type\n``ParseResults``, which can be accessed as a\nnested list, a dictionary, or an object with named attributes.\n\nThe pyparsing module handles some of the problems that are typically\nvexing when writing text parsers:\n\n- extra or missing whitespace (the above program will also handle ``\"Hello,World!\"``, ``\"Hello , World !\"``, etc.)\n- quoted strings\n- embedded comments\n\nThe examples directory includes a simple SQL parser, simple CORBA IDL\nparser, a config file parser, a chemical formula parser, and a four-\nfunction algebraic notation parser, among many others.\n\nDocumentation\n=============\n\nThere are many examples in the online docstrings of the classes\nand methods in pyparsing. You can find them compiled into `online docs <https://pyparsing-docs.readthedocs.io/en/latest/>`__. Additional\ndocumentation resources and project info are listed in the online\n`GitHub wiki <https://github.com/pyparsing/pyparsing/wiki>`__. An\nentire directory of examples can be found `here <https://github.com/pyparsing/pyparsing/tree/master/examples>`__.\n\nLicense\n=======\n\nMIT License. See header of the `pyparsing __init__.py <https://github.com/pyparsing/pyparsing/blob/master/pyparsing/__init__.py#L1-L23>`__ file.\n\nHistory\n=======\n\nSee `CHANGES <https://github.com/pyparsing/pyparsing/blob/master/CHANGES>`__ file.\n\n.. |Build Status| image:: https://github.com/pyparsing/pyparsing/actions/workflows/ci.yml/badge.svg\n   :target: https://github.com/pyparsing/pyparsing/actions/workflows/ci.yml\n\n.. |Coverage| image:: https://codecov.io/gh/pyparsing/pyparsing/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/pyparsing/pyparsing\n\n.. |Version| image:: https://img.shields.io/pypi/v/pyparsing?style=flat-square\n    :target: https://pypi.org/project/pyparsing/\n    :alt: Version\n\n.. |License| image:: https://img.shields.io/pypi/l/pyparsing.svg?style=flat-square\n    :target: https://pypi.org/project/pyparsing/\n    :alt: License\n\n.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pyparsing.svg?style=flat-square\n    :target: https://pypi.org/project/python-liquid/\n    :alt: Python versions\n\n.. |Snyk Score| image:: https://snyk.io//advisor/python/pyparsing/badge.svg\n   :target: https://snyk.io//advisor/python/pyparsing\n   :alt: pyparsing\n\n",
        "description_content_type": "text/x-rst",
        "author_email": "Paul McGuire <ptmcg.gm+pyparsing@gmail.com>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Intended Audience :: Information Technology",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Compilers",
          "Topic :: Text Processing",
          "Typing :: Typed"
        ],
        "requires_dist": [
          "railroad-diagrams ; extra == \"diagrams\"",
          "jinja2 ; extra == \"diagrams\""
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Homepage, https://github.com/pyparsing/pyparsing/"
        ],
        "provides_extra": [
          "diagrams"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/36/3b/48e79f2cd6a61dbbd4807b4ed46cb564b4fd50a76166b1c4ea5c1d9e2371/pytest_cov-6.0.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=eee6f1b9e61008bd34975a4d5bab25801eb31898b032dd55addc93e96fcaaa35",
          "hashes": {
            "sha256": "eee6f1b9e61008bd34975a4d5bab25801eb31898b032dd55addc93e96fcaaa35"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pytest-cov",
        "version": "6.0.0",
        "summary": "Pytest plugin for measuring coverage.",
        "description": "========\nOverview\n========\n\n.. start-badges\n\n.. list-table::\n    :stub-columns: 1\n\n    * - docs\n      - |docs|\n    * - tests\n      - |github-actions|\n    * - package\n      - |version| |conda-forge| |wheel| |supported-versions| |supported-implementations| |commits-since|\n.. |docs| image:: https://readthedocs.org/projects/pytest-cov/badge/?style=flat\n    :target: https://readthedocs.org/projects/pytest-cov/\n    :alt: Documentation Status\n\n.. |github-actions| image:: https://github.com/pytest-dev/pytest-cov/actions/workflows/test.yml/badge.svg\n    :alt: GitHub Actions Status\n    :target: https://github.com/pytest-dev/pytest-cov/actions\n\n.. |version| image:: https://img.shields.io/pypi/v/pytest-cov.svg\n    :alt: PyPI Package latest release\n    :target: https://pypi.org/project/pytest-cov\n\n.. |conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pytest-cov.svg\n    :target: https://anaconda.org/conda-forge/pytest-cov\n.. |wheel| image:: https://img.shields.io/pypi/wheel/pytest-cov.svg\n    :alt: PyPI Wheel\n    :target: https://pypi.org/project/pytest-cov\n\n.. |supported-versions| image:: https://img.shields.io/pypi/pyversions/pytest-cov.svg\n    :alt: Supported versions\n    :target: https://pypi.org/project/pytest-cov\n\n.. |supported-implementations| image:: https://img.shields.io/pypi/implementation/pytest-cov.svg\n    :alt: Supported implementations\n    :target: https://pypi.org/project/pytest-cov\n\n.. |commits-since| image:: https://img.shields.io/github/commits-since/pytest-dev/pytest-cov/v6.0.0.svg\n    :alt: Commits since latest release\n    :target: https://github.com/pytest-dev/pytest-cov/compare/v6.0.0...master\n\n.. end-badges\n\nThis plugin produces coverage reports. Compared to just using ``coverage run`` this plugin does some extras:\n\n* Subprocess support: you can fork or run stuff in a subprocess and will get covered without any fuss.\n* Xdist support: you can use all of pytest-xdist's features and still get coverage.\n* Consistent pytest behavior. If you run ``coverage run -m pytest`` you will have slightly different ``sys.path`` (CWD will be\n  in it, unlike when running ``pytest``).\n\nAll features offered by the coverage package should work, either through pytest-cov's command line options or\nthrough coverage's config file.\n\n* Free software: MIT license\n\nInstallation\n============\n\nInstall with pip::\n\n    pip install pytest-cov\n\nFor distributed testing support install pytest-xdist::\n\n    pip install pytest-xdist\n\nUpgrading from ancient pytest-cov\n---------------------------------\n\n`pytest-cov 2.0` is using a new ``.pth`` file (``pytest-cov.pth``). You may want to manually remove the older\n``init_cov_core.pth`` from site-packages as it's not automatically removed.\n\nUninstalling\n------------\n\nUninstall with pip::\n\n    pip uninstall pytest-cov\n\nUnder certain scenarios a stray ``.pth`` file may be left around in site-packages.\n\n* `pytest-cov 2.0` may leave a ``pytest-cov.pth`` if you installed without wheels\n  (``easy_install``, ``setup.py install`` etc).\n* `pytest-cov 1.8 or older` will leave a ``init_cov_core.pth``.\n\nUsage\n=====\n\n::\n\n    pytest --cov=myproj tests/\n\nWould produce a report like::\n\n    -------------------- coverage: ... ---------------------\n    Name                 Stmts   Miss  Cover\n    ----------------------------------------\n    myproj/__init__          2      0   100%\n    myproj/myproj          257     13    94%\n    myproj/feature4286      94      7    92%\n    ----------------------------------------\n    TOTAL                  353     20    94%\n\nDocumentation\n=============\n\n    https://pytest-cov.readthedocs.io/en/latest/\n\n\n\n\n\n\nCoverage Data File\n==================\n\nThe data file is erased at the beginning of testing to ensure clean data for each test run. If you\nneed to combine the coverage of several test runs you can use the ``--cov-append`` option to append\nthis coverage data to coverage data from previous test runs.\n\nThe data file is left at the end of testing so that it is possible to use normal coverage tools to\nexamine it.\n\nLimitations\n===========\n\nFor distributed testing the workers must have the pytest-cov package installed. This is needed since\nthe plugin must be registered through setuptools for pytest to start the plugin on the\nworker.\n\nFor subprocess measurement environment variables must make it from the main process to the\nsubprocess. The python used by the subprocess must have pytest-cov installed. The subprocess must\ndo normal site initialisation so that the environment variables can be detected and coverage\nstarted. See the `subprocess support docs <https://pytest-cov.readthedocs.io/en/latest/subprocess-support.html>`_\nfor more details of how this works.\n\nSecurity\n========\n\nTo report a security vulnerability please use the `Tidelift security contact <https://tidelift.com/security>`_.\nTidelift will coordinate the fix and disclosure.\n\nAcknowledgements\n================\n\nWhilst this plugin has been built fresh from the ground up it has been influenced by the work done\non pytest-coverage (Ross Lawley, James Mills, Holger Krekel) and nose-cover (Jason Pellerin) which are\nother coverage plugins.\n\nNed Batchelder for coverage and its ability to combine the coverage results of parallel runs.\n\nHolger Krekel for pytest with its distributed testing support.\n\nJason Pellerin for nose.\n\nMichael Foord for unittest2.\n\nNo doubt others have contributed to these tools as well.\n\n\nChangelog\n=========\n\n6.0.0 (2024-10-29)\n------------------\n\n* Updated various documentation inaccuracies, especially on subprocess handling.\n* Changed fail under checks to use the precision set in the coverage configuration.\n  Now it will perform the check just like ``coverage report`` would.\n* Added a ``--cov-precision`` cli option that can override the value set in your coverage configuration.\n* Dropped support for now EOL Python 3.8.\n\n5.0.0 (2024-03-24)\n------------------\n\n* Removed support for xdist rsync (now deprecated).\n  Contributed by Matthias Reichenbach in `#623 <https://github.com/pytest-dev/pytest-cov/pull/623>`_.\n* Switched docs theme to Furo.\n* Various legacy Python cleanup and CI improvements.\n  Contributed by Christian Clauss and Hugo van Kemenade in\n  `#630 <https://github.com/pytest-dev/pytest-cov/pull/630>`_,\n  `#631 <https://github.com/pytest-dev/pytest-cov/pull/631>`_,\n  `#632 <https://github.com/pytest-dev/pytest-cov/pull/632>`_ and\n  `#633 <https://github.com/pytest-dev/pytest-cov/pull/633>`_.\n* Added a ``pyproject.toml`` example in the docs.\n  Contributed by Dawn James in `#626 <https://github.com/pytest-dev/pytest-cov/pull/626>`_.\n* Modernized project's pre-commit hooks to use ruff. Initial POC contributed by\n  Christian Clauss in `#584 <https://github.com/pytest-dev/pytest-cov/pull/584>`_.\n\n4.1.0 (2023-05-24)\n------------------\n\n* Updated CI with new Pythons and dependencies.\n* Removed rsyncdir support. This makes pytest-cov compatible with xdist 3.0.\n  Contributed by Sorin Sbarnea in `#558 <https://github.com/pytest-dev/pytest-cov/pull/558>`_.\n* Optimized summary generation to not be performed if no reporting is active (for example,\n  when ``--cov-report=''`` is used without ``--cov-fail-under``).\n  Contributed by Jonathan Stewmon in `#589 <https://github.com/pytest-dev/pytest-cov/pull/589>`_.\n* Added support for JSON reporting.\n  Contributed by Matthew Gamble in `#582 <https://github.com/pytest-dev/pytest-cov/pull/582>`_.\n* Refactored code to use f-strings.\n  Contributed by Mark Mayo in `#572 <https://github.com/pytest-dev/pytest-cov/pull/572>`_.\n* Fixed a skip in the test suite for some old xdist.\n  Contributed by a bunch of people in `#565 <https://github.com/pytest-dev/pytest-cov/pull/565>`_.\n\n\n4.0.0 (2022-09-28)\n------------------\n\n**Note that this release drops support for multiprocessing.**\n\n\n* `--cov-fail-under` no longer causes `pytest --collect-only` to fail\n  Contributed by Zac Hatfield-Dodds in `#511 <https://github.com/pytest-dev/pytest-cov/pull/511>`_.\n* Dropped support for multiprocessing (mostly because `issue 82408 <https://github.com/python/cpython/issues/82408>`_). This feature was\n  mostly working but very broken in certain scenarios and made the test suite very flaky and slow.\n\n  There is builtin multiprocessing support in coverage and you can migrate to that. All you need is this in your\n  ``.coveragerc``::\n\n    [run]\n    concurrency = multiprocessing\n    parallel = true\n    sigterm = true\n* Fixed deprecation in ``setup.py`` by trying to import setuptools before distutils.\n  Contributed by Ben Greiner in `#545 <https://github.com/pytest-dev/pytest-cov/pull/545>`_.\n* Removed undesirable new lines that were displayed while reporting was disabled.\n  Contributed by Delgan in `#540 <https://github.com/pytest-dev/pytest-cov/pull/540>`_.\n* Documentation fixes.\n  Contributed by Andre Brisco in `#543 <https://github.com/pytest-dev/pytest-cov/pull/543>`_\n  and Colin O'Dell in `#525 <https://github.com/pytest-dev/pytest-cov/pull/525>`_.\n* Added support for LCOV output format via `--cov-report=lcov`. Only works with coverage 6.3+.\n  Contributed by Christian Fetzer in `#536 <https://github.com/pytest-dev/pytest-cov/pull/536>`_.\n* Modernized pytest hook implementation.\n  Contributed by Bruno Oliveira in `#549 <https://github.com/pytest-dev/pytest-cov/pull/549>`_\n  and Ronny Pfannschmidt in `#550 <https://github.com/pytest-dev/pytest-cov/pull/550>`_.\n\n\n3.0.0 (2021-10-04)\n-------------------\n\n**Note that this release drops support for Python 2.7 and Python 3.5.**\n\n* Added support for Python 3.10 and updated various test dependencies.\n  Contributed by Hugo van Kemenade in\n  `#500 <https://github.com/pytest-dev/pytest-cov/pull/500>`_.\n* Switched from Travis CI to GitHub Actions. Contributed by Hugo van Kemenade in\n  `#494 <https://github.com/pytest-dev/pytest-cov/pull/494>`_ and\n  `#495 <https://github.com/pytest-dev/pytest-cov/pull/495>`_.\n* Add a ``--cov-reset`` CLI option.\n  Contributed by Danilo Šegan in\n  `#459 <https://github.com/pytest-dev/pytest-cov/pull/459>`_.\n* Improved validation of ``--cov-fail-under`` CLI option.\n  Contributed by ... Ronny Pfannschmidt's desire for skark in\n  `#480 <https://github.com/pytest-dev/pytest-cov/pull/480>`_.\n* Dropped Python 2.7 support.\n  Contributed by Thomas Grainger in\n  `#488 <https://github.com/pytest-dev/pytest-cov/pull/488>`_.\n* Updated trove classifiers. Contributed by Michał Bielawski in\n  `#481 <https://github.com/pytest-dev/pytest-cov/pull/481>`_.\n* Reverted change for `toml` requirement.\n  Contributed by Thomas Grainger in\n  `#477 <https://github.com/pytest-dev/pytest-cov/pull/477>`_.\n\n2.12.1 (2021-06-01)\n-------------------\n\n* Changed the `toml` requirement to be always be directly required (instead of being required through a coverage extra).\n  This fixes issues with pip-compile (`pip-tools#1300 <https://github.com/jazzband/pip-tools/issues/1300>`_).\n  Contributed by Sorin Sbarnea in `#472 <https://github.com/pytest-dev/pytest-cov/pull/472>`_.\n* Documented ``show_contexts``.\n  Contributed by Brian Rutledge in `#473 <https://github.com/pytest-dev/pytest-cov/pull/473>`_.\n\n2.12.0 (2021-05-14)\n-------------------\n\n* Added coverage's `toml` extra to install requirements in setup.py.\n  Contributed by Christian Riedel in `#410 <https://github.com/pytest-dev/pytest-cov/pull/410>`_.\n* Fixed ``pytest_cov.__version__`` to have the right value (string with version instead of a string\n  including ``__version__ =``).\n* Fixed license classifier in ``setup.py``.\n  Contributed by Chris Sreesangkom in `#467 <https://github.com/pytest-dev/pytest-cov/pull/467>`_.\n* Fixed *commits since* badge.\n  Contributed by Terence Honles in `#470 <https://github.com/pytest-dev/pytest-cov/pull/470>`_.\n\n2.11.1 (2021-01-20)\n-------------------\n\n* Fixed support for newer setuptools (v42+).\n  Contributed by Michał Górny in `#451 <https://github.com/pytest-dev/pytest-cov/pull/451>`_.\n\n2.11.0 (2021-01-18)\n-------------------\n\n* Bumped minimum coverage requirement to 5.2.1. This prevents reporting issues.\n  Contributed by Mateus Berardo de Souza Terra in `#433 <https://github.com/pytest-dev/pytest-cov/pull/433>`_.\n* Improved sample projects (from the `examples <https://github.com/pytest-dev/pytest-cov/tree/master/examples>`_\n  directory) to support running `tox -e pyXY`. Now the example configures a suffixed coverage data file,\n  and that makes the cleanup environment unnecessary.\n  Contributed by Ganden Schaffner in `#435 <https://github.com/pytest-dev/pytest-cov/pull/435>`_.\n* Removed the empty `console_scripts` entrypoint that confused some Gentoo build script.\n  I didn't ask why it was so broken cause I didn't want to ruin my day.\n  Contributed by Michał Górny in `#434 <https://github.com/pytest-dev/pytest-cov/pull/434>`_.\n* Fixed the missing `coverage context <https://coverage.readthedocs.io/en/latest/contexts.html>`_\n  when using subprocesses.\n  Contributed by Bernát Gábor in `#443 <https://github.com/pytest-dev/pytest-cov/pull/443>`_.\n* Updated the config section in the docs.\n  Contributed by Pamela McA'Nulty in `#429 <https://github.com/pytest-dev/pytest-cov/pull/429>`_.\n* Migrated CI to travis-ci.com (from .org).\n\n2.10.1 (2020-08-14)\n-------------------\n\n* Support for ``pytest-xdist`` 2.0, which breaks compatibility with ``pytest-xdist`` before 1.22.3 (from 2017).\n  Contributed by Zac Hatfield-Dodds in `#412 <https://github.com/pytest-dev/pytest-cov/pull/412>`_.\n* Fixed the ``LocalPath has no attribute startswith`` failure that occurred when using the ``pytester`` plugin\n  in inline mode.\n\n2.10.0 (2020-06-12)\n-------------------\n\n* Improved the ``--no-cov`` warning. Now it's only shown if ``--no-cov`` is present before ``--cov``.\n* Removed legacy pytest support. Changed ``setup.py`` so that ``pytest>=4.6`` is required.\n\n2.9.0 (2020-05-22)\n------------------\n\n* Fixed ``RemovedInPytest4Warning`` when using Pytest 3.10.\n  Contributed by Michael Manganiello in `#354 <https://github.com/pytest-dev/pytest-cov/pull/354>`_.\n* Made pytest startup faster when plugin not active by lazy-importing.\n  Contributed by Anders Hovmöller in `#339 <https://github.com/pytest-dev/pytest-cov/pull/339>`_.\n* Various CI improvements.\n  Contributed by Daniel Hahler in `#363 <https://github.com/pytest-dev/pytest-cov/pull/363>`_ and\n  `#364 <https://github.com/pytest-dev/pytest-cov/pull/364>`_.\n* Various Python support updates (drop EOL 3.4, test against 3.8 final).\n  Contributed by Hugo van Kemenade in\n  `#336 <https://github.com/pytest-dev/pytest-cov/pull/336>`_ and\n  `#367 <https://github.com/pytest-dev/pytest-cov/pull/367>`_.\n* Changed ``--cov-append`` to always enable ``data_suffix`` (a coverage setting).\n  Contributed by Harm Geerts in\n  `#387 <https://github.com/pytest-dev/pytest-cov/pull/387>`_.\n* Changed ``--cov-append`` to handle loading previous data better\n  (fixes various path aliasing issues).\n* Various other testing improvements, github issue templates, example updates.\n* Fixed internal failures that are caused by tests that change the current working directory by\n  ensuring a consistent working directory when coverage is called.\n  See `#306 <https://github.com/pytest-dev/pytest-cov/issues/306>`_ and\n  `coveragepy#881 <https://github.com/nedbat/coveragepy/issues/881>`_\n\n2.8.1 (2019-10-05)\n------------------\n\n* Fixed `#348 <https://github.com/pytest-dev/pytest-cov/issues/348>`_ -\n  regression when only certain reports (html or xml) are used then ``--cov-fail-under`` always fails.\n\n2.8.0 (2019-10-04)\n------------------\n\n* Fixed ``RecursionError`` that can occur when using\n  `cleanup_on_signal <https://pytest-cov.readthedocs.io/en/latest/subprocess-support.html#if-you-got-custom-signal-handling>`__ or\n  `cleanup_on_sigterm <https://pytest-cov.readthedocs.io/en/latest/subprocess-support.html#if-you-got-custom-signal-handling>`__.\n  See: `#294 <https://github.com/pytest-dev/pytest-cov/issues/294>`_.\n  The 2.7.x releases of pytest-cov should be considered broken regarding aforementioned cleanup API.\n* Added compatibility with future xdist release that deprecates some internals\n  (match pytest-xdist master/worker terminology).\n  Contributed by Thomas Grainger in `#321 <https://github.com/pytest-dev/pytest-cov/pull/321>`_\n* Fixed breakage that occurs when multiple reporting options are used.\n  Contributed by Thomas Grainger in `#338 <https://github.com/pytest-dev/pytest-cov/pull/338>`_.\n* Changed internals to use a stub instead of ``os.devnull``.\n  Contributed by Thomas Grainger in `#332 <https://github.com/pytest-dev/pytest-cov/pull/332>`_.\n* Added support for Coverage 5.0.\n  Contributed by Ned Batchelder in `#319 <https://github.com/pytest-dev/pytest-cov/pull/319>`_.\n* Added support for float values in ``--cov-fail-under``.\n  Contributed by Martín Gaitán in `#311 <https://github.com/pytest-dev/pytest-cov/pull/311>`_.\n* Various documentation fixes. Contributed by\n  Juanjo Bazán,\n  Andrew Murray and\n  Albert Tugushev in\n  `#298 <https://github.com/pytest-dev/pytest-cov/pull/298>`_,\n  `#299 <https://github.com/pytest-dev/pytest-cov/pull/299>`_ and\n  `#307 <https://github.com/pytest-dev/pytest-cov/pull/307>`_.\n* Various testing improvements. Contributed by\n  Ned Batchelder,\n  Daniel Hahler,\n  Ionel Cristian Mărieș and\n  Hugo van Kemenade in\n  `#313 <https://github.com/pytest-dev/pytest-cov/pull/313>`_,\n  `#314 <https://github.com/pytest-dev/pytest-cov/pull/314>`_,\n  `#315 <https://github.com/pytest-dev/pytest-cov/pull/315>`_,\n  `#316 <https://github.com/pytest-dev/pytest-cov/pull/316>`_,\n  `#325 <https://github.com/pytest-dev/pytest-cov/pull/325>`_,\n  `#326 <https://github.com/pytest-dev/pytest-cov/pull/326>`_,\n  `#334 <https://github.com/pytest-dev/pytest-cov/pull/334>`_ and\n  `#335 <https://github.com/pytest-dev/pytest-cov/pull/335>`_.\n* Added the ``--cov-context`` CLI options that enables coverage contexts. Only works with coverage 5.0+.\n  Contributed by Ned Batchelder in `#345 <https://github.com/pytest-dev/pytest-cov/pull/345>`_.\n\n2.7.1 (2019-05-03)\n------------------\n\n* Fixed source distribution manifest so that garbage ain't included in the tarball.\n\n2.7.0 (2019-05-03)\n------------------\n\n* Fixed ``AttributeError: 'NoneType' object has no attribute 'configure_node'`` error when ``--no-cov`` is used.\n  Contributed by Alexander Shadchin in `#263 <https://github.com/pytest-dev/pytest-cov/pull/263>`_.\n* Various testing and CI improvements. Contributed by Daniel Hahler in\n  `#255 <https://github.com/pytest-dev/pytest-cov/pull/255>`_,\n  `#266 <https://github.com/pytest-dev/pytest-cov/pull/266>`_,\n  `#272 <https://github.com/pytest-dev/pytest-cov/pull/272>`_,\n  `#271 <https://github.com/pytest-dev/pytest-cov/pull/271>`_ and\n  `#269 <https://github.com/pytest-dev/pytest-cov/pull/269>`_.\n* Improved ``pytest_cov.embed.cleanup_on_sigterm`` to be reentrant (signal deliveries while signal handling is\n  running won't break stuff).\n* Added ``pytest_cov.embed.cleanup_on_signal`` for customized cleanup.\n* Improved cleanup code and fixed various issues with leftover data files. All contributed in\n  `#265 <https://github.com/pytest-dev/pytest-cov/pull/265>`_ or\n  `#262 <https://github.com/pytest-dev/pytest-cov/pull/262>`_.\n* Improved examples. Now there are two examples for the common project layouts, complete with working coverage\n  configuration. The examples have CI testing. Contributed in\n  `#267 <https://github.com/pytest-dev/pytest-cov/pull/267>`_.\n* Improved help text for CLI options.\n\n2.6.1 (2019-01-07)\n------------------\n\n* Added support for Pytest 4.1. Contributed by Daniel Hahler and Семён Марьясин in\n  `#253 <https://github.com/pytest-dev/pytest-cov/pull/253>`_ and\n  `#230 <https://github.com/pytest-dev/pytest-cov/pull/230>`_.\n* Various test and docs fixes. Contributed by Daniel Hahler in\n  `#224 <https://github.com/pytest-dev/pytest-cov/pull/224>`_ and\n  `#223 <https://github.com/pytest-dev/pytest-cov/pull/223>`_.\n* Fixed the \"Module already imported\" issue (`#211 <https://github.com/pytest-dev/pytest-cov/issues/211>`_).\n  Contributed by Daniel Hahler in `#228 <https://github.com/pytest-dev/pytest-cov/pull/228>`_.\n\n2.6.0 (2018-09-03)\n------------------\n\n* Dropped support for Python 3 < 3.4, Pytest < 3.5 and Coverage < 4.4.\n* Fixed some documentation formatting. Contributed by Jean Jordaan and Julian.\n* Added an example with ``addopts`` in documentation. Contributed by Samuel Giffard in\n  `#195 <https://github.com/pytest-dev/pytest-cov/pull/195>`_.\n* Fixed ``TypeError: 'NoneType' object is not iterable`` in certain xdist configurations. Contributed by Jeremy Bowman in\n  `#213 <https://github.com/pytest-dev/pytest-cov/pull/213>`_.\n* Added a ``no_cover`` marker and fixture. Fixes\n  `#78 <https://github.com/pytest-dev/pytest-cov/issues/78>`_.\n* Fixed broken ``no_cover`` check when running doctests. Contributed by Terence Honles in\n  `#200 <https://github.com/pytest-dev/pytest-cov/pull/200>`_.\n* Fixed various issues with path normalization in reports (when combining coverage data from parallel mode). Fixes\n  `#130 <https://github.com/pytest-dev/pytest-cov/issues/161>`_.\n  Contributed by Ryan Hiebert & Ionel Cristian Mărieș in\n  `#178 <https://github.com/pytest-dev/pytest-cov/pull/178>`_.\n* Report generation failures don't raise exceptions anymore. A warning will be logged instead. Fixes\n  `#161 <https://github.com/pytest-dev/pytest-cov/issues/161>`_.\n* Fixed multiprocessing issue on Windows (empty env vars are not passed). Fixes\n  `#165 <https://github.com/pytest-dev/pytest-cov/issues/165>`_.\n\n2.5.1 (2017-05-11)\n------------------\n\n* Fixed xdist breakage (regression in ``2.5.0``).\n  Fixes `#157 <https://github.com/pytest-dev/pytest-cov/issues/157>`_.\n* Allow setting custom ``data_file`` name in ``.coveragerc``.\n  Fixes `#145 <https://github.com/pytest-dev/pytest-cov/issues/145>`_.\n  Contributed by Jannis Leidel & Ionel Cristian Mărieș in\n  `#156 <https://github.com/pytest-dev/pytest-cov/pull/156>`_.\n\n2.5.0 (2017-05-09)\n------------------\n\n* Always show a summary when ``--cov-fail-under`` is used. Contributed by Francis Niu in `PR#141\n  <https://github.com/pytest-dev/pytest-cov/pull/141>`_.\n* Added ``--cov-branch`` option. Fixes `#85 <https://github.com/pytest-dev/pytest-cov/issues/85>`_.\n* Improve exception handling in subprocess setup. Fixes `#144 <https://github.com/pytest-dev/pytest-cov/issues/144>`_.\n* Fixed handling when ``--cov`` is used multiple times. Fixes `#151 <https://github.com/pytest-dev/pytest-cov/issues/151>`_.\n\n2.4.0 (2016-10-10)\n------------------\n\n* Added a \"disarm\" option: ``--no-cov``. It will disable coverage measurements. Contributed by Zoltan Kozma in\n  `PR#135 <https://github.com/pytest-dev/pytest-cov/pull/135>`_.\n\n  **WARNING: Do not put this in your configuration files, it's meant to be an one-off for situations where you want to\n  disable coverage from command line.**\n* Fixed broken exception handling on ``.pth`` file. See `#136 <https://github.com/pytest-dev/pytest-cov/issues/136>`_.\n\n2.3.1 (2016-08-07)\n------------------\n\n* Fixed regression causing spurious errors when xdist was used. See `#124\n  <https://github.com/pytest-dev/pytest-cov/issues/124>`_.\n* Fixed DeprecationWarning about incorrect `addoption` use. Contributed by Florian Bruhin in `PR#127\n  <https://github.com/pytest-dev/pytest-cov/pull/127>`_.\n* Fixed deprecated use of funcarg fixture API. Contributed by Daniel Hahler in `PR#125\n  <https://github.com/pytest-dev/pytest-cov/pull/125>`_.\n\n2.3.0 (2016-07-05)\n------------------\n\n* Add support for specifying output location for html, xml, and annotate report.\n  Contributed by Patrick Lannigan in `PR#113 <https://github.com/pytest-dev/pytest-cov/pull/113>`_.\n* Fix bug hiding test failure when cov-fail-under failed.\n* For coverage >= 4.0, match the default behaviour of `coverage report` and\n  error if coverage fails to find the source instead of just printing a warning.\n  Contributed by David Szotten in `PR#116 <https://github.com/pytest-dev/pytest-cov/pull/116>`_.\n* Fixed bug occurred when bare ``--cov`` parameter was used with xdist.\n  Contributed by Michael Elovskikh in `PR#120 <https://github.com/pytest-dev/pytest-cov/pull/120>`_.\n* Add support for ``skip_covered`` and added ``--cov-report=term-skip-covered`` command\n  line options. Contributed by Saurabh Kumar in `PR#115 <https://github.com/pytest-dev/pytest-cov/pull/115>`_.\n\n2.2.1 (2016-01-30)\n------------------\n\n* Fixed incorrect merging of coverage data when xdist was used and coverage was ``>= 4.0``.\n\n2.2.0 (2015-10-04)\n------------------\n\n* Added support for changing working directory in tests. Previously changing working\n  directory would disable coverage measurements in suprocesses.\n* Fixed broken handling for ``--cov-report=annotate``.\n\n2.1.0 (2015-08-23)\n------------------\n\n* Added support for `coverage 4.0b2`.\n* Added the ``--cov-append`` command line options. Contributed by Christian Ledermann\n  in `PR#80 <https://github.com/pytest-dev/pytest-cov/pull/80>`_.\n\n2.0.0 (2015-07-28)\n------------------\n\n* Added ``--cov-fail-under``, akin to the new ``fail_under`` option in `coverage-4.0`\n  (automatically activated if there's a ``[report] fail_under = ...`` in ``.coveragerc``).\n* Changed ``--cov-report=term`` to automatically upgrade to ``--cov-report=term-missing``\n  if there's ``[run] show_missing = True`` in ``.coveragerc``.\n* Changed ``--cov`` so it can be used with no path argument (in which case the source\n  settings from ``.coveragerc`` will be used instead).\n* Fixed `.pth` installation to work in all cases (install, easy_install, wheels, develop etc).\n* Fixed `.pth` uninstallation to work for wheel installs.\n* Support for coverage 4.0.\n* Data file suffixing changed to use coverage's ``data_suffix=True`` option (instead of the\n  custom suffixing).\n* Avoid warning about missing coverage data (just like ``coverage.control.process_startup``).\n* Fixed a race condition when running with xdist (all the workers tried to combine the files).\n  It's possible that this issue is not present in `pytest-cov 1.8.X`.\n\n1.8.2 (2014-11-06)\n------------------\n\n* N/A\n",
        "keywords": [
          "cover",
          "coverage",
          "pytest",
          "py.test",
          "distributed",
          "parallel"
        ],
        "home_page": "https://github.com/pytest-dev/pytest-cov",
        "author": "Marc Schlaich",
        "author_email": "marc.schlaich@gmail.com",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Framework :: Pytest",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX",
          "Operating System :: Unix",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Testing",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "pytest >=4.6",
          "coverage[toml] >=7.5",
          "fields ; extra == 'testing'",
          "hunter ; extra == 'testing'",
          "process-tests ; extra == 'testing'",
          "pytest-xdist ; extra == 'testing'",
          "virtualenv ; extra == 'testing'"
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Documentation, https://pytest-cov.readthedocs.io/",
          "Changelog, https://pytest-cov.readthedocs.io/en/latest/changelog.html",
          "Issue Tracker, https://github.com/pytest-dev/pytest-cov/issues"
        ],
        "provides_extra": [
          "testing"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/6a/3e/b68c118422ec867fa7ab88444e1274aa40681c606d59ac27de5a5588f082/python_dotenv-1.0.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f7b63ef50f1b690dddf550d03497b66d609393b40b564ed0d674909a68ebf16a",
          "hashes": {
            "sha256": "f7b63ef50f1b690dddf550d03497b66d609393b40b564ed0d674909a68ebf16a"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "python-dotenv",
        "version": "1.0.1",
        "summary": "Read key-value pairs from a .env file and set them as environment variables",
        "description": "# python-dotenv\n\n[![Build Status][build_status_badge]][build_status_link]\n[![PyPI version][pypi_badge]][pypi_link]\n\nPython-dotenv reads key-value pairs from a `.env` file and can set them as environment\nvariables. It helps in the development of applications following the\n[12-factor](https://12factor.net/) principles.\n\n- [Getting Started](#getting-started)\n- [Other Use Cases](#other-use-cases)\n  * [Load configuration without altering the environment](#load-configuration-without-altering-the-environment)\n  * [Parse configuration as a stream](#parse-configuration-as-a-stream)\n  * [Load .env files in IPython](#load-env-files-in-ipython)\n- [Command-line Interface](#command-line-interface)\n- [File format](#file-format)\n  * [Multiline values](#multiline-values)\n  * [Variable expansion](#variable-expansion)\n- [Related Projects](#related-projects)\n- [Acknowledgements](#acknowledgements)\n\n## Getting Started\n\n```shell\npip install python-dotenv\n```\n\nIf your application takes its configuration from environment variables, like a 12-factor\napplication, launching it in development is not very practical because you have to set\nthose environment variables yourself.\n\nTo help you with that, you can add Python-dotenv to your application to make it load the\nconfiguration from a `.env` file when it is present (e.g. in development) while remaining\nconfigurable via the environment:\n\n```python\nfrom dotenv import load_dotenv\n\nload_dotenv()  # take environment variables from .env.\n\n# Code of your application, which uses environment variables (e.g. from `os.environ` or\n# `os.getenv`) as if they came from the actual environment.\n```\n\nBy default, `load_dotenv` doesn't override existing environment variables.\n\nTo configure the development environment, add a `.env` in the root directory of your\nproject:\n\n```\n.\n├── .env\n└── foo.py\n```\n\nThe syntax of `.env` files supported by python-dotenv is similar to that of Bash:\n\n```bash\n# Development settings\nDOMAIN=example.org\nADMIN_EMAIL=admin@${DOMAIN}\nROOT_URL=${DOMAIN}/app\n```\n\nIf you use variables in values, ensure they are surrounded with `{` and `}`, like\n`${DOMAIN}`, as bare variables such as `$DOMAIN` are not expanded.\n\nYou will probably want to add `.env` to your `.gitignore`, especially if it contains\nsecrets like a password.\n\nSee the section \"File format\" below for more information about what you can write in a\n`.env` file.\n\n## Other Use Cases\n\n### Load configuration without altering the environment\n\nThe function `dotenv_values` works more or less the same way as `load_dotenv`, except it\ndoesn't touch the environment, it just returns a `dict` with the values parsed from the\n`.env` file.\n\n```python\nfrom dotenv import dotenv_values\n\nconfig = dotenv_values(\".env\")  # config = {\"USER\": \"foo\", \"EMAIL\": \"foo@example.org\"}\n```\n\nThis notably enables advanced configuration management:\n\n```python\nimport os\nfrom dotenv import dotenv_values\n\nconfig = {\n    **dotenv_values(\".env.shared\"),  # load shared development variables\n    **dotenv_values(\".env.secret\"),  # load sensitive variables\n    **os.environ,  # override loaded values with environment variables\n}\n```\n\n### Parse configuration as a stream\n\n`load_dotenv` and `dotenv_values` accept [streams][python_streams] via their `stream`\nargument.  It is thus possible to load the variables from sources other than the\nfilesystem (e.g. the network).\n\n```python\nfrom io import StringIO\n\nfrom dotenv import load_dotenv\n\nconfig = StringIO(\"USER=foo\\nEMAIL=foo@example.org\")\nload_dotenv(stream=config)\n```\n\n### Load .env files in IPython\n\nYou can use dotenv in IPython.  By default, it will use `find_dotenv` to search for a\n`.env` file:\n\n```python\n%load_ext dotenv\n%dotenv\n```\n\nYou can also specify a path:\n\n```python\n%dotenv relative/or/absolute/path/to/.env\n```\n\nOptional flags:\n\n- `-o` to override existing variables.\n- `-v` for increased verbosity.\n\n## Command-line Interface\n\nA CLI interface `dotenv` is also included, which helps you manipulate the `.env` file\nwithout manually opening it.\n\n```shell\n$ pip install \"python-dotenv[cli]\"\n$ dotenv set USER foo\n$ dotenv set EMAIL foo@example.org\n$ dotenv list\nUSER=foo\nEMAIL=foo@example.org\n$ dotenv list --format=json\n{\n  \"USER\": \"foo\",\n  \"EMAIL\": \"foo@example.org\"\n}\n$ dotenv run -- python foo.py\n```\n\nRun `dotenv --help` for more information about the options and subcommands.\n\n## File format\n\nThe format is not formally specified and still improves over time.  That being said,\n`.env` files should mostly look like Bash files.\n\nKeys can be unquoted or single-quoted. Values can be unquoted, single- or double-quoted.\nSpaces before and after keys, equal signs, and values are ignored. Values can be followed\nby a comment.  Lines can start with the `export` directive, which does not affect their\ninterpretation.\n\nAllowed escape sequences:\n\n- in single-quoted values: `\\\\`, `\\'`\n- in double-quoted values: `\\\\`, `\\'`, `\\\"`, `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\t`, `\\v`\n\n### Multiline values\n\nIt is possible for single- or double-quoted values to span multiple lines.  The following\nexamples are equivalent:\n\n```bash\nFOO=\"first line\nsecond line\"\n```\n\n```bash\nFOO=\"first line\\nsecond line\"\n```\n\n### Variable without a value\n\nA variable can have no value:\n\n```bash\nFOO\n```\n\nIt results in `dotenv_values` associating that variable name with the value `None` (e.g.\n`{\"FOO\": None}`. `load_dotenv`, on the other hand, simply ignores such variables.\n\nThis shouldn't be confused with `FOO=`, in which case the variable is associated with the\nempty string.\n\n### Variable expansion\n\nPython-dotenv can interpolate variables using POSIX variable expansion.\n\nWith `load_dotenv(override=True)` or `dotenv_values()`, the value of a variable is the\nfirst of the values defined in the following list:\n\n- Value of that variable in the `.env` file.\n- Value of that variable in the environment.\n- Default value, if provided.\n- Empty string.\n\nWith `load_dotenv(override=False)`, the value of a variable is the first of the values\ndefined in the following list:\n\n- Value of that variable in the environment.\n- Value of that variable in the `.env` file.\n- Default value, if provided.\n- Empty string.\n\n## Related Projects\n\n-   [Honcho](https://github.com/nickstenning/honcho) - For managing\n    Procfile-based applications.\n-   [django-dotenv](https://github.com/jpadilla/django-dotenv)\n-   [django-environ](https://github.com/joke2k/django-environ)\n-   [django-environ-2](https://github.com/sergeyklay/django-environ-2)\n-   [django-configuration](https://github.com/jezdez/django-configurations)\n-   [dump-env](https://github.com/sobolevn/dump-env)\n-   [environs](https://github.com/sloria/environs)\n-   [dynaconf](https://github.com/rochacbruno/dynaconf)\n-   [parse_it](https://github.com/naorlivne/parse_it)\n-   [python-decouple](https://github.com/HBNetwork/python-decouple)\n\n## Acknowledgements\n\nThis project is currently maintained by [Saurabh Kumar](https://saurabh-kumar.com) and\n[Bertrand Bonnefoy-Claudet](https://github.com/bbc2) and would not have been possible\nwithout the support of these [awesome\npeople](https://github.com/theskumar/python-dotenv/graphs/contributors).\n\n[build_status_badge]: https://github.com/theskumar/python-dotenv/actions/workflows/test.yml/badge.svg\n[build_status_link]: https://github.com/theskumar/python-dotenv/actions/workflows/test.yml\n[pypi_badge]: https://badge.fury.io/py/python-dotenv.svg\n[pypi_link]: https://badge.fury.io/py/python-dotenv\n[python_streams]: https://docs.python.org/3/library/io.html\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/), and this\nproject adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [1.0.1] - 2024-01-23\n\n**Fixed**\n\n* Gracefully handle code which has been imported from a zipfile ([#456] by [@samwyma])\n* Allow modules using load_dotenv to be reloaded when launched in a separate thread ([#497] by [@freddyaboulton])\n* Fix file not closed after deletion, handle error in the rewrite function ([#469] by [@Qwerty-133])\n\n**Misc**\n* Use pathlib.Path in tests ([#466] by [@eumiro])\n* Fix year in release date in changelog.md ([#454] by [@jankislinger])\n* Use https in README links ([#474] by [@Nicals])\n\n## [1.0.0] - 2023-02-24\n\n**Fixed**\n\n* Drop support for python 3.7, add python 3.12-dev (#449 by [@theskumar])\n* Handle situations where the cwd does not exist. (#446 by [@jctanner])\n\n## [0.21.1] - 2023-01-21\n\n**Added**\n\n* Use Python 3.11 non-beta in CI (#438 by [@bbc2])\n* Modernize variables code (#434 by [@Nougat-Waffle])\n* Modernize main.py and parser.py code (#435 by [@Nougat-Waffle])\n* Improve conciseness of cli.py and __init__.py (#439 by [@Nougat-Waffle])\n* Improve error message for `get` and `list` commands when env file can't be opened (#441 by [@bbc2])\n* Updated License to align with BSD OSI template (#433 by [@lsmith77])\n\n\n**Fixed**\n\n* Fix Out-of-scope error when \"dest\" variable is undefined (#413 by [@theGOTOguy])\n* Fix IPython test warning about deprecated `magic` (#440 by [@bbc2])\n* Fix type hint for dotenv_path var, add StrPath alias (#432 by [@eaf])\n\n## [0.21.0] - 2022-09-03\n\n**Added**\n\n* CLI: add support for invocations via 'python -m'. (#395 by [@theskumar])\n* `load_dotenv` function now returns `False`. (#388 by [@larsks])\n* CLI: add --format= option to list command. (#407 by [@sammck])\n\n**Fixed**\n\n* Drop Python 3.5 and 3.6 and upgrade GA (#393 by [@eggplants])\n* Use `open` instead of `io.open`. (#389 by [@rabinadk1])\n* Improve documentation for variables without a value (#390 by [@bbc2])\n* Add `parse_it` to Related Projects (#410 by [@naorlivne])\n* Update README.md (#415 by [@harveer07])\n* Improve documentation with direct use of MkDocs (#398 by [@bbc2])\n\n## [0.20.0] - 2022-03-24\n\n**Added**\n\n- Add `encoding` (`Optional[str]`) parameter to `get_key`, `set_key` and `unset_key`.\n  (#379 by [@bbc2])\n\n**Fixed**\n\n- Use dict to specify the `entry_points` parameter of `setuptools.setup` (#376 by\n  [@mgorny]).\n- Don't build universal wheels (#387 by [@bbc2]).\n\n## [0.19.2] - 2021-11-11\n\n**Fixed**\n\n- In `set_key`, add missing newline character before new entry if necessary. (#361 by\n  [@bbc2])\n\n## [0.19.1] - 2021-08-09\n\n**Added**\n\n- Add support for Python 3.10. (#359 by [@theskumar])\n\n## [0.19.0] - 2021-07-24\n\n**Changed**\n\n- Require Python 3.5 or a later version.  Python 2 and 3.4 are no longer supported. (#341\n  by [@bbc2]).\n\n**Added**\n\n- The `dotenv_path` argument of `set_key` and `unset_key` now has a type of `Union[str,\n  os.PathLike]` instead of just `os.PathLike` (#347 by [@bbc2]).\n- The `stream` argument of `load_dotenv` and `dotenv_values` can now be a text stream\n  (`IO[str]`), which includes values like `io.StringIO(\"foo\")` and `open(\"file.env\",\n  \"r\")` (#348 by [@bbc2]).\n\n## [0.18.0] - 2021-06-20\n\n**Changed**\n\n- Raise `ValueError` if `quote_mode` isn't one of `always`, `auto` or `never` in\n  `set_key` (#330 by [@bbc2]).\n- When writing a value to a .env file with `set_key` or `dotenv set <key> <value>` (#330\n  by [@bbc2]):\n  - Use single quotes instead of double quotes.\n  - Don't strip surrounding quotes.\n  - In `auto` mode, don't add quotes if the value is only made of alphanumeric characters\n    (as determined by `string.isalnum`).\n\n## [0.17.1] - 2021-04-29\n\n**Fixed**\n\n- Fixed tests for build environments relying on `PYTHONPATH` (#318 by [@befeleme]).\n\n## [0.17.0] - 2021-04-02\n\n**Changed**\n\n- Make `dotenv get <key>` only show the value, not `key=value` (#313 by [@bbc2]).\n\n**Added**\n\n- Add `--override`/`--no-override` option to `dotenv run` (#312 by [@zueve] and [@bbc2]).\n\n## [0.16.0] - 2021-03-27\n\n**Changed**\n\n- The default value of the `encoding` parameter for `load_dotenv` and `dotenv_values` is\n  now `\"utf-8\"` instead of `None` (#306 by [@bbc2]).\n- Fix resolution order in variable expansion with `override=False` (#287 by [@bbc2]).\n\n## [0.15.0] - 2020-10-28\n\n**Added**\n\n- Add `--export` option to `set` to make it prepend the binding with `export` (#270 by\n  [@jadutter]).\n\n**Changed**\n\n- Make `set` command create the `.env` file in the current directory if no `.env` file was\n  found (#270 by [@jadutter]).\n\n**Fixed**\n\n- Fix potentially empty expanded value for duplicate key (#260 by [@bbc2]).\n- Fix import error on Python 3.5.0 and 3.5.1 (#267 by [@gongqingkui]).\n- Fix parsing of unquoted values containing several adjacent space or tab characters\n  (#277 by [@bbc2], review by [@x-yuri]).\n\n## [0.14.0] - 2020-07-03\n\n**Changed**\n\n- Privilege definition in file over the environment in variable expansion (#256 by\n  [@elbehery95]).\n\n**Fixed**\n\n- Improve error message for when file isn't found (#245 by [@snobu]).\n- Use HTTPS URL in package meta data (#251 by [@ekohl]).\n\n## [0.13.0] - 2020-04-16\n\n**Added**\n\n- Add support for a Bash-like default value in variable expansion (#248 by [@bbc2]).\n\n## [0.12.0] - 2020-02-28\n\n**Changed**\n\n- Use current working directory to find `.env` when bundled by PyInstaller (#213 by\n  [@gergelyk]).\n\n**Fixed**\n\n- Fix escaping of quoted values written by `set_key` (#236 by [@bbc2]).\n- Fix `dotenv run` crashing on environment variables without values (#237 by [@yannham]).\n- Remove warning when last line is empty (#238 by [@bbc2]).\n\n## [0.11.0] - 2020-02-07\n\n**Added**\n\n- Add `interpolate` argument to `load_dotenv` and `dotenv_values` to disable interpolation\n  (#232 by [@ulyssessouza]).\n\n**Changed**\n\n- Use logging instead of warnings (#231 by [@bbc2]).\n\n**Fixed**\n\n- Fix installation in non-UTF-8 environments (#225 by [@altendky]).\n- Fix PyPI classifiers (#228 by [@bbc2]).\n\n## [0.10.5] - 2020-01-19\n\n**Fixed**\n\n- Fix handling of malformed lines and lines without a value (#222 by [@bbc2]):\n  - Don't print warning when key has no value.\n  - Reject more malformed lines (e.g. \"A: B\", \"a='b',c\").\n- Fix handling of lines with just a comment (#224 by [@bbc2]).\n\n## [0.10.4] - 2020-01-17\n\n**Added**\n\n- Make typing optional (#179 by [@techalchemy]).\n- Print a warning on malformed line (#211 by [@bbc2]).\n- Support keys without a value (#220 by [@ulyssessouza]).\n\n## 0.10.3\n\n- Improve interactive mode detection ([@andrewsmith])([#183]).\n- Refactor parser to fix parsing inconsistencies ([@bbc2])([#170]).\n  - Interpret escapes as control characters only in double-quoted strings.\n  - Interpret `#` as start of comment only if preceded by whitespace.\n\n## 0.10.2\n\n- Add type hints and expose them to users ([@qnighy])([#172])\n- `load_dotenv` and `dotenv_values` now accept an `encoding` parameter, defaults to `None`\n  ([@theskumar])([@earlbread])([#161])\n- Fix `str`/`unicode` inconsistency in Python 2: values are always `str` now. ([@bbc2])([#121])\n- Fix Unicode error in Python 2, introduced in 0.10.0. ([@bbc2])([#176])\n\n## 0.10.1\n- Fix parsing of variable without a value ([@asyncee])([@bbc2])([#158])\n\n## 0.10.0\n\n- Add support for UTF-8 in unquoted values ([@bbc2])([#148])\n- Add support for trailing comments ([@bbc2])([#148])\n- Add backslashes support in values ([@bbc2])([#148])\n- Add support for newlines in values ([@bbc2])([#148])\n- Force environment variables to str with Python2 on Windows ([@greyli])\n- Drop Python 3.3 support ([@greyli])\n- Fix stderr/-out/-in redirection ([@venthur])\n\n\n## 0.9.0\n\n- Add `--version` parameter to cli ([@venthur])\n- Enable loading from current directory ([@cjauvin])\n- Add 'dotenv run' command for calling arbitrary shell script with .env ([@venthur])\n\n## 0.8.1\n\n-   Add tests for docs ([@Flimm])\n-   Make 'cli' support optional. Use `pip install python-dotenv[cli]`. ([@theskumar])\n\n## 0.8.0\n\n-   `set_key` and `unset_key` only modified the affected file instead of\n    parsing and re-writing file, this causes comments and other file\n    entact as it is.\n-   Add support for `export` prefix in the line.\n-   Internal refractoring ([@theskumar])\n-   Allow `load_dotenv` and `dotenv_values` to work with `StringIO())` ([@alanjds])([@theskumar])([#78])\n\n## 0.7.1\n\n-   Remove hard dependency on iPython ([@theskumar])\n\n## 0.7.0\n\n-   Add support to override system environment variable via .env.\n    ([@milonimrod](https://github.com/milonimrod))\n    ([\\#63](https://github.com/theskumar/python-dotenv/issues/63))\n-   Disable \".env not found\" warning by default\n    ([@maxkoryukov](https://github.com/maxkoryukov))\n    ([\\#57](https://github.com/theskumar/python-dotenv/issues/57))\n\n## 0.6.5\n\n-   Add support for special characters `\\`.\n    ([@pjona](https://github.com/pjona))\n    ([\\#60](https://github.com/theskumar/python-dotenv/issues/60))\n\n## 0.6.4\n\n-   Fix issue with single quotes ([@Flimm])\n    ([\\#52](https://github.com/theskumar/python-dotenv/issues/52))\n\n## 0.6.3\n\n-   Handle unicode exception in setup.py\n    ([\\#46](https://github.com/theskumar/python-dotenv/issues/46))\n\n## 0.6.2\n\n-   Fix dotenv list command ([@ticosax](https://github.com/ticosax))\n-   Add iPython Support\n    ([@tillahoffmann](https://github.com/tillahoffmann))\n\n## 0.6.0\n\n-   Drop support for Python 2.6\n-   Handle escaped characters and newlines in quoted values. (Thanks\n    [@iameugenejo](https://github.com/iameugenejo))\n-   Remove any spaces around unquoted key/value. (Thanks\n    [@paulochf](https://github.com/paulochf))\n-   Added POSIX variable expansion. (Thanks\n    [@hugochinchilla](https://github.com/hugochinchilla))\n\n## 0.5.1\n\n-   Fix find\\_dotenv - it now start search from the file where this\n    function is called from.\n\n## 0.5.0\n\n-   Add `find_dotenv` method that will try to find a `.env` file.\n    (Thanks [@isms](https://github.com/isms))\n\n## 0.4.0\n\n-   cli: Added `-q/--quote` option to control the behaviour of quotes\n    around values in `.env`. (Thanks\n    [@hugochinchilla](https://github.com/hugochinchilla)).\n-   Improved test coverage.\n\n[#78]: https://github.com/theskumar/python-dotenv/issues/78\n[#121]: https://github.com/theskumar/python-dotenv/issues/121\n[#148]: https://github.com/theskumar/python-dotenv/issues/148\n[#158]: https://github.com/theskumar/python-dotenv/issues/158\n[#170]: https://github.com/theskumar/python-dotenv/issues/170\n[#172]: https://github.com/theskumar/python-dotenv/issues/172\n[#176]: https://github.com/theskumar/python-dotenv/issues/176\n[#183]: https://github.com/theskumar/python-dotenv/issues/183\n[#359]: https://github.com/theskumar/python-dotenv/issues/359\n[#469]: https://github.com/theskumar/python-dotenv/issues/469\n[#456]: https://github.com/theskumar/python-dotenv/issues/456\n[#466]: https://github.com/theskumar/python-dotenv/issues/466\n[#454]: https://github.com/theskumar/python-dotenv/issues/454\n[#474]: https://github.com/theskumar/python-dotenv/issues/474\n\n[@alanjds]: https://github.com/alanjds\n[@altendky]: https://github.com/altendky\n[@andrewsmith]: https://github.com/andrewsmith\n[@asyncee]: https://github.com/asyncee\n[@bbc2]: https://github.com/bbc2\n[@befeleme]: https://github.com/befeleme\n[@cjauvin]: https://github.com/cjauvin\n[@eaf]: https://github.com/eaf\n[@earlbread]: https://github.com/earlbread\n[@eggplants]: https://github.com/@eggplants\n[@ekohl]: https://github.com/ekohl\n[@elbehery95]: https://github.com/elbehery95\n[@eumiro]: https://github.com/eumiro\n[@Flimm]: https://github.com/Flimm\n[@freddyaboulton]: https://github.com/freddyaboulton\n[@gergelyk]: https://github.com/gergelyk\n[@gongqingkui]: https://github.com/gongqingkui\n[@greyli]: https://github.com/greyli\n[@harveer07]: https://github.com/@harveer07\n[@jadutter]: https://github.com/jadutter\n[@jankislinger]: https://github.com/jankislinger\n[@jctanner]: https://github.com/jctanner\n[@larsks]: https://github.com/@larsks\n[@lsmith77]: https://github.com/lsmith77\n[@mgorny]: https://github.com/mgorny\n[@naorlivne]: https://github.com/@naorlivne\n[@Nicals]: https://github.com/Nicals\n[@Nougat-Waffle]: https://github.com/Nougat-Waffle\n[@qnighy]: https://github.com/qnighy\n[@Qwerty-133]: https://github.com/Qwerty-133\n[@rabinadk1]: https://github.com/@rabinadk1\n[@sammck]: https://github.com/@sammck\n[@samwyma]: https://github.com/samwyma\n[@snobu]: https://github.com/snobu\n[@techalchemy]: https://github.com/techalchemy\n[@theGOTOguy]: https://github.com/theGOTOguy\n[@theskumar]: https://github.com/theskumar\n[@ulyssessouza]: https://github.com/ulyssessouza\n[@venthur]: https://github.com/venthur\n[@x-yuri]: https://github.com/x-yuri\n[@yannham]: https://github.com/yannham\n[@zueve]: https://github.com/zueve\n\n\n[Unreleased]: https://github.com/theskumar/python-dotenv/compare/v1.0.1...HEAD\n[1.0.1]: https://github.com/theskumar/python-dotenv/compare/v1.0.0...v1.0.1\n[1.0.0]: https://github.com/theskumar/python-dotenv/compare/v0.21.0...v1.0.0\n[0.21.1]: https://github.com/theskumar/python-dotenv/compare/v0.21.0...v0.21.1\n[0.21.0]: https://github.com/theskumar/python-dotenv/compare/v0.20.0...v0.21.0\n[0.20.0]: https://github.com/theskumar/python-dotenv/compare/v0.19.2...v0.20.0\n[0.19.2]: https://github.com/theskumar/python-dotenv/compare/v0.19.1...v0.19.2\n[0.19.1]: https://github.com/theskumar/python-dotenv/compare/v0.19.0...v0.19.1\n[0.19.0]: https://github.com/theskumar/python-dotenv/compare/v0.18.0...v0.19.0\n[0.18.0]: https://github.com/theskumar/python-dotenv/compare/v0.17.1...v0.18.0\n[0.17.1]: https://github.com/theskumar/python-dotenv/compare/v0.17.0...v0.17.1\n[0.17.0]: https://github.com/theskumar/python-dotenv/compare/v0.16.0...v0.17.0\n[0.16.0]: https://github.com/theskumar/python-dotenv/compare/v0.15.0...v0.16.0\n[0.15.0]: https://github.com/theskumar/python-dotenv/compare/v0.14.0...v0.15.0\n[0.14.0]: https://github.com/theskumar/python-dotenv/compare/v0.13.0...v0.14.0\n[0.13.0]: https://github.com/theskumar/python-dotenv/compare/v0.12.0...v0.13.0\n[0.12.0]: https://github.com/theskumar/python-dotenv/compare/v0.11.0...v0.12.0\n[0.11.0]: https://github.com/theskumar/python-dotenv/compare/v0.10.5...v0.11.0\n[0.10.5]: https://github.com/theskumar/python-dotenv/compare/v0.10.4...v0.10.5\n[0.10.4]: https://github.com/theskumar/python-dotenv/compare/v0.10.3...v0.10.4\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "environment variables",
          "deployments",
          "settings",
          "env",
          "dotenv",
          "configurations",
          "python"
        ],
        "home_page": "https://github.com/theskumar/python-dotenv",
        "author": "Saurabh Kumar",
        "author_email": "me+github@saurabh-kumar.com",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Topic :: System :: Systems Administration",
          "Topic :: Utilities",
          "Environment :: Web Environment"
        ],
        "requires_dist": [
          "click >=5.0 ; extra == 'cli'"
        ],
        "requires_python": ">=3.8",
        "provides_extra": [
          "cli"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b9/2b/614b4752f2e127db5cc206abc23a8c19678e92b23c3db30fc86ab731d3bd/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476",
          "hashes": {
            "sha256": "80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "PyYAML",
        "version": "6.0.2",
        "platform": [
          "Any"
        ],
        "summary": "YAML parser and emitter for Python",
        "description": "YAML is a data serialization format designed for human readability\nand interaction with scripting languages.  PyYAML is a YAML parser\nand emitter for Python.\n\nPyYAML features a complete YAML 1.1 parser, Unicode support, pickle\nsupport, capable extension API, and sensible error messages.  PyYAML\nsupports standard YAML tags and provides Python-specific tags that\nallow to represent an arbitrary Python object.\n\nPyYAML is applicable for a broad range of tasks from complex\nconfiguration files to object serialization and persistence.\n",
        "home_page": "https://pyyaml.org/",
        "download_url": "https://pypi.org/project/PyYAML/",
        "author": "Kirill Simonov",
        "author_email": "xi@resolvent.net",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Cython",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: Text Processing :: Markup"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Bug Tracker, https://github.com/yaml/pyyaml/issues",
          "CI, https://github.com/yaml/pyyaml/actions",
          "Documentation, https://pyyaml.org/wiki/PyYAMLDocumentation",
          "Mailing lists, http://lists.sourceforge.net/lists/listinfo/yaml-core",
          "Source Code, https://github.com/yaml/pyyaml"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/e1/67/921ec3024056483db83953ae8e48079ad62b92db7880013ca77632921dd0/readme_renderer-44.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2fbca89b81a08526aadf1357a8c2ae889ec05fb03f5da67f9769c9a592166151",
          "hashes": {
            "sha256": "2fbca89b81a08526aadf1357a8c2ae889ec05fb03f5da67f9769c9a592166151"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "readme_renderer",
        "version": "44.0",
        "summary": "readme_renderer is a library for rendering readme descriptions for Warehouse",
        "description": "Readme Renderer\n===============\n\n.. image:: https://badge.fury.io/py/readme-renderer.svg\n    :target: https://badge.fury.io/py/readme-renderer\n\n.. image:: https://github.com/pypa/readme_renderer/actions/workflows/ci.yml/badge.svg\n    :target: https://github.com/pypa/readme_renderer/actions/workflows/ci.yml\n\nReadme Renderer is a library that will safely render arbitrary\n``README`` files into HTML. It is designed to be used in Warehouse_ to\nrender the ``long_description`` for packages. It can handle Markdown,\nreStructuredText (``.rst``), and plain text.\n\n.. _Warehouse: https://github.com/pypa/warehouse\n\n\nCheck Description Locally\n-------------------------\n\nTo locally check whether your long descriptions will render on PyPI, first\nbuild your distributions, and then use the |twine check|_ command.\n\n\nCode of Conduct\n---------------\n\nEveryone interacting in the readme_renderer project's codebases, issue trackers,\nchat rooms, and mailing lists is expected to follow the `PSF Code of Conduct`_.\n\n\n.. |twine check| replace:: ``twine check``\n.. _twine check: https://packaging.python.org/guides/making-a-pypi-friendly-readme#validating-restructuredtext-markup\n.. _PSF Code of Conduct: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\n\nCopyright © 2014, [The Python Packaging Authority].\n",
        "description_content_type": "text/x-rst",
        "author_email": "The Python Packaging Authority <admin@mail.pypi.org>",
        "license": "Apache License, Version 2.0",
        "classifier": [
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX",
          "Operating System :: POSIX :: BSD",
          "Operating System :: POSIX :: Linux",
          "Operating System :: Microsoft :: Windows",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Typing :: Typed"
        ],
        "requires_dist": [
          "nh3 >=0.2.14",
          "docutils >=0.21.2",
          "Pygments >=2.5.1",
          "cmarkgfm >=0.8.0 ; extra == 'md'"
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Home-page, https://github.com/pypa/readme_renderer"
        ],
        "provides_extra": [
          "md"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/90/12/282ee9bce8b58130cb762fbc9beabd531549952cac11fc56add11dcb7ea0/setuptools-75.3.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=f2504966861356aa38616760c0f66568e535562374995367b4e69c7143cf6bcd",
          "hashes": {
            "sha256": "f2504966861356aa38616760c0f66568e535562374995367b4e69c7143cf6bcd"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "setuptools",
        "version": "75.3.0",
        "summary": "Easily download, build, install, upgrade, and uninstall Python packages",
        "description": ".. |pypi-version| image:: https://img.shields.io/pypi/v/setuptools.svg\n   :target: https://pypi.org/project/setuptools\n\n.. |py-version| image:: https://img.shields.io/pypi/pyversions/setuptools.svg\n\n.. |test-badge| image:: https://github.com/pypa/setuptools/actions/workflows/main.yml/badge.svg\n   :target: https://github.com/pypa/setuptools/actions?query=workflow%3A%22tests%22\n   :alt: tests\n\n.. |ruff-badge| image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json\n   :target: https://github.com/astral-sh/ruff\n   :alt: Ruff\n\n.. |docs-badge| image:: https://img.shields.io/readthedocs/setuptools/latest.svg\n   :target: https://setuptools.pypa.io\n\n.. |skeleton-badge| image:: https://img.shields.io/badge/skeleton-2024-informational\n   :target: https://blog.jaraco.com/skeleton\n\n.. |codecov-badge| image:: https://img.shields.io/codecov/c/github/pypa/setuptools/master.svg?logo=codecov&logoColor=white\n   :target: https://codecov.io/gh/pypa/setuptools\n\n.. |tidelift-badge| image:: https://tidelift.com/badges/github/pypa/setuptools?style=flat\n   :target: https://tidelift.com/subscription/pkg/pypi-setuptools?utm_source=pypi-setuptools&utm_medium=readme\n\n.. |discord-badge| image:: https://img.shields.io/discord/803025117553754132\n   :target: https://discord.com/channels/803025117553754132/815945031150993468\n   :alt: Discord\n\n|pypi-version| |py-version| |test-badge| |ruff-badge| |docs-badge| |skeleton-badge| |codecov-badge| |discord-badge|\n\nSee the `Quickstart <https://setuptools.pypa.io/en/latest/userguide/quickstart.html>`_\nand the `User's Guide <https://setuptools.pypa.io/en/latest/userguide/>`_ for\ninstructions on how to use Setuptools.\n\nQuestions and comments should be directed to `GitHub Discussions\n<https://github.com/pypa/setuptools/discussions>`_.\nBug reports and especially tested patches may be\nsubmitted directly to the `bug tracker\n<https://github.com/pypa/setuptools/issues>`_.\n\n\nCode of Conduct\n===============\n\nEveryone interacting in the setuptools project's codebases, issue trackers,\nchat rooms, and fora is expected to follow the\n`PSF Code of Conduct <https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md>`_.\n\n\nFor Enterprise\n==============\n\nAvailable as part of the Tidelift Subscription.\n\nSetuptools and the maintainers of thousands of other packages are working with Tidelift to deliver one enterprise subscription that covers all of the open source you use.\n\n`Learn more <https://tidelift.com/subscription/pkg/pypi-setuptools?utm_source=pypi-setuptools&utm_medium=referral&utm_campaign=github>`_.\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "CPAN",
          "PyPI",
          "distutils",
          "eggs",
          "package",
          "management"
        ],
        "author_email": "Python Packaging Authority <distutils-sig@python.org>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: System :: Archiving :: Packaging",
          "Topic :: System :: Systems Administration",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "pytest-checkdocs >=2.4 ; extra == 'check'",
          "pytest-ruff >=0.2.1 ; (sys_platform != \"cygwin\") and extra == 'check'",
          "ruff >=0.5.2 ; (sys_platform != \"cygwin\") and extra == 'check'",
          "packaging >=24 ; extra == 'core'",
          "more-itertools >=8.8 ; extra == 'core'",
          "jaraco.text >=3.7 ; extra == 'core'",
          "wheel >=0.43.0 ; extra == 'core'",
          "platformdirs >=4.2.2 ; extra == 'core'",
          "jaraco.collections ; extra == 'core'",
          "jaraco.functools ; extra == 'core'",
          "packaging ; extra == 'core'",
          "more-itertools ; extra == 'core'",
          "importlib-metadata >=6 ; (python_version < \"3.10\") and extra == 'core'",
          "tomli >=2.0.1 ; (python_version < \"3.11\") and extra == 'core'",
          "importlib-resources >=5.10.2 ; (python_version < \"3.9\") and extra == 'core'",
          "pytest-cov ; extra == 'cover'",
          "sphinx >=3.5 ; extra == 'doc'",
          "jaraco.packaging >=9.3 ; extra == 'doc'",
          "rst.linker >=1.9 ; extra == 'doc'",
          "furo ; extra == 'doc'",
          "sphinx-lint ; extra == 'doc'",
          "jaraco.tidelift >=1.4 ; extra == 'doc'",
          "pygments-github-lexers ==0.0.5 ; extra == 'doc'",
          "sphinx-favicon ; extra == 'doc'",
          "sphinx-inline-tabs ; extra == 'doc'",
          "sphinx-reredirects ; extra == 'doc'",
          "sphinxcontrib-towncrier ; extra == 'doc'",
          "sphinx-notfound-page <2,>=1 ; extra == 'doc'",
          "pyproject-hooks !=1.1 ; extra == 'doc'",
          "towncrier <24.7 ; extra == 'doc'",
          "pytest-enabler >=2.2 ; extra == 'enabler'",
          "pytest !=8.1.*,>=6 ; extra == 'test'",
          "virtualenv >=13.0.0 ; extra == 'test'",
          "wheel >=0.44.0 ; extra == 'test'",
          "pip >=19.1 ; extra == 'test'",
          "packaging >=23.2 ; extra == 'test'",
          "jaraco.envs >=2.2 ; extra == 'test'",
          "pytest-xdist >=3 ; extra == 'test'",
          "jaraco.path >=3.2.0 ; extra == 'test'",
          "build[virtualenv] >=1.0.3 ; extra == 'test'",
          "filelock >=3.4.0 ; extra == 'test'",
          "ini2toml[lite] >=0.14 ; extra == 'test'",
          "tomli-w >=1.0.0 ; extra == 'test'",
          "pytest-timeout ; extra == 'test'",
          "pytest-home >=0.5 ; extra == 'test'",
          "pytest-subprocess ; extra == 'test'",
          "pyproject-hooks !=1.1 ; extra == 'test'",
          "jaraco.test >=5.5 ; extra == 'test'",
          "jaraco.develop >=7.21 ; (python_version >= \"3.9\" and sys_platform != \"cygwin\") and extra == 'test'",
          "pytest-perf ; (sys_platform != \"cygwin\") and extra == 'test'",
          "pytest-mypy ; extra == 'type'",
          "mypy ==1.12.* ; extra == 'type'",
          "importlib-metadata >=7.0.2 ; (python_version < \"3.10\") and extra == 'type'",
          "jaraco.develop >=7.21 ; (sys_platform != \"cygwin\") and extra == 'type'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Source, https://github.com/pypa/setuptools",
          "Documentation, https://setuptools.pypa.io/",
          "Changelog, https://setuptools.pypa.io/en/stable/history.html"
        ],
        "provides_extra": [
          "certs",
          "check",
          "core",
          "cover",
          "doc",
          "enabler",
          "ssl",
          "test",
          "type"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/d9/5a/e7c31adbe875f2abbb91bd84cf2dc52d792b5a01506781dbcf25c91daf11/six-1.16.0-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254",
          "hashes": {
            "sha256": "8abb2f1d86890a2dfb989f9a77cfcfd3e47c2a354b01111771326f8aa26e0254"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "six",
        "version": "1.16.0",
        "platform": [
          "UNKNOWN"
        ],
        "summary": "Python 2 and 3 compatibility utilities",
        "description": ".. image:: https://img.shields.io/pypi/v/six.svg\n   :target: https://pypi.org/project/six/\n   :alt: six on PyPI\n\n.. image:: https://travis-ci.org/benjaminp/six.svg?branch=master\n   :target: https://travis-ci.org/benjaminp/six\n   :alt: six on TravisCI\n\n.. image:: https://readthedocs.org/projects/six/badge/?version=latest\n   :target: https://six.readthedocs.io/\n   :alt: six's documentation on Read the Docs\n\n.. image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://github.com/benjaminp/six/blob/master/LICENSE\n   :alt: MIT License badge\n\nSix is a Python 2 and 3 compatibility library.  It provides utility functions\nfor smoothing over the differences between the Python versions with the goal of\nwriting Python code that is compatible on both Python versions.  See the\ndocumentation for more information on what is provided.\n\nSix supports Python 2.7 and 3.3+.  It is contained in only one Python\nfile, so it can be easily copied into your project. (The copyright and license\nnotice must be retained.)\n\nOnline documentation is at https://six.readthedocs.io/.\n\nBugs can be reported to https://github.com/benjaminp/six.  The code can also\nbe found there.\n\n\n",
        "home_page": "https://github.com/benjaminp/six",
        "author": "Benjamin Peterson",
        "author_email": "benjamin@python.org",
        "license": "MIT",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Programming Language :: Python :: 2",
          "Programming Language :: Python :: 3",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Topic :: Software Development :: Libraries",
          "Topic :: Utilities"
        ],
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ce/d9/5f4c13cecde62396b0d3fe530a50ccea91e7dfc1ccf0e09c228841bb5ba8/urllib3-2.2.3-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=ca899ca043dcb1bafa3e262d73aa25c465bfb49e0bd9dd5d59f1d0acba2f8fac",
          "hashes": {
            "sha256": "ca899ca043dcb1bafa3e262d73aa25c465bfb49e0bd9dd5d59f1d0acba2f8fac"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.3",
        "name": "urllib3",
        "version": "2.2.3",
        "summary": "HTTP library with thread-safe connection pooling, file post, and more.",
        "description": "<h1 align=\"center\">\n\n![urllib3](https://github.com/urllib3/urllib3/raw/main/docs/_static/banner_github.svg)\n\n</h1>\n\n<p align=\"center\">\n  <a href=\"https://pypi.org/project/urllib3\"><img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/urllib3.svg?maxAge=86400\" /></a>\n  <a href=\"https://pypi.org/project/urllib3\"><img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/urllib3.svg?maxAge=86400\" /></a>\n  <a href=\"https://discord.gg/urllib3\"><img alt=\"Join our Discord\" src=\"https://img.shields.io/discord/756342717725933608?color=%237289da&label=discord\" /></a>\n  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img alt=\"Coverage Status\" src=\"https://img.shields.io/badge/coverage-100%25-success\" /></a>\n  <a href=\"https://github.com/urllib3/urllib3/actions?query=workflow%3ACI\"><img alt=\"Build Status on GitHub\" src=\"https://github.com/urllib3/urllib3/workflows/CI/badge.svg\" /></a>\n  <a href=\"https://urllib3.readthedocs.io\"><img alt=\"Documentation Status\" src=\"https://readthedocs.org/projects/urllib3/badge/?version=latest\" /></a><br>\n  <a href=\"https://deps.dev/pypi/urllib3\"><img alt=\"OpenSSF Scorecard\" src=\"https://api.securityscorecards.dev/projects/github.com/urllib3/urllib3/badge\" /></a>\n  <a href=\"https://slsa.dev\"><img alt=\"SLSA 3\" src=\"https://slsa.dev/images/gh-badge-level3.svg\" /></a>\n  <a href=\"https://bestpractices.coreinfrastructure.org/projects/6227\"><img alt=\"CII Best Practices\" src=\"https://bestpractices.coreinfrastructure.org/projects/6227/badge\" /></a>\n</p>\n\nurllib3 is a powerful, *user-friendly* HTTP client for Python. Much of the\nPython ecosystem already uses urllib3 and you should too.\nurllib3 brings many critical features that are missing from the Python\nstandard libraries:\n\n- Thread safety.\n- Connection pooling.\n- Client-side SSL/TLS verification.\n- File uploads with multipart encoding.\n- Helpers for retrying requests and dealing with HTTP redirects.\n- Support for gzip, deflate, brotli, and zstd encoding.\n- Proxy support for HTTP and SOCKS.\n- 100% test coverage.\n\nurllib3 is powerful and easy to use:\n\n```python3\n>>> import urllib3\n>>> resp = urllib3.request(\"GET\", \"http://httpbin.org/robots.txt\")\n>>> resp.status\n200\n>>> resp.data\nb\"User-agent: *\\nDisallow: /deny\\n\"\n```\n\n## Installing\n\nurllib3 can be installed with [pip](https://pip.pypa.io):\n\n```bash\n$ python -m pip install urllib3\n```\n\nAlternatively, you can grab the latest source code from [GitHub](https://github.com/urllib3/urllib3):\n\n```bash\n$ git clone https://github.com/urllib3/urllib3.git\n$ cd urllib3\n$ pip install .\n```\n\n\n## Documentation\n\nurllib3 has usage and reference documentation at [urllib3.readthedocs.io](https://urllib3.readthedocs.io).\n\n\n## Community\n\nurllib3 has a [community Discord channel](https://discord.gg/urllib3) for asking questions and\ncollaborating with other contributors. Drop by and say hello 👋\n\n\n## Contributing\n\nurllib3 happily accepts contributions. Please see our\n[contributing documentation](https://urllib3.readthedocs.io/en/latest/contributing.html)\nfor some tips on getting started.\n\n\n## Security Disclosures\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure with maintainers.\n\n\n## Maintainers\n\n- [@sethmlarson](https://github.com/sethmlarson) (Seth M. Larson)\n- [@pquentin](https://github.com/pquentin) (Quentin Pradet)\n- [@illia-v](https://github.com/illia-v) (Illia Volochii)\n- [@theacodes](https://github.com/theacodes) (Thea Flowers)\n- [@haikuginger](https://github.com/haikuginger) (Jess Shapiro)\n- [@lukasa](https://github.com/lukasa) (Cory Benfield)\n- [@sigmavirus24](https://github.com/sigmavirus24) (Ian Stapleton Cordasco)\n- [@shazow](https://github.com/shazow) (Andrey Petrov)\n\n👋\n\n\n## Sponsorship\n\nIf your company benefits from this library, please consider [sponsoring its\ndevelopment](https://urllib3.readthedocs.io/en/latest/sponsors.html).\n\n\n## For Enterprise\n\nProfessional support for urllib3 is available as part of the [Tidelift\nSubscription][1].  Tidelift gives software development teams a single source for\npurchasing and maintaining their software, with professional grade assurances\nfrom the experts who know it best, while seamlessly integrating with existing\ntools.\n\n[1]: https://tidelift.com/subscription/pkg/pypi-urllib3?utm_source=pypi-urllib3&utm_medium=referral&utm_campaign=readme\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "filepost",
          "http",
          "httplib",
          "https",
          "pooling",
          "ssl",
          "threadsafe",
          "urllib"
        ],
        "author_email": "Andrey Petrov <andrey.petrov@shazow.net>",
        "maintainer_email": "Seth Michael Larson <sethmichaellarson@gmail.com>, Quentin Pradet <quentin@pradet.me>, Illia Volochii <illia.volochii@gmail.com>",
        "classifier": [
          "Environment :: Web Environment",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Internet :: WWW/HTTP",
          "Topic :: Software Development :: Libraries"
        ],
        "requires_dist": [
          "brotli>=1.0.9; (platform_python_implementation == 'CPython') and extra == 'brotli'",
          "brotlicffi>=0.8.0; (platform_python_implementation != 'CPython') and extra == 'brotli'",
          "h2<5,>=4; extra == 'h2'",
          "pysocks!=1.5.7,<2.0,>=1.5.6; extra == 'socks'",
          "zstandard>=0.18.0; extra == 'zstd'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Changelog, https://github.com/urllib3/urllib3/blob/main/CHANGES.rst",
          "Documentation, https://urllib3.readthedocs.io",
          "Code, https://github.com/urllib3/urllib3",
          "Issue tracker, https://github.com/urllib3/urllib3/issues"
        ],
        "provides_extra": [
          "brotli",
          "h2",
          "socks",
          "zstd"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/1b/d1/9babe2ccaecff775992753d8686970b1e2755d21c8a63be73aba7a4e7d77/wheel-0.44.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2376a90c98cc337d18623527a97c31797bd02bad0033d41547043a1cbfbe448f",
          "hashes": {
            "sha256": "2376a90c98cc337d18623527a97c31797bd02bad0033d41547043a1cbfbe448f"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "wheel",
        "version": "0.44.0",
        "summary": "A built-package format for Python",
        "description": "wheel\n=====\n\nThis is a command line tool for manipulating Python wheel files, as defined in\n`PEP 427`_. It contains the following functionality:\n\n* Convert ``.egg`` archives into ``.whl``\n* Unpack wheel archives\n* Repack wheel archives\n* Add or remove tags in existing wheel archives\n\n.. _PEP 427: https://www.python.org/dev/peps/pep-0427/\n\nHistorical note\n---------------\n\nThis project used to contain the implementation of the setuptools_ ``bdist_wheel``\ncommand, but as of setuptools v70.1, it no longer needs ``wheel`` installed for that to\nwork. Thus, you should install this **only** if you intend to use the ``wheel`` command\nline tool!\n\n.. _setuptools: https://pypi.org/project/setuptools/\n\nDocumentation\n-------------\n\nThe documentation_ can be found on Read The Docs.\n\n.. _documentation: https://wheel.readthedocs.io/\n\nCode of Conduct\n---------------\n\nEveryone interacting in the wheel project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the `PSF Code of Conduct`_.\n\n.. _PSF Code of Conduct: https://github.com/pypa/.github/blob/main/CODE_OF_CONDUCT.md\n\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "wheel",
          "packaging"
        ],
        "author_email": "Daniel Holth <dholth@fastmail.fm>",
        "maintainer_email": "Alex Grönholm <alex.gronholm@nextday.fi>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "Topic :: System :: Archiving :: Packaging",
          "License :: OSI Approved :: MIT License",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12"
        ],
        "requires_dist": [
          "pytest >= 6.0.0 ; extra == \"test\"",
          "setuptools >= 65 ; extra == \"test\""
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Changelog, https://wheel.readthedocs.io/en/stable/news.html",
          "Documentation, https://wheel.readthedocs.io/",
          "Issue Tracker, https://github.com/pypa/wheel/issues",
          "Source, https://github.com/pypa/wheel"
        ],
        "provides_extra": [
          "test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/f4/be/6985abb1011fda8a523cfe21ed9629e397d6e06fb5bae99750402b25c95b/bashlex-0.18-py2.py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=91d73a23a3e51711919c1c899083890cdecffc91d8c088942725ac13e9dcfffa",
          "hashes": {
            "sha256": "91d73a23a3e51711919c1c899083890cdecffc91d8c088942725ac13e9dcfffa"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "bashlex",
        "version": "0.18",
        "summary": "Python parser for bash",
        "description": "bashlex is a Python port of the parser used internally by GNU bash.\n\nFor the most part it's transliterated from C, the major differences are:\n\n1. it does not execute anything\n2. it is reentrant\n3. it generates a complete AST\n\nSee https://github.com/idank/bashlex/blob/master/README.md for more info.\n",
        "home_page": "https://github.com/idank/bashlex.git",
        "author": "Idan Kamara",
        "author_email": "i@idank.me",
        "license": "GPLv3+",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Topic :: System :: System Shells",
          "Topic :: Text Processing"
        ],
        "requires_dist": [
          "enum34 ; python_version < \"3.4\""
        ],
        "requires_python": ">=2.7, !=3.0, !=3.1, !=3.2, !=3.3, !=3.4"
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/c0/70/6b0627e5bd68204ee580126ed3513140b2298995c1233bd67404b4e44d0e/coverage-7.6.4-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=5915fcdec0e54ee229926868e9b08586376cae1f5faa9bbaf8faf3561b393d52",
          "hashes": {
            "sha256": "5915fcdec0e54ee229926868e9b08586376cae1f5faa9bbaf8faf3561b393d52"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "coverage",
        "version": "7.6.4",
        "summary": "Code coverage measurement for Python",
        "description": ".. Licensed under the Apache License: http://www.apache.org/licenses/LICENSE-2.0\n.. For details: https://github.com/nedbat/coveragepy/blob/master/NOTICE.txt\n\n===========\nCoverage.py\n===========\n\nCode coverage measurement for Python.\n\n.. image:: https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner2-direct.svg\n    :target: https://vshymanskyy.github.io/StandWithUkraine\n    :alt: Stand with Ukraine\n\n-------------\n\n|  |kit| |license| |versions|\n|  |test-status| |quality-status| |docs| |metacov|\n|  |tidelift| |sponsor| |stars| |mastodon-coveragepy| |mastodon-nedbat|\n\nCoverage.py measures code coverage, typically during test execution. It uses\nthe code analysis tools and tracing hooks provided in the Python standard\nlibrary to determine which lines are executable, and which have been executed.\n\nCoverage.py runs on these versions of Python:\n\n.. PYVERSIONS\n\n* Python 3.9 through 3.14 alpha 1, including free-threading.\n* PyPy3 versions 3.9 and 3.10.\n\nDocumentation is on `Read the Docs`_.  Code repository and issue tracker are on\n`GitHub`_.\n\n.. _Read the Docs: https://coverage.readthedocs.io/en/7.6.4/\n.. _GitHub: https://github.com/nedbat/coveragepy\n\n**New in 7.x:**\nmulti-line exclusion patterns;\nfunction/class reporting;\nexperimental support for sys.monitoring;\ndropped support for Python 3.7 and 3.8;\nadded ``Coverage.collect()`` context manager;\nimproved data combining;\n``[run] exclude_also`` setting;\n``report --format=``;\ntype annotations.\n\n**New in 6.x:**\ndropped support for Python 2.7, 3.5, and 3.6;\nwrite data on SIGTERM;\nadded support for 3.10 match/case statements.\n\n\nFor Enterprise\n--------------\n\n.. |tideliftlogo| image:: https://nedbatchelder.com/pix/Tidelift_Logo_small.png\n   :alt: Tidelift\n   :target: https://tidelift.com/subscription/pkg/pypi-coverage?utm_source=pypi-coverage&utm_medium=referral&utm_campaign=readme\n\n.. list-table::\n   :widths: 10 100\n\n   * - |tideliftlogo|\n     - `Available as part of the Tidelift Subscription. <https://tidelift.com/subscription/pkg/pypi-coverage?utm_source=pypi-coverage&utm_medium=referral&utm_campaign=readme>`_\n       Coverage and thousands of other packages are working with\n       Tidelift to deliver one enterprise subscription that covers all of the open\n       source you use.  If you want the flexibility of open source and the confidence\n       of commercial-grade software, this is for you.\n       `Learn more. <https://tidelift.com/subscription/pkg/pypi-coverage?utm_source=pypi-coverage&utm_medium=referral&utm_campaign=readme>`_\n\n\nGetting Started\n---------------\n\nLooking to run ``coverage`` on your test suite? See the `Quick Start section`_\nof the docs.\n\n.. _Quick Start section: https://coverage.readthedocs.io/en/7.6.4/#quick-start\n\n\nChange history\n--------------\n\nThe complete history of changes is on the `change history page`_.\n\n.. _change history page: https://coverage.readthedocs.io/en/7.6.4/changes.html\n\n\nCode of Conduct\n---------------\n\nEveryone participating in the coverage.py project is expected to treat other\npeople with respect and to follow the guidelines articulated in the `Python\nCommunity Code of Conduct`_.\n\n.. _Python Community Code of Conduct: https://www.python.org/psf/codeofconduct/\n\n\nContributing\n------------\n\nFound a bug? Want to help improve the code or documentation? See the\n`Contributing section`_ of the docs.\n\n.. _Contributing section: https://coverage.readthedocs.io/en/7.6.4/contributing.html\n\n\nSecurity\n--------\n\nTo report a security vulnerability, please use the `Tidelift security\ncontact`_.  Tidelift will coordinate the fix and disclosure.\n\n.. _Tidelift security contact: https://tidelift.com/security\n\n\nLicense\n-------\n\nLicensed under the `Apache 2.0 License`_.  For details, see `NOTICE.txt`_.\n\n.. _Apache 2.0 License: http://www.apache.org/licenses/LICENSE-2.0\n.. _NOTICE.txt: https://github.com/nedbat/coveragepy/blob/master/NOTICE.txt\n\n\n.. |test-status| image:: https://github.com/nedbat/coveragepy/actions/workflows/testsuite.yml/badge.svg?branch=master&event=push\n    :target: https://github.com/nedbat/coveragepy/actions/workflows/testsuite.yml\n    :alt: Test suite status\n.. |quality-status| image:: https://github.com/nedbat/coveragepy/actions/workflows/quality.yml/badge.svg?branch=master&event=push\n    :target: https://github.com/nedbat/coveragepy/actions/workflows/quality.yml\n    :alt: Quality check status\n.. |docs| image:: https://readthedocs.org/projects/coverage/badge/?version=latest&style=flat\n    :target: https://coverage.readthedocs.io/en/7.6.4/\n    :alt: Documentation\n.. |kit| image:: https://img.shields.io/pypi/v/coverage\n    :target: https://pypi.org/project/coverage/\n    :alt: PyPI status\n.. |versions| image:: https://img.shields.io/pypi/pyversions/coverage.svg?logo=python&logoColor=FBE072\n    :target: https://pypi.org/project/coverage/\n    :alt: Python versions supported\n.. |license| image:: https://img.shields.io/pypi/l/coverage.svg\n    :target: https://pypi.org/project/coverage/\n    :alt: License\n.. |metacov| image:: https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/nedbat/8c6980f77988a327348f9b02bbaf67f5/raw/metacov.json\n    :target: https://nedbat.github.io/coverage-reports/latest.html\n    :alt: Coverage reports\n.. |tidelift| image:: https://tidelift.com/badges/package/pypi/coverage\n    :target: https://tidelift.com/subscription/pkg/pypi-coverage?utm_source=pypi-coverage&utm_medium=referral&utm_campaign=readme\n    :alt: Tidelift\n.. |stars| image:: https://img.shields.io/github/stars/nedbat/coveragepy.svg?logo=github\n    :target: https://github.com/nedbat/coveragepy/stargazers\n    :alt: GitHub stars\n.. |mastodon-nedbat| image:: https://img.shields.io/badge/dynamic/json?style=flat&labelColor=450657&logo=mastodon&logoColor=ffffff&label=@nedbat&query=followers_count&url=https%3A%2F%2Fhachyderm.io%2Fapi%2Fv1%2Faccounts%2Flookup%3Facct=nedbat\n    :target: https://hachyderm.io/@nedbat\n    :alt: nedbat on Mastodon\n.. |mastodon-coveragepy| image:: https://img.shields.io/badge/dynamic/json?style=flat&labelColor=450657&logo=mastodon&logoColor=ffffff&label=@coveragepy&query=followers_count&url=https%3A%2F%2Fhachyderm.io%2Fapi%2Fv1%2Faccounts%2Flookup%3Facct=coveragepy\n    :target: https://hachyderm.io/@coveragepy\n    :alt: coveragepy on Mastodon\n.. |sponsor| image:: https://img.shields.io/badge/%E2%9D%A4-Sponsor%20me-brightgreen?style=flat&logo=GitHub\n    :target: https://github.com/sponsors/nedbat\n    :alt: Sponsor me on GitHub\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "code",
          "coverage",
          "testing"
        ],
        "home_page": "https://github.com/nedbat/coveragepy",
        "author": "Ned Batchelder and 233 others",
        "author_email": "ned@nedbatchelder.com",
        "license": "Apache-2.0",
        "classifier": [
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: 3.14",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Quality Assurance",
          "Topic :: Software Development :: Testing",
          "Development Status :: 5 - Production/Stable"
        ],
        "requires_dist": [
          "tomli ; (python_full_version <= \"3.11.0a6\") and extra == 'toml'"
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Documentation, https://coverage.readthedocs.io/en/7.6.4",
          "Funding, https://tidelift.com/subscription/pkg/pypi-coverage?utm_source=pypi-coverage&utm_medium=referral&utm_campaign=pypi",
          "Issues, https://github.com/nedbat/coveragepy/issues",
          "Mastodon, https://hachyderm.io/@coveragepy",
          "Mastodon (nedbat), https://hachyderm.io/@nedbat"
        ],
        "provides_extra": [
          "toml"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ac/25/e715fa0bc24ac2114ed69da33adf451a38abb6f3f24ec207908112e9ba53/cryptography-43.0.3-cp39-abi3-manylinux_2_28_x86_64.whl",
        "archive_info": {
          "hash": "sha256=c2e6fc39c4ab499049df3bdf567f768a723a5e8464816e8f009f121a5a9f4405",
          "hashes": {
            "sha256": "c2e6fc39c4ab499049df3bdf567f768a723a5e8464816e8f009f121a5a9f4405"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.3",
        "name": "cryptography",
        "version": "43.0.3",
        "summary": "cryptography is a package which provides cryptographic recipes and primitives to Python developers.",
        "description": "pyca/cryptography\n=================\n\n.. image:: https://img.shields.io/pypi/v/cryptography.svg\n    :target: https://pypi.org/project/cryptography/\n    :alt: Latest Version\n\n.. image:: https://readthedocs.org/projects/cryptography/badge/?version=latest\n    :target: https://cryptography.io\n    :alt: Latest Docs\n\n.. image:: https://github.com/pyca/cryptography/workflows/CI/badge.svg?branch=main\n    :target: https://github.com/pyca/cryptography/actions?query=workflow%3ACI+branch%3Amain\n\n\n``cryptography`` is a package which provides cryptographic recipes and\nprimitives to Python developers. Our goal is for it to be your \"cryptographic\nstandard library\". It supports Python 3.7+ and PyPy3 7.3.11+.\n\n``cryptography`` includes both high level recipes and low level interfaces to\ncommon cryptographic algorithms such as symmetric ciphers, message digests, and\nkey derivation functions. For example, to encrypt something with\n``cryptography``'s high level symmetric encryption recipe:\n\n.. code-block:: pycon\n\n    >>> from cryptography.fernet import Fernet\n    >>> # Put this somewhere safe!\n    >>> key = Fernet.generate_key()\n    >>> f = Fernet(key)\n    >>> token = f.encrypt(b\"A really secret message. Not for prying eyes.\")\n    >>> token\n    b'...'\n    >>> f.decrypt(token)\n    b'A really secret message. Not for prying eyes.'\n\nYou can find more information in the `documentation`_.\n\nYou can install ``cryptography`` with:\n\n.. code-block:: console\n\n    $ pip install cryptography\n\nFor full details see `the installation documentation`_.\n\nDiscussion\n~~~~~~~~~~\n\nIf you run into bugs, you can file them in our `issue tracker`_.\n\nWe maintain a `cryptography-dev`_ mailing list for development discussion.\n\nYou can also join ``#pyca`` on ``irc.libera.chat`` to ask questions or get\ninvolved.\n\nSecurity\n~~~~~~~~\n\nNeed to report a security issue? Please consult our `security reporting`_\ndocumentation.\n\n\n.. _`documentation`: https://cryptography.io/\n.. _`the installation documentation`: https://cryptography.io/en/latest/installation/\n.. _`issue tracker`: https://github.com/pyca/cryptography/issues\n.. _`cryptography-dev`: https://mail.python.org/mailman/listinfo/cryptography-dev\n.. _`security reporting`: https://cryptography.io/en/latest/security/\n\n",
        "description_content_type": "text/x-rst; charset=UTF-8",
        "author": "The cryptography developers <cryptography-dev@python.org>",
        "author_email": "The Python Cryptographic Authority and individual contributors <cryptography-dev@python.org>",
        "license": "Apache-2.0 OR BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: Apache Software License",
          "License :: OSI Approved :: BSD License",
          "Natural Language :: English",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: POSIX",
          "Operating System :: POSIX :: BSD",
          "Operating System :: POSIX :: Linux",
          "Operating System :: Microsoft :: Windows",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Security :: Cryptography"
        ],
        "requires_dist": [
          "cffi >=1.12 ; platform_python_implementation != 'PyPy'",
          "bcrypt >=3.1.5 ; extra == 'ssh'",
          "nox ; extra == 'nox'",
          "cryptography-vectors ==43.0.3 ; extra == 'test'",
          "pytest >=6.2.0 ; extra == 'test'",
          "pytest-benchmark ; extra == 'test'",
          "pytest-cov ; extra == 'test'",
          "pytest-xdist ; extra == 'test'",
          "pretend ; extra == 'test'",
          "certifi ; extra == 'test'",
          "pytest-randomly ; extra == 'test-randomorder'",
          "sphinx >=5.3.0 ; extra == 'docs'",
          "sphinx-rtd-theme >=1.1.1 ; extra == 'docs'",
          "pyenchant >=1.6.11 ; extra == 'docstest'",
          "readme-renderer ; extra == 'docstest'",
          "sphinxcontrib-spelling >=4.0.1 ; extra == 'docstest'",
          "build ; extra == 'sdist'",
          "ruff ; extra == 'pep8test'",
          "mypy ; extra == 'pep8test'",
          "check-sdist ; extra == 'pep8test'",
          "click ; extra == 'pep8test'"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "homepage, https://github.com/pyca/cryptography",
          "documentation, https://cryptography.io/",
          "source, https://github.com/pyca/cryptography/",
          "issues, https://github.com/pyca/cryptography/issues",
          "changelog, https://cryptography.io/en/latest/changelog/"
        ],
        "provides_extra": [
          "ssh",
          "nox",
          "test",
          "test-randomorder",
          "docs",
          "docstest",
          "sdist",
          "pep8test"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/8f/d7/9322c609343d929e75e7e5e6255e614fcc67572cfd083959cdef3b7aad79/docutils-0.21.2-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=dafca5b9e384f0e419294eb4d2ff9fa826435bf15f15b7bd45723e8ad76811b2",
          "hashes": {
            "sha256": "dafca5b9e384f0e419294eb4d2ff9fa826435bf15f15b7bd45723e8ad76811b2"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "docutils",
        "version": "0.21.2",
        "summary": "Docutils -- Python Documentation Utilities",
        "description": "Docutils is a modular system for processing documentation\ninto useful formats, such as HTML, XML, and LaTeX.  For\ninput Docutils supports reStructuredText, an easy-to-read,\nwhat-you-see-is-what-you-get plaintext markup syntax.\n",
        "description_content_type": "text/plain",
        "author_email": "David Goodger <goodger@python.org>",
        "maintainer_email": "docutils-develop list <docutils-develop@lists.sourceforge.net>",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Environment :: Console",
          "Intended Audience :: End Users/Desktop",
          "Intended Audience :: Other Audience",
          "Intended Audience :: Developers",
          "Intended Audience :: System Administrators",
          "License :: Public Domain",
          "License :: OSI Approved :: Python Software Foundation License",
          "License :: OSI Approved :: BSD License",
          "License :: OSI Approved :: GNU General Public License (GPL)",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Topic :: Documentation",
          "Topic :: Software Development :: Documentation",
          "Topic :: Text Processing",
          "Natural Language :: English",
          "Natural Language :: Afrikaans",
          "Natural Language :: Arabic",
          "Natural Language :: Catalan",
          "Natural Language :: Catalan (Valencian)",
          "Natural Language :: Chinese (Simplified)",
          "Natural Language :: Chinese (Traditional)",
          "Natural Language :: Czech",
          "Natural Language :: Danish",
          "Natural Language :: Dutch",
          "Natural Language :: Esperanto",
          "Natural Language :: Finnish",
          "Natural Language :: French",
          "Natural Language :: Galician",
          "Natural Language :: Georgian",
          "Natural Language :: German",
          "Natural Language :: Hebrew",
          "Natural Language :: Italian",
          "Natural Language :: Japanese",
          "Natural Language :: Korean",
          "Natural Language :: Latvian",
          "Natural Language :: Lithuanian",
          "Natural Language :: Persian",
          "Natural Language :: Polish",
          "Natural Language :: Portuguese (Brazilian)",
          "Natural Language :: Russian",
          "Natural Language :: Slovak",
          "Natural Language :: Spanish",
          "Natural Language :: Swedish",
          "Natural Language :: Ukrainian"
        ],
        "requires_python": ">=3.9",
        "project_url": [
          "Homepage, https://docutils.sourceforge.io"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/1b/63/6ab90d0e5225ab9780f6c9fb52254fa36b52bb7c188df9201d05b647e5e1/nh3-0.2.18-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=de3ceed6e661954871d6cd78b410213bdcb136f79aafe22aa7182e028b8c7307",
          "hashes": {
            "sha256": "de3ceed6e661954871d6cd78b410213bdcb136f79aafe22aa7182e028b8c7307"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.3",
        "name": "nh3",
        "version": "0.2.18",
        "summary": "Python bindings to the ammonia HTML sanitization library.",
        "description": "# nh3\n\n![CI](https://github.com/messense/nh3/workflows/CI/badge.svg)\n[![PyPI](https://img.shields.io/pypi/v/nh3.svg)](https://pypi.org/project/nh3)\n[![Documentation Status](https://readthedocs.org/projects/nh3/badge/?version=latest)](https://nh3.readthedocs.io/en/latest/?badge=latest)\n\nPython bindings to the [ammonia](https://github.com/rust-ammonia/ammonia) HTML sanitization library.\n\n## Installation\n\n```bash\npip install nh3\n```\n\n## Usage\n\nSee [the documentation](https://nh3.readthedocs.io/en/latest/).\n\n## Performance\n\nA quick benchmark showing that nh3 is about 20 times faster than the deprecated [bleach](https://pypi.org/project/bleach/) package.\nMeasured on a MacBook Air (M2, 2022).\n\n```ipython\nPython 3.11.0 (main, Oct 25 2022, 16:25:24) [Clang 14.0.0 (clang-1400.0.29.102)]\nType 'copyright', 'credits' or 'license' for more information\nIPython 8.9.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: import requests\n\nIn [2]: import bleach\n\nIn [3]: import nh3\n\nIn [4]: html = requests.get(\"https://www.google.com\").text\n\nIn [5]: %timeit bleach.clean(html)\n2.85 ms ± 22.8 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nIn [6]: %timeit nh3.clean(html)\n138 µs ± 860 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n```\n\n## License\n\nThis work is released under the MIT license. A copy of the license is provided in the [LICENSE](./LICENSE) file.\n\n",
        "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
        "author": "messense <messense@icloud.com>",
        "author_email": "messense <messense@icloud.com>",
        "license": "MIT",
        "project_url": [
          "Source Code, https://github.com/messense/nh3"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/88/5f/e351af9a41f866ac3f1fac4ca0613908d9a41741cfcf2228f4ad853b697d/pluggy-1.5.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669",
          "hashes": {
            "sha256": "44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pluggy",
        "version": "1.5.0",
        "platform": [
          "unix",
          "linux",
          "osx",
          "win32"
        ],
        "summary": "plugin and hook calling mechanisms for python",
        "description": "====================================================\npluggy - A minimalist production ready plugin system\n====================================================\n\n|pypi| |conda-forge| |versions| |github-actions| |gitter| |black| |codecov|\n\nThis is the core framework used by the `pytest`_, `tox`_, and `devpi`_ projects.\n\nPlease `read the docs`_ to learn more!\n\nA definitive example\n====================\n.. code-block:: python\n\n    import pluggy\n\n    hookspec = pluggy.HookspecMarker(\"myproject\")\n    hookimpl = pluggy.HookimplMarker(\"myproject\")\n\n\n    class MySpec:\n        \"\"\"A hook specification namespace.\"\"\"\n\n        @hookspec\n        def myhook(self, arg1, arg2):\n            \"\"\"My special little hook that you can customize.\"\"\"\n\n\n    class Plugin_1:\n        \"\"\"A hook implementation namespace.\"\"\"\n\n        @hookimpl\n        def myhook(self, arg1, arg2):\n            print(\"inside Plugin_1.myhook()\")\n            return arg1 + arg2\n\n\n    class Plugin_2:\n        \"\"\"A 2nd hook implementation namespace.\"\"\"\n\n        @hookimpl\n        def myhook(self, arg1, arg2):\n            print(\"inside Plugin_2.myhook()\")\n            return arg1 - arg2\n\n\n    # create a manager and add the spec\n    pm = pluggy.PluginManager(\"myproject\")\n    pm.add_hookspecs(MySpec)\n\n    # register plugins\n    pm.register(Plugin_1())\n    pm.register(Plugin_2())\n\n    # call our ``myhook`` hook\n    results = pm.hook.myhook(arg1=1, arg2=2)\n    print(results)\n\n\nRunning this directly gets us::\n\n    $ python docs/examples/toy-example.py\n    inside Plugin_2.myhook()\n    inside Plugin_1.myhook()\n    [-1, 3]\n\n\n.. badges\n\n.. |pypi| image:: https://img.shields.io/pypi/v/pluggy.svg\n    :target: https://pypi.org/pypi/pluggy\n\n.. |versions| image:: https://img.shields.io/pypi/pyversions/pluggy.svg\n    :target: https://pypi.org/pypi/pluggy\n\n.. |github-actions| image:: https://github.com/pytest-dev/pluggy/workflows/main/badge.svg\n    :target: https://github.com/pytest-dev/pluggy/actions\n\n.. |conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/pluggy.svg\n    :target: https://anaconda.org/conda-forge/pytest\n\n.. |gitter| image:: https://badges.gitter.im/pytest-dev/pluggy.svg\n    :alt: Join the chat at https://gitter.im/pytest-dev/pluggy\n    :target: https://gitter.im/pytest-dev/pluggy?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/ambv/black\n\n.. |codecov| image:: https://codecov.io/gh/pytest-dev/pluggy/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/pytest-dev/pluggy\n    :alt: Code coverage Status\n\n.. links\n.. _pytest:\n    http://pytest.org\n.. _tox:\n    https://tox.readthedocs.org\n.. _devpi:\n    http://doc.devpi.net\n.. _read the docs:\n   https://pluggy.readthedocs.io/en/latest/\n\n\nSupport pluggy\n--------------\n\n`Open Collective`_ is an online funding platform for open and transparent communities.\nIt provides tools to raise money and share your finances in full transparency.\n\nIt is the platform of choice for individuals and companies that want to make one-time or\nmonthly donations directly to the project.\n\n``pluggy`` is part of the ``pytest-dev`` project, see more details in the `pytest collective`_.\n\n.. _Open Collective: https://opencollective.com\n.. _pytest collective: https://opencollective.com/pytest\n",
        "description_content_type": "text/x-rst",
        "home_page": "https://github.com/pytest-dev/pluggy",
        "author": "Holger Krekel",
        "author_email": "holger@merlinux.eu",
        "license": "MIT",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: POSIX",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: MacOS :: MacOS X",
          "Topic :: Software Development :: Testing",
          "Topic :: Software Development :: Libraries",
          "Topic :: Utilities",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11"
        ],
        "requires_dist": [
          "pre-commit ; extra == 'dev'",
          "tox ; extra == 'dev'",
          "pytest ; extra == 'testing'",
          "pytest-benchmark ; extra == 'testing'"
        ],
        "requires_python": ">=3.8",
        "provides_extra": [
          "dev",
          "testing"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/f7/3f/01c8b82017c199075f8f788d0d906b9ffbbc5a47dc9918a945e13d5a2bda/pygments-2.18.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=b8e6aca0523f3ab76fee51799c488e38782ac06eafcf95e7ba832985c8e7b13a",
          "hashes": {
            "sha256": "b8e6aca0523f3ab76fee51799c488e38782ac06eafcf95e7ba832985c8e7b13a"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.3",
        "name": "Pygments",
        "version": "2.18.0",
        "summary": "Pygments is a syntax highlighting package written in Python.",
        "description": "Pygments\n~~~~~~~~\n\nPygments is a syntax highlighting package written in Python.\n\nIt is a generic syntax highlighter suitable for use in code hosting, forums,\nwikis or other applications that need to prettify source code.  Highlights\nare:\n\n* a wide range of over 500 languages and other text formats is supported\n* special attention is paid to details, increasing quality by a fair amount\n* support for new languages and formats are added easily\n* a number of output formats, presently HTML, LaTeX, RTF, SVG, all image\n  formats that PIL supports and ANSI sequences\n* it is usable as a command-line tool and as a library\n\nCopyright 2006-2024 by the Pygments team, see ``AUTHORS``.\nLicensed under the BSD, see ``LICENSE`` for details.\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "syntax",
          "highlighting"
        ],
        "author_email": "Georg Brandl <georg@python.org>",
        "maintainer": "Matthäus G. Chajdas",
        "maintainer_email": "Georg Brandl <georg@python.org>, Jean Abou Samra <jean@abou-samra.fr>",
        "license": "BSD-2-Clause",
        "classifier": [
          "Development Status :: 6 - Mature",
          "Intended Audience :: Developers",
          "Intended Audience :: End Users/Desktop",
          "Intended Audience :: System Administrators",
          "License :: OSI Approved :: BSD License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Text Processing :: Filters",
          "Topic :: Utilities"
        ],
        "requires_dist": [
          "colorama>=0.4.6; extra == 'windows-terminal'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Homepage, https://pygments.org",
          "Documentation, https://pygments.org/docs",
          "Source, https://github.com/pygments/pygments",
          "Bug Tracker, https://github.com/pygments/pygments/issues",
          "Changelog, https://github.com/pygments/pygments/blob/master/CHANGES"
        ],
        "provides_extra": [
          "plugins",
          "windows-terminal"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/4b/02/8db98cdc1a58e0abd6716d5e63244658e6e63513c65f469f34b6f1053fd0/bracex-2.5.post1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=13e5732fec27828d6af308628285ad358047cec36801598368cb28bc631dbaf6",
          "hashes": {
            "sha256": "13e5732fec27828d6af308628285ad358047cec36801598368cb28bc631dbaf6"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.3",
        "name": "bracex",
        "version": "2.5.post1",
        "summary": "Bash style brace expander.",
        "description": "[![Donate via PayPal][donate-image]][donate-link]\n[![Build][github-ci-image]][github-ci-link]\n[![Coverage Status][codecov-image]][codecov-link]\n[![PyPI Version][pypi-image]][pypi-link]\n[![PyPI - Python Version][python-image]][pypi-link]\n![License][license-image-mit]\n# Bracex\n\nBracex is a brace expanding library (à la Bash) for Python. Brace expanding is used to generate arbitrary strings.\n\n```console\n$ echo {{a,b},c}d\nad bd cd\n```\n\nBracex adds this ability to Python:\n\n```python\n>>> bracex.expand(r'file-{{a,b},c}d.txt')\n['file-ad.txt', 'file-bd.txt', 'file-cd.txt']\n```\n\nand as a command:\n\n```console\n$ python3 -m bracex -0 \"base/{a,b}/{1..2}\" | xargs -0 mkdir -p\n$ tree base/\nbase/\n├── a\n│   ├── 1\n│   └── 2\n└── b\n    ├── 1\n    └── 2\n```\n\n- **Why Bracex over other solutions?**\n\n    Bracex actually follows pretty closely to how Bash processes braces. It is not a 1:1 implementation of how Bash\n    handles braces, but generally, it follows very closely. Almost all of the test cases are run through Bash first,\n    then our implementation is compared against the results Bash gives. There are a few cases where we have purposely\n    deviated. For instance, we are not handling Bash's command line inputs, so we are not giving special meaning to back\n    ticks and quotes at this time.\n\n    On the command line Bracex can handle more expansions than Bash itself.\n\n## Install\n\n```console\n$ pip install bracex\n```\n\n## Documentation\n\nDocumentation is found here: https://facelessuser.github.io/bracex/.\n\n## License\n\nMIT License\n\n[github-ci-image]: https://github.com/facelessuser/bracex/actions/workflows/build.yml/badge.svg?branch=master&event=push\n[github-ci-link]: https://github.com/facelessuser/bracex/actions?query=workflow%3Abuild+branch%3Amaster\n[codecov-image]: https://img.shields.io/codecov/c/github/facelessuser/bracex/master.svg?logo=codecov&logoColor=aaaaaa&labelColor=333333\n[codecov-link]: https://codecov.io/github/facelessuser/bracex\n[pypi-image]: https://img.shields.io/pypi/v/bracex.svg?logo=pypi&logoColor=aaaaaa&labelColor=333333\n[pypi-link]: https://pypi.python.org/pypi/bracex\n[python-image]: https://img.shields.io/pypi/pyversions/bracex?logo=python&logoColor=aaaaaa&labelColor=333333\n[license-image-mit]: https://img.shields.io/badge/license-MIT-blue.svg?labelColor=333333\n[donate-image]: https://img.shields.io/badge/Donate-PayPal-3fabd1?logo=paypal\n[donate-link]: https://www.paypal.me/facelessuser\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "bash",
          "brace",
          "expand"
        ],
        "author_email": "Isaac Muse <Isaac.Muse@gmail.com>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Environment :: Console",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Topic :: Software Development :: Libraries :: Python Modules",
          "Typing :: Typed"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Homepage, https://github.com/facelessuser/bracex"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b9/f8/feced7779d755758a52d1f6635d990b8d98dc0a29fa568bbe0625f18fdf3/filelock-3.16.1-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=2082e5703d51fbf98ea75855d9d5527e33d8ff23099bec374a134febee6946b0",
          "hashes": {
            "sha256": "2082e5703d51fbf98ea75855d9d5527e33d8ff23099bec374a134febee6946b0"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.3",
        "name": "filelock",
        "version": "3.16.1",
        "summary": "A platform independent file lock.",
        "description": "# filelock\n\n[![PyPI](https://img.shields.io/pypi/v/filelock)](https://pypi.org/project/filelock/)\n[![Supported Python\nversions](https://img.shields.io/pypi/pyversions/filelock.svg)](https://pypi.org/project/filelock/)\n[![Documentation\nstatus](https://readthedocs.org/projects/py-filelock/badge/?version=latest)](https://py-filelock.readthedocs.io/en/latest/?badge=latest)\n[![Code style:\nblack](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Downloads](https://static.pepy.tech/badge/filelock/month)](https://pepy.tech/project/filelock)\n[![check](https://github.com/tox-dev/py-filelock/actions/workflows/check.yml/badge.svg)](https://github.com/tox-dev/py-filelock/actions/workflows/check.yml)\n\nFor more information checkout the [official documentation](https://py-filelock.readthedocs.io/en/latest/index.html).\n",
        "description_content_type": "text/markdown",
        "keywords": [
          "application",
          "cache",
          "directory",
          "log",
          "user"
        ],
        "maintainer_email": "Bernát Gábor <gaborjbernat@gmail.com>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: The Unlicense (Unlicense)",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Topic :: Internet",
          "Topic :: Software Development :: Libraries",
          "Topic :: System"
        ],
        "requires_dist": [
          "furo>=2024.8.6; extra == 'docs'",
          "sphinx-autodoc-typehints>=2.4.1; extra == 'docs'",
          "sphinx>=8.0.2; extra == 'docs'",
          "covdefaults>=2.3; extra == 'testing'",
          "coverage>=7.6.1; extra == 'testing'",
          "diff-cover>=9.2; extra == 'testing'",
          "pytest-asyncio>=0.24; extra == 'testing'",
          "pytest-cov>=5; extra == 'testing'",
          "pytest-mock>=3.14; extra == 'testing'",
          "pytest-timeout>=2.3.1; extra == 'testing'",
          "pytest>=8.3.3; extra == 'testing'",
          "virtualenv>=20.26.4; extra == 'testing'",
          "typing-extensions>=4.12.2; (python_version < '3.11') and extra == 'typing'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Documentation, https://py-filelock.readthedocs.io",
          "Homepage, https://github.com/tox-dev/py-filelock",
          "Source, https://github.com/tox-dev/py-filelock",
          "Tracker, https://github.com/tox-dev/py-filelock/issues"
        ],
        "provides_extra": [
          "docs",
          "testing",
          "typing"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/ef/a6/62565a6e1cf69e10f5727360368e451d4b7f58beeac6173dc9db836a5b46/iniconfig-2.0.0-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374",
          "hashes": {
            "sha256": "b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "iniconfig",
        "version": "2.0.0",
        "summary": "brain-dead simple config-ini parsing",
        "description": "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\niniconfig is a small and simple INI-file parser module\nhaving a unique set of features:\n\n* maintains order of sections and entries\n* supports multi-line values with or without line-continuations\n* supports \"#\" comments everywhere\n* raises errors with proper line-numbers\n* no bells and whistles like automatic substitutions\n* iniconfig raises an Error if two sections have the same name.\n\nIf you encounter issues or have feature wishes please report them to:\n\n    https://github.com/RonnyPfannschmidt/iniconfig/issues\n\nBasic Example\n===================================\n\nIf you have an ini file like this:\n\n.. code-block:: ini\n\n    # content of example.ini\n    [section1] # comment\n    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n    name2=\n        line1\n        line2\n\nthen you can do:\n\n.. code-block:: pycon\n\n    >>> import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n    >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n    ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1', 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'), ('name1b', 'value1,value2')]\n    >>> 'section1' in ini\n    True\n    >>> 'inexistendsection' in ini\n    False\n",
        "description_content_type": "text/x-rst",
        "author_email": "Ronny Pfannschmidt <opensource@ronnypfannschmidt.de>, Holger Krekel <holger.krekel@gmail.com>",
        "classifier": [
          "Development Status :: 4 - Beta",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: MacOS :: MacOS X",
          "Operating System :: Microsoft :: Windows",
          "Operating System :: POSIX",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.7",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Topic :: Software Development :: Libraries",
          "Topic :: Utilities"
        ],
        "requires_python": ">=3.7",
        "project_url": [
          "Homepage, https://github.com/pytest-dev/iniconfig"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/3c/a6/bc1012356d8ece4d66dd75c4b9fc6c1f6650ddd5991e421177d9f8f671be/platformdirs-4.3.6-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=73e575e1408ab8103900836b97580d5307456908a03e92031bab39e4554cc3fb",
          "hashes": {
            "sha256": "73e575e1408ab8103900836b97580d5307456908a03e92031bab39e4554cc3fb"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.3",
        "name": "platformdirs",
        "version": "4.3.6",
        "summary": "A small Python package for determining appropriate platform-specific dirs, e.g. a `user data dir`.",
        "description": "The problem\n===========\n\n.. image:: https://badge.fury.io/py/platformdirs.svg\n   :target: https://badge.fury.io/py/platformdirs\n.. image:: https://img.shields.io/pypi/pyversions/platformdirs.svg\n   :target: https://pypi.python.org/pypi/platformdirs/\n.. image:: https://github.com/tox-dev/platformdirs/actions/workflows/check.yaml/badge.svg\n   :target: https://github.com/platformdirs/platformdirs/actions\n.. image:: https://static.pepy.tech/badge/platformdirs/month\n   :target: https://pepy.tech/project/platformdirs\n\nWhen writing desktop application, finding the right location to store user data\nand configuration varies per platform. Even for single-platform apps, there\nmay by plenty of nuances in figuring out the right location.\n\nFor example, if running on macOS, you should use::\n\n    ~/Library/Application Support/<AppName>\n\nIf on Windows (at least English Win) that should be::\n\n    C:\\Documents and Settings\\<User>\\Application Data\\Local Settings\\<AppAuthor>\\<AppName>\n\nor possibly::\n\n    C:\\Documents and Settings\\<User>\\Application Data\\<AppAuthor>\\<AppName>\n\nfor `roaming profiles <https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-vista/cc766489(v=ws.10)>`_ but that is another story.\n\nOn Linux (and other Unices), according to the `XDG Basedir Spec`_, it should be::\n\n    ~/.local/share/<AppName>\n\n.. _XDG Basedir Spec: https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\n``platformdirs`` to the rescue\n==============================\n\nThis kind of thing is what the ``platformdirs`` package is for.\n``platformdirs`` will help you choose an appropriate:\n\n- user data dir (``user_data_dir``)\n- user config dir (``user_config_dir``)\n- user cache dir (``user_cache_dir``)\n- site data dir (``site_data_dir``)\n- site config dir (``site_config_dir``)\n- user log dir (``user_log_dir``)\n- user documents dir (``user_documents_dir``)\n- user downloads dir (``user_downloads_dir``)\n- user pictures dir (``user_pictures_dir``)\n- user videos dir (``user_videos_dir``)\n- user music dir (``user_music_dir``)\n- user desktop dir (``user_desktop_dir``)\n- user runtime dir (``user_runtime_dir``)\n\nAnd also:\n\n- Is slightly opinionated on the directory names used. Look for \"OPINION\" in\n  documentation and code for when an opinion is being applied.\n\nExample output\n==============\n\nOn macOS:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/Users/trentm/Library/Application Support/SuperApp'\n    >>> site_data_dir(appname, appauthor)\n    '/Library/Application Support/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/Users/trentm/Library/Caches/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/Users/trentm/Library/Logs/SuperApp'\n    >>> user_documents_dir()\n    '/Users/trentm/Documents'\n    >>> user_downloads_dir()\n    '/Users/trentm/Downloads'\n    >>> user_pictures_dir()\n    '/Users/trentm/Pictures'\n    >>> user_videos_dir()\n    '/Users/trentm/Movies'\n    >>> user_music_dir()\n    '/Users/trentm/Music'\n    >>> user_desktop_dir()\n    '/Users/trentm/Desktop'\n    >>> user_runtime_dir(appname, appauthor)\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp'\n\nOn Windows:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp'\n    >>> user_data_dir(appname, appauthor, roaming=True)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Roaming\\\\Acme\\\\SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp\\\\Cache'\n    >>> user_log_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Acme\\\\SuperApp\\\\Logs'\n    >>> user_documents_dir()\n    'C:\\\\Users\\\\trentm\\\\Documents'\n    >>> user_downloads_dir()\n    'C:\\\\Users\\\\trentm\\\\Downloads'\n    >>> user_pictures_dir()\n    'C:\\\\Users\\\\trentm\\\\Pictures'\n    >>> user_videos_dir()\n    'C:\\\\Users\\\\trentm\\\\Videos'\n    >>> user_music_dir()\n    'C:\\\\Users\\\\trentm\\\\Music'\n    >>> user_desktop_dir()\n    'C:\\\\Users\\\\trentm\\\\Desktop'\n    >>> user_runtime_dir(appname, appauthor)\n    'C:\\\\Users\\\\trentm\\\\AppData\\\\Local\\\\Temp\\\\Acme\\\\SuperApp'\n\nOn Linux:\n\n.. code-block:: pycon\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/home/trentm/.local/share/SuperApp'\n    >>> site_data_dir(appname, appauthor)\n    '/usr/local/share/SuperApp'\n    >>> site_data_dir(appname, appauthor, multipath=True)\n    '/usr/local/share/SuperApp:/usr/share/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/home/trentm/.cache/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/home/trentm/.local/state/SuperApp/log'\n    >>> user_config_dir(appname)\n    '/home/trentm/.config/SuperApp'\n    >>> user_documents_dir()\n    '/home/trentm/Documents'\n    >>> user_downloads_dir()\n    '/home/trentm/Downloads'\n    >>> user_pictures_dir()\n    '/home/trentm/Pictures'\n    >>> user_videos_dir()\n    '/home/trentm/Videos'\n    >>> user_music_dir()\n    '/home/trentm/Music'\n    >>> user_desktop_dir()\n    '/home/trentm/Desktop'\n    >>> user_runtime_dir(appname, appauthor)\n    '/run/user/{os.getuid()}/SuperApp'\n    >>> site_config_dir(appname)\n    '/etc/xdg/SuperApp'\n    >>> os.environ[\"XDG_CONFIG_DIRS\"] = \"/etc:/usr/local/etc\"\n    >>> site_config_dir(appname, multipath=True)\n    '/etc/SuperApp:/usr/local/etc/SuperApp'\n\nOn Android::\n\n    >>> from platformdirs import *\n    >>> appname = \"SuperApp\"\n    >>> appauthor = \"Acme\"\n    >>> user_data_dir(appname, appauthor)\n    '/data/data/com.myApp/files/SuperApp'\n    >>> user_cache_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp'\n    >>> user_log_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp/log'\n    >>> user_config_dir(appname)\n    '/data/data/com.myApp/shared_prefs/SuperApp'\n    >>> user_documents_dir()\n    '/storage/emulated/0/Documents'\n    >>> user_downloads_dir()\n    '/storage/emulated/0/Downloads'\n    >>> user_pictures_dir()\n    '/storage/emulated/0/Pictures'\n    >>> user_videos_dir()\n    '/storage/emulated/0/DCIM/Camera'\n    >>> user_music_dir()\n    '/storage/emulated/0/Music'\n    >>> user_desktop_dir()\n    '/storage/emulated/0/Desktop'\n    >>> user_runtime_dir(appname, appauthor)\n    '/data/data/com.myApp/cache/SuperApp/tmp'\n\nNote: Some android apps like Termux and Pydroid are used as shells. These\napps are used by the end user to emulate Linux environment. Presence of\n``SHELL`` environment variable is used by Platformdirs to differentiate\nbetween general android apps and android apps used as shells. Shell android\napps also support ``XDG_*`` environment variables.\n\n\n``PlatformDirs`` for convenience\n================================\n\n.. code-block:: pycon\n\n    >>> from platformdirs import PlatformDirs\n    >>> dirs = PlatformDirs(\"SuperApp\", \"Acme\")\n    >>> dirs.user_data_dir\n    '/Users/trentm/Library/Application Support/SuperApp'\n    >>> dirs.site_data_dir\n    '/Library/Application Support/SuperApp'\n    >>> dirs.user_cache_dir\n    '/Users/trentm/Library/Caches/SuperApp'\n    >>> dirs.user_log_dir\n    '/Users/trentm/Library/Logs/SuperApp'\n    >>> dirs.user_documents_dir\n    '/Users/trentm/Documents'\n    >>> dirs.user_downloads_dir\n    '/Users/trentm/Downloads'\n    >>> dirs.user_pictures_dir\n    '/Users/trentm/Pictures'\n    >>> dirs.user_videos_dir\n    '/Users/trentm/Movies'\n    >>> dirs.user_music_dir\n    '/Users/trentm/Music'\n    >>> dirs.user_desktop_dir\n    '/Users/trentm/Desktop'\n    >>> dirs.user_runtime_dir\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp'\n\nPer-version isolation\n=====================\n\nIf you have multiple versions of your app in use that you want to be\nable to run side-by-side, then you may want version-isolation for these\ndirs::\n\n    >>> from platformdirs import PlatformDirs\n    >>> dirs = PlatformDirs(\"SuperApp\", \"Acme\", version=\"1.0\")\n    >>> dirs.user_data_dir\n    '/Users/trentm/Library/Application Support/SuperApp/1.0'\n    >>> dirs.site_data_dir\n    '/Library/Application Support/SuperApp/1.0'\n    >>> dirs.user_cache_dir\n    '/Users/trentm/Library/Caches/SuperApp/1.0'\n    >>> dirs.user_log_dir\n    '/Users/trentm/Library/Logs/SuperApp/1.0'\n    >>> dirs.user_documents_dir\n    '/Users/trentm/Documents'\n    >>> dirs.user_downloads_dir\n    '/Users/trentm/Downloads'\n    >>> dirs.user_pictures_dir\n    '/Users/trentm/Pictures'\n    >>> dirs.user_videos_dir\n    '/Users/trentm/Movies'\n    >>> dirs.user_music_dir\n    '/Users/trentm/Music'\n    >>> dirs.user_desktop_dir\n    '/Users/trentm/Desktop'\n    >>> dirs.user_runtime_dir\n    '/Users/trentm/Library/Caches/TemporaryItems/SuperApp/1.0'\n\nBe wary of using this for configuration files though; you'll need to handle\nmigrating configuration files manually.\n\nWhy this Fork?\n==============\n\nThis repository is a friendly fork of the wonderful work started by\n`ActiveState <https://github.com/ActiveState/appdirs>`_ who created\n``appdirs``, this package's ancestor.\n\nMaintaining an open source project is no easy task, particularly\nfrom within an organization, and the Python community is indebted\nto ``appdirs`` (and to Trent Mick and Jeff Rouse in particular) for\ncreating an incredibly useful simple module, as evidenced by the wide\nnumber of users it has attracted over the years.\n\nNonetheless, given the number of long-standing open issues\nand pull requests, and no clear path towards `ensuring\nthat maintenance of the package would continue or grow\n<https://github.com/ActiveState/appdirs/issues/79>`_, this fork was\ncreated.\n\nContributions are most welcome.\n",
        "description_content_type": "text/x-rst",
        "keywords": [
          "appdirs",
          "application",
          "cache",
          "directory",
          "log",
          "user"
        ],
        "maintainer_email": "Bernát Gábor <gaborjbernat@gmail.com>, Julian Berman <Julian@GrayVines.com>, Ofek Lev <oss@ofek.dev>, Ronny Pfannschmidt <opensource@ronnypfannschmidt.de>",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "Intended Audience :: Developers",
          "License :: OSI Approved :: MIT License",
          "Operating System :: OS Independent",
          "Programming Language :: Python",
          "Programming Language :: Python :: 3 :: Only",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "Topic :: Software Development :: Libraries :: Python Modules"
        ],
        "requires_dist": [
          "furo>=2024.8.6; extra == 'docs'",
          "proselint>=0.14; extra == 'docs'",
          "sphinx-autodoc-typehints>=2.4; extra == 'docs'",
          "sphinx>=8.0.2; extra == 'docs'",
          "appdirs==1.4.4; extra == 'test'",
          "covdefaults>=2.3; extra == 'test'",
          "pytest-cov>=5; extra == 'test'",
          "pytest-mock>=3.14; extra == 'test'",
          "pytest>=8.3.2; extra == 'test'",
          "mypy>=1.11.2; extra == 'type'"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Changelog, https://github.com/tox-dev/platformdirs/releases",
          "Documentation, https://platformdirs.readthedocs.io",
          "Homepage, https://github.com/tox-dev/platformdirs",
          "Source, https://github.com/tox-dev/platformdirs",
          "Tracker, https://github.com/tox-dev/platformdirs/issues"
        ],
        "provides_extra": [
          "docs",
          "test",
          "type"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/b2/d5/da47df7004cb17e4955df6a43d14b3b4ae77737dff8bf7f8f333196717bf/cffi-1.17.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "archive_info": {
          "hash": "sha256=b62ce867176a75d03a665bad002af8e6d54644fad99a3c70905c543130e39d93",
          "hashes": {
            "sha256": "b62ce867176a75d03a665bad002af8e6d54644fad99a3c70905c543130e39d93"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "cffi",
        "version": "1.17.1",
        "summary": "Foreign Function Interface for Python calling C code.",
        "description": "\nCFFI\n====\n\nForeign Function Interface for Python calling C code.\nPlease see the `Documentation <http://cffi.readthedocs.org/>`_.\n\nContact\n-------\n\n`Mailing list <https://groups.google.com/forum/#!forum/python-cffi>`_\n",
        "home_page": "http://cffi.readthedocs.org",
        "author": "Armin Rigo, Maciej Fijalkowski",
        "author_email": "python-cffi@googlegroups.com",
        "license": "MIT",
        "classifier": [
          "Programming Language :: Python",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12",
          "Programming Language :: Python :: 3.13",
          "Programming Language :: Python :: Implementation :: CPython",
          "Programming Language :: Python :: Implementation :: PyPy",
          "License :: OSI Approved :: MIT License"
        ],
        "requires_dist": [
          "pycparser"
        ],
        "requires_python": ">=3.8",
        "project_url": [
          "Documentation, http://cffi.readthedocs.org/",
          "Source Code, https://github.com/python-cffi/cffi",
          "Issue Tracker, https://github.com/python-cffi/cffi/issues",
          "Changelog, https://cffi.readthedocs.io/en/latest/whatsnew.html",
          "Downloads, https://github.com/python-cffi/cffi/releases",
          "Contact, https://groups.google.com/forum/#!forum/python-cffi"
        ]
      }
    },
    {
      "download_info": {
        "url": "https://files.pythonhosted.org/packages/13/a3/a812df4e2dd5696d1f351d58b8fe16a405b234ad2886a0dab9183fb78109/pycparser-2.22-py3-none-any.whl",
        "archive_info": {
          "hash": "sha256=c3702b6d3dd8c7abc1afa565d7e63d53a1d0bd86cdc24edd75470f4de499cfcc",
          "hashes": {
            "sha256": "c3702b6d3dd8c7abc1afa565d7e63d53a1d0bd86cdc24edd75470f4de499cfcc"
          }
        }
      },
      "is_direct": false,
      "is_yanked": false,
      "requested": false,
      "metadata": {
        "metadata_version": "2.1",
        "name": "pycparser",
        "version": "2.22",
        "platform": [
          "Cross Platform"
        ],
        "summary": "C parser in Python",
        "description": "\n        pycparser is a complete parser of the C language, written in\n        pure Python using the PLY parsing library.\n        It parses C code into an AST and can serve as a front-end for\n        C compilers or analysis tools.\n    \n\n",
        "home_page": "https://github.com/eliben/pycparser",
        "author": "Eli Bendersky",
        "author_email": "eliben@gmail.com",
        "maintainer": "Eli Bendersky",
        "license": "BSD-3-Clause",
        "classifier": [
          "Development Status :: 5 - Production/Stable",
          "License :: OSI Approved :: BSD License",
          "Programming Language :: Python :: 3",
          "Programming Language :: Python :: 3.8",
          "Programming Language :: Python :: 3.9",
          "Programming Language :: Python :: 3.10",
          "Programming Language :: Python :: 3.11",
          "Programming Language :: Python :: 3.12"
        ],
        "requires_python": ">=3.8"
      }
    }
  ],
  "environment": {
    "implementation_name": "cpython",
    "implementation_version": "3.12.7",
    "os_name": "posix",
    "platform_machine": "x86_64",
    "platform_release": "5.15.0-1074-azure",
    "platform_system": "Linux",
    "platform_version": "#83~20.04.1-Ubuntu SMP Fri Oct 4 21:49:59 UTC 2024",
    "python_full_version": "3.12.7",
    "platform_python_implementation": "CPython",
    "python_version": "3.12",
    "sys_platform": "linux"
  }
}