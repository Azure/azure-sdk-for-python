{% import 'keywords.jinja2' as keywords with context %}
{{ code_model.options['license_header'] }}

{{ imports }}

{% if code_model.need_request_converter and not async_mode %}
def _convert_request(request, files=None):
    data = request.content if not files else None
    request = HttpRequest(method=request.method, url=request.url, headers=request.headers, data=data)
    if files:
        request.set_formdata_body(files)
    return request
{% endif %}
{% if code_model.need_mixin_abc %}
    {% for client in clients | selectattr("has_mixin") %}
{% set pylint_disable = "# pylint: disable=name-too-long" if (client.name | length) + ("MixinABC" | length) > 40 else "" %}
class {{ client.name }}MixinABC(  {{ pylint_disable }}
    ABC
):
    """DO NOT use this class. It is for internal typing use only."""
    _client: "{{ keywords.async_class }}PipelineClient"
    _config: {{ client.name }}Configuration
    _serialize: "Serializer"
    _deserialize: "Deserializer"
    {% endfor %}
{% endif %}
{% if code_model.has_abstract_operations %}

def raise_if_not_implemented(cls, abstract_methods):
    not_implemented = [f for f in abstract_methods if not callable(getattr(cls, f, None))]
    if not_implemented:
        raise NotImplementedError("The following methods on operation group '{}' are not implemented: '{}'."
        " Please refer to https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize.".format(
        cls.__name__, '\', \''.join(not_implemented))
        )
{% endif %}

{% if code_model.has_etag %}
def quote_etag(etag: Optional[str]) -> Optional[str]:
    if not etag or etag == "*":
        return etag
    if etag.startswith('"') and etag.endswith('"'):
        return etag
    if etag.startswith("'") and etag.endswith("'"):
        return etag
    return '"' + etag + '"'


def prep_if_match(etag: Optional[str], match_condition: Optional[MatchConditions]) -> Optional[str]:
    if match_condition == MatchConditions.IfNotModified:
        if_match = quote_etag(etag) if etag else None
        return if_match
    if match_condition == MatchConditions.IfPresent:
        return "*"
    return None


def prep_if_none_match(etag: Optional[str], match_condition: Optional[MatchConditions]) -> Optional[str]:
    if match_condition == MatchConditions.IfModified:
        if_none_match = quote_etag(etag) if etag else None
        return if_none_match
    if match_condition == MatchConditions.IfMissing:
        return "*"
    return None
{% endif %}
