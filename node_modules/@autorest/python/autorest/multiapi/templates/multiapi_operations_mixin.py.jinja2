# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from {{ ".." if async_mode else "." }}_serialization import Serializer, Deserializer
{% if imports %}
{{ imports }}
{% endif %}


class {{ code_model.client.name }}OperationsMixin(object):
{% for mixin_operation in code_model.operation_mixin_group.mixin_operations %}

    {{ mixin_operation.signature(async_mode) | indent }}        {{ mixin_operation.description(async_mode) | indent(8) }}
        api_version = self._get_api_version('{{ mixin_operation.name }}')
        {% for api in mixin_operation.available_apis|sort %}
        {% set if_statement = "if" if loop.first else "elif" %}
        {{ if_statement }} api_version == '{{ code_model.mod_to_api_version[api] }}':
            from {{ ".." if async_mode else "." }}{{ api }}{{ ".aio" if async_mode else "" }}.operations import {{ code_model.client.name }}OperationsMixin as OperationClass
        {% endfor %}
        else:
            raise ValueError("API version {} does not have operation '{{ mixin_operation.name }}'".format(api_version))
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._config.api_version = api_version
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        {% if not code_model.client.client_side_validation %}
        mixin_instance._serialize.client_side_validation = False
        {% endif %}
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return {{ "await " if mixin_operation.coroutine(async_mode) }}mixin_instance.{{ mixin_operation.name }}({{ mixin_operation.call(async_mode) }})
{% endfor %}
