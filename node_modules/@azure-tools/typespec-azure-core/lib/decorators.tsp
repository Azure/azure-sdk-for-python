using TypeSpec.Reflection;

namespace Azure {
  namespace Core {
    /**
     * Marks an Enum as being fixed since enums in Azure are
     * assumed to be extensible.
     */
    extern dec fixed(target: Enum);

    /**
     * Marks a Model as a paged collection.
     */
    extern dec pagedResult(entity: Model);

    /**
     * Identifies the ModelProperty that contains the paged items. Can only be used on a Model marked with `@pagedResult`.
     */
    extern dec items(entity: ModelProperty);

    /**
     * Identifies a ModelProperty that contains the next link value. Can only be used on a Model marked with `@pagedResult`.
     */
    extern dec nextLink(entity: ModelProperty);

    /**
     * Identifies an Enum or ModelProperty as containing long-running operation
     * status.
     */
    extern dec lroStatus(entity: Enum | ModelProperty);

    /**
     * Identifies an EnumMember as a long-running "Succeeded" terminal state.
     */
    extern dec lroSucceeded(entity: EnumMember);

    /**
     * Identifies an EnumMember as a long-running "Canceled" terminal state.
     */
    extern dec lroCanceled(entity: EnumMember);

    /**
     * Identifies an enum member as a long-running "Failed" terminal state.
     */
    extern dec lroFailed(entity: EnumMember);

    /**
     * Identifies a model property as containing the location to poll for operation state.
     */
    extern dec pollingLocation(entity: ModelProperty);

    /**
     * Identifies a ModelProperty as containing the final location for the operation result.
     */
    extern dec finalLocation(entity: ModelProperty);

    /**
     * Identifies an operation that is linked to the target operation.
     * @param linkedOperation The linked Operation
     * @param linkType A string indicating the role of the linked operation
     * @param parameters Map of `RequestParameter<T>` and/or `ResponseProperty<T>` that will
     * be passed to the linked operation request.
     */
    extern dec operationLink(
      entity: Operation,
      linkedOperation: Operation,
      linkType: valueof string,
      parameters?: {}
    );

    /**
     * Identifies that an operation is a polling operation for an LRO.
     * @param linkedOperation The linked Operation
     * @param parameters Map of `RequestParameter<T>` and/or `ResponseProperty<T>` that will
     * be passed to the linked operation request.
     */
    extern dec pollingOperation(entity: Operation, linkedOperation: Operation, parameters?: {});

    /**
     * Identifies that an operation is the final operation for an LRO.
     * @param linkedOperation The linked Operation
     * @param parameters Map of `RequestParameter<T>` and/or `ResponseProperty<T>` that will
     * be passed to the linked operation request.
     */
    extern dec finalOperation(entity: Operation, linkedOperation: Operation, parameters?: {});

    /**
     * Identifies that an operation is used to retrieve the next page for paged operations.
     * @param linkedOperation The linked Operation
     * @param parameters Map of `RequestParameter<T>` and/or `ResponseProperty<T>` that will
     * be passed to the linked operation request.
     */
    extern dec nextPageOperation(entity: Operation, linkedOperation: Operation, parameters?: {});
  }
}

namespace Azure {
  namespace Core {
    namespace Foundations {
      /**
       * Deletes any key properties from the model.
       */
      extern dec omitKeyProperties(entity: Model);

      /**
       * Identifies a property on a request model that serves as a linked operation parameter.
       * @param name Property name on the target
       */
      extern dec requestParameter(entity: Model, name: valueof string);

      /**
       * Identifies a property on *all* non-error response models that serve as a linked operation parameter.
       * @param name Property name on the target
       */
      extern dec responseProperty(entity: Model, name: valueof string);
    }
  }
}

namespace Azure {
  namespace Core {
    namespace Foundations {
      namespace Private {
        /**
         * Provides a Model describing parameter customizations to spread into the target.
         * @param customizations Model describing the customization to spread
         */
        extern dec spreadCustomParameters(entity: Model, customizations: {});

        /**
         * Provides a Model describing response property customizations to spread into the target.
         * @param customizations Model describing the customization to spread
         */
        extern dec spreadCustomResponseProperties(entity: Model, customizations: {});

        /**
         * Checks the TResource parameter of an operation signature to ensure it's a valid resource type.
         * Also marks the operation as a resource operation.
         * @param resourceType The possible resource Type to validate.
         */
        extern dec ensureResourceType(entity: TypeSpec.Reflection.Operation, resourceType: unknown);

        /**
         * Checks the TResource parameter of an operation signature to ensure it's a valid resource type.
         */
        extern dec needsRoute(entity: TypeSpec.Reflection.Operation);

        /**
         * Issues a warning if an operation which derives from an operation templated marked with `@ensureVerb`
         * differs from the verb specified.
         * @param templateName: Name of the template operation.
         * @param verb The intended HTTP verb.
         */
        extern dec ensureVerb(
          entity: TypeSpec.Reflection.Operation,
          templateName: valueof string,
          verb: valueof string
        );
      }
    }
  }
}
