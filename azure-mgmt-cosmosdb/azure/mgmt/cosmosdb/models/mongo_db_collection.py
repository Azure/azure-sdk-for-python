# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource import Resource


class MongoDBCollection(Resource):
    """An Azure Cosmos DB MongoDB collection.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The unique resource identifier of the database account.
    :vartype id: str
    :ivar name: The name of the database account.
    :vartype name: str
    :ivar type: The type of Azure resource.
    :vartype type: str
    :param location: The location of the resource group to which the resource
     belongs.
    :type location: str
    :param tags:
    :type tags: dict[str, str]
    :param mongo_db_collection_id: Required. Name of the Cosmos DB MongoDB
     collection
    :type mongo_db_collection_id: str
    :param shard_key: A key-value pair of shard keys to be applied for the
     request.
    :type shard_key: dict[str, str]
    :param indexes: List of index keys
    :type indexes: list[~azure.mgmt.cosmosdb.models.MongoIndex]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'mongo_db_collection_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'mongo_db_collection_id': {'key': 'properties.id', 'type': 'str'},
        'shard_key': {'key': 'properties.shardKey', 'type': '{str}'},
        'indexes': {'key': 'properties.indexes', 'type': '[MongoIndex]'},
    }

    def __init__(self, **kwargs):
        super(MongoDBCollection, self).__init__(**kwargs)
        self.mongo_db_collection_id = kwargs.get('mongo_db_collection_id', None)
        self.shard_key = kwargs.get('shard_key', None)
        self.indexes = kwargs.get('indexes', None)
