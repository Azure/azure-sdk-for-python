# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource_py3 import Resource


class DataManager(Resource):
    """The DataManager resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The Resource Id.
    :vartype id: str
    :ivar name: The Resource Name.
    :vartype name: str
    :ivar type: The Resource type.
    :vartype type: str
    :param location: Required. The location of the resource. This will be one
     of the supported and registered Azure Geo Regions (e.g. West US, East
     US, Southeast Asia, etc.). The geo region of a resource cannot be changed
     once it is created, but if an identical geo
     region is specified on update the request will succeed.
    :type location: str
    :param tags: The list of key value pairs that describe the resource. These
     tags can be used in viewing and grouping this resource
     (across resource groups).
    :type tags: dict[str, str]
    :param sku: The sku type.
    :type sku: ~azure.mgmt.hybriddatamanager.models.Sku
    :param etag: Etag of the Resource.
    :type etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, *, location: str, tags=None, sku=None, etag: str=None, **kwargs) -> None:
        super(DataManager, self).__init__(location=location, tags=tags, sku=sku, **kwargs)
        self.etag = etag
