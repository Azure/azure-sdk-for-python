# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .dms_base_object import DmsBaseObject


class DataStore(DmsBaseObject):
    """Data store.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param repository_id: Arm Id for the manager resource to which the data
     source is associated. This is optional.
    :type repository_id: str
    :param state: Required. State of the data source. Possible values include:
     'Disabled', 'Enabled', 'Supported'
    :type state: str or ~azure.mgmt.hybriddatamanager.models.State
    :param extended_properties: A generic json used differently by each data
     source type.
    :type extended_properties: object
    :param data_store_type_id: Required. The arm id of the data store type.
    :type data_store_type_id: str
    :param customer_secrets: List of customer secrets containing a key
     identifier and key value. The key identifier is a way for the specific
     data source to understand the key. Value contains customer secret
     encrypted by the encryptionKeys.
    :type customer_secrets:
     list[~azure.mgmt.hybriddatamanager.models.CustomerSecret]
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'state': {'required': True},
        'data_store_type_id': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'repository_id': {'key': 'properties.repositoryId', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'State'},
        'extended_properties': {'key': 'properties.extendedProperties', 'type': 'object'},
        'data_store_type_id': {'key': 'properties.dataStoreTypeId', 'type': 'str'},
        'customer_secrets': {'key': 'properties.customerSecrets', 'type': '[CustomerSecret]'},
    }

    def __init__(self, **kwargs):
        super(DataStore, self).__init__(**kwargs)
        self.repository_id = kwargs.get('repository_id', None)
        self.state = kwargs.get('state', None)
        self.extended_properties = kwargs.get('extended_properties', None)
        self.data_store_type_id = kwargs.get('data_store_type_id', None)
        self.customer_secrets = kwargs.get('customer_secrets', None)
