# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Key(Model):
    """Encryption Key.

    All required parameters must be populated in order to send to Azure.

    :param key_modulus: Required. Modulus of the encryption key.
    :type key_modulus: str
    :param key_exponent: Required. Exponent of the encryption key.
    :type key_exponent: str
    :param encryption_chunk_size_in_bytes: Required. The maximum byte size
     that can be encrypted by the key. For a key size larger than the size,
     break into chunks and encrypt each chunk, append each encrypted chunk with
     : to mark the end of the chunk.
    :type encryption_chunk_size_in_bytes: int
    """

    _validation = {
        'key_modulus': {'required': True},
        'key_exponent': {'required': True},
        'encryption_chunk_size_in_bytes': {'required': True},
    }

    _attribute_map = {
        'key_modulus': {'key': 'keyModulus', 'type': 'str'},
        'key_exponent': {'key': 'keyExponent', 'type': 'str'},
        'encryption_chunk_size_in_bytes': {'key': 'encryptionChunkSizeInBytes', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(Key, self).__init__(**kwargs)
        self.key_modulus = kwargs.get('key_modulus', None)
        self.key_exponent = kwargs.get('key_exponent', None)
        self.encryption_chunk_size_in_bytes = kwargs.get('encryption_chunk_size_in_bytes', None)
