# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .dms_base_object_py3 import DmsBaseObject


class DataStoreType(DmsBaseObject):
    """Data Store Type.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param repository_type: Arm type for the manager resource to which the
     data source type is associated. This is optional.
    :type repository_type: str
    :param state: Required. State of the data store type. Possible values
     include: 'Disabled', 'Enabled', 'Supported'
    :type state: str or ~azure.mgmt.hybriddatamanager.models.State
    :param supported_data_services_as_sink: Supported data services where it
     can be used as a sink.
    :type supported_data_services_as_sink: list[str]
    :param supported_data_services_as_source: Supported data services where it
     can be used as a source.
    :type supported_data_services_as_source: list[str]
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'state': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'repository_type': {'key': 'properties.repositoryType', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'State'},
        'supported_data_services_as_sink': {'key': 'properties.supportedDataServicesAsSink', 'type': '[str]'},
        'supported_data_services_as_source': {'key': 'properties.supportedDataServicesAsSource', 'type': '[str]'},
    }

    def __init__(self, *, state, repository_type: str=None, supported_data_services_as_sink=None, supported_data_services_as_source=None, **kwargs) -> None:
        super(DataStoreType, self).__init__(**kwargs)
        self.repository_type = repository_type
        self.state = state
        self.supported_data_services_as_sink = supported_data_services_as_sink
        self.supported_data_services_as_source = supported_data_services_as_source
