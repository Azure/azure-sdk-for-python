# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .health_evaluation import HealthEvaluation


class EventHealthEvaluation(HealthEvaluation):
    """The evaluation of the event health.

    :param description:
    :type description: str
    :param aggregated_health_state: Possible values include: 'Invalid', 'Ok',
     'Warning', 'Error', 'Unknown'
    :type aggregated_health_state: str or :class:`enum
     <azure.fabric.models.enum>`
    :param kind: Polymorphic Discriminator
    :type kind: str
    :param unhealthy_event:
    :type unhealthy_event: :class:`HealthEvent
     <azure.fabric.models.HealthEvent>`
    :param consider_warning_as_error:
    :type consider_warning_as_error: bool
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'Description', 'type': 'str'},
        'aggregated_health_state': {'key': 'AggregatedHealthState', 'type': 'str'},
        'kind': {'key': 'Kind', 'type': 'str'},
        'unhealthy_event': {'key': 'UnhealthyEvent', 'type': 'HealthEvent'},
        'consider_warning_as_error': {'key': 'ConsiderWarningAsError', 'type': 'bool'},
    }

    def __init__(self, description=None, aggregated_health_state=None, unhealthy_event=None, consider_warning_as_error=None):
        super(EventHealthEvaluation, self).__init__(description=description, aggregated_health_state=aggregated_health_state)
        self.unhealthy_event = unhealthy_event
        self.consider_warning_as_error = consider_warning_as_error
        self.kind = 'Event'
