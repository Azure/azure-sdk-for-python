# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .service_description import ServiceDescription


class StatelessServiceDescription(ServiceDescription):
    """The description of the stateless service.

    :param application_name:
    :type application_name: str
    :param service_name:
    :type service_name: str
    :param service_type_name:
    :type service_type_name: str
    :param partition_description:
    :type partition_description: :class:`PartitionDescription
     <azure.fabric.models.PartitionDescription>`
    :param placement_constraints:
    :type placement_constraints: str
    :param correlation_scheme:
    :type correlation_scheme: :class:`ServiceCorrelationDescription
     <azure.fabric.models.ServiceCorrelationDescription>`
    :param service_load_metrics:
    :type service_load_metrics: :class:`ServiceCorrelationDescription
     <azure.fabric.models.ServiceCorrelationDescription>`
    :param service_placement_policies:
    :type service_placement_policies: :class:`ServiceCorrelationDescription
     <azure.fabric.models.ServiceCorrelationDescription>`
    :param flags:
    :type flags: int
    :param service_kind: Polymorphic Discriminator
    :type service_kind: str
    :param instance_count:
    :type instance_count: int
    """

    _validation = {
        'service_kind': {'required': True},
    }

    _attribute_map = {
        'application_name': {'key': 'ApplicationName', 'type': 'str'},
        'service_name': {'key': 'ServiceName', 'type': 'str'},
        'service_type_name': {'key': 'ServiceTypeName', 'type': 'str'},
        'partition_description': {'key': 'PartitionDescription', 'type': 'PartitionDescription'},
        'placement_constraints': {'key': 'PlacementConstraints', 'type': 'str'},
        'correlation_scheme': {'key': 'CorrelationScheme', 'type': 'ServiceCorrelationDescription'},
        'service_load_metrics': {'key': 'ServiceLoadMetrics', 'type': 'ServiceCorrelationDescription'},
        'service_placement_policies': {'key': 'ServicePlacementPolicies', 'type': 'ServiceCorrelationDescription'},
        'flags': {'key': 'Flags', 'type': 'int'},
        'service_kind': {'key': 'ServiceKind', 'type': 'str'},
        'instance_count': {'key': 'InstanceCount', 'type': 'int'},
    }

    def __init__(self, application_name=None, service_name=None, service_type_name=None, partition_description=None, placement_constraints=None, correlation_scheme=None, service_load_metrics=None, service_placement_policies=None, flags=None, instance_count=None):
        super(StatelessServiceDescription, self).__init__(application_name=application_name, service_name=service_name, service_type_name=service_type_name, partition_description=partition_description, placement_constraints=placement_constraints, correlation_scheme=correlation_scheme, service_load_metrics=service_load_metrics, service_placement_policies=service_placement_policies, flags=flags)
        self.instance_count = instance_count
        self.service_kind = 'Stateless'
