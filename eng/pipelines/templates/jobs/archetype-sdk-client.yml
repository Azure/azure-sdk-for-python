parameters:
  - name: ServiceDirectory
    type: string
    default: ''
  - name: Artifacts
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: BeforePublishSteps
    type: object
    default: []
  - name: TestMarkArgument
    type: string
    default: ''
  - name: BuildTargetingString
    type: string
    default: 'azure-*'
  - name: TestTimeoutInMinutes
    type: number
    default: 0
  - name: ToxEnvParallel
    type: string
    default: '--tenvparallel'
  - name: InjectedPackages
    type: string
    default: ''
  - name: BuildDocs
    type: boolean
    default: true
  - name: SkipPythonVersion
    type: string
    default: ''
  - name: TestMatrix
    type: object
    default:
      Linux_Python27:
        Pool: $(LinuxPool)
        OSVmImage:
        PythonVersion: '2.7'
        CoverageArg: '--disablecov'
        RunForPR: true
      Linux_Python35:
        Pool: $(LinuxPool)
        OSVmImage:
        PythonVersion: '3.5'
        CoverageArg: '--disablecov'
        RunForPR: false
      Linux_Python38:
        Pool: $(LinuxPool)
        OSVmImage:
        PythonVersion: '3.8'
        CoverageArg: '--disablecov'
        RunForPR: true
      Windows_Python35:
        Pool: $(WindowsPool)
        OSVmImage:
        PythonVersion: '3.5'
        CoverageArg: '--disablecov'
        RunForPR: true
      MacOS_Python27:
        Pool:
        OSVmImage: 'macOS-10.15'
        PythonVersion: '2.7'
        CoverageArg: '--disablecov'
        RunForPR: false
      Linux_pypy3:
        Pool: $(LinuxPool)
        OSVmImage:
        PythonVersion: 'pypy3'
        CoverageArg: '--disablecov'
        RunForPR: false
      Linux_Python39:
        Pool: $(LinuxPool)
        OSVmImage:
        PythonVersion: '3.9'
        CoverageArg: ''
        RunForPR: true
  - name: AdditionalTestMatrix
    type: object
    default: []
  - name: DevFeedName
    type: string
    default: 'public/azure-sdk-for-python'
  - name: WindowsPool
    type: string
    default: azsdk-pool-mms-win-2019-general
  - name: LinuxPool
    type: string
    default: azsdk-pool-mms-ubuntu-1804-general

jobs:
  - job: 'Build'
    variables:
    - template: ../variables/globals.yml

    pool:
      name: ${{ parameters.LinuxPool }}

    steps:
    - template: ../steps/build-artifacts.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
        BuildDocs: ${{ parameters.BuildDocs }}
        TestPipeline: ${{ parameters.TestPipeline }}

    - template: /eng/common/pipelines/templates/steps/create-apireview.yml
      parameters:
        Artifacts: ${{ parameters.Artifacts }}

  - job: 'Analyze'
    condition: and(succeededOrFailed(), ne(variables['Skip.Analyze'], 'true'))
    variables:
    - template: ../variables/globals.yml

    dependsOn:
      - 'Build'

    pool:
      name: ${{ parameters.LinuxPool }}

    steps:
    - template: /eng/common/pipelines/templates/steps/verify-links.yml
      parameters:
        ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          Directory: ''
          Urls: (eng/common/scripts/get-markdown-files-from-changed-files.ps1)
        ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
          Directory: sdk/${{ parameters.ServiceDirectory }}
        CheckLinkGuidance: $true

    - template: ../steps/analyze.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        AdditionalTestArgs: '--wheel_dir="$(Build.ArtifactStagingDirectory)"'
        Artifacts: ${{ parameters.Artifacts }}

  - job: 'Test'
    condition: and(succeededOrFailed(), ne(variables['Skip.Test'], 'true'))
    timeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}
    variables:
    - template: ../variables/globals.yml
    - name: InjectedPackages
      value: ${{ parameters.InjectedPackages }}
    - name: WindowsPool
      value: ${{ parameters.WindowsPool }}
    - name: LinuxPool
      value: ${{ parameters.LinuxPool }}

    dependsOn:
       - 'Build'

    strategy:
      matrix:
        ${{ each matrixEntry in parameters.TestMatrix }}:
          ${{ if or(eq(matrixEntry.value.RunForPR, 'true'), ne(variables['Build.Reason'], 'PullRequest')) }}:
            # Skip python version if any specific service has opted out
            ${{ if ne(parameters.SkipPythonVersion, matrixEntry.value.PythonVersion) }}:
              ${{ matrixEntry.key }}:
                ${{ insert }}: ${{ matrixEntry.value }}

        ${{ each matrixEntry in parameters.AdditionalTestMatrix }}:
          ${{ if or(eq(matrixEntry.value.RunForPR, 'true'), ne(variables['Build.Reason'], 'PullRequest')) }}:
            ${{ matrixEntry.key }}:
              ${{ insert }}: ${{ matrixEntry.value }}

    pool:
      name: $[coalesce(variables['Pool'], '')]
      vmImage: $[coalesce(variables['OSVmImage'], '')]

    steps:
    - ${{if eq(parameters.TestPipeline, 'true')}}:
      - task: PowerShell@2
        displayName: Prep template pipeline for release
        condition: succeeded()
        inputs:
          pwsh: true
          workingDirectory: $(Build.SourcesDirectory)
          filePath: eng/scripts/SetTestPipelineVersion.ps1
          arguments: '-BuildID $(Build.BuildId)'

    - pwsh: |
        $toxenvvar = "whl,sdist"
        if ('$(System.TeamProject)' -eq 'internal') {
          $toxenvvar = "whl,sdist,depends,latestdependency,mindependency"
        }

        # ensure that the variable is unset. if it isn't, use the value discovered there
        if ('$(Run.ToxCustomEnvs)' -ne ('$' + '(Run.ToxCustomEnvs)'))
        {
          $toxenvvar = '$(Run.ToxCustomEnvs)'
        }

        echo "##vso[task.setvariable variable=toxenv]$toxenvvar"
      displayName: "Set Tox Environment"

    - template: ../steps/build-test.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        AdditionalTestArgs: '--wheel_dir="$(Build.ArtifactStagingDirectory)"'
        OSVmImage: $(OSVmImage)
        CoverageArg: $(CoverageArg)
        PythonVersion: $(PythonVersion)
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        ToxTestEnv: $(toxenv)
        ToxEnvParallel: ${{ parameters.ToxEnvParallel }}
        InjectedPackages: $(InjectedPackages)
        BeforeTestSteps:
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'artifacts'
              targetPath: $(Build.ArtifactStagingDirectory)

          - template: ../steps/set-dev-build.yml
            parameters:
              ServiceDirectory: ${{ parameters.ServiceDirectory }}
              BuildTargetingString: ${{ parameters.BuildTargetingString }}

  - job: 'RunRegression'
    condition: and(succeededOrFailed(), or(eq(variables['Run.Regression'], 'true'), and(eq(variables['Build.Reason'], 'Schedule'), eq(variables['System.TeamProject'],'internal'))))
    displayName: 'Run Regression'
    timeoutInMinutes: 120
    variables:
    - template: ../variables/globals.yml

    dependsOn:
      - 'Build'

    pool:
      name: ${{ parameters.LinuxPool }}

    steps:
    - template: ../steps/test_regression.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
