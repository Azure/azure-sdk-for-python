parameters:
  ServiceDirectory: ''
  BeforePublishSteps: []
  TestMarkArgument: ''
  BuildTargetingString: 'azure-*'

jobs:
  - job: 'Build'
    variables:
    - template: ../variables/globals.yml

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - template: ../steps/build-package-artifacts.yml
      parameters: 
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
          
  - job: 'Analyze'
    variables:
    - template: ../variables/globals.yml

    dependsOn:
      - 'Build'

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - template: ../steps/analyze.yml

  - job: 'Test'
    variables:
    - template: ../variables/globals.yml

    dependsOn:
       - 'Build'

    timeoutInMinutes: 300

    strategy:
      matrix:
        Linux_Python27:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: '2.7'
          CoverageArg: ''
        Linux_Python37:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: '3.7'
          CoverageArg: ''
        Linux_Python36:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: '3.6'
          CoverageArg: '--disablecov'
        Linux_Python35:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: '3.5'
          CoverageArg: '--disablecov'
        Linux_PyPy3:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: 'pypy3'
          CoverageArg: '--disablecov'
        Windows_Python27:
          OSName: 'Windows'
          OSVmImage: 'windows-2019'
          PythonVersion: '2.7'
          CoverageArg: '--disablecov'
        MacOS_Python35:
          OSName: 'MacOS'
          OSVmImage: 'macOS-10.13'
          PythonVersion: '3.5'
          CoverageArg: '--disablecov'
    pool:
      vmImage: '$(OSVmImage)'

    steps:
    - template: ../steps/test-nightly.yml
      parameters: 
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        OSName: $(OSName)
        PythonVersion: $(PythonVersion)
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        AdditionalTestArgs: '--wheel_dir="$(Build.ArtifactStagingDirectory)"'
        CoverageArg: $(CoverageArg)
        BeforeTestSteps: 
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'artifacts' 
              targetPath: $(Build.ArtifactStagingDirectory)
        ToxTestEnv: "whl,sdist"