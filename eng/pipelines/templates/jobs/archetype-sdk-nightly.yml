parameters:
  ServiceDirectory: ''
  BeforePublishSteps: []
  TestMarkArgument: ''
  BuildTargetingString: 'azure-*'

jobs:
  - job: 'Build'
    variables:
    - template: ../variables/globals.yml

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - template: ../steps/build-artifacts.yml
      parameters: 
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
          
  - job: 'Analyze'
    variables:
    - template: ../variables/globals.yml

    dependsOn:
      - 'Build'

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - template: ../steps/analyze.yml

  - job: 'Generic_Tests'
    variables:
    - template: ../variables/globals.yml

    dependsOn:
       - 'Build'

    timeoutInMinutes: 240

    strategy:
      matrix:
        Linux_Python27:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: '2.7'
        Linux_Python35:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: '3.5'
        Linux_Python36:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: '3.6'
        Linux_Python37:
          OSName: 'Linux'
          OSVmImage: 'ubuntu-16.04'
          PythonVersion: '3.7'
        Windows_Python35:
          OSName: 'Windows'
          OSVmImage: 'vs2017-win2016'
          PythonVersion: '3.5'
        MacOS_Python27:
          OSName: 'MacOS'
          OSVmImage: 'macOS-10.13'
          PythonVersion: '2.7'

    pool:
      vmImage: '$(OSVmImage)'

    steps:
    - template: ../steps/test-nightly.yml
      parameters: 
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        OSName: $(OSName)
        PythonVersion: $(PythonVersion)
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        AdditionalTestArgs: '--wheel_dir="$(Build.ArtifactStagingDirectory)"'
        BeforeTestSteps: 
          - task: DownloadPipelineArtifact@0
            inputs:
              artifactName: 'artifacts' 
              targetPath: $(Build.ArtifactStagingDirectory)
        ToxTestEnv: "whl,sdist"  
    - template: ../steps/publish-coverage.yml

  # Run PyPy tests without coverage
  - job: 'Test_PyPy'

    variables:
    - template: ../variables/globals.yml
    - name: OSName
      value: 'Linux'
    - name: PythonVersion
      value: 'pypy3'
    - name: OSVmImage
      value: ubuntu-16.04

    dependsOn:
      - 'Build'

    timeoutInMinutes: 240
    
    pool:
      vmImage: $(OSVmImage)

    steps:
      - template: ../steps/test-nightly.yml
        parameters:
          AdditionalTestArgs: '--disablecov --wheel_dir="$(Build.ArtifactStagingDirectory)"'
          ServiceDirectory: ${{ parameters.ServiceDirectory }}
          TestMarkArgument: ${{ parameters.TestMarkArgument }}
          OSName: $(OSName)
          PythonVersion: $(PythonVersion)
          BuildTargetingString: ${{ parameters.BuildTargetingString }}
          BeforeTestSteps: 
            - task: DownloadPipelineArtifact@0
              inputs:
                artifactName: 'artifacts' 
                targetPath: $(Build.ArtifactStagingDirectory)
          ToxTestEnv: "whl,sdist"
