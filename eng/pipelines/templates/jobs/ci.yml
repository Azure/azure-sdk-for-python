parameters:
  - name: ServiceDirectory
    type: string
    default: ''
  - name: Artifacts
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: BeforePublishSteps
    type: object
    default: []
  - name: TestMarkArgument
    type: string
    default: ''
  - name: BeforeTestSteps
    type: object
    default: []
  - name: AfterTestSteps
    type: object
    default: []
  - name: BuildTargetingString
    type: string
    default: 'azure-*'
  - name: TestTimeoutInMinutes
    type: number
    default: 60
  - name: ToxEnvParallel
    type: string
    default: '--tenvparallel'
  - name: InjectedPackages
    type: string
    default: ''
  - name: BuildDocs
    type: boolean
    default: true
  - name: DevFeedName
    type: string
    default: 'public/azure-sdk-for-python'
  - name: MatrixConfigs
    type: object
  - name: MatrixFilters
    type: object
    default: []
  - name: MatrixReplace
    type: object
    default: []
  - name: VerifyAutorest
    type: boolean
    default: false
  - name: ValidateFormatting
    type: boolean
    default: false
  - name: UnsupportedToxEnvironments
    type: string
    default: ''
  - name: TestProxy
    type: boolean
    default: false
  - name: GenerateApiReviewForManualOnly
    type: boolean
    default: false

jobs:
  - job: 'Build_Linux'
    timeoutInMinutes: 90

    pool:
      name: $(LINUXPOOL)
      image: $(LINUXVMIMAGE)
      os: linux

    variables:
      ComponentDetection.SourcePath: '$(Build.SourcesDirectory)/sdk/${{ parameters.ServiceDirectory }}'

    steps:
    - template: /eng/pipelines/templates/steps/build.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
        TestPipeline: ${{ parameters.TestPipeline }}
        ArtifactSuffix: linux
        Artifacts: ${{ parameters.Artifacts }}

  - job: 'Build_Windows'
    timeoutInMinutes: 90

    pool:
      name: $(WINDOWSPOOL)
      image: $(WINDOWSVMIMAGE)
      os: windows

    variables:
      ComponentDetection.SourcePath: '$(Build.SourcesDirectory)/sdk/${{ parameters.ServiceDirectory }}'

    steps:
    - template: /eng/pipelines/templates/steps/build.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
        TestPipeline: ${{ parameters.TestPipeline }}
        ArtifactSuffix: windows
        Artifacts: ${{ parameters.Artifacts }}

  - job: 'Build_MacOS'
    timeoutInMinutes: 90

    pool:
      name: $(MACPOOL)
      vmImage: $(MACVMIMAGE)
      os: macOS

    variables:
      ComponentDetection.SourcePath: '$(Build.SourcesDirectory)/sdk/${{ parameters.ServiceDirectory }}'

    steps:
    - template: /eng/pipelines/templates/steps/build.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
        TestPipeline: ${{ parameters.TestPipeline }}
        ArtifactSuffix: mac
        Artifacts: ${{ parameters.Artifacts }}

  - job: 'Build_Extended'
    displayName: Build Extended
    dependsOn:
      - 'Build_Linux'
      - 'Build_Windows'
      - 'Build_MacOS'

    timeoutInMinutes: 90

    pool:
      name: $(LINUXPOOL)
      image: $(LINUXVMIMAGE)
      os: linux

    variables:
      ComponentDetection.SourcePath: '$(Build.SourcesDirectory)/sdk/${{ parameters.ServiceDirectory }}'

    steps:
    - template: /eng/pipelines/templates/steps/download-package-artifacts.yml

    - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml
      parameters:
        BuildTargetingString: ${{ parameters.BuildTargetingString }}

    - template: ../steps/build-extended-artifacts.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        BeforePublishSteps: ${{ parameters.BeforePublishSteps }}
        BuildDocs: ${{ parameters.BuildDocs }}
        TestPipeline: ${{ parameters.TestPipeline }}
        Artifacts: ${{ parameters.Artifacts }}

  - job: 'Analyze'
    condition: and(succeeded(), ne(variables['Skip.Analyze'], 'true'))

    timeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}

    dependsOn:
      - 'Build_Extended'

    pool:
      name: $(LINUXPOOL)
      image: $(LINUXVMIMAGE)
      os: linux

    steps:
    - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml
      parameters:
        BuildTargetingString: ${{ parameters.BuildTargetingString }}

    - template: /eng/common/pipelines/templates/steps/check-spelling.yml
      parameters:
        ContinueOnError: false

    - template: /eng/common/pipelines/templates/steps/verify-links.yml
      parameters:
        ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
          Directory: ''
          Urls: (eng/common/scripts/get-markdown-files-from-changed-files.ps1)
        ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
          Directory: sdk/${{ parameters.ServiceDirectory }}
        CheckLinkGuidance: $true
        Condition: succeededOrFailed()

    - task: DownloadPipelineArtifact@2
      condition: succeededOrFailed()
      inputs:
        artifactName: 'packages_extended'
        targetPath: $(Build.ArtifactStagingDirectory)

    - template: ../steps/analyze.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        AdditionalTestArgs: '--wheel_dir="$(Build.ArtifactStagingDirectory)"'
        TestPipeline: ${{ parameters.TestPipeline }}
        Artifacts: ${{ parameters.Artifacts }}
        VerifyAutorest: ${{ parameters.VerifyAutorest }}
        ValidateFormatting: ${{ parameters.ValidateFormatting }}
        GenerateApiReviewForManualOnly: ${{ parameters.GenerateApiReviewForManualOnly }}

  - template: /eng/common/pipelines/templates/jobs/generate-job-matrix.yml
    parameters:
      JobTemplatePath: /eng/pipelines/templates/jobs/ci.tests.yml
      OsVmImage: azsdk-pool-mms-ubuntu-2004-1espt
      Pool: azsdk-pool-mms-ubuntu-2004-general
      DependsOn:
        - 'Build_Linux'
        - 'Build_Windows'
        - 'Build_MacOS'
      MatrixConfigs: ${{ parameters.MatrixConfigs }}
      MatrixFilters: ${{ parameters.MatrixFilters }}
      MatrixReplace: ${{ parameters.MatrixReplace }}
      CloudConfig:
        Cloud: Public
      AdditionalParameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestPipeline: ${{ parameters.TestPipeline }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        BeforeTestSteps: ${{ parameters.BeforeTestSteps }}
        AfterTestSteps: ${{ parameters.AfterTestSteps }}
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        TestTimeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}
        ToxEnvParallel: ${{ parameters.ToxEnvParallel }}
        InjectedPackages: ${{ parameters.InjectedPackages }}
        UnsupportedToxEnvironments: ${{ parameters.UnsupportedToxEnvironments }}
        TestProxy: ${{ parameters.TestProxy }}

  - template: /eng/common/pipelines/templates/jobs/generate-job-matrix.yml
    parameters:
      JobTemplatePath: /eng/pipelines/templates/jobs/regression.yml
      OsVmImage: azsdk-pool-mms-ubuntu-2004-1espt
      Pool: azsdk-pool-mms-ubuntu-2004-general
      GenerateJobName: generate_regression_matrix
      SparseCheckoutPaths: [ "scripts/", "sdk/", "tools/azure-sdk-tools/" ]
      MatrixConfigs:
          - Name: Python_regression_envs
            Path: eng/pipelines/templates/stages/regression-job-matrix.json
            Selection: sparse
            GenerateVMJobs: true
      PreGenerationSteps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.12'
        - pwsh: |
            python -m pip install "./tools/azure-sdk-tools[build]"
          displayName: 'Prep Environment'
        - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml
          parameters:
            BuildTargetingString: ${{ parameters.BuildTargetingString }}
        - task: PythonScript@0
          displayName: 'Ensure service coverage'
          inputs:
            scriptPath: '$(Build.SourcesDirectory)/scripts/devops_tasks/update_regression_services.py'
            arguments: >-
              "$(TargetingString)"
              --service="${{ parameters.ServiceDirectory }}"
              --json=$(Build.SourcesDirectory)/eng/pipelines/templates/stages/regression-job-matrix.json
      CloudConfig:
        Cloud: Public
      DependsOn:
        - 'Build_Linux'
        - 'Build_Windows'
        - 'Build_MacOS'
      AdditionalParameters:
        BuildTargetingString: ${{ parameters.BuildTargetingString }}
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestTimeoutInMinutes: 90
