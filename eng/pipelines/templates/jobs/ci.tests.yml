parameters:
  - name: ServiceDirectory
    type: string
    default: ''
  - name: TestPipeline
    type: boolean
    default: false
  - name: TestMarkArgument
    type: string
    default: ''
  - name: BeforeTestSteps
    type: object
    default: []
  - name: AfterTestSteps
    type: object
    default: []
  - name: BuildTargetingString
    type: string
    default: 'azure-*'
  - name: TestTimeoutInMinutes
    type: number
    default: 60
  - name: ToxEnvParallel
    type: string
    default: '--tenvparallel'
  - name: UnsupportedToxEnvironments
    type: string
    default: ''
  - name: InjectedPackages
    type: string
    default: ''
  - name: Matrix
    type: string
  - name: DependsOn
    type: string
    default: ''
  - name: UsePlatformContainer
    type: boolean
    default: false
  - name: CloudConfig
    type: object
    default: {}
  - name: TestProxy
    type: boolean
    default: false

jobs:
  - job:
    displayName: 'Test'
    condition: |
      and(
        succeededOrFailed(),
        ne(variables['Skip.Test'], 'true'),
        ne(${{ parameters.Matrix }}, '{}')
      )
    timeoutInMinutes: ${{ parameters.TestTimeoutInMinutes }}

    dependsOn:
       - ${{ parameters.DependsOn }}

    strategy:
      matrix: $[ ${{ parameters.Matrix }} ]

    pool:
      name: $(Pool)
      vmImage: $(OSVmImage)

    ${{ if eq(parameters.UsePlatformContainer, 'true') }}:
      # Add a default so the job doesn't fail when the matrix is empty
      container: $[ variables['Container'] ]

    variables:
    - template: ../variables/globals.yml
    - name: InjectedPackages
      value: ${{ parameters.InjectedPackages }}

    steps:
    - template: /eng/pipelines/templates/steps/targeting-string-resolve.yml
      parameters:
        BuildTargetingString: ${{ parameters.BuildTargetingString }}

    - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml
      parameters:
        AgentImage: $(OSVmImage)

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'

    - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
      parameters:
        PackageName: "azure-template"
        ServiceDirectory: "template"
        TestPipeline: ${{ parameters.TestPipeline }}

    - pwsh: |
        python -m pip install "tools/azure-sdk-tools[build]"
      displayName: Install build tooling

    - task: PythonScript@0
      displayName: 'Set Tox Environment'
      inputs:
        scriptPath: 'scripts/devops_tasks/set_tox_environment.py'
        arguments: >-
          --unsupported="$(UnsupportedToxEnvironments)"
          --override="$(Run.ToxCustomEnvs)"
          --team-project="$(System.TeamProject)"

    - template: ../steps/build-test.yml
      parameters:
        ServiceDirectory: ${{ parameters.ServiceDirectory }}
        TestMarkArgument: ${{ parameters.TestMarkArgument }}
        AdditionalTestArgs: '--wheel_dir="$(Build.ArtifactStagingDirectory)"'
        OSVmImage: $(OSVmImage)
        CoverageArg: $(CoverageArg)
        PythonVersion: $(PythonVersion)
        ToxTestEnv: $(toxenv)
        ToxEnvParallel: ${{ parameters.ToxEnvParallel }}
        InjectedPackages: $(InjectedPackages)
        TestProxy: ${{ parameters.TestProxy }}
        BeforeTestSteps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'packages'
              targetPath: $(Build.ArtifactStagingDirectory)

          - template: ../steps/set-dev-build.yml
            parameters:
              ServiceDirectory: ${{ parameters.ServiceDirectory }}
          
          - ${{ each step in parameters.BeforeTestSteps }}:
            -  ${{ step }}
        AfterTestSteps: ${{ parameters.AfterTestSteps }}
