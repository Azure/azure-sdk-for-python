parameters:
  AdditionalTestArgs: ''
  TestMarkArgument: ''
  EnvVars: {}
  ServiceDirectory: ''
  PythonVersion: ''
  OSName: ''
  BeforeTestSteps: []
  CoverageArg: ''
  BuildTargetingString: 'azure-*'
  ToxTestEnv: ""
  RunCoverage: ne(variables['CoverageArg'], '--disablecov')
  RunMyPy: and(ne(variables['PythonVersion'], '2.7'), ne(variables['PythonVersion'], 'pypy3'))

steps:
  - powershell: |
      gci -r $(Build.ArtifactStagingDirectory)

  - powershell: |
      Invoke-WebRequest -Uri "https://github.com/Azure/azure-sdk-tools/releases/download/sdk-tools_14793/sdk-tools.zip" `
      -OutFile "sdk-tools.zip" | Wait-Process; Expand-Archive -Path "sdk-tools.zip" -DestinationPath "./sdk-tools/"
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Download Tools Archive From Github Release and Extract it'

  - task: UsePythonVersion@0
    displayName: 'Use Python ${{ parameters.PythonVersion }}'
    inputs:
      versionSpec: '${{ parameters.PythonVersion }}'

  - task: PythonScript@0
    displayName: 'Run VerifyAgentOS script'
    inputs:
      scriptPath: '$(Build.BinariesDirectory)/sdk-tools/scripts/python/verify_agent_os.py'
      arguments: ${{ parameters.OSName }}

  - script: |
      pip install pathlib twine codecov beautifulsoup4 tox tox-monorepo
    displayName: 'Prep Environment'

  - ${{ parameters.BeforeTestSteps }}

  - task: PythonScript@0
    displayName: 'Run Tests'
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "${{ parameters.BuildTargetingString }}" 
        ${{ parameters.CoverageArg }} 
        ${{ parameters.AdditionalTestArgs }} 
        --mark_arg="${{ parameters.TestMarkArgument }}" 
        --service="${{ parameters.ServiceDirectory }}" 
        --toxenv="${{ parameters.ToxTestEnv }}"
    env: ${{ parameters.EnvVars }}

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/*test*.xml'
      testRunTitle: '${{ parameters.OSName }} Python ${{ parameters.PythonVersion }}'
  
  - task: PythonScript@0
    displayName: 'Install Packages (Global)'
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: '"${{ parameters.BuildTargetingString }}" --runtype=setup --disablecov --service="${{ parameters.ServiceDirectory }}"'
    env: ${{ parameters.EnvVars }}
    condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))

  - task: PythonScript@0
    displayName: 'Run Tests (Global)'
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "${{ parameters.BuildTargetingString }}" 
        --runtype=execute 
        --disablecov 
        --mark_arg="${{ parameters.TestMarkArgument }}" 
        --service="${{ parameters.ServiceDirectory }}"
    env: ${{ parameters.EnvVars }}
    condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))

  - template: publish-coverage.yml
    parameters: 
      RunCoverage: ${{ parameters.RunCoverage }}