parameters:
  BuildTargetingString: 'azure-*'
  ServiceDirectory: ''
  TestMarkArgument: ''
  AdditionalTestArgs: ''
  Artifacts: []
  TestPipeline: false

steps:
  - template: /eng/pipelines/templates/steps/analyze_dependency.yml

  - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
    parameters:
      PackageName: "azure-template"
      ServiceDirectory: "template"
      TestPipeline: ${{ parameters.TestPipeline }}

  - ${{ each artifact in parameters.Artifacts }}:
    - ${{if ne(artifact.skipVerifyChangeLog, 'true')}}:
      - template: /eng/common/pipelines/templates/steps/verify-changelog.yml
        parameters:
          PackageName: ${{artifact.name}}
          ServiceName: ${{parameters.ServiceDirectory}}
          ForRelease: false

  - template: /eng/common/pipelines/templates/steps/verify-samples.yml
    parameters:
      ServiceDirectory: ${{parameters.ServiceDirectory}}

    # Using --always-succeed so as not to block the build. Once package
    # target is based on data available per-package the --always-succeed should
    # be removed so this script can help enforce correct practices
    # (https://github.com/Azure/azure-sdk-for-python/issues/8697)
  - script: |
      cd eng/versioning
      pip install -r requirements.txt
      python find_invalid_versions.py --always-succeed --service=${{parameters.ServiceDirectory}}
    displayName: Find Invalid Versions

  - pwsh: |
      Get-ChildItem $(Build.SourcesDirectory) -Filter "*.py" |
      Foreach-Object {
        if ((Get-Content $_ -Raw) -match "\r\n") {
          Write-Error "Found CRLF line ending in `$_`"
        }
      }

      Get-ChildItem $(Build.SourcesDirectory) -Filter "*.md" |
      Foreach-Object {
        if ((Get-Content $_ -Raw) -match "\r\n") {
          Write-Error "Found CRLF line ending in `$_`"
        }
      }
    displayName: Check for CRLF Line endings

  - template: /eng/common/pipelines/templates/steps/verify-path-length.yml
    parameters:
      SourceDirectory: $(Build.SourcesDirectory)

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    # ComponentGovernance is currently unable to run on pull requests of public projects. Running on non-PR
    # builds should be sufficient.
    condition: and(succeededOrFailed(), ne(variables['Build.Reason'],'PullRequest'))
    displayName: 'Component Detection'

  - task: PythonScript@0
    displayName: 'Verify sdist'
    condition: and(succeededOrFailed(), ne(variables['Skip.VerifySdist'],'true'))
    inputs:
     scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
     arguments: '"${{ parameters.BuildTargetingString }}" --service=${{parameters.ServiceDirectory}} --toxenv=verifysdist'

  - task: PythonScript@0
    displayName: 'Verify whl'
    condition: and(succeededOrFailed(), ne(variables['Skip.VerifyWhl'],'true'))
    inputs:
     scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
     arguments: '"${{ parameters.BuildTargetingString }}" --service=${{parameters.ServiceDirectory}} --toxenv=verifywhl'

  - template: run_mypy.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}
      BuildTargetingString: ${{ parameters.BuildTargetingString }}
      TestMarkArgument: ${{ parameters.TestMarkArgument }}

  - template: run_pylint.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}
      BuildTargetingString: ${{ parameters.BuildTargetingString }}
      TestMarkArgument: ${{ parameters.TestMarkArgument }}

  - task: DownloadPipelineArtifact@2
    condition: succeededOrFailed()
    inputs:
      artifactName: 'packages'
      targetPath: $(Build.ArtifactStagingDirectory)

  - template: ../steps/run_apistub.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}
      BuildTargetingString: ${{ parameters.BuildTargetingString }}
      TestMarkArgument: ${{ parameters.TestMarkArgument }}
      AdditionalTestArgs: ${{parameters.AdditionalTestArgs}}

  - template: ../steps/run_bandit.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}
      BuildTargetingString: ${{ parameters.BuildTargetingString }}
      TestMarkArgument: ${{ parameters.TestMarkArgument }}
      AdditionalTestArgs: ${{parameters.AdditionalTestArgs}}

  - template: ../steps/run_breaking_changes.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}
      BuildTargetingString: ${{ parameters.BuildTargetingString }}
      TestMarkArgument: ${{ parameters.TestMarkArgument }}
      AdditionalTestArgs: ${{parameters.AdditionalTestArgs}}

  - template: /eng/common/pipelines/templates/steps/create-apireview.yml
    parameters:
      Artifacts: ${{ parameters.Artifacts }}

  - template: /eng/common/pipelines/templates/steps/eng-common-workflow-enforcer.yml

  - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
    parameters:
      ArtifactPath: '$(Build.ArtifactStagingDirectory)/reports'
      ArtifactName: 'reports'
