parameters:
  - name: BeforePublishSteps
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: ServiceDirectory
    type: string
    default: ''
  - name: BuildDocs
    type: boolean
    default: true
  - name: Artifacts
    type: object
    default: []

# The variable TargetingString is set by template `eng/pipelines/templates/steps/targeting-string-resolve.yml`. This template is invoked from yml files:
#     eng/pipelines/templates/jobs/ci.tests.yml
#     eng/pipelines/templates/jobs/ci.yml
#     eng/pipelines/templates/jobs/live.test.yml

# Please use `$(TargetingString)` to refer to the python packages glob string. This was previously `${{ parameters.BuildTargetingString }}`.
steps:
  - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
    parameters:
      PackageName: "azure-template"
      ServiceDirectory: "template"
      TestPipeline: ${{ parameters.TestPipeline }}

  - template: /eng/common/pipelines/templates/steps/set-default-branch.yml

  - script: |
      echo "##vso[build.addbuildtag]Scheduled"
    displayName: 'Tag scheduled builds'
    condition: and(eq(variables['Build.SourceBranchName'], variables['DefaultBranch']), eq(variables['Build.Reason'],'Schedule'))

  - task: UsePythonVersion@0
    displayName: 'Use Python 2.7'
    inputs:
      versionSpec: '2.7'

  - script: |
      pip install -r eng/ci_tools.txt
    displayName: 'Prep Py2 Environment'

  - task: PythonScript@0
    displayName: 'Generate Python2 Applicable Namespace Packages'
    inputs:
      scriptPath: 'scripts/devops_tasks/build_packages.py'
      arguments: '-d "$(Build.ArtifactStagingDirectory)" "$(TargetingString)" --pkgfilter="nspkg" --service=${{parameters.ServiceDirectory}}'

  - task: UsePythonVersion@0
    displayName: 'Use Python $(PythonVersion)'
    inputs:
      versionSpec: $(PythonVersion)

  - script: |
      pip install -r eng/ci_tools.txt
    displayName: 'Prep Environment'

  - template: ../steps/set-dev-build.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}

  - task: Powershell@2
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/common/scripts/Save-Package-Properties.ps1
      arguments: >
        -ServiceDirectory ${{parameters.ServiceDirectory}}
        -OutDirectory $(Build.ArtifactStagingDirectory)/PackageInfo
        -AddDevVersion
      pwsh: true
      workingDirectory: $(Pipeline.Workspace)
    displayName: Update package properties with dev version
    condition: and(succeeded(),eq(variables['SetDevVersion'],'true'))
  - task: PythonScript@0
    displayName: 'Generate Packages'
    inputs:
      scriptPath: 'scripts/devops_tasks/build_packages.py'
      arguments: '-d "$(Build.ArtifactStagingDirectory)" "$(TargetingString)" --service=${{parameters.ServiceDirectory}} --devbuild="$(SetDevVersion)"'

  - script: |
      twine check $(Build.ArtifactStagingDirectory)/**/*.whl
      twine check $(Build.ArtifactStagingDirectory)/**/*.zip
    displayName: 'Verify Readme'

  - task: PythonScript@0
    displayName: 'Generate Docs'
    condition: and(succeededOrFailed(), ${{parameters.BuildDocs}})
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "$(TargetingString)" 
        --service="${{ parameters.ServiceDirectory }}" 
        --toxenv=sphinx

  - ${{ parameters.BeforePublishSteps }}

  - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
    parameters:
      ArtifactPath: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'packages'

  - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
    parameters:
      ArtifactPath: '$(Build.SourcesDirectory)/_docs'
      CustomCondition: ${{ parameters.BuildDocs }}
      ArtifactName: 'documentation'