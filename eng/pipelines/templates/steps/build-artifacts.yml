parameters:
  BeforePublishSteps: []
  BuildTargetingString: 'azure-*'
  ServiceDirectory: ''
  BuildDocs: true

steps:
  - ${{if eq(parameters.TestPipeline, 'true')}}:
    - task: PowerShell@2
      displayName: Prep template pipeline for release
      condition: succeeded()
      inputs:
        pwsh: true
        workingDirectory: $(Build.SourcesDirectory)
        filePath: eng/scripts/SetTestPipelineVersion.ps1

  - script: |
      echo "##vso[build.addbuildtag]Scheduled"
    displayName: 'Tag scheduled builds'
    condition: and(eq(variables['Build.SourceBranchName'],'master'),eq(variables['Build.Reason'],'Schedule'))

  - task: UsePythonVersion@0
    displayName: 'Use Python 2.7'
    inputs:
      versionSpec: '2.7'

  - script: |
      pip install -r eng/ci_tools.txt
    displayName: 'Prep Py2 Environment'

  - task: PythonScript@0
    displayName: 'Generate Python2 Applicable Namespace Packages'
    inputs:
      scriptPath: 'scripts/devops_tasks/build_packages.py'
      arguments: '-d "$(Build.ArtifactStagingDirectory)" "${{ parameters.BuildTargetingString }}" --pkgfilter="nspkg" --service=${{parameters.ServiceDirectory}}'

  - task: UsePythonVersion@0
    displayName: 'Use Python $(PythonVersion)'
    inputs:
      versionSpec: $(PythonVersion)

  - script: |
      pip install -r eng/ci_tools.txt
    displayName: 'Prep Environment'

  - template: ../steps/set-dev-build.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}
      BuildTargetingString: ${{ parameters.BuildTargetingString }}

  - task: PythonScript@0
    displayName: 'Generate Packages'
    inputs:
      scriptPath: 'scripts/devops_tasks/build_packages.py'
      arguments: '-d "$(Build.ArtifactStagingDirectory)" "${{ parameters.BuildTargetingString }}" --service=${{parameters.ServiceDirectory}} --devbuild="$(SetDevVersion)"'

  - script: |
      twine check $(Build.ArtifactStagingDirectory)/*
    displayName: 'Verify Readme'

  - task: PythonScript@0
    displayName: 'Generate Docs'
    condition: and(succeededOrFailed(), ${{parameters.BuildDocs}})
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "${{ parameters.BuildTargetingString }}" 
        --service="${{ parameters.ServiceDirectory }}" 
        --toxenv=sphinx

  - ${{ parameters.BeforePublishSteps }}

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'artifacts' 
      targetPath: $(Build.ArtifactStagingDirectory)

  # Duplicating  the task above to introduce a packages artifact for consistency
  # with the other pipelines. Also using the newer YAML shortcut. Once we get
  # past release successfully with unified pipelines we'll look at getting rid
  # of the duplicated "artifacts" artifact.
  - publish: $(Build.ArtifactStagingDirectory)
    artifact: packages 

  - task: PublishBuildArtifacts@1
    condition: and(succeededOrFailed(), ${{parameters.BuildDocs}})
    displayName: 'Publish Artifacts'
    inputs:
      artifactName: 'documentation'
      pathtoPublish: '$(Build.SourcesDirectory)/_docs'
