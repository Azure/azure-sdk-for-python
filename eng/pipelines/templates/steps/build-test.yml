parameters:
  AdditionalTestArgs: ''
  TestMarkArgument: ''
  EnvVars: {}
  ServiceDirectory: ''
  PythonVersion: ''
  OSVmImage: ''
  BeforeTestSteps: []
  AfterTestSteps: []
  CoverageArg: ''
  BuildTargetingString: 'azure-*'
  ToxTestEnv: ""
  RunCoverage: ne(variables['CoverageArg'], '--disablecov')
  ToxEnvParallel: ''
  InjectedPackages: ''

steps:
  - pwsh: |
      gci -r $(Build.ArtifactStagingDirectory)

  - task: UsePythonVersion@0
    displayName: 'Use Python ${{ parameters.PythonVersion }}'
    inputs:
      versionSpec: '${{ parameters.PythonVersion }}'

  - template: /eng/common/pipelines/templates/steps/verify-agent-os.yml

  - script: |
      python -m pip install -r eng/ci_tools.txt
      mkdir $(Build.SourcesDirectory)/env
      python -m virtualenv $(Build.SourcesDirectory)/env 
    displayName: 'Prep Environment'

  - ${{ parameters.BeforeTestSteps }}

  - pwsh: |
      $env:Path = "$(Build.SourcesDirectory)/env;" + $env:Path
      python -m pip install pip==20.1
      python -m pip install -r eng/ci_tools.txt
      python -m pip --version

      $env:PYTHON_HOME = ""
      $env:VIRTUAL_ENV = "$(Build.SourcesDirectory)/env"

      Write-Host 'python ./scripts/devops_tasks/setup_execute_tests.py "${{ parameters.BuildTargetingString }}" ${{ parameters.AdditionalTestArgs }} ${{ parameters.CoverageArg }} --mark_arg="${{ parameters.TestMarkArgument }}" --service="${{ parameters.ServiceDirectory }}" --toxenv="${{ parameters.ToxTestEnv }}" --injected-packages="${{ parameters.InjectedPackages }}" ${{ parameters.ToxEnvParallel }}"'
      python ./scripts/devops_tasks/setup_execute_tests.py "${{ parameters.BuildTargetingString }}" ${{ parameters.AdditionalTestArgs }} ${{ parameters.CoverageArg }} --mark_arg="${{ parameters.TestMarkArgument }}" --service="${{ parameters.ServiceDirectory }}" --toxenv="${{ parameters.ToxTestEnv }}" --injected-packages="${{ parameters.InjectedPackages }}" ${{ parameters.ToxEnvParallel }}
      
    env: ${{ parameters.EnvVars }}
    displayName: 'Run Tests'

  - ${{ parameters.AfterTestSteps }}

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: '**/*test*.xml'
      testRunTitle: '$(OSName) Python ${{ parameters.PythonVersion }}'
      failTaskOnFailedTests: true

  - template: publish-coverage.yml
    parameters:
      RunCoverage: ${{ parameters.RunCoverage }}