parameters:
  AdditionalTestArgs: ''
  TestMarkArgument: ''
  EnvVars: {}
  ServiceDirectory: ''
  CloudName: ''
  PythonVersion: ''
  OSVmImage: ''
  BeforeTestSteps: []
  AfterTestSteps: []
  CoverageArg: ''
  ToxTestEnv: ""
  RunCoverage: ne(variables['CoverageArg'], '--disablecov')
  ToxEnvParallel: ''
  InjectedPackages: ''
  DevFeedName: 'public/azure-sdk-for-python'
  TestProxy: false
  UseFederatedAuth: false
  ServiceConnection: ''

# The variable TargetingString is set by template `eng/pipelines/templates/steps/targeting-string-resolve.yml`. This template is invoked from yml files:
#     eng/pipelines/templates/jobs/ci.tests.yml
#     eng/pipelines/templates/jobs/ci.yml
#     eng/pipelines/templates/jobs/live.test.yml

# Please use `$(TargetingString)` to refer to the python packages glob string. This was previously `${{ parameters.BuildTargetingString }}`.
steps:
  - pwsh: |
      gci -r $(Build.ArtifactStagingDirectory)
    displayName: Dump Artifact Directory

  - template: /eng/pipelines/templates/steps/use-python-version.yml
    parameters:
      versionSpec: '${{ parameters.PythonVersion }}'

  - template: /eng/pipelines/templates/steps/use-venv.yml

  - template: set-dev-build.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}

  - pwsh: |
      if ($IsWindows) {
        . $(VENV_LOCATION)/Scripts/Activate.ps1
      }
      else {
        . $(VENV_LOCATION)/bin/activate.ps1
      }
      $ErrorActionPreference = 'Stop'
      $PSNativeCommandUseErrorActionPreference = $true
      python -m pip install --force -r eng/ci_tools.txt
      python -m pip freeze --all
      Write-Host (Get-Command python).Source
    displayName: 'Prep Environment'

  - ${{if eq(parameters.TestProxy, true) }}:
    - template: /eng/common/testproxy/test-proxy-tool.yml
      parameters:
        runProxy: false

  - ${{if eq(variables['System.TeamProject'], 'internal') }}:
    - template: ../steps/auth-dev-feed.yml
      parameters:
        DevFeedName: ${{ parameters.DevFeedName }}

  - ${{ parameters.BeforeTestSteps }}

  - template: /eng/pipelines/templates/steps/seed-virtualenv-wheels.yml

  - ${{ if eq('true', parameters.UseFederatedAuth) }}:

    - task: AzurePowerShell@5
      displayName: Run Tests (AzurePowerShell@5)
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        ${{ insert }}: ${{ parameters.EnvVars }}
      inputs:
        azureSubscription: ${{ parameters.ServiceConnection }}
        azurePowerShellVersion: LatestVersion
        pwsh: true
        ScriptType: InlineScript
        Inline: >-
          $account = (Get-AzContext).Account;
          $env:AZURESUBSCRIPTION_CLIENT_ID = $account.Id;
          $env:AZURESUBSCRIPTION_TENANT_ID = $account.Tenants;

          if ($IsWindows) {
            . $(VENV_LOCATION)/Scripts/Activate.ps1
          }
          else {
            . $(VENV_LOCATION)/bin/activate.ps1
          }
          Write-Host (Get-Command python).Source

          python scripts/devops_tasks/dispatch_tox.py
          "$(TargetingString)"
          ${{ parameters.AdditionalTestArgs }}
          ${{ parameters.CoverageArg }}
          --mark_arg="${{ parameters.TestMarkArgument }}"
          --service="${{ parameters.ServiceDirectory }}"
          --toxenv="${{ parameters.ToxTestEnv }}"
          --injected-packages="${{ parameters.InjectedPackages }}"
          ${{ parameters.ToxEnvParallel }};
          Write-Host "Last exit code: $LASTEXITCODE";
          exit $LASTEXITCODE;

  - ${{ else }}:
    - pwsh: |
        if ($IsWindows) {
          . $(VENV_LOCATION)/Scripts/Activate.ps1
        }
        else {
          . $(VENV_LOCATION)/bin/activate.ps1
        }
        Write-Host (Get-Command python).Source
        python scripts/devops_tasks/dispatch_tox.py "$(TargetingString)" `
          ${{ parameters.AdditionalTestArgs }} `
          ${{ parameters.CoverageArg }} `
          --mark_arg="${{ parameters.TestMarkArgument }}" `
          --service="${{ parameters.ServiceDirectory }}" `
          --toxenv="${{ parameters.ToxTestEnv }}" `
          --injected-packages="${{ parameters.InjectedPackages }}" `
          ${{ parameters.ToxEnvParallel }}
        exit $LASTEXITCODE;
      env: ${{ parameters.EnvVars }}
      displayName: Run Tests

  - ${{if eq(parameters.TestProxy, true) }}:
    - pwsh: |
        $files = Get-ChildItem -Path $(Build.SourcesDirectory) -Filter _proxy_log_*.log
        foreach($file in $files){
            Write-Host "##[group]$file"
            cat $file
            Write-Host "##[endgroup]"
        }
      displayName: Dump Test-Proxy Logs
      condition: succeededOrFailed()

  - ${{ parameters.AfterTestSteps }}

  - pwsh: |
      if ($IsWindows) {
        . $(VENV_LOCATION)/Scripts/Activate.ps1
      }
      else {
        . $(VENV_LOCATION)/bin/activate.ps1
      }
      Write-Host (Get-Command python).Source

      python -m pip install coverage==7.2.5
      python scripts/devops_tasks/create_coverage.py
    displayName: Create Coverage Report
    condition: and(succeeded(), ${{ parameters.RunCoverage }})

  - ${{ if eq('true', parameters.UseFederatedAuth) }}:
    - task: AzurePowerShell@5
      displayName: Test Samples (AzurePowerShell@5)
      condition: and(succeeded(), eq(variables['TestSamples'], 'true'))
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        ${{ insert }}: ${{ parameters.EnvVars }}
      inputs:
        azureSubscription: ${{ parameters.ServiceConnection }}
        azurePowerShellVersion: LatestVersion
        pwsh: true
        ScriptType: InlineScript
        Inline: >-
          $account = (Get-AzContext).Account;
          $env:AZURESUBSCRIPTION_CLIENT_ID = $account.Id;
          $env:AZURESUBSCRIPTION_TENANT_ID = $account.Tenants;

          if ($IsWindows) {
            . $(VENV_LOCATION)/Scripts/Activate.ps1
          }
          else {
            . $(VENV_LOCATION)/bin/activate.ps1
          }
          Write-Host (Get-Command python).Source

          scripts/devops_tasks/dispatch_tox.py
          "$(TargetingString)"
          --service="${{ parameters.ServiceDirectory }}"
          --toxenv="samples";
          Write-Host "Last exit code: $LASTEXITCODE";
          exit $LASTEXITCODE;
  - ${{ else }}:
    - pwsh: |
        if ($IsWindows) {
          . $(VENV_LOCATION)/Scripts/Activate.ps1
        }
        else {
          . $(VENV_LOCATION)/bin/activate.ps1
        }
        Write-Host (Get-Command python).Source
        python scripts/devops_tasks/dispatch_tox.py "$(TargetingString)" `
          --service="${{ parameters.ServiceDirectory }}" `
          --toxenv="samples"
        exit $LASTEXITCODE;
      env: ${{ parameters.EnvVars }}
      displayName: 'Test Samples'
      condition: and(succeeded(), eq(variables['TestSamples'], 'true'))

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: '**/*test*.xml'
      testRunTitle: '${{ parameters.ServiceDirectory }} ${{ parameters.CloudName }} $(Agent.JobName)'
      failTaskOnFailedTests: true

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage to DevOps'
    continueOnError: true
    condition: and(succeeded(), ${{ parameters.RunCoverage }})
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
