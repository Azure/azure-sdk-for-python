parameters:
  AdditionalTestArgs: ''
  TestMarkArgument: ''
  EnvVars: {}
  ServiceDirectory: ''
  CloudName: ''
  PythonVersion: ''
  OSVmImage: ''
  BeforeTestSteps: []
  AfterTestSteps: []
  CoverageArg: ''
  ToxTestEnv: ""
  RunCoverage: ne(variables['CoverageArg'], '--disablecov')
  ToxEnvParallel: ''
  InjectedPackages: ''
  DevFeedName: 'public/azure-sdk-for-python'
  TestProxy: false

# The variable TargetingString is set by template `eng/pipelines/templates/steps/targeting-string-resolve.yml`. This template is invoked from yml files:
#     eng/pipelines/templates/jobs/ci.tests.yml
#     eng/pipelines/templates/jobs/ci.yml
#     eng/pipelines/templates/jobs/live.test.yml

# Please use `$(TargetingString)` to refer to the python packages glob string. This was previously `${{ parameters.BuildTargetingString }}`.
steps:
  - pwsh: |
      gci -r $(Build.ArtifactStagingDirectory)
    displayName: Dump Artifact Directory

  - template: /eng/pipelines/templates/steps/use-python-version.yml
    parameters:
      versionSpec: '${{ parameters.PythonVersion }}'

  - script: |
      python -m pip install pip==20.1
      pip install -r eng/ci_tools.txt
      pip --version
      pip freeze
    displayName: 'Prep Environment'

  - ${{if eq(parameters.TestProxy, true) }}:
    - template: /eng/common/testproxy/test-proxy-tool.yml
      parameters:
        runProxy: false

  - ${{if eq(variables['System.TeamProject'], 'internal') }}:
    - template: ../steps/auth-dev-feed.yml
      parameters:
        DevFeedName: ${{ parameters.DevFeedName }}

  - ${{ parameters.BeforeTestSteps }}

  - template: /eng/pipelines/templates/steps/seed-virtualenv-wheels.yml

  - task: PythonScript@0
    displayName: 'Run Tests'
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "$(TargetingString)"
        ${{ parameters.AdditionalTestArgs }}
        ${{ parameters.CoverageArg }}
        --mark_arg="${{ parameters.TestMarkArgument }}"
        --service="${{ parameters.ServiceDirectory }}"
        --toxenv="${{ parameters.ToxTestEnv }}"
        --injected-packages="${{ parameters.InjectedPackages }}"
        ${{ parameters.ToxEnvParallel }}
    env: ${{ parameters.EnvVars }}

  - ${{if eq(parameters.TestProxy, true) }}:
    - pwsh: |
        $files = Get-ChildItem -Path $(Build.SourcesDirectory) -Filter _proxy_log_*.log
        foreach($file in $files){
            Write-Host "##[group]$file"
            cat $file
            Write-Host "##[endgroup]"
        }
      displayName: Dump Test-Proxy Logs
      condition: succeededOrFailed()

  - task: PublishPipelineArtifact@1
    displayName: Publish Tox Logs
    condition: failed()
    continueOnError: true
    inputs:
      targetPath: '$(Build.SourcesDirectory)/_tox_logs'
      artifactType: 'pipeline'

  - ${{ parameters.AfterTestSteps }}

  - pwsh: |
      if (Test-Path -Path '.\_coverage\') {
        Get-ChildItem .\_coverage\ -Recurse |
        Foreach-Object {
          Get-Content $_
        }
      }
    displayName: 'Show .coverage files'
    condition: and(succeeded(), ${{ parameters.RunCoverage }})

  - task: PublishPipelineArtifact@1
    displayName: 'Publish .coverage files'
    continueOnError: true
    condition: and(succeeded(), ${{ parameters.RunCoverage }})
    inputs:
      targetPath: '$(Build.SourcesDirectory)/_coverage'
      artifactType: 'pipeline'

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: '**/*test*.xml'
      testRunTitle: '${{ parameters.ServiceDirectory }} ${{ parameters.CloudName }} $(Agent.JobName)'
      failTaskOnFailedTests: true

  - task: PythonScript@0
    displayName: 'Test Samples'
    condition: and(succeeded(), eq(variables['TestSamples'], 'true'))
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "$(TargetingString)"
        --service="${{ parameters.ServiceDirectory }}"
        --toxenv="samples"
    env: ${{ parameters.EnvVars }}
