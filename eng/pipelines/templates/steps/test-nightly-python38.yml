parameters:
  AdditionalTestArgs: ''
  TestMarkArgument: ''
  EnvVars: {}
  ServiceDirectory: ''
  PythonVersion: ''
  OSName: ''
  BeforeTestSteps: []
  CoverageArg: ''
  BuildTargetingString: 'azure-*'
  ToxTestEnv: ""

steps:
  - pwsh: |
      gci -r $(Build.ArtifactStagingDirectory)

  - template: eng/pipelines/templates/scripts/verify-agent-os.yml@azure-sdk-tools
    parameters:
      OSName: ${{ parameters.OSName }}

  - script: |
      sudo apt-get update
      sudo apt-get install build-essential libsqlite3-dev sqlite3 bzip2 libbz2-dev zlib1g-dev libssl-dev openssl libgdbm-dev liblzma-dev libreadline-dev libncursesw5-dev libffi-dev uuid-dev
      mkdir ~/python3.8
      cd ~/python3.8
      wget https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tar.xz
      tar -xf Python-3.8.0.tar.xz
      find ~/python3.8 -type d | xargs chmod 0755
      cd Python-3.8.0
      mkdir debug
      cd debug
      ../configure --enable-optimizations --prefix=$HOME
      make
      make install
      export PATH=~/bin:$PATH
      export PATH=~/lib:$PATH
      export PATH=~/.local/bin:$PATH
      curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
      python3 get-pip.py
      python3 -m pip install setuptools wheel 
      python3 -m pip install tox tox-monorepo packaging twine codecov beautifulsoup4 psutil
      python3 --version
      cd $(Build.SourcesDirectory)
    displayName: 'Prep Environment Using Python 3.8'

  - ${{ parameters.BeforeTestSteps }}

  - task: PythonScript@0
    inputs:
      scriptPath: scripts/devops_tasks/setup_execute_tests.py
      pythonInterpreter: /home/vsts/bin/python3
      arguments: >-
        "${{ parameters.BuildTargetingString }}"
        --mark_arg="${{ parameters.TestMarkArgument }}" 
        --service="${{ parameters.ServiceDirectory }}"
        ${{ parameters.AdditionalTestArgs }}
        ${{ parameters.CoverageArg }}
        --toxenv="${{ parameters.ToxTestEnv }}"
    displayName: 'Run Tests'
    env: ${{ parameters.EnvVars }}

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/*test*.xml'
      testRunTitle: '${{ parameters.OSName }} Python ${{ parameters.PythonVersion }}'
  
  - task: PythonScript@0
    displayName: 'Install Packages (Global)'
    inputs:
      pythonInterpreter: /home/vsts/bin/python3
      scriptPath: scripts/devops_tasks/setup_execute_tests.py
      arguments: '"${{ parameters.BuildTargetingString }}" --runtype=setup --disablecov --service="${{ parameters.ServiceDirectory }}"'
    env: ${{ parameters.EnvVars }}
    condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))

  - task: PythonScript@0
    displayName: 'Run Tests (Global)'
    inputs:
      pythonInterpreter: /home/vsts/bin/python3
      scriptPath: scripts/devops_tasks/setup_execute_tests.py
      arguments: >-
        "${{ parameters.BuildTargetingString }}"
        --runtype=execute 
        --disablecov 
        --mark_arg="${{ parameters.TestMarkArgument }}" 
        --service="${{ parameters.ServiceDirectory }}"
    env: ${{ parameters.EnvVars }}
    condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))
