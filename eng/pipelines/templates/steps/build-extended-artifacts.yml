parameters:
  - name: BeforePublishSteps
    type: object
    default: []
  - name: TestPipeline
    type: boolean
    default: false
  - name: ServiceDirectory
    type: string
    default: ''
  - name: BuildDocs
    type: boolean
    default: true
  - name: Artifacts
    type: object
    default: []
  - name: DevFeedName
    type: string
    default: 'public/azure-sdk-for-python'
# The variable TargetingString is set by template `eng/pipelines/templates/steps/targeting-string-resolve.yml`. This template is invoked from yml files:
#     eng/pipelines/templates/jobs/ci.tests.yml
#     eng/pipelines/templates/jobs/ci.yml
#     eng/pipelines/templates/jobs/live.test.yml

# Please use `$(TargetingString)` to refer to the python packages glob string. This was previously `${{ parameters.BuildTargetingString }}`.
steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'packages'
      targetPath: $(Build.ArtifactStagingDirectory)

  - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
    parameters:
      PackageName: "azure-template"
      ServiceDirectory: "template"
      TestPipeline: ${{ parameters.TestPipeline }}

  - template: /eng/common/pipelines/templates/steps/set-default-branch.yml

  - script: |
      echo "##vso[build.addbuildtag]Scheduled"
    displayName: 'Tag scheduled builds'
    condition: and(eq(variables['Build.SourceBranchName'], variables['DefaultBranch']), eq(variables['Build.Reason'],'Schedule'))

  - task: UsePythonVersion@0
    displayName: 'Use Python $(PythonVersion)'
    inputs:
      versionSpec: $(PythonVersion)

  - script: |
      python -m pip install setuptools==58.3.0
      python -m pip install -r eng/ci_tools.txt
    displayName: 'Prep Environment'

  - template: set-dev-build.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}

  - ${{if eq(variables['System.TeamProject'], 'internal') }}:
    - template: auth-dev-feed.yml
      parameters:
        DevFeedName: ${{ parameters.DevFeedName }}

  - task: PythonScript@0
    displayName: 'Generate Docs'
    condition: and(succeededOrFailed(), ${{parameters.BuildDocs}})
    inputs:
      scriptPath: 'scripts/devops_tasks/dispatch_tox.py'
      arguments: >-
        "$(TargetingString)" 
        --service="${{ parameters.ServiceDirectory }}" 
        --toxenv=sphinx

  - pwsh: |
      Write-Host "##vso[task.setvariable variable=PIP_INDEX_URL]https://pypi.python.org/simple"
    displayName: Reset PIP Index For APIStubGen

  - template: /eng/pipelines/templates/steps/run_apistub.yml
    parameters:
      ServiceDirectory: ${{ parameters.ServiceDirectory }}

  - ${{ parameters.BeforePublishSteps }}

  - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
    parameters:
      ArtifactPath: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'packages_extended'

  - pwsh: |
      $directoryExists = Test-Path -Path "$(Build.SourcesDirectory)/_docs"
      Write-Output "##vso[task.setvariable variable=DirectoryExists]$directoryExists"
    displayName: Check if docs directory exists
  
  - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
    parameters:
      ArtifactPath: '$(Build.SourcesDirectory)/_docs'
      CustomCondition: and(${{ parameters.BuildDocs }}, eq(variables['DirectoryExists'], 'True'))
      ArtifactName: 'documentation'

  - ${{if eq(variables['System.TeamProject'], 'internal') }}:
    - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
      displayName: 'Generate BOM'
      condition: succeededOrFailed()
      inputs:
        BuildDropPath: $(Build.ArtifactStagingDirectory)

    - template: /eng/common/pipelines/templates/steps/publish-artifact.yml
      parameters:
        ArtifactPath: '$(Build.ArtifactStagingDirectory)/_manifest'
        ArtifactName: 'extended_manifest'