parameters:
  - name: TestPipeline
    type: boolean
    default: false
  - name: ServiceDirectory
    type: string
    default: ''
  - name: CondaArtifacts
    type: object
    default: []
  - name: TestMarkArgument
    type: string
    default: ''
  - name: PythonVersion
    type: string
    default: ''
  - name: OSVmImage
    type: string
    default: ''

steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: 'conda'
      targetPath: $(Build.ArtifactStagingDirectory)

  - template: /eng/common/pipelines/templates/steps/set-test-pipeline-version.yml
    parameters:
      PackageName: "azure-template"
      ServiceDirectory: "template"
      TestPipeline: ${{ parameters.TestPipeline }}

  - task: UsePythonVersion@0
    displayName: 'Use Python $(PythonVersion)'
    inputs:
      versionSpec: $(PythonVersion)

  - pwsh: |
      # due to faulty deployed scripts/how the path gets manipulated by conda actions on 
      # ubuntu and mac, we can't rely on bin/scripts being referenced correctly. see
      # https://github.com/MicrosoftDocs/azure-devops-docs/issues/3812
      $activateMethod = "source $($env:CONDA)/bin/activate"

      # on windows, we need to add "--user" as otherwise pip won't successfully install/uninstall due to 
      # how windows holds reservation on pip.exe. this is unnecessary on ubuntu/mac.
      $requirementSuffix = ""

      # we always want to prepend the path with conda bin   
      Write-Host "##vso[task.prependpath]]$($env:CONDA)/bin"

      if ($IsWindows) {
        # powershell does not have an equivalent of call/source, which is necessary when
        # using conda in azure devops. Note that we use `activate` natively here, as
        # a later path prepend of the /scripts directory actually works.
        $activateMethod = "call activate" 
        $requirementSuffix = " --user"

        # on windows only, need to prepend with the scripts directory as well
        Write-Host "##vso[task.prependpath]$($env:CONDA)/Scripts"
      }

      # pypy3.7, for devops we are forced to use the term 'pypy3'
      # however, conda has no comprehension of such a thing.

      if("$(PythonVersion)" -eq "pypy3"){
        Write-Host "##vso[task.setvariable variable=PyVersion]pypy -c conda-forge"
      }
      else {
        Write-Host "##vso[task.setvariable variable=PyVersion]$(PythonVersion)"
      }
      
      # we will use these two variables extensively later
      Write-Host "##vso[task.setvariable variable=activate.method]$activateMethod"
      Write-Host "##vso[task.setvariable variable=requirement.suffix]$requirementSuffix"
    displayName: 'Evaluate OS Specific PATH and Parameters'

  - ${{ each artifact in parameters.CondaArtifacts }}:
    - script: |
        echo "conda create --name ${{ artifact.name }} python=$(PyVersion) --yes"
        conda create --name ${{ artifact.name }} python=$(PyVersion) --yes

        echo "conda install --name ${{ artifact.name }} --yes --quiet conda-build"
        conda install --name ${{ artifact.name }} --yes --quiet conda-build

        echo "$(activate.method) ${{ artifact.name }}"
        $(activate.method) ${{ artifact.name }}

        echo "conda index $(Build.ArtifactStagingDirectory)/${{ artifact.name }}"
        conda index $(Build.ArtifactStagingDirectory)/${{ artifact.name }}
      displayName: 'Prepare Conda Environment for Testing ${{ artifact.name }}, Index the Target Local Artifact'

    - script: |
        echo "$(activate.method) ${{ artifact.name }}"
        $(activate.method) ${{ artifact.name }}

        echo "python -m pip install -r eng/ci_tools.txt $(requirement.suffix)"
        python -m pip install -r eng/ci_tools.txt $(requirement.suffix)
      displayName: 'Activate Conda Environment and Install General Dependencies ${{ artifact.name }}'

    - pwsh: |
        mkdir $(Agent.BuildDirectory)/conda/
        Write-Host "##vso[task.setvariable variable=conda.build]$(Agent.BuildDirectory)/conda_checkout"
      displayName: 'Create Conda Working Directory for Testing'

    - ${{ each checkout in artifact.checkout }}:
      - pwsh:
          Write-Host "Clean up Conda Build Directory $(conda.build)"
          Remove-Item $(conda.build)/* -Recurse -Force
        displayName: 'Clean Up Before Testing ${{ artifact.name }}'

      - template: /eng/common/pipelines/templates/steps/sparse-checkout.yml
        parameters:
          Paths:
            - "${{ checkout.checkout_path }}/${{ checkout.package }}"
            - "tools/"
          Repositories:
            - Name: "Azure/azure-sdk-for-python"
              Commitish: "${{ checkout.Package }}_${{ checkout.Version }}"
              WorkingDirectory: "$(conda.build)"
          SkipDefaultCheckout: true

      - script: |
          echo "conda install --name ${{ artifact.name }} ${{ artifact.name }} -c $(Build.ArtifactStagingDirectory)/${{ artifact.name }} --yes"
          conda install --name ${{ artifact.name }} ${{ artifact.name }} -c $(Build.ArtifactStagingDirectory)/${{ artifact.name }} --yes

          echo "$(activate.method) ${{ artifact.name }}"
          $(activate.method) ${{ artifact.name }}

          python -m pip install -r dev_requirements.txt
        displayName: 'Install ${{ checkout.package }} Conda Package and Dev Requirements'
        workingDirectory: $(conda.build)/${{ checkout.checkout_path }}/${{ checkout.package }}

      - script: |
          echo "$(activate.method) ${{ artifact.name }}"
          $(activate.method) ${{ artifact.name }}
          python -m pytest .
        displayName: 'Run Tests for ${{ checkout.package }}'
        workingDirectory: $(conda.build)/${{ checkout.checkout_path }}/${{ checkout.package }}
