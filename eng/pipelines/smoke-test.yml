variables:
  InstallAsyncRequirements: true

jobs:
  - job:
    strategy:
      matrix:
        Python_27_Linux (Public):
          PythonVersion: '2.7'
          InstallAsyncRequirements: false
          OSVmImage: ubuntu-18.04
          CloudType: public
        Python_37_Linux (Public):
          PythonVersion: '3.7'
          OSVmImage: ubuntu-18.04
          CloudType: public
        Python_38_Linux (Public):
          PythonVersion: '3.8'
          OSVmImage: ubuntu-18.04
          CloudType: public
        Python_37_Windows (Public):
          PythonVersion: '3.7'
          OSVmImage: windows-2019
          CloudType: public
        Python_38_Windows (Public):
          PythonVersion: '3.8'
          OSVmImage: windows-2019
          CloudType: public
        Python_37_Mac (Public):
          PythonVersion: '3.7'
          OSVmImage: macOS-10.15
          CloudType: public
        Python_38_Mac (Public):
          PythonVersion: '3.8'
          OSVmImage: macOS-10.15
          CloudType: public
        Python_38_Linux (Gov):
          PythonVersion: '3.8'
          OSVmImage: ubuntu-18.04
          CloudType: gov
        Python_37_Windows (Gov):
          PythonVersion: '3.7'
          OSVmImage: windows-2019
          CloudType: gov

    pool:
      vmImage: $(OSVmImage)

    steps:
      - task: UsePythonVersion@0
        displayName: "Use Python $(PythonVersion)"
        inputs:
          versionSpec: $(PythonVersion)

      - script: pip --version
        displayName: pip --version

      - script: pip install packaging pkginfo
        displayName: Install requirements for dev tools

      - script: pip install -r ./common/smoketest/requirements.txt
        displayName: "Install requirements.txt"

      - script: pip install -r ./common/smoketest/requirements_async.txt
        displayName: "Install requirements_async.txt"
        condition: and(succeeded(), eq(variables['InstallAsyncRequirements'], 'true'))

      - script: python ./eng/tox/install_dev_build_dependency.py -r ./common/smoketest/requirements.txt
        displayName: "Install dev dependencies from feed"

      # Set secret environment variables for different clouds
      - pwsh: |
          $variables = @{
            AZURE_CLIENT_ID='$(aad-azure-sdk-test-client-id)'
            AZURE_CLIENT_SECRET='$(aad-azure-sdk-test-client-secret)'
            AZURE_TENANT_ID='$(aad-azure-sdk-test-tenant-id)'
            AZURE_AUTHORITY_HOST='$(aad-azure-sdk-test-authority-host)'
            AZURE_PROJECT_URL='$(smoke-tests-key-vault-project-url)'
            EVENT_HUBS_CONNECTION_STRING='$(smoke-tests-event-hubs-connection-string)'
            COSMOS_ENDPOINT='$(smoke-tests-cosmos-endpoint)'
            COSMOS_KEY='$(smoke-tests-cosmos-key)'
            STORAGE_CONNECTION_STRING='$(smoke-tests-storage-connection-string)'
          };
          foreach ($key in $variables.Keys) {
            Write-Host "Setting variable '$key'"
            Write-Host "##vso[task.setvariable variable=_$key;issecret=true;]$($variables[$key])"
            Write-Host "##vso[task.setvariable variable=$key;]$($variables[$key])"
          }
        displayName: Set secrets for public cloud
        condition: and(succeeded(), eq(variables['CloudType'], 'public'))

      - pwsh: |
          $variables = @{
            AZURE_CLIENT_ID='$(aad-azure-sdk-test-client-id-gov)'
            AZURE_CLIENT_SECRET='$(aad-azure-sdk-test-client-secret-gov)'
            AZURE_TENANT_ID='$(aad-azure-sdk-test-tenant-id-gov)'
            AZURE_AUTHORITY_HOST='$(aad-azure-sdk-test-authority-host-gov)'
            AZURE_PROJECT_URL='$(smoke-tests-key-vault-project-url-gov)'
            EVENT_HUBS_CONNECTION_STRING='$(smoke-tests-event-hubs-connection-string-gov)'
            COSMOS_ENDPOINT='$(smoke-tests-cosmos-endpoint-gov)'
            COSMOS_KEY='$(smoke-tests-cosmos-key-gov)'
            STORAGE_CONNECTION_STRING='$(smoke-tests-storage-connection-string-gov)'
          };
          foreach ($key in $variables.Keys) {
            Write-Host "Setting variable '$key'"
            Write-Host "##vso[task.setvariable variable=_$key;issecret=true;]$($variables[$key])"
            Write-Host "##vso[task.setvariable variable=$key;]$($variables[$key])"
          }
        displayName: Set secrets for public cloud
        condition: and(succeeded(), eq(variables['CloudType'], 'gov'))

      - script: python ./common/smoketest/program.py
        displayName: "Run Smoke Test"
