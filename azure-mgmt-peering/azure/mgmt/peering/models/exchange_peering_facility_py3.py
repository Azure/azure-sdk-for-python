# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ExchangePeeringFacility(Model):
    """The properties that define an exchange peering facility.

    :param exchange_name: The name of the exchange peering facility.
    :type exchange_name: str
    :param bandwidth_in_mbps: The bandwidth of the connection between
     Microsoft and the exchange peering facility.
    :type bandwidth_in_mbps: int
    :param microsoft_ipv4_address: The IPv4 address of Microsoft at the
     exchange peering facility.
    :type microsoft_ipv4_address: str
    :param microsoft_ipv6_address: The IPv6 address of Microsoft at the
     exchange peering facility.
    :type microsoft_ipv6_address: str
    :param facility_ipv4_prefix: The IPv4 prefixes associated with the
     exchange peering facility.
    :type facility_ipv4_prefix: str
    :param facility_ipv6_prefix: The IPv6 prefixes associated with the
     exchange peering facility.
    :type facility_ipv6_prefix: str
    :param peering_db_facility_id: The PeeringDB.com ID of the facility.
    :type peering_db_facility_id: int
    :param peering_db_facility_link: The PeeringDB.com URL of the facility.
    :type peering_db_facility_link: str
    """

    _attribute_map = {
        'exchange_name': {'key': 'exchangeName', 'type': 'str'},
        'bandwidth_in_mbps': {'key': 'bandwidthInMbps', 'type': 'int'},
        'microsoft_ipv4_address': {'key': 'microsoftIPv4Address', 'type': 'str'},
        'microsoft_ipv6_address': {'key': 'microsoftIPv6Address', 'type': 'str'},
        'facility_ipv4_prefix': {'key': 'facilityIPv4Prefix', 'type': 'str'},
        'facility_ipv6_prefix': {'key': 'facilityIPv6Prefix', 'type': 'str'},
        'peering_db_facility_id': {'key': 'peeringDBFacilityId', 'type': 'int'},
        'peering_db_facility_link': {'key': 'peeringDBFacilityLink', 'type': 'str'},
    }

    def __init__(self, *, exchange_name: str=None, bandwidth_in_mbps: int=None, microsoft_ipv4_address: str=None, microsoft_ipv6_address: str=None, facility_ipv4_prefix: str=None, facility_ipv6_prefix: str=None, peering_db_facility_id: int=None, peering_db_facility_link: str=None, **kwargs) -> None:
        super(ExchangePeeringFacility, self).__init__(**kwargs)
        self.exchange_name = exchange_name
        self.bandwidth_in_mbps = bandwidth_in_mbps
        self.microsoft_ipv4_address = microsoft_ipv4_address
        self.microsoft_ipv6_address = microsoft_ipv6_address
        self.facility_ipv4_prefix = facility_ipv4_prefix
        self.facility_ipv6_prefix = facility_ipv6_prefix
        self.peering_db_facility_id = peering_db_facility_id
        self.peering_db_facility_link = peering_db_facility_link
