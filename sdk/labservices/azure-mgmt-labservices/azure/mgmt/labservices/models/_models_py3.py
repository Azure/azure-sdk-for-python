# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AddUsersPayload(Model):
    """Payload for Add Users operation on a Lab.

    All required parameters must be populated in order to send to Azure.

    :param email_addresses: Required. List of user emails addresses to add to
     the lab.
    :type email_addresses: list[str]
    """

    _validation = {
        'email_addresses': {'required': True},
    }

    _attribute_map = {
        'email_addresses': {'key': 'emailAddresses', 'type': '[str]'},
    }

    def __init__(self, *, email_addresses, **kwargs) -> None:
        super(AddUsersPayload, self).__init__(**kwargs)
        self.email_addresses = email_addresses


class CloudError(Model):
    """Error from a REST request.

    :param error:
    :type error: ~azure.mgmt.labservices.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(CloudError, self).__init__(**kwargs)
        self.error = error


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorBody(Model):
    """Body of an error from a REST request.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param target:
    :type target: str
    :param details: Inner errors.
    :type details: list[~azure.mgmt.labservices.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, details=None, **kwargs) -> None:
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class CreateLabProperties(Model):
    """Properties for creating a managed lab and a default environment setting.

    All required parameters must be populated in order to send to Azure.

    :param environment_setting_creation_parameters: Settings related to
     creating an environment setting
    :type environment_setting_creation_parameters:
     ~azure.mgmt.labservices.models.EnvironmentSettingCreationParameters
    :param lab_creation_parameters: Required. Settings related to creating a
     lab
    :type lab_creation_parameters:
     ~azure.mgmt.labservices.models.LabCreationParameters
    :param name: Required. The name of the resource
    :type name: str
    :param location: The location of the resource
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    """

    _validation = {
        'lab_creation_parameters': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'environment_setting_creation_parameters': {'key': 'environmentSettingCreationParameters', 'type': 'EnvironmentSettingCreationParameters'},
        'lab_creation_parameters': {'key': 'labCreationParameters', 'type': 'LabCreationParameters'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, lab_creation_parameters, name: str, environment_setting_creation_parameters=None, location: str=None, tags=None, **kwargs) -> None:
        super(CreateLabProperties, self).__init__(**kwargs)
        self.environment_setting_creation_parameters = environment_setting_creation_parameters
        self.lab_creation_parameters = lab_creation_parameters
        self.name = name
        self.location = location
        self.tags = tags


class Resource(Model):
    """An Azure resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, location: str=None, tags=None, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags


class Environment(Resource):
    """Represents an environment instance.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :param resource_sets: The set of a VM and the setting id it was created
     for
    :type resource_sets: ~azure.mgmt.labservices.models.ResourceSet
    :ivar claimed_by_user_object_id: The AAD object Id of the user who has
     claimed the environment
    :vartype claimed_by_user_object_id: str
    :ivar claimed_by_user_principal_id: The user principal Id of the user who
     has claimed the environment
    :vartype claimed_by_user_principal_id: str
    :ivar claimed_by_user_name: The name or email address of the user who has
     claimed the environment
    :vartype claimed_by_user_name: str
    :ivar is_claimed: Is the environment claimed or not
    :vartype is_claimed: bool
    :ivar last_known_power_state: Last known power state of the environment
    :vartype last_known_power_state: str
    :ivar network_interface: Network details of the environment
    :vartype network_interface:
     ~azure.mgmt.labservices.models.NetworkInterface
    :ivar total_usage: How long the environment has been used by a lab user
    :vartype total_usage: timedelta
    :ivar password_last_reset: When the password was last reset on the
     environment.
    :vartype password_last_reset: datetime
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    :ivar latest_operation_result: The details of the latest operation. ex:
     status, error
    :vartype latest_operation_result:
     ~azure.mgmt.labservices.models.LatestOperationResult
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'claimed_by_user_object_id': {'readonly': True},
        'claimed_by_user_principal_id': {'readonly': True},
        'claimed_by_user_name': {'readonly': True},
        'is_claimed': {'readonly': True},
        'last_known_power_state': {'readonly': True},
        'network_interface': {'readonly': True},
        'total_usage': {'readonly': True},
        'password_last_reset': {'readonly': True},
        'latest_operation_result': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'resource_sets': {'key': 'properties.resourceSets', 'type': 'ResourceSet'},
        'claimed_by_user_object_id': {'key': 'properties.claimedByUserObjectId', 'type': 'str'},
        'claimed_by_user_principal_id': {'key': 'properties.claimedByUserPrincipalId', 'type': 'str'},
        'claimed_by_user_name': {'key': 'properties.claimedByUserName', 'type': 'str'},
        'is_claimed': {'key': 'properties.isClaimed', 'type': 'bool'},
        'last_known_power_state': {'key': 'properties.lastKnownPowerState', 'type': 'str'},
        'network_interface': {'key': 'properties.networkInterface', 'type': 'NetworkInterface'},
        'total_usage': {'key': 'properties.totalUsage', 'type': 'duration'},
        'password_last_reset': {'key': 'properties.passwordLastReset', 'type': 'iso-8601'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
        'latest_operation_result': {'key': 'properties.latestOperationResult', 'type': 'LatestOperationResult'},
    }

    def __init__(self, *, location: str=None, tags=None, resource_sets=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(Environment, self).__init__(location=location, tags=tags, **kwargs)
        self.resource_sets = resource_sets
        self.claimed_by_user_object_id = None
        self.claimed_by_user_principal_id = None
        self.claimed_by_user_name = None
        self.is_claimed = None
        self.last_known_power_state = None
        self.network_interface = None
        self.total_usage = None
        self.password_last_reset = None
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier
        self.latest_operation_result = None


class EnvironmentDetails(Model):
    """This represents the details about a User's environment and its state.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the Environment
    :vartype name: str
    :ivar description: Description of the Environment
    :vartype description: str
    :ivar id: Resource Id of the environment
    :vartype id: str
    :ivar provisioning_state: The provisioning state of the environment. This
     also includes LabIsFull and NotYetProvisioned status.
    :vartype provisioning_state: str
    :ivar virtual_machine_details: Details of backing DTL virtual machine with
     compute and network details.
    :vartype virtual_machine_details:
     ~azure.mgmt.labservices.models.VirtualMachineDetails
    :ivar latest_operation_result: The details of the latest operation. ex:
     status, error
    :vartype latest_operation_result:
     ~azure.mgmt.labservices.models.LatestOperationResult
    :ivar environment_state: Publishing state of the environment setting
     Possible values are Creating, Created, Failed
    :vartype environment_state: str
    :ivar total_usage: How long the environment has been used by a lab user
    :vartype total_usage: timedelta
    :ivar password_last_reset: When the password was last reset on the
     environment.
    :vartype password_last_reset: datetime
    """

    _validation = {
        'name': {'readonly': True},
        'description': {'readonly': True},
        'id': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'virtual_machine_details': {'readonly': True},
        'latest_operation_result': {'readonly': True},
        'environment_state': {'readonly': True},
        'total_usage': {'readonly': True},
        'password_last_reset': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'virtual_machine_details': {'key': 'virtualMachineDetails', 'type': 'VirtualMachineDetails'},
        'latest_operation_result': {'key': 'latestOperationResult', 'type': 'LatestOperationResult'},
        'environment_state': {'key': 'environmentState', 'type': 'str'},
        'total_usage': {'key': 'totalUsage', 'type': 'duration'},
        'password_last_reset': {'key': 'passwordLastReset', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs) -> None:
        super(EnvironmentDetails, self).__init__(**kwargs)
        self.name = None
        self.description = None
        self.id = None
        self.provisioning_state = None
        self.virtual_machine_details = None
        self.latest_operation_result = None
        self.environment_state = None
        self.total_usage = None
        self.password_last_reset = None


class EnvironmentFragment(Resource):
    """Represents an environment instance.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :param resource_sets: The set of a VM and the setting id it was created
     for
    :type resource_sets: ~azure.mgmt.labservices.models.ResourceSetFragment
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'resource_sets': {'key': 'properties.resourceSets', 'type': 'ResourceSetFragment'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
    }

    def __init__(self, *, location: str=None, tags=None, resource_sets=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(EnvironmentFragment, self).__init__(location=location, tags=tags, **kwargs)
        self.resource_sets = resource_sets
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier


class EnvironmentOperationsPayload(Model):
    """Represents payload for any Environment operations like get, start, stop,
    connect.

    All required parameters must be populated in order to send to Azure.

    :param environment_id: Required. The resourceId of the environment
    :type environment_id: str
    """

    _validation = {
        'environment_id': {'required': True},
    }

    _attribute_map = {
        'environment_id': {'key': 'environmentId', 'type': 'str'},
    }

    def __init__(self, *, environment_id: str, **kwargs) -> None:
        super(EnvironmentOperationsPayload, self).__init__(**kwargs)
        self.environment_id = environment_id


class EnvironmentSetting(Resource):
    """Represents settings of an environment, from which environment instances
    would be created.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :ivar publishing_state: Describes the readiness of this environment
     setting. Possible values include: 'Draft', 'Publishing', 'Published',
     'PublishFailed', 'Scaling'
    :vartype publishing_state: str or
     ~azure.mgmt.labservices.models.PublishingState
    :param configuration_state: Describes the user's progress in configuring
     their environment setting. Possible values include: 'NotApplicable',
     'Completed'
    :type configuration_state: str or
     ~azure.mgmt.labservices.models.ConfigurationState
    :param description: Describes the environment and its resource settings
    :type description: str
    :param title: Brief title describing the environment and its resource
     settings
    :type title: str
    :param resource_settings: Required. The resource specific settings
    :type resource_settings: ~azure.mgmt.labservices.models.ResourceSettings
    :ivar last_changed: Time when the template VM was last changed.
    :vartype last_changed: datetime
    :ivar last_published: Time when the template VM was last sent for
     publishing.
    :vartype last_published: datetime
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    :ivar latest_operation_result: The details of the latest operation. ex:
     status, error
    :vartype latest_operation_result:
     ~azure.mgmt.labservices.models.LatestOperationResult
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'publishing_state': {'readonly': True},
        'resource_settings': {'required': True},
        'last_changed': {'readonly': True},
        'last_published': {'readonly': True},
        'latest_operation_result': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'publishing_state': {'key': 'properties.publishingState', 'type': 'str'},
        'configuration_state': {'key': 'properties.configurationState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'resource_settings': {'key': 'properties.resourceSettings', 'type': 'ResourceSettings'},
        'last_changed': {'key': 'properties.lastChanged', 'type': 'iso-8601'},
        'last_published': {'key': 'properties.lastPublished', 'type': 'iso-8601'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
        'latest_operation_result': {'key': 'properties.latestOperationResult', 'type': 'LatestOperationResult'},
    }

    def __init__(self, *, resource_settings, location: str=None, tags=None, configuration_state=None, description: str=None, title: str=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(EnvironmentSetting, self).__init__(location=location, tags=tags, **kwargs)
        self.publishing_state = None
        self.configuration_state = configuration_state
        self.description = description
        self.title = title
        self.resource_settings = resource_settings
        self.last_changed = None
        self.last_published = None
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier
        self.latest_operation_result = None


class EnvironmentSettingCreationParameters(Model):
    """Settings related to creating an environment setting.

    All required parameters must be populated in order to send to Azure.

    :param resource_setting_creation_parameters: Required. The resource
     specific settings
    :type resource_setting_creation_parameters:
     ~azure.mgmt.labservices.models.ResourceSettingCreationParameters
    """

    _validation = {
        'resource_setting_creation_parameters': {'required': True},
    }

    _attribute_map = {
        'resource_setting_creation_parameters': {'key': 'resourceSettingCreationParameters', 'type': 'ResourceSettingCreationParameters'},
    }

    def __init__(self, *, resource_setting_creation_parameters, **kwargs) -> None:
        super(EnvironmentSettingCreationParameters, self).__init__(**kwargs)
        self.resource_setting_creation_parameters = resource_setting_creation_parameters


class EnvironmentSettingFragment(Resource):
    """Represents settings of an environment, from which environment instances
    would be created.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :param configuration_state: Describes the user's progress in configuring
     their environment setting. Possible values include: 'NotApplicable',
     'Completed'
    :type configuration_state: str or
     ~azure.mgmt.labservices.models.ConfigurationState
    :param description: Describes the environment and its resource settings
    :type description: str
    :param title: Brief title describing the environment and its resource
     settings
    :type title: str
    :param resource_settings: The resource specific settings
    :type resource_settings:
     ~azure.mgmt.labservices.models.ResourceSettingsFragment
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'configuration_state': {'key': 'properties.configurationState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'resource_settings': {'key': 'properties.resourceSettings', 'type': 'ResourceSettingsFragment'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
    }

    def __init__(self, *, location: str=None, tags=None, configuration_state=None, description: str=None, title: str=None, resource_settings=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(EnvironmentSettingFragment, self).__init__(location=location, tags=tags, **kwargs)
        self.configuration_state = configuration_state
        self.description = description
        self.title = title
        self.resource_settings = resource_settings
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier


class EnvironmentSize(Model):
    """Represents a size category supported by this Lab Account (small, medium or
    large).

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param name: The size category. Possible values include: 'Basic',
     'Standard', 'Performance'
    :type name: str or ~azure.mgmt.labservices.models.ManagedLabVmSize
    :param vm_sizes: Represents a set of compute sizes that can serve this
     given size type
    :type vm_sizes: list[~azure.mgmt.labservices.models.SizeInfo]
    :ivar max_price: The pay-as-you-go dollar price per hour this size will
     cost. It does not include discounts and may not reflect the actual price
     the size will cost. This is the maximum price of all prices within this
     tier.
    :vartype max_price: decimal.Decimal
    :ivar min_number_of_cores: The number of cores a VM of this size has. This
     is the minimum number of cores within this tier.
    :vartype min_number_of_cores: int
    :ivar min_memory: The amount of memory available (in GB). This is the
     minimum amount of memory within this tier.
    :vartype min_memory: float
    """

    _validation = {
        'max_price': {'readonly': True},
        'min_number_of_cores': {'readonly': True},
        'min_memory': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'vm_sizes': {'key': 'vmSizes', 'type': '[SizeInfo]'},
        'max_price': {'key': 'maxPrice', 'type': 'decimal'},
        'min_number_of_cores': {'key': 'minNumberOfCores', 'type': 'int'},
        'min_memory': {'key': 'minMemory', 'type': 'float'},
    }

    def __init__(self, *, name=None, vm_sizes=None, **kwargs) -> None:
        super(EnvironmentSize, self).__init__(**kwargs)
        self.name = name
        self.vm_sizes = vm_sizes
        self.max_price = None
        self.min_number_of_cores = None
        self.min_memory = None


class EnvironmentSizeFragment(Model):
    """Represents a size category supported by this Lab Account (small, medium or
    large).

    :param name: The size category. Possible values include: 'Basic',
     'Standard', 'Performance'
    :type name: str or ~azure.mgmt.labservices.models.ManagedLabVmSize
    :param vm_sizes: Represents a set of compute sizes that can serve this
     given size type
    :type vm_sizes: list[~azure.mgmt.labservices.models.SizeInfoFragment]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'vm_sizes': {'key': 'vmSizes', 'type': '[SizeInfoFragment]'},
    }

    def __init__(self, *, name=None, vm_sizes=None, **kwargs) -> None:
        super(EnvironmentSizeFragment, self).__init__(**kwargs)
        self.name = name
        self.vm_sizes = vm_sizes


class GalleryImage(Resource):
    """Represents an image from the Azure Marketplace.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :ivar author: The author of the gallery image.
    :vartype author: str
    :ivar created_date: The creation date of the gallery image.
    :vartype created_date: datetime
    :ivar description: The description of the gallery image.
    :vartype description: str
    :ivar image_reference: The image reference of the gallery image.
    :vartype image_reference:
     ~azure.mgmt.labservices.models.GalleryImageReference
    :ivar icon: The icon of the gallery image.
    :vartype icon: str
    :param is_enabled: Indicates whether this gallery image is enabled.
    :type is_enabled: bool
    :param is_override: Indicates whether this gallery has been overridden for
     this lab account
    :type is_override: bool
    :ivar plan_id: The third party plan that applies to this image
    :vartype plan_id: str
    :param is_plan_authorized: Indicates if the plan has been authorized for
     programmatic deployment.
    :type is_plan_authorized: bool
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    :ivar latest_operation_result: The details of the latest operation. ex:
     status, error
    :vartype latest_operation_result:
     ~azure.mgmt.labservices.models.LatestOperationResult
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'author': {'readonly': True},
        'created_date': {'readonly': True},
        'description': {'readonly': True},
        'image_reference': {'readonly': True},
        'icon': {'readonly': True},
        'plan_id': {'readonly': True},
        'latest_operation_result': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'author': {'key': 'properties.author', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'image_reference': {'key': 'properties.imageReference', 'type': 'GalleryImageReference'},
        'icon': {'key': 'properties.icon', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
        'is_override': {'key': 'properties.isOverride', 'type': 'bool'},
        'plan_id': {'key': 'properties.planId', 'type': 'str'},
        'is_plan_authorized': {'key': 'properties.isPlanAuthorized', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
        'latest_operation_result': {'key': 'properties.latestOperationResult', 'type': 'LatestOperationResult'},
    }

    def __init__(self, *, location: str=None, tags=None, is_enabled: bool=None, is_override: bool=None, is_plan_authorized: bool=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(GalleryImage, self).__init__(location=location, tags=tags, **kwargs)
        self.author = None
        self.created_date = None
        self.description = None
        self.image_reference = None
        self.icon = None
        self.is_enabled = is_enabled
        self.is_override = is_override
        self.plan_id = None
        self.is_plan_authorized = is_plan_authorized
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier
        self.latest_operation_result = None


class GalleryImageFragment(Resource):
    """Represents an image from the Azure Marketplace.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :param is_enabled: Indicates whether this gallery image is enabled.
    :type is_enabled: bool
    :param is_override: Indicates whether this gallery has been overridden for
     this lab account
    :type is_override: bool
    :param is_plan_authorized: Indicates if the plan has been authorized for
     programmatic deployment.
    :type is_plan_authorized: bool
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
        'is_override': {'key': 'properties.isOverride', 'type': 'bool'},
        'is_plan_authorized': {'key': 'properties.isPlanAuthorized', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
    }

    def __init__(self, *, location: str=None, tags=None, is_enabled: bool=None, is_override: bool=None, is_plan_authorized: bool=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(GalleryImageFragment, self).__init__(location=location, tags=tags, **kwargs)
        self.is_enabled = is_enabled
        self.is_override = is_override
        self.is_plan_authorized = is_plan_authorized
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier


class GalleryImageReference(Model):
    """The reference information for an Azure Marketplace image.

    :param offer: The offer of the gallery image.
    :type offer: str
    :param publisher: The publisher of the gallery image.
    :type publisher: str
    :param sku: The SKU of the gallery image.
    :type sku: str
    :param os_type: The OS type of the gallery image.
    :type os_type: str
    :param version: The version of the gallery image.
    :type version: str
    """

    _attribute_map = {
        'offer': {'key': 'offer', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, *, offer: str=None, publisher: str=None, sku: str=None, os_type: str=None, version: str=None, **kwargs) -> None:
        super(GalleryImageReference, self).__init__(**kwargs)
        self.offer = offer
        self.publisher = publisher
        self.sku = sku
        self.os_type = os_type
        self.version = version


class GalleryImageReferenceFragment(Model):
    """The reference information for an Azure Marketplace image.

    :param offer: The offer of the gallery image.
    :type offer: str
    :param publisher: The publisher of the gallery image.
    :type publisher: str
    :param sku: The SKU of the gallery image.
    :type sku: str
    :param os_type: The OS type of the gallery image.
    :type os_type: str
    :param version: The version of the gallery image.
    :type version: str
    """

    _attribute_map = {
        'offer': {'key': 'offer', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, *, offer: str=None, publisher: str=None, sku: str=None, os_type: str=None, version: str=None, **kwargs) -> None:
        super(GalleryImageReferenceFragment, self).__init__(**kwargs)
        self.offer = offer
        self.publisher = publisher
        self.sku = sku
        self.os_type = os_type
        self.version = version


class GetEnvironmentResponse(Model):
    """Represents the environments details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar environment: Details of the environment
    :vartype environment: ~azure.mgmt.labservices.models.EnvironmentDetails
    """

    _validation = {
        'environment': {'readonly': True},
    }

    _attribute_map = {
        'environment': {'key': 'environment', 'type': 'EnvironmentDetails'},
    }

    def __init__(self, **kwargs) -> None:
        super(GetEnvironmentResponse, self).__init__(**kwargs)
        self.environment = None


class GetPersonalPreferencesResponse(Model):
    """Represents the PersonalPreferences for the user.

    :param id: Id to be used by the cache orchestrator
    :type id: str
    :param favorite_lab_resource_ids: Array of favorite lab resource ids
    :type favorite_lab_resource_ids: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'favorite_lab_resource_ids': {'key': 'favoriteLabResourceIds', 'type': '[str]'},
    }

    def __init__(self, *, id: str=None, favorite_lab_resource_ids=None, **kwargs) -> None:
        super(GetPersonalPreferencesResponse, self).__init__(**kwargs)
        self.id = id
        self.favorite_lab_resource_ids = favorite_lab_resource_ids


class GetRegionalAvailabilityResponse(Model):
    """The response model from the GetRegionalAvailability action.

    :param regional_availability: Availability information for different size
     categories per region
    :type regional_availability:
     list[~azure.mgmt.labservices.models.RegionalAvailability]
    """

    _attribute_map = {
        'regional_availability': {'key': 'regionalAvailability', 'type': '[RegionalAvailability]'},
    }

    def __init__(self, *, regional_availability=None, **kwargs) -> None:
        super(GetRegionalAvailabilityResponse, self).__init__(**kwargs)
        self.regional_availability = regional_availability


class Lab(Resource):
    """Represents a lab.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :param max_users_in_lab: Maximum number of users allowed in the lab.
    :type max_users_in_lab: int
    :ivar user_quota: Maximum value MaxUsersInLab can be set to, as specified
     by the service
    :vartype user_quota: int
    :ivar invitation_code: Invitation code that users can use to join a lab.
    :vartype invitation_code: str
    :ivar created_by_object_id: Object id of the user that created the lab.
    :vartype created_by_object_id: str
    :param usage_quota: Maximum duration a user can use an environment for in
     the lab.
    :type usage_quota: timedelta
    :param user_access_mode: Lab user access mode (open to all vs. restricted
     to those listed on the lab). Possible values include: 'Restricted', 'Open'
    :type user_access_mode: str or
     ~azure.mgmt.labservices.models.LabUserAccessMode
    :ivar created_by_user_principal_name: Lab creator name
    :vartype created_by_user_principal_name: str
    :ivar created_date: Creation date for the lab
    :vartype created_date: datetime
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    :ivar latest_operation_result: The details of the latest operation. ex:
     status, error
    :vartype latest_operation_result:
     ~azure.mgmt.labservices.models.LatestOperationResult
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'user_quota': {'readonly': True},
        'invitation_code': {'readonly': True},
        'created_by_object_id': {'readonly': True},
        'created_by_user_principal_name': {'readonly': True},
        'created_date': {'readonly': True},
        'latest_operation_result': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'max_users_in_lab': {'key': 'properties.maxUsersInLab', 'type': 'int'},
        'user_quota': {'key': 'properties.userQuota', 'type': 'int'},
        'invitation_code': {'key': 'properties.invitationCode', 'type': 'str'},
        'created_by_object_id': {'key': 'properties.createdByObjectId', 'type': 'str'},
        'usage_quota': {'key': 'properties.usageQuota', 'type': 'duration'},
        'user_access_mode': {'key': 'properties.userAccessMode', 'type': 'str'},
        'created_by_user_principal_name': {'key': 'properties.createdByUserPrincipalName', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
        'latest_operation_result': {'key': 'properties.latestOperationResult', 'type': 'LatestOperationResult'},
    }

    def __init__(self, *, location: str=None, tags=None, max_users_in_lab: int=None, usage_quota=None, user_access_mode=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(Lab, self).__init__(location=location, tags=tags, **kwargs)
        self.max_users_in_lab = max_users_in_lab
        self.user_quota = None
        self.invitation_code = None
        self.created_by_object_id = None
        self.usage_quota = usage_quota
        self.user_access_mode = user_access_mode
        self.created_by_user_principal_name = None
        self.created_date = None
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier
        self.latest_operation_result = None


class LabAccount(Resource):
    """Represents a lab account.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :ivar size_configuration: Represents the size configuration under the lab
     account
    :vartype size_configuration:
     ~azure.mgmt.labservices.models.SizeConfigurationProperties
    :param enabled_region_selection: Represents if region selection is enabled
    :type enabled_region_selection: bool
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    :ivar latest_operation_result: The details of the latest operation. ex:
     status, error
    :vartype latest_operation_result:
     ~azure.mgmt.labservices.models.LatestOperationResult
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'size_configuration': {'readonly': True},
        'latest_operation_result': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'size_configuration': {'key': 'properties.sizeConfiguration', 'type': 'SizeConfigurationProperties'},
        'enabled_region_selection': {'key': 'properties.enabledRegionSelection', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
        'latest_operation_result': {'key': 'properties.latestOperationResult', 'type': 'LatestOperationResult'},
    }

    def __init__(self, *, location: str=None, tags=None, enabled_region_selection: bool=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(LabAccount, self).__init__(location=location, tags=tags, **kwargs)
        self.size_configuration = None
        self.enabled_region_selection = enabled_region_selection
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier
        self.latest_operation_result = None


class LabAccountFragment(Resource):
    """Represents a lab account.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :param enabled_region_selection: Represents if region selection is enabled
    :type enabled_region_selection: bool
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'enabled_region_selection': {'key': 'properties.enabledRegionSelection', 'type': 'bool'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
    }

    def __init__(self, *, location: str=None, tags=None, enabled_region_selection: bool=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(LabAccountFragment, self).__init__(location=location, tags=tags, **kwargs)
        self.enabled_region_selection = enabled_region_selection
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier


class LabCreationParameters(Model):
    """Settings related to creating a lab.

    :param max_users_in_lab: Maximum number of users allowed in the lab.
    :type max_users_in_lab: int
    """

    _attribute_map = {
        'max_users_in_lab': {'key': 'maxUsersInLab', 'type': 'int'},
    }

    def __init__(self, *, max_users_in_lab: int=None, **kwargs) -> None:
        super(LabCreationParameters, self).__init__(**kwargs)
        self.max_users_in_lab = max_users_in_lab


class LabDetails(Model):
    """This represents the details about a lab that the User is in, and its state.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param name: Name of the lab
    :type name: str
    :param provisioning_state: The provisioning state of the lab.
    :type provisioning_state: str
    :param id: The Id of the lab.
    :type id: str
    :ivar usage_quota: The maximum duration a user can use a VM in this lab.
    :vartype usage_quota: timedelta
    """

    _validation = {
        'usage_quota': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'usage_quota': {'key': 'usageQuota', 'type': 'duration'},
    }

    def __init__(self, *, name: str=None, provisioning_state: str=None, id: str=None, **kwargs) -> None:
        super(LabDetails, self).__init__(**kwargs)
        self.name = name
        self.provisioning_state = provisioning_state
        self.id = id
        self.usage_quota = None


class LabFragment(Resource):
    """Represents a lab.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :param max_users_in_lab: Maximum number of users allowed in the lab.
    :type max_users_in_lab: int
    :param usage_quota: Maximum duration a user can use an environment for in
     the lab.
    :type usage_quota: timedelta
    :param user_access_mode: Lab user access mode (open to all vs. restricted
     to those listed on the lab). Possible values include: 'Restricted', 'Open'
    :type user_access_mode: str or
     ~azure.mgmt.labservices.models.LabUserAccessMode
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'max_users_in_lab': {'key': 'properties.maxUsersInLab', 'type': 'int'},
        'usage_quota': {'key': 'properties.usageQuota', 'type': 'duration'},
        'user_access_mode': {'key': 'properties.userAccessMode', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
    }

    def __init__(self, *, location: str=None, tags=None, max_users_in_lab: int=None, usage_quota=None, user_access_mode=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(LabFragment, self).__init__(location=location, tags=tags, **kwargs)
        self.max_users_in_lab = max_users_in_lab
        self.usage_quota = usage_quota
        self.user_access_mode = user_access_mode
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier


class LatestOperationResult(Model):
    """Details of the status of an operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar status: The current status of the operation.
    :vartype status: str
    :ivar error_code: Error code on failure.
    :vartype error_code: str
    :ivar error_message: The error message.
    :vartype error_message: str
    :ivar request_uri: Request URI of the operation.
    :vartype request_uri: str
    :ivar http_method: The HttpMethod - PUT/POST/DELETE for the operation.
    :vartype http_method: str
    :ivar operation_url: The URL to use to check long-running operation status
    :vartype operation_url: str
    """

    _validation = {
        'status': {'readonly': True},
        'error_code': {'readonly': True},
        'error_message': {'readonly': True},
        'request_uri': {'readonly': True},
        'http_method': {'readonly': True},
        'operation_url': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'request_uri': {'key': 'requestUri', 'type': 'str'},
        'http_method': {'key': 'httpMethod', 'type': 'str'},
        'operation_url': {'key': 'operationUrl', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(LatestOperationResult, self).__init__(**kwargs)
        self.status = None
        self.error_code = None
        self.error_message = None
        self.request_uri = None
        self.http_method = None
        self.operation_url = None


class ListEnvironmentsPayload(Model):
    """Represents the payload to list environments owned by a user.

    :param lab_id: The resource Id of the lab
    :type lab_id: str
    """

    _attribute_map = {
        'lab_id': {'key': 'labId', 'type': 'str'},
    }

    def __init__(self, *, lab_id: str=None, **kwargs) -> None:
        super(ListEnvironmentsPayload, self).__init__(**kwargs)
        self.lab_id = lab_id


class ListEnvironmentsResponse(Model):
    """Represents the list of environments owned by a user.

    :param environments: List of all the environments
    :type environments:
     list[~azure.mgmt.labservices.models.EnvironmentDetails]
    """

    _attribute_map = {
        'environments': {'key': 'environments', 'type': '[EnvironmentDetails]'},
    }

    def __init__(self, *, environments=None, **kwargs) -> None:
        super(ListEnvironmentsResponse, self).__init__(**kwargs)
        self.environments = environments


class ListLabsResponse(Model):
    """Lists the labs owned by a user.

    :param labs: List of all the labs
    :type labs: list[~azure.mgmt.labservices.models.LabDetails]
    """

    _attribute_map = {
        'labs': {'key': 'labs', 'type': '[LabDetails]'},
    }

    def __init__(self, *, labs=None, **kwargs) -> None:
        super(ListLabsResponse, self).__init__(**kwargs)
        self.labs = labs


class NetworkInterface(Model):
    """Network details of the environment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar private_ip_address: PrivateIp address of the Compute VM
    :vartype private_ip_address: str
    :ivar ssh_authority: Connection information for Linux
    :vartype ssh_authority: str
    :ivar rdp_authority: Connection information for Windows
    :vartype rdp_authority: str
    :ivar username: Username of the VM
    :vartype username: str
    """

    _validation = {
        'private_ip_address': {'readonly': True},
        'ssh_authority': {'readonly': True},
        'rdp_authority': {'readonly': True},
        'username': {'readonly': True},
    }

    _attribute_map = {
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'ssh_authority': {'key': 'sshAuthority', 'type': 'str'},
        'rdp_authority': {'key': 'rdpAuthority', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(NetworkInterface, self).__init__(**kwargs)
        self.private_ip_address = None
        self.ssh_authority = None
        self.rdp_authority = None
        self.username = None


class OperationBatchStatusPayload(Model):
    """Payload to get the status of an operation.

    All required parameters must be populated in order to send to Azure.

    :param urls: Required. The operation url of long running operation
    :type urls: list[str]
    """

    _validation = {
        'urls': {'required': True},
    }

    _attribute_map = {
        'urls': {'key': 'urls', 'type': '[str]'},
    }

    def __init__(self, *, urls, **kwargs) -> None:
        super(OperationBatchStatusPayload, self).__init__(**kwargs)
        self.urls = urls


class OperationBatchStatusResponse(Model):
    """Status Details of the long running operation for an environment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar items: Gets a collection of items that contain the operation url and
     status.
    :vartype items:
     list[~azure.mgmt.labservices.models.OperationBatchStatusResponseItem]
    """

    _validation = {
        'items': {'readonly': True},
    }

    _attribute_map = {
        'items': {'key': 'items', 'type': '[OperationBatchStatusResponseItem]'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationBatchStatusResponse, self).__init__(**kwargs)
        self.items = None


class OperationBatchStatusResponseItem(Model):
    """Represents the status of an operation that used the batch API.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar operation_url: status of the long running operation for an
     environment
    :vartype operation_url: str
    :ivar status: status of the long running operation for an environment
    :vartype status: str
    """

    _validation = {
        'operation_url': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'operation_url': {'key': 'operationUrl', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationBatchStatusResponseItem, self).__init__(**kwargs)
        self.operation_url = None
        self.status = None


class OperationError(Model):
    """Error details for the operation in case of a failure.

    :param code: The error code of the operation error.
    :type code: str
    :param message: The error message of the operation error.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, *, code: str=None, message: str=None, **kwargs) -> None:
        super(OperationError, self).__init__(**kwargs)
        self.code = code
        self.message = message


class OperationMetadata(Model):
    """The REST API operation supported by ManagedLab ResourceProvider.

    :param name: Operation name: {provider}/{resource}/{operation}
    :type name: str
    :param display: The object that describes the operations
    :type display: ~azure.mgmt.labservices.models.OperationMetadataDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationMetadataDisplay'},
    }

    def __init__(self, *, name: str=None, display=None, **kwargs) -> None:
        super(OperationMetadata, self).__init__(**kwargs)
        self.name = name
        self.display = display


class OperationMetadataDisplay(Model):
    """The object that describes the operations.

    :param provider: Friendly name of the resource provider
    :type provider: str
    :param resource: Resource type on which the operation is performed.
    :type resource: str
    :param operation: Operation type: read, write, delete, listKeys/action,
     etc.
    :type operation: str
    :param description: Friendly name of the operation
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, resource: str=None, operation: str=None, description: str=None, **kwargs) -> None:
        super(OperationMetadataDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationResult(Model):
    """An Operation Result.

    :param status: The operation status.
    :type status: str
    :param error: Error details for the operation in case of a failure.
    :type error: ~azure.mgmt.labservices.models.OperationError
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'OperationError'},
    }

    def __init__(self, *, status: str=None, error=None, **kwargs) -> None:
        super(OperationResult, self).__init__(**kwargs)
        self.status = status
        self.error = error


class OperationStatusPayload(Model):
    """Payload to get the status of an operation.

    All required parameters must be populated in order to send to Azure.

    :param operation_url: Required. The operation url of long running
     operation
    :type operation_url: str
    """

    _validation = {
        'operation_url': {'required': True},
    }

    _attribute_map = {
        'operation_url': {'key': 'operationUrl', 'type': 'str'},
    }

    def __init__(self, *, operation_url: str, **kwargs) -> None:
        super(OperationStatusPayload, self).__init__(**kwargs)
        self.operation_url = operation_url


class OperationStatusResponse(Model):
    """Status Details of the long running operation for an environment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar status: status of the long running operation for an environment
    :vartype status: str
    """

    _validation = {
        'status': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationStatusResponse, self).__init__(**kwargs)
        self.status = None


class PersonalPreferencesOperationsPayload(Model):
    """Represents payload for any Environment operations like get, start, stop,
    connect.

    :param lab_account_resource_id: Resource Id of the lab account
    :type lab_account_resource_id: str
    :param add_remove: Enum indicating if user is adding or removing a
     favorite lab. Possible values include: 'Add', 'Remove'
    :type add_remove: str or ~azure.mgmt.labservices.models.AddRemove
    :param lab_resource_id: Resource Id of the lab to add/remove from the
     favorites list
    :type lab_resource_id: str
    """

    _attribute_map = {
        'lab_account_resource_id': {'key': 'labAccountResourceId', 'type': 'str'},
        'add_remove': {'key': 'addRemove', 'type': 'str'},
        'lab_resource_id': {'key': 'labResourceId', 'type': 'str'},
    }

    def __init__(self, *, lab_account_resource_id: str=None, add_remove=None, lab_resource_id: str=None, **kwargs) -> None:
        super(PersonalPreferencesOperationsPayload, self).__init__(**kwargs)
        self.lab_account_resource_id = lab_account_resource_id
        self.add_remove = add_remove
        self.lab_resource_id = lab_resource_id


class PublishPayload(Model):
    """Payload for Publish operation on EnvironmentSetting.

    :param use_existing_image: Whether to use existing VM custom image when
     publishing.
    :type use_existing_image: bool
    """

    _attribute_map = {
        'use_existing_image': {'key': 'useExistingImage', 'type': 'bool'},
    }

    def __init__(self, *, use_existing_image: bool=None, **kwargs) -> None:
        super(PublishPayload, self).__init__(**kwargs)
        self.use_existing_image = use_existing_image


class ReferenceVm(Model):
    """Details of a Reference Vm.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param user_name: Required. The username of the virtual machine
    :type user_name: str
    :param password: The password of the virtual machine. This will be set to
     null in GET resource API
    :type password: str
    :ivar vm_state_details: The state details for the reference virtual
     machine.
    :vartype vm_state_details: ~azure.mgmt.labservices.models.VmStateDetails
    :ivar vm_resource_id: VM resource Id for the environment
    :vartype vm_resource_id: str
    """

    _validation = {
        'user_name': {'required': True},
        'vm_state_details': {'readonly': True},
        'vm_resource_id': {'readonly': True},
    }

    _attribute_map = {
        'user_name': {'key': 'userName', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'vm_state_details': {'key': 'vmStateDetails', 'type': 'VmStateDetails'},
        'vm_resource_id': {'key': 'vmResourceId', 'type': 'str'},
    }

    def __init__(self, *, user_name: str, password: str=None, **kwargs) -> None:
        super(ReferenceVm, self).__init__(**kwargs)
        self.user_name = user_name
        self.password = password
        self.vm_state_details = None
        self.vm_resource_id = None


class ReferenceVmCreationParameters(Model):
    """Creation parameters for Reference Vm.

    All required parameters must be populated in order to send to Azure.

    :param user_name: Required. The username of the virtual machine
    :type user_name: str
    :param password: Required. The password of the virtual machine.
    :type password: str
    """

    _validation = {
        'user_name': {'required': True},
        'password': {'required': True},
    }

    _attribute_map = {
        'user_name': {'key': 'userName', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(self, *, user_name: str, password: str, **kwargs) -> None:
        super(ReferenceVmCreationParameters, self).__init__(**kwargs)
        self.user_name = user_name
        self.password = password


class ReferenceVmFragment(Model):
    """Details of a Reference Vm.

    :param user_name: The username of the virtual machine
    :type user_name: str
    :param password: The password of the virtual machine. This will be set to
     null in GET resource API
    :type password: str
    """

    _attribute_map = {
        'user_name': {'key': 'userName', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(self, *, user_name: str=None, password: str=None, **kwargs) -> None:
        super(ReferenceVmFragment, self).__init__(**kwargs)
        self.user_name = user_name
        self.password = password


class RegionalAvailability(Model):
    """The availability information of sizes across regions.

    :param region: Corresponding region
    :type region: str
    :param size_availabilities: List of all the size information for the
     region
    :type size_availabilities:
     list[~azure.mgmt.labservices.models.SizeAvailability]
    """

    _attribute_map = {
        'region': {'key': 'region', 'type': 'str'},
        'size_availabilities': {'key': 'sizeAvailabilities', 'type': '[SizeAvailability]'},
    }

    def __init__(self, *, region: str=None, size_availabilities=None, **kwargs) -> None:
        super(RegionalAvailability, self).__init__(**kwargs)
        self.region = region
        self.size_availabilities = size_availabilities


class RegisterPayload(Model):
    """Represents payload for Register action.

    :param registration_code: The registration code of the lab.
    :type registration_code: str
    """

    _attribute_map = {
        'registration_code': {'key': 'registrationCode', 'type': 'str'},
    }

    def __init__(self, *, registration_code: str=None, **kwargs) -> None:
        super(RegisterPayload, self).__init__(**kwargs)
        self.registration_code = registration_code


class ResetPasswordPayload(Model):
    """Represents the payload for resetting passwords.

    All required parameters must be populated in order to send to Azure.

    :param environment_id: Required. The resourceId of the environment
    :type environment_id: str
    :param username: The username for which the password will be reset.
    :type username: str
    :param password: The password to assign to the user specified in
    :type password: str
    """

    _validation = {
        'environment_id': {'required': True},
    }

    _attribute_map = {
        'environment_id': {'key': 'environmentId', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(self, *, environment_id: str, username: str=None, password: str=None, **kwargs) -> None:
        super(ResetPasswordPayload, self).__init__(**kwargs)
        self.environment_id = environment_id
        self.username = username
        self.password = password


class ResourceSet(Model):
    """Represents a VM and the setting Id it was created for.

    :param vm_resource_id: VM resource Id for the environment
    :type vm_resource_id: str
    :param resource_setting_id: resourceSettingId for the environment
    :type resource_setting_id: str
    """

    _attribute_map = {
        'vm_resource_id': {'key': 'vmResourceId', 'type': 'str'},
        'resource_setting_id': {'key': 'resourceSettingId', 'type': 'str'},
    }

    def __init__(self, *, vm_resource_id: str=None, resource_setting_id: str=None, **kwargs) -> None:
        super(ResourceSet, self).__init__(**kwargs)
        self.vm_resource_id = vm_resource_id
        self.resource_setting_id = resource_setting_id


class ResourceSetFragment(Model):
    """Represents a VM and the setting Id it was created for.

    :param vm_resource_id: VM resource Id for the environment
    :type vm_resource_id: str
    :param resource_setting_id: resourceSettingId for the environment
    :type resource_setting_id: str
    """

    _attribute_map = {
        'vm_resource_id': {'key': 'vmResourceId', 'type': 'str'},
        'resource_setting_id': {'key': 'resourceSettingId', 'type': 'str'},
    }

    def __init__(self, *, vm_resource_id: str=None, resource_setting_id: str=None, **kwargs) -> None:
        super(ResourceSetFragment, self).__init__(**kwargs)
        self.vm_resource_id = vm_resource_id
        self.resource_setting_id = resource_setting_id


class ResourceSettingCreationParameters(Model):
    """Represents resource specific settings.

    All required parameters must be populated in order to send to Azure.

    :param location: The location where the virtual machine will live
    :type location: str
    :param name: The name of the resource setting
    :type name: str
    :param gallery_image_resource_id: Required. The resource id of the gallery
     image used for creating the virtual machine
    :type gallery_image_resource_id: str
    :param size: The size of the virtual machine. Possible values include:
     'Basic', 'Standard', 'Performance'
    :type size: str or ~azure.mgmt.labservices.models.ManagedLabVmSize
    :param reference_vm_creation_parameters: Required. Creation parameters for
     Reference Vm
    :type reference_vm_creation_parameters:
     ~azure.mgmt.labservices.models.ReferenceVmCreationParameters
    """

    _validation = {
        'gallery_image_resource_id': {'required': True},
        'reference_vm_creation_parameters': {'required': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'gallery_image_resource_id': {'key': 'galleryImageResourceId', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'reference_vm_creation_parameters': {'key': 'referenceVmCreationParameters', 'type': 'ReferenceVmCreationParameters'},
    }

    def __init__(self, *, gallery_image_resource_id: str, reference_vm_creation_parameters, location: str=None, name: str=None, size=None, **kwargs) -> None:
        super(ResourceSettingCreationParameters, self).__init__(**kwargs)
        self.location = location
        self.name = name
        self.gallery_image_resource_id = gallery_image_resource_id
        self.size = size
        self.reference_vm_creation_parameters = reference_vm_creation_parameters


class ResourceSettings(Model):
    """Represents resource specific settings.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The unique id of the resource setting
    :vartype id: str
    :param gallery_image_resource_id: The resource id of the gallery image
     used for creating the virtual machine
    :type gallery_image_resource_id: str
    :ivar image_name: The name of the image used to created the environment
     setting
    :vartype image_name: str
    :param size: The size of the virtual machine. Possible values include:
     'Basic', 'Standard', 'Performance'
    :type size: str or ~azure.mgmt.labservices.models.ManagedLabVmSize
    :ivar cores: The translated compute cores of the virtual machine
    :vartype cores: int
    :param reference_vm: Required. Details specific to Reference Vm
    :type reference_vm: ~azure.mgmt.labservices.models.ReferenceVm
    """

    _validation = {
        'id': {'readonly': True},
        'image_name': {'readonly': True},
        'cores': {'readonly': True},
        'reference_vm': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'gallery_image_resource_id': {'key': 'galleryImageResourceId', 'type': 'str'},
        'image_name': {'key': 'imageName', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'cores': {'key': 'cores', 'type': 'int'},
        'reference_vm': {'key': 'referenceVm', 'type': 'ReferenceVm'},
    }

    def __init__(self, *, reference_vm, gallery_image_resource_id: str=None, size=None, **kwargs) -> None:
        super(ResourceSettings, self).__init__(**kwargs)
        self.id = None
        self.gallery_image_resource_id = gallery_image_resource_id
        self.image_name = None
        self.size = size
        self.cores = None
        self.reference_vm = reference_vm


class ResourceSettingsFragment(Model):
    """Represents resource specific settings.

    :param gallery_image_resource_id: The resource id of the gallery image
     used for creating the virtual machine
    :type gallery_image_resource_id: str
    :param size: The size of the virtual machine. Possible values include:
     'Basic', 'Standard', 'Performance'
    :type size: str or ~azure.mgmt.labservices.models.ManagedLabVmSize
    :param reference_vm: Details specific to Reference Vm
    :type reference_vm: ~azure.mgmt.labservices.models.ReferenceVmFragment
    """

    _attribute_map = {
        'gallery_image_resource_id': {'key': 'galleryImageResourceId', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'reference_vm': {'key': 'referenceVm', 'type': 'ReferenceVmFragment'},
    }

    def __init__(self, *, gallery_image_resource_id: str=None, size=None, reference_vm=None, **kwargs) -> None:
        super(ResourceSettingsFragment, self).__init__(**kwargs)
        self.gallery_image_resource_id = gallery_image_resource_id
        self.size = size
        self.reference_vm = reference_vm


class SizeAvailability(Model):
    """Represents the size information.

    :param size_category: The category of the size (Basic, Standard,
     Performance). Possible values include: 'Basic', 'Standard', 'Performance'
    :type size_category: str or
     ~azure.mgmt.labservices.models.ManagedLabVmSize
    :param is_available: Whether or not this size category is available
    :type is_available: bool
    """

    _attribute_map = {
        'size_category': {'key': 'sizeCategory', 'type': 'str'},
        'is_available': {'key': 'isAvailable', 'type': 'bool'},
    }

    def __init__(self, *, size_category=None, is_available: bool=None, **kwargs) -> None:
        super(SizeAvailability, self).__init__(**kwargs)
        self.size_category = size_category
        self.is_available = is_available


class SizeConfigurationProperties(Model):
    """Represents the size configuration under the lab account.

    :param environment_sizes: Represents a list of size categories supported
     by this Lab Account (Small, Medium, Large)
    :type environment_sizes:
     list[~azure.mgmt.labservices.models.EnvironmentSize]
    """

    _attribute_map = {
        'environment_sizes': {'key': 'environmentSizes', 'type': '[EnvironmentSize]'},
    }

    def __init__(self, *, environment_sizes=None, **kwargs) -> None:
        super(SizeConfigurationProperties, self).__init__(**kwargs)
        self.environment_sizes = environment_sizes


class SizeConfigurationPropertiesFragment(Model):
    """Represents the size configuration under the lab account.

    :param environment_sizes: Represents a list of size categories supported
     by this Lab Account (Small, Medium, Large)
    :type environment_sizes:
     list[~azure.mgmt.labservices.models.EnvironmentSizeFragment]
    """

    _attribute_map = {
        'environment_sizes': {'key': 'environmentSizes', 'type': '[EnvironmentSizeFragment]'},
    }

    def __init__(self, *, environment_sizes=None, **kwargs) -> None:
        super(SizeConfigurationPropertiesFragment, self).__init__(**kwargs)
        self.environment_sizes = environment_sizes


class SizeInfo(Model):
    """Contains detailed information about a size.

    :param compute_size: Represents the actual compute size, e.g.
     Standard_A2_v2.
    :type compute_size: str
    :param price: The pay-as-you-go price per hour this size will cost. It
     does not include discounts and may not reflect the actual price the size
     will cost.
    :type price: decimal.Decimal
    :param number_of_cores: The number of cores a VM of this size has.
    :type number_of_cores: int
    :param memory: The amount of memory available (in GB).
    :type memory: float
    """

    _attribute_map = {
        'compute_size': {'key': 'computeSize', 'type': 'str'},
        'price': {'key': 'price', 'type': 'decimal'},
        'number_of_cores': {'key': 'numberOfCores', 'type': 'int'},
        'memory': {'key': 'memory', 'type': 'float'},
    }

    def __init__(self, *, compute_size: str=None, price=None, number_of_cores: int=None, memory: float=None, **kwargs) -> None:
        super(SizeInfo, self).__init__(**kwargs)
        self.compute_size = compute_size
        self.price = price
        self.number_of_cores = number_of_cores
        self.memory = memory


class SizeInfoFragment(Model):
    """Contains detailed information about a size.

    :param compute_size: Represents the actual compute size, e.g.
     Standard_A2_v2.
    :type compute_size: str
    :param price: The pay-as-you-go price per hour this size will cost. It
     does not include discounts and may not reflect the actual price the size
     will cost.
    :type price: decimal.Decimal
    :param number_of_cores: The number of cores a VM of this size has.
    :type number_of_cores: int
    :param memory: The amount of memory available (in GB).
    :type memory: float
    """

    _attribute_map = {
        'compute_size': {'key': 'computeSize', 'type': 'str'},
        'price': {'key': 'price', 'type': 'decimal'},
        'number_of_cores': {'key': 'numberOfCores', 'type': 'int'},
        'memory': {'key': 'memory', 'type': 'float'},
    }

    def __init__(self, *, compute_size: str=None, price=None, number_of_cores: int=None, memory: float=None, **kwargs) -> None:
        super(SizeInfoFragment, self).__init__(**kwargs)
        self.compute_size = compute_size
        self.price = price
        self.number_of_cores = number_of_cores
        self.memory = memory


class User(Resource):
    """The User registered to a lab.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :ivar email: The user email address, as it was specified during
     registration.
    :vartype email: str
    :ivar family_name: The user family name, as it was specified during
     registration.
    :vartype family_name: str
    :ivar given_name: The user given name, as it was specified during
     registration.
    :vartype given_name: str
    :ivar tenant_id: The user tenant ID, as it was specified during
     registration.
    :vartype tenant_id: str
    :ivar total_usage: How long the user has used his VMs in this lab
    :vartype total_usage: timedelta
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    :ivar latest_operation_result: The details of the latest operation. ex:
     status, error
    :vartype latest_operation_result:
     ~azure.mgmt.labservices.models.LatestOperationResult
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'email': {'readonly': True},
        'family_name': {'readonly': True},
        'given_name': {'readonly': True},
        'tenant_id': {'readonly': True},
        'total_usage': {'readonly': True},
        'latest_operation_result': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'email': {'key': 'properties.email', 'type': 'str'},
        'family_name': {'key': 'properties.familyName', 'type': 'str'},
        'given_name': {'key': 'properties.givenName', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'total_usage': {'key': 'properties.totalUsage', 'type': 'duration'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
        'latest_operation_result': {'key': 'properties.latestOperationResult', 'type': 'LatestOperationResult'},
    }

    def __init__(self, *, location: str=None, tags=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(User, self).__init__(location=location, tags=tags, **kwargs)
        self.email = None
        self.family_name = None
        self.given_name = None
        self.tenant_id = None
        self.total_usage = None
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier
        self.latest_operation_result = None


class UserFragment(Resource):
    """The User registered to a lab.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The location of the resource.
    :type location: str
    :param tags: The tags of the resource.
    :type tags: dict[str, str]
    :param provisioning_state: The provisioning status of the resource.
    :type provisioning_state: str
    :param unique_identifier: The unique immutable identifier of a resource
     (Guid).
    :type unique_identifier: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'unique_identifier': {'key': 'properties.uniqueIdentifier', 'type': 'str'},
    }

    def __init__(self, *, location: str=None, tags=None, provisioning_state: str=None, unique_identifier: str=None, **kwargs) -> None:
        super(UserFragment, self).__init__(location=location, tags=tags, **kwargs)
        self.provisioning_state = provisioning_state
        self.unique_identifier = unique_identifier


class VirtualMachineDetails(Model):
    """Details of the backing virtual machine.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: Provisioning state of the Dtl VM
    :vartype provisioning_state: str
    :ivar rdp_authority: Connection information for Windows
    :vartype rdp_authority: str
    :ivar ssh_authority: Connection information for Linux
    :vartype ssh_authority: str
    :ivar private_ip_address: PrivateIp address of the compute VM
    :vartype private_ip_address: str
    :ivar user_name: Compute VM login user name
    :vartype user_name: str
    :ivar last_known_power_state: Last known compute power state captured in
     DTL
    :vartype last_known_power_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'rdp_authority': {'readonly': True},
        'ssh_authority': {'readonly': True},
        'private_ip_address': {'readonly': True},
        'user_name': {'readonly': True},
        'last_known_power_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'rdp_authority': {'key': 'rdpAuthority', 'type': 'str'},
        'ssh_authority': {'key': 'sshAuthority', 'type': 'str'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'last_known_power_state': {'key': 'lastKnownPowerState', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(VirtualMachineDetails, self).__init__(**kwargs)
        self.provisioning_state = None
        self.rdp_authority = None
        self.ssh_authority = None
        self.private_ip_address = None
        self.user_name = None
        self.last_known_power_state = None


class VmStateDetails(Model):
    """Details about the state of the reference virtual machine.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar rdp_authority: The RdpAuthority property is a server DNS host name
     or IP address followed by the service port number for RDP (Remote Desktop
     Protocol).
    :vartype rdp_authority: str
    :ivar ssh_authority: The SshAuthority property is a server DNS host name
     or IP address followed by the service port number for SSH.
    :vartype ssh_authority: str
    :ivar power_state: The power state of the reference virtual machine.
    :vartype power_state: str
    :ivar last_known_power_state: Last known compute power state captured in
     DTL
    :vartype last_known_power_state: str
    """

    _validation = {
        'rdp_authority': {'readonly': True},
        'ssh_authority': {'readonly': True},
        'power_state': {'readonly': True},
        'last_known_power_state': {'readonly': True},
    }

    _attribute_map = {
        'rdp_authority': {'key': 'rdpAuthority', 'type': 'str'},
        'ssh_authority': {'key': 'sshAuthority', 'type': 'str'},
        'power_state': {'key': 'powerState', 'type': 'str'},
        'last_known_power_state': {'key': 'lastKnownPowerState', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(VmStateDetails, self).__init__(**kwargs)
        self.rdp_authority = None
        self.ssh_authority = None
        self.power_state = None
        self.last_known_power_state = None
