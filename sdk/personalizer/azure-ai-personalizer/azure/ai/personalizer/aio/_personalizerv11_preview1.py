# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.1.3, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any

from azure.core import AsyncPipelineClient
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from msrest import Deserializer, Serializer

from ._configuration import PersonalizerV1Preview1Configuration
from .operations import ServiceConfigurationOperations
from .operations import PolicyOperations
from .operations import EvaluationOperations
from .operations import EvaluationsOperations
from .operations import EventsOperations
from .operations import LogOperations
from .operations import ModelOperations
from .operations import MultiSlotEventsOperations
from .operations import MultiSlotOperations
from .operations import PersonalizerV1Preview1OperationsMixin
from .. import models


class PersonalizerV1Preview1(PersonalizerV1Preview1OperationsMixin):
    """Personalizer Service is an Azure Cognitive Service that makes it easy to target content and experiences without complex pre-analysis or cleanup of past data. Given a context and featurized content, the Personalizer Service returns which content item to show to users in rewardActionId. As rewards are sent in response to the use of rewardActionId, the reinforcement learning algorithm will improve the model and improve performance of future rank calls.

    :ivar service_configuration: ServiceConfigurationOperations operations
    :vartype service_configuration: personalizerv11_preview1.aio.operations.ServiceConfigurationOperations
    :ivar policy: PolicyOperations operations
    :vartype policy: personalizerv11_preview1.aio.operations.PolicyOperations
    :ivar evaluation: EvaluationOperations operations
    :vartype evaluation: personalizerv11_preview1.aio.operations.EvaluationOperations
    :ivar evaluations: EvaluationsOperations operations
    :vartype evaluations: personalizerv11_preview1.aio.operations.EvaluationsOperations
    :ivar events: EventsOperations operations
    :vartype events: personalizerv11_preview1.aio.operations.EventsOperations
    :ivar log: LogOperations operations
    :vartype log: personalizerv11_preview1.aio.operations.LogOperations
    :ivar model: ModelOperations operations
    :vartype model: personalizerv11_preview1.aio.operations.ModelOperations
    :ivar multi_slot_events: MultiSlotEventsOperations operations
    :vartype multi_slot_events: personalizerv11_preview1.aio.operations.MultiSlotEventsOperations
    :ivar multi_slot: MultiSlotOperations operations
    :vartype multi_slot: personalizerv11_preview1.aio.operations.MultiSlotOperations
    :param endpoint: Supported Cognitive Services endpoint.
    :type endpoint: str
    """

    def __init__(
        self,
        endpoint: str,
        **kwargs: Any
    ) -> None:
        base_url = '{Endpoint}/personalizer/v1.1-preview.1'
        self._config = PersonalizerV1Preview1Configuration(endpoint, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.service_configuration = ServiceConfigurationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.policy = PolicyOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.evaluation = EvaluationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.evaluations = EvaluationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.events = EventsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.log = LogOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.model = ModelOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.multi_slot_events = MultiSlotEventsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.multi_slot = MultiSlotOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def _send_request(self, http_request: HttpRequest, **kwargs: Any) -> AsyncHttpResponse:
        """Runs the network request through the client's chained policies.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.pipeline.transport.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to True.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.pipeline.transport.AsyncHttpResponse
        """
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        http_request.url = self._client.format_url(http_request.url, **path_format_arguments)
        stream = kwargs.pop("stream", True)
        pipeline_response = await self._client._pipeline.run(http_request, stream=stream, **kwargs)
        return pipeline_response.http_response

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "PersonalizerV1Preview1":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
