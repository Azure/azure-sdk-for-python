# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.authorization.aio import AuthorizationManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAuthorizationManagementAccessReviewHistoryDefinitionOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AuthorizationManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_review_history_definition_create(self, resource_group):
        response = await self.client.access_review_history_definition.create(
            history_definition_id="str",
            properties={
                "createdDateTime": "2020-02-20 00:00:00",
                "decisions": ["str"],
                "displayName": "str",
                "endDate": "2020-02-20 00:00:00",
                "instances": [
                    {
                        "displayName": "str",
                        "downloadUri": "str",
                        "expiration": "2020-02-20 00:00:00",
                        "fulfilledDateTime": "2020-02-20 00:00:00",
                        "id": "str",
                        "name": "str",
                        "reviewHistoryPeriodEndDateTime": "2020-02-20 00:00:00",
                        "reviewHistoryPeriodStartDateTime": "2020-02-20 00:00:00",
                        "runDateTime": "2020-02-20 00:00:00",
                        "status": "str",
                        "type": "str",
                    }
                ],
                "interval": 0,
                "numberOfOccurrences": 0,
                "principalId": "str",
                "principalName": "str",
                "principalType": "str",
                "reviewHistoryPeriodEndDateTime": "2020-02-20 00:00:00",
                "reviewHistoryPeriodStartDateTime": "2020-02-20 00:00:00",
                "scopes": [
                    {
                        "assignmentState": "str",
                        "excludeResourceId": "str",
                        "excludeRoleDefinitionId": "str",
                        "expandNestedMemberships": bool,
                        "inactiveDuration": "1 day, 0:00:00",
                        "includeAccessBelowResource": bool,
                        "includeInheritedAccess": bool,
                        "principalType": "str",
                        "resourceId": "str",
                        "roleDefinitionId": "str",
                    }
                ],
                "startDate": "2020-02-20 00:00:00",
                "status": "str",
                "type": "str",
                "userPrincipalName": "str",
            },
            api_version="2021-12-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_review_history_definition_delete_by_id(self, resource_group):
        response = await self.client.access_review_history_definition.delete_by_id(
            history_definition_id="str",
            api_version="2021-12-01-preview",
        )

        # please add some check logic here by yourself
        # ...
