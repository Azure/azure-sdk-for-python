# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.authorization.aio import AuthorizationManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAuthorizationManagementScopeAccessReviewInstancesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AuthorizationManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_scope_access_review_instances_list(self, resource_group):
        response = self.client.scope_access_review_instances.list(
            scope="str",
            schedule_definition_id="str",
            api_version="2021-12-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_scope_access_review_instances_get_by_id(self, resource_group):
        response = await self.client.scope_access_review_instances.get_by_id(
            scope="str",
            schedule_definition_id="str",
            id="str",
            api_version="2021-12-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_scope_access_review_instances_create(self, resource_group):
        response = await self.client.scope_access_review_instances.create(
            scope="str",
            schedule_definition_id="str",
            id="str",
            properties={
                "backupReviewers": [{"principalId": "str", "principalType": "str"}],
                "endDateTime": "2020-02-20 00:00:00",
                "reviewers": [{"principalId": "str", "principalType": "str"}],
                "reviewersType": "str",
                "startDateTime": "2020-02-20 00:00:00",
                "status": "str",
            },
            api_version="2021-12-01-preview",
        )

        # please add some check logic here by yourself
        # ...
