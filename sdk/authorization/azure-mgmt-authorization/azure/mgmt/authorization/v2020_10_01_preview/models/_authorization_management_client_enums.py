# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class PrincipalType(str, Enum):

    user = "User"
    group = "Group"
    service_principal = "ServicePrincipal"
    unknown = "Unknown"
    directory_role_template = "DirectoryRoleTemplate"
    foreign_group = "ForeignGroup"
    application = "Application"
    msi = "MSI"
    directory_object_or_group = "DirectoryObjectOrGroup"
    everyone = "Everyone"
    device = "Device"


class AssignmentType(str, Enum):

    activated = "Activated"
    assigned = "Assigned"


class MemberType(str, Enum):

    inherited = "Inherited"
    direct = "Direct"
    group = "Group"


class Status(str, Enum):

    accepted = "Accepted"
    pending_evaluation = "PendingEvaluation"
    granted = "Granted"
    denied = "Denied"
    pending_provisioning = "PendingProvisioning"
    provisioned = "Provisioned"
    pending_revocation = "PendingRevocation"
    revoked = "Revoked"
    canceled = "Canceled"
    failed = "Failed"
    pending_approval_provisioning = "PendingApprovalProvisioning"
    pending_approval = "PendingApproval"
    failed_as_resource_is_locked = "FailedAsResourceIsLocked"
    pending_admin_decision = "PendingAdminDecision"
    admin_approved = "AdminApproved"
    admin_denied = "AdminDenied"
    timed_out = "TimedOut"
    provisioning_started = "ProvisioningStarted"
    invalid = "Invalid"
    pending_schedule_creation = "PendingScheduleCreation"
    schedule_created = "ScheduleCreated"
    pending_external_provisioning = "PendingExternalProvisioning"


class RequestType(str, Enum):

    admin_assign = "AdminAssign"
    admin_remove = "AdminRemove"
    admin_update = "AdminUpdate"
    admin_extend = "AdminExtend"
    admin_renew = "AdminRenew"
    self_activate = "SelfActivate"
    self_deactivate = "SelfDeactivate"
    self_extend = "SelfExtend"
    self_renew = "SelfRenew"


class Type(str, Enum):

    after_duration = "AfterDuration"
    after_date_time = "AfterDateTime"
    no_expiration = "NoExpiration"


class ApprovalMode(str, Enum):

    single_stage = "SingleStage"
    serial = "Serial"
    parallel = "Parallel"
    no_approval = "NoApproval"


class UserType(str, Enum):

    user = "User"
    group = "Group"


class EnablementRules(str, Enum):

    multi_factor_authentication = "MultiFactorAuthentication"
    justification = "Justification"
    ticketing = "Ticketing"


class NotificationDeliveryMechanism(str, Enum):

    email = "Email"


class NotificationLevel(str, Enum):

    none = "None"
    critical = "Critical"
    all = "All"


class RecipientType(str, Enum):

    requestor = "Requestor"
    approver = "Approver"
    admin = "Admin"


class RoleManagementPolicyRuleType(str, Enum):

    role_management_policy_approval_rule = "RoleManagementPolicyApprovalRule"
    role_management_policy_authentication_context_rule = "RoleManagementPolicyAuthenticationContextRule"
    role_management_policy_enablement_rule = "RoleManagementPolicyEnablementRule"
    role_management_policy_expiration_rule = "RoleManagementPolicyExpirationRule"
    role_management_policy_notification_rule = "RoleManagementPolicyNotificationRule"
