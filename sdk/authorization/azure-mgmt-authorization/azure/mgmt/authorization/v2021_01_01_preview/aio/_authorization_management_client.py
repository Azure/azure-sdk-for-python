# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import AuthorizationManagementClientConfiguration
from .operations import Operations
from .operations import RoleAssignmentApprovalOperations
from .operations import RoleAssignmentApprovalStepsOperations
from .operations import RoleAssignmentApprovalStepOperations
from .operations import ScopeRoleAssignmentApprovalOperations
from .operations import ScopeRoleAssignmentApprovalStepsOperations
from .operations import ScopeRoleAssignmentApprovalStepOperations
from .. import models


class AuthorizationManagementClient(object):
    """Request Approvals service provides the workflow for running request approvals on different kind of resources.

    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.authorization.v2021_01_01_preview.aio.operations.Operations
    :ivar role_assignment_approval: RoleAssignmentApprovalOperations operations
    :vartype role_assignment_approval: azure.mgmt.authorization.v2021_01_01_preview.aio.operations.RoleAssignmentApprovalOperations
    :ivar role_assignment_approval_steps: RoleAssignmentApprovalStepsOperations operations
    :vartype role_assignment_approval_steps: azure.mgmt.authorization.v2021_01_01_preview.aio.operations.RoleAssignmentApprovalStepsOperations
    :ivar role_assignment_approval_step: RoleAssignmentApprovalStepOperations operations
    :vartype role_assignment_approval_step: azure.mgmt.authorization.v2021_01_01_preview.aio.operations.RoleAssignmentApprovalStepOperations
    :ivar scope_role_assignment_approval: ScopeRoleAssignmentApprovalOperations operations
    :vartype scope_role_assignment_approval: azure.mgmt.authorization.v2021_01_01_preview.aio.operations.ScopeRoleAssignmentApprovalOperations
    :ivar scope_role_assignment_approval_steps: ScopeRoleAssignmentApprovalStepsOperations operations
    :vartype scope_role_assignment_approval_steps: azure.mgmt.authorization.v2021_01_01_preview.aio.operations.ScopeRoleAssignmentApprovalStepsOperations
    :ivar scope_role_assignment_approval_step: ScopeRoleAssignmentApprovalStepOperations operations
    :vartype scope_role_assignment_approval_step: azure.mgmt.authorization.v2021_01_01_preview.aio.operations.ScopeRoleAssignmentApprovalStepOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = AuthorizationManagementClientConfiguration(credential, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.operations = Operations(
            self._client, self._config, self._serialize, self._deserialize)
        self.role_assignment_approval = RoleAssignmentApprovalOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.role_assignment_approval_steps = RoleAssignmentApprovalStepsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.role_assignment_approval_step = RoleAssignmentApprovalStepOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.scope_role_assignment_approval = ScopeRoleAssignmentApprovalOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.scope_role_assignment_approval_steps = ScopeRoleAssignmentApprovalStepsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.scope_role_assignment_approval_step = ScopeRoleAssignmentApprovalStepOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def _send_request(self, http_request: HttpRequest, **kwargs: Any) -> AsyncHttpResponse:
        """Runs the network request through the client's chained policies.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.pipeline.transport.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to True.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.pipeline.transport.AsyncHttpResponse
        """
        http_request.url = self._client.format_url(http_request.url)
        stream = kwargs.pop("stream", True)
        pipeline_response = await self._client._pipeline.run(http_request, stream=stream, **kwargs)
        return pipeline_response.http_response

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "AuthorizationManagementClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
