# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.security.aio import SecurityCenter

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSecurityCenterStandardAssignmentsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SecurityCenter, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_standard_assignments_get(self, resource_group):
        response = await self.client.standard_assignments.get(
            resource_id="str",
            standard_assignment_name="str",
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_standard_assignments_create(self, resource_group):
        response = await self.client.standard_assignments.create(
            resource_id="str",
            standard_assignment_name="str",
            standard_assignment={
                "assignedStandard": {"id": "str"},
                "attestationData": {
                    "assignedAssessment": {"assessmentKey": "str"},
                    "complianceDate": "2020-02-20 00:00:00",
                    "complianceState": "str",
                    "evidence": [{"description": "str", "sourceUrl": "str"}],
                },
                "description": "str",
                "displayName": "str",
                "effect": "str",
                "excludedScopes": ["str"],
                "exemptionData": {"assignedAssessment": {"assessmentKey": "str"}, "exemptionCategory": "str"},
                "expiresOn": "2020-02-20 00:00:00",
                "id": "str",
                "metadata": {
                    "createdBy": "str",
                    "createdOn": "2020-02-20 00:00:00",
                    "lastUpdatedBy": "str",
                    "lastUpdatedOn": "2020-02-20 00:00:00",
                },
                "name": "str",
                "type": "str",
            },
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_standard_assignments_delete(self, resource_group):
        response = await self.client.standard_assignments.delete(
            resource_id="str",
            standard_assignment_name="str",
            api_version="2024-08-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_standard_assignments_list(self, resource_group):
        response = self.client.standard_assignments.list(
            scope="str",
            api_version="2024-08-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
