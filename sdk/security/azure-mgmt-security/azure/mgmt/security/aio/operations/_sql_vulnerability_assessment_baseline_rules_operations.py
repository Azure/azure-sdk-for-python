# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._sql_vulnerability_assessment_baseline_rules_operations import build_add_request, build_create_or_update_request, build_delete_request, build_get_request, build_list_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SqlVulnerabilityAssessmentBaselineRulesOperations:
    """SqlVulnerabilityAssessmentBaselineRulesOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.security.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def create_or_update(
        self,
        rule_id: str,
        workspace_id: str,
        resource_id: str,
        body: Optional["_models.RuleResultsInput"] = None,
        **kwargs: Any
    ) -> "_models.RuleResults":
        """Creates a Baseline for a rule in a database. Will overwrite any previously existing results.

        Creates a Baseline for a rule in a database. Will overwrite any previously existing results.

        :param rule_id: The rule Id.
        :type rule_id: str
        :param workspace_id: The workspace Id.
        :type workspace_id: str
        :param resource_id: The identifier of the resource.
        :type resource_id: str
        :param body: The baseline results for this rule.
        :type body: ~azure.mgmt.security.models.RuleResultsInput
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RuleResults, or the result of cls(response)
        :rtype: ~azure.mgmt.security.models.RuleResults
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RuleResults"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'RuleResultsInput')
        else:
            _json = None

        request = build_create_or_update_request(
            rule_id=rule_id,
            resource_id=resource_id,
            content_type=content_type,
            workspace_id=workspace_id,
            json=_json,
            template_url=self.create_or_update.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('RuleResults', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': '/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}'}  # type: ignore


    @distributed_trace_async
    async def get(
        self,
        rule_id: str,
        workspace_id: str,
        resource_id: str,
        **kwargs: Any
    ) -> "_models.RuleResults":
        """Gets the results for a given rule in the Baseline.

        Gets the results for a given rule in the Baseline.

        :param rule_id: The rule Id.
        :type rule_id: str
        :param workspace_id: The workspace Id.
        :type workspace_id: str
        :param resource_id: The identifier of the resource.
        :type resource_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RuleResults, or the result of cls(response)
        :rtype: ~azure.mgmt.security.models.RuleResults
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RuleResults"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_request(
            rule_id=rule_id,
            resource_id=resource_id,
            workspace_id=workspace_id,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('RuleResults', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}'}  # type: ignore


    @distributed_trace_async
    async def delete(
        self,
        rule_id: str,
        workspace_id: str,
        resource_id: str,
        **kwargs: Any
    ) -> None:
        """Deletes a rule from the Baseline of a given database.

        Deletes a rule from the Baseline of a given database.

        :param rule_id: The rule Id.
        :type rule_id: str
        :param workspace_id: The workspace Id.
        :type workspace_id: str
        :param resource_id: The identifier of the resource.
        :type resource_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_request(
            rule_id=rule_id,
            resource_id=resource_id,
            workspace_id=workspace_id,
            template_url=self.delete.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules/{ruleId}'}  # type: ignore


    @distributed_trace_async
    async def list(
        self,
        workspace_id: str,
        resource_id: str,
        **kwargs: Any
    ) -> "_models.RulesResults":
        """Gets the results for all rules in the Baseline.

        Gets the results for all rules in the Baseline.

        :param workspace_id: The workspace Id.
        :type workspace_id: str
        :param resource_id: The identifier of the resource.
        :type resource_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RulesResults, or the result of cls(response)
        :rtype: ~azure.mgmt.security.models.RulesResults
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RulesResults"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_request(
            resource_id=resource_id,
            workspace_id=workspace_id,
            template_url=self.list.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('RulesResults', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list.metadata = {'url': '/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules'}  # type: ignore


    @distributed_trace_async
    async def add(
        self,
        workspace_id: str,
        resource_id: str,
        body: Optional["_models.RulesResultsInput"] = None,
        **kwargs: Any
    ) -> "_models.RulesResults":
        """Add a list of baseline rules. Will overwrite any previously existing results (for all rules).

        Add a list of baseline rules. Will overwrite any previously existing results (for all rules).

        :param workspace_id: The workspace Id.
        :type workspace_id: str
        :param resource_id: The identifier of the resource.
        :type resource_id: str
        :param body: The baseline rules.
        :type body: ~azure.mgmt.security.models.RulesResultsInput
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RulesResults, or the result of cls(response)
        :rtype: ~azure.mgmt.security.models.RulesResults
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RulesResults"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'RulesResultsInput')
        else:
            _json = None

        request = build_add_request(
            resource_id=resource_id,
            content_type=content_type,
            workspace_id=workspace_id,
            json=_json,
            template_url=self.add.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('RulesResults', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    add.metadata = {'url': '/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/baselineRules'}  # type: ignore

