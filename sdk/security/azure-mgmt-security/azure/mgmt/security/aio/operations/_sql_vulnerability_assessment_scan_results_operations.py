# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._sql_vulnerability_assessment_scan_results_operations import build_get_request, build_list_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SqlVulnerabilityAssessmentScanResultsOperations:
    """SqlVulnerabilityAssessmentScanResultsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.security.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def get(
        self,
        scan_id: str,
        scan_result_id: str,
        workspace_id: str,
        resource_id: str,
        **kwargs: Any
    ) -> "_models.ScanResult":
        """Gets the scan results of a single rule in a scan record.

        Gets the scan results of a single rule in a scan record.

        :param scan_id: The scan Id. Type 'latest' to get the scan results for the latest scan.
        :type scan_id: str
        :param scan_result_id: The rule Id of the results.
        :type scan_result_id: str
        :param workspace_id: The workspace Id.
        :type workspace_id: str
        :param resource_id: The identifier of the resource.
        :type resource_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ScanResult, or the result of cls(response)
        :rtype: ~azure.mgmt.security.models.ScanResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ScanResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_request(
            scan_id=scan_id,
            scan_result_id=scan_result_id,
            resource_id=resource_id,
            workspace_id=workspace_id,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('ScanResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults/{scanResultId}'}  # type: ignore


    @distributed_trace_async
    async def list(
        self,
        scan_id: str,
        workspace_id: str,
        resource_id: str,
        **kwargs: Any
    ) -> "_models.ScanResults":
        """Gets a list of scan results for a single scan record.

        Gets a list of scan results for a single scan record.

        :param scan_id: The scan Id. Type 'latest' to get the scan results for the latest scan.
        :type scan_id: str
        :param workspace_id: The workspace Id.
        :type workspace_id: str
        :param resource_id: The identifier of the resource.
        :type resource_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ScanResults, or the result of cls(response)
        :rtype: ~azure.mgmt.security.models.ScanResults
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ScanResults"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_request(
            scan_id=scan_id,
            resource_id=resource_id,
            workspace_id=workspace_id,
            template_url=self.list.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('ScanResults', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list.metadata = {'url': '/{resourceId}/providers/Microsoft.Security/sqlVulnerabilityAssessments/default/scans/{scanId}/scanResults'}  # type: ignore

