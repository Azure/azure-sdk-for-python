# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class AadConnectivityStateEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The connectivity state of the external AAD solution
    """

    DISCOVERED = "Discovered"
    NOT_LICENSED = "NotLicensed"
    CONNECTED = "Connected"

class ActionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the action that will be triggered by the Automation
    """

    LOGIC_APP = "LogicApp"
    EVENT_HUB = "EventHub"
    WORKSPACE = "Workspace"

class AdaptiveApplicationControlIssue(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """An alert that machines within a group can have
    """

    VIOLATIONS_AUDITED = "ViolationsAudited"
    VIOLATIONS_BLOCKED = "ViolationsBlocked"
    MSI_AND_SCRIPT_VIOLATIONS_AUDITED = "MsiAndScriptViolationsAudited"
    MSI_AND_SCRIPT_VIOLATIONS_BLOCKED = "MsiAndScriptViolationsBlocked"
    EXECUTABLE_VIOLATIONS_AUDITED = "ExecutableViolationsAudited"
    RULES_VIOLATED_MANUALLY = "RulesViolatedManually"

class AdditionalWorkspaceDataType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Data types sent to workspace.
    """

    ALERTS = "Alerts"
    RAW_EVENTS = "RawEvents"

class AdditionalWorkspaceType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Workspace type.
    """

    SENTINEL = "Sentinel"

class AlertNotifications(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Whether to send security alerts notifications to the security contact
    """

    #: Get notifications on new alerts.
    ON = "On"
    #: Don't get notifications on new alerts.
    OFF = "Off"

class AlertSeverity(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The risk level of the threat that was detected. Learn more:
    https://docs.microsoft.com/en-us/azure/security-center/security-center-alerts-overview#how-are-alerts-classified.
    """

    #: Informational.
    INFORMATIONAL = "Informational"
    #: Low.
    LOW = "Low"
    #: Medium.
    MEDIUM = "Medium"
    #: High.
    HIGH = "High"

class AlertStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The life cycle status of the alert.
    """

    #: An alert which doesn't specify a value is assigned the status 'Active'.
    ACTIVE = "Active"
    #: Alert closed after handling.
    RESOLVED = "Resolved"
    #: Alert dismissed as false positive.
    DISMISSED = "Dismissed"

class AlertsToAdmins(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Whether to send security alerts notifications to subscription admins
    """

    #: Send notification on new alerts to the subscription's admins.
    ON = "On"
    #: Don't send notification on new alerts to the subscription's admins.
    OFF = "Off"

class AssessedResourceType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Sub-assessment resource type
    """

    SQL_SERVER_VULNERABILITY = "SqlServerVulnerability"
    CONTAINER_REGISTRY_VULNERABILITY = "ContainerRegistryVulnerability"
    SERVER_VULNERABILITY = "ServerVulnerability"

class AssessmentStatusCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Programmatic code for the status of the assessment
    """

    #: The resource is healthy.
    HEALTHY = "Healthy"
    #: The resource has a security issue that needs to be addressed.
    UNHEALTHY = "Unhealthy"
    #: Assessment for this resource did not happen.
    NOT_APPLICABLE = "NotApplicable"

class AssessmentType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """BuiltIn if the assessment based on built-in Azure Policy definition, Custom if the assessment
    based on custom Azure Policy definition
    """

    #: Microsoft Defender for Cloud managed assessments.
    BUILT_IN = "BuiltIn"
    #: User defined policies that are automatically ingested from Azure Policy to Microsoft Defender
    #: for Cloud.
    CUSTOM_POLICY = "CustomPolicy"
    #: User assessments pushed directly by the user or other third party to Microsoft Defender for
    #: Cloud.
    CUSTOMER_MANAGED = "CustomerManaged"
    #: An assessment that was created by a verified 3rd party if the user connected it to ASC.
    VERIFIED_PARTNER = "VerifiedPartner"

class AuthenticationProvisioningState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """State of the multi-cloud connector
    """

    #: Valid connector.
    VALID = "Valid"
    #: Invalid connector.
    INVALID = "Invalid"
    #: the connection has expired.
    EXPIRED = "Expired"
    #: Incorrect policy of the connector.
    INCORRECT_POLICY = "IncorrectPolicy"

class AuthenticationType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Connect to your cloud account, for AWS use either account credentials or role-based
    authentication. For GCP use account organization credentials.
    """

    #: AWS cloud account connector user credentials authentication.
    AWS_CREDS = "awsCreds"
    #: AWS account connector assume role authentication.
    AWS_ASSUME_ROLE = "awsAssumeRole"
    #: GCP account connector service to service authentication.
    GCP_CREDENTIALS = "gcpCredentials"

class AutoProvision(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Describes what kind of security agent provisioning action to take
    """

    #: Install missing security agent on VMs automatically.
    ON = "On"
    #: Do not install security agent on the VMs automatically.
    OFF = "Off"

class BundleType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Alert Simulator supported bundles.
    """

    APP_SERVICES = "AppServices"
    DNS = "DNS"
    KEY_VAULTS = "KeyVaults"
    KUBERNETES_SERVICE = "KubernetesService"
    RESOURCE_MANAGER = "ResourceManager"
    SQL_SERVERS = "SqlServers"
    STORAGE_ACCOUNTS = "StorageAccounts"
    VIRTUAL_MACHINES = "VirtualMachines"

class Categories(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The categories of resource that is at risk when the assessment is unhealthy
    """

    COMPUTE = "Compute"
    NETWORKING = "Networking"
    DATA = "Data"
    IDENTITY_AND_ACCESS = "IdentityAndAccess"
    IO_T = "IoT"

class CloudName(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The multi cloud resource's cloud name.
    """

    AZURE = "Azure"
    AWS = "AWS"
    GCP = "GCP"

class ConfigurationStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The configuration status of the machines group or machine or rule
    """

    CONFIGURED = "Configured"
    NOT_CONFIGURED = "NotConfigured"
    IN_PROGRESS = "InProgress"
    FAILED = "Failed"
    NO_STATUS = "NoStatus"

class ConnectionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    INTERNAL = "Internal"
    EXTERNAL = "External"

class ControlType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of security control (for example, BuiltIn)
    """

    #: Microsoft Defender for Cloud managed assessments.
    BUILT_IN = "BuiltIn"
    #: Non Microsoft Defender for Cloud managed assessments.
    CUSTOM = "Custom"

class CreatedByType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class DataSource(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Devices twin data.
    TWIN_DATA = "TwinData"

class Direction(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The rule's direction
    """

    INBOUND = "Inbound"
    OUTBOUND = "Outbound"

class EndOfSupportStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """End of support status.
    """

    NONE = "None"
    NO_LONGER_SUPPORTED = "noLongerSupported"
    VERSION_NO_LONGER_SUPPORTED = "versionNoLongerSupported"
    UPCOMING_NO_LONGER_SUPPORTED = "upcomingNoLongerSupported"
    UPCOMING_VERSION_NO_LONGER_SUPPORTED = "upcomingVersionNoLongerSupported"

class EnforcementMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The application control policy enforcement/protection mode of the machine group
    """

    AUDIT = "Audit"
    ENFORCE = "Enforce"
    NONE = "None"

class EnforcementSupport(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The machine supportability of Enforce feature
    """

    SUPPORTED = "Supported"
    NOT_SUPPORTED = "NotSupported"
    UNKNOWN = "Unknown"

class EventSource(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """A valid event source type.
    """

    ASSESSMENTS = "Assessments"
    ASSESSMENTS_SNAPSHOT = "AssessmentsSnapshot"
    SUB_ASSESSMENTS = "SubAssessments"
    SUB_ASSESSMENTS_SNAPSHOT = "SubAssessmentsSnapshot"
    ALERTS = "Alerts"
    SECURE_SCORES = "SecureScores"
    SECURE_SCORES_SNAPSHOT = "SecureScoresSnapshot"
    SECURE_SCORE_CONTROLS = "SecureScoreControls"
    SECURE_SCORE_CONTROLS_SNAPSHOT = "SecureScoreControlsSnapshot"
    REGULATORY_COMPLIANCE_ASSESSMENT = "RegulatoryComplianceAssessment"
    REGULATORY_COMPLIANCE_ASSESSMENT_SNAPSHOT = "RegulatoryComplianceAssessmentSnapshot"

class ExpandControlsEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Add definition object for each control.
    DEFINITION = "definition"

class ExpandEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: All links associated with an assessment.
    LINKS = "links"
    #: Assessment metadata.
    METADATA = "metadata"

class ExportData(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Agent raw events.
    RAW_EVENTS = "RawEvents"

class ExternalSecuritySolutionKindEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The kind of the external solution
    """

    CEF = "CEF"
    ATA = "ATA"
    AAD = "AAD"

class FileType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the file (for Linux files - Executable is used)
    """

    EXE = "Exe"
    DLL = "Dll"
    MSI = "Msi"
    SCRIPT = "Script"
    EXECUTABLE = "Executable"
    UNKNOWN = "Unknown"

class HybridComputeProvisioningState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """State of the service principal and its secret
    """

    #: Valid service principal details.
    VALID = "Valid"
    #: Invalid service principal details.
    INVALID = "Invalid"
    #: the service principal details are expired.
    EXPIRED = "Expired"

class ImplementationEffort(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The implementation effort required to remediate this assessment
    """

    LOW = "Low"
    MODERATE = "Moderate"
    HIGH = "High"

class InformationProtectionPolicyName(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    EFFECTIVE = "effective"
    CUSTOM = "custom"

class Intent(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The kill chain related intent behind the alert. For list of supported values, and explanations
    of Azure Security Center's supported kill chain intents.
    """

    #: Unknown.
    UNKNOWN = "Unknown"
    #: PreAttack could be either an attempt to access a certain resource regardless of a malicious
    #: intent, or a failed attempt to gain access to a target system to gather information prior to
    #: exploitation. This step is usually detected as an attempt, originating from outside the
    #: network, to scan the target system and find a way in.  Further details on the PreAttack stage
    #: can be read in `MITRE Pre-Att&ck matrix <https://attack.mitre.org/matrices/pre/>`_.
    PRE_ATTACK = "PreAttack"
    #: InitialAccess is the stage where an attacker manages to get foothold on the attacked resource.
    INITIAL_ACCESS = "InitialAccess"
    #: Persistence is any access, action, or configuration change to a system that gives a threat
    #: actor a persistent presence on that system.
    PERSISTENCE = "Persistence"
    #: Privilege escalation is the result of actions that allow an adversary to obtain a higher level
    #: of permissions on a system or network.
    PRIVILEGE_ESCALATION = "PrivilegeEscalation"
    #: Defense evasion consists of techniques an adversary may use to evade detection or avoid other
    #: defenses.
    DEFENSE_EVASION = "DefenseEvasion"
    #: Credential access represents techniques resulting in access to or control over system, domain,
    #: or service credentials that are used within an enterprise environment.
    CREDENTIAL_ACCESS = "CredentialAccess"
    #: Discovery consists of techniques that allow the adversary to gain knowledge about the system
    #: and internal network.
    DISCOVERY = "Discovery"
    #: Lateral movement consists of techniques that enable an adversary to access and control remote
    #: systems on a network and could, but does not necessarily, include execution of tools on remote
    #: systems.
    LATERAL_MOVEMENT = "LateralMovement"
    #: The execution tactic represents techniques that result in execution of adversary-controlled
    #: code on a local or remote system.
    EXECUTION = "Execution"
    #: Collection consists of techniques used to identify and gather information, such as sensitive
    #: files, from a target network prior to exfiltration.
    COLLECTION = "Collection"
    #: Exfiltration refers to techniques and attributes that result or aid in the adversary removing
    #: files and information from a target network.
    EXFILTRATION = "Exfiltration"
    #: The command and control tactic represents how adversaries communicate with systems under their
    #: control within a target network.
    COMMAND_AND_CONTROL = "CommandAndControl"
    #: Impact events primarily try to directly reduce the availability or integrity of a system,
    #: service, or network; including manipulation of data to impact a business or operational
    #: process.
    IMPACT = "Impact"
    #: Probing could be either an attempt to access a certain resource regardless of a malicious
    #: intent, or a failed attempt to gain access to a target system to gather information prior to
    #: exploitation.
    PROBING = "Probing"
    #: Exploitation is the stage where an attacker manages to get a foothold on the attacked resource.
    #: This stage is relevant for compute hosts and resources such as user accounts, certificates etc.
    EXPLOITATION = "Exploitation"

class KindEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The kind of alert simulation.
    """

    #: Simulate alerts according to bundles.
    BUNDLES = "Bundles"

class OfferingType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the security offering.
    """

    CSPM_MONITOR_AWS = "CspmMonitorAws"
    DEFENDER_FOR_CONTAINERS_AWS = "DefenderForContainersAws"
    DEFENDER_FOR_SERVERS_AWS = "DefenderForServersAws"
    INFORMATION_PROTECTION_AWS = "InformationProtectionAws"

class Operator(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """A valid comparer operator to use. A case-insensitive comparison will be applied for String
    PropertyType.
    """

    #: Applies for decimal and non-decimal operands.
    EQUALS = "Equals"
    #: Applies only for decimal operands.
    GREATER_THAN = "GreaterThan"
    #: Applies only for decimal operands.
    GREATER_THAN_OR_EQUAL_TO = "GreaterThanOrEqualTo"
    #: Applies only for decimal operands.
    LESSER_THAN = "LesserThan"
    #: Applies only for decimal operands.
    LESSER_THAN_OR_EQUAL_TO = "LesserThanOrEqualTo"
    #: Applies  for decimal and non-decimal operands.
    NOT_EQUALS = "NotEquals"
    #: Applies only for non-decimal operands.
    CONTAINS = "Contains"
    #: Applies only for non-decimal operands.
    STARTS_WITH = "StartsWith"
    #: Applies only for non-decimal operands.
    ENDS_WITH = "EndsWith"

class OrganizationMembershipType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The multi cloud account's membership type in the organization
    """

    MEMBER = "Member"
    ORGANIZATION = "Organization"

class PermissionProperty(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """A permission detected in the cloud account.
    """

    #: This permission provides read only access to AWS Security Hub resources.
    AWS_AWS_SECURITY_HUB_READ_ONLY_ACCESS = "AWS::AWSSecurityHubReadOnlyAccess"
    #: This permission grants access to read security configuration metadata.
    AWS_SECURITY_AUDIT = "AWS::SecurityAudit"
    #: The permission provides for EC2 Automation service to execute activities defined within
    #: Automation documents.
    AWS_AMAZON_SSM_AUTOMATION_ROLE = "AWS::AmazonSSMAutomationRole"
    #: This permission provides read only access to GCP Security Command Center.
    GCP_SECURITY_CENTER_ADMIN_VIEWER = "GCP::Security Center Admin Viewer"

class PricingTier(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The pricing tier value. Microsoft Defender for Cloud is provided in two pricing tiers: free and
    standard, with the standard tier available with a trial period. The standard tier offers
    advanced security capabilities, while the free tier offers basic security features.
    """

    #: Get free Microsoft Defender for Cloud experience with basic security features.
    FREE = "Free"
    #: Get the standard Microsoft Defender for Cloud experience with advanced security features.
    STANDARD = "Standard"

class PropertyType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The data type of the compared operands (string, integer, floating point number or a boolean
    [true/false]]
    """

    STRING = "String"
    INTEGER = "Integer"
    NUMBER = "Number"
    BOOLEAN = "Boolean"

class ProtocolEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    TCP = "TCP"
    UDP = "UDP"
    ALL = "*"

class ProvisioningState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The security family provisioning State
    """

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    UPDATING = "Updating"

class Rank(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The rank of the sensitivity label.
    """

    NONE = "None"
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"
    CRITICAL = "Critical"

class RecommendationAction(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The recommendation action of the machine or rule
    """

    RECOMMENDED = "Recommended"
    ADD = "Add"
    REMOVE = "Remove"

class RecommendationConfigStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Recommendation status. When the recommendation status is disabled recommendations are not
    generated.
    """

    DISABLED = "Disabled"
    ENABLED = "Enabled"

class RecommendationStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The initial recommendation status of the machine group or machine
    """

    RECOMMENDED = "Recommended"
    NOT_RECOMMENDED = "NotRecommended"
    NOT_AVAILABLE = "NotAvailable"
    NO_STATUS = "NoStatus"

class RecommendationType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of IoT Security recommendation.
    """

    #: Authentication schema used for pull an edge module from an ACR repository does not use Service
    #: Principal Authentication.
    IO_T_ACRAUTHENTICATION = "IoT_ACRAuthentication"
    #: IoT agent message size capacity is currently underutilized, causing an increase in the number
    #: of sent messages. Adjust message intervals for better utilization.
    IO_T_AGENT_SENDS_UNUTILIZED_MESSAGES = "IoT_AgentSendsUnutilizedMessages"
    #: Identified security related system configuration issues.
    IO_T_BASELINE = "IoT_Baseline"
    #: You can optimize Edge Hub memory usage by turning off protocol heads for any protocols not used
    #: by Edge modules in your solution.
    IO_T_EDGE_HUB_MEM_OPTIMIZE = "IoT_EdgeHubMemOptimize"
    #: Logging is disabled for this edge module.
    IO_T_EDGE_LOGGING_OPTIONS = "IoT_EdgeLoggingOptions"
    #: A minority within a device security group has inconsistent Edge Module settings with the rest
    #: of their group.
    IO_T_INCONSISTENT_MODULE_SETTINGS = "IoT_InconsistentModuleSettings"
    #: Install the Azure Security of Things Agent.
    IO_T_INSTALL_AGENT = "IoT_InstallAgent"
    #: IP Filter Configuration should have rules defined for allowed traffic and should deny all other
    #: traffic by default.
    IO_T_IPFILTER_DENY_ALL = "IoT_IPFilter_DenyAll"
    #: An Allow IP Filter rules source IP range is too large. Overly permissive rules might expose
    #: your IoT hub to malicious intenders.
    IO_T_IPFILTER_PERMISSIVE_RULE = "IoT_IPFilter_PermissiveRule"
    #: A listening endpoint was found on the device.
    IO_T_OPEN_PORTS = "IoT_OpenPorts"
    #: An Allowed firewall policy was found (INPUT/OUTPUT). The policy should Deny all traffic by
    #: default and define rules to allow necessary communication to/from the device.
    IO_T_PERMISSIVE_FIREWALL_POLICY = "IoT_PermissiveFirewallPolicy"
    #: A rule in the firewall has been found that contains a permissive pattern for a wide range of IP
    #: addresses or Ports.
    IO_T_PERMISSIVE_INPUT_FIREWALL_RULES = "IoT_PermissiveInputFirewallRules"
    #: A rule in the firewall has been found that contains a permissive pattern for a wide range of IP
    #: addresses or Ports.
    IO_T_PERMISSIVE_OUTPUT_FIREWALL_RULES = "IoT_PermissiveOutputFirewallRules"
    #: Edge module is configured to run in privileged mode, with extensive Linux capabilities or with
    #: host-level network access (send/receive data to host machine).
    IO_T_PRIVILEGED_DOCKER_OPTIONS = "IoT_PrivilegedDockerOptions"
    #: Same authentication credentials to the IoT Hub used by multiple devices. This could indicate an
    #: illegitimate device impersonating a legitimate device. It also exposes the risk of device
    #: impersonation by an attacker.
    IO_T_SHARED_CREDENTIALS = "IoT_SharedCredentials"
    #: Insecure TLS configurations detected. Immediate upgrade recommended.
    IO_T_VULNERABLE_TLS_CIPHER_SUITE = "IoT_VulnerableTLSCipherSuite"

class ReportedSeverity(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Assessed alert severity.
    """

    INFORMATIONAL = "Informational"
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"

class ResourceIdentifierType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """There can be multiple identifiers of different type per alert, this field specify the
    identifier type.
    """

    AZURE_RESOURCE = "AzureResource"
    LOG_ANALYTICS = "LogAnalytics"

class ResourceStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The status of the resource regarding a single assessment
    """

    #: This assessment on the resource is healthy.
    HEALTHY = "Healthy"
    #: This assessment is not applicable to this resource.
    NOT_APPLICABLE = "NotApplicable"
    #: This assessment is turned off by policy on this subscription.
    OFF_BY_POLICY = "OffByPolicy"
    #: This assessment on the resource is not healthy.
    NOT_HEALTHY = "NotHealthy"

class RuleSeverity(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The rule severity.
    """

    #: High.
    HIGH = "High"
    #: Medium.
    MEDIUM = "Medium"
    #: Low.
    LOW = "Low"
    #: Informational.
    INFORMATIONAL = "Informational"
    #: Obsolete.
    OBSOLETE = "Obsolete"

class RuleState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Possible states of the rule
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"
    EXPIRED = "Expired"

class RuleStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The rule result status.
    """

    #: NonFinding.
    NON_FINDING = "NonFinding"
    #: Finding.
    FINDING = "Finding"
    #: InternalError.
    INTERNAL_ERROR = "InternalError"

class RuleType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The rule type.
    """

    #: Binary.
    BINARY = "Binary"
    #: BaselineExpected.
    BASELINE_EXPECTED = "BaselineExpected"
    #: PositiveList.
    POSITIVE_LIST = "PositiveList"
    #: NegativeList.
    NEGATIVE_LIST = "NegativeList"

class ScanState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The scan status.
    """

    #: Failed.
    FAILED = "Failed"
    #: FailedToRun.
    FAILED_TO_RUN = "FailedToRun"
    #: InProgress.
    IN_PROGRESS = "InProgress"
    #: Passed.
    PASSED = "Passed"

class ScanTriggerType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The scan trigger type.
    """

    #: OnDemand.
    ON_DEMAND = "OnDemand"
    #: Recurring.
    RECURRING = "Recurring"

class SecurityFamily(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The security family of the discovered solution
    """

    WAF = "Waf"
    NGFW = "Ngfw"
    SAAS_WAF = "SaasWaf"
    VA = "Va"

class SecuritySolutionStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Status of the IoT Security solution.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class ServerVulnerabilityAssessmentPropertiesProvisioningState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The provisioningState of the vulnerability assessment capability on the VM
    """

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    PROVISIONING = "Provisioning"
    DEPROVISIONING = "Deprovisioning"

class SettingKind(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """the kind of the settings string
    """

    DATA_EXPORT_SETTINGS = "DataExportSettings"
    ALERT_SUPPRESSION_SETTING = "AlertSuppressionSetting"
    ALERT_SYNC_SETTINGS = "AlertSyncSettings"

class SettingName(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    MCAS = "MCAS"
    WDATP = "WDATP"
    WDATP_EXCLUDE_LINUX_PUBLIC_PREVIEW = "WDATP_EXCLUDE_LINUX_PUBLIC_PREVIEW"
    SENTINEL = "Sentinel"

class Severity(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The sub-assessment severity level
    """

    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"

class SeverityEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The severity to relate to the assessments generated by this assessment automation.
    """

    HIGH = "High"
    MEDIUM = "Medium"
    LOW = "Low"

class Source(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The platform where the assessed resource resides
    """

    #: Resource is in Azure.
    AZURE = "Azure"
    #: Resource in an on premise machine connected to Azure cloud.
    ON_PREMISE = "OnPremise"
    #: SQL Resource in an on premise machine connected to Azure cloud.
    ON_PREMISE_SQL = "OnPremiseSql"

class SourceSystem(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The source type of the machine group
    """

    AZURE_APP_LOCKER = "Azure_AppLocker"
    AZURE_AUDIT_D = "Azure_AuditD"
    NON_AZURE_APP_LOCKER = "NonAzure_AppLocker"
    NON_AZURE_AUDIT_D = "NonAzure_AuditD"
    NONE = "None"

class State(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Aggregative state based on the standard's supported controls states
    """

    #: All supported regulatory compliance controls in the given standard have a passed state.
    PASSED = "Passed"
    #: At least one supported regulatory compliance control in the given standard has a state of
    #: failed.
    FAILED = "Failed"
    #: All supported regulatory compliance controls in the given standard have a state of skipped.
    SKIPPED = "Skipped"
    #: No supported regulatory compliance data for the given standard.
    UNSUPPORTED = "Unsupported"

class Status(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The status of the port
    """

    REVOKED = "Revoked"
    INITIATED = "Initiated"

class StatusReason(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """A description of why the ``status`` has its value
    """

    EXPIRED = "Expired"
    USER_REQUESTED = "UserRequested"
    NEWER_REQUEST_INITIATED = "NewerRequestInitiated"

class SubAssessmentStatusCode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Programmatic code for the status of the assessment
    """

    #: The resource is healthy.
    HEALTHY = "Healthy"
    #: The resource has a security issue that needs to be addressed.
    UNHEALTHY = "Unhealthy"
    #: Assessment for this resource did not happen.
    NOT_APPLICABLE = "NotApplicable"

class SupportedCloudEnum(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Relevant cloud for the custom assessment automation.
    """

    AWS = "AWS"
    GCP = "GCP"

class Tactics(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Tactic of the assessment
    """

    RECONNAISSANCE = "Reconnaissance"
    RESOURCE_DEVELOPMENT = "Resource Development"
    INITIAL_ACCESS = "Initial Access"
    EXECUTION = "Execution"
    PERSISTENCE = "Persistence"
    PRIVILEGE_ESCALATION = "Privilege Escalation"
    DEFENSE_EVASION = "Defense Evasion"
    CREDENTIAL_ACCESS = "Credential Access"
    DISCOVERY = "Discovery"
    LATERAL_MOVEMENT = "Lateral Movement"
    COLLECTION = "Collection"
    COMMAND_AND_CONTROL = "Command and Control"
    EXFILTRATION = "Exfiltration"
    IMPACT = "Impact"

class TaskUpdateActionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ACTIVATE = "Activate"
    DISMISS = "Dismiss"
    START = "Start"
    RESOLVE = "Resolve"
    CLOSE = "Close"

class Techniques(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Techniques of the assessment
    """

    ABUSE_ELEVATION_CONTROL_MECHANISM = "Abuse Elevation Control Mechanism"
    ACCESS_TOKEN_MANIPULATION = "Access Token Manipulation"
    ACCOUNT_DISCOVERY = "Account Discovery"
    ACCOUNT_MANIPULATION = "Account Manipulation"
    ACTIVE_SCANNING = "Active Scanning"
    APPLICATION_LAYER_PROTOCOL = "Application Layer Protocol"
    AUDIO_CAPTURE = "Audio Capture"
    BOOT_OR_LOGON_AUTOSTART_EXECUTION = "Boot or Logon Autostart Execution"
    BOOT_OR_LOGON_INITIALIZATION_SCRIPTS = "Boot or Logon Initialization Scripts"
    BRUTE_FORCE = "Brute Force"
    CLOUD_INFRASTRUCTURE_DISCOVERY = "Cloud Infrastructure Discovery"
    CLOUD_SERVICE_DASHBOARD = "Cloud Service Dashboard"
    CLOUD_SERVICE_DISCOVERY = "Cloud Service Discovery"
    COMMAND_AND_SCRIPTING_INTERPRETER = "Command and Scripting Interpreter"
    COMPROMISE_CLIENT_SOFTWARE_BINARY = "Compromise Client Software Binary"
    COMPROMISE_INFRASTRUCTURE = "Compromise Infrastructure"
    CONTAINER_AND_RESOURCE_DISCOVERY = "Container and Resource Discovery"
    CREATE_ACCOUNT = "Create Account"
    CREATE_OR_MODIFY_SYSTEM_PROCESS = "Create or Modify System Process"
    CREDENTIALS_FROM_PASSWORD_STORES = "Credentials from Password Stores"
    DATA_DESTRUCTION = "Data Destruction"
    DATA_ENCRYPTED_FOR_IMPACT = "Data Encrypted for Impact"
    DATA_FROM_CLOUD_STORAGE_OBJECT = "Data from Cloud Storage Object"
    DATA_FROM_CONFIGURATION_REPOSITORY = "Data from Configuration Repository"
    DATA_FROM_INFORMATION_REPOSITORIES = "Data from Information Repositories"
    DATA_FROM_LOCAL_SYSTEM = "Data from Local System"
    DATA_MANIPULATION = "Data Manipulation"
    DATA_STAGED = "Data Staged"
    DEFACEMENT = "Defacement"
    DEOBFUSCATE_DECODE_FILES_OR_INFORMATION = "Deobfuscate/Decode Files or Information"
    DISK_WIPE = "Disk Wipe"
    DOMAIN_TRUST_DISCOVERY = "Domain Trust Discovery"
    DRIVE_BY_COMPROMISE = "Drive-by Compromise"
    DYNAMIC_RESOLUTION = "Dynamic Resolution"
    ENDPOINT_DENIAL_OF_SERVICE = "Endpoint Denial of Service"
    EVENT_TRIGGERED_EXECUTION = "Event Triggered Execution"
    EXFILTRATION_OVER_ALTERNATIVE_PROTOCOL = "Exfiltration Over Alternative Protocol"
    EXPLOIT_PUBLIC_FACING_APPLICATION = "Exploit Public-Facing Application"
    EXPLOITATION_FOR_CLIENT_EXECUTION = "Exploitation for Client Execution"
    EXPLOITATION_FOR_CREDENTIAL_ACCESS = "Exploitation for Credential Access"
    EXPLOITATION_FOR_DEFENSE_EVASION = "Exploitation for Defense Evasion"
    EXPLOITATION_FOR_PRIVILEGE_ESCALATION = "Exploitation for Privilege Escalation"
    EXPLOITATION_OF_REMOTE_SERVICES = "Exploitation of Remote Services"
    EXTERNAL_REMOTE_SERVICES = "External Remote Services"
    FALLBACK_CHANNELS = "Fallback Channels"
    FILE_AND_DIRECTORY_DISCOVERY = "File and Directory Discovery"
    GATHER_VICTIM_NETWORK_INFORMATION = "Gather Victim Network Information"
    HIDE_ARTIFACTS = "Hide Artifacts"
    HIJACK_EXECUTION_FLOW = "Hijack Execution Flow"
    IMPAIR_DEFENSES = "Impair Defenses"
    IMPLANT_CONTAINER_IMAGE = "Implant Container Image"
    INDICATOR_REMOVAL_ON_HOST = "Indicator Removal on Host"
    INDIRECT_COMMAND_EXECUTION = "Indirect Command Execution"
    INGRESS_TOOL_TRANSFER = "Ingress Tool Transfer"
    INPUT_CAPTURE = "Input Capture"
    INTER_PROCESS_COMMUNICATION = "Inter-Process Communication"
    LATERAL_TOOL_TRANSFER = "Lateral Tool Transfer"
    MAN_IN_THE_MIDDLE = "Man-in-the-Middle"
    MASQUERADING = "Masquerading"
    MODIFY_AUTHENTICATION_PROCESS = "Modify Authentication Process"
    MODIFY_REGISTRY = "Modify Registry"
    NETWORK_DENIAL_OF_SERVICE = "Network Denial of Service"
    NETWORK_SERVICE_SCANNING = "Network Service Scanning"
    NETWORK_SNIFFING = "Network Sniffing"
    NON_APPLICATION_LAYER_PROTOCOL = "Non-Application Layer Protocol"
    NON_STANDARD_PORT = "Non-Standard Port"
    OBTAIN_CAPABILITIES = "Obtain Capabilities"
    OBFUSCATED_FILES_OR_INFORMATION = "Obfuscated Files or Information"
    OFFICE_APPLICATION_STARTUP = "Office Application Startup"
    OS_CREDENTIAL_DUMPING = "OS Credential Dumping"
    PERMISSION_GROUPS_DISCOVERY = "Permission Groups Discovery"
    PHISHING = "Phishing"
    PRE_OS_BOOT = "Pre-OS Boot"
    PROCESS_DISCOVERY = "Process Discovery"
    PROCESS_INJECTION = "Process Injection"
    PROTOCOL_TUNNELING = "Protocol Tunneling"
    PROXY = "Proxy"
    QUERY_REGISTRY = "Query Registry"
    REMOTE_ACCESS_SOFTWARE = "Remote Access Software"
    REMOTE_SERVICE_SESSION_HIJACKING = "Remote Service Session Hijacking"
    REMOTE_SERVICES = "Remote Services"
    REMOTE_SYSTEM_DISCOVERY = "Remote System Discovery"
    RESOURCE_HIJACKING = "Resource Hijacking"
    SCHEDULED_TASK_JOB = "Scheduled Task/Job"
    SCREEN_CAPTURE = "Screen Capture"
    SEARCH_VICTIM_OWNED_WEBSITES = "Search Victim-Owned Websites"
    SERVER_SOFTWARE_COMPONENT = "Server Software Component"
    SERVICE_STOP = "Service Stop"
    SIGNED_BINARY_PROXY_EXECUTION = "Signed Binary Proxy Execution"
    SOFTWARE_DEPLOYMENT_TOOLS = "Software Deployment Tools"
    SQL_STORED_PROCEDURES = "SQL Stored Procedures"
    STEAL_OR_FORGE_KERBEROS_TICKETS = "Steal or Forge Kerberos Tickets"
    SUBVERT_TRUST_CONTROLS = "Subvert Trust Controls"
    SUPPLY_CHAIN_COMPROMISE = "Supply Chain Compromise"
    SYSTEM_INFORMATION_DISCOVERY = "System Information Discovery"
    TAINT_SHARED_CONTENT = "Taint Shared Content"
    TRAFFIC_SIGNALING = "Traffic Signaling"
    TRANSFER_DATA_TO_CLOUD_ACCOUNT = "Transfer Data to Cloud Account"
    TRUSTED_RELATIONSHIP = "Trusted Relationship"
    UNSECURED_CREDENTIALS = "Unsecured Credentials"
    USER_EXECUTION = "User Execution"
    VALID_ACCOUNTS = "Valid Accounts"
    WINDOWS_MANAGEMENT_INSTRUMENTATION = "Windows Management Instrumentation"
    FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION = "File and Directory Permissions Modification"

class Threats(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Threats impact of the assessment
    """

    ACCOUNT_BREACH = "accountBreach"
    DATA_EXFILTRATION = "dataExfiltration"
    DATA_SPILLAGE = "dataSpillage"
    MALICIOUS_INSIDER = "maliciousInsider"
    ELEVATION_OF_PRIVILEGE = "elevationOfPrivilege"
    THREAT_RESISTANCE = "threatResistance"
    MISSING_COVERAGE = "missingCoverage"
    DENIAL_OF_SERVICE = "denialOfService"

class TransportProtocol(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    TCP = "TCP"
    UDP = "UDP"

class UnmaskedIpLoggingStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Unmasked IP address logging status
    """

    #: Unmasked IP logging is disabled.
    DISABLED = "Disabled"
    #: Unmasked IP logging is enabled.
    ENABLED = "Enabled"

class UserImpact(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The user impact of the assessment
    """

    LOW = "Low"
    MODERATE = "Moderate"
    HIGH = "High"

class ValueType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The value type of the items in the list.
    """

    #: An IP range in CIDR format (e.g. '192.168.0.1/8').
    IP_CIDR = "IpCidr"
    #: Any string value.
    STRING = "String"
