# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class ResourceStatus(str, Enum):

    healthy = "Healthy"  #: This assessment on the resource is healthy
    not_applicable = "NotApplicable"  #: This assessment is not applicable to this resource
    off_by_policy = "OffByPolicy"  #: This assessment is turned off by policy on this subscription
    not_healthy = "NotHealthy"  #: This assessment on the resource is not healthy


class PricingTier(str, Enum):

    free = "Free"  #: Get free Azure security center experience with basic security features
    standard = "Standard"  #: Get the standard Azure security center experience with advanced security features


class ReportedSeverity(str, Enum):

    informational = "Informational"
    low = "Low"
    medium = "Medium"
    high = "High"


class SettingKind(str, Enum):

    data_export_setting = "DataExportSetting"
    alert_suppression_setting = "AlertSuppressionSetting"


class SecurityFamily(str, Enum):

    waf = "Waf"
    ngfw = "Ngfw"
    saas_waf = "SaasWaf"
    va = "Va"


class AadConnectivityState(str, Enum):

    discovered = "Discovered"
    not_licensed = "NotLicensed"
    connected = "Connected"


class ExternalSecuritySolutionKind(str, Enum):

    cef = "CEF"
    ata = "ATA"
    aad = "AAD"


class Protocol(str, Enum):

    tcp = "TCP"
    udp = "UDP"
    all = "*"


class Status(str, Enum):

    revoked = "Revoked"
    initiated = "Initiated"


class StatusReason(str, Enum):

    expired = "Expired"
    user_requested = "UserRequested"
    newer_request_initiated = "NewerRequestInitiated"


class AutoProvision(str, Enum):

    on = "On"  #: Install missing security agent on VMs automatically
    off = "Off"  #: Do not install security agent on the VMs automatically


class AlertNotifications(str, Enum):

    on = "On"  #: Get notifications on new alerts
    off = "Off"  #: Don't get notifications on new alerts


class AlertsToAdmins(str, Enum):

    on = "On"  #: Send notification on new alerts to the subscription's admins
    off = "Off"  #: Don't send notification on new alerts to the subscription's admins


class SecuritySolutionStatus(str, Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class ExportData(str, Enum):

    raw_events = "RawEvents"  #: Agent raw events


class DataSource(str, Enum):

    twin_data = "TwinData"  #: Devices twin data


class RecommendationType(str, Enum):

    open_ports_on_device = "OpenPortsOnDevice"  #: A listening endpoint was found on the device.
    permissive_firewall_policy = "PermissiveFirewallPolicy"  #: Allowed firewall policy found (INPUT/OUTPUT). Firewall policy should deny all traffic by default, and define rules to allow necessary communication to/from the device.
    permissive_firewall_rule_input = "PermissiveFirewallRuleInput"  #: A rule in the firewall in the input chain has been found that contains a permissive pattern for a wide range of IP addresses or ports.
    permissive_firewall_rule_out = "PermissiveFirewallRuleOut"  #: A rule in the firewall in the output chain has been found that contains a permissive pattern for a wide range of IP addresses or ports.
    operation_system_not_valid = "OperationSystemNotValid"  #: Device doesn't comply with CIS Linux benchmarks.
    unutilized_messages_from_agent = "UnutilizedMessagesFromAgent"  #: 10% or more of security messages were smaller than 4kb during the last 24 hours.
    security_twin_configuration_not_optimal = "SecurityTwinConfigurationNotOptimal"  #: Security twin configuration is not optimal.
    security_twin_configuration_conflict = "SecurityTwinConfigurationConflict"  #: Conflicts were identified in the security twin configuration.
    identical_authentication_credentials = "IdenticalAuthenticationCredentials"  #: IoT Hub authentication credentials are used by multiple devices. This may indicate an illegitimate device impersonating a legitimate device. Duplicate credential use increases the risk of device impersonation by a malicious actor.
    deny_default_ip_policy = "DenyDefaultIpPolicy"  #: IP filter configuration should have rules defined for allowed traffic, and should by default, deny all other traffic by default.
    too_large_ip_range = "TooLargeIPRange"  #: An allow IP filter rule source IP range is too large. Overly permissive rules can expose your IoT hub to malicious actors.
    enable_diagnostics_log = "EnableDiagnosticsLog"  #: Enable logs and retain them for up to a year. Retaining logs enables you to recreate activity trails for investigation purposes when a security incident occurs or your network is compromised.


class RecommendationConfigStatus(str, Enum):

    turned_off = "TurnedOff"
    turned_on = "TurnedOn"


class State(str, Enum):

    passed = "Passed"  #: All supported regulatory compliance controls in the given standard have a passed state
    failed = "Failed"  #: At least one supported regulatory compliance control in the given standard has a state of failed
    skipped = "Skipped"  #: All supported regulatory compliance controls in the given standard have a state of skipped
    unsupported = "Unsupported"  #: No supported regulatory compliance data for the given standard


class ConnectionType(str, Enum):

    internal = "Internal"
    external = "External"
