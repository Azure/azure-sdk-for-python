# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AppWhitelistingGroup(Model):
    """AppWhitelistingGroup.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource name
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :ivar location: Location where the resource is stored
    :vartype location: str
    :param enforcement_mode: Possible values include: 'Audit', 'Enforce'
    :type enforcement_mode: str or ~azure.mgmt.security.models.enum
    :param configuration_status: Possible values include: 'Configured',
     'NotConfigured', 'InProgress', 'Failed', 'NoStatus'
    :type configuration_status: str or ~azure.mgmt.security.models.enum
    :param recommendation_status: Possible values include: 'Recommended',
     'NotRecommended', 'NotAvailable', 'NoStatus'
    :type recommendation_status: str or ~azure.mgmt.security.models.enum
    :param issues:
    :type issues:
     list[~azure.mgmt.security.models.AppWhitelistingIssueSummary]
    :param source_system: Possible values include: 'Azure_AppLocker',
     'Azure_AuditD', 'NonAzure_AppLocker', 'NonAzure_AuditD', 'None'
    :type source_system: str or ~azure.mgmt.security.models.enum
    :param vm_recommendations:
    :type vm_recommendations:
     list[~azure.mgmt.security.models.VmRecommendation]
    :param path_recommendations:
    :type path_recommendations:
     list[~azure.mgmt.security.models.PathRecommendation]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'enforcement_mode': {'key': 'properties.enforcementMode', 'type': 'str'},
        'configuration_status': {'key': 'properties.configurationStatus', 'type': 'str'},
        'recommendation_status': {'key': 'properties.recommendationStatus', 'type': 'str'},
        'issues': {'key': 'properties.issues', 'type': '[AppWhitelistingIssueSummary]'},
        'source_system': {'key': 'properties.sourceSystem', 'type': 'str'},
        'vm_recommendations': {'key': 'properties.vmRecommendations', 'type': '[VmRecommendation]'},
        'path_recommendations': {'key': 'properties.pathRecommendations', 'type': '[PathRecommendation]'},
    }

    def __init__(self, *, enforcement_mode=None, configuration_status=None, recommendation_status=None, issues=None, source_system=None, vm_recommendations=None, path_recommendations=None, **kwargs) -> None:
        super(AppWhitelistingGroup, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = None
        self.enforcement_mode = enforcement_mode
        self.configuration_status = configuration_status
        self.recommendation_status = recommendation_status
        self.issues = issues
        self.source_system = source_system
        self.vm_recommendations = vm_recommendations
        self.path_recommendations = path_recommendations
