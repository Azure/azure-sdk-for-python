# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from azure.planetarycomputer.aio import (
    GeocatalogClient,
    ImageExportsClient,
    IngestionClient,
    MapLegendsClient,
    MosaicTilerClient,
    SharedAccessSignatureClient,
    StacClient,
    StacCollectionConfigurationClient,
    StacItemTilerClient,
    TileMatrixSetsClient,
)
from devtools_testutils import AzureRecordedTestCase


class StacCollectionConfigurationClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(StacCollectionConfigurationClient, is_async=True)
        return self.create_client_from_credential(
            StacCollectionConfigurationClient,
            credential=credential,
            endpoint=endpoint,
        )


class GeocatalogClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(GeocatalogClient, is_async=True)
        return self.create_client_from_credential(
            GeocatalogClient,
            credential=credential,
            endpoint=endpoint,
        )


class ImageExportsClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(ImageExportsClient, is_async=True)
        return self.create_client_from_credential(
            ImageExportsClient,
            credential=credential,
            endpoint=endpoint,
        )


class StacItemTilerClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(StacItemTilerClient, is_async=True)
        return self.create_client_from_credential(
            StacItemTilerClient,
            credential=credential,
            endpoint=endpoint,
        )


class MapLegendsClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(MapLegendsClient, is_async=True)
        return self.create_client_from_credential(
            MapLegendsClient,
            credential=credential,
            endpoint=endpoint,
        )


class MosaicTilerClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(MosaicTilerClient, is_async=True)
        return self.create_client_from_credential(
            MosaicTilerClient,
            credential=credential,
            endpoint=endpoint,
        )


class TileMatrixSetsClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(TileMatrixSetsClient, is_async=True)
        return self.create_client_from_credential(
            TileMatrixSetsClient,
            credential=credential,
            endpoint=endpoint,
        )


class SharedAccessSignatureClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(SharedAccessSignatureClient, is_async=True)
        return self.create_client_from_credential(
            SharedAccessSignatureClient,
            credential=credential,
            endpoint=endpoint,
        )


class IngestionClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(IngestionClient, is_async=True)
        return self.create_client_from_credential(
            IngestionClient,
            credential=credential,
            endpoint=endpoint,
        )


class StacClientTestBaseAsync(AzureRecordedTestCase):

    def create_async_client(self, endpoint):
        credential = self.get_credential(StacClient, is_async=True)
        return self.create_client_from_credential(
            StacClient,
            credential=credential,
            endpoint=endpoint,
        )
