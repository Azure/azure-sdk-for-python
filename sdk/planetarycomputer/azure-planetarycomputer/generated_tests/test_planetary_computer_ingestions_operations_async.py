# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import PlanetaryComputerPreparer
from testpreparer_async import PlanetaryComputerClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPlanetaryComputerIngestionsOperationsAsync(PlanetaryComputerClientTestBaseAsync):
    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestions_list(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestions.list(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestions_create(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestions.create(
            collection_id="str",
            definition={
                "creationTime": "2020-02-20 00:00:00",
                "id": "str",
                "importType": "str",
                "status": "str",
                "displayName": "str",
                "keepOriginalAssets": bool,
                "skipExistingItems": bool,
                "sourceCatalogUrl": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestions_get(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestions.get(
            collection_id="str",
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestions_update(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestions.update(
            collection_id="str",
            ingestion_id="str",
            definition={
                "creationTime": "2020-02-20 00:00:00",
                "id": "str",
                "importType": "str",
                "status": "str",
                "displayName": "str",
                "keepOriginalAssets": bool,
                "skipExistingItems": bool,
                "sourceCatalogUrl": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestions_begin_delete(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await (
            await client.ingestions.begin_delete(
                collection_id="str",
                ingestion_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestions_ingestion_runs_list(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestions.ingestion_runs.list(
            collection_id="str",
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestions_ingestion_runs_create(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestions.ingestion_runs.create(
            collection_id="str",
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestions_ingestion_runs_get(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestions.ingestion_runs.get(
            collection_id="str",
            ingestion_id="str",
            run_id="str",
        )

        # please add some check logic here by yourself
        # ...
