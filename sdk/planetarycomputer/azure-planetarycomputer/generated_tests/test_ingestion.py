# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import IngestionClientTestBase, IngestionPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestIngestion(IngestionClientTestBase):
    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_ingestions(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_ingestions()

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_ingestion(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_ingestion(
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_create_ingestion(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.create_ingestion(
            definition={
                "creationTime": "2020-02-20 00:00:00",
                "id": "str",
                "importType": "str",
                "status": "str",
                "displayName": "str",
                "keepOriginalAssets": bool,
                "skipExistingItems": bool,
                "sourceCatalogUrl": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_update_ingestion(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.update_ingestion(
            ingestion_id="str",
            definition={
                "creationTime": "2020-02-20 00:00:00",
                "id": "str",
                "importType": "str",
                "status": "str",
                "displayName": "str",
                "keepOriginalAssets": bool,
                "skipExistingItems": bool,
                "sourceCatalogUrl": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_begin_delete_ingestion(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.begin_delete_ingestion(
            ingestion_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_ingestion_runs(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_ingestion_runs(
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_ingestion_run(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_ingestion_run(
            ingestion_id="str",
            run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_create_ingestion_run(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.create_ingestion_run(
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_ingestion_sources(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_ingestion_sources()

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_ingestion_source(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_ingestion_source(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_create_ingestion_source(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.create_ingestion_source(
            ingestion_source={
                "connectionInfo": {"containerUrl": "str", "objectId": "str"},
                "created": "2020-02-20 00:00:00",
                "id": "str",
                "kind": "BlobManagedIdentity",
            },
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_create_or_replace_ingestion_source(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.create_or_replace_ingestion_source(
            id="str",
            ingestion_source={
                "connectionInfo": {"containerUrl": "str", "objectId": "str"},
                "created": "2020-02-20 00:00:00",
                "id": "str",
                "kind": "BlobManagedIdentity",
            },
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_delete_ingestion_source(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.delete_ingestion_source(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_managed_identities(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_managed_identities()

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_operations(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_operations()

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_get_operation(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.get_operation(
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_delete_operation(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.delete_operation(
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @IngestionPreparer()
    @recorded_by_proxy
    def test_delete_all_operations(self, ingestion_endpoint):
        client = self.create_client(endpoint=ingestion_endpoint)
        response = client.delete_all_operations()

        # please add some check logic here by yourself
        # ...
