# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import StacPreparer
from testpreparer_async import StacClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestStacAsync(StacClientTestBaseAsync):
    @StacPreparer()
    @recorded_by_proxy_async
    async def test_get_features(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await client.get_features(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_get_item(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await client.get_item(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_begin_create_item(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await (
            await client.begin_create_item(
                collection_id="str",
                body={
                    "assets": {
                        "str": {
                            "href": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "roles": ["str"],
                            "title": "str",
                            "type": "str",
                            "updated": "2020-02-20 00:00:00",
                        }
                    },
                    "bbox": [0.0],
                    "geometry": "geometry",
                    "id": "str",
                    "properties": {
                        "datetime": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "end_datetime": "2020-02-20 00:00:00",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "start_datetime": "2020-02-20 00:00:00",
                        "title": "str",
                        "updated": "2020-02-20 00:00:00",
                    },
                    "type": "Feature",
                    "_msft:etag": "str",
                    "_msft:ts": "str",
                    "collection": "str",
                    "links": [
                        {
                            "href": "str",
                            "body": {"str": {}},
                            "headers": {"str": "str"},
                            "hreflang": "str",
                            "length": 0,
                            "merge": bool,
                            "method": "GET",
                            "rel": "str",
                            "title": "str",
                            "type": "str",
                        }
                    ],
                    "msft:_created": "str",
                    "msft:_updated": "str",
                    "msft:short_description": "str",
                    "stac_extensions": ["str"],
                    "stac_version": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_begin_create_or_replace_item(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await (
            await client.begin_create_or_replace_item(
                collection_id="str",
                item_id="str",
                body={
                    "assets": {
                        "str": {
                            "href": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "roles": ["str"],
                            "title": "str",
                            "type": "str",
                            "updated": "2020-02-20 00:00:00",
                        }
                    },
                    "bbox": [0.0],
                    "geometry": "geometry",
                    "id": "str",
                    "properties": {
                        "datetime": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "end_datetime": "2020-02-20 00:00:00",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "start_datetime": "2020-02-20 00:00:00",
                        "title": "str",
                        "updated": "2020-02-20 00:00:00",
                    },
                    "type": "Feature",
                    "_msft:etag": "str",
                    "_msft:ts": "str",
                    "collection": "str",
                    "links": [
                        {
                            "href": "str",
                            "body": {"str": {}},
                            "headers": {"str": "str"},
                            "hreflang": "str",
                            "length": 0,
                            "merge": bool,
                            "method": "GET",
                            "rel": "str",
                            "title": "str",
                            "type": "str",
                        }
                    ],
                    "msft:_created": "str",
                    "msft:_updated": "str",
                    "msft:short_description": "str",
                    "stac_extensions": ["str"],
                    "stac_version": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_begin_update_item(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await (
            await client.begin_update_item(
                collection_id="str",
                item_id="str",
                body={
                    "assets": {
                        "str": {
                            "href": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "roles": ["str"],
                            "title": "str",
                            "type": "str",
                            "updated": "2020-02-20 00:00:00",
                        }
                    },
                    "bbox": [0.0],
                    "geometry": "geometry",
                    "id": "str",
                    "properties": {
                        "datetime": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "end_datetime": "2020-02-20 00:00:00",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "start_datetime": "2020-02-20 00:00:00",
                        "title": "str",
                        "updated": "2020-02-20 00:00:00",
                    },
                    "type": "Feature",
                    "_msft:etag": "str",
                    "_msft:ts": "str",
                    "collection": "str",
                    "links": [
                        {
                            "href": "str",
                            "body": {"str": {}},
                            "headers": {"str": "str"},
                            "hreflang": "str",
                            "length": 0,
                            "merge": bool,
                            "method": "GET",
                            "rel": "str",
                            "title": "str",
                            "type": "str",
                        }
                    ],
                    "msft:_created": "str",
                    "msft:_updated": "str",
                    "msft:short_description": "str",
                    "stac_extensions": ["str"],
                    "stac_version": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_begin_delete_item(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await (
            await client.begin_delete_item(
                collection_id="str",
                item_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_get_collections(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await client.get_collections()

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_begin_create_collection(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await (
            await client.begin_create_collection(
                body={
                    "description": "str",
                    "extent": {"spatial": {"bbox": [[0.0]]}, "temporal": {"interval": [["str"]]}},
                    "id": "str",
                    "license": "str",
                    "links": [
                        {
                            "href": "str",
                            "body": {"str": {}},
                            "headers": {"str": "str"},
                            "hreflang": "str",
                            "length": 0,
                            "merge": bool,
                            "method": "GET",
                            "rel": "str",
                            "title": "str",
                            "type": "str",
                        }
                    ],
                    "assets": {
                        "str": {
                            "href": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "roles": ["str"],
                            "title": "str",
                            "type": "str",
                            "updated": "2020-02-20 00:00:00",
                        }
                    },
                    "keywords": ["str"],
                    "msft:_created": "str",
                    "msft:_updated": "str",
                    "msft:short_description": "str",
                    "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                    "stac_extensions": ["str"],
                    "stac_version": "str",
                    "summaries": {},
                    "title": "str",
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_get_collection(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await client.get_collection(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_begin_create_or_replace_collection(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await (
            await client.begin_create_or_replace_collection(
                collection_id="str",
                body={
                    "description": "str",
                    "extent": {"spatial": {"bbox": [[0.0]]}, "temporal": {"interval": [["str"]]}},
                    "id": "str",
                    "license": "str",
                    "links": [
                        {
                            "href": "str",
                            "body": {"str": {}},
                            "headers": {"str": "str"},
                            "hreflang": "str",
                            "length": 0,
                            "merge": bool,
                            "method": "GET",
                            "rel": "str",
                            "title": "str",
                            "type": "str",
                        }
                    ],
                    "assets": {
                        "str": {
                            "href": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "roles": ["str"],
                            "title": "str",
                            "type": "str",
                            "updated": "2020-02-20 00:00:00",
                        }
                    },
                    "keywords": ["str"],
                    "msft:_created": "str",
                    "msft:_updated": "str",
                    "msft:short_description": "str",
                    "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                    "stac_extensions": ["str"],
                    "stac_version": "str",
                    "summaries": {},
                    "title": "str",
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_begin_delete_collection(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await (
            await client.begin_delete_collection(
                collection_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_get_search(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await client.get_search()

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_search_post(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await client.search_post(
            body={
                "bbox": [0.0],
                "collections": ["str"],
                "conf": {"str": {}},
                "datetime": "str",
                "duration": 0,
                "fields": [{"exclude": ["str"], "include": ["str"]}],
                "filter": {},
                "filter-crs": "str",
                "filter-lang": "str",
                "ids": ["str"],
                "intersects": "geometry",
                "limit": 0,
                "query": {},
                "sign": "str",
                "sortby": [{"direction": "str", "field": "str"}],
                "token": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_get_stac_landing_pages(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await client.get_stac_landing_pages()

        # please add some check logic here by yourself
        # ...

    @StacPreparer()
    @recorded_by_proxy_async
    async def test_get_stac_conformance_class(self, stac_endpoint):
        client = self.create_async_client(endpoint=stac_endpoint)
        response = await client.get_stac_conformance_class()

        # please add some check logic here by yourself
        # ...
