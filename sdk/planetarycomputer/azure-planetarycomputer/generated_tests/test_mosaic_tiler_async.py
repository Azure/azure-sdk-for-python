# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import MosaicTilerPreparer
from testpreparer_async import MosaicTilerClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMosaicTilerAsync(MosaicTilerClientTestBaseAsync):
    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_tile(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_tile(
            search_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
            scale=0.0,
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_tile_with_matrix_set(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_tile_with_matrix_set(
            search_id="str",
            tile_matrix_set_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
            scale=0.0,
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_tile_json(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_tile_json(
            search_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_tile_json_with_matrix_set(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_tile_json_with_matrix_set(
            search_id="str",
            tile_matrix_set_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_wmts_capabilities(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_wmts_capabilities(
            search_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_wmts_capabilities_with_matrix_set(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_wmts_capabilities_with_matrix_set(
            search_id="str",
            tile_matrix_set_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_register_search(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.register_search(
            body={
                "bbox": 0.0,
                "collections": ["str"],
                "datetime": "str",
                "filter": {},
                "filter-lang": "str",
                "ids": ["str"],
                "intersects": "geometry",
                "metadata": {
                    "assets": ["str"],
                    "bounds": "str",
                    "defaults": {"str": "str"},
                    "maxzoom": 0,
                    "minzoom": 0,
                    "name": "str",
                    "type": "str",
                },
                "query": {},
                "sortby": [{"direction": "str", "field": "str"}],
            },
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_search_info(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_search_info(
            search_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_assets_for_tile(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_assets_for_tile(
            search_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_assets_for_tile_with_matrix_set(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_assets_for_tile_with_matrix_set(
            search_id="str",
            tile_matrix_set_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
        )

        # please add some check logic here by yourself
        # ...

    @MosaicTilerPreparer()
    @recorded_by_proxy_async
    async def test_get_assets_for_point(self, mosaictiler_endpoint):
        client = self.create_async_client(endpoint=mosaictiler_endpoint)
        response = await client.get_assets_for_point(
            search_id="str",
            lon=0.0,
            lat=0.0,
        )

        # please add some check logic here by yourself
        # ...
