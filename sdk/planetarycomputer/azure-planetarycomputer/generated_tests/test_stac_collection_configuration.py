# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import StacCollectionConfigurationClientTestBase, StacCollectionConfigurationPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestStacCollectionConfiguration(StacCollectionConfigurationClientTestBase):
    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_create_collection_asset(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.create_collection_asset(
            body={
                "data": {"description": "str", "key": "str", "roles": ["str"], "title": "str", "type": "str"},
                "file": "filetype",
            },
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_create_or_replace_collection_asset(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.create_or_replace_collection_asset(
            asset_id="str",
            body={
                "data": {"description": "str", "key": "str", "roles": ["str"], "title": "str", "type": "str"},
                "file": "filetype",
            },
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_delete_collection_asset(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.delete_collection_asset(
            asset_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_collection_thumbnail(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_collection_thumbnail()

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_collection_config(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_collection_config()

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_all_mosaics(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_all_mosaics()

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_add_mosaic(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.add_mosaic(
            body={"cql": [{}], "id": "str", "name": "str", "description": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_mosaic(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_mosaic(
            mosaic_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_create_or_replace_mosaic(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.create_or_replace_mosaic(
            mosaic_id="str",
            body={"cql": [{}], "id": "str", "name": "str", "description": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_delete_mosaic(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.delete_mosaic(
            mosaic_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_all_render_options(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_all_render_options()

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_create_render_option(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.create_render_option(
            body={
                "id": "str",
                "name": "str",
                "conditions": [{"property": "str", "value": "str"}],
                "description": "str",
                "legend": {"labels": ["str"], "scaleFactor": 0.0, "trimEnd": 0, "trimStart": 0, "type": "str"},
                "minZoom": 0,
                "options": "str",
                "type": "str",
                "vectorOptions": {
                    "sourceLayer": "str",
                    "tilejsonKey": "str",
                    "fillColor": "str",
                    "filter": ["str"],
                    "strokeColor": "str",
                    "strokeWidth": 0,
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_render_option(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_render_option(
            render_option_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_create_or_replace_render_option(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.create_or_replace_render_option(
            render_option_id="str",
            body={
                "id": "str",
                "name": "str",
                "conditions": [{"property": "str", "value": "str"}],
                "description": "str",
                "legend": {"labels": ["str"], "scaleFactor": 0.0, "trimEnd": 0, "trimStart": 0, "type": "str"},
                "minZoom": 0,
                "options": "str",
                "type": "str",
                "vectorOptions": {
                    "sourceLayer": "str",
                    "tilejsonKey": "str",
                    "fillColor": "str",
                    "filter": ["str"],
                    "strokeColor": "str",
                    "strokeWidth": 0,
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_delete_render_option(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.delete_render_option(
            render_option_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_tile_settings(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_tile_settings()

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_replace_tile_settings(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.replace_tile_settings(
            body={"maxItemsPerTile": 0, "minZoom": 0, "defaultLocation": {"coordinates": [0.0], "zoom": 0}},
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_partition_type(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_partition_type()

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_replace_partition_type(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.replace_partition_type(
            body={"scheme": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_all_queryables(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_all_queryables()

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_get_all_queryables_by_collection(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.get_all_queryables_by_collection()

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_create_queryables(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.create_queryables(
            body=[
                {
                    "definition": {"create_index": bool, "data_type": "str", "description": "str"},
                    "name": "str",
                    "create_index": bool,
                    "data_type": "str",
                }
            ],
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_create_or_replace_queryable(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.create_or_replace_queryable(
            queryable_name="str",
            body={
                "definition": {"create_index": bool, "data_type": "str", "description": "str"},
                "name": "str",
                "create_index": bool,
                "data_type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @StacCollectionConfigurationPreparer()
    @recorded_by_proxy
    def test_delete_queryable(self, staccollectionconfiguration_endpoint):
        client = self.create_client(endpoint=staccollectionconfiguration_endpoint)
        response = client.delete_queryable(
            queryable_name="str",
        )

        # please add some check logic here by yourself
        # ...
