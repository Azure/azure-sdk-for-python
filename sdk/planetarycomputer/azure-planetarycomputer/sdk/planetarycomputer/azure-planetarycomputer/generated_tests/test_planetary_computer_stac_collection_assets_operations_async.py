# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import PlanetaryComputerPreparer
from testpreparer_async import PlanetaryComputerClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPlanetaryComputerStacCollectionAssetsOperationsAsync(PlanetaryComputerClientTestBaseAsync):
    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_collection_assets_create(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.stac_collection_assets.create(
            collection_id="str",
            body={
                "data": {"description": "str", "key": "str", "roles": ["str"], "title": "str", "type": "str"},
                "file": "filetype",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_collection_assets_create_or_replace(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.stac_collection_assets.create_or_replace(
            collection_id="str",
            asset_id="str",
            body={
                "data": {"description": "str", "key": "str", "roles": ["str"], "title": "str", "type": "str"},
                "file": "filetype",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_collection_assets_delete(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.stac_collection_assets.delete(
            collection_id="str",
            asset_id="str",
        )

        # please add some check logic here by yourself
        # ...
