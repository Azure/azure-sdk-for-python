# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import PlanetaryComputerPreparer
from testpreparer_async import PlanetaryComputerClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPlanetaryComputerStacItemsOperationsAsync(PlanetaryComputerClientTestBaseAsync):
    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_items_get_features(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.stac_items.get_features(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_items_begin_create(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await (
            await client.stac_items.begin_create(
                collection_id="str",
                body={
                    "assets": {
                        "str": {
                            "href": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "roles": ["str"],
                            "title": "str",
                            "type": "str",
                            "updated": "2020-02-20 00:00:00",
                        }
                    },
                    "bbox": [0.0],
                    "geometry": "geometry",
                    "id": "str",
                    "properties": {
                        "datetime": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "end_datetime": "2020-02-20 00:00:00",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "start_datetime": "2020-02-20 00:00:00",
                        "title": "str",
                        "updated": "2020-02-20 00:00:00",
                    },
                    "type": "Feature",
                    "_msft:etag": "str",
                    "_msft:ts": "str",
                    "collection": "str",
                    "links": [
                        {
                            "href": "str",
                            "body": {"str": {}},
                            "headers": {"str": "str"},
                            "hreflang": "str",
                            "length": 0,
                            "merge": bool,
                            "method": "GET",
                            "rel": "str",
                            "title": "str",
                            "type": "str",
                        }
                    ],
                    "msft:_created": "str",
                    "msft:_updated": "str",
                    "msft:short_description": "str",
                    "stac_extensions": ["str"],
                    "stac_version": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_items_get(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.stac_items.get(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_items_begin_create_or_replace(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await (
            await client.stac_items.begin_create_or_replace(
                collection_id="str",
                item_id="str",
                body={
                    "assets": {
                        "str": {
                            "href": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "roles": ["str"],
                            "title": "str",
                            "type": "str",
                            "updated": "2020-02-20 00:00:00",
                        }
                    },
                    "bbox": [0.0],
                    "geometry": "geometry",
                    "id": "str",
                    "properties": {
                        "datetime": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "end_datetime": "2020-02-20 00:00:00",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "start_datetime": "2020-02-20 00:00:00",
                        "title": "str",
                        "updated": "2020-02-20 00:00:00",
                    },
                    "type": "Feature",
                    "_msft:etag": "str",
                    "_msft:ts": "str",
                    "collection": "str",
                    "links": [
                        {
                            "href": "str",
                            "body": {"str": {}},
                            "headers": {"str": "str"},
                            "hreflang": "str",
                            "length": 0,
                            "merge": bool,
                            "method": "GET",
                            "rel": "str",
                            "title": "str",
                            "type": "str",
                        }
                    ],
                    "msft:_created": "str",
                    "msft:_updated": "str",
                    "msft:short_description": "str",
                    "stac_extensions": ["str"],
                    "stac_version": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_items_begin_update(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await (
            await client.stac_items.begin_update(
                collection_id="str",
                item_id="str",
                body={
                    "assets": {
                        "str": {
                            "href": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "roles": ["str"],
                            "title": "str",
                            "type": "str",
                            "updated": "2020-02-20 00:00:00",
                        }
                    },
                    "bbox": [0.0],
                    "geometry": "geometry",
                    "id": "str",
                    "properties": {
                        "datetime": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "end_datetime": "2020-02-20 00:00:00",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "start_datetime": "2020-02-20 00:00:00",
                        "title": "str",
                        "updated": "2020-02-20 00:00:00",
                    },
                    "type": "Feature",
                    "_msft:etag": "str",
                    "_msft:ts": "str",
                    "collection": "str",
                    "links": [
                        {
                            "href": "str",
                            "body": {"str": {}},
                            "headers": {"str": "str"},
                            "hreflang": "str",
                            "length": 0,
                            "merge": bool,
                            "method": "GET",
                            "rel": "str",
                            "title": "str",
                            "type": "str",
                        }
                    ],
                    "msft:_created": "str",
                    "msft:_updated": "str",
                    "msft:short_description": "str",
                    "stac_extensions": ["str"],
                    "stac_version": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_stac_items_begin_delete(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await (
            await client.stac_items.begin_delete(
                collection_id="str",
                item_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
