# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import PlanetaryComputerClientTestBase, PlanetaryComputerPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPlanetaryComputerStacOperations(PlanetaryComputerClientTestBase):
    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_create_collection_asset(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.create_collection_asset(
            collection_id="str",
            body={
                "data": {"description": "str", "key": "str", "roles": ["str"], "title": "str", "type": "str"},
                "file": "filetype",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_create_or_replace_collection_asset(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.create_or_replace_collection_asset(
            collection_id="str",
            asset_id="str",
            body={
                "data": {"description": "str", "key": "str", "roles": ["str"], "title": "str", "type": "str"},
                "file": "filetype",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_delete_collection_asset(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.delete_collection_asset(
            collection_id="str",
            asset_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_collection_configuration(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_collection_configuration(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_add_mosaic(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.add_mosaic(
            collection_id="str",
            body={"cql": [{"str": {}}], "id": "str", "name": "str", "description": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_create_or_replace_mosaic(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.create_or_replace_mosaic(
            collection_id="str",
            mosaic_id="str",
            body={"cql": [{"str": {}}], "id": "str", "name": "str", "description": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_delete_mosaic(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.delete_mosaic(
            collection_id="str",
            mosaic_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_mosaic(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_mosaic(
            collection_id="str",
            mosaic_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_list_mosaics(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.list_mosaics(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_begin_create_collection(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.begin_create_collection(
            body={
                "description": "str",
                "extent": {"spatial": {"bbox": [[0.0]]}, "temporal": {"interval": [["str"]]}},
                "id": "str",
                "license": "str",
                "links": [
                    {
                        "href": "str",
                        "body": {"str": {}},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "assets": {
                    "str": {
                        "href": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "roles": ["str"],
                        "title": "str",
                        "type": "str",
                        "updated": "2020-02-20 00:00:00",
                    }
                },
                "keywords": ["str"],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                "stac_extensions": ["str"],
                "stac_version": "str",
                "summaries": {"str": {}},
                "title": "str",
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_begin_create_or_replace_collection(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.begin_create_or_replace_collection(
            collection_id="str",
            body={
                "description": "str",
                "extent": {"spatial": {"bbox": [[0.0]]}, "temporal": {"interval": [["str"]]}},
                "id": "str",
                "license": "str",
                "links": [
                    {
                        "href": "str",
                        "body": {"str": {}},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "assets": {
                    "str": {
                        "href": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "roles": ["str"],
                        "title": "str",
                        "type": "str",
                        "updated": "2020-02-20 00:00:00",
                    }
                },
                "keywords": ["str"],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                "stac_extensions": ["str"],
                "stac_version": "str",
                "summaries": {"str": {}},
                "title": "str",
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_begin_delete_collection(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.begin_delete_collection(
            collection_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_collection(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_collection(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_list_collections(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.list_collections()

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_partition_type(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_partition_type(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_replace_partition_type(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.replace_partition_type(
            collection_id="str",
            body={"scheme": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_create_render_option(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.create_render_option(
            collection_id="str",
            body={
                "id": "str",
                "name": "str",
                "conditions": [{"property": "str", "value": "str"}],
                "description": "str",
                "legend": {"labels": ["str"], "scaleFactor": 0.0, "trimEnd": 0, "trimStart": 0, "type": "str"},
                "minZoom": 0,
                "options": "str",
                "type": "str",
                "vectorOptions": {
                    "sourceLayer": "str",
                    "tilejsonKey": "str",
                    "fillColor": "str",
                    "filter": ["str"],
                    "strokeColor": "str",
                    "strokeWidth": 0,
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_create_or_replace_render_option(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.create_or_replace_render_option(
            collection_id="str",
            render_option_id="str",
            body={
                "id": "str",
                "name": "str",
                "conditions": [{"property": "str", "value": "str"}],
                "description": "str",
                "legend": {"labels": ["str"], "scaleFactor": 0.0, "trimEnd": 0, "trimStart": 0, "type": "str"},
                "minZoom": 0,
                "options": "str",
                "type": "str",
                "vectorOptions": {
                    "sourceLayer": "str",
                    "tilejsonKey": "str",
                    "fillColor": "str",
                    "filter": ["str"],
                    "strokeColor": "str",
                    "strokeWidth": 0,
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_delete_render_option(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.delete_render_option(
            collection_id="str",
            render_option_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_render_option(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_render_option(
            collection_id="str",
            render_option_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_list_render_options(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.list_render_options(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_collection_thumbnail(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_collection_thumbnail(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_tile_settings(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_tile_settings(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_replace_tile_settings(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.replace_tile_settings(
            collection_id="str",
            body={"maxItemsPerTile": 0, "minZoom": 0, "defaultLocation": {"coordinates": [0.0], "zoom": 0}},
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_conformance_class(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_conformance_class()

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_begin_create_item(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.begin_create_item(
            collection_id="str",
            body={
                "assets": {
                    "str": {
                        "href": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "roles": ["str"],
                        "title": "str",
                        "type": "str",
                        "updated": "2020-02-20 00:00:00",
                    }
                },
                "bbox": [0.0],
                "geometry": "geometry",
                "id": "str",
                "properties": {
                    "datetime": "str",
                    "constellation": "str",
                    "created": "2020-02-20 00:00:00",
                    "description": "str",
                    "end_datetime": "2020-02-20 00:00:00",
                    "gsd": 0.0,
                    "instruments": ["str"],
                    "mission": "str",
                    "platform": "str",
                    "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                    "start_datetime": "2020-02-20 00:00:00",
                    "title": "str",
                    "updated": "2020-02-20 00:00:00",
                },
                "type": "Feature",
                "_msft:etag": "str",
                "_msft:ts": "str",
                "collection": "str",
                "links": [
                    {
                        "href": "str",
                        "body": {"str": {}},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "stac_extensions": ["str"],
                "stac_version": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_begin_create_or_replace_item(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.begin_create_or_replace_item(
            collection_id="str",
            item_id="str",
            body={
                "assets": {
                    "str": {
                        "href": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "roles": ["str"],
                        "title": "str",
                        "type": "str",
                        "updated": "2020-02-20 00:00:00",
                    }
                },
                "bbox": [0.0],
                "geometry": "geometry",
                "id": "str",
                "properties": {
                    "datetime": "str",
                    "constellation": "str",
                    "created": "2020-02-20 00:00:00",
                    "description": "str",
                    "end_datetime": "2020-02-20 00:00:00",
                    "gsd": 0.0,
                    "instruments": ["str"],
                    "mission": "str",
                    "platform": "str",
                    "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                    "start_datetime": "2020-02-20 00:00:00",
                    "title": "str",
                    "updated": "2020-02-20 00:00:00",
                },
                "type": "Feature",
                "_msft:etag": "str",
                "_msft:ts": "str",
                "collection": "str",
                "links": [
                    {
                        "href": "str",
                        "body": {"str": {}},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "stac_extensions": ["str"],
                "stac_version": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_begin_delete_item(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.begin_delete_item(
            collection_id="str",
            item_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_item(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_item(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_list_items(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.list_items(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_begin_update_item(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.begin_update_item(
            collection_id="str",
            item_id="str",
            body={
                "assets": {
                    "str": {
                        "href": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "roles": ["str"],
                        "title": "str",
                        "type": "str",
                        "updated": "2020-02-20 00:00:00",
                    }
                },
                "bbox": [0.0],
                "geometry": "geometry",
                "id": "str",
                "properties": {
                    "datetime": "str",
                    "constellation": "str",
                    "created": "2020-02-20 00:00:00",
                    "description": "str",
                    "end_datetime": "2020-02-20 00:00:00",
                    "gsd": 0.0,
                    "instruments": ["str"],
                    "mission": "str",
                    "platform": "str",
                    "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                    "start_datetime": "2020-02-20 00:00:00",
                    "title": "str",
                    "updated": "2020-02-20 00:00:00",
                },
                "type": "Feature",
                "_msft:etag": "str",
                "_msft:ts": "str",
                "collection": "str",
                "links": [
                    {
                        "href": "str",
                        "body": {"str": {}},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "stac_extensions": ["str"],
                "stac_version": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_get_stac_landing_page(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.get_stac_landing_page()

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_create_queryables(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.create_queryables(
            collection_id="str",
            body=[{"definition": {"str": {}}, "name": "str", "create_index": bool, "data_type": "str"}],
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_create_or_replace_queryable(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.create_or_replace_queryable(
            collection_id="str",
            queryable_name="str",
            body={"definition": {"str": {}}, "name": "str", "create_index": bool, "data_type": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_delete_queryable(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.delete_queryable(
            collection_id="str",
            queryable_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_list_queryables(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.list_queryables()

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_list_queryables_by_collection(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.list_queryables_by_collection(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_search(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac.search(
            body={
                "bbox": [0.0],
                "collections": ["str"],
                "conf": {"str": {}},
                "datetime": "str",
                "duration": 0,
                "fields": [{"exclude": ["str"], "include": ["str"]}],
                "filter": {"str": {}},
                "filter-crs": "str",
                "filter-lang": "str",
                "ids": ["str"],
                "intersects": "geometry",
                "limit": 0,
                "query": {"str": {}},
                "sign": "str",
                "sortby": [{"direction": "str", "field": "str"}],
                "token": "str",
            },
        )

        # please add some check logic here by yourself
        # ...
