# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import PlanetaryComputerClientTestBase, PlanetaryComputerPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPlanetaryComputerIngestionOperations(PlanetaryComputerClientTestBase):
    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_cancel_operation(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.cancel_operation(
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_cancel_all_operations(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.cancel_all_operations()

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_get_operation(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.get_operation(
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_list_operations(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.list_operations()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_create_run(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.create_run(
            collection_id="str",
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_get_run(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.get_run(
            collection_id="str",
            ingestion_id="str",
            run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_list_runs(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.list_runs(
            collection_id="str",
            ingestion_id="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_create(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.create(
            collection_id="str",
            definition={
                "creationTime": "2020-02-20 00:00:00",
                "id": "str",
                "importType": "str",
                "status": "str",
                "displayName": "str",
                "keepOriginalAssets": bool,
                "skipExistingItems": bool,
                "sourceCatalogUrl": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_begin_delete(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.begin_delete(
            collection_id="str",
            ingestion_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_get(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.get(
            collection_id="str",
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_lists(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.lists(
            collection_id="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_update(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.update(
            collection_id="str",
            ingestion_id="str",
            definition={
                "creationTime": "2020-02-20 00:00:00",
                "id": "str",
                "importType": "str",
                "status": "str",
                "displayName": "str",
                "keepOriginalAssets": bool,
                "skipExistingItems": bool,
                "sourceCatalogUrl": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_create_source(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.create_source(
            ingestion_source={
                "connectionInfo": {"containerUrl": "str", "objectId": "str"},
                "created": "2020-02-20 00:00:00",
                "id": "str",
                "kind": "BlobManagedIdentity",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_create_or_replace_source(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.create_or_replace_source(
            id="str",
            ingestion_source={
                "connectionInfo": {"containerUrl": "str", "objectId": "str"},
                "created": "2020-02-20 00:00:00",
                "id": "str",
                "kind": "BlobManagedIdentity",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_delete_source(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.delete_source(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_get_source(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.get_source(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_list_sources(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.list_sources()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_ingestion_list_managed_identities(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.ingestion.list_managed_identities()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
