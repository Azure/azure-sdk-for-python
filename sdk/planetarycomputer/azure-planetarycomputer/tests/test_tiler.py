# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import TilerClientTestBase, TilerPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestTiler(TilerClientTestBase):
    @TilerPreparer()
    @recorded_by_proxy
    def test_get_tile_matrix_definitions(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_tile_matrix_definitions(
            tile_matrix_set_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_tile_matrix_list(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_tile_matrix_list()

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_asset_statistics(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_asset_statistics(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_available_assets(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_available_assets(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_bounds(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_bounds(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_crop_geo_json(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.crop_geo_json(
            collection_id="str",
            item_id="str",
            format="str",
            body={"coordinates": [0.0], "type": "LineString", "bbox": [0.0]},
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_crop_geo_json_with_dimensions(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.crop_geo_json_with_dimensions(
            collection_id="str",
            item_id="str",
            width=0.0,
            height=0.0,
            format="str",
            body={
                "assets": {
                    "str": {
                        "href": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "roles": ["str"],
                        "title": "str",
                        "type": "str",
                        "updated": "2020-02-20 00:00:00",
                    }
                },
                "bbox": [0.0],
                "geometry": "geometry",
                "id": "str",
                "properties": {
                    "datetime": "str",
                    "constellation": "str",
                    "created": "2020-02-20 00:00:00",
                    "description": "str",
                    "end_datetime": "2020-02-20 00:00:00",
                    "gsd": 0.0,
                    "instruments": ["str"],
                    "mission": "str",
                    "platform": "str",
                    "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                    "start_datetime": "2020-02-20 00:00:00",
                    "title": "str",
                    "updated": "2020-02-20 00:00:00",
                },
                "type": "Feature",
                "_msft:etag": "str",
                "_msft:ts": "str",
                "collection": "str",
                "links": [
                    {
                        "href": "str",
                        "body": {"str": {}},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "stac_extensions": ["str"],
                "stac_version": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_geo_json_statistics(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_geo_json_statistics(
            collection_id="str",
            item_id="str",
            body={
                "features": [
                    {
                        "assets": {
                            "str": {
                                "href": "str",
                                "constellation": "str",
                                "created": "2020-02-20 00:00:00",
                                "description": "str",
                                "gsd": 0.0,
                                "instruments": ["str"],
                                "mission": "str",
                                "platform": "str",
                                "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                                "roles": ["str"],
                                "title": "str",
                                "type": "str",
                                "updated": "2020-02-20 00:00:00",
                            }
                        },
                        "bbox": [0.0],
                        "geometry": "geometry",
                        "id": "str",
                        "properties": {
                            "datetime": "str",
                            "constellation": "str",
                            "created": "2020-02-20 00:00:00",
                            "description": "str",
                            "end_datetime": "2020-02-20 00:00:00",
                            "gsd": 0.0,
                            "instruments": ["str"],
                            "mission": "str",
                            "platform": "str",
                            "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                            "start_datetime": "2020-02-20 00:00:00",
                            "title": "str",
                            "updated": "2020-02-20 00:00:00",
                        },
                        "type": "Feature",
                        "_msft:etag": "str",
                        "_msft:ts": "str",
                        "collection": "str",
                        "links": [
                            {
                                "href": "str",
                                "body": {"str": {}},
                                "headers": {"str": "str"},
                                "hreflang": "str",
                                "length": 0,
                                "merge": bool,
                                "method": "GET",
                                "rel": "str",
                                "title": "str",
                                "type": "str",
                            }
                        ],
                        "msft:_created": "str",
                        "msft:_updated": "str",
                        "msft:short_description": "str",
                        "stac_extensions": ["str"],
                        "stac_version": "str",
                    }
                ],
                "type": "FeatureCollection",
                "bbox": [0.0],
                "context": {"returned": 0, "limit": 0, "matched": 0},
                "links": [
                    {
                        "href": "str",
                        "body": {"str": {}},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "stac_extensions": ["str"],
                "stac_version": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_info_geo_json(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_info_geo_json(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_info(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_info(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_part(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_part(
            collection_id="str",
            item_id="str",
            minx=0.0,
            miny=0.0,
            maxx=0.0,
            maxy=0.0,
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_part_with_dimensions(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_part_with_dimensions(
            collection_id="str",
            item_id="str",
            minx=0.0,
            miny=0.0,
            maxx=0.0,
            maxy=0.0,
            width=0.0,
            height=0.0,
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_point(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_point(
            collection_id="str",
            item_id="str",
            lon=0.0,
            lat=0.0,
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_preview(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_preview(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_preview_with_format(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_preview_with_format(
            collection_id="str",
            item_id="str",
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_create_static_image(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.create_static_image(
            collection_id="str",
            body={
                "cols": 0,
                "cql": {},
                "render_params": "str",
                "rows": 0,
                "format": "str",
                "geometry": "geometry",
                "mask": bool,
                "showBranding": bool,
            },
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_static_image(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_static_image(
            collection_id="str",
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_statistics(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_statistics(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_tile_json(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_tile_json(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_tile_json_with_matrix_set(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_tile_json_with_matrix_set(
            collection_id="str",
            item_id="str",
            tile_matrix_set_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_tile_with_matrix_set(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_tile_with_matrix_set(
            collection_id="str",
            item_id="str",
            tile_matrix_set_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
            scale=0.0,
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_tile(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_tile(
            collection_id="str",
            item_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
            scale=0.0,
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_wmts_capabilities(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_wmts_capabilities(
            collection_id="str",
            item_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_wmts_capabilities_with_matrix_set(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_wmts_capabilities_with_matrix_set(
            collection_id="str",
            item_id="str",
            tile_matrix_set_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_classmap_legend(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_classmap_legend(
            classmap_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_interval_legend(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_interval_legend(
            classmap_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_legend(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_legend(
            cmap_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_assets_for_point(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_assets_for_point(
            search_id="str",
            lon=0.0,
            lat=0.0,
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_assets_for_tile_with_matrix_set(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_assets_for_tile_with_matrix_set(
            search_id="str",
            tile_matrix_set_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_assets_for_tile(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_assets_for_tile(
            search_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_search_info(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_search_info(
            search_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_register_mosaics_search(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.register_mosaics_search(
            body={
                "bbox": 0.0,
                "collections": ["str"],
                "datetime": "str",
                "filter": {},
                "filter-lang": "str",
                "ids": ["str"],
                "intersects": "geometry",
                "metadata": {
                    "assets": ["str"],
                    "bounds": "str",
                    "defaults": {"str": "str"},
                    "maxzoom": 0,
                    "minzoom": 0,
                    "name": "str",
                    "type": "str",
                },
                "query": {},
                "sortby": [{"direction": "str", "field": "str"}],
            },
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_tile_json(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_tile_json(
            search_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_tile_with_matrix_set(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_tile_with_matrix_set(
            search_id="str",
            tile_matrix_set_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
            scale=0.0,
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_tile_json_with_matrix_set(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_tile_json_with_matrix_set(
            search_id="str",
            tile_matrix_set_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_tile(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_tile(
            search_id="str",
            z=0.0,
            x=0.0,
            y=0.0,
            scale=0.0,
            format="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_wmts_capabilities(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_wmts_capabilities(
            search_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TilerPreparer()
    @recorded_by_proxy
    def test_get_mosaics_wmts_capabilities_with_matrix_set(self, tiler_endpoint):
        client = self.create_client(endpoint=tiler_endpoint)
        response = client.get_mosaics_wmts_capabilities_with_matrix_set(
            search_id="str",
            tile_matrix_set_id="str",
        )

        # please add some check logic here by yourself
        # ...
