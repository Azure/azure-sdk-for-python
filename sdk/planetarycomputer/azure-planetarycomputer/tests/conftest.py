# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import os
import time
import pytest
from dotenv import load_dotenv
from devtools_testutils import (
    test_proxy,
    add_general_regex_sanitizer,
    add_body_key_sanitizer,
    add_header_regex_sanitizer,
    is_live,
)
from azure.planetarycomputer.models import (
    StacCollection,
    StacExtensionSpatialExtent,
    StacCollectionTemporalExtent,
    StacExtensionExtent,
)

load_dotenv()


# For security, please avoid record sensitive identity information in recordings
@pytest.fixture(scope="session", autouse=True)
def add_sanitizers(test_proxy):
    # Remove default AZSDK sanitizers that would sanitize collection_id and item_id
    # These are public data and should not be sanitized
    from devtools_testutils import remove_batch_sanitizers
    remove_batch_sanitizers(["AZSDK3493", "AZSDK3430"])
    
    planetarycomputer_subscription_id = os.environ.get(
        "PLANETARYCOMPUTER_SUBSCRIPTION_ID", "00000000-0000-0000-0000-000000000000"
    )
    planetarycomputer_tenant_id = os.environ.get("PLANETARYCOMPUTER_TENANT_ID", "00000000-0000-0000-0000-000000000000")
    planetarycomputer_client_id = os.environ.get("PLANETARYCOMPUTER_CLIENT_ID", "00000000-0000-0000-0000-000000000000")
    planetarycomputer_client_secret = os.environ.get(
        "PLANETARYCOMPUTER_CLIENT_SECRET", "00000000-0000-0000-0000-000000000000"
    )
    add_general_regex_sanitizer(regex=planetarycomputer_subscription_id, value="00000000-0000-0000-0000-000000000000")
    add_general_regex_sanitizer(regex=planetarycomputer_tenant_id, value="00000000-0000-0000-0000-000000000000")
    add_general_regex_sanitizer(regex=planetarycomputer_client_id, value="00000000-0000-0000-0000-000000000000")
    add_general_regex_sanitizer(regex=planetarycomputer_client_secret, value="00000000-0000-0000-0000-000000000000")

    add_header_regex_sanitizer(key="Set-Cookie", value="[set-cookie;]")
    add_header_regex_sanitizer(key="Cookie", value="cookie;")
    add_body_key_sanitizer(json_path="$..access_token", value="access_token")
    
    # Sanitize request tracking headers
    add_header_regex_sanitizer(key="X-Request-ID", value="00000000000000000000000000000000")
    add_header_regex_sanitizer(key="Date", value="Mon, 01 Jan 2024 00:00:00 GMT")
    add_header_regex_sanitizer(key="Server-Timing", value="total;dur=0.0")
    add_header_regex_sanitizer(key="traceparent", value="00-00000000000000000000000000000000-0000000000000000-00")
    add_header_regex_sanitizer(key="Content-Length", value="100000")
    add_header_regex_sanitizer(key="mise-correlation-id", value="00000000-0000-0000-0000-000000000000")
    
    # Add URI sanitizer to sanitize the actual endpoint hostname
    # The recordings will have hostnames sanitized with descriptive placeholders
    # This allows playback mode to work regardless of the actual endpoint
    from devtools_testutils import add_uri_regex_sanitizer
    # Sanitize any geocatalog endpoint to a descriptive placeholder
    # This regex matches: SANITIZED_GEOCATALOG.SANITIZED_LABEL.SANITIZED_LOCATION.geocatalog.spatio.azure.com
    #                 or: endpoint.geocatalog.azure.com
    #                 or: any similar geocatalog hostname
    add_uri_regex_sanitizer(
        regex=r"[a-zA-Z0-9\-\.]+\.geocatalog\.[a-zA-Z0-9\-\.]+\.azure\.com", 
        value="SANITIZED_GEOCATALOG.SANITIZED_LABEL.SANITIZED_LOCATION.geocatalog.spatio.azure.com"
    )
    add_uri_regex_sanitizer(
        regex=r"[a-zA-Z0-9\-\.]+\.geocatalog\.azure\.com", 
        value="SANITIZED_GEOCATALOG.SANITIZED_LABEL.SANITIZED_LOCATION.geocatalog.spatio.azure.com"
    )
    
    # Sanitize storage account URLs in request URIs
    # This regex matches: vojrtgdatasa.blob.core.windows.net or any other storage account
    add_uri_regex_sanitizer(
        regex=r"[a-zA-Z0-9\-]+\.blob\.core\.windows\.net", 
        value="SANITIZED_STORAGE.blob.core.windows.net"
    )
    
    # Sanitize storage account URLs in response bodies
    # Use body regex sanitizer to replace storage account URLs in JSON response bodies
    from devtools_testutils import add_body_regex_sanitizer
    add_body_regex_sanitizer(
        regex=r"[a-zA-Z0-9\-]+\.blob\.core\.windows\.net",
        value="SANITIZED_STORAGE.blob.core.windows.net"
    )
    
    # Prevent double-sanitization of already-sanitized storage URLs in query parameters
    # When playback mode re-applies sanitizers, this ensures SANITIZED_STORAGE stays as-is
    add_uri_regex_sanitizer(
        regex=r"SANITIZED_[A-Z_]*STORAGE\.blob\.core\.windows\.net",
        value="SANITIZED_STORAGE.blob.core.windows.net"
    )
