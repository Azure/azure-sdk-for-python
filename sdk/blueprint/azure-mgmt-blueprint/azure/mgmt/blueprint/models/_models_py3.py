# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, List, Optional, Union

import msrest.serialization

from ._blueprint_management_client_enums import *


class AzureResourceBase(msrest.serialization.Model):
    """Common properties for all Azure resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AzureResourceBase, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None


class Artifact(AzureResourceBase):
    """Represents a blueprint artifact.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: PolicyAssignmentArtifact, RoleAssignmentArtifact, TemplateArtifact.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param kind: Required. Specifies the kind of blueprint artifact.Constant filled by server.
     Possible values include: "template", "roleAssignment", "policyAssignment".
    :type kind: str or ~blueprint_management_client.models.ArtifactKind
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'policyAssignment': 'PolicyAssignmentArtifact', 'roleAssignment': 'RoleAssignmentArtifact', 'template': 'TemplateArtifact'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Artifact, self).__init__(**kwargs)
        self.kind = 'Artifact'  # type: str


class ArtifactList(msrest.serialization.Model):
    """List of blueprint artifacts.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: List of blueprint artifacts.
    :type value: list[~blueprint_management_client.models.Artifact]
    :ivar next_link: Link to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Artifact]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Artifact"]] = None,
        **kwargs
    ):
        super(ArtifactList, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class ArtifactPropertiesBase(msrest.serialization.Model):
    """Common properties shared by different artifacts.

    :param depends_on: Artifacts which need to be deployed before the specified artifact.
    :type depends_on: list[str]
    """

    _attribute_map = {
        'depends_on': {'key': 'dependsOn', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        depends_on: Optional[List[str]] = None,
        **kwargs
    ):
        super(ArtifactPropertiesBase, self).__init__(**kwargs)
        self.depends_on = depends_on


class TrackedResource(AzureResourceBase):
    """Common properties for all Azure tracked resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param location: Required. The location of this blueprint assignment.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.location = location


class Assignment(TrackedResource):
    """Represents a blueprint assignment.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param location: Required. The location of this blueprint assignment.
    :type location: str
    :param identity: Required. Managed identity for this blueprint assignment.
    :type identity: ~blueprint_management_client.models.ManagedServiceIdentity
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :param blueprint_id: ID of the published version of a blueprint definition.
    :type blueprint_id: str
    :param scope: The target subscription scope of the blueprint assignment (format:
     '/subscriptions/{subscriptionId}'). For management group level assignments, the property is
     required.
    :type scope: str
    :param parameters: Required. Blueprint assignment parameter values.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterValue]
    :param resource_groups: Required. Names and locations of resource group placeholders.
    :type resource_groups: dict[str, ~blueprint_management_client.models.ResourceGroupValue]
    :ivar status: Status of blueprint assignment. This field is readonly.
    :vartype status: ~blueprint_management_client.models.AssignmentStatus
    :param locks: Defines how resources deployed by a blueprint assignment are locked.
    :type locks: ~blueprint_management_client.models.AssignmentLockSettings
    :ivar provisioning_state: State of the blueprint assignment. Possible values include:
     "creating", "validating", "waiting", "deploying", "cancelling", "locking", "succeeded",
     "failed", "canceled", "deleting".
    :vartype provisioning_state: str or
     ~blueprint_management_client.models.AssignmentProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'location': {'required': True},
        'identity': {'required': True},
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'parameters': {'required': True},
        'resource_groups': {'required': True},
        'status': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'blueprint_id': {'key': 'properties.blueprintId', 'type': 'str'},
        'scope': {'key': 'properties.scope', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': '{ParameterValue}'},
        'resource_groups': {'key': 'properties.resourceGroups', 'type': '{ResourceGroupValue}'},
        'status': {'key': 'properties.status', 'type': 'AssignmentStatus'},
        'locks': {'key': 'properties.locks', 'type': 'AssignmentLockSettings'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        identity: "ManagedServiceIdentity",
        parameters: Dict[str, "ParameterValue"],
        resource_groups: Dict[str, "ResourceGroupValue"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        blueprint_id: Optional[str] = None,
        scope: Optional[str] = None,
        locks: Optional["AssignmentLockSettings"] = None,
        **kwargs
    ):
        super(Assignment, self).__init__(location=location, **kwargs)
        self.identity = identity
        self.display_name = display_name
        self.description = description
        self.blueprint_id = blueprint_id
        self.scope = scope
        self.parameters = parameters
        self.resource_groups = resource_groups
        self.status = None
        self.locks = locks
        self.provisioning_state = None


class AssignmentDeploymentJob(msrest.serialization.Model):
    """Represents individual job in given blueprint assignment operation.

    :param kind: Kind of job.
    :type kind: str
    :param action: Name of the action performed in this job.
    :type action: str
    :param job_id: Id of this job.
    :type job_id: str
    :param job_state: State of this job.
    :type job_state: str
    :param result: Deployment job result.
    :type result: ~blueprint_management_client.models.AssignmentDeploymentJobResult
    :param history: Result of this deployment job for each retry.
    :type history: list[~blueprint_management_client.models.AssignmentDeploymentJobResult]
    :param request_uri: Reference to deployment job resource id.
    :type request_uri: str
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'job_state': {'key': 'jobState', 'type': 'str'},
        'result': {'key': 'result', 'type': 'AssignmentDeploymentJobResult'},
        'history': {'key': 'history', 'type': '[AssignmentDeploymentJobResult]'},
        'request_uri': {'key': 'requestUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        action: Optional[str] = None,
        job_id: Optional[str] = None,
        job_state: Optional[str] = None,
        result: Optional["AssignmentDeploymentJobResult"] = None,
        history: Optional[List["AssignmentDeploymentJobResult"]] = None,
        request_uri: Optional[str] = None,
        **kwargs
    ):
        super(AssignmentDeploymentJob, self).__init__(**kwargs)
        self.kind = kind
        self.action = action
        self.job_id = job_id
        self.job_state = job_state
        self.result = result
        self.history = history
        self.request_uri = request_uri


class AssignmentDeploymentJobResult(msrest.serialization.Model):
    """Result of each individual deployment in a blueprint assignment.

    :param error: Contains error details if deployment job failed.
    :type error: ~blueprint_management_client.models.AzureResourceManagerError
    :param resources: Resources created as result of the deployment job.
    :type resources: list[~blueprint_management_client.models.AssignmentJobCreatedResource]
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'AzureResourceManagerError'},
        'resources': {'key': 'resources', 'type': '[AssignmentJobCreatedResource]'},
    }

    def __init__(
        self,
        *,
        error: Optional["AzureResourceManagerError"] = None,
        resources: Optional[List["AssignmentJobCreatedResource"]] = None,
        **kwargs
    ):
        super(AssignmentDeploymentJobResult, self).__init__(**kwargs)
        self.error = error
        self.resources = resources


class AssignmentJobCreatedResource(AzureResourceBase):
    """Azure resource created from deployment job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param properties: Additional properties in a dictionary.
    :type properties: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        properties: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(AssignmentJobCreatedResource, self).__init__(**kwargs)
        self.properties = properties


class AssignmentList(msrest.serialization.Model):
    """List of blueprint assignments.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: List of blueprint assignments.
    :type value: list[~blueprint_management_client.models.Assignment]
    :ivar next_link: Link to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Assignment]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Assignment"]] = None,
        **kwargs
    ):
        super(AssignmentList, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class AssignmentLockSettings(msrest.serialization.Model):
    """Defines how resources deployed by a blueprint assignment are locked.

    :param mode: Lock mode. Possible values include: "None", "AllResourcesReadOnly",
     "AllResourcesDoNotDelete".
    :type mode: str or ~blueprint_management_client.models.AssignmentLockMode
    :param excluded_principals: List of AAD principals excluded from blueprint locks. Up to 5
     principals are permitted.
    :type excluded_principals: list[str]
    :param excluded_actions:
     List of management operations that are excluded from blueprint locks. Up to 200 actions are permitted.
     If the lock mode is set to 'AllResourcesReadOnly', then the following actions are automatically
     appended to 'excludedActions': '*/read',
     'Microsoft.Network/virtualNetworks/subnets/join/action' and
     'Microsoft.Authorization/locks/delete'. If the lock mode is set to 'AllResourcesDoNotDelete',
     then the following actions are automatically appended to 'excludedActions':
     'Microsoft.Authorization/locks/delete'. Duplicate actions will get removed.
    :type excluded_actions: list[str]
    """

    _attribute_map = {
        'mode': {'key': 'mode', 'type': 'str'},
        'excluded_principals': {'key': 'excludedPrincipals', 'type': '[str]'},
        'excluded_actions': {'key': 'excludedActions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        mode: Optional[Union[str, "AssignmentLockMode"]] = None,
        excluded_principals: Optional[List[str]] = None,
        excluded_actions: Optional[List[str]] = None,
        **kwargs
    ):
        super(AssignmentLockSettings, self).__init__(**kwargs)
        self.mode = mode
        self.excluded_principals = excluded_principals
        self.excluded_actions = excluded_actions


class AssignmentOperation(AzureResourceBase):
    """Represents underlying deployment detail for each update to the blueprint assignment.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param blueprint_version: The published version of the blueprint definition used for the
     blueprint assignment operation.
    :type blueprint_version: str
    :param assignment_state: State of this blueprint assignment operation.
    :type assignment_state: str
    :param time_created: Create time of this blueprint assignment operation.
    :type time_created: str
    :param time_started: Start time of the underlying deployment.
    :type time_started: str
    :param time_finished: Finish time of the overall underlying deployments.
    :type time_finished: str
    :param deployments: List of jobs in this blueprint assignment operation.
    :type deployments: list[~blueprint_management_client.models.AssignmentDeploymentJob]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'blueprint_version': {'key': 'properties.blueprintVersion', 'type': 'str'},
        'assignment_state': {'key': 'properties.assignmentState', 'type': 'str'},
        'time_created': {'key': 'properties.timeCreated', 'type': 'str'},
        'time_started': {'key': 'properties.timeStarted', 'type': 'str'},
        'time_finished': {'key': 'properties.timeFinished', 'type': 'str'},
        'deployments': {'key': 'properties.deployments', 'type': '[AssignmentDeploymentJob]'},
    }

    def __init__(
        self,
        *,
        blueprint_version: Optional[str] = None,
        assignment_state: Optional[str] = None,
        time_created: Optional[str] = None,
        time_started: Optional[str] = None,
        time_finished: Optional[str] = None,
        deployments: Optional[List["AssignmentDeploymentJob"]] = None,
        **kwargs
    ):
        super(AssignmentOperation, self).__init__(**kwargs)
        self.blueprint_version = blueprint_version
        self.assignment_state = assignment_state
        self.time_created = time_created
        self.time_started = time_started
        self.time_finished = time_finished
        self.deployments = deployments


class AssignmentOperationList(msrest.serialization.Model):
    """List of AssignmentOperation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: List of AssignmentOperation.
    :type value: list[~blueprint_management_client.models.AssignmentOperation]
    :ivar next_link: Link to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AssignmentOperation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["AssignmentOperation"]] = None,
        **kwargs
    ):
        super(AssignmentOperationList, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class BlueprintResourcePropertiesBase(msrest.serialization.Model):
    """Shared properties between all blueprint resources.

    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(BlueprintResourcePropertiesBase, self).__init__(**kwargs)
        self.display_name = display_name
        self.description = description


class AssignmentProperties(BlueprintResourcePropertiesBase):
    """Detailed properties for a blueprint assignment.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :param blueprint_id: ID of the published version of a blueprint definition.
    :type blueprint_id: str
    :param scope: The target subscription scope of the blueprint assignment (format:
     '/subscriptions/{subscriptionId}'). For management group level assignments, the property is
     required.
    :type scope: str
    :param parameters: Required. Blueprint assignment parameter values.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterValue]
    :param resource_groups: Required. Names and locations of resource group placeholders.
    :type resource_groups: dict[str, ~blueprint_management_client.models.ResourceGroupValue]
    :ivar status: Status of blueprint assignment. This field is readonly.
    :vartype status: ~blueprint_management_client.models.AssignmentStatus
    :param locks: Defines how resources deployed by a blueprint assignment are locked.
    :type locks: ~blueprint_management_client.models.AssignmentLockSettings
    :ivar provisioning_state: State of the blueprint assignment. Possible values include:
     "creating", "validating", "waiting", "deploying", "cancelling", "locking", "succeeded",
     "failed", "canceled", "deleting".
    :vartype provisioning_state: str or
     ~blueprint_management_client.models.AssignmentProvisioningState
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'parameters': {'required': True},
        'resource_groups': {'required': True},
        'status': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'blueprint_id': {'key': 'blueprintId', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{ParameterValue}'},
        'resource_groups': {'key': 'resourceGroups', 'type': '{ResourceGroupValue}'},
        'status': {'key': 'status', 'type': 'AssignmentStatus'},
        'locks': {'key': 'locks', 'type': 'AssignmentLockSettings'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        parameters: Dict[str, "ParameterValue"],
        resource_groups: Dict[str, "ResourceGroupValue"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        blueprint_id: Optional[str] = None,
        scope: Optional[str] = None,
        locks: Optional["AssignmentLockSettings"] = None,
        **kwargs
    ):
        super(AssignmentProperties, self).__init__(display_name=display_name, description=description, **kwargs)
        self.blueprint_id = blueprint_id
        self.scope = scope
        self.parameters = parameters
        self.resource_groups = resource_groups
        self.status = None
        self.locks = locks
        self.provisioning_state = None


class BlueprintResourceStatusBase(msrest.serialization.Model):
    """Shared status properties between all blueprint resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar time_created: Creation time of this blueprint definition.
    :vartype time_created: ~datetime.datetime
    :ivar last_modified: Last modified time of this blueprint definition.
    :vartype last_modified: ~datetime.datetime
    """

    _validation = {
        'time_created': {'readonly': True},
        'last_modified': {'readonly': True},
    }

    _attribute_map = {
        'time_created': {'key': 'timeCreated', 'type': 'iso-8601'},
        'last_modified': {'key': 'lastModified', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BlueprintResourceStatusBase, self).__init__(**kwargs)
        self.time_created = None
        self.last_modified = None


class AssignmentStatus(BlueprintResourceStatusBase):
    """The status of a blueprint assignment. This field is readonly.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar time_created: Creation time of this blueprint definition.
    :vartype time_created: ~datetime.datetime
    :ivar last_modified: Last modified time of this blueprint definition.
    :vartype last_modified: ~datetime.datetime
    :ivar managed_resources: List of resources that were created by the blueprint assignment.
    :vartype managed_resources: list[str]
    """

    _validation = {
        'time_created': {'readonly': True},
        'last_modified': {'readonly': True},
        'managed_resources': {'readonly': True},
    }

    _attribute_map = {
        'time_created': {'key': 'timeCreated', 'type': 'iso-8601'},
        'last_modified': {'key': 'lastModified', 'type': 'iso-8601'},
        'managed_resources': {'key': 'managedResources', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AssignmentStatus, self).__init__(**kwargs)
        self.managed_resources = None


class AzureResourceManagerError(msrest.serialization.Model):
    """Error code and message.

    :param code: Error code.
    :type code: str
    :param message: Error message.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(AzureResourceManagerError, self).__init__(**kwargs)
        self.code = code
        self.message = message


class Blueprint(AzureResourceBase):
    """Represents a Blueprint definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :ivar status: Status of the blueprint. This field is readonly.
    :vartype status: ~blueprint_management_client.models.BlueprintStatus
    :param target_scope: The scope where this blueprint definition can be assigned. Possible values
     include: "subscription", "managementGroup".
    :type target_scope: str or ~blueprint_management_client.models.BlueprintTargetScope
    :param parameters: Parameters required by this blueprint definition.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterDefinition]
    :param resource_groups: Resource group placeholders defined by this blueprint definition.
    :type resource_groups: dict[str, ~blueprint_management_client.models.ResourceGroupDefinition]
    :param versions: Published versions of this blueprint definition.
    :type versions: any
    :ivar layout: Layout view of the blueprint definition for UI reference.
    :vartype layout: any
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'status': {'readonly': True},
        'layout': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'BlueprintStatus'},
        'target_scope': {'key': 'properties.targetScope', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': '{ParameterDefinition}'},
        'resource_groups': {'key': 'properties.resourceGroups', 'type': '{ResourceGroupDefinition}'},
        'versions': {'key': 'properties.versions', 'type': 'object'},
        'layout': {'key': 'properties.layout', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        target_scope: Optional[Union[str, "BlueprintTargetScope"]] = None,
        parameters: Optional[Dict[str, "ParameterDefinition"]] = None,
        resource_groups: Optional[Dict[str, "ResourceGroupDefinition"]] = None,
        versions: Optional[Any] = None,
        **kwargs
    ):
        super(Blueprint, self).__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.status = None
        self.target_scope = target_scope
        self.parameters = parameters
        self.resource_groups = resource_groups
        self.versions = versions
        self.layout = None


class BlueprintList(msrest.serialization.Model):
    """List of blueprint definitions.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: List of blueprint definitions.
    :type value: list[~blueprint_management_client.models.Blueprint]
    :ivar next_link: Link to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Blueprint]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Blueprint"]] = None,
        **kwargs
    ):
        super(BlueprintList, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class SharedBlueprintProperties(BlueprintResourcePropertiesBase):
    """Shared Schema for both blueprintProperties and publishedBlueprintProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :ivar status: Status of the blueprint. This field is readonly.
    :vartype status: ~blueprint_management_client.models.BlueprintStatus
    :param target_scope: The scope where this blueprint definition can be assigned. Possible values
     include: "subscription", "managementGroup".
    :type target_scope: str or ~blueprint_management_client.models.BlueprintTargetScope
    :param parameters: Parameters required by this blueprint definition.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterDefinition]
    :param resource_groups: Resource group placeholders defined by this blueprint definition.
    :type resource_groups: dict[str, ~blueprint_management_client.models.ResourceGroupDefinition]
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'BlueprintStatus'},
        'target_scope': {'key': 'targetScope', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{ParameterDefinition}'},
        'resource_groups': {'key': 'resourceGroups', 'type': '{ResourceGroupDefinition}'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        target_scope: Optional[Union[str, "BlueprintTargetScope"]] = None,
        parameters: Optional[Dict[str, "ParameterDefinition"]] = None,
        resource_groups: Optional[Dict[str, "ResourceGroupDefinition"]] = None,
        **kwargs
    ):
        super(SharedBlueprintProperties, self).__init__(display_name=display_name, description=description, **kwargs)
        self.status = None
        self.target_scope = target_scope
        self.parameters = parameters
        self.resource_groups = resource_groups


class BlueprintProperties(SharedBlueprintProperties):
    """Schema for blueprint definition properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :ivar status: Status of the blueprint. This field is readonly.
    :vartype status: ~blueprint_management_client.models.BlueprintStatus
    :param target_scope: The scope where this blueprint definition can be assigned. Possible values
     include: "subscription", "managementGroup".
    :type target_scope: str or ~blueprint_management_client.models.BlueprintTargetScope
    :param parameters: Parameters required by this blueprint definition.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterDefinition]
    :param resource_groups: Resource group placeholders defined by this blueprint definition.
    :type resource_groups: dict[str, ~blueprint_management_client.models.ResourceGroupDefinition]
    :param versions: Published versions of this blueprint definition.
    :type versions: any
    :ivar layout: Layout view of the blueprint definition for UI reference.
    :vartype layout: any
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'status': {'readonly': True},
        'layout': {'readonly': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'BlueprintStatus'},
        'target_scope': {'key': 'targetScope', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{ParameterDefinition}'},
        'resource_groups': {'key': 'resourceGroups', 'type': '{ResourceGroupDefinition}'},
        'versions': {'key': 'versions', 'type': 'object'},
        'layout': {'key': 'layout', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        target_scope: Optional[Union[str, "BlueprintTargetScope"]] = None,
        parameters: Optional[Dict[str, "ParameterDefinition"]] = None,
        resource_groups: Optional[Dict[str, "ResourceGroupDefinition"]] = None,
        versions: Optional[Any] = None,
        **kwargs
    ):
        super(BlueprintProperties, self).__init__(display_name=display_name, description=description, target_scope=target_scope, parameters=parameters, resource_groups=resource_groups, **kwargs)
        self.versions = versions
        self.layout = None


class BlueprintStatus(BlueprintResourceStatusBase):
    """The status of the blueprint. This field is readonly.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar time_created: Creation time of this blueprint definition.
    :vartype time_created: ~datetime.datetime
    :ivar last_modified: Last modified time of this blueprint definition.
    :vartype last_modified: ~datetime.datetime
    """

    _validation = {
        'time_created': {'readonly': True},
        'last_modified': {'readonly': True},
    }

    _attribute_map = {
        'time_created': {'key': 'timeCreated', 'type': 'iso-8601'},
        'last_modified': {'key': 'lastModified', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BlueprintStatus, self).__init__(**kwargs)


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~blueprint_management_client.models.ErrorResponse]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~blueprint_management_client.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorResponse]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class KeyVaultReference(msrest.serialization.Model):
    """Specifies the link to a Key Vault.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Azure resource ID of the Key Vault.
    :type id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: str,
        **kwargs
    ):
        super(KeyVaultReference, self).__init__(**kwargs)
        self.id = id


class ManagedServiceIdentity(msrest.serialization.Model):
    """Managed identity generic object.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of the managed identity. Possible values include: "None",
     "SystemAssigned", "UserAssigned".
    :type type: str or ~blueprint_management_client.models.ManagedServiceIdentityType
    :param principal_id: Azure Active Directory principal ID associated with this Identity.
    :type principal_id: str
    :param tenant_id: ID of the Azure Active Directory.
    :type tenant_id: str
    :param user_assigned_identities: The list of user-assigned managed identities associated with
     the resource. Key is the Azure resource Id of the managed identity.
    :type user_assigned_identities: dict[str,
     ~blueprint_management_client.models.UserAssignedIdentity]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{UserAssignedIdentity}'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "ManagedServiceIdentityType"],
        principal_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        user_assigned_identities: Optional[Dict[str, "UserAssignedIdentity"]] = None,
        **kwargs
    ):
        super(ManagedServiceIdentity, self).__init__(**kwargs)
        self.type = type
        self.principal_id = principal_id
        self.tenant_id = tenant_id
        self.user_assigned_identities = user_assigned_identities


class ParameterDefinition(msrest.serialization.Model):
    """Represent a parameter with constrains and metadata.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Allowed data types for Resource Manager template parameters. Possible
     values include: "string", "array", "bool", "int", "object", "secureObject", "secureString".
    :type type: str or ~blueprint_management_client.models.TemplateParameterType
    :param default_value: Default Value for this parameter.
    :type default_value: any
    :param allowed_values: Array of allowed values for this parameter.
    :type allowed_values: list[any]
    :param display_name: DisplayName of this parameter/resourceGroup.
    :type display_name: str
    :param description: Description of this parameter/resourceGroup.
    :type description: str
    :param strong_type: StrongType for UI to render rich experience during blueprint assignment.
     Supported strong types are resourceType, principalId and location.
    :type strong_type: str
    """

    _validation = {
        'type': {'required': True},
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'strong_type': {'max_length': 64, 'min_length': 0},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'default_value': {'key': 'defaultValue', 'type': 'object'},
        'allowed_values': {'key': 'allowedValues', 'type': '[object]'},
        'display_name': {'key': 'metadata.displayName', 'type': 'str'},
        'description': {'key': 'metadata.description', 'type': 'str'},
        'strong_type': {'key': 'metadata.strongType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "TemplateParameterType"],
        default_value: Optional[Any] = None,
        allowed_values: Optional[List[Any]] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        strong_type: Optional[str] = None,
        **kwargs
    ):
        super(ParameterDefinition, self).__init__(**kwargs)
        self.type = type
        self.default_value = default_value
        self.allowed_values = allowed_values
        self.display_name = display_name
        self.description = description
        self.strong_type = strong_type


class ParameterValue(msrest.serialization.Model):
    """Value for the specified parameter. Can be either 'value' or 'reference' but not both.

    :param value: Parameter value. Any valid JSON value is allowed including objects, arrays,
     strings, numbers and booleans.
    :type value: any
    :param reference: Parameter value as reference type.
    :type reference: ~blueprint_management_client.models.SecretValueReference
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'object'},
        'reference': {'key': 'reference', 'type': 'SecretValueReference'},
    }

    def __init__(
        self,
        *,
        value: Optional[Any] = None,
        reference: Optional["SecretValueReference"] = None,
        **kwargs
    ):
        super(ParameterValue, self).__init__(**kwargs)
        self.value = value
        self.reference = reference


class PolicyAssignmentArtifact(Artifact):
    """Blueprint artifact that applies a Policy assignment.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param kind: Required. Specifies the kind of blueprint artifact.Constant filled by server.
     Possible values include: "template", "roleAssignment", "policyAssignment".
    :type kind: str or ~blueprint_management_client.models.ArtifactKind
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :param depends_on: Artifacts which need to be deployed before the specified artifact.
    :type depends_on: list[str]
    :param policy_definition_id: Required. Azure resource ID of the policy definition.
    :type policy_definition_id: str
    :param parameters: Required. Parameter values for the policy definition.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterValue]
    :param resource_group: Name of the resource group placeholder to which the policy will be
     assigned.
    :type resource_group: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'kind': {'required': True},
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'policy_definition_id': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'depends_on': {'key': 'properties.dependsOn', 'type': '[str]'},
        'policy_definition_id': {'key': 'properties.policyDefinitionId', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': '{ParameterValue}'},
        'resource_group': {'key': 'properties.resourceGroup', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        policy_definition_id: str,
        parameters: Dict[str, "ParameterValue"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        depends_on: Optional[List[str]] = None,
        resource_group: Optional[str] = None,
        **kwargs
    ):
        super(PolicyAssignmentArtifact, self).__init__(**kwargs)
        self.kind = 'policyAssignment'  # type: str
        self.display_name = display_name
        self.description = description
        self.depends_on = depends_on
        self.policy_definition_id = policy_definition_id
        self.parameters = parameters
        self.resource_group = resource_group


class PolicyAssignmentArtifactProperties(BlueprintResourcePropertiesBase, ArtifactPropertiesBase):
    """Properties of a Policy assignment blueprint artifact.

    All required parameters must be populated in order to send to Azure.

    :param depends_on: Artifacts which need to be deployed before the specified artifact.
    :type depends_on: list[str]
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :param policy_definition_id: Required. Azure resource ID of the policy definition.
    :type policy_definition_id: str
    :param parameters: Required. Parameter values for the policy definition.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterValue]
    :param resource_group: Name of the resource group placeholder to which the policy will be
     assigned.
    :type resource_group: str
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'policy_definition_id': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'depends_on': {'key': 'dependsOn', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'policy_definition_id': {'key': 'policyDefinitionId', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{ParameterValue}'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        policy_definition_id: str,
        parameters: Dict[str, "ParameterValue"],
        depends_on: Optional[List[str]] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        resource_group: Optional[str] = None,
        **kwargs
    ):
        super(PolicyAssignmentArtifactProperties, self).__init__(display_name=display_name, description=description, depends_on=depends_on, **kwargs)
        self.depends_on = depends_on
        self.policy_definition_id = policy_definition_id
        self.parameters = parameters
        self.resource_group = resource_group
        self.display_name = display_name
        self.description = description
        self.policy_definition_id = policy_definition_id
        self.parameters = parameters
        self.resource_group = resource_group


class PublishedBlueprint(AzureResourceBase):
    """Represents a published blueprint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :ivar status: Status of the blueprint. This field is readonly.
    :vartype status: ~blueprint_management_client.models.BlueprintStatus
    :param target_scope: The scope where this blueprint definition can be assigned. Possible values
     include: "subscription", "managementGroup".
    :type target_scope: str or ~blueprint_management_client.models.BlueprintTargetScope
    :param parameters: Parameters required by this blueprint definition.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterDefinition]
    :param resource_groups: Resource group placeholders defined by this blueprint definition.
    :type resource_groups: dict[str, ~blueprint_management_client.models.ResourceGroupDefinition]
    :param blueprint_name: Name of the published blueprint definition.
    :type blueprint_name: str
    :param change_notes: Version-specific change notes.
    :type change_notes: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'status': {'readonly': True},
        'change_notes': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'BlueprintStatus'},
        'target_scope': {'key': 'properties.targetScope', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': '{ParameterDefinition}'},
        'resource_groups': {'key': 'properties.resourceGroups', 'type': '{ResourceGroupDefinition}'},
        'blueprint_name': {'key': 'properties.blueprintName', 'type': 'str'},
        'change_notes': {'key': 'properties.changeNotes', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        target_scope: Optional[Union[str, "BlueprintTargetScope"]] = None,
        parameters: Optional[Dict[str, "ParameterDefinition"]] = None,
        resource_groups: Optional[Dict[str, "ResourceGroupDefinition"]] = None,
        blueprint_name: Optional[str] = None,
        change_notes: Optional[str] = None,
        **kwargs
    ):
        super(PublishedBlueprint, self).__init__(**kwargs)
        self.display_name = display_name
        self.description = description
        self.status = None
        self.target_scope = target_scope
        self.parameters = parameters
        self.resource_groups = resource_groups
        self.blueprint_name = blueprint_name
        self.change_notes = change_notes


class PublishedBlueprintList(msrest.serialization.Model):
    """List of published blueprint definitions.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: List of published blueprint definitions.
    :type value: list[~blueprint_management_client.models.PublishedBlueprint]
    :ivar next_link: Link to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PublishedBlueprint]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["PublishedBlueprint"]] = None,
        **kwargs
    ):
        super(PublishedBlueprintList, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class PublishedBlueprintProperties(SharedBlueprintProperties):
    """Schema for published blueprint definition properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :ivar status: Status of the blueprint. This field is readonly.
    :vartype status: ~blueprint_management_client.models.BlueprintStatus
    :param target_scope: The scope where this blueprint definition can be assigned. Possible values
     include: "subscription", "managementGroup".
    :type target_scope: str or ~blueprint_management_client.models.BlueprintTargetScope
    :param parameters: Parameters required by this blueprint definition.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterDefinition]
    :param resource_groups: Resource group placeholders defined by this blueprint definition.
    :type resource_groups: dict[str, ~blueprint_management_client.models.ResourceGroupDefinition]
    :param blueprint_name: Name of the published blueprint definition.
    :type blueprint_name: str
    :param change_notes: Version-specific change notes.
    :type change_notes: str
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'status': {'readonly': True},
        'change_notes': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'BlueprintStatus'},
        'target_scope': {'key': 'targetScope', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{ParameterDefinition}'},
        'resource_groups': {'key': 'resourceGroups', 'type': '{ResourceGroupDefinition}'},
        'blueprint_name': {'key': 'blueprintName', 'type': 'str'},
        'change_notes': {'key': 'changeNotes', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        target_scope: Optional[Union[str, "BlueprintTargetScope"]] = None,
        parameters: Optional[Dict[str, "ParameterDefinition"]] = None,
        resource_groups: Optional[Dict[str, "ResourceGroupDefinition"]] = None,
        blueprint_name: Optional[str] = None,
        change_notes: Optional[str] = None,
        **kwargs
    ):
        super(PublishedBlueprintProperties, self).__init__(display_name=display_name, description=description, target_scope=target_scope, parameters=parameters, resource_groups=resource_groups, **kwargs)
        self.blueprint_name = blueprint_name
        self.change_notes = change_notes


class ResourceGroupDefinition(msrest.serialization.Model):
    """Represents an Azure resource group in a blueprint definition.

    :param name: Name of this resourceGroup. Leave empty if the resource group name will be
     specified during the blueprint assignment.
    :type name: str
    :param location: Location of this resourceGroup. Leave empty if the resource group location
     will be specified during the blueprint assignment.
    :type location: str
    :param depends_on: Artifacts which need to be deployed before this resource group.
    :type depends_on: list[str]
    :param tags: A set of tags. Tags to be assigned to this resource group.
    :type tags: dict[str, str]
    :param display_name: DisplayName of this parameter/resourceGroup.
    :type display_name: str
    :param description: Description of this parameter/resourceGroup.
    :type description: str
    :param strong_type: StrongType for UI to render rich experience during blueprint assignment.
     Supported strong types are resourceType, principalId and location.
    :type strong_type: str
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'strong_type': {'max_length': 64, 'min_length': 0},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'depends_on': {'key': 'dependsOn', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'display_name': {'key': 'metadata.displayName', 'type': 'str'},
        'description': {'key': 'metadata.description', 'type': 'str'},
        'strong_type': {'key': 'metadata.strongType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        location: Optional[str] = None,
        depends_on: Optional[List[str]] = None,
        tags: Optional[Dict[str, str]] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        strong_type: Optional[str] = None,
        **kwargs
    ):
        super(ResourceGroupDefinition, self).__init__(**kwargs)
        self.name = name
        self.location = location
        self.depends_on = depends_on
        self.tags = tags
        self.display_name = display_name
        self.description = description
        self.strong_type = strong_type


class ResourceGroupValue(msrest.serialization.Model):
    """Represents an Azure resource group.

    :param name: Name of the resource group.
    :type name: str
    :param location: Location of the resource group.
    :type location: str
    """

    _validation = {
        'name': {'max_length': 90, 'min_length': 1},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(ResourceGroupValue, self).__init__(**kwargs)
        self.name = name
        self.location = location


class ResourceProviderOperation(msrest.serialization.Model):
    """Supported operations of this resource provider.

    :param name: Operation name, in format of {provider}/{resource}/{operation}.
    :type name: str
    :param display: Display metadata associated with the operation.
    :type display: ~blueprint_management_client.models.ResourceProviderOperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'ResourceProviderOperationDisplay'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["ResourceProviderOperationDisplay"] = None,
        **kwargs
    ):
        super(ResourceProviderOperation, self).__init__(**kwargs)
        self.name = name
        self.display = display


class ResourceProviderOperationDisplay(msrest.serialization.Model):
    """Display metadata associated with the operation.

    :param provider: Resource provider: Microsoft Blueprint.
    :type provider: str
    :param resource: Resource on which the operation is performed.
    :type resource: str
    :param operation: Type of operation: get, read, delete, etc.
    :type operation: str
    :param description: Description of this operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ResourceProviderOperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class ResourceProviderOperationList(msrest.serialization.Model):
    """Results of the request to list operations.

    :param value: List of operations supported by this resource provider.
    :type value: list[~blueprint_management_client.models.ResourceProviderOperation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ResourceProviderOperation]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ResourceProviderOperation"]] = None,
        **kwargs
    ):
        super(ResourceProviderOperationList, self).__init__(**kwargs)
        self.value = value


class RoleAssignmentArtifact(Artifact):
    """Blueprint artifact that applies a Role assignment.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param kind: Required. Specifies the kind of blueprint artifact.Constant filled by server.
     Possible values include: "template", "roleAssignment", "policyAssignment".
    :type kind: str or ~blueprint_management_client.models.ArtifactKind
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :param depends_on: Artifacts which need to be deployed before the specified artifact.
    :type depends_on: list[str]
    :param role_definition_id: Required. Azure resource ID of the RoleDefinition.
    :type role_definition_id: str
    :param principal_ids: Required. Array of user or group identities in Azure Active Directory.
     The roleDefinition will apply to each identity.
    :type principal_ids: any
    :param resource_group: RoleAssignment will be scope to this resourceGroup. If empty, it scopes
     to the subscription.
    :type resource_group: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'kind': {'required': True},
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'role_definition_id': {'required': True},
        'principal_ids': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'depends_on': {'key': 'properties.dependsOn', 'type': '[str]'},
        'role_definition_id': {'key': 'properties.roleDefinitionId', 'type': 'str'},
        'principal_ids': {'key': 'properties.principalIds', 'type': 'object'},
        'resource_group': {'key': 'properties.resourceGroup', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        role_definition_id: str,
        principal_ids: Any,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        depends_on: Optional[List[str]] = None,
        resource_group: Optional[str] = None,
        **kwargs
    ):
        super(RoleAssignmentArtifact, self).__init__(**kwargs)
        self.kind = 'roleAssignment'  # type: str
        self.display_name = display_name
        self.description = description
        self.depends_on = depends_on
        self.role_definition_id = role_definition_id
        self.principal_ids = principal_ids
        self.resource_group = resource_group


class RoleAssignmentArtifactProperties(BlueprintResourcePropertiesBase, ArtifactPropertiesBase):
    """Properties of a Role assignment blueprint artifact.

    All required parameters must be populated in order to send to Azure.

    :param depends_on: Artifacts which need to be deployed before the specified artifact.
    :type depends_on: list[str]
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :param role_definition_id: Required. Azure resource ID of the RoleDefinition.
    :type role_definition_id: str
    :param principal_ids: Required. Array of user or group identities in Azure Active Directory.
     The roleDefinition will apply to each identity.
    :type principal_ids: any
    :param resource_group: RoleAssignment will be scope to this resourceGroup. If empty, it scopes
     to the subscription.
    :type resource_group: str
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'role_definition_id': {'required': True},
        'principal_ids': {'required': True},
    }

    _attribute_map = {
        'depends_on': {'key': 'dependsOn', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'role_definition_id': {'key': 'roleDefinitionId', 'type': 'str'},
        'principal_ids': {'key': 'principalIds', 'type': 'object'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        role_definition_id: str,
        principal_ids: Any,
        depends_on: Optional[List[str]] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        resource_group: Optional[str] = None,
        **kwargs
    ):
        super(RoleAssignmentArtifactProperties, self).__init__(display_name=display_name, description=description, depends_on=depends_on, **kwargs)
        self.depends_on = depends_on
        self.role_definition_id = role_definition_id
        self.principal_ids = principal_ids
        self.resource_group = resource_group
        self.display_name = display_name
        self.description = description
        self.role_definition_id = role_definition_id
        self.principal_ids = principal_ids
        self.resource_group = resource_group


class SecretValueReference(msrest.serialization.Model):
    """Reference to a Key Vault secret.

    All required parameters must be populated in order to send to Azure.

    :param key_vault: Required. Specifies the reference to a given Azure Key Vault.
    :type key_vault: ~blueprint_management_client.models.KeyVaultReference
    :param secret_name: Required. Name of the secret.
    :type secret_name: str
    :param secret_version: The version of the secret to use. If left blank, the latest version of
     the secret is used.
    :type secret_version: str
    """

    _validation = {
        'key_vault': {'required': True},
        'secret_name': {'required': True},
    }

    _attribute_map = {
        'key_vault': {'key': 'keyVault', 'type': 'KeyVaultReference'},
        'secret_name': {'key': 'secretName', 'type': 'str'},
        'secret_version': {'key': 'secretVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        key_vault: "KeyVaultReference",
        secret_name: str,
        secret_version: Optional[str] = None,
        **kwargs
    ):
        super(SecretValueReference, self).__init__(**kwargs)
        self.key_vault = key_vault
        self.secret_name = secret_name
        self.secret_version = secret_version


class TemplateArtifact(Artifact):
    """Blueprint artifact that deploys a Resource Manager template.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar name: Name of this resource.
    :vartype name: str
    :param kind: Required. Specifies the kind of blueprint artifact.Constant filled by server.
     Possible values include: "template", "roleAssignment", "policyAssignment".
    :type kind: str or ~blueprint_management_client.models.ArtifactKind
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :param depends_on: Artifacts which need to be deployed before the specified artifact.
    :type depends_on: list[str]
    :param template: Required. The Resource Manager template blueprint artifact body.
    :type template: any
    :param resource_group: If applicable, the name of the resource group placeholder to which the
     Resource Manager template blueprint artifact will be deployed.
    :type resource_group: str
    :param parameters: Required. Resource Manager template blueprint artifact parameter values.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterValue]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'kind': {'required': True},
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'template': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'depends_on': {'key': 'properties.dependsOn', 'type': '[str]'},
        'template': {'key': 'properties.template', 'type': 'object'},
        'resource_group': {'key': 'properties.resourceGroup', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': '{ParameterValue}'},
    }

    def __init__(
        self,
        *,
        template: Any,
        parameters: Dict[str, "ParameterValue"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        depends_on: Optional[List[str]] = None,
        resource_group: Optional[str] = None,
        **kwargs
    ):
        super(TemplateArtifact, self).__init__(**kwargs)
        self.kind = 'template'  # type: str
        self.display_name = display_name
        self.description = description
        self.depends_on = depends_on
        self.template = template
        self.resource_group = resource_group
        self.parameters = parameters


class TemplateArtifactProperties(BlueprintResourcePropertiesBase, ArtifactPropertiesBase):
    """Properties of a Resource Manager template blueprint artifact.

    All required parameters must be populated in order to send to Azure.

    :param depends_on: Artifacts which need to be deployed before the specified artifact.
    :type depends_on: list[str]
    :param display_name: One-liner string explain this resource.
    :type display_name: str
    :param description: Multi-line explain this resource.
    :type description: str
    :param template: Required. The Resource Manager template blueprint artifact body.
    :type template: any
    :param resource_group: If applicable, the name of the resource group placeholder to which the
     Resource Manager template blueprint artifact will be deployed.
    :type resource_group: str
    :param parameters: Required. Resource Manager template blueprint artifact parameter values.
    :type parameters: dict[str, ~blueprint_management_client.models.ParameterValue]
    """

    _validation = {
        'display_name': {'max_length': 256, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'template': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'depends_on': {'key': 'dependsOn', 'type': '[str]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'template': {'key': 'template', 'type': 'object'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '{ParameterValue}'},
    }

    def __init__(
        self,
        *,
        template: Any,
        parameters: Dict[str, "ParameterValue"],
        depends_on: Optional[List[str]] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        resource_group: Optional[str] = None,
        **kwargs
    ):
        super(TemplateArtifactProperties, self).__init__(display_name=display_name, description=description, depends_on=depends_on, **kwargs)
        self.depends_on = depends_on
        self.template = template
        self.resource_group = resource_group
        self.parameters = parameters
        self.display_name = display_name
        self.description = description
        self.template = template
        self.resource_group = resource_group
        self.parameters = parameters


class UserAssignedIdentity(msrest.serialization.Model):
    """User-assigned managed identity.

    :param principal_id: Azure Active Directory principal ID associated with this Identity.
    :type principal_id: str
    :param client_id: Client App Id associated with this identity.
    :type client_id: str
    """

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        principal_id: Optional[str] = None,
        client_id: Optional[str] = None,
        **kwargs
    ):
        super(UserAssignedIdentity, self).__init__(**kwargs)
        self.principal_id = principal_id
        self.client_id = client_id


class WhoIsBlueprintContract(msrest.serialization.Model):
    """Response schema for querying the Azure Blueprints service principal in the tenant.

    :param object_id: AAD object Id of the Azure Blueprints service principal in the tenant.
    :type object_id: str
    """

    _attribute_map = {
        'object_id': {'key': 'objectId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        object_id: Optional[str] = None,
        **kwargs
    ):
        super(WhoIsBlueprintContract, self).__init__(**kwargs)
        self.object_id = object_id
