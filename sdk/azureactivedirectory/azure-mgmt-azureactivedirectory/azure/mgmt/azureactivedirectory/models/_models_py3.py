# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._azureactivedirectory_enums import *


class ARMProxyResource(msrest.serialization.Model):
    """The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The unique resource identifier of the Azure AD PrivateLink Policy.
    :vartype id: str
    :ivar name: The name of the Azure AD PrivateLink Policy.
    :vartype name: str
    :ivar type: The type of Azure resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ARMProxyResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class AzureResourceBase(msrest.serialization.Model):
    """Common properties for all Azure resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar name: Name of this resource.
    :vartype name: str
    :ivar type: Type of this resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Name of this resource.
        :paramtype name: str
        """
        super(AzureResourceBase, self).__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None


class ErrorDefinition(msrest.serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.azureactivedirectory.models.ErrorDefinition]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorDefinition, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    :ivar error: The error details.
    :vartype error: ~azure.mgmt.azureactivedirectory.models.ErrorDefinition
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDefinition'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorDefinition"] = None,
        **kwargs
    ):
        """
        :keyword error: The error details.
        :paramtype error: ~azure.mgmt.azureactivedirectory.models.ErrorDefinition
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class PrivateEndpoint(msrest.serialization.Model):
    """Private endpoint object properties.

    :ivar id: Full identifier of the private endpoint resource.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id: Full identifier of the private endpoint resource.
        :paramtype id: str
        """
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.id = id


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ProxyResource, self).__init__(**kwargs)


class PrivateEndpointConnection(ProxyResource):
    """Private endpoint connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar private_endpoint: Properties of the private endpoint object.
    :vartype private_endpoint: ~azure.mgmt.azureactivedirectory.models.PrivateEndpoint
    :ivar private_link_service_connection_state: Approval state of the private link connection.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.azureactivedirectory.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: Provisioning state of the private endpoint connection. Possible
     values include: "Succeeded", "Provisioning", "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.azureactivedirectory.models.PrivateEndpointConnectionProvisioningState
    :ivar private_link_connection_tags: Updated tag information to set into the
     PrivateLinkConnection instance.
    :vartype private_link_connection_tags: ~azure.mgmt.azureactivedirectory.models.TagsResource
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'private_link_connection_tags': {'key': 'properties.privateLinkConnectionTags', 'type': 'TagsResource'},
    }

    def __init__(
        self,
        *,
        private_endpoint: Optional["PrivateEndpoint"] = None,
        private_link_service_connection_state: Optional["PrivateLinkServiceConnectionState"] = None,
        private_link_connection_tags: Optional["TagsResource"] = None,
        **kwargs
    ):
        """
        :keyword private_endpoint: Properties of the private endpoint object.
        :paramtype private_endpoint: ~azure.mgmt.azureactivedirectory.models.PrivateEndpoint
        :keyword private_link_service_connection_state: Approval state of the private link connection.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.azureactivedirectory.models.PrivateLinkServiceConnectionState
        :keyword private_link_connection_tags: Updated tag information to set into the
         PrivateLinkConnection instance.
        :paramtype private_link_connection_tags: ~azure.mgmt.azureactivedirectory.models.TagsResource
        """
        super(PrivateEndpointConnection, self).__init__(**kwargs)
        self.private_endpoint = private_endpoint
        self.private_link_service_connection_state = private_link_service_connection_state
        self.provisioning_state = None
        self.private_link_connection_tags = private_link_connection_tags


class PrivateEndpointConnectionListResult(msrest.serialization.Model):
    """A list of private link resources.

    :ivar value: Array of private link resources.
    :vartype value: list[~azure.mgmt.azureactivedirectory.models.PrivateEndpointConnection]
    :ivar next_link: URL to next page of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateEndpointConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["PrivateEndpointConnection"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Array of private link resources.
        :paramtype value: list[~azure.mgmt.azureactivedirectory.models.PrivateEndpointConnection]
        :keyword next_link: URL to next page of results.
        :paramtype next_link: str
        """
        super(PrivateEndpointConnectionListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PrivateLinkPolicy(AzureResourceBase):
    """PrivateLink Policy configuration object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: String Id used to locate any resource on Azure.
    :vartype id: str
    :ivar name: Name of this resource.
    :vartype name: str
    :ivar type: Type of this resource.
    :vartype type: str
    :ivar owner_tenant_id: Guid of the owner tenant.
    :vartype owner_tenant_id: str
    :ivar all_tenants: Flag indicating whether all tenants are allowed.
    :vartype all_tenants: bool
    :ivar tenants: The list of tenantIds.
    :vartype tenants: list[str]
    :ivar resource_name: Name of the private link policy resource.
    :vartype resource_name: str
    :ivar subscription_id: Subscription Identifier.
    :vartype subscription_id: str
    :ivar resource_group: Name of the resource group.
    :vartype resource_group: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'owner_tenant_id': {'key': 'ownerTenantId', 'type': 'str'},
        'all_tenants': {'key': 'allTenants', 'type': 'bool'},
        'tenants': {'key': 'tenants', 'type': '[str]'},
        'resource_name': {'key': 'resourceName', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        owner_tenant_id: Optional[str] = None,
        all_tenants: Optional[bool] = None,
        tenants: Optional[List[str]] = None,
        resource_name: Optional[str] = None,
        subscription_id: Optional[str] = None,
        resource_group: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword name: Name of this resource.
        :paramtype name: str
        :keyword owner_tenant_id: Guid of the owner tenant.
        :paramtype owner_tenant_id: str
        :keyword all_tenants: Flag indicating whether all tenants are allowed.
        :paramtype all_tenants: bool
        :keyword tenants: The list of tenantIds.
        :paramtype tenants: list[str]
        :keyword resource_name: Name of the private link policy resource.
        :paramtype resource_name: str
        :keyword subscription_id: Subscription Identifier.
        :paramtype subscription_id: str
        :keyword resource_group: Name of the resource group.
        :paramtype resource_group: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(PrivateLinkPolicy, self).__init__(name=name, **kwargs)
        self.owner_tenant_id = owner_tenant_id
        self.all_tenants = all_tenants
        self.tenants = tenants
        self.resource_name = resource_name
        self.subscription_id = subscription_id
        self.resource_group = resource_group
        self.tags = tags


class PrivateLinkPolicyListResult(msrest.serialization.Model):
    """A list of private link policies.

    :ivar value: Array of private link policies.
    :vartype value: list[~azure.mgmt.azureactivedirectory.models.PrivateLinkPolicy]
    :ivar next_link: The link used to get the next page of operations.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateLinkPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["PrivateLinkPolicy"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Array of private link policies.
        :paramtype value: list[~azure.mgmt.azureactivedirectory.models.PrivateLinkPolicy]
        :keyword next_link: The link used to get the next page of operations.
        :paramtype next_link: str
        """
        super(PrivateLinkPolicyListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PrivateLinkPolicyUpdateParameter(msrest.serialization.Model):
    """private Link policy parameters to be updated.

    :ivar tags: A set of tags. Resource tags to be updated.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags to be updated.
        :paramtype tags: dict[str, str]
        """
        super(PrivateLinkPolicyUpdateParameter, self).__init__(**kwargs)
        self.tags = tags


class PrivateLinkResource(ARMProxyResource):
    """A private link resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The unique resource identifier of the Azure AD PrivateLink Policy.
    :vartype id: str
    :ivar name: The name of the Azure AD PrivateLink Policy.
    :vartype name: str
    :ivar type: The type of Azure resource.
    :vartype type: str
    :ivar group_id: The private link resource group id.
    :vartype group_id: str
    :ivar required_members: The private link resource required member names.
    :vartype required_members: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'group_id': {'readonly': True},
        'required_members': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'group_id': {'key': 'properties.groupId', 'type': 'str'},
        'required_members': {'key': 'properties.requiredMembers', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(PrivateLinkResource, self).__init__(**kwargs)
        self.group_id = None
        self.required_members = None


class PrivateLinkResourceListResult(msrest.serialization.Model):
    """A list of private link resources.

    :ivar value: Array of private link resources.
    :vartype value: list[~azure.mgmt.azureactivedirectory.models.PrivateLinkResource]
    :ivar next_link: The link used to get the next page of operations.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateLinkResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["PrivateLinkResource"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Array of private link resources.
        :paramtype value: list[~azure.mgmt.azureactivedirectory.models.PrivateLinkResource]
        :keyword next_link: The link used to get the next page of operations.
        :paramtype next_link: str
        """
        super(PrivateLinkResourceListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PrivateLinkServiceConnectionState(msrest.serialization.Model):
    """An object that represents the approval state of the private link connection.

    :ivar status: Indicates whether the connection has been approved, rejected or removed by the
     given policy owner. Possible values include: "Approved", "Pending", "Rejected", "Disconnected".
    :vartype status: str or
     ~azure.mgmt.azureactivedirectory.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval or rejection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype actions_required: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "PrivateEndpointServiceConnectionStatus"]] = None,
        description: Optional[str] = None,
        actions_required: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword status: Indicates whether the connection has been approved, rejected or removed by the
         given policy owner. Possible values include: "Approved", "Pending", "Rejected", "Disconnected".
        :paramtype status: str or
         ~azure.mgmt.azureactivedirectory.models.PrivateEndpointServiceConnectionStatus
        :keyword description: The reason for approval or rejection.
        :paramtype description: str
        :keyword actions_required: A message indicating if changes on the service provider require any
         updates on the consumer.
        :paramtype actions_required: str
        """
        super(PrivateLinkServiceConnectionState, self).__init__(**kwargs)
        self.status = status
        self.description = description
        self.actions_required = actions_required


class TagsResource(msrest.serialization.Model):
    """A container holding only the Tags for a resource, allowing the user to update the tags on a PrivateLinkConnection instance.

    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(TagsResource, self).__init__(**kwargs)
        self.tags = tags
