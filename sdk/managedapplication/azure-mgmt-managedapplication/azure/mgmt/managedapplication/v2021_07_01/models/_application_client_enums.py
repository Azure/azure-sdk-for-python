# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class ActionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
    """

    INTERNAL = "Internal"

class ApplicationArtifactName(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The managed application artifact name.
    """

    NOT_SPECIFIED = "NotSpecified"
    VIEW_DEFINITION = "ViewDefinition"
    AUTHORIZATIONS = "Authorizations"
    CUSTOM_ROLE_DEFINITION = "CustomRoleDefinition"

class ApplicationArtifactType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The managed application artifact type.
    """

    NOT_SPECIFIED = "NotSpecified"
    TEMPLATE = "Template"
    CUSTOM = "Custom"

class ApplicationDefinitionArtifactName(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The managed application artifact name.
    """

    NOT_SPECIFIED = "NotSpecified"
    APPLICATION_RESOURCE_TEMPLATE = "ApplicationResourceTemplate"
    CREATE_UI_DEFINITION = "CreateUiDefinition"
    MAIN_TEMPLATE_PARAMETERS = "MainTemplateParameters"

class ApplicationLockLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The managed application lock level.
    """

    CAN_NOT_DELETE = "CanNotDelete"
    READ_ONLY = "ReadOnly"
    NONE = "None"

class ApplicationManagementMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The management mode.
    """

    NOT_SPECIFIED = "NotSpecified"
    UNMANAGED = "Unmanaged"
    MANAGED = "Managed"

class CreatedByType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class DeploymentMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The deployment mode.
    """

    NOT_SPECIFIED = "NotSpecified"
    INCREMENTAL = "Incremental"
    COMPLETE = "Complete"

class JitApprovalMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The Jit approval mode.
    """

    NOT_SPECIFIED = "NotSpecified"
    AUTO_APPROVE = "AutoApprove"
    MANUAL_APPROVE = "ManualApprove"

class JitApproverType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The approver type.
    """

    USER = "user"
    GROUP = "group"

class JitRequestState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The JIT request state.
    """

    NOT_SPECIFIED = "NotSpecified"
    PENDING = "Pending"
    APPROVED = "Approved"
    DENIED = "Denied"
    FAILED = "Failed"
    CANCELED = "Canceled"
    EXPIRED = "Expired"
    TIMEOUT = "Timeout"

class JitSchedulingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The JIT request scheduling type.
    """

    NOT_SPECIFIED = "NotSpecified"
    ONCE = "Once"
    RECURRING = "Recurring"

class ManagedServiceIdentityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of managed service identity (where both SystemAssigned and UserAssigned types are
    allowed).
    """

    NONE = "None"
    SYSTEM_ASSIGNED = "SystemAssigned"
    USER_ASSIGNED = "UserAssigned"
    SYSTEM_ASSIGNED_USER_ASSIGNED = "SystemAssigned,UserAssigned"

class Origin(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
    logs UX. Default value is "user,system"
    """

    USER = "user"
    SYSTEM = "system"
    USER_SYSTEM = "user,system"

class ProvisioningState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Provisioning status of the managed application.
    """

    NOT_SPECIFIED = "NotSpecified"
    ACCEPTED = "Accepted"
    RUNNING = "Running"
    DELETING = "Deleting"
    DELETED = "Deleted"
    CANCELED = "Canceled"
    FAILED = "Failed"
    SUCCEEDED = "Succeeded"
    UPDATING = "Updating"
