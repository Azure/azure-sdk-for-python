# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Resource(msrest.serialization.Model):
    """Resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.managedapplication.v2021_07_01.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = None


class GenericResource(Resource):
    """Resource information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.managedapplication.v2021_07_01.models.SystemData
    :param managed_by: ID of the resource that manages this resource.
    :type managed_by: str
    :param sku: The SKU of the resource.
    :type sku: ~azure.mgmt.managedapplication.v2021_07_01.models.Sku
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'managed_by': {'key': 'managedBy', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GenericResource, self).__init__(**kwargs)
        self.managed_by = kwargs.get('managed_by', None)
        self.sku = kwargs.get('sku', None)


class Application(GenericResource):
    """Information about managed application.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.managedapplication.v2021_07_01.models.SystemData
    :param managed_by: ID of the resource that manages this resource.
    :type managed_by: str
    :param sku: The SKU of the resource.
    :type sku: ~azure.mgmt.managedapplication.v2021_07_01.models.Sku
    :param plan: The plan information.
    :type plan: ~azure.mgmt.managedapplication.v2021_07_01.models.Plan
    :param kind: Required. The kind of the managed application. Allowed values are MarketPlace and
     ServiceCatalog.
    :type kind: str
    :param identity: The identity of the resource.
    :type identity: ~azure.mgmt.managedapplication.v2021_07_01.models.ManagedServiceIdentity
    :param managed_resource_group_id: The managed resource group Id.
    :type managed_resource_group_id: str
    :param application_definition_id: The fully qualified path of managed application definition
     Id.
    :type application_definition_id: str
    :param parameters: Name and value pairs that define the managed application parameters. It can
     be a JObject or a well formed JSON string.
    :type parameters: any
    :ivar outputs: Name and value pairs that define the managed application outputs.
    :vartype outputs: any
    :ivar provisioning_state: The managed application provisioning state. Possible values include:
     "NotSpecified", "Accepted", "Running", "Deleting", "Deleted", "Canceled", "Failed",
     "Succeeded", "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.ProvisioningState
    :ivar billing_details: The managed application billing details.
    :vartype billing_details:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationBillingDetailsDefinition
    :param jit_access_policy: The managed application Jit access policy.
    :type jit_access_policy:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationJitAccessPolicy
    :ivar publisher_tenant_id: The publisher tenant Id.
    :vartype publisher_tenant_id: str
    :ivar authorizations: The  read-only authorizations property that is retrieved from the
     application package.
    :vartype authorizations:
     list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationAuthorization]
    :ivar management_mode: The managed application management mode. Possible values include:
     "NotSpecified", "Unmanaged", "Managed".
    :vartype management_mode: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationManagementMode
    :ivar customer_support: The read-only customer support property that is retrieved from the
     application package.
    :vartype customer_support:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationPackageContact
    :ivar support_urls: The read-only support URLs property that is retrieved from the application
     package.
    :vartype support_urls:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationPackageSupportUrls
    :ivar artifacts: The collection of managed application artifacts.
    :vartype artifacts: list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationArtifact]
    :ivar created_by: The client entity that created the JIT request.
    :vartype created_by: ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationClientDetails
    :ivar updated_by: The client entity that last updated the JIT request.
    :vartype updated_by: ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationClientDetails
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'kind': {'required': True, 'pattern': r'^[-\w\._,\(\)]+$'},
        'outputs': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'billing_details': {'readonly': True},
        'publisher_tenant_id': {'readonly': True},
        'authorizations': {'readonly': True},
        'management_mode': {'readonly': True},
        'customer_support': {'readonly': True},
        'support_urls': {'readonly': True},
        'artifacts': {'readonly': True},
        'created_by': {'readonly': True},
        'updated_by': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'managed_by': {'key': 'managedBy', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'plan': {'key': 'plan', 'type': 'Plan'},
        'kind': {'key': 'kind', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'managed_resource_group_id': {'key': 'properties.managedResourceGroupId', 'type': 'str'},
        'application_definition_id': {'key': 'properties.applicationDefinitionId', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': 'object'},
        'outputs': {'key': 'properties.outputs', 'type': 'object'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'billing_details': {'key': 'properties.billingDetails', 'type': 'ApplicationBillingDetailsDefinition'},
        'jit_access_policy': {'key': 'properties.jitAccessPolicy', 'type': 'ApplicationJitAccessPolicy'},
        'publisher_tenant_id': {'key': 'properties.publisherTenantId', 'type': 'str'},
        'authorizations': {'key': 'properties.authorizations', 'type': '[ApplicationAuthorization]'},
        'management_mode': {'key': 'properties.managementMode', 'type': 'str'},
        'customer_support': {'key': 'properties.customerSupport', 'type': 'ApplicationPackageContact'},
        'support_urls': {'key': 'properties.supportUrls', 'type': 'ApplicationPackageSupportUrls'},
        'artifacts': {'key': 'properties.artifacts', 'type': '[ApplicationArtifact]'},
        'created_by': {'key': 'properties.createdBy', 'type': 'ApplicationClientDetails'},
        'updated_by': {'key': 'properties.updatedBy', 'type': 'ApplicationClientDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Application, self).__init__(**kwargs)
        self.plan = kwargs.get('plan', None)
        self.kind = kwargs['kind']
        self.identity = kwargs.get('identity', None)
        self.managed_resource_group_id = kwargs.get('managed_resource_group_id', None)
        self.application_definition_id = kwargs.get('application_definition_id', None)
        self.parameters = kwargs.get('parameters', None)
        self.outputs = None
        self.provisioning_state = None
        self.billing_details = None
        self.jit_access_policy = kwargs.get('jit_access_policy', None)
        self.publisher_tenant_id = None
        self.authorizations = None
        self.management_mode = None
        self.customer_support = None
        self.support_urls = None
        self.artifacts = None
        self.created_by = None
        self.updated_by = None


class ApplicationArtifact(msrest.serialization.Model):
    """Managed application artifact.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The managed application artifact name. Possible values include:
     "NotSpecified", "ViewDefinition", "Authorizations", "CustomRoleDefinition".
    :type name: str or ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationArtifactName
    :param uri: Required. The managed application artifact blob uri.
    :type uri: str
    :param type: Required. The managed application artifact type. Possible values include:
     "NotSpecified", "Template", "Custom".
    :type type: str or ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationArtifactType
    """

    _validation = {
        'name': {'required': True},
        'uri': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationArtifact, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.uri = kwargs['uri']
        self.type = kwargs['type']


class ApplicationAuthorization(msrest.serialization.Model):
    """The managed application provider authorization.

    All required parameters must be populated in order to send to Azure.

    :param principal_id: Required. The provider's principal identifier. This is the identity that
     the provider will use to call ARM to manage the managed application resources.
    :type principal_id: str
    :param role_definition_id: Required. The provider's role definition identifier. This role will
     define all the permissions that the provider must have on the managed application's container
     resource group. This role definition cannot have permission to delete the resource group.
    :type role_definition_id: str
    """

    _validation = {
        'principal_id': {'required': True},
        'role_definition_id': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'role_definition_id': {'key': 'roleDefinitionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationAuthorization, self).__init__(**kwargs)
        self.principal_id = kwargs['principal_id']
        self.role_definition_id = kwargs['role_definition_id']


class ApplicationBillingDetailsDefinition(msrest.serialization.Model):
    """Managed application billing details definition.

    :param resource_usage_id: The managed application resource usage Id.
    :type resource_usage_id: str
    """

    _attribute_map = {
        'resource_usage_id': {'key': 'resourceUsageId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationBillingDetailsDefinition, self).__init__(**kwargs)
        self.resource_usage_id = kwargs.get('resource_usage_id', None)


class ApplicationClientDetails(msrest.serialization.Model):
    """The application client details to track the entity creating/updating the managed app resource.

    :param oid: The client Oid.
    :type oid: str
    :param puid: The client Puid.
    :type puid: str
    :param application_id: The client application Id.
    :type application_id: str
    """

    _attribute_map = {
        'oid': {'key': 'oid', 'type': 'str'},
        'puid': {'key': 'puid', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationClientDetails, self).__init__(**kwargs)
        self.oid = kwargs.get('oid', None)
        self.puid = kwargs.get('puid', None)
        self.application_id = kwargs.get('application_id', None)


class ApplicationDefinition(GenericResource):
    """Information about managed application definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.managedapplication.v2021_07_01.models.SystemData
    :param managed_by: ID of the resource that manages this resource.
    :type managed_by: str
    :param sku: The SKU of the resource.
    :type sku: ~azure.mgmt.managedapplication.v2021_07_01.models.Sku
    :param lock_level: Required. The managed application lock level. Possible values include:
     "CanNotDelete", "ReadOnly", "None".
    :type lock_level: str or ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationLockLevel
    :param display_name: The managed application definition display name.
    :type display_name: str
    :param is_enabled: A value indicating whether the package is enabled or not.
    :type is_enabled: bool
    :param authorizations: The managed application provider authorizations.
    :type authorizations:
     list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationAuthorization]
    :param artifacts: The collection of managed application artifacts. The portal will use the
     files specified as artifacts to construct the user experience of creating a managed application
     from a managed application definition.
    :type artifacts:
     list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationDefinitionArtifact]
    :ivar provisioning_state: Provisioning state. Possible values include: "NotSpecified",
     "Accepted", "Running", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded", "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.ProvisioningState
    :param description: The managed application definition description.
    :type description: str
    :param package_file_uri: The managed application definition package file Uri. Use this element.
    :type package_file_uri: str
    :param storage_account_id: The storage account id for bring your own storage scenario.
    :type storage_account_id: str
    :param main_template: The inline main template json which has resources to be provisioned. It
     can be a JObject or well-formed JSON string.
    :type main_template: any
    :param create_ui_definition: The createUiDefinition json for the backing template with
     Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
    :type create_ui_definition: any
    :param notification_policy: The managed application notification policy.
    :type notification_policy:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationNotificationPolicy
    :param locking_policy: The managed application locking policy.
    :type locking_policy:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationPackageLockingPolicyDefinition
    :param deployment_policy: The managed application deployment policy.
    :type deployment_policy:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationDeploymentPolicy
    :param management_policy: The managed application management policy that determines publisher's
     access to the managed resource group.
    :type management_policy:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationManagementPolicy
    :param policies: The managed application provider policies.
    :type policies: list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationPolicy]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'lock_level': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'managed_by': {'key': 'managedBy', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'lock_level': {'key': 'properties.lockLevel', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
        'authorizations': {'key': 'properties.authorizations', 'type': '[ApplicationAuthorization]'},
        'artifacts': {'key': 'properties.artifacts', 'type': '[ApplicationDefinitionArtifact]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'package_file_uri': {'key': 'properties.packageFileUri', 'type': 'str'},
        'storage_account_id': {'key': 'properties.storageAccountId', 'type': 'str'},
        'main_template': {'key': 'properties.mainTemplate', 'type': 'object'},
        'create_ui_definition': {'key': 'properties.createUiDefinition', 'type': 'object'},
        'notification_policy': {'key': 'properties.notificationPolicy', 'type': 'ApplicationNotificationPolicy'},
        'locking_policy': {'key': 'properties.lockingPolicy', 'type': 'ApplicationPackageLockingPolicyDefinition'},
        'deployment_policy': {'key': 'properties.deploymentPolicy', 'type': 'ApplicationDeploymentPolicy'},
        'management_policy': {'key': 'properties.managementPolicy', 'type': 'ApplicationManagementPolicy'},
        'policies': {'key': 'properties.policies', 'type': '[ApplicationPolicy]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationDefinition, self).__init__(**kwargs)
        self.lock_level = kwargs['lock_level']
        self.display_name = kwargs.get('display_name', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.authorizations = kwargs.get('authorizations', None)
        self.artifacts = kwargs.get('artifacts', None)
        self.provisioning_state = None
        self.description = kwargs.get('description', None)
        self.package_file_uri = kwargs.get('package_file_uri', None)
        self.storage_account_id = kwargs.get('storage_account_id', None)
        self.main_template = kwargs.get('main_template', None)
        self.create_ui_definition = kwargs.get('create_ui_definition', None)
        self.notification_policy = kwargs.get('notification_policy', None)
        self.locking_policy = kwargs.get('locking_policy', None)
        self.deployment_policy = kwargs.get('deployment_policy', None)
        self.management_policy = kwargs.get('management_policy', None)
        self.policies = kwargs.get('policies', None)


class ApplicationDefinitionArtifact(msrest.serialization.Model):
    """Application definition artifact.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The managed application definition artifact name. Possible values
     include: "NotSpecified", "ApplicationResourceTemplate", "CreateUiDefinition",
     "MainTemplateParameters".
    :type name: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationDefinitionArtifactName
    :param uri: Required. The managed application definition artifact blob uri.
    :type uri: str
    :param type: Required. The managed application definition artifact type. Possible values
     include: "NotSpecified", "Template", "Custom".
    :type type: str or ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationArtifactType
    """

    _validation = {
        'name': {'required': True},
        'uri': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationDefinitionArtifact, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.uri = kwargs['uri']
        self.type = kwargs['type']


class ApplicationDefinitionListResult(msrest.serialization.Model):
    """List of managed application definitions.

    :param value: The array of managed application definitions.
    :type value: list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationDefinition]
    :param next_link: The URL to use for getting the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationDefinition]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationDefinitionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ApplicationDefinitionPatchable(msrest.serialization.Model):
    """Information about an application definition request.

    :param tags: A set of tags. Application definition tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationDefinitionPatchable, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class ApplicationDeploymentPolicy(msrest.serialization.Model):
    """Managed application deployment policy.

    All required parameters must be populated in order to send to Azure.

    :param deployment_mode: Required. The managed application deployment mode. Possible values
     include: "NotSpecified", "Incremental", "Complete".
    :type deployment_mode: str or ~azure.mgmt.managedapplication.v2021_07_01.models.DeploymentMode
    """

    _validation = {
        'deployment_mode': {'required': True},
    }

    _attribute_map = {
        'deployment_mode': {'key': 'deploymentMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationDeploymentPolicy, self).__init__(**kwargs)
        self.deployment_mode = kwargs['deployment_mode']


class ApplicationJitAccessPolicy(msrest.serialization.Model):
    """Managed application Jit access policy.

    All required parameters must be populated in order to send to Azure.

    :param jit_access_enabled: Required. Whether the JIT access is enabled.
    :type jit_access_enabled: bool
    :param jit_approval_mode: JIT approval mode. Possible values include: "NotSpecified",
     "AutoApprove", "ManualApprove".
    :type jit_approval_mode: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.JitApprovalMode
    :param jit_approvers: The JIT approvers.
    :type jit_approvers:
     list[~azure.mgmt.managedapplication.v2021_07_01.models.JitApproverDefinition]
    :param maximum_jit_access_duration: The maximum duration JIT access is granted. This is an
     ISO8601 time period value.
    :type maximum_jit_access_duration: str
    """

    _validation = {
        'jit_access_enabled': {'required': True},
    }

    _attribute_map = {
        'jit_access_enabled': {'key': 'jitAccessEnabled', 'type': 'bool'},
        'jit_approval_mode': {'key': 'jitApprovalMode', 'type': 'str'},
        'jit_approvers': {'key': 'jitApprovers', 'type': '[JitApproverDefinition]'},
        'maximum_jit_access_duration': {'key': 'maximumJitAccessDuration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationJitAccessPolicy, self).__init__(**kwargs)
        self.jit_access_enabled = kwargs['jit_access_enabled']
        self.jit_approval_mode = kwargs.get('jit_approval_mode', None)
        self.jit_approvers = kwargs.get('jit_approvers', None)
        self.maximum_jit_access_duration = kwargs.get('maximum_jit_access_duration', None)


class ApplicationListResult(msrest.serialization.Model):
    """List of managed applications.

    :param value: The array of managed applications.
    :type value: list[~azure.mgmt.managedapplication.v2021_07_01.models.Application]
    :param next_link: The URL to use for getting the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Application]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ApplicationManagementPolicy(msrest.serialization.Model):
    """Managed application management policy.

    :param mode: The managed application management mode. Possible values include: "NotSpecified",
     "Unmanaged", "Managed".
    :type mode: str or ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationManagementMode
    """

    _attribute_map = {
        'mode': {'key': 'mode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationManagementPolicy, self).__init__(**kwargs)
        self.mode = kwargs.get('mode', None)


class ApplicationNotificationEndpoint(msrest.serialization.Model):
    """Managed application notification endpoint.

    All required parameters must be populated in order to send to Azure.

    :param uri: Required. The managed application notification endpoint uri.
    :type uri: str
    """

    _validation = {
        'uri': {'required': True},
    }

    _attribute_map = {
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationNotificationEndpoint, self).__init__(**kwargs)
        self.uri = kwargs['uri']


class ApplicationNotificationPolicy(msrest.serialization.Model):
    """Managed application notification policy.

    All required parameters must be populated in order to send to Azure.

    :param notification_endpoints: Required. The managed application notification endpoint.
    :type notification_endpoints:
     list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationNotificationEndpoint]
    """

    _validation = {
        'notification_endpoints': {'required': True},
    }

    _attribute_map = {
        'notification_endpoints': {'key': 'notificationEndpoints', 'type': '[ApplicationNotificationEndpoint]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationNotificationPolicy, self).__init__(**kwargs)
        self.notification_endpoints = kwargs['notification_endpoints']


class ApplicationPackageContact(msrest.serialization.Model):
    """The application package contact information.

    All required parameters must be populated in order to send to Azure.

    :param contact_name: The contact name.
    :type contact_name: str
    :param email: Required. The contact email.
    :type email: str
    :param phone: Required. The contact phone number.
    :type phone: str
    """

    _validation = {
        'email': {'required': True},
        'phone': {'required': True},
    }

    _attribute_map = {
        'contact_name': {'key': 'contactName', 'type': 'str'},
        'email': {'key': 'email', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationPackageContact, self).__init__(**kwargs)
        self.contact_name = kwargs.get('contact_name', None)
        self.email = kwargs['email']
        self.phone = kwargs['phone']


class ApplicationPackageLockingPolicyDefinition(msrest.serialization.Model):
    """Managed application locking policy.

    :param allowed_actions: The deny assignment excluded actions.
    :type allowed_actions: list[str]
    """

    _attribute_map = {
        'allowed_actions': {'key': 'allowedActions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationPackageLockingPolicyDefinition, self).__init__(**kwargs)
        self.allowed_actions = kwargs.get('allowed_actions', None)


class ApplicationPackageSupportUrls(msrest.serialization.Model):
    """The appliance package support URLs.

    :param public_azure: The public azure support URL.
    :type public_azure: str
    :param government_cloud: The government cloud support URL.
    :type government_cloud: str
    """

    _attribute_map = {
        'public_azure': {'key': 'publicAzure', 'type': 'str'},
        'government_cloud': {'key': 'governmentCloud', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationPackageSupportUrls, self).__init__(**kwargs)
        self.public_azure = kwargs.get('public_azure', None)
        self.government_cloud = kwargs.get('government_cloud', None)


class ApplicationPatchable(GenericResource):
    """Information about managed application.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.managedapplication.v2021_07_01.models.SystemData
    :param managed_by: ID of the resource that manages this resource.
    :type managed_by: str
    :param sku: The SKU of the resource.
    :type sku: ~azure.mgmt.managedapplication.v2021_07_01.models.Sku
    :param plan: The plan information.
    :type plan: ~azure.mgmt.managedapplication.v2021_07_01.models.PlanPatchable
    :param kind: The kind of the managed application. Allowed values are MarketPlace and
     ServiceCatalog.
    :type kind: str
    :param identity: The identity of the resource.
    :type identity: ~azure.mgmt.managedapplication.v2021_07_01.models.ManagedServiceIdentity
    :param managed_resource_group_id: The managed resource group Id.
    :type managed_resource_group_id: str
    :param application_definition_id: The fully qualified path of managed application definition
     Id.
    :type application_definition_id: str
    :param parameters: Name and value pairs that define the managed application parameters. It can
     be a JObject or a well formed JSON string.
    :type parameters: any
    :ivar outputs: Name and value pairs that define the managed application outputs.
    :vartype outputs: any
    :ivar provisioning_state: The managed application provisioning state. Possible values include:
     "NotSpecified", "Accepted", "Running", "Deleting", "Deleted", "Canceled", "Failed",
     "Succeeded", "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.ProvisioningState
    :ivar billing_details: The managed application billing details.
    :vartype billing_details:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationBillingDetailsDefinition
    :param jit_access_policy: The managed application Jit access policy.
    :type jit_access_policy:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationJitAccessPolicy
    :ivar publisher_tenant_id: The publisher tenant Id.
    :vartype publisher_tenant_id: str
    :ivar authorizations: The  read-only authorizations property that is retrieved from the
     application package.
    :vartype authorizations:
     list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationAuthorization]
    :ivar management_mode: The managed application management mode. Possible values include:
     "NotSpecified", "Unmanaged", "Managed".
    :vartype management_mode: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationManagementMode
    :ivar customer_support: The read-only customer support property that is retrieved from the
     application package.
    :vartype customer_support:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationPackageContact
    :ivar support_urls: The read-only support URLs property that is retrieved from the application
     package.
    :vartype support_urls:
     ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationPackageSupportUrls
    :ivar artifacts: The collection of managed application artifacts.
    :vartype artifacts: list[~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationArtifact]
    :ivar created_by: The client entity that created the JIT request.
    :vartype created_by: ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationClientDetails
    :ivar updated_by: The client entity that last updated the JIT request.
    :vartype updated_by: ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationClientDetails
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'kind': {'pattern': r'^[-\w\._,\(\)]+$'},
        'outputs': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'billing_details': {'readonly': True},
        'publisher_tenant_id': {'readonly': True},
        'authorizations': {'readonly': True},
        'management_mode': {'readonly': True},
        'customer_support': {'readonly': True},
        'support_urls': {'readonly': True},
        'artifacts': {'readonly': True},
        'created_by': {'readonly': True},
        'updated_by': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'managed_by': {'key': 'managedBy', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'plan': {'key': 'plan', 'type': 'PlanPatchable'},
        'kind': {'key': 'kind', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'managed_resource_group_id': {'key': 'properties.managedResourceGroupId', 'type': 'str'},
        'application_definition_id': {'key': 'properties.applicationDefinitionId', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': 'object'},
        'outputs': {'key': 'properties.outputs', 'type': 'object'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'billing_details': {'key': 'properties.billingDetails', 'type': 'ApplicationBillingDetailsDefinition'},
        'jit_access_policy': {'key': 'properties.jitAccessPolicy', 'type': 'ApplicationJitAccessPolicy'},
        'publisher_tenant_id': {'key': 'properties.publisherTenantId', 'type': 'str'},
        'authorizations': {'key': 'properties.authorizations', 'type': '[ApplicationAuthorization]'},
        'management_mode': {'key': 'properties.managementMode', 'type': 'str'},
        'customer_support': {'key': 'properties.customerSupport', 'type': 'ApplicationPackageContact'},
        'support_urls': {'key': 'properties.supportUrls', 'type': 'ApplicationPackageSupportUrls'},
        'artifacts': {'key': 'properties.artifacts', 'type': '[ApplicationArtifact]'},
        'created_by': {'key': 'properties.createdBy', 'type': 'ApplicationClientDetails'},
        'updated_by': {'key': 'properties.updatedBy', 'type': 'ApplicationClientDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationPatchable, self).__init__(**kwargs)
        self.plan = kwargs.get('plan', None)
        self.kind = kwargs.get('kind', None)
        self.identity = kwargs.get('identity', None)
        self.managed_resource_group_id = kwargs.get('managed_resource_group_id', None)
        self.application_definition_id = kwargs.get('application_definition_id', None)
        self.parameters = kwargs.get('parameters', None)
        self.outputs = None
        self.provisioning_state = None
        self.billing_details = None
        self.jit_access_policy = kwargs.get('jit_access_policy', None)
        self.publisher_tenant_id = None
        self.authorizations = None
        self.management_mode = None
        self.customer_support = None
        self.support_urls = None
        self.artifacts = None
        self.created_by = None
        self.updated_by = None


class ApplicationPolicy(msrest.serialization.Model):
    """Managed application policy.

    :param name: The policy name.
    :type name: str
    :param policy_definition_id: The policy definition Id.
    :type policy_definition_id: str
    :param parameters: The policy parameters.
    :type parameters: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'policy_definition_id': {'key': 'policyDefinitionId', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationPolicy, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.policy_definition_id = kwargs.get('policy_definition_id', None)
        self.parameters = kwargs.get('parameters', None)


class ApplicationPropertiesPatchable(msrest.serialization.Model):
    """The managed application properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param managed_resource_group_id: The managed resource group Id.
    :type managed_resource_group_id: str
    :param application_definition_id: The fully qualified path of managed application definition
     Id.
    :type application_definition_id: str
    :param parameters: Name and value pairs that define the managed application parameters. It can
     be a JObject or a well formed JSON string.
    :type parameters: any
    :ivar outputs: Name and value pairs that define the managed application outputs.
    :vartype outputs: any
    :ivar provisioning_state: The managed application provisioning state. Possible values include:
     "NotSpecified", "Accepted", "Running", "Deleting", "Deleted", "Canceled", "Failed",
     "Succeeded", "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.ProvisioningState
    """

    _validation = {
        'outputs': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'managed_resource_group_id': {'key': 'managedResourceGroupId', 'type': 'str'},
        'application_definition_id': {'key': 'applicationDefinitionId', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'object'},
        'outputs': {'key': 'outputs', 'type': 'object'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ApplicationPropertiesPatchable, self).__init__(**kwargs)
        self.managed_resource_group_id = kwargs.get('managed_resource_group_id', None)
        self.application_definition_id = kwargs.get('application_definition_id', None)
        self.parameters = kwargs.get('parameters', None)
        self.outputs = None
        self.provisioning_state = None


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.managedapplication.v2021_07_01.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~azure.mgmt.managedapplication.v2021_07_01.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :param error: The error object.
    :type error: ~azure.mgmt.managedapplication.v2021_07_01.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class JitApproverDefinition(msrest.serialization.Model):
    """JIT approver definition.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The approver service principal Id.
    :type id: str
    :param type: The approver type. Possible values include: "user", "group".
    :type type: str or ~azure.mgmt.managedapplication.v2021_07_01.models.JitApproverType
    :param display_name: The approver display name.
    :type display_name: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JitApproverDefinition, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.type = kwargs.get('type', None)
        self.display_name = kwargs.get('display_name', None)


class JitAuthorizationPolicies(msrest.serialization.Model):
    """The JIT authorization policies.

    All required parameters must be populated in order to send to Azure.

    :param principal_id: Required. The the principal id that will be granted JIT access.
    :type principal_id: str
    :param role_definition_id: Required. The role definition id that will be granted to the
     Principal.
    :type role_definition_id: str
    """

    _validation = {
        'principal_id': {'required': True},
        'role_definition_id': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'role_definition_id': {'key': 'roleDefinitionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JitAuthorizationPolicies, self).__init__(**kwargs)
        self.principal_id = kwargs['principal_id']
        self.role_definition_id = kwargs['role_definition_id']


class JitRequestDefinition(Resource):
    """Information about JIT request definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.managedapplication.v2021_07_01.models.SystemData
    :param application_resource_id: The parent application id.
    :type application_resource_id: str
    :ivar publisher_tenant_id: The publisher tenant id.
    :vartype publisher_tenant_id: str
    :param jit_authorization_policies: The JIT authorization policies.
    :type jit_authorization_policies:
     list[~azure.mgmt.managedapplication.v2021_07_01.models.JitAuthorizationPolicies]
    :param jit_scheduling_policy: The JIT request properties.
    :type jit_scheduling_policy:
     ~azure.mgmt.managedapplication.v2021_07_01.models.JitSchedulingPolicy
    :ivar provisioning_state: The JIT request provisioning state. Possible values include:
     "NotSpecified", "Accepted", "Running", "Deleting", "Deleted", "Canceled", "Failed",
     "Succeeded", "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.ProvisioningState
    :ivar jit_request_state: The JIT request state. Possible values include: "NotSpecified",
     "Pending", "Approved", "Denied", "Failed", "Canceled", "Expired", "Timeout".
    :vartype jit_request_state: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.JitRequestState
    :ivar created_by: The client entity that created the JIT request.
    :vartype created_by: ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationClientDetails
    :ivar updated_by: The client entity that last updated the JIT request.
    :vartype updated_by: ~azure.mgmt.managedapplication.v2021_07_01.models.ApplicationClientDetails
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'publisher_tenant_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'jit_request_state': {'readonly': True},
        'created_by': {'readonly': True},
        'updated_by': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'application_resource_id': {'key': 'properties.applicationResourceId', 'type': 'str'},
        'publisher_tenant_id': {'key': 'properties.publisherTenantId', 'type': 'str'},
        'jit_authorization_policies': {'key': 'properties.jitAuthorizationPolicies', 'type': '[JitAuthorizationPolicies]'},
        'jit_scheduling_policy': {'key': 'properties.jitSchedulingPolicy', 'type': 'JitSchedulingPolicy'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'jit_request_state': {'key': 'properties.jitRequestState', 'type': 'str'},
        'created_by': {'key': 'properties.createdBy', 'type': 'ApplicationClientDetails'},
        'updated_by': {'key': 'properties.updatedBy', 'type': 'ApplicationClientDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JitRequestDefinition, self).__init__(**kwargs)
        self.application_resource_id = kwargs.get('application_resource_id', None)
        self.publisher_tenant_id = None
        self.jit_authorization_policies = kwargs.get('jit_authorization_policies', None)
        self.jit_scheduling_policy = kwargs.get('jit_scheduling_policy', None)
        self.provisioning_state = None
        self.jit_request_state = None
        self.created_by = None
        self.updated_by = None


class JitRequestDefinitionListResult(msrest.serialization.Model):
    """List of JIT requests.

    :param value: The array of Jit request definition.
    :type value: list[~azure.mgmt.managedapplication.v2021_07_01.models.JitRequestDefinition]
    :param next_link: The URL to use for getting the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[JitRequestDefinition]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JitRequestDefinitionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class JitRequestPatchable(msrest.serialization.Model):
    """Information about JIT request.

    :param tags: A set of tags. Jit request tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JitRequestPatchable, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class JitSchedulingPolicy(msrest.serialization.Model):
    """The JIT scheduling policies.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. The type of JIT schedule. Possible values include: "NotSpecified",
     "Once", "Recurring".
    :type type: str or ~azure.mgmt.managedapplication.v2021_07_01.models.JitSchedulingType
    :param duration: Required. The required duration of the JIT request.
    :type duration: ~datetime.timedelta
    :param start_time: Required. The start time of the request.
    :type start_time: ~datetime.datetime
    """

    _validation = {
        'type': {'required': True},
        'duration': {'required': True},
        'start_time': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'duration'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JitSchedulingPolicy, self).__init__(**kwargs)
        self.type = kwargs['type']
        self.duration = kwargs['duration']
        self.start_time = kwargs['start_time']


class ManagedServiceIdentity(msrest.serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :param type: Required. Type of managed service identity (where both SystemAssigned and
     UserAssigned types are allowed). Possible values include: "None", "SystemAssigned",
     "UserAssigned", "SystemAssigned,UserAssigned".
    :type type: str or ~azure.mgmt.managedapplication.v2021_07_01.models.ManagedServiceIdentityType
    :param user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :type user_assigned_identities: dict[str,
     ~azure.mgmt.managedapplication.v2021_07_01.models.UserAssignedIdentity]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{UserAssignedIdentity}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ManagedServiceIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = kwargs['type']
        self.user_assigned_identities = kwargs.get('user_assigned_identities', None)


class Operation(msrest.serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :param display: Localized display information for this particular operation.
    :type display: ~azure.mgmt.managedapplication.v2021_07_01.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Possible values include: "user",
     "system", "user,system".
    :vartype origin: str or ~azure.mgmt.managedapplication.v2021_07_01.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. Possible values include: "Internal".
    :vartype action_type: str or ~azure.mgmt.managedapplication.v2021_07_01.models.ActionType
    """

    _validation = {
        'name': {'readonly': True},
        'is_data_action': {'readonly': True},
        'origin': {'readonly': True},
        'action_type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'action_type': {'key': 'actionType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = kwargs.get('display', None)
        self.origin = None
        self.action_type = None


class OperationDisplay(msrest.serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.managedapplication.v2021_07_01.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class Plan(msrest.serialization.Model):
    """Plan for the managed application.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The plan name.
    :type name: str
    :param publisher: Required. The publisher ID.
    :type publisher: str
    :param product: Required. The product code.
    :type product: str
    :param promotion_code: The promotion code.
    :type promotion_code: str
    :param version: Required. The plan's version.
    :type version: str
    """

    _validation = {
        'name': {'required': True},
        'publisher': {'required': True},
        'product': {'required': True},
        'version': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'product': {'key': 'product', 'type': 'str'},
        'promotion_code': {'key': 'promotionCode', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Plan, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.publisher = kwargs['publisher']
        self.product = kwargs['product']
        self.promotion_code = kwargs.get('promotion_code', None)
        self.version = kwargs['version']


class PlanPatchable(msrest.serialization.Model):
    """Plan for the managed application.

    :param name: The plan name.
    :type name: str
    :param publisher: The publisher ID.
    :type publisher: str
    :param product: The product code.
    :type product: str
    :param promotion_code: The promotion code.
    :type promotion_code: str
    :param version: The plan's version.
    :type version: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'product': {'key': 'product', 'type': 'str'},
        'promotion_code': {'key': 'promotionCode', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PlanPatchable, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.publisher = kwargs.get('publisher', None)
        self.product = kwargs.get('product', None)
        self.promotion_code = kwargs.get('promotion_code', None)
        self.version = kwargs.get('version', None)


class Sku(msrest.serialization.Model):
    """SKU for the resource.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The SKU name.
    :type name: str
    :param tier: The SKU tier.
    :type tier: str
    :param size: The SKU size.
    :type size: str
    :param family: The SKU family.
    :type family: str
    :param model: The SKU model.
    :type model: str
    :param capacity: The SKU capacity.
    :type capacity: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Sku, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.tier = kwargs.get('tier', None)
        self.size = kwargs.get('size', None)
        self.family = kwargs.get('family', None)
        self.model = kwargs.get('model', None)
        self.capacity = kwargs.get('capacity', None)


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~azure.mgmt.managedapplication.v2021_07_01.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or
     ~azure.mgmt.managedapplication.v2021_07_01.models.CreatedByType
    :param last_modified_at: The timestamp of resource last modification (UTC).
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)


class UserAssignedIdentity(msrest.serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserAssignedIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None
