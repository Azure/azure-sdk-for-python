# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, IO, Union

from azure.identity.aio import DefaultAzureCredential

from azure.mgmt.compute.aio import ComputeManagementClient
from azure.mgmt.network.aio import NetworkManagementClient


"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-compute
# USAGE
    python virtual_machine_create_with_empty_data_disks.py

    Before run the sample, please set the values of the client ID, tenant ID and client secret
    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,
    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:
    https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal
"""


async def main():
    VNET_NAME = "python-example-vnet"
    SUBNET_NAME = "python-example-subnet"
    IP_NAME = "python-example-ip"
    IP_CONFIG_NAME = "python-example-ip-config"
    NIC_NAME = "python-example-nic"
    RESOURCE_GROUP_NAME = "rg-kashifkhanservicebus"
    LOCATION = "southcentralus"

    credential = DefaultAzureCredential()
    subscription_id = "faa080af-c1d8-40ad-9cce-e1a450ca5b57"
    network_client = NetworkManagementClient(credential, subscription_id)

    async with network_client:
        poller = await network_client.virtual_networks.begin_create_or_update(RESOURCE_GROUP_NAME,VNET_NAME,{"location": LOCATION,"address_space": {"address_prefixes": ["10.0.0.0/16"]},},)
        vnet_result = await poller.result()
        print(f"Provisioned virtual network {vnet_result.name} with address \prefixes {vnet_result.address_space.address_prefixes}")

        poller = await network_client.subnets.begin_create_or_update(RESOURCE_GROUP_NAME,VNET_NAME,SUBNET_NAME,{"address_prefix": "10.0.0.0/24"},)
        subnet_result = await poller.result()

        print(f"Provisioned virtual subnet {subnet_result.name} with address \prefix {subnet_result.address_prefix}")

        # Step 4: Provision an IP address and wait for completion
        poller = await network_client.public_ip_addresses.begin_create_or_update(RESOURCE_GROUP_NAME,IP_NAME,{"location": LOCATION,"sku": {"name": "Standard"},"public_ip_allocation_method": "Static","public_ip_address_version": "IPV4",},)

        ip_address_result = await poller.result()

        print(f"Provisioned public IP address {ip_address_result.name} \with address {ip_address_result.ip_address}")

        # Step 5: Provision the network interface client
        poller = await network_client.network_interfaces.begin_create_or_update(RESOURCE_GROUP_NAME,NIC_NAME,{"location": LOCATION,"ip_configurations": [{"name": IP_CONFIG_NAME,"subnet": {"id": subnet_result.id},"public_ip_address": {"id": ip_address_result.id},}],},)

        nic_result = await poller.result()

        print(f"Provisioned network interface client {nic_result.name}")



        client = ComputeManagementClient(credential=credential,subscription_id=subscription_id,)
        async with client:
            print("about to go making a vm")
            VM_NAME = "ExampleVM"
            USERNAME = "azureuser"
            PASSWORD = "ChangePa$$w0rd24"
            poller = await client.virtual_machines.begin_create_or_update(RESOURCE_GROUP_NAME,VM_NAME,
                {
                    "location": LOCATION,
                    "storage_profile": {
                        "image_reference": {
                            "publisher": "Canonical",
                            "offer": "UbuntuServer",
                            "sku": "16.04.0-LTS",
                            "version": "latest",
                        }
                    },
                    "hardware_profile": {"vm_size": "Standard_DS1_v2"},
                    "os_profile": {
                        "computer_name": VM_NAME,
                        "admin_username": USERNAME,
                        "admin_password": PASSWORD,
                    },
                    "network_profile": {
                        "network_interfaces": [
                            {
                                "id": nic_result.id,
                            }
                        ]
                    },
                },
        )

            cont_token = poller.continuation_token()
        client2 = ComputeManagementClient(credential=credential,subscription_id=subscription_id,)
        async with client2:
            poller2 = await client2.virtual_machines.begin_create_or_update(None, None, None, continuation_token = cont_token)
            vm_result = await poller2.result()
            print(f"Provisioned virtual machine {vm_result.name}")
            poller2 = await client2.virtual_machines.begin_create_or_update(RESOURCE_GROUP_NAME,VM_NAME,
                {
                    "location": LOCATION,
                    "storage_profile": {
                        "image_reference": {
                            "publisher": "Canonical",
                            "offer": "UbuntuServer",
                            "sku": "16.04.0-LTS",
                            "version": "latest",
                        }
                    },
                    "hardware_profile": {"vm_size": "Standard_DS1_v2"},
                    "os_profile": {
                        "computer_name": VM_NAME,
                        "admin_username": USERNAME,
                        "admin_password": PASSWORD,
                    },
                    "network_profile": {
                        "network_interfaces": [
                            {
                                "id": nic_result.id,
                            }
                        ]
                    },
                },
            )
            print(await poller2.result())


# x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2024-03-01/examples/virtualMachineExamples/VirtualMachine_Create_WithEmptyDataDisks.json
if __name__ == "__main__":
    import asyncio
    asyncio.run( main())
