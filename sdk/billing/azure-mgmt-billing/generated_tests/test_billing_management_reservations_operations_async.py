# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.billing.aio import BillingManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestBillingManagementReservationsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(BillingManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_billing_account(self, resource_group):
        response = self.client.reservations.list_by_billing_account(
            billing_account_name="str",
            api_version="2024-04-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_billing_profile(self, resource_group):
        response = self.client.reservations.list_by_billing_profile(
            billing_account_name="str",
            billing_profile_name="str",
            api_version="2024-04-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_by_reservation_order(self, resource_group):
        response = await self.client.reservations.get_by_reservation_order(
            billing_account_name="str",
            reservation_order_id="str",
            reservation_id="str",
            api_version="2024-04-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_begin_update_by_billing_account(self, resource_group):
        response = await (
            await self.client.reservations.begin_update_by_billing_account(
                billing_account_name="str",
                reservation_order_id="str",
                reservation_id="str",
                body={
                    "appliedScopeProperties": {
                        "displayName": "str",
                        "managementGroupId": "str",
                        "resourceGroupId": "str",
                        "subscriptionId": "str",
                        "tenantId": "str",
                    },
                    "appliedScopeType": "str",
                    "displayName": "str",
                    "instanceFlexibility": "str",
                    "purchaseProperties": {
                        "appliedScopeProperties": {
                            "displayName": "str",
                            "managementGroupId": "str",
                            "resourceGroupId": "str",
                            "subscriptionId": "str",
                            "tenantId": "str",
                        },
                        "appliedScopeType": "str",
                        "appliedScopes": ["str"],
                        "billingPlan": "str",
                        "billingScopeId": "str",
                        "displayName": "str",
                        "instanceFlexibility": "str",
                        "location": "str",
                        "quantity": 0,
                        "renew": False,
                        "reservedResourceType": "str",
                        "reviewDateTime": "2020-02-20 00:00:00",
                        "sku": {"name": "str"},
                        "term": "str",
                    },
                    "renew": False,
                    "reviewDateTime": "2020-02-20 00:00:00",
                    "sku": {"name": "str"},
                    "tags": {"str": "str"},
                },
                api_version="2024-04-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_reservation_order(self, resource_group):
        response = self.client.reservations.list_by_reservation_order(
            billing_account_name="str",
            reservation_order_id="str",
            api_version="2024-04-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
