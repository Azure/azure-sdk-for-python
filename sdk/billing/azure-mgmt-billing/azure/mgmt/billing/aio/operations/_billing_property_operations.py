# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Optional, Type, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ...operations._billing_property_operations import build_get_request, build_update_request

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class BillingPropertyOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.billing.aio.BillingManagementClient`'s
        :attr:`billing_property` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get(
        self, include_billing_country: bool = False, include_transition_status: bool = False, **kwargs: Any
    ) -> _models.BillingProperty:
        """Gets the billing properties for a subscription.

        .. seealso::
           - https://docs.microsoft.com/en-us/rest/api/billing/

        :param include_billing_country: A flag that specifies whether or not to include billing
         country. Default value is False.
        :type include_billing_country: bool
        :param include_transition_status: A flag that specifies whether or not to include transition
         status for billing accounts with agreement type Microsoft Customer Agreement. Default value is
         False.
        :type include_transition_status: bool
        :return: BillingProperty or the result of cls(response)
        :rtype: ~azure.mgmt.billing.models.BillingProperty
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.BillingProperty] = kwargs.pop("cls", None)

        _request = build_get_request(
            subscription_id=self._config.subscription_id,
            include_billing_country=include_billing_country,
            include_transition_status=include_transition_status,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BillingProperty", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update(
        self, parameters: _models.BillingProperty, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.BillingProperty:
        """Updates the billing property of a subscription. Currently, cost center can be updated for
        billing accounts with agreement type Microsoft Customer Agreement and subscription service
        usage address can be updated for billing accounts with agreement type Microsoft Online Service
        Program.

        .. seealso::
           - https://docs.microsoft.com/en-us/rest/api/billing/

        :param parameters: A billing property. Required.
        :type parameters: ~azure.mgmt.billing.models.BillingProperty
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: BillingProperty or the result of cls(response)
        :rtype: ~azure.mgmt.billing.models.BillingProperty
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update(
        self, parameters: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.BillingProperty:
        """Updates the billing property of a subscription. Currently, cost center can be updated for
        billing accounts with agreement type Microsoft Customer Agreement and subscription service
        usage address can be updated for billing accounts with agreement type Microsoft Online Service
        Program.

        .. seealso::
           - https://docs.microsoft.com/en-us/rest/api/billing/

        :param parameters: A billing property. Required.
        :type parameters: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: BillingProperty or the result of cls(response)
        :rtype: ~azure.mgmt.billing.models.BillingProperty
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update(
        self, parameters: Union[_models.BillingProperty, IO[bytes]], **kwargs: Any
    ) -> _models.BillingProperty:
        """Updates the billing property of a subscription. Currently, cost center can be updated for
        billing accounts with agreement type Microsoft Customer Agreement and subscription service
        usage address can be updated for billing accounts with agreement type Microsoft Online Service
        Program.

        .. seealso::
           - https://docs.microsoft.com/en-us/rest/api/billing/

        :param parameters: A billing property. Is either a BillingProperty type or a IO[bytes] type.
         Required.
        :type parameters: ~azure.mgmt.billing.models.BillingProperty or IO[bytes]
        :return: BillingProperty or the result of cls(response)
        :rtype: ~azure.mgmt.billing.models.BillingProperty
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BillingProperty] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IOBase, bytes)):
            _content = parameters
        else:
            _json = self._serialize.body(parameters, "BillingProperty")

        _request = build_update_request(
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BillingProperty", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
