# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class BatchCreateTextListItemsRequest(_model_base.Model):
    """BatchCreateTextListItemsRequest.

    :ivar items:
    :vartype items: list[~azure.ai.contentsafety.models.TextListItemInfo]
    """

    items: Optional[List["_models.TextListItemInfo"]] = rest_field()

    @overload
    def __init__(
        self,
        *,
        items: Optional[List["_models.TextListItemInfo"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class BatchCreateTextListItemsResponse(_model_base.Model):
    """BatchCreateTextListItemsResponse.

    :ivar items:
    :vartype items: list[~azure.ai.contentsafety.models.TextListItem]
    """

    items: Optional[List["_models.TextListItem"]] = rest_field()

    @overload
    def __init__(
        self,
        *,
        items: Optional[List["_models.TextListItem"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class BatchDeleteTextListItemsRequest(_model_base.Model):
    """BatchDeleteTextListItemsRequest.

    :ivar items_ids:
    :vartype items_ids: list[str]
    """

    items_ids: Optional[List[str]] = rest_field(name="itemsIds")

    @overload
    def __init__(
        self,
        *,
        items_ids: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Image(_model_base.Model):
    """The content or url of image, if both given, the content field will be used. The maxinum size of
    image is 4MB, and the image should not be smaller than 50*50.

    :ivar content: Base64 encoding of image.
    :vartype content: bytes
    :ivar url: The blob url of image.
    :vartype url: str
    """

    content: Optional[bytes] = rest_field()
    """Base64 encoding of image. """
    url: Optional[str] = rest_field()
    """The blob url of image. """

    @overload
    def __init__(
        self,
        *,
        content: Optional[bytes] = None,
        url: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageDetectMultiSeverityResult(_model_base.Model):
    """ImageDetectMultiSeverityResult.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Required. Known values are: "Hate", "SelfHarm", "Sexual", and "Violence".
    :vartype category: str or ~azure.ai.contentsafety.models.ImageCategory
    :ivar risk_level: riskLevel represent the severity of the input, currently its value could be:
     0,2,4,6. Required.
    :vartype risk_level: int
    """

    category: Union[str, "_models.ImageCategory"] = rest_field()
    """Required. Known values are: \"Hate\", \"SelfHarm\", \"Sexual\", and \"Violence\"."""
    risk_level: int = rest_field(name="riskLevel")
    """riskLevel represent the severity of the input, currently its value could be: 0,2,4,6. Required. """

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.ImageCategory"],
        risk_level: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageDetectRequest(_model_base.Model):
    """The analysis request of the image.

    All required parameters must be populated in order to send to Azure.

    :ivar image: The image needs to be scanned. Required.
    :vartype image: ~azure.ai.contentsafety.models.Image
    :ivar categories: The categories will be analyzed, if not assigned, default categories will be
     analyzed.
    :vartype categories: list[str or ~azure.ai.contentsafety.models.ImageCategory]
    """

    image: "_models.Image" = rest_field()
    """The image needs to be scanned. Required. """
    categories: Optional[List[Union[str, "_models.ImageCategory"]]] = rest_field()
    """The categories will be analyzed, if not assigned, default categories will be
analyzed. """

    @overload
    def __init__(
        self,
        *,
        image: "_models.Image",
        categories: Optional[List[Union[str, "_models.ImageCategory"]]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageDetectResponse(_model_base.Model):
    """The analysis response of the image.

    :ivar hate_result:
    :vartype hate_result: ~azure.ai.contentsafety.models.ImageDetectMultiSeverityResult
    :ivar self_harm_result:
    :vartype self_harm_result: ~azure.ai.contentsafety.models.ImageDetectMultiSeverityResult
    :ivar sexual_result:
    :vartype sexual_result: ~azure.ai.contentsafety.models.ImageDetectMultiSeverityResult
    :ivar violence_result:
    :vartype violence_result: ~azure.ai.contentsafety.models.ImageDetectMultiSeverityResult
    """

    hate_result: Optional["_models.ImageDetectMultiSeverityResult"] = rest_field(name="hateResult")
    self_harm_result: Optional["_models.ImageDetectMultiSeverityResult"] = rest_field(name="selfHarmResult")
    sexual_result: Optional["_models.ImageDetectMultiSeverityResult"] = rest_field(name="sexualResult")
    violence_result: Optional["_models.ImageDetectMultiSeverityResult"] = rest_field(name="violenceResult")

    @overload
    def __init__(
        self,
        *,
        hate_result: Optional["_models.ImageDetectMultiSeverityResult"] = None,
        self_harm_result: Optional["_models.ImageDetectMultiSeverityResult"] = None,
        sexual_result: Optional["_models.ImageDetectMultiSeverityResult"] = None,
        violence_result: Optional["_models.ImageDetectMultiSeverityResult"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextDetectMultiSeverityResult(_model_base.Model):
    """TextDetectMultiSeverityResult.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Required. Known values are: "Hate", "SelfHarm", "Sexual", and "Violence".
    :vartype category: str or ~azure.ai.contentsafety.models.TextCategory
    :ivar risk_level: riskLevel represent the severity of the input, currently its value could be:
     0,2,4,6. Required.
    :vartype risk_level: int
    """

    category: Union[str, "_models.TextCategory"] = rest_field()
    """Required. Known values are: \"Hate\", \"SelfHarm\", \"Sexual\", and \"Violence\"."""
    risk_level: int = rest_field(name="riskLevel")
    """riskLevel represent the severity of the input, currently its value could be: 0,2,4,6. Required. """

    @overload
    def __init__(
        self,
        *,
        category: Union[str, "_models.TextCategory"],
        risk_level: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextDetectRequest(_model_base.Model):
    """The analysis request of the text.

    All required parameters must be populated in order to send to Azure.

    :ivar text: The text needs to be scanned. Required.
    :vartype text: str
    :ivar categories: The categories will be analyzed, if not assigned, a default set of
     categories'
     analysis results will be returned.
    :vartype categories: list[str or ~azure.ai.contentsafety.models.TextCategory]
    :ivar languages: Language hints for text analysis.  Values can contain only the language code
     (ex.
     "en", "fr") of BCP 47. If no languages given, the service will detact languages.
    :vartype languages: list[str]
    :ivar blocklist_ids: The ids of blocklists.
    :vartype blocklist_ids: list[str]
    :ivar break_by_blocklists: When set to true, other analysis will be skipped once any of
     configured
     blocklists was hit. When set to false, all the analysis will be done even when
     blocklists were hit.
    :vartype break_by_blocklists: bool
    """

    text: str = rest_field()
    """The text needs to be scanned. Required. """
    categories: Optional[List[Union[str, "_models.TextCategory"]]] = rest_field()
    """The categories will be analyzed, if not assigned, a default set of categories'
analysis results will be returned. """
    languages: Optional[List[str]] = rest_field()
    """Language hints for text analysis.  Values can contain only the language code (ex.
\"en\", \"fr\") of BCP 47. If no languages given, the service will detact languages. """
    blocklist_ids: Optional[List[str]] = rest_field(name="blocklistIds")
    """The ids of blocklists. """
    break_by_blocklists: Optional[bool] = rest_field(name="breakByBlocklists")
    """When set to true, other analysis will be skipped once any of configured
blocklists was hit. When set to false, all the analysis will be done even when
blocklists were hit. """

    @overload
    def __init__(
        self,
        *,
        text: str,
        categories: Optional[List[Union[str, "_models.TextCategory"]]] = None,
        languages: Optional[List[str]] = None,
        blocklist_ids: Optional[List[str]] = None,
        break_by_blocklists: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextDetectResponse(_model_base.Model):
    """The analysis response of the text.

    :ivar blocklist_match_results: The details of list match.
    :vartype blocklist_match_results: list[~azure.ai.contentsafety.models.TextListMatchResult]
    :ivar hate_result:
    :vartype hate_result: ~azure.ai.contentsafety.models.TextDetectMultiSeverityResult
    :ivar self_harm_result:
    :vartype self_harm_result: ~azure.ai.contentsafety.models.TextDetectMultiSeverityResult
    :ivar sexual_result:
    :vartype sexual_result: ~azure.ai.contentsafety.models.TextDetectMultiSeverityResult
    :ivar violence_result:
    :vartype violence_result: ~azure.ai.contentsafety.models.TextDetectMultiSeverityResult
    """

    blocklist_match_results: Optional[List["_models.TextListMatchResult"]] = rest_field(name="blocklistMatchResults")
    """The details of list match. """
    hate_result: Optional["_models.TextDetectMultiSeverityResult"] = rest_field(name="hateResult")
    self_harm_result: Optional["_models.TextDetectMultiSeverityResult"] = rest_field(name="selfHarmResult")
    sexual_result: Optional["_models.TextDetectMultiSeverityResult"] = rest_field(name="sexualResult")
    violence_result: Optional["_models.TextDetectMultiSeverityResult"] = rest_field(name="violenceResult")

    @overload
    def __init__(
        self,
        *,
        blocklist_match_results: Optional[List["_models.TextListMatchResult"]] = None,
        hate_result: Optional["_models.TextDetectMultiSeverityResult"] = None,
        self_harm_result: Optional["_models.TextDetectMultiSeverityResult"] = None,
        sexual_result: Optional["_models.TextDetectMultiSeverityResult"] = None,
        violence_result: Optional["_models.TextDetectMultiSeverityResult"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextList(_model_base.Model):
    """Text List.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar list_name: Text List Id. Required.
    :vartype list_name: str
    :ivar description: Description for Text List.
    :vartype description: str
    """

    list_name: str = rest_field(name="listName", readonly=True)
    """Text List Id. Required. """
    description: Optional[str] = rest_field()
    """Description for Text List. """

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextListItem(_model_base.Model):
    """Item in Text List.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar item_id: Item id. Required.
    :vartype item_id: str
    :ivar description: Text data description.
    :vartype description: str
    :ivar text: Text list item content. Required.
    :vartype text: str
    :ivar language: Language of this item, Value may contain only the language code (ex. "en",
     "fr") of BCP 47. If not assigned, "en" will be used. Required.
    :vartype language: str
    """

    item_id: str = rest_field(name="itemId", readonly=True)
    """Item id. Required. """
    description: Optional[str] = rest_field()
    """Text data description. """
    text: str = rest_field()
    """Text list item content. Required. """
    language: str = rest_field()
    """Language of this item, Value may contain only the language code (ex. \"en\",
\"fr\") of BCP 47. If not assigned, \"en\" will be used. Required. """

    @overload
    def __init__(
        self,
        *,
        text: str,
        language: str,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextListItemInfo(_model_base.Model):
    """Item Info in Text List.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Text data description.
    :vartype description: str
    :ivar text: Text list item content. Required.
    :vartype text: str
    :ivar language: Language of this item, Value may contain only the language code (ex. "en",
     "fr") of BCP 47. If not assigned, "en" will be used. Required.
    :vartype language: str
    """

    description: Optional[str] = rest_field()
    """Text data description. """
    text: str = rest_field()
    """Text list item content. Required. """
    language: str = rest_field()
    """Language of this item, Value may contain only the language code (ex. \"en\",
\"fr\") of BCP 47. If not assigned, \"en\" will be used. Required. """

    @overload
    def __init__(
        self,
        *,
        text: str,
        language: str,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TextListMatchResult(_model_base.Model):
    """The result of custom list match.

    All required parameters must be populated in order to send to Azure.

    :ivar list_id: The id of matched custom list. Required.
    :vartype list_id: str
    :ivar item_id: The id of matched item. Required.
    :vartype item_id: str
    :ivar item_text: The content of matched item. Required.
    :vartype item_text: str
    :ivar offset: The character offset of matched text in original input.
    :vartype offset: int
    :ivar length: The length of matched text in original input.
    :vartype length: int
    """

    list_id: str = rest_field(name="listId")
    """The id of matched custom list. Required. """
    item_id: str = rest_field(name="itemId")
    """The id of matched item. Required. """
    item_text: str = rest_field(name="itemText")
    """The content of matched item. Required. """
    offset: Optional[int] = rest_field()
    """The character offset of matched text in original input. """
    length: Optional[int] = rest_field()
    """The length of matched text in original input. """

    @overload
    def __init__(
        self,
        *,
        list_id: str,
        item_id: str,
        item_text: str,
        offset: Optional[int] = None,
        length: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
