# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import AzureJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import ContentSafetyClientMixinABC, _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_content_safety_analyze_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/text:analyze"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_content_safety_detect_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/image:analyze"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_content_safety_get_text_list_request(list_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/text/lists/{listName}"
    path_format_arguments = {
        "listName": _SERIALIZER.url("list_name", list_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_content_safety_create_or_update_list_request(list_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/text/lists/{listName}"
    path_format_arguments = {
        "listName": _SERIALIZER.url("list_name", list_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_content_safety_delete_text_list_request(list_name: str, **kwargs: Any) -> HttpRequest:
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    # Construct URL
    _url = "/text/lists/{listName}"
    path_format_arguments = {
        "listName": _SERIALIZER.url("list_name", list_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, **kwargs)


def build_content_safety_list_text_lists_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/text/lists"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_content_safety_add_items_request(list_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/text/lists/{listName}:addItems"
    path_format_arguments = {
        "listName": _SERIALIZER.url("list_name", list_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_content_safety_remove_items_request(list_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    # Construct URL
    _url = "/text/lists/{listName}:removeItems"
    path_format_arguments = {
        "listName": _SERIALIZER.url("list_name", list_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_content_safety_get_text_list_item_request(list_name: str, item_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/text/lists/{listName}/items/{itemId}"
    path_format_arguments = {
        "listName": _SERIALIZER.url("list_name", list_name, "str"),
        "itemId": _SERIALIZER.url("item_id", item_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_content_safety_list_text_list_items_request(
    list_name: str, *, top: Optional[int] = None, skip: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2023-04-30-preview"] = kwargs.pop(
        "api_version", _params.pop("api-version", "2023-04-30-preview")
    )
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/text/lists/{listName}/items"
    path_format_arguments = {
        "listName": _SERIALIZER.url("list_name", list_name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if skip is not None:
        _params["skip"] = _SERIALIZER.query("skip", skip, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class ContentSafetyClientOperationsMixin(ContentSafetyClientMixinABC):
    @overload
    def analyze(
        self, request: _models.TextDetectRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.TextDetectResponse:
        """Analyze Text.

        A sync API for harmful content analysis for text.

        :param request: The analysis request of the text. Required.
        :type request: ~azure.ai.contentsafety.models.TextDetectRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextDetectResponse. The TextDetectResponse is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextDetectResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def analyze(
        self, request: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.TextDetectResponse:
        """Analyze Text.

        A sync API for harmful content analysis for text.

        :param request: The analysis request of the text. Required.
        :type request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextDetectResponse. The TextDetectResponse is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextDetectResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def analyze(
        self, request: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.TextDetectResponse:
        """Analyze Text.

        A sync API for harmful content analysis for text.

        :param request: The analysis request of the text. Required.
        :type request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextDetectResponse. The TextDetectResponse is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextDetectResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def analyze(self, request: Union[_models.TextDetectRequest, JSON, IO], **kwargs: Any) -> _models.TextDetectResponse:
        """Analyze Text.

        A sync API for harmful content analysis for text.

        :param request: The analysis request of the text. Is one of the following types:
         TextDetectRequest, JSON, IO Required.
        :type request: ~azure.ai.contentsafety.models.TextDetectRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextDetectResponse. The TextDetectResponse is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextDetectResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TextDetectResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(request, (IO, bytes)):
            _content = request
        else:
            _content = json.dumps(request, cls=AzureJSONEncoder)  # type: ignore

        request = build_content_safety_analyze_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TextDetectResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def detect(
        self, request: _models.ImageDetectRequest, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.ImageDetectResponse:
        """Analyze Image.

        A sync API for harmful content analysis for image.

        :param request: The analysis request of the image. Required.
        :type request: ~azure.ai.contentsafety.models.ImageDetectRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ImageDetectResponse. The ImageDetectResponse is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.ImageDetectResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def detect(
        self, request: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.ImageDetectResponse:
        """Analyze Image.

        A sync API for harmful content analysis for image.

        :param request: The analysis request of the image. Required.
        :type request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ImageDetectResponse. The ImageDetectResponse is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.ImageDetectResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def detect(
        self, request: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.ImageDetectResponse:
        """Analyze Image.

        A sync API for harmful content analysis for image.

        :param request: The analysis request of the image. Required.
        :type request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ImageDetectResponse. The ImageDetectResponse is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.ImageDetectResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def detect(
        self, request: Union[_models.ImageDetectRequest, JSON, IO], **kwargs: Any
    ) -> _models.ImageDetectResponse:
        """Analyze Image.

        A sync API for harmful content analysis for image.

        :param request: The analysis request of the image. Is one of the following types:
         ImageDetectRequest, JSON, IO Required.
        :type request: ~azure.ai.contentsafety.models.ImageDetectRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: ImageDetectResponse. The ImageDetectResponse is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.ImageDetectResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ImageDetectResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(request, (IO, bytes)):
            _content = request
        else:
            _content = json.dumps(request, cls=AzureJSONEncoder)  # type: ignore

        request = build_content_safety_detect_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ImageDetectResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def get_text_list(self, list_name: str, **kwargs: Any) -> _models.TextList:
        """Get Text List By listId.

        Returns text list details of the Text List with list Id equal to list Id passed.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextList. The TextList is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextList
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TextList] = kwargs.pop("cls", None)

        request = build_content_safety_get_text_list_request(
            list_name=list_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TextList, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def create_or_update_list(
        self,
        list_name: str,
        resource: _models.TextList,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TextList:
        """Create Or Update Text List.

        Updates an Text List by listId, if listId not exists, create a new Text List.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param resource: The resource instance. Required.
        :type resource: ~azure.ai.contentsafety.models.TextList
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextList. The TextList is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextList
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_or_update_list(
        self, list_name: str, resource: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TextList:
        """Create Or Update Text List.

        Updates an Text List by listId, if listId not exists, create a new Text List.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param resource: The resource instance. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextList. The TextList is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextList
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_or_update_list(
        self, list_name: str, resource: IO, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TextList:
        """Create Or Update Text List.

        Updates an Text List by listId, if listId not exists, create a new Text List.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param resource: The resource instance. Required.
        :type resource: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextList. The TextList is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextList
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_or_update_list(
        self, list_name: str, resource: Union[_models.TextList, JSON, IO], **kwargs: Any
    ) -> _models.TextList:
        """Create Or Update Text List.

        Updates an Text List by listId, if listId not exists, create a new Text List.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param resource: The resource instance. Is one of the following types: TextList, JSON, IO
         Required.
        :type resource: ~azure.ai.contentsafety.models.TextList or JSON or IO
        :keyword content_type: This request has a JSON Merge Patch body. Default value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextList. The TextList is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextList
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TextList] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(resource, (IO, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=AzureJSONEncoder)  # type: ignore

        request = build_content_safety_create_or_update_list_request(
            list_name=list_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TextList, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TextList, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def delete_text_list(self, list_name: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete Text List By listId.

        Deletes Text List with the list Id equal to list Id passed.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_content_safety_delete_text_list_request(
            list_name=list_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def list_text_lists(self, **kwargs: Any) -> Iterable["_models.TextList"]:
        """Get All Text Lists.

        Get All Text Lists.

        :return: An iterator like instance of TextList
        :rtype: ~azure.core.paging.ItemPaged[~azure.ai.contentsafety.models.TextList]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.TextList]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_content_safety_list_text_lists_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                request = HttpRequest("GET", next_link)
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TextList], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @overload
    def add_items(
        self,
        list_name: str,
        body: _models.BatchCreateTextListItemsRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchCreateTextListItemsResponse:
        """add_items.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param body: Required.
        :type body: ~azure.ai.contentsafety.models.BatchCreateTextListItemsRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: BatchCreateTextListItemsResponse. The BatchCreateTextListItemsResponse is compatible
         with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.BatchCreateTextListItemsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def add_items(
        self, list_name: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.BatchCreateTextListItemsResponse:
        """add_items.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: BatchCreateTextListItemsResponse. The BatchCreateTextListItemsResponse is compatible
         with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.BatchCreateTextListItemsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def add_items(
        self, list_name: str, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.BatchCreateTextListItemsResponse:
        """add_items.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: BatchCreateTextListItemsResponse. The BatchCreateTextListItemsResponse is compatible
         with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.BatchCreateTextListItemsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_items(
        self, list_name: str, body: Union[_models.BatchCreateTextListItemsRequest, JSON, IO], **kwargs: Any
    ) -> _models.BatchCreateTextListItemsResponse:
        """add_items.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param body: Is one of the following types: BatchCreateTextListItemsRequest, JSON, IO Required.
        :type body: ~azure.ai.contentsafety.models.BatchCreateTextListItemsRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: BatchCreateTextListItemsResponse. The BatchCreateTextListItemsResponse is compatible
         with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.BatchCreateTextListItemsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchCreateTextListItemsResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder)  # type: ignore

        request = build_content_safety_add_items_request(
            list_name=list_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.BatchCreateTextListItemsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def remove_items(  # pylint: disable=inconsistent-return-statements
        self,
        list_name: str,
        body: _models.BatchDeleteTextListItemsRequest,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """remove_items.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param body: Required.
        :type body: ~azure.ai.contentsafety.models.BatchDeleteTextListItemsRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def remove_items(  # pylint: disable=inconsistent-return-statements
        self, list_name: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """remove_items.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def remove_items(  # pylint: disable=inconsistent-return-statements
        self, list_name: str, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """remove_items.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def remove_items(  # pylint: disable=inconsistent-return-statements
        self, list_name: str, body: Union[_models.BatchDeleteTextListItemsRequest, JSON, IO], **kwargs: Any
    ) -> None:
        """remove_items.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param body: Is one of the following types: BatchDeleteTextListItemsRequest, JSON, IO Required.
        :type body: ~azure.ai.contentsafety.models.BatchDeleteTextListItemsRequest or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder)  # type: ignore

        request = build_content_safety_remove_items_request(
            list_name=list_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_text_list_item(self, list_name: str, item_id: str, **kwargs: Any) -> _models.TextListItem:
        """Get Item By itemId and listId.

        Get Item By itemId and listId.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :param item_id: Item id. Required.
        :type item_id: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: TextListItem. The TextListItem is compatible with MutableMapping
        :rtype: ~azure.ai.contentsafety.models.TextListItem
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TextListItem] = kwargs.pop("cls", None)

        request = build_content_safety_get_text_list_item_request(
            list_name=list_name,
            item_id=item_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TextListItem, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_text_list_items(
        self, list_name: str, *, top: Optional[int] = None, skip: Optional[int] = None, **kwargs: Any
    ) -> Iterable["_models.TextListItem"]:
        """Get All Items By listId.

        Get All Items By listId.

        :param list_name: Text List Id. Required.
        :type list_name: str
        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :return: An iterator like instance of TextListItem
        :rtype: ~azure.core.paging.ItemPaged[~azure.ai.contentsafety.models.TextListItem]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.TextListItem]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_content_safety_list_text_list_items_request(
                    list_name=list_name,
                    top=top,
                    skip=skip,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                request = HttpRequest("GET", next_link)
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TextListItem], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)
