# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import ContentSafetyClientTestBase, ContentSafetyPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestContentSafety(ContentSafetyClientTestBase):
    @ContentSafetyPreparer()
    @recorded_by_proxy
    def test_analyze_image(self, contentsafety_endpoint):
        client = self.create_client(endpoint=contentsafety_endpoint)
        response = client.analyze_image(
            options={
                "image": {"blobUrl": "str", "content": bytes("bytes", encoding="utf-8")},
                "categories": ["str"],
                "outputType": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentSafetyPreparer()
    @recorded_by_proxy
    def test_analyze_text(self, contentsafety_endpoint):
        client = self.create_client(endpoint=contentsafety_endpoint)
        response = client.analyze_text(
            options={
                "text": "str",
                "blocklistNames": ["str"],
                "categories": ["str"],
                "haltOnBlocklistHit": bool,
                "outputType": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentSafetyPreparer()
    @recorded_by_proxy
    def test_detect_text_protected_material(self, contentsafety_endpoint):
        client = self.create_client(endpoint=contentsafety_endpoint)
        response = client.detect_text_protected_material(
            options={"text": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @ContentSafetyPreparer()
    @recorded_by_proxy
    def test_shield_prompt(self, contentsafety_endpoint):
        client = self.create_client(endpoint=contentsafety_endpoint)
        response = client.shield_prompt(
            options={"documents": ["str"], "userPrompt": "str"},
        )

        # please add some check logic here by yourself
        # ...
