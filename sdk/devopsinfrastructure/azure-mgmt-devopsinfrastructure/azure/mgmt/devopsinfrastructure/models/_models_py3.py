# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AgentProfile(_serialization.Model):
    """The agent profile of the machines in the pool.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Stateful, StatelessAgentProfile

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Discriminator property for AgentProfile. Required.
    :vartype kind: str
    :ivar resource_predictions: Defines pool buffer.
    :vartype resource_predictions: JSON
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "resource_predictions": {"key": "resourcePredictions", "type": "object"},
    }

    _subtype_map = {"kind": {"Stateful": "Stateful", "Stateless": "StatelessAgentProfile"}}

    def __init__(self, *, resource_predictions: Optional[JSON] = None, **kwargs: Any) -> None:
        """
        :keyword resource_predictions: Defines pool buffer.
        :paramtype resource_predictions: JSON
        """
        super().__init__(**kwargs)
        self.kind: Optional[str] = None
        self.resource_predictions = resource_predictions


class OrganizationProfile(_serialization.Model):
    """Defines the organization in which the pool will be used.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureDevOpsOrganizationProfile

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Discriminator property for OrganizationProfile. Required.
    :vartype kind: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"AzureDevOps": "AzureDevOpsOrganizationProfile"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kind: Optional[str] = None


class AzureDevOpsOrganizationProfile(OrganizationProfile):
    """Azure DevOps organization profile.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Discriminator property for OrganizationProfile. Required.
    :vartype kind: str
    :ivar organizations: The list of Azure DevOps organizations the pool should be present in.
     Required.
    :vartype organizations: list[~azure.mgmt.devopsinfrastructure.models.Organization]
    """

    _validation = {
        "kind": {"required": True},
        "organizations": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "organizations": {"key": "organizations", "type": "[Organization]"},
    }

    def __init__(self, *, organizations: List["_models.Organization"], **kwargs: Any) -> None:
        """
        :keyword organizations: The list of Azure DevOps organizations the pool should be present in.
         Required.
        :paramtype organizations: list[~azure.mgmt.devopsinfrastructure.models.Organization]
        """
        super().__init__(**kwargs)
        self.kind: str = "AzureDevOps"
        self.organizations = organizations


class DevOpsAzureSku(_serialization.Model):
    """The Azure SKU of the machines in the pool.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The Azure SKU name of the machines in the pool. Required.
    :vartype name: str
    :ivar tier: The Azure SKU tier of the machines in the pool.
    :vartype tier: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
    }

    def __init__(self, *, name: str, tier: str = "Standard", **kwargs: Any) -> None:
        """
        :keyword name: The Azure SKU name of the machines in the pool. Required.
        :paramtype name: str
        :keyword tier: The Azure SKU tier of the machines in the pool.
        :paramtype tier: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.tier = tier


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.devopsinfrastructure.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.devopsinfrastructure.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.devopsinfrastructure.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.devopsinfrastructure.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class FabricProfile(_serialization.Model):
    """Defines the type of fabric the agent will run on.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    VmssFabricProfile

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Discriminator property for FabricProfile. Required.
    :vartype kind: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"Vmss": "VmssFabricProfile"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kind: Optional[str] = None


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned, UserAssigned".
    :vartype type: str or ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.devopsinfrastructure.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned, UserAssigned".
        :paramtype type: str or ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.devopsinfrastructure.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class NetworkProfile(_serialization.Model):
    """The network profile of the machines in the pool.

    All required parameters must be populated in order to send to Azure.

    :ivar subnet_id: The subnet id on which to put all machines created in the pool. Required.
    :vartype subnet_id: str
    """

    _validation = {
        "subnet_id": {"required": True},
    }

    _attribute_map = {
        "subnet_id": {"key": "subnetId", "type": "str"},
    }

    def __init__(self, *, subnet_id: str, **kwargs: Any) -> None:
        """
        :keyword subnet_id: The subnet id on which to put all machines created in the pool. Required.
        :paramtype subnet_id: str
        """
        super().__init__(**kwargs)
        self.subnet_id = subnet_id


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.devopsinfrastructure.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.devopsinfrastructure.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.devopsinfrastructure.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.devopsinfrastructure.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.devopsinfrastructure.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class Organization(_serialization.Model):
    """Defines an Azure DevOps organization.

    All required parameters must be populated in order to send to Azure.

    :ivar url: The Azure DevOps organization URL in which the pool should be created. Required.
    :vartype url: str
    :ivar projects: Optional list of projects in which the pool should be created.
    :vartype projects: list[str]
    :ivar parallelism: How many machines can be created at maximum in this organization out of the
     maximumConcurrency of the pool.
    :vartype parallelism: int
    """

    _validation = {
        "url": {"required": True},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "projects": {"key": "projects", "type": "[str]"},
        "parallelism": {"key": "parallelism", "type": "int"},
    }

    def __init__(
        self, *, url: str, projects: Optional[List[str]] = None, parallelism: Optional[int] = None, **kwargs: Any
    ) -> None:
        """
        :keyword url: The Azure DevOps organization URL in which the pool should be created. Required.
        :paramtype url: str
        :keyword projects: Optional list of projects in which the pool should be created.
        :paramtype projects: list[str]
        :keyword parallelism: How many machines can be created at maximum in this organization out of
         the maximumConcurrency of the pool.
        :paramtype parallelism: int
        """
        super().__init__(**kwargs)
        self.url = url
        self.projects = projects
        self.parallelism = parallelism


class OsProfile(_serialization.Model):
    """The OS profile of the machines in the pool.

    All required parameters must be populated in order to send to Azure.

    :ivar secrets_management_settings: The secret management settings of the machines in the pool.
     Required.
    :vartype secrets_management_settings:
     ~azure.mgmt.devopsinfrastructure.models.SecretsManagementSettings
    """

    _validation = {
        "secrets_management_settings": {"required": True},
    }

    _attribute_map = {
        "secrets_management_settings": {"key": "secretsManagementSettings", "type": "SecretsManagementSettings"},
    }

    def __init__(self, *, secrets_management_settings: "_models.SecretsManagementSettings", **kwargs: Any) -> None:
        """
        :keyword secrets_management_settings: The secret management settings of the machines in the
         pool. Required.
        :paramtype secrets_management_settings:
         ~azure.mgmt.devopsinfrastructure.models.SecretsManagementSettings
        """
        super().__init__(**kwargs)
        self.secrets_management_settings = secrets_management_settings


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Pool(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Concrete tracked resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentity
    :ivar provisioning_state: The status of the current operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.devopsinfrastructure.models.ProvisioningState
    :ivar maximum_concurrency: Defines how many resources can there be created at any given time.
    :vartype maximum_concurrency: int
    :ivar organization_profile: Defines the organization in which the pool will be used.
    :vartype organization_profile: ~azure.mgmt.devopsinfrastructure.models.OrganizationProfile
    :ivar agent_profile: Defines how the machine will be handled once it executed a job.
    :vartype agent_profile: ~azure.mgmt.devopsinfrastructure.models.AgentProfile
    :ivar fabric_profile: Defines the type of fabric the agent will run on.
    :vartype fabric_profile: ~azure.mgmt.devopsinfrastructure.models.FabricProfile
    :ivar dev_center_project_resource_id: The resource id of the DevCenter Project the pool belongs
     to.
    :vartype dev_center_project_resource_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "maximum_concurrency": {"maximum": 10000, "minimum": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "maximum_concurrency": {"key": "properties.maximumConcurrency", "type": "int"},
        "organization_profile": {"key": "properties.organizationProfile", "type": "OrganizationProfile"},
        "agent_profile": {"key": "properties.agentProfile", "type": "AgentProfile"},
        "fabric_profile": {"key": "properties.fabricProfile", "type": "FabricProfile"},
        "dev_center_project_resource_id": {"key": "properties.devCenterProjectResourceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        maximum_concurrency: Optional[int] = None,
        organization_profile: Optional["_models.OrganizationProfile"] = None,
        agent_profile: Optional["_models.AgentProfile"] = None,
        fabric_profile: Optional["_models.FabricProfile"] = None,
        dev_center_project_resource_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentity
        :keyword provisioning_state: The status of the current operation. Known values are:
         "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
        :paramtype provisioning_state: str or ~azure.mgmt.devopsinfrastructure.models.ProvisioningState
        :keyword maximum_concurrency: Defines how many resources can there be created at any given
         time.
        :paramtype maximum_concurrency: int
        :keyword organization_profile: Defines the organization in which the pool will be used.
        :paramtype organization_profile: ~azure.mgmt.devopsinfrastructure.models.OrganizationProfile
        :keyword agent_profile: Defines how the machine will be handled once it executed a job.
        :paramtype agent_profile: ~azure.mgmt.devopsinfrastructure.models.AgentProfile
        :keyword fabric_profile: Defines the type of fabric the agent will run on.
        :paramtype fabric_profile: ~azure.mgmt.devopsinfrastructure.models.FabricProfile
        :keyword dev_center_project_resource_id: The resource id of the DevCenter Project the pool
         belongs to.
        :paramtype dev_center_project_resource_id: str
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.identity = identity
        self.provisioning_state = provisioning_state
        self.maximum_concurrency = maximum_concurrency
        self.organization_profile = organization_profile
        self.agent_profile = agent_profile
        self.fabric_profile = fabric_profile
        self.dev_center_project_resource_id = dev_center_project_resource_id


class PoolImage(_serialization.Model):
    """The VM image of the machines in the pool.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: The resource id of the image. Required.
    :vartype resource_id: str
    :ivar aliases: List of aliases to reference the image by.
    :vartype aliases: list[str]
    :ivar buffer: The percentage of the buffer to be allocated to this image.
    :vartype buffer: str
    """

    _validation = {
        "resource_id": {"required": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "aliases": {"key": "aliases", "type": "[str]"},
        "buffer": {"key": "buffer", "type": "str"},
    }

    def __init__(
        self, *, resource_id: str, aliases: Optional[List[str]] = None, buffer: str = "*", **kwargs: Any
    ) -> None:
        """
        :keyword resource_id: The resource id of the image. Required.
        :paramtype resource_id: str
        :keyword aliases: List of aliases to reference the image by.
        :paramtype aliases: list[str]
        :keyword buffer: The percentage of the buffer to be allocated to this image.
        :paramtype buffer: str
        """
        super().__init__(**kwargs)
        self.resource_id = resource_id
        self.aliases = aliases
        self.buffer = buffer


class PoolListResult(_serialization.Model):
    """The response of a Pool list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Pool items on this page. Required.
    :vartype value: list[~azure.mgmt.devopsinfrastructure.models.Pool]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Pool]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Pool"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Pool items on this page. Required.
        :paramtype value: list[~azure.mgmt.devopsinfrastructure.models.Pool]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PoolUpdate(_serialization.Model):
    """The type used for update operations of the Pool.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentity
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar provisioning_state: The status of the current operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.devopsinfrastructure.models.ProvisioningState
    :ivar maximum_concurrency: Defines how many resources can there be created at any given time.
    :vartype maximum_concurrency: int
    :ivar organization_profile: Defines the organization in which the pool will be used.
    :vartype organization_profile: ~azure.mgmt.devopsinfrastructure.models.OrganizationProfile
    :ivar agent_profile: Defines how the machine will be handled once it executed a job.
    :vartype agent_profile: ~azure.mgmt.devopsinfrastructure.models.AgentProfile
    :ivar fabric_profile: Defines the type of fabric the agent will run on.
    :vartype fabric_profile: ~azure.mgmt.devopsinfrastructure.models.FabricProfile
    :ivar dev_center_project_resource_id: The resource id of the DevCenter Project the pool belongs
     to.
    :vartype dev_center_project_resource_id: str
    """

    _validation = {
        "maximum_concurrency": {"maximum": 10000, "minimum": 1},
    }

    _attribute_map = {
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "tags": {"key": "tags", "type": "{str}"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "maximum_concurrency": {"key": "properties.maximumConcurrency", "type": "int"},
        "organization_profile": {"key": "properties.organizationProfile", "type": "OrganizationProfile"},
        "agent_profile": {"key": "properties.agentProfile", "type": "AgentProfile"},
        "fabric_profile": {"key": "properties.fabricProfile", "type": "FabricProfile"},
        "dev_center_project_resource_id": {"key": "properties.devCenterProjectResourceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        tags: Optional[Dict[str, str]] = None,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        maximum_concurrency: Optional[int] = None,
        organization_profile: Optional["_models.OrganizationProfile"] = None,
        agent_profile: Optional["_models.AgentProfile"] = None,
        fabric_profile: Optional["_models.FabricProfile"] = None,
        dev_center_project_resource_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentity
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword provisioning_state: The status of the current operation. Known values are:
         "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
        :paramtype provisioning_state: str or ~azure.mgmt.devopsinfrastructure.models.ProvisioningState
        :keyword maximum_concurrency: Defines how many resources can there be created at any given
         time.
        :paramtype maximum_concurrency: int
        :keyword organization_profile: Defines the organization in which the pool will be used.
        :paramtype organization_profile: ~azure.mgmt.devopsinfrastructure.models.OrganizationProfile
        :keyword agent_profile: Defines how the machine will be handled once it executed a job.
        :paramtype agent_profile: ~azure.mgmt.devopsinfrastructure.models.AgentProfile
        :keyword fabric_profile: Defines the type of fabric the agent will run on.
        :paramtype fabric_profile: ~azure.mgmt.devopsinfrastructure.models.FabricProfile
        :keyword dev_center_project_resource_id: The resource id of the DevCenter Project the pool
         belongs to.
        :paramtype dev_center_project_resource_id: str
        """
        super().__init__(**kwargs)
        self.identity = identity
        self.tags = tags
        self.provisioning_state = provisioning_state
        self.maximum_concurrency = maximum_concurrency
        self.organization_profile = organization_profile
        self.agent_profile = agent_profile
        self.fabric_profile = fabric_profile
        self.dev_center_project_resource_id = dev_center_project_resource_id


class SecretsManagementSettings(_serialization.Model):
    """The secret management settings of the machines in the pool.

    All required parameters must be populated in order to send to Azure.

    :ivar certificate_store_location: Where to store certificates on the machine.
    :vartype certificate_store_location: str
    :ivar observed_certificates: The list of certificates to install on all machines in the pool.
     Required.
    :vartype observed_certificates: list[str]
    :ivar key_exportable: Defines if the key of the certificates should be exportable. Required.
    :vartype key_exportable: bool
    """

    _validation = {
        "observed_certificates": {"required": True},
        "key_exportable": {"required": True},
    }

    _attribute_map = {
        "certificate_store_location": {"key": "certificateStoreLocation", "type": "str"},
        "observed_certificates": {"key": "observedCertificates", "type": "[str]"},
        "key_exportable": {"key": "keyExportable", "type": "bool"},
    }

    def __init__(
        self,
        *,
        observed_certificates: List[str],
        key_exportable: bool,
        certificate_store_location: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword certificate_store_location: Where to store certificates on the machine.
        :paramtype certificate_store_location: str
        :keyword observed_certificates: The list of certificates to install on all machines in the
         pool. Required.
        :paramtype observed_certificates: list[str]
        :keyword key_exportable: Defines if the key of the certificates should be exportable. Required.
        :paramtype key_exportable: bool
        """
        super().__init__(**kwargs)
        self.certificate_store_location = certificate_store_location
        self.observed_certificates = observed_certificates
        self.key_exportable = key_exportable


class Stateful(AgentProfile):
    """Stateful profile meaning that the machines will be returned to the pool after running a job.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Discriminator property for AgentProfile. Required.
    :vartype kind: str
    :ivar resource_predictions: Defines pool buffer.
    :vartype resource_predictions: JSON
    :ivar max_agent_lifetime: How long should stateful machines be kept around. The maximum is one
     week. Required.
    :vartype max_agent_lifetime: str
    """

    _validation = {
        "kind": {"required": True},
        "max_agent_lifetime": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "resource_predictions": {"key": "resourcePredictions", "type": "object"},
        "max_agent_lifetime": {"key": "maxAgentLifetime", "type": "str"},
    }

    def __init__(self, *, max_agent_lifetime: str, resource_predictions: Optional[JSON] = None, **kwargs: Any) -> None:
        """
        :keyword resource_predictions: Defines pool buffer.
        :paramtype resource_predictions: JSON
        :keyword max_agent_lifetime: How long should stateful machines be kept around. The maximum is
         one week. Required.
        :paramtype max_agent_lifetime: str
        """
        super().__init__(resource_predictions=resource_predictions, **kwargs)
        self.kind: str = "Stateful"
        self.max_agent_lifetime = max_agent_lifetime


class StatelessAgentProfile(AgentProfile):
    """Stateless profile meaning that the machines will be cleaned up after running a job.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Discriminator property for AgentProfile. Required.
    :vartype kind: str
    :ivar resource_predictions: Defines pool buffer.
    :vartype resource_predictions: JSON
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "resource_predictions": {"key": "resourcePredictions", "type": "object"},
    }

    def __init__(self, *, resource_predictions: Optional[JSON] = None, **kwargs: Any) -> None:
        """
        :keyword resource_predictions: Defines pool buffer.
        :paramtype resource_predictions: JSON
        """
        super().__init__(resource_predictions=resource_predictions, **kwargs)
        self.kind: str = "Stateless"


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.devopsinfrastructure.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.devopsinfrastructure.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.devopsinfrastructure.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.devopsinfrastructure.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class VmssFabricProfile(FabricProfile):
    """The agents will run on Virtual Machine Scale Sets.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Discriminator property for FabricProfile. Required.
    :vartype kind: str
    :ivar sku: The Azure SKU of the machines in the pool. Required.
    :vartype sku: ~azure.mgmt.devopsinfrastructure.models.DevOpsAzureSku
    :ivar images: The VM images of the machines in the pool. Required.
    :vartype images: list[~azure.mgmt.devopsinfrastructure.models.PoolImage]
    :ivar os_profile: The OS profile of the machines in the pool.
    :vartype os_profile: ~azure.mgmt.devopsinfrastructure.models.OsProfile
    :ivar network_profile: The network profile of the machines in the pool.
    :vartype network_profile: ~azure.mgmt.devopsinfrastructure.models.NetworkProfile
    """

    _validation = {
        "kind": {"required": True},
        "sku": {"required": True},
        "images": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "sku": {"key": "sku", "type": "DevOpsAzureSku"},
        "images": {"key": "images", "type": "[PoolImage]"},
        "os_profile": {"key": "osProfile", "type": "OsProfile"},
        "network_profile": {"key": "networkProfile", "type": "NetworkProfile"},
    }

    def __init__(
        self,
        *,
        sku: "_models.DevOpsAzureSku",
        images: List["_models.PoolImage"],
        os_profile: Optional["_models.OsProfile"] = None,
        network_profile: Optional["_models.NetworkProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sku: The Azure SKU of the machines in the pool. Required.
        :paramtype sku: ~azure.mgmt.devopsinfrastructure.models.DevOpsAzureSku
        :keyword images: The VM images of the machines in the pool. Required.
        :paramtype images: list[~azure.mgmt.devopsinfrastructure.models.PoolImage]
        :keyword os_profile: The OS profile of the machines in the pool.
        :paramtype os_profile: ~azure.mgmt.devopsinfrastructure.models.OsProfile
        :keyword network_profile: The network profile of the machines in the pool.
        :paramtype network_profile: ~azure.mgmt.devopsinfrastructure.models.NetworkProfile
        """
        super().__init__(**kwargs)
        self.kind: str = "Vmss"
        self.sku = sku
        self.images = images
        self.os_profile = os_profile
        self.network_profile = network_profile
