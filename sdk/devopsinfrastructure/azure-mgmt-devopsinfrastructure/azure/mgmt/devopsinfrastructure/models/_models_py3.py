# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AgentProfile(_serialization.Model):
    """The agent profile of the machines in the pool.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Stateful, StatelessAgentProfile

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for AgentProfile. Required.
    :vartype kind: str
    :ivar resource_predictions: Defines pool buffer/stand-by agents.
    :vartype resource_predictions: JSON
    :ivar resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
    :vartype resource_predictions_profile:
     ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfile
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "resource_predictions": {"key": "resourcePredictions", "type": "object"},
        "resource_predictions_profile": {"key": "resourcePredictionsProfile", "type": "ResourcePredictionsProfile"},
    }

    _subtype_map = {"kind": {"Stateful": "Stateful", "Stateless": "StatelessAgentProfile"}}

    def __init__(
        self,
        *,
        resource_predictions: Optional[JSON] = None,
        resource_predictions_profile: Optional["_models.ResourcePredictionsProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_predictions: Defines pool buffer/stand-by agents.
        :paramtype resource_predictions: JSON
        :keyword resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
        :paramtype resource_predictions_profile:
         ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfile
        """
        super().__init__(**kwargs)
        self.kind: Optional[str] = None
        self.resource_predictions = resource_predictions
        self.resource_predictions_profile = resource_predictions_profile


class ResourcePredictionsProfile(_serialization.Model):
    """Determines how the stand-by scheme should be provided.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AutomaticResourcePredictionsProfile, ManualResourcePredictionsProfile

    All required parameters must be populated in order to send to server.

    :ivar kind: Determines how the stand-by scheme should be provided. Required. Known values are:
     "Manual" and "Automatic".
    :vartype kind: str or ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfileType
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {
        "kind": {"Automatic": "AutomaticResourcePredictionsProfile", "Manual": "ManualResourcePredictionsProfile"}
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kind: Optional[str] = None


class AutomaticResourcePredictionsProfile(ResourcePredictionsProfile):
    """The stand-by agent scheme is determined based on historical demand.

    All required parameters must be populated in order to send to server.

    :ivar kind: Determines how the stand-by scheme should be provided. Required. Known values are:
     "Manual" and "Automatic".
    :vartype kind: str or ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfileType
    :ivar prediction_preference: Determines the balance between cost and performance. Known values
     are: "Balanced", "MostCostEffective", "MoreCostEffective", "MorePerformance", and
     "BestPerformance".
    :vartype prediction_preference: str or
     ~azure.mgmt.devopsinfrastructure.models.PredictionPreference
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "prediction_preference": {"key": "predictionPreference", "type": "str"},
    }

    def __init__(
        self, *, prediction_preference: Optional[Union[str, "_models.PredictionPreference"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword prediction_preference: Determines the balance between cost and performance. Known
         values are: "Balanced", "MostCostEffective", "MoreCostEffective", "MorePerformance", and
         "BestPerformance".
        :paramtype prediction_preference: str or
         ~azure.mgmt.devopsinfrastructure.models.PredictionPreference
        """
        super().__init__(**kwargs)
        self.kind: str = "Automatic"
        self.prediction_preference = prediction_preference


class OrganizationProfile(_serialization.Model):
    """Defines the organization in which the pool will be used.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureDevOpsOrganizationProfile, GitHubOrganizationProfile

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for OrganizationProfile. Required.
    :vartype kind: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"AzureDevOps": "AzureDevOpsOrganizationProfile", "GitHub": "GitHubOrganizationProfile"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kind: Optional[str] = None


class AzureDevOpsOrganizationProfile(OrganizationProfile):
    """Azure DevOps organization profile.

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for OrganizationProfile. Required.
    :vartype kind: str
    :ivar organizations: The list of Azure DevOps organizations the pool should be present in.
     Required.
    :vartype organizations: list[~azure.mgmt.devopsinfrastructure.models.Organization]
    :ivar permission_profile: The type of permission which determines which accounts are admins on
     the Azure DevOps pool.
    :vartype permission_profile:
     ~azure.mgmt.devopsinfrastructure.models.AzureDevOpsPermissionProfile
    """

    _validation = {
        "kind": {"required": True},
        "organizations": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "organizations": {"key": "organizations", "type": "[Organization]"},
        "permission_profile": {"key": "permissionProfile", "type": "AzureDevOpsPermissionProfile"},
    }

    def __init__(
        self,
        *,
        organizations: List["_models.Organization"],
        permission_profile: Optional["_models.AzureDevOpsPermissionProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword organizations: The list of Azure DevOps organizations the pool should be present in.
         Required.
        :paramtype organizations: list[~azure.mgmt.devopsinfrastructure.models.Organization]
        :keyword permission_profile: The type of permission which determines which accounts are admins
         on the Azure DevOps pool.
        :paramtype permission_profile:
         ~azure.mgmt.devopsinfrastructure.models.AzureDevOpsPermissionProfile
        """
        super().__init__(**kwargs)
        self.kind: str = "AzureDevOps"
        self.organizations = organizations
        self.permission_profile = permission_profile


class AzureDevOpsPermissionProfile(_serialization.Model):
    """Defines the type of Azure DevOps pool permission.

    All required parameters must be populated in order to send to server.

    :ivar kind: Determines who has admin permissions to the Azure DevOps pool. Required. Known
     values are: "Inherit", "CreatorOnly", and "SpecificAccounts".
    :vartype kind: str or ~azure.mgmt.devopsinfrastructure.models.AzureDevOpsPermissionType
    :ivar users: User email addresses.
    :vartype users: list[str]
    :ivar groups: Group email addresses.
    :vartype groups: list[str]
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "users": {"key": "users", "type": "[str]"},
        "groups": {"key": "groups", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "_models.AzureDevOpsPermissionType"],
        users: Optional[List[str]] = None,
        groups: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword kind: Determines who has admin permissions to the Azure DevOps pool. Required. Known
         values are: "Inherit", "CreatorOnly", and "SpecificAccounts".
        :paramtype kind: str or ~azure.mgmt.devopsinfrastructure.models.AzureDevOpsPermissionType
        :keyword users: User email addresses.
        :paramtype users: list[str]
        :keyword groups: Group email addresses.
        :paramtype groups: list[str]
        """
        super().__init__(**kwargs)
        self.kind = kind
        self.users = users
        self.groups = groups


class DataDisk(_serialization.Model):
    """The data disk of the VMSS.

    :ivar caching: The type of caching to be enabled for the data disks. The default value for
     caching is readwrite. For information about the caching options see:
     https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.devopsinfrastructure.models.CachingType
    :ivar disk_size_gi_b: The initial disk size in gigabytes.
    :vartype disk_size_gi_b: int
    :ivar storage_account_type: The storage Account type to be used for the data disk. If omitted,
     the default is "standard_lrs". Known values are: "Standard_LRS", "Premium_LRS",
     "StandardSSD_LRS", "Premium_ZRS", and "StandardSSD_ZRS".
    :vartype storage_account_type: str or
     ~azure.mgmt.devopsinfrastructure.models.StorageAccountType
    :ivar drive_letter: The drive letter for the empty data disk. If not specified, it will be the
     first available letter.
    :vartype drive_letter: str
    """

    _attribute_map = {
        "caching": {"key": "caching", "type": "str"},
        "disk_size_gi_b": {"key": "diskSizeGiB", "type": "int"},
        "storage_account_type": {"key": "storageAccountType", "type": "str"},
        "drive_letter": {"key": "driveLetter", "type": "str"},
    }

    def __init__(
        self,
        *,
        caching: Optional[Union[str, "_models.CachingType"]] = None,
        disk_size_gi_b: Optional[int] = None,
        storage_account_type: Optional[Union[str, "_models.StorageAccountType"]] = None,
        drive_letter: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword caching: The type of caching to be enabled for the data disks. The default value for
         caching is readwrite. For information about the caching options see:
         https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.  # pylint: disable=line-too-long
         Known values are: "None", "ReadOnly", and "ReadWrite".
        :paramtype caching: str or ~azure.mgmt.devopsinfrastructure.models.CachingType
        :keyword disk_size_gi_b: The initial disk size in gigabytes.
        :paramtype disk_size_gi_b: int
        :keyword storage_account_type: The storage Account type to be used for the data disk. If
         omitted, the default is "standard_lrs". Known values are: "Standard_LRS", "Premium_LRS",
         "StandardSSD_LRS", "Premium_ZRS", and "StandardSSD_ZRS".
        :paramtype storage_account_type: str or
         ~azure.mgmt.devopsinfrastructure.models.StorageAccountType
        :keyword drive_letter: The drive letter for the empty data disk. If not specified, it will be
         the first available letter.
        :paramtype drive_letter: str
        """
        super().__init__(**kwargs)
        self.caching = caching
        self.disk_size_gi_b = disk_size_gi_b
        self.storage_account_type = storage_account_type
        self.drive_letter = drive_letter


class DevOpsAzureSku(_serialization.Model):
    """The Azure SKU of the machines in the pool.

    All required parameters must be populated in order to send to server.

    :ivar name: The Azure SKU name of the machines in the pool. Required.
    :vartype name: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs: Any) -> None:
        """
        :keyword name: The Azure SKU name of the machines in the pool. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.devopsinfrastructure.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.devopsinfrastructure.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.devopsinfrastructure.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.devopsinfrastructure.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class FabricProfile(_serialization.Model):
    """Defines the type of fabric the agent will run on.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    VmssFabricProfile

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for FabricProfile. Required.
    :vartype kind: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    _subtype_map = {"kind": {"Vmss": "VmssFabricProfile"}}

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kind: Optional[str] = None


class GitHubOrganization(_serialization.Model):
    """Defines a GitHub organization.

    All required parameters must be populated in order to send to server.

    :ivar url: The GitHub organization URL in which the pool should be created. Required.
    :vartype url: str
    :ivar repositories: Optional list of repositories in which the pool should be created.
    :vartype repositories: list[str]
    """

    _validation = {
        "url": {"required": True},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "repositories": {"key": "repositories", "type": "[str]"},
    }

    def __init__(self, *, url: str, repositories: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword url: The GitHub organization URL in which the pool should be created. Required.
        :paramtype url: str
        :keyword repositories: Optional list of repositories in which the pool should be created.
        :paramtype repositories: list[str]
        """
        super().__init__(**kwargs)
        self.url = url
        self.repositories = repositories


class GitHubOrganizationProfile(OrganizationProfile):
    """GitHub organization profile.

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for OrganizationProfile. Required.
    :vartype kind: str
    :ivar organizations: The list of GitHub organizations/repositories the pool should be present
     in. Required.
    :vartype organizations: list[~azure.mgmt.devopsinfrastructure.models.GitHubOrganization]
    """

    _validation = {
        "kind": {"required": True},
        "organizations": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "organizations": {"key": "organizations", "type": "[GitHubOrganization]"},
    }

    def __init__(self, *, organizations: List["_models.GitHubOrganization"], **kwargs: Any) -> None:
        """
        :keyword organizations: The list of GitHub organizations/repositories the pool should be
         present in. Required.
        :paramtype organizations: list[~azure.mgmt.devopsinfrastructure.models.GitHubOrganization]
        """
        super().__init__(**kwargs)
        self.kind: str = "GitHub"
        self.organizations = organizations


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    """


class ImageVersion(ProxyResource):
    """An image version object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.devopsinfrastructure.models.ImageVersionProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "ImageVersionProperties"},
    }

    def __init__(self, *, properties: Optional["_models.ImageVersionProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.devopsinfrastructure.models.ImageVersionProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class ImageVersionListResult(_serialization.Model):
    """The response of a ImageVersion list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The ImageVersion items on this page. Required.
    :vartype value: list[~azure.mgmt.devopsinfrastructure.models.ImageVersion]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ImageVersion]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.ImageVersion"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The ImageVersion items on this page. Required.
        :paramtype value: list[~azure.mgmt.devopsinfrastructure.models.ImageVersion]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ImageVersionProperties(_serialization.Model):
    """Details of the ImageVersionProperties.

    All required parameters must be populated in order to send to server.

    :ivar version: Version of the image. Required.
    :vartype version: str
    """

    _validation = {
        "version": {"required": True},
    }

    _attribute_map = {
        "version": {"key": "version", "type": "str"},
    }

    def __init__(self, *, version: str, **kwargs: Any) -> None:
        """
        :keyword version: Version of the image. Required.
        :paramtype version: str
        """
        super().__init__(**kwargs)
        self.version = version


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.devopsinfrastructure.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.  # pylint: disable=line-too-long
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.devopsinfrastructure.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class ManualResourcePredictionsProfile(ResourcePredictionsProfile):
    """Customer provides the stand-by agent scheme.

    All required parameters must be populated in order to send to server.

    :ivar kind: Determines how the stand-by scheme should be provided. Required. Known values are:
     "Manual" and "Automatic".
    :vartype kind: str or ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfileType
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kind: str = "Manual"


class NetworkProfile(_serialization.Model):
    """The network profile of the machines in the pool.

    All required parameters must be populated in order to send to server.

    :ivar subnet_id: The subnet id on which to put all machines created in the pool. Required.
    :vartype subnet_id: str
    """

    _validation = {
        "subnet_id": {"required": True},
    }

    _attribute_map = {
        "subnet_id": {"key": "subnetId", "type": "str"},
    }

    def __init__(self, *, subnet_id: str, **kwargs: Any) -> None:
        """
        :keyword subnet_id: The subnet id on which to put all machines created in the pool. Required.
        :paramtype subnet_id: str
        """
        super().__init__(**kwargs)
        self.subnet_id = subnet_id


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.devopsinfrastructure.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.devopsinfrastructure.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.devopsinfrastructure.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.devopsinfrastructure.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.devopsinfrastructure.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class Organization(_serialization.Model):
    """Defines an Azure DevOps organization.

    All required parameters must be populated in order to send to server.

    :ivar url: The Azure DevOps organization URL in which the pool should be created. Required.
    :vartype url: str
    :ivar projects: Optional list of projects in which the pool should be created.
    :vartype projects: list[str]
    :ivar parallelism: How many machines can be created at maximum in this organization out of the
     maximumConcurrency of the pool.
    :vartype parallelism: int
    """

    _validation = {
        "url": {"required": True},
    }

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "projects": {"key": "projects", "type": "[str]"},
        "parallelism": {"key": "parallelism", "type": "int"},
    }

    def __init__(
        self, *, url: str, projects: Optional[List[str]] = None, parallelism: Optional[int] = None, **kwargs: Any
    ) -> None:
        """
        :keyword url: The Azure DevOps organization URL in which the pool should be created. Required.
        :paramtype url: str
        :keyword projects: Optional list of projects in which the pool should be created.
        :paramtype projects: list[str]
        :keyword parallelism: How many machines can be created at maximum in this organization out of
         the maximumConcurrency of the pool.
        :paramtype parallelism: int
        """
        super().__init__(**kwargs)
        self.url = url
        self.projects = projects
        self.parallelism = parallelism


class OsProfile(_serialization.Model):
    """The OS profile of the machines in the pool.

    :ivar secrets_management_settings: The secret management settings of the machines in the pool.
    :vartype secrets_management_settings:
     ~azure.mgmt.devopsinfrastructure.models.SecretsManagementSettings
    :ivar logon_type: Determines how the service should be run. By default, this will be set to
     Service. Known values are: "Service" and "Interactive".
    :vartype logon_type: str or ~azure.mgmt.devopsinfrastructure.models.LogonType
    """

    _attribute_map = {
        "secrets_management_settings": {"key": "secretsManagementSettings", "type": "SecretsManagementSettings"},
        "logon_type": {"key": "logonType", "type": "str"},
    }

    def __init__(
        self,
        *,
        secrets_management_settings: Optional["_models.SecretsManagementSettings"] = None,
        logon_type: Optional[Union[str, "_models.LogonType"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword secrets_management_settings: The secret management settings of the machines in the
         pool.
        :paramtype secrets_management_settings:
         ~azure.mgmt.devopsinfrastructure.models.SecretsManagementSettings
        :keyword logon_type: Determines how the service should be run. By default, this will be set to
         Service. Known values are: "Service" and "Interactive".
        :paramtype logon_type: str or ~azure.mgmt.devopsinfrastructure.models.LogonType
        """
        super().__init__(**kwargs)
        self.secrets_management_settings = secrets_management_settings
        self.logon_type = logon_type


class PagedQuota(_serialization.Model):
    """Paged collection of Quota items.

    All required parameters must be populated in order to send to server.

    :ivar value: The Quota items on this page. Required.
    :vartype value: list[~azure.mgmt.devopsinfrastructure.models.Quota]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Quota]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Quota"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Quota items on this page. Required.
        :paramtype value: list[~azure.mgmt.devopsinfrastructure.models.Quota]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Pool(TrackedResource):
    """Concrete tracked resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.devopsinfrastructure.models.PoolProperties
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentity
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "PoolProperties"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.PoolProperties"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.devopsinfrastructure.models.PoolProperties
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentity
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties
        self.identity = identity


class PoolImage(_serialization.Model):
    """The VM image of the machines in the pool.

    :ivar resource_id: The resource id of the image.
    :vartype resource_id: str
    :ivar well_known_image_name: The image to use from a well-known set of images made available to
     customers.
    :vartype well_known_image_name: str
    :ivar aliases: List of aliases to reference the image by.
    :vartype aliases: list[str]
    :ivar buffer: The percentage of the buffer to be allocated to this image.
    :vartype buffer: str
    """

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "well_known_image_name": {"key": "wellKnownImageName", "type": "str"},
        "aliases": {"key": "aliases", "type": "[str]"},
        "buffer": {"key": "buffer", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        well_known_image_name: Optional[str] = None,
        aliases: Optional[List[str]] = None,
        buffer: str = "*",
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_id: The resource id of the image.
        :paramtype resource_id: str
        :keyword well_known_image_name: The image to use from a well-known set of images made available
         to customers.
        :paramtype well_known_image_name: str
        :keyword aliases: List of aliases to reference the image by.
        :paramtype aliases: list[str]
        :keyword buffer: The percentage of the buffer to be allocated to this image.
        :paramtype buffer: str
        """
        super().__init__(**kwargs)
        self.resource_id = resource_id
        self.well_known_image_name = well_known_image_name
        self.aliases = aliases
        self.buffer = buffer


class PoolListResult(_serialization.Model):
    """The response of a Pool list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Pool items on this page. Required.
    :vartype value: list[~azure.mgmt.devopsinfrastructure.models.Pool]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Pool]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Pool"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Pool items on this page. Required.
        :paramtype value: list[~azure.mgmt.devopsinfrastructure.models.Pool]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PoolProperties(_serialization.Model):
    """Pool properties.

    All required parameters must be populated in order to send to server.

    :ivar provisioning_state: The status of the current operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.devopsinfrastructure.models.ProvisioningState
    :ivar maximum_concurrency: Defines how many resources can there be created at any given time.
     Required.
    :vartype maximum_concurrency: int
    :ivar organization_profile: Defines the organization in which the pool will be used. Required.
    :vartype organization_profile: ~azure.mgmt.devopsinfrastructure.models.OrganizationProfile
    :ivar agent_profile: Defines how the machine will be handled once it executed a job. Required.
    :vartype agent_profile: ~azure.mgmt.devopsinfrastructure.models.AgentProfile
    :ivar fabric_profile: Defines the type of fabric the agent will run on. Required.
    :vartype fabric_profile: ~azure.mgmt.devopsinfrastructure.models.FabricProfile
    :ivar dev_center_project_resource_id: The resource id of the DevCenter Project the pool belongs
     to. Required.
    :vartype dev_center_project_resource_id: str
    """

    _validation = {
        "maximum_concurrency": {"required": True, "maximum": 10000, "minimum": 1},
        "organization_profile": {"required": True},
        "agent_profile": {"required": True},
        "fabric_profile": {"required": True},
        "dev_center_project_resource_id": {"required": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "maximum_concurrency": {"key": "maximumConcurrency", "type": "int"},
        "organization_profile": {"key": "organizationProfile", "type": "OrganizationProfile"},
        "agent_profile": {"key": "agentProfile", "type": "AgentProfile"},
        "fabric_profile": {"key": "fabricProfile", "type": "FabricProfile"},
        "dev_center_project_resource_id": {"key": "devCenterProjectResourceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        maximum_concurrency: int,
        organization_profile: "_models.OrganizationProfile",
        agent_profile: "_models.AgentProfile",
        fabric_profile: "_models.FabricProfile",
        dev_center_project_resource_id: str,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword provisioning_state: The status of the current operation. Known values are:
         "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
        :paramtype provisioning_state: str or ~azure.mgmt.devopsinfrastructure.models.ProvisioningState
        :keyword maximum_concurrency: Defines how many resources can there be created at any given
         time. Required.
        :paramtype maximum_concurrency: int
        :keyword organization_profile: Defines the organization in which the pool will be used.
         Required.
        :paramtype organization_profile: ~azure.mgmt.devopsinfrastructure.models.OrganizationProfile
        :keyword agent_profile: Defines how the machine will be handled once it executed a job.
         Required.
        :paramtype agent_profile: ~azure.mgmt.devopsinfrastructure.models.AgentProfile
        :keyword fabric_profile: Defines the type of fabric the agent will run on. Required.
        :paramtype fabric_profile: ~azure.mgmt.devopsinfrastructure.models.FabricProfile
        :keyword dev_center_project_resource_id: The resource id of the DevCenter Project the pool
         belongs to. Required.
        :paramtype dev_center_project_resource_id: str
        """
        super().__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.maximum_concurrency = maximum_concurrency
        self.organization_profile = organization_profile
        self.agent_profile = agent_profile
        self.fabric_profile = fabric_profile
        self.dev_center_project_resource_id = dev_center_project_resource_id


class PoolUpdate(_serialization.Model):
    """The type used for update operations of the Pool.

    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentity
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.devopsinfrastructure.models.PoolUpdateProperties
    """

    _attribute_map = {
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "PoolUpdateProperties"},
    }

    def __init__(
        self,
        *,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.PoolUpdateProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword identity: The managed service identities assigned to this resource.
        :paramtype identity: ~azure.mgmt.devopsinfrastructure.models.ManagedServiceIdentity
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.devopsinfrastructure.models.PoolUpdateProperties
        """
        super().__init__(**kwargs)
        self.identity = identity
        self.tags = tags
        self.properties = properties


class PoolUpdateProperties(_serialization.Model):
    """The updatable properties of the Pool.

    :ivar provisioning_state: The status of the current operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.devopsinfrastructure.models.ProvisioningState
    :ivar maximum_concurrency: Defines how many resources can there be created at any given time.
    :vartype maximum_concurrency: int
    :ivar organization_profile: Defines the organization in which the pool will be used.
    :vartype organization_profile: ~azure.mgmt.devopsinfrastructure.models.OrganizationProfile
    :ivar agent_profile: Defines how the machine will be handled once it executed a job.
    :vartype agent_profile: ~azure.mgmt.devopsinfrastructure.models.AgentProfile
    :ivar fabric_profile: Defines the type of fabric the agent will run on.
    :vartype fabric_profile: ~azure.mgmt.devopsinfrastructure.models.FabricProfile
    :ivar dev_center_project_resource_id: The resource id of the DevCenter Project the pool belongs
     to.
    :vartype dev_center_project_resource_id: str
    """

    _validation = {
        "maximum_concurrency": {"maximum": 10000, "minimum": 1},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "maximum_concurrency": {"key": "maximumConcurrency", "type": "int"},
        "organization_profile": {"key": "organizationProfile", "type": "OrganizationProfile"},
        "agent_profile": {"key": "agentProfile", "type": "AgentProfile"},
        "fabric_profile": {"key": "fabricProfile", "type": "FabricProfile"},
        "dev_center_project_resource_id": {"key": "devCenterProjectResourceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        maximum_concurrency: Optional[int] = None,
        organization_profile: Optional["_models.OrganizationProfile"] = None,
        agent_profile: Optional["_models.AgentProfile"] = None,
        fabric_profile: Optional["_models.FabricProfile"] = None,
        dev_center_project_resource_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword provisioning_state: The status of the current operation. Known values are:
         "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
        :paramtype provisioning_state: str or ~azure.mgmt.devopsinfrastructure.models.ProvisioningState
        :keyword maximum_concurrency: Defines how many resources can there be created at any given
         time.
        :paramtype maximum_concurrency: int
        :keyword organization_profile: Defines the organization in which the pool will be used.
        :paramtype organization_profile: ~azure.mgmt.devopsinfrastructure.models.OrganizationProfile
        :keyword agent_profile: Defines how the machine will be handled once it executed a job.
        :paramtype agent_profile: ~azure.mgmt.devopsinfrastructure.models.AgentProfile
        :keyword fabric_profile: Defines the type of fabric the agent will run on.
        :paramtype fabric_profile: ~azure.mgmt.devopsinfrastructure.models.FabricProfile
        :keyword dev_center_project_resource_id: The resource id of the DevCenter Project the pool
         belongs to.
        :paramtype dev_center_project_resource_id: str
        """
        super().__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.maximum_concurrency = maximum_concurrency
        self.organization_profile = organization_profile
        self.agent_profile = agent_profile
        self.fabric_profile = fabric_profile
        self.dev_center_project_resource_id = dev_center_project_resource_id


class Quota(_serialization.Model):
    """Describes Resource Quota.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the quota.
    :vartype name: ~azure.mgmt.devopsinfrastructure.models.QuotaName
    :ivar id: Fully qualified ARM resource id. Required.
    :vartype id: str
    :ivar unit: The unit of usage measurement. Required.
    :vartype unit: str
    :ivar current_value: The current usage of the resource. Required.
    :vartype current_value: int
    :ivar limit: The maximum permitted usage of the resource. Required.
    :vartype limit: int
    """

    _validation = {
        "name": {"readonly": True},
        "id": {"required": True},
        "unit": {"required": True},
        "current_value": {"required": True},
        "limit": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "QuotaName"},
        "id": {"key": "id", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
        "current_value": {"key": "currentValue", "type": "int"},
        "limit": {"key": "limit", "type": "int"},
    }

    def __init__(
        self, *, id: str, unit: str, current_value: int, limit: int, **kwargs: Any  # pylint: disable=redefined-builtin
    ) -> None:
        """
        :keyword id: Fully qualified ARM resource id. Required.
        :paramtype id: str
        :keyword unit: The unit of usage measurement. Required.
        :paramtype unit: str
        :keyword current_value: The current usage of the resource. Required.
        :paramtype current_value: int
        :keyword limit: The maximum permitted usage of the resource. Required.
        :paramtype limit: int
        """
        super().__init__(**kwargs)
        self.name = None
        self.id = id
        self.unit = unit
        self.current_value = current_value
        self.limit = limit


class QuotaName(_serialization.Model):
    """The Quota Names.

    :ivar value: The name of the resource.
    :vartype value: str
    :ivar localized_value: The localized name of the resource.
    :vartype localized_value: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "str"},
        "localized_value": {"key": "localizedValue", "type": "str"},
    }

    def __init__(self, *, value: Optional[str] = None, localized_value: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The name of the resource.
        :paramtype value: str
        :keyword localized_value: The localized name of the resource.
        :paramtype localized_value: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.localized_value = localized_value


class ResourceDetailsObject(ProxyResource):
    """A ResourceDetailsObject.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.devopsinfrastructure.models.ResourceDetailsObjectProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "ResourceDetailsObjectProperties"},
    }

    def __init__(
        self, *, properties: Optional["_models.ResourceDetailsObjectProperties"] = None, **kwargs: Any
    ) -> None:
        """
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.devopsinfrastructure.models.ResourceDetailsObjectProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class ResourceDetailsObjectListResult(_serialization.Model):
    """The response of a ResourceDetailsObject list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The ResourceDetailsObject items on this page. Required.
    :vartype value: list[~azure.mgmt.devopsinfrastructure.models.ResourceDetailsObject]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ResourceDetailsObject]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.ResourceDetailsObject"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The ResourceDetailsObject items on this page. Required.
        :paramtype value: list[~azure.mgmt.devopsinfrastructure.models.ResourceDetailsObject]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ResourceDetailsObjectProperties(_serialization.Model):
    """Details of the ResourceDetailsObject.

    All required parameters must be populated in order to send to server.

    :ivar status: The status of the resource. Required. Known values are: "Ready", "NotReady",
     "Allocated", "PendingReturn", "Returned", "Leased", "Provisioning", "Updating", "Starting",
     "PendingReimage", and "Reimaging".
    :vartype status: str or ~azure.mgmt.devopsinfrastructure.models.ResourceStatus
    :ivar image: The image name of the resource. Required.
    :vartype image: str
    :ivar image_version: The version of the image running on the resource. Required.
    :vartype image_version: str
    """

    _validation = {
        "status": {"required": True},
        "image": {"required": True},
        "image_version": {"required": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "image": {"key": "image", "type": "str"},
        "image_version": {"key": "imageVersion", "type": "str"},
    }

    def __init__(
        self, *, status: Union[str, "_models.ResourceStatus"], image: str, image_version: str, **kwargs: Any
    ) -> None:
        """
        :keyword status: The status of the resource. Required. Known values are: "Ready", "NotReady",
         "Allocated", "PendingReturn", "Returned", "Leased", "Provisioning", "Updating", "Starting",
         "PendingReimage", and "Reimaging".
        :paramtype status: str or ~azure.mgmt.devopsinfrastructure.models.ResourceStatus
        :keyword image: The image name of the resource. Required.
        :paramtype image: str
        :keyword image_version: The version of the image running on the resource. Required.
        :paramtype image_version: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.image = image
        self.image_version = image_version


class ResourceSku(ProxyResource):
    """A ResourceSku.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.devopsinfrastructure.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.devopsinfrastructure.models.ResourceSkuProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "ResourceSkuProperties"},
    }

    def __init__(self, *, properties: Optional["_models.ResourceSkuProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.devopsinfrastructure.models.ResourceSkuProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class ResourceSkuCapabilities(_serialization.Model):
    """Describes The SKU capabilities object.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the SKU capability. Required.
    :vartype name: str
    :ivar value: The value of the SKU capability. Required.
    :vartype value: str
    """

    _validation = {
        "name": {"required": True},
        "value": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, name: str, value: str, **kwargs: Any) -> None:
        """
        :keyword name: The name of the SKU capability. Required.
        :paramtype name: str
        :keyword value: The value of the SKU capability. Required.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.value = value


class ResourceSkuListResult(_serialization.Model):
    """The response of a ResourceSku list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The ResourceSku items on this page. Required.
    :vartype value: list[~azure.mgmt.devopsinfrastructure.models.ResourceSku]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[ResourceSku]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.ResourceSku"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The ResourceSku items on this page. Required.
        :paramtype value: list[~azure.mgmt.devopsinfrastructure.models.ResourceSku]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ResourceSkuLocationInfo(_serialization.Model):
    """Describes an available Compute SKU Location Information.

    All required parameters must be populated in order to send to server.

    :ivar location: Location of the SKU. Required.
    :vartype location: str
    :ivar zones: List of availability zones where the SKU is supported. Required.
    :vartype zones: list[str]
    :ivar zone_details: Gets details of capabilities available to a SKU in specific zones.
     Required.
    :vartype zone_details: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuZoneDetails]
    """

    _validation = {
        "location": {"required": True},
        "zones": {"required": True},
        "zone_details": {"required": True},
    }

    _attribute_map = {
        "location": {"key": "location", "type": "str"},
        "zones": {"key": "zones", "type": "[str]"},
        "zone_details": {"key": "zoneDetails", "type": "[ResourceSkuZoneDetails]"},
    }

    def __init__(
        self, *, location: str, zones: List[str], zone_details: List["_models.ResourceSkuZoneDetails"], **kwargs: Any
    ) -> None:
        """
        :keyword location: Location of the SKU. Required.
        :paramtype location: str
        :keyword zones: List of availability zones where the SKU is supported. Required.
        :paramtype zones: list[str]
        :keyword zone_details: Gets details of capabilities available to a SKU in specific zones.
         Required.
        :paramtype zone_details: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuZoneDetails]
        """
        super().__init__(**kwargs)
        self.location = location
        self.zones = zones
        self.zone_details = zone_details


class ResourceSkuProperties(_serialization.Model):
    """Properties of a ResourceSku.

    All required parameters must be populated in order to send to server.

    :ivar resource_type: The type of resource the SKU applies to. Required.
    :vartype resource_type: str
    :ivar tier: The tier of virtual machines in a scale set. Required.
    :vartype tier: str
    :ivar size: The size of the SKU. Required.
    :vartype size: str
    :ivar family: The family of the SKU. Required.
    :vartype family: str
    :ivar locations: The set of locations that the SKU is available. Required.
    :vartype locations: list[str]
    :ivar location_info: A list of locations and availability zones in those locations where the
     SKU is available. Required.
    :vartype location_info: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuLocationInfo]
    :ivar capabilities: Name value pairs to describe the capability. Required.
    :vartype capabilities: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuCapabilities]
    :ivar restrictions: The restrictions of the SKU. Required.
    :vartype restrictions: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuRestrictions]
    """

    _validation = {
        "resource_type": {"required": True},
        "tier": {"required": True},
        "size": {"required": True},
        "family": {"required": True},
        "locations": {"required": True},
        "location_info": {"required": True},
        "capabilities": {"required": True},
        "restrictions": {"required": True},
    }

    _attribute_map = {
        "resource_type": {"key": "resourceType", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "family": {"key": "family", "type": "str"},
        "locations": {"key": "locations", "type": "[str]"},
        "location_info": {"key": "locationInfo", "type": "[ResourceSkuLocationInfo]"},
        "capabilities": {"key": "capabilities", "type": "[ResourceSkuCapabilities]"},
        "restrictions": {"key": "restrictions", "type": "[ResourceSkuRestrictions]"},
    }

    def __init__(
        self,
        *,
        resource_type: str,
        tier: str,
        size: str,
        family: str,
        locations: List[str],
        location_info: List["_models.ResourceSkuLocationInfo"],
        capabilities: List["_models.ResourceSkuCapabilities"],
        restrictions: List["_models.ResourceSkuRestrictions"],
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_type: The type of resource the SKU applies to. Required.
        :paramtype resource_type: str
        :keyword tier: The tier of virtual machines in a scale set. Required.
        :paramtype tier: str
        :keyword size: The size of the SKU. Required.
        :paramtype size: str
        :keyword family: The family of the SKU. Required.
        :paramtype family: str
        :keyword locations: The set of locations that the SKU is available. Required.
        :paramtype locations: list[str]
        :keyword location_info: A list of locations and availability zones in those locations where the
         SKU is available. Required.
        :paramtype location_info: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuLocationInfo]
        :keyword capabilities: Name value pairs to describe the capability. Required.
        :paramtype capabilities: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuCapabilities]
        :keyword restrictions: The restrictions of the SKU. Required.
        :paramtype restrictions: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuRestrictions]
        """
        super().__init__(**kwargs)
        self.resource_type = resource_type
        self.tier = tier
        self.size = size
        self.family = family
        self.locations = locations
        self.location_info = location_info
        self.capabilities = capabilities
        self.restrictions = restrictions


class ResourceSkuRestrictionInfo(_serialization.Model):
    """Describes an available Compute SKU Restriction Information.

    :ivar locations: Locations where the SKU is restricted.
    :vartype locations: list[str]
    :ivar zones: List of availability zones where the SKU is restricted.
    :vartype zones: list[str]
    """

    _attribute_map = {
        "locations": {"key": "locations", "type": "[str]"},
        "zones": {"key": "zones", "type": "[str]"},
    }

    def __init__(
        self, *, locations: Optional[List[str]] = None, zones: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword locations: Locations where the SKU is restricted.
        :paramtype locations: list[str]
        :keyword zones: List of availability zones where the SKU is restricted.
        :paramtype zones: list[str]
        """
        super().__init__(**kwargs)
        self.locations = locations
        self.zones = zones


class ResourceSkuRestrictions(_serialization.Model):
    """The restrictions of the SKU.

    All required parameters must be populated in order to send to server.

    :ivar type: the type of restrictions. Known values are: "Location" and "Zone".
    :vartype type: str or ~azure.mgmt.devopsinfrastructure.models.ResourceSkuRestrictionsType
    :ivar values: The value of restrictions. If the restriction type is set to location. This would
     be different locations where the SKU is restricted. Required.
    :vartype values: list[str]
    :ivar restriction_info: The information about the restriction where the SKU cannot be used.
     Required.
    :vartype restriction_info: ~azure.mgmt.devopsinfrastructure.models.ResourceSkuRestrictionInfo
    :ivar reason_code: the reason for restriction. Known values are: "QuotaId" and
     "NotAvailableForSubscription".
    :vartype reason_code: str or
     ~azure.mgmt.devopsinfrastructure.models.ResourceSkuRestrictionsReasonCode
    """

    _validation = {
        "values": {"required": True},
        "restriction_info": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
        "restriction_info": {"key": "restrictionInfo", "type": "ResourceSkuRestrictionInfo"},
        "reason_code": {"key": "reasonCode", "type": "str"},
    }

    def __init__(
        self,
        *,
        values: List[str],
        restriction_info: "_models.ResourceSkuRestrictionInfo",
        type: Optional[Union[str, "_models.ResourceSkuRestrictionsType"]] = None,
        reason_code: Optional[Union[str, "_models.ResourceSkuRestrictionsReasonCode"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: the type of restrictions. Known values are: "Location" and "Zone".
        :paramtype type: str or ~azure.mgmt.devopsinfrastructure.models.ResourceSkuRestrictionsType
        :keyword values: The value of restrictions. If the restriction type is set to location. This
         would be different locations where the SKU is restricted. Required.
        :paramtype values: list[str]
        :keyword restriction_info: The information about the restriction where the SKU cannot be used.
         Required.
        :paramtype restriction_info: ~azure.mgmt.devopsinfrastructure.models.ResourceSkuRestrictionInfo
        :keyword reason_code: the reason for restriction. Known values are: "QuotaId" and
         "NotAvailableForSubscription".
        :paramtype reason_code: str or
         ~azure.mgmt.devopsinfrastructure.models.ResourceSkuRestrictionsReasonCode
        """
        super().__init__(**kwargs)
        self.type = type
        self.values = values
        self.restriction_info = restriction_info
        self.reason_code = reason_code


class ResourceSkuZoneDetails(_serialization.Model):
    """Describes The zonal capabilities of a SKU.

    All required parameters must be populated in order to send to server.

    :ivar name: Gets the set of zones that the SKU is available in with the specified capabilities.
     Required.
    :vartype name: list[str]
    :ivar capabilities: A list of capabilities that are available for the SKU in the specified list
     of zones. Required.
    :vartype capabilities: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuCapabilities]
    """

    _validation = {
        "name": {"required": True},
        "capabilities": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "[str]"},
        "capabilities": {"key": "capabilities", "type": "[ResourceSkuCapabilities]"},
    }

    def __init__(
        self, *, name: List[str], capabilities: List["_models.ResourceSkuCapabilities"], **kwargs: Any
    ) -> None:
        """
        :keyword name: Gets the set of zones that the SKU is available in with the specified
         capabilities. Required.
        :paramtype name: list[str]
        :keyword capabilities: A list of capabilities that are available for the SKU in the specified
         list of zones. Required.
        :paramtype capabilities: list[~azure.mgmt.devopsinfrastructure.models.ResourceSkuCapabilities]
        """
        super().__init__(**kwargs)
        self.name = name
        self.capabilities = capabilities


class SecretsManagementSettings(_serialization.Model):
    """The secret management settings of the machines in the pool.

    All required parameters must be populated in order to send to server.

    :ivar certificate_store_location: Where to store certificates on the machine.
    :vartype certificate_store_location: str
    :ivar observed_certificates: The list of certificates to install on all machines in the pool.
     Required.
    :vartype observed_certificates: list[str]
    :ivar key_exportable: Defines if the key of the certificates should be exportable. Required.
    :vartype key_exportable: bool
    """

    _validation = {
        "observed_certificates": {"required": True},
        "key_exportable": {"required": True},
    }

    _attribute_map = {
        "certificate_store_location": {"key": "certificateStoreLocation", "type": "str"},
        "observed_certificates": {"key": "observedCertificates", "type": "[str]"},
        "key_exportable": {"key": "keyExportable", "type": "bool"},
    }

    def __init__(
        self,
        *,
        observed_certificates: List[str],
        key_exportable: bool,
        certificate_store_location: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword certificate_store_location: Where to store certificates on the machine.
        :paramtype certificate_store_location: str
        :keyword observed_certificates: The list of certificates to install on all machines in the
         pool. Required.
        :paramtype observed_certificates: list[str]
        :keyword key_exportable: Defines if the key of the certificates should be exportable. Required.
        :paramtype key_exportable: bool
        """
        super().__init__(**kwargs)
        self.certificate_store_location = certificate_store_location
        self.observed_certificates = observed_certificates
        self.key_exportable = key_exportable


class Stateful(AgentProfile):
    """Stateful profile meaning that the machines will be returned to the pool after running a job.

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for AgentProfile. Required.
    :vartype kind: str
    :ivar resource_predictions: Defines pool buffer/stand-by agents.
    :vartype resource_predictions: JSON
    :ivar resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
    :vartype resource_predictions_profile:
     ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfile
    :ivar max_agent_lifetime: How long should stateful machines be kept around. The maximum is one
     week.
    :vartype max_agent_lifetime: str
    :ivar grace_period_time_span: How long should the machine be kept around after it ran a
     workload when there are no stand-by agents. The maximum is one week.
    :vartype grace_period_time_span: str
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "resource_predictions": {"key": "resourcePredictions", "type": "object"},
        "resource_predictions_profile": {"key": "resourcePredictionsProfile", "type": "ResourcePredictionsProfile"},
        "max_agent_lifetime": {"key": "maxAgentLifetime", "type": "str"},
        "grace_period_time_span": {"key": "gracePeriodTimeSpan", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_predictions: Optional[JSON] = None,
        resource_predictions_profile: Optional["_models.ResourcePredictionsProfile"] = None,
        max_agent_lifetime: Optional[str] = None,
        grace_period_time_span: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_predictions: Defines pool buffer/stand-by agents.
        :paramtype resource_predictions: JSON
        :keyword resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
        :paramtype resource_predictions_profile:
         ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfile
        :keyword max_agent_lifetime: How long should stateful machines be kept around. The maximum is
         one week.
        :paramtype max_agent_lifetime: str
        :keyword grace_period_time_span: How long should the machine be kept around after it ran a
         workload when there are no stand-by agents. The maximum is one week.
        :paramtype grace_period_time_span: str
        """
        super().__init__(
            resource_predictions=resource_predictions,
            resource_predictions_profile=resource_predictions_profile,
            **kwargs
        )
        self.kind: str = "Stateful"
        self.max_agent_lifetime = max_agent_lifetime
        self.grace_period_time_span = grace_period_time_span


class StatelessAgentProfile(AgentProfile):
    """Stateless profile meaning that the machines will be cleaned up after running a job.

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for AgentProfile. Required.
    :vartype kind: str
    :ivar resource_predictions: Defines pool buffer/stand-by agents.
    :vartype resource_predictions: JSON
    :ivar resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
    :vartype resource_predictions_profile:
     ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfile
    """

    _validation = {
        "kind": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "resource_predictions": {"key": "resourcePredictions", "type": "object"},
        "resource_predictions_profile": {"key": "resourcePredictionsProfile", "type": "ResourcePredictionsProfile"},
    }

    def __init__(
        self,
        *,
        resource_predictions: Optional[JSON] = None,
        resource_predictions_profile: Optional["_models.ResourcePredictionsProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_predictions: Defines pool buffer/stand-by agents.
        :paramtype resource_predictions: JSON
        :keyword resource_predictions_profile: Defines how the pool buffer/stand-by agents is provided.
        :paramtype resource_predictions_profile:
         ~azure.mgmt.devopsinfrastructure.models.ResourcePredictionsProfile
        """
        super().__init__(
            resource_predictions=resource_predictions,
            resource_predictions_profile=resource_predictions_profile,
            **kwargs
        )
        self.kind: str = "Stateless"


class StorageProfile(_serialization.Model):
    """The storage profile of the VMSS.

    :ivar os_disk_storage_account_type: The Azure SKU name of the machines in the pool. Known
     values are: "Standard", "Premium", and "StandardSSD".
    :vartype os_disk_storage_account_type: str or
     ~azure.mgmt.devopsinfrastructure.models.OsDiskStorageAccountType
    :ivar data_disks: A list of empty data disks to attach.
    :vartype data_disks: list[~azure.mgmt.devopsinfrastructure.models.DataDisk]
    """

    _attribute_map = {
        "os_disk_storage_account_type": {"key": "osDiskStorageAccountType", "type": "str"},
        "data_disks": {"key": "dataDisks", "type": "[DataDisk]"},
    }

    def __init__(
        self,
        *,
        os_disk_storage_account_type: Optional[Union[str, "_models.OsDiskStorageAccountType"]] = None,
        data_disks: Optional[List["_models.DataDisk"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword os_disk_storage_account_type: The Azure SKU name of the machines in the pool. Known
         values are: "Standard", "Premium", and "StandardSSD".
        :paramtype os_disk_storage_account_type: str or
         ~azure.mgmt.devopsinfrastructure.models.OsDiskStorageAccountType
        :keyword data_disks: A list of empty data disks to attach.
        :paramtype data_disks: list[~azure.mgmt.devopsinfrastructure.models.DataDisk]
        """
        super().__init__(**kwargs)
        self.os_disk_storage_account_type = os_disk_storage_account_type
        self.data_disks = data_disks


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.devopsinfrastructure.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.devopsinfrastructure.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.devopsinfrastructure.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.devopsinfrastructure.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class VmssFabricProfile(FabricProfile):
    """The agents will run on Virtual Machine Scale Sets.

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for FabricProfile. Required.
    :vartype kind: str
    :ivar sku: The Azure SKU of the machines in the pool. Required.
    :vartype sku: ~azure.mgmt.devopsinfrastructure.models.DevOpsAzureSku
    :ivar images: The VM images of the machines in the pool. Required.
    :vartype images: list[~azure.mgmt.devopsinfrastructure.models.PoolImage]
    :ivar os_profile: The OS profile of the machines in the pool.
    :vartype os_profile: ~azure.mgmt.devopsinfrastructure.models.OsProfile
    :ivar storage_profile: The storage profile of the machines in the pool.
    :vartype storage_profile: ~azure.mgmt.devopsinfrastructure.models.StorageProfile
    :ivar network_profile: The network profile of the machines in the pool.
    :vartype network_profile: ~azure.mgmt.devopsinfrastructure.models.NetworkProfile
    """

    _validation = {
        "kind": {"required": True},
        "sku": {"required": True},
        "images": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "sku": {"key": "sku", "type": "DevOpsAzureSku"},
        "images": {"key": "images", "type": "[PoolImage]"},
        "os_profile": {"key": "osProfile", "type": "OsProfile"},
        "storage_profile": {"key": "storageProfile", "type": "StorageProfile"},
        "network_profile": {"key": "networkProfile", "type": "NetworkProfile"},
    }

    def __init__(
        self,
        *,
        sku: "_models.DevOpsAzureSku",
        images: List["_models.PoolImage"],
        os_profile: Optional["_models.OsProfile"] = None,
        storage_profile: Optional["_models.StorageProfile"] = None,
        network_profile: Optional["_models.NetworkProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sku: The Azure SKU of the machines in the pool. Required.
        :paramtype sku: ~azure.mgmt.devopsinfrastructure.models.DevOpsAzureSku
        :keyword images: The VM images of the machines in the pool. Required.
        :paramtype images: list[~azure.mgmt.devopsinfrastructure.models.PoolImage]
        :keyword os_profile: The OS profile of the machines in the pool.
        :paramtype os_profile: ~azure.mgmt.devopsinfrastructure.models.OsProfile
        :keyword storage_profile: The storage profile of the machines in the pool.
        :paramtype storage_profile: ~azure.mgmt.devopsinfrastructure.models.StorageProfile
        :keyword network_profile: The network profile of the machines in the pool.
        :paramtype network_profile: ~azure.mgmt.devopsinfrastructure.models.NetworkProfile
        """
        super().__init__(**kwargs)
        self.kind: str = "Vmss"
        self.sku = sku
        self.images = images
        self.os_profile = os_profile
        self.storage_profile = storage_profile
        self.network_profile = network_profile
