# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class Answers(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Do not return answers for the query.
    NONE = "none"
    #: Extracts answer candidates from the contents of the documents returned in response to a query
    #: expressed as a question in natural language.
    EXTRACTIVE = "extractive"

class AutocompleteMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles
    and 'oneTermWithContext' to use the current context in producing autocomplete terms.
    """

    #: Only one term is suggested. If the query has two terms, only the last term is completed. For
    #: example, if the input is 'washington medic', the suggested terms could include 'medicaid',
    #: 'medicare', and 'medicine'.
    ONE_TERM = "oneTerm"
    #: Matching two-term phrases in the index will be suggested. For example, if the input is 'medic',
    #: the suggested terms could include 'medicare coverage' and 'medical assistant'.
    TWO_TERMS = "twoTerms"
    #: Completes the last term in a query with two or more terms, where the last two terms are a
    #: phrase that exists in the index. For example, if the input is 'washington medic', the suggested
    #: terms could include 'washington medicaid' and 'washington medical'.
    ONE_TERM_WITH_CONTEXT = "oneTermWithContext"

class Captions(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Do not return captions for the query.
    NONE = "none"
    #: Extracts captions from the matching documents that contain passages relevant to the search
    #: query.
    EXTRACTIVE = "extractive"

class IndexActionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The operation to perform on a document in an indexing batch.
    """

    #: Inserts the document into the index if it is new and updates it if it exists. All fields are
    #: replaced in the update case.
    UPLOAD = "upload"
    #: Merges the specified field values with an existing document. If the document does not exist,
    #: the merge will fail. Any field you specify in a merge will replace the existing field in the
    #: document. This also applies to collections of primitive and complex types.
    MERGE = "merge"
    #: Behaves like merge if a document with the given key already exists in the index. If the
    #: document does not exist, it behaves like upload with a new document.
    MERGE_OR_UPLOAD = "mergeOrUpload"
    #: Removes the specified document from the index. Any field you specify in a delete operation
    #: other than the key field will be ignored. If you want to remove an individual field from a
    #: document, use merge instead and set the field explicitly to null.
    DELETE = "delete"

class QueryAnswerType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter is only valid if the query type is 'semantic'. If set, the query returns answers
    extracted from key passages in the highest ranked documents. The number of answers returned can
    be configured by appending the pipe character '|' followed by the 'count-:code:`<number of
    answers>`' option after the answers parameter value, such as 'extractive|count-3'. Default
    count is 1.
    """

    #: Do not return answers for the query.
    NONE = "none"
    #: Extracts answer candidates from the contents of the documents returned in response to a query
    #: expressed as a question in natural language.
    EXTRACTIVE = "extractive"

class QueryCaptionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter is only valid if the query type is 'semantic'. If set, the query returns
    captions extracted from key passages in the highest ranked documents. When Captions is set to
    'extractive', highlighting is enabled by default, and can be configured by appending the pipe
    character '|' followed by the 'highlight-<true/false>' option, such as
    'extractive|highlight-true'. Defaults to 'None'.
    """

    #: Do not return captions for the query.
    NONE = "none"
    #: Extracts captions from the matching documents that contain passages relevant to the search
    #: query.
    EXTRACTIVE = "extractive"

class QueryLanguage(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The language of the query.
    """

    #: Query language not specified.
    NONE = "none"
    #: Query language value for en-us.
    EN_US = "en-us"
    #: Query language value for en-gb.
    EN_GB = "en-gb"
    #: Query language value for en-in.
    EN_IN = "en-in"
    #: Query language value for en-ca.
    EN_CA = "en-ca"
    #: Query language value for en-au.
    EN_AU = "en-au"
    #: Query language value for fr-fr.
    FR_FR = "fr-fr"
    #: Query language value for fr-ca.
    FR_CA = "fr-ca"
    #: Query language value for de-de.
    DE_DE = "de-de"
    #: Query language value for es-es.
    ES_ES = "es-es"
    #: Query language value for es-mx.
    ES_MX = "es-mx"
    #: Query language value for zh-cn.
    ZH_CN = "zh-cn"
    #: Query language value for zh-tw.
    ZH_TW = "zh-tw"
    #: Query language value for pt-br.
    PT_BR = "pt-br"
    #: Query language value for pt-pt.
    PT_PT = "pt-pt"
    #: Query language value for it-it.
    IT_IT = "it-it"
    #: Query language value for ja-jp.
    JA_JP = "ja-jp"
    #: Query language value for ko-kr.
    KO_KR = "ko-kr"
    #: Query language value for ru-ru.
    RU_RU = "ru-ru"
    #: Query language value for cs-cz.
    CS_CZ = "cs-cz"
    #: Query language value for nl-be.
    NL_BE = "nl-be"
    #: Query language value for nl-nl.
    NL_NL = "nl-nl"
    #: Query language value for hu-hu.
    HU_HU = "hu-hu"
    #: Query language value for pl-pl.
    PL_PL = "pl-pl"
    #: Query language value for sv-se.
    SV_SE = "sv-se"
    #: Query language value for tr-tr.
    TR_TR = "tr-tr"
    #: Query language value for hi-in.
    HI_IN = "hi-in"
    #: Query language value for ar-sa.
    AR_SA = "ar-sa"
    #: Query language value for ar-eg.
    AR_EG = "ar-eg"
    #: Query language value for ar-ma.
    AR_MA = "ar-ma"
    #: Query language value for ar-kw.
    AR_KW = "ar-kw"
    #: Query language value for ar-jo.
    AR_JO = "ar-jo"
    #: Query language value for da-dk.
    DA_DK = "da-dk"
    #: Query language value for no-no.
    NO_NO = "no-no"
    #: Query language value for bg-bg.
    BG_BG = "bg-bg"
    #: Query language value for hr-hr.
    HR_HR = "hr-hr"
    #: Query language value for hr-ba.
    HR_BA = "hr-ba"
    #: Query language value for ms-my.
    MS_MY = "ms-my"
    #: Query language value for ms-bn.
    MS_BN = "ms-bn"
    #: Query language value for sl-sl.
    SL_SL = "sl-sl"
    #: Query language value for ta-in.
    TA_IN = "ta-in"
    #: Query language value for vi-vn.
    VI_VN = "vi-vn"
    #: Query language value for el-gr.
    EL_GR = "el-gr"
    #: Query language value for ro-ro.
    RO_RO = "ro-ro"
    #: Query language value for is-is.
    IS_IS = "is-is"
    #: Query language value for id-id.
    ID_ID = "id-id"
    #: Query language value for th-th.
    TH_TH = "th-th"
    #: Query language value for lt-lt.
    LT_LT = "lt-lt"
    #: Query language value for uk-ua.
    UK_UA = "uk-ua"
    #: Query language value for lv-lv.
    LV_LV = "lv-lv"
    #: Query language value for et-ee.
    ET_EE = "et-ee"
    #: Query language value for ca-es.
    CA_ES = "ca-es"
    #: Query language value for fi-fi.
    FI_FI = "fi-fi"
    #: Query language value for sr-ba.
    SR_BA = "sr-ba"
    #: Query language value for sr-me.
    SR_ME = "sr-me"
    #: Query language value for sr-rs.
    SR_RS = "sr-rs"
    #: Query language value for sk-sk.
    SK_SK = "sk-sk"
    #: Query language value for nb-no.
    NB_NO = "nb-no"
    #: Query language value for hy-am.
    HY_AM = "hy-am"
    #: Query language value for bn-in.
    BN_IN = "bn-in"
    #: Query language value for eu-es.
    EU_ES = "eu-es"
    #: Query language value for gl-es.
    GL_ES = "gl-es"
    #: Query language value for gu-in.
    GU_IN = "gu-in"
    #: Query language value for he-il.
    HE_IL = "he-il"
    #: Query language value for ga-ie.
    GA_IE = "ga-ie"
    #: Query language value for kn-in.
    KN_IN = "kn-in"
    #: Query language value for ml-in.
    ML_IN = "ml-in"
    #: Query language value for mr-in.
    MR_IN = "mr-in"
    #: Query language value for fa-ae.
    FA_AE = "fa-ae"
    #: Query language value for pa-in.
    PA_IN = "pa-in"
    #: Query language value for te-in.
    TE_IN = "te-in"
    #: Query language value for ur-pk.
    UR_PK = "ur-pk"

class QuerySpellerType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Improve search recall by spell-correcting individual search query terms.
    """

    #: Speller not enabled.
    NONE = "none"
    #: Speller corrects individual query terms using a static lexicon for the language specified by
    #: the queryLanguage parameter.
    LEXICON = "lexicon"

class QueryType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query
    uses the Lucene query syntax and 'semantic' if query syntax is not needed.
    """

    #: Uses the simple query syntax for searches. Search text is interpreted using a simple query
    #: language that allows for symbols such as +, * and "". Queries are evaluated across all
    #: searchable fields by default, unless the searchFields parameter is specified.
    SIMPLE = "simple"
    #: Uses the full Lucene query syntax for searches. Search text is interpreted using the Lucene
    #: query language which allows field-specific and weighted searches, as well as other advanced
    #: features.
    FULL = "full"
    #: Best suited for queries expressed in natural language as opposed to keywords. Improves
    #: precision of search results by re-ranking the top search results using a ranking model trained
    #: on the Web corpus.
    SEMANTIC = "semantic"

class ScoringStatistics(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """A value that specifies whether we want to calculate scoring statistics (such as document
    frequency) globally for more consistent scoring, or locally, for lower latency. The default is
    'local'. Use 'global' to aggregate scoring statistics globally before scoring. Using global
    scoring statistics can increase latency of search queries.
    """

    #: The scoring statistics will be calculated locally for lower latency.
    LOCAL = "local"
    #: The scoring statistics will be calculated globally for more consistent scoring.
    GLOBAL_ENUM = "global"

class SearchMode(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies whether any or all of the search terms must be matched in order to count the document
    as a match.
    """

    #: Any of the search terms must be matched in order to count the document as a match.
    ANY = "any"
    #: All of the search terms must be matched in order to count the document as a match.
    ALL = "all"

class Speller(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    #: Speller not enabled.
    NONE = "none"
    #: Speller corrects individual query terms using a static lexicon for the language specified by
    #: the queryLanguage parameter.
    LEXICON = "lexicon"
