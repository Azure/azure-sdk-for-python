# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6198, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import HttpResponseError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class DocumentsOperations(object):
    """DocumentsOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~search_index_client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def count(
        self,
        request_options=None,  # type: Optional["models.RequestOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> int
        """Queries the number of documents in the index.

        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: long or the result of cls(response)
        :rtype: long
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType[int]
        error_map = kwargs.pop('error_map', {})
        
        client_request_id = None
        if request_options is not None:
            client_request_id = request_options.client_request_id
        api_version = "2019-05-06"

        # Construct URL
        url = self.count.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('long', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    count.metadata = {'url': '/docs/$count'}

    def search_get(
        self,
        search_text=None,  # type: Optional[str]
        search_options=None,  # type: Optional["models.SearchOptions"]
        request_options=None,  # type: Optional["models.RequestOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.SearchDocumentsResult"
        """Searches for documents in the index.

        :param search_text: A full-text search query expression; Use "*" or omit this parameter to
         match all documents.
        :type search_text: str
        :param search_options: Parameter group.
        :type search_options: ~search_index_client.models.SearchOptions
        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SearchDocumentsResult or the result of cls(response)
        :rtype: ~search_index_client.models.SearchDocumentsResult
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.SearchDocumentsResult"]
        error_map = kwargs.pop('error_map', {})
        
        include_total_result_count = None
        facets = None
        filter = None
        highlight_fields = None
        highlight_post_tag = None
        highlight_pre_tag = None
        minimum_coverage = None
        order_by = None
        query_type = None
        scoring_parameters = None
        scoring_profile = None
        search_fields = None
        search_mode = None
        select = None
        skip = None
        top = None
        client_request_id = None
        if request_options is not None:
            client_request_id = request_options.client_request_id
        if search_options is not None:
            include_total_result_count = search_options.include_total_result_count
            facets = search_options.facets
            filter = search_options.filter
            highlight_fields = search_options.highlight_fields
            highlight_post_tag = search_options.highlight_post_tag
            highlight_pre_tag = search_options.highlight_pre_tag
            minimum_coverage = search_options.minimum_coverage
            order_by = search_options.order_by
            query_type = search_options.query_type
            scoring_parameters = search_options.scoring_parameters
            scoring_profile = search_options.scoring_profile
            search_fields = search_options.search_fields
            search_mode = search_options.search_mode
            select = search_options.select
            skip = search_options.skip
            top = search_options.top
        api_version = "2019-05-06"

        # Construct URL
        url = self.search_get.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if search_text is not None:
            query_parameters['search'] = self._serialize.query("search_text", search_text, 'str')
        if include_total_result_count is not None:
            query_parameters['$count'] = self._serialize.query("include_total_result_count", include_total_result_count, 'bool')
        if facets is not None:
            query_parameters['facet'] = self._serialize.query("facets", facets, '[str]', div=',')
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if highlight_fields is not None:
            query_parameters['highlight'] = self._serialize.query("highlight_fields", highlight_fields, '[str]')
        if highlight_post_tag is not None:
            query_parameters['highlightPostTag'] = self._serialize.query("highlight_post_tag", highlight_post_tag, 'str')
        if highlight_pre_tag is not None:
            query_parameters['highlightPreTag'] = self._serialize.query("highlight_pre_tag", highlight_pre_tag, 'str')
        if minimum_coverage is not None:
            query_parameters['minimumCoverage'] = self._serialize.query("minimum_coverage", minimum_coverage, 'float')
        if order_by is not None:
            query_parameters['$orderby'] = self._serialize.query("order_by", order_by, '[str]')
        if query_type is not None:
            query_parameters['queryType'] = self._serialize.query("query_type", query_type, 'str')
        if scoring_parameters is not None:
            query_parameters['scoringParameter'] = self._serialize.query("scoring_parameters", scoring_parameters, '[str]', div=',')
        if scoring_profile is not None:
            query_parameters['scoringProfile'] = self._serialize.query("scoring_profile", scoring_profile, 'str')
        if search_fields is not None:
            query_parameters['searchFields'] = self._serialize.query("search_fields", search_fields, '[str]')
        if search_mode is not None:
            query_parameters['searchMode'] = self._serialize.query("search_mode", search_mode, 'str')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]')
        if skip is not None:
            query_parameters['$skip'] = self._serialize.query("skip", skip, 'int')
        if top is not None:
            query_parameters['$top'] = self._serialize.query("top", top, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SearchDocumentsResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    search_get.metadata = {'url': '/docs'}

    def search_post(
        self,
        search_request,  # type: "models.SearchRequest"
        request_options=None,  # type: Optional["models.RequestOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.SearchDocumentsResult"
        """Searches for documents in the index.

        :param search_request: The definition of the Search request.
        :type search_request: ~search_index_client.models.SearchRequest
        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SearchDocumentsResult or the result of cls(response)
        :rtype: ~search_index_client.models.SearchDocumentsResult
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.SearchDocumentsResult"]
        error_map = kwargs.pop('error_map', {})
        
        client_request_id = None
        if request_options is not None:
            client_request_id = request_options.client_request_id
        api_version = "2019-05-06"

        # Construct URL
        url = self.search_post.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(search_request, 'SearchRequest')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SearchDocumentsResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    search_post.metadata = {'url': '/docs/search.post.search'}

    def get(
        self,
        key,  # type: str
        selected_fields=None,  # type: Optional[List[str]]
        request_options=None,  # type: Optional["models.RequestOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ComponentsSchemasFacetresultAdditionalproperties"
        """Retrieves a document from the index.

        :param key: The key of the document to retrieve.
        :type key: str
        :param selected_fields: List of field names to retrieve for the document; Any field not
         retrieved will be missing from the returned document.
        :type selected_fields: list[str]
        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ComponentsSchemasFacetresultAdditionalproperties or the result of cls(response)
        :rtype: ~search_index_client.models.ComponentsSchemasFacetresultAdditionalproperties
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.ComponentsSchemasFacetresultAdditionalproperties"]
        error_map = kwargs.pop('error_map', {})
        
        client_request_id = None
        if request_options is not None:
            client_request_id = request_options.client_request_id
        api_version = "2019-05-06"

        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
            'key': self._serialize.url("key", key, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if selected_fields is not None:
            query_parameters['$select'] = self._serialize.query("selected_fields", selected_fields, '[str]')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ComponentsSchemasFacetresultAdditionalproperties', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/docs(\'{key}\')'}

    def suggest_get(
        self,
        search_text,  # type: str
        suggester_name,  # type: str
        suggest_options=None,  # type: Optional["models.SuggestOptions"]
        request_options=None,  # type: Optional["models.RequestOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.SuggestDocumentsResult"
        """Suggests documents in the index that match the given partial query text.

        :param search_text: The search text to use to suggest documents. Must be at least 1 character,
         and no more than 100 characters.
        :type search_text: str
        :param suggester_name: The name of the suggester as specified in the suggesters collection
         that's part of the index definition.
        :type suggester_name: str
        :param suggest_options: Parameter group.
        :type suggest_options: ~search_index_client.models.SuggestOptions
        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SuggestDocumentsResult or the result of cls(response)
        :rtype: ~search_index_client.models.SuggestDocumentsResult
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.SuggestDocumentsResult"]
        error_map = kwargs.pop('error_map', {})
        
        filter = None
        use_fuzzy_matching = None
        highlight_post_tag = None
        highlight_pre_tag = None
        minimum_coverage = None
        order_by = None
        search_fields = None
        select = None
        top = None
        client_request_id = None
        if request_options is not None:
            client_request_id = request_options.client_request_id
        if suggest_options is not None:
            filter = suggest_options.filter
            use_fuzzy_matching = suggest_options.use_fuzzy_matching
            highlight_post_tag = suggest_options.highlight_post_tag
            highlight_pre_tag = suggest_options.highlight_pre_tag
            minimum_coverage = suggest_options.minimum_coverage
            order_by = suggest_options.order_by
            search_fields = suggest_options.search_fields
            select = suggest_options.select
            top = suggest_options.top
        api_version = "2019-05-06"

        # Construct URL
        url = self.suggest_get.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['search'] = self._serialize.query("search_text", search_text, 'str')
        query_parameters['suggesterName'] = self._serialize.query("suggester_name", suggester_name, 'str')
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if use_fuzzy_matching is not None:
            query_parameters['fuzzy'] = self._serialize.query("use_fuzzy_matching", use_fuzzy_matching, 'bool')
        if highlight_post_tag is not None:
            query_parameters['highlightPostTag'] = self._serialize.query("highlight_post_tag", highlight_post_tag, 'str')
        if highlight_pre_tag is not None:
            query_parameters['highlightPreTag'] = self._serialize.query("highlight_pre_tag", highlight_pre_tag, 'str')
        if minimum_coverage is not None:
            query_parameters['minimumCoverage'] = self._serialize.query("minimum_coverage", minimum_coverage, 'float')
        if order_by is not None:
            query_parameters['$orderby'] = self._serialize.query("order_by", order_by, '[str]')
        if search_fields is not None:
            query_parameters['searchFields'] = self._serialize.query("search_fields", search_fields, '[str]')
        if select is not None:
            query_parameters['$select'] = self._serialize.query("select", select, '[str]')
        if top is not None:
            query_parameters['$top'] = self._serialize.query("top", top, 'int')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SuggestDocumentsResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    suggest_get.metadata = {'url': '/docs/search.suggest'}

    def suggest_post(
        self,
        suggest_request,  # type: "models.SuggestRequest"
        request_options=None,  # type: Optional["models.RequestOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.SuggestDocumentsResult"
        """Suggests documents in the index that match the given partial query text.

        :param suggest_request: The Suggest request.
        :type suggest_request: ~search_index_client.models.SuggestRequest
        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SuggestDocumentsResult or the result of cls(response)
        :rtype: ~search_index_client.models.SuggestDocumentsResult
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.SuggestDocumentsResult"]
        error_map = kwargs.pop('error_map', {})
        
        client_request_id = None
        if request_options is not None:
            client_request_id = request_options.client_request_id
        api_version = "2019-05-06"

        # Construct URL
        url = self.suggest_post.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(suggest_request, 'SuggestRequest')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SuggestDocumentsResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    suggest_post.metadata = {'url': '/docs/search.post.suggest'}

    def index(
        self,
        batch,  # type: "models.IndexBatch"
        request_options=None,  # type: Optional["models.RequestOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.IndexDocumentsResult"
        """Sends a batch of document write actions to the index.

        :param batch: The batch of index actions.
        :type batch: ~search_index_client.models.IndexBatch
        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IndexDocumentsResult or IndexDocumentsResult or the result of cls(response)
        :rtype: ~search_index_client.models.IndexDocumentsResult or ~search_index_client.models.IndexDocumentsResult
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.IndexDocumentsResult"]
        error_map = kwargs.pop('error_map', {})
        
        client_request_id = None
        if request_options is not None:
            client_request_id = request_options.client_request_id
        api_version = "2019-05-06"

        # Construct URL
        url = self.index.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(batch, 'IndexBatch')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 207]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('IndexDocumentsResult', pipeline_response)

        if response.status_code == 207:
            deserialized = self._deserialize('IndexDocumentsResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    index.metadata = {'url': '/docs/search.index'}

    def autocomplete_get(
        self,
        search_text,  # type: str
        suggester_name,  # type: str
        request_options=None,  # type: Optional["models.RequestOptions"]
        autocomplete_options=None,  # type: Optional["models.AutocompleteOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.AutocompleteResult"
        """Autocompletes incomplete query terms based on input text and matching terms in the index.

        :param search_text: The search text to use to suggest documents. Must be at least 1 character,
         and no more than 100 characters.
        :type search_text: str
        :param suggester_name: The name of the suggester as specified in the suggesters collection
         that's part of the index definition.
        :type suggester_name: str
        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :param autocomplete_options: Parameter group.
        :type autocomplete_options: ~search_index_client.models.AutocompleteOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AutocompleteResult or the result of cls(response)
        :rtype: ~search_index_client.models.AutocompleteResult
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.AutocompleteResult"]
        error_map = kwargs.pop('error_map', {})
        
        client_request_id = None
        autocomplete_mode = None
        filter = None
        use_fuzzy_matching = None
        highlight_post_tag = None
        highlight_pre_tag = None
        minimum_coverage = None
        search_fields = None
        top = None
        if autocomplete_options is not None:
            autocomplete_mode = autocomplete_options.autocomplete_mode
            filter = autocomplete_options.filter
            use_fuzzy_matching = autocomplete_options.use_fuzzy_matching
            highlight_post_tag = autocomplete_options.highlight_post_tag
            highlight_pre_tag = autocomplete_options.highlight_pre_tag
            minimum_coverage = autocomplete_options.minimum_coverage
            search_fields = autocomplete_options.search_fields
            top = autocomplete_options.top
        if request_options is not None:
            client_request_id = request_options.client_request_id
        api_version = "2019-05-06"

        # Construct URL
        url = self.autocomplete_get.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['search'] = self._serialize.query("search_text", search_text, 'str')
        query_parameters['suggesterName'] = self._serialize.query("suggester_name", suggester_name, 'str')
        if autocomplete_mode is not None:
            query_parameters['autocompleteMode'] = self._serialize.query("autocomplete_mode", autocomplete_mode, 'str')
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if use_fuzzy_matching is not None:
            query_parameters['fuzzy'] = self._serialize.query("use_fuzzy_matching", use_fuzzy_matching, 'bool')
        if highlight_post_tag is not None:
            query_parameters['highlightPostTag'] = self._serialize.query("highlight_post_tag", highlight_post_tag, 'str')
        if highlight_pre_tag is not None:
            query_parameters['highlightPreTag'] = self._serialize.query("highlight_pre_tag", highlight_pre_tag, 'str')
        if minimum_coverage is not None:
            query_parameters['minimumCoverage'] = self._serialize.query("minimum_coverage", minimum_coverage, 'float')
        if search_fields is not None:
            query_parameters['searchFields'] = self._serialize.query("search_fields", search_fields, '[str]')
        if top is not None:
            query_parameters['$top'] = self._serialize.query("top", top, 'int')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AutocompleteResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    autocomplete_get.metadata = {'url': '/docs/search.autocomplete'}

    def autocomplete_post(
        self,
        autocomplete_request,  # type: "models.AutocompleteRequest"
        request_options=None,  # type: Optional["models.RequestOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.AutocompleteResult"
        """Autocompletes incomplete query terms based on input text and matching terms in the index.

        :param autocomplete_request: The definition of the Autocomplete request.
        :type autocomplete_request: ~search_index_client.models.AutocompleteRequest
        :param request_options: Parameter group.
        :type request_options: ~search_index_client.models.RequestOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AutocompleteResult or the result of cls(response)
        :rtype: ~search_index_client.models.AutocompleteResult
        :raises: ~azure.core.HttpResponseError
        """
        cls = kwargs.pop('cls', None )  # type: ClsType["models.AutocompleteResult"]
        error_map = kwargs.pop('error_map', {})
        
        client_request_id = None
        if request_options is not None:
            client_request_id = request_options.client_request_id
        api_version = "2019-05-06"

        # Construct URL
        url = self.autocomplete_post.metadata['url']
        path_format_arguments = {
            'searchServiceName': self._serialize.url("self._config.search_service_name", self._config.search_service_name, 'str', skip_quote=True),
            'searchDnsSuffix': self._serialize.url("self._config.search_dns_suffix", self._config.search_dns_suffix, 'str', skip_quote=True),
            'indexName': self._serialize.url("self._config.index_name", self._config.index_name, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(autocomplete_request, 'AutocompleteRequest')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AutocompleteResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    autocomplete_post.metadata = {'url': '/docs/search.post.autocomplete'}
