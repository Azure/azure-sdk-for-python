import msrest.serialization
from typing import Any, Dict, List, Optional, Union

class AutocompleteItem(msrest.serialization.Model):
    text: Any = ...
    query_plus_text: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class AutocompleteOptions(msrest.serialization.Model):
    autocomplete_mode: Any = ...
    filter: Any = ...
    use_fuzzy_matching: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    search_fields: Any = ...
    top: Any = ...
    def __init__(self, *, autocomplete_mode: Optional[Union[str, AutocompleteMode]]=..., filter: Optional[str]=..., use_fuzzy_matching: Optional[bool]=..., highlight_post_tag: Optional[str]=..., highlight_pre_tag: Optional[str]=..., minimum_coverage: Optional[float]=..., search_fields: Optional[List[str]]=..., top: Optional[int]=..., **kwargs: Any) -> Any: ...

class AutocompleteRequest(msrest.serialization.Model):
    search_text: Any = ...
    autocomplete_mode: Any = ...
    filter: Any = ...
    use_fuzzy_matching: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    search_fields: Any = ...
    suggester_name: Any = ...
    top: Any = ...
    def __init__(self, *, search_text: Optional[str]=..., autocomplete_mode: Optional[Union[str, AutocompleteMode]]=..., filter: Optional[str]=..., use_fuzzy_matching: Optional[bool]=..., highlight_post_tag: Optional[str]=..., highlight_pre_tag: Optional[str]=..., minimum_coverage: Optional[float]=..., search_fields: Optional[str]=..., suggester_name: Optional[str]=..., top: Optional[int]=..., **kwargs: Any) -> Any: ...

class AutocompleteResult(msrest.serialization.Model):
    coverage: Any = ...
    results: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class ComponentsSchemasFacetresultAdditionalproperties(msrest.serialization.Model):
    def __init__(self, **kwargs: Any) -> None: ...

class FacetResult(msrest.serialization.Model):
    additional_properties: Any = ...
    count: Any = ...
    def __init__(self, *, additional_properties: Optional[Dict[str, object]]=..., **kwargs: Any) -> Any: ...

class IndexAction(msrest.serialization.Model):
    additional_properties: Any = ...
    action_type: Any = ...
    def __init__(self, *, additional_properties: Optional[Dict[str, object]]=..., action_type: Optional[Union[str, IndexActionType]]=..., **kwargs: Any) -> Any: ...

class IndexBatch(msrest.serialization.Model):
    actions: Any = ...
    def __init__(self, actions: List[IndexAction], **kwargs: Any) -> Any: ...

class IndexDocumentsResult(msrest.serialization.Model):
    results: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class IndexingResult(msrest.serialization.Model):
    key: Any = ...
    error_message: Any = ...
    succeeded: Any = ...
    status_code: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RequestOptions(msrest.serialization.Model):
    client_request_id: Any = ...
    def __init__(self, *, client_request_id: Optional[str]=..., **kwargs: Any) -> Any: ...

class SearchDocumentsResult(msrest.serialization.Model):
    count: Any = ...
    coverage: Any = ...
    facets: Any = ...
    next_page_parameters: Any = ...
    results: Any = ...
    next_link: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SearchOptions(msrest.serialization.Model):
    include_total_result_count: Any = ...
    facets: Any = ...
    filter: Any = ...
    highlight_fields: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    order_by: Any = ...
    query_type: Any = ...
    scoring_parameters: Any = ...
    scoring_profile: Any = ...
    search_fields: Any = ...
    search_mode: Any = ...
    select: Any = ...
    skip: Any = ...
    top: Any = ...
    def __init__(self, *, include_total_result_count: Optional[bool]=..., facets: Optional[List[str]]=..., filter: Optional[str]=..., highlight_fields: Optional[List[str]]=..., highlight_post_tag: Optional[str]=..., highlight_pre_tag: Optional[str]=..., minimum_coverage: Optional[float]=..., order_by: Optional[List[str]]=..., query_type: Optional[Union[str, QueryType]]=..., scoring_parameters: Optional[List[str]]=..., scoring_profile: Optional[str]=..., search_fields: Optional[List[str]]=..., search_mode: Optional[Union[str, SearchMode]]=..., select: Optional[List[str]]=..., skip: Optional[int]=..., top: Optional[int]=..., **kwargs: Any) -> Any: ...

class SearchRequest(msrest.serialization.Model):
    include_total_result_count: Any = ...
    facets: Any = ...
    filter: Any = ...
    highlight_fields: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    order_by: Any = ...
    query_type: Any = ...
    scoring_parameters: Any = ...
    scoring_profile: Any = ...
    search_text: Any = ...
    search_fields: Any = ...
    search_mode: Any = ...
    select: Any = ...
    skip: Any = ...
    top: Any = ...
    def __init__(self, *, include_total_result_count: Optional[bool]=..., facets: Optional[List[str]]=..., filter: Optional[str]=..., highlight_fields: Optional[str]=..., highlight_post_tag: Optional[str]=..., highlight_pre_tag: Optional[str]=..., minimum_coverage: Optional[float]=..., order_by: Optional[str]=..., query_type: Optional[Union[str, QueryType]]=..., scoring_parameters: Optional[List[str]]=..., scoring_profile: Optional[str]=..., search_text: Optional[str]=..., search_fields: Optional[str]=..., search_mode: Optional[Union[str, SearchMode]]=..., select: Optional[str]=..., skip: Optional[int]=..., top: Optional[int]=..., **kwargs: Any) -> Any: ...

class SearchResult(msrest.serialization.Model):
    additional_properties: Any = ...
    score: Any = ...
    highlights: Any = ...
    def __init__(self, *, additional_properties: Optional[Dict[str, object]]=..., **kwargs: Any) -> Any: ...

class SuggestDocumentsResult(msrest.serialization.Model):
    results: Any = ...
    coverage: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SuggestOptions(msrest.serialization.Model):
    filter: Any = ...
    use_fuzzy_matching: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    order_by: Any = ...
    search_fields: Any = ...
    select: Any = ...
    top: Any = ...
    def __init__(self, *, filter: Optional[str]=..., use_fuzzy_matching: Optional[bool]=..., highlight_post_tag: Optional[str]=..., highlight_pre_tag: Optional[str]=..., minimum_coverage: Optional[float]=..., order_by: Optional[List[str]]=..., search_fields: Optional[List[str]]=..., select: Optional[List[str]]=..., top: Optional[int]=..., **kwargs: Any) -> Any: ...

class SuggestRequest(msrest.serialization.Model):
    filter: Any = ...
    use_fuzzy_matching: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    order_by: Any = ...
    search_text: Any = ...
    search_fields: Any = ...
    select: Any = ...
    suggester_name: Any = ...
    top: Any = ...
    def __init__(self, *, filter: Optional[str]=..., use_fuzzy_matching: Optional[bool]=..., highlight_post_tag: Optional[str]=..., highlight_pre_tag: Optional[str]=..., minimum_coverage: Optional[float]=..., order_by: Optional[str]=..., search_text: Optional[str]=..., search_fields: Optional[str]=..., select: Optional[str]=..., suggester_name: Optional[str]=..., top: Optional[int]=..., **kwargs: Any) -> Any: ...

class SuggestResult(msrest.serialization.Model):
    additional_properties: Any = ...
    text: Any = ...
    def __init__(self, *, additional_properties: Optional[Dict[str, object]]=..., **kwargs: Any) -> Any: ...
