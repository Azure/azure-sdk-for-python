import msrest.serialization
from typing import Any

class AutocompleteItem(msrest.serialization.Model):
    text: Any = ...
    query_plus_text: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class AutocompleteOptions(msrest.serialization.Model):
    autocomplete_mode: Any = ...
    filter: Any = ...
    use_fuzzy_matching: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    search_fields: Any = ...
    top: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class AutocompleteRequest(msrest.serialization.Model):
    search_text: Any = ...
    autocomplete_mode: Any = ...
    filter: Any = ...
    use_fuzzy_matching: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    search_fields: Any = ...
    suggester_name: Any = ...
    top: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class AutocompleteResult(msrest.serialization.Model):
    coverage: Any = ...
    results: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class ComponentsSchemasFacetresultAdditionalproperties(msrest.serialization.Model):
    def __init__(self, **kwargs: Any) -> None: ...

class FacetResult(msrest.serialization.Model):
    additional_properties: Any = ...
    count: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class IndexAction(msrest.serialization.Model):
    additional_properties: Any = ...
    action_type: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class IndexBatch(msrest.serialization.Model):
    actions: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class IndexDocumentsResult(msrest.serialization.Model):
    results: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class IndexingResult(msrest.serialization.Model):
    key: Any = ...
    error_message: Any = ...
    succeeded: Any = ...
    status_code: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RequestOptions(msrest.serialization.Model):
    client_request_id: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SearchDocumentsResult(msrest.serialization.Model):
    count: Any = ...
    coverage: Any = ...
    facets: Any = ...
    next_page_parameters: Any = ...
    results: Any = ...
    next_link: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SearchOptions(msrest.serialization.Model):
    include_total_result_count: Any = ...
    facets: Any = ...
    filter: Any = ...
    highlight_fields: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    order_by: Any = ...
    query_type: Any = ...
    scoring_parameters: Any = ...
    scoring_profile: Any = ...
    search_fields: Any = ...
    search_mode: Any = ...
    select: Any = ...
    skip: Any = ...
    top: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SearchRequest(msrest.serialization.Model):
    include_total_result_count: Any = ...
    facets: Any = ...
    filter: Any = ...
    highlight_fields: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    order_by: Any = ...
    query_type: Any = ...
    scoring_parameters: Any = ...
    scoring_profile: Any = ...
    search_text: Any = ...
    search_fields: Any = ...
    search_mode: Any = ...
    select: Any = ...
    skip: Any = ...
    top: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SearchResult(msrest.serialization.Model):
    additional_properties: Any = ...
    score: Any = ...
    highlights: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SuggestDocumentsResult(msrest.serialization.Model):
    results: Any = ...
    coverage: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SuggestOptions(msrest.serialization.Model):
    filter: Any = ...
    use_fuzzy_matching: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    order_by: Any = ...
    search_fields: Any = ...
    select: Any = ...
    top: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SuggestRequest(msrest.serialization.Model):
    filter: Any = ...
    use_fuzzy_matching: Any = ...
    highlight_post_tag: Any = ...
    highlight_pre_tag: Any = ...
    minimum_coverage: Any = ...
    order_by: Any = ...
    search_text: Any = ...
    search_fields: Any = ...
    select: Any = ...
    suggester_name: Any = ...
    top: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SuggestResult(msrest.serialization.Model):
    additional_properties: Any = ...
    text: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
