from ... import models as models
from azure.core.exceptions import HttpResponseError as HttpResponseError, map_error as map_error
from azure.core.pipeline import PipelineResponse as PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse as AsyncHttpResponse, HttpRequest as HttpRequest
from typing import Any, Callable, Dict, List, Optional, TypeVar

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class DocumentsOperations:
    models: Any = ...
    def __init__(self, client: Any, config: Any, serializer: Any, deserializer: Any) -> None: ...
    async def count(self, request_options: Optional[models.RequestOptions]=..., **kwargs: Any) -> int: ...
    async def search_get(self, search_text: Optional[str]=..., search_options: Optional[models.SearchOptions]=..., request_options: Optional[models.RequestOptions]=..., **kwargs: Any) -> models.SearchDocumentsResult: ...
    async def search_post(self, search_request: models.SearchRequest, request_options: Optional[models.RequestOptions]=..., **kwargs: Any) -> models.SearchDocumentsResult: ...
    async def get(self, key: str, selected_fields: Optional[List[str]]=..., request_options: Optional[models.RequestOptions]=..., **kwargs: Any) -> models.ComponentsSchemasFacetresultAdditionalproperties: ...
    async def suggest_get(self, search_text: str, suggester_name: str, suggest_options: Optional[models.SuggestOptions]=..., request_options: Optional[models.RequestOptions]=..., **kwargs: Any) -> models.SuggestDocumentsResult: ...
    async def suggest_post(self, suggest_request: models.SuggestRequest, request_options: Optional[models.RequestOptions]=..., **kwargs: Any) -> models.SuggestDocumentsResult: ...
    async def index(self, batch: models.IndexBatch, request_options: Optional[models.RequestOptions]=..., **kwargs: Any) -> models.IndexDocumentsResult: ...
    async def autocomplete_get(self, search_text: str, suggester_name: str, request_options: Optional[models.RequestOptions]=..., autocomplete_options: Optional[models.AutocompleteOptions]=..., **kwargs: Any) -> models.AutocompleteResult: ...
    async def autocomplete_post(self, autocomplete_request: models.AutocompleteRequest, request_options: Optional[models.RequestOptions]=..., **kwargs: Any) -> models.AutocompleteResult: ...
