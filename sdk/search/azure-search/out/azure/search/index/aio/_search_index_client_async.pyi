from .._credential import SearchApiKeyCredential as SearchApiKeyCredential
from .._generated.models import IndexingResult as IndexingResult, SearchRequest as SearchRequest
from .._index_batch import IndexBatch as IndexBatch
from .._queries import AutocompleteQuery as AutocompleteQuery, SearchQuery as SearchQuery, SuggestQuery as SuggestQuery
from .._search_index_client import DEFAULT_SEARCH_DNS_SUFFIX as DEFAULT_SEARCH_DNS_SUFFIX, convert_search_result as convert_search_result, pack_continuation_token as pack_continuation_token, unpack_continuation_token as unpack_continuation_token
from azure.core.async_paging import AsyncItemPaged as AsyncItemPaged, AsyncPageIterator as AsyncPageIterator
from azure.core.pipeline.policies import HeadersPolicy as HeadersPolicy
from typing import Any, List, Optional, Union

class _SearchDocumentsPagedAsync(AsyncPageIterator):
    def __init__(self, client: Any, initial_query: Any, kwargs: Any, continuation_token: Optional[Any] = ...) -> None: ...

class SearchIndexClient:
    def __init__(self, search_service_name: str, index_name: str, credential: SearchApiKeyCredential, **kwargs: Any) -> None: ...
    async def get_document_count(self) -> int: ...
    async def get_document(self, key: str, selected_fields: List[str]=...) -> dict: ...
    async def search(self, query: Union[str, SearchQuery], **kwargs: Any) -> AsyncItemPaged[dict]: ...
    async def suggest(self, query: Union[str, SuggestQuery], **kwargs: Any) -> List[dict]: ...
    async def autocomplete(self, query: Union[str, AutocompleteQuery], **kwargs: Any) -> List[dict]: ...
    async def upload_documents(self, documents: List[dict], **kwargs: Any) -> List[IndexingResult]: ...
    async def delete_documents(self, documents: List[dict], **kwargs: Any) -> List[IndexingResult]: ...
    async def merge_documents(self, documents: List[dict], **kwargs: Any) -> List[IndexingResult]: ...
    async def merge_or_upload_documents(self, documents: List[dict], **kwargs: Any) -> List[IndexingResult]: ...
    async def index_batch(self, batch: IndexBatch, **kwargs: Any) -> List[IndexingResult]: ...
