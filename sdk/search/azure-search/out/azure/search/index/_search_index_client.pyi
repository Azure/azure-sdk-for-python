from ._credential import SearchApiKeyCredential as SearchApiKeyCredential
from ._generated.models import IndexingResult as IndexingResult, SearchRequest as SearchRequest
from ._index_batch import IndexBatch as IndexBatch
from ._queries import AutocompleteQuery as AutocompleteQuery, SearchQuery as SearchQuery, SuggestQuery as SuggestQuery
from azure.core.paging import ItemPaged as ItemPaged, PageIterator as PageIterator
from azure.core.pipeline.policies import HeadersPolicy as HeadersPolicy
from typing import Any, List, Optional, Union

DEFAULT_SEARCH_DNS_SUFFIX: str

def convert_search_result(result: Any): ...
def pack_continuation_token(response: Any): ...
def unpack_continuation_token(token: Any): ...

class _SearchDocumentsPaged(PageIterator):
    def __init__(self, client: Any, initial_query: Any, kwargs: Any, continuation_token: Optional[Any] = ...) -> None: ...

class SearchIndexClient:
    def __init__(self, search_service_name: str, index_name: str, credential: SearchApiKeyCredential, **kwargs: Any) -> None: ...
    def get_document_count(self) -> int: ...
    def get_document(self, key: str, selected_fields: List[str]=...) -> dict: ...
    def search(self, query: Union[str, SearchQuery], **kwargs: Any) -> ItemPaged[dict]: ...
    def suggest(self, query: Union[str, SuggestQuery], **kwargs: Any) -> List[dict]: ...
    def autocomplete(self, query: Union[str, AutocompleteQuery], **kwargs: Any) -> List[dict]: ...
    def upload_documents(self, documents: List[dict], **kwargs: Any) -> List[IndexingResult]: ...
    def delete_documents(self, documents: List[dict], **kwargs: Any) -> List[IndexingResult]: ...
    def merge_documents(self, documents: List[dict], **kwargs: Any) -> List[IndexingResult]: ...
    def merge_or_upload_documents(self, documents: List[dict], **kwargs: Any) -> List[IndexingResult]: ...
    def index_batch(self, batch: IndexBatch, **kwargs: Any) -> List[IndexingResult]: ...
