# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._artifacts_client_operations import (
    build_delete_artifact_for_db_request,
    build_delete_artifact_from_schema_request,
    build_delete_database_request,
    build_execute_change_request,
    build_execute_change_with_validation_request,
    build_get_artifact_from_db_request,
    build_get_artifact_from_schema_request,
    build_get_database_request,
    build_get_sy_ms_operation_status_request,
    build_list_artifacts_in_schema_by_type_request,
    build_list_artifacts_request,
    build_list_databases_request,
    build_list_partition_infos_for_schema_and_table_request,
    build_list_partition_infos_for_schema_and_view_request,
    build_list_partition_infos_for_table_request,
    build_list_partition_infos_for_view_request,
    build_put_artifact_in_db_request,
    build_put_artifact_in_schema_request,
    build_put_database_request,
)
from .._vendor import ArtifactsClientMixinABC

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ArtifactsClientOperationsMixin(ArtifactsClientMixinABC):
    @distributed_trace_async
    async def execute_change(self, ddls: List[_models.DDLPayload], **kwargs: Any) -> _models.SyMsapiddlResponses:
        """Batch execution of DDL Payload.

        Batch execution of DDL Payload.

        :param ddls: Required.
        :type ddls: list[~azure.synapse.artifacts.models.DDLPayload]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponses or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponses
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[_models.SyMsapiddlResponses] = kwargs.pop("cls", None)

        _create_artifacts_payload = _models.DDLBatch(ddls=ddls)
        _json = self._serialize.body(_create_artifacts_payload, "DDLBatch")

        request = build_execute_change_request(
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.execute_change.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("SyMsapiddlResponses", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    execute_change.metadata = {"url": "/databases/ExecuteChange"}

    async def _execute_change_with_validation_initial(  # pylint: disable=inconsistent-return-statements
        self, validation_type: str, ddls: List[_models.DDLPayload], **kwargs: Any
    ) -> None:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[None] = kwargs.pop("cls", None)

        _create_artifacts_payload = _models.DDLBatch(ddls=ddls)
        _json = self._serialize.body(_create_artifacts_payload, "DDLBatch")

        request = build_execute_change_with_validation_request(
            validation_type=validation_type,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self._execute_change_with_validation_initial.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    _execute_change_with_validation_initial.metadata = {"url": "/databases/ExecuteChangeWithValidation"}

    @distributed_trace_async
    async def begin_execute_change_with_validation(
        self, validation_type: str, ddls: List[_models.DDLPayload], **kwargs: Any
    ) -> AsyncLROPoller[None]:
        """Batch execution of DDL Payload.

        Batch execution of DDL Payload.

        :param validation_type: Validation Type - Currently only IDWValidation is supported. Required.
        :type validation_type: str
        :param ddls: Required.
        :type ddls: list[~azure.synapse.artifacts.models.DDLPayload]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either None or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[None]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[None] = kwargs.pop("cls", None)
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = await self._execute_change_with_validation_initial(  # type: ignore
                validation_type=validation_type,
                ddls=ddls,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):  # pylint: disable=inconsistent-return-statements
            if cls:
                return cls(pipeline_response, None, {})

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: AsyncPollingMethod = cast(
                AsyncPollingMethod,
                AsyncLROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs),
            )
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    begin_execute_change_with_validation.metadata = {"url": "/databases/ExecuteChangeWithValidation"}

    @distributed_trace_async
    async def list_databases(
        self, continuation_token_parameter: Optional[str] = None, max_page_size: Optional[int] = None, **kwargs: Any
    ) -> _models.QueryArtifactsResponse:
        """Get all databases in a workspace.

        Get all databases in a workspace.

        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryArtifactsResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.QueryArtifactsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.QueryArtifactsResponse] = kwargs.pop("cls", None)

        request = build_list_databases_request(
            continuation_token_parameter=continuation_token_parameter,
            max_page_size=max_page_size,
            api_version=api_version,
            template_url=self.list_databases.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("QueryArtifactsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_databases.metadata = {"url": "/databases"}

    @distributed_trace_async
    async def list_artifacts(
        self,
        database_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        **kwargs: Any
    ) -> _models.QueryArtifactsResponse:
        """List all Artifacts of a type in a database.

        List all Artifacts of a type in a database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryArtifactsResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.QueryArtifactsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.QueryArtifactsResponse] = kwargs.pop("cls", None)

        request = build_list_artifacts_request(
            database_name=database_name,
            artifact_type=artifact_type,
            continuation_token_parameter=continuation_token_parameter,
            max_page_size=max_page_size,
            api_version=api_version,
            template_url=self.list_artifacts.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("QueryArtifactsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_artifacts.metadata = {"url": "/databases/{databaseName}/{artifactType}s"}

    @distributed_trace_async
    async def list_artifacts_in_schema_by_type(
        self,
        database_name: str,
        schema_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        **kwargs: Any
    ) -> _models.QueryArtifactsResponse:
        """List all artifacts in schema by type.

        List all Artifacts in schema by type.

        :param database_name: Database name. Required.
        :type database_name: str
        :param schema_name: Schema name. Required.
        :type schema_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryArtifactsResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.QueryArtifactsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.QueryArtifactsResponse] = kwargs.pop("cls", None)

        request = build_list_artifacts_in_schema_by_type_request(
            database_name=database_name,
            schema_name=schema_name,
            artifact_type=artifact_type,
            continuation_token_parameter=continuation_token_parameter,
            max_page_size=max_page_size,
            api_version=api_version,
            template_url=self.list_artifacts_in_schema_by_type.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("QueryArtifactsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_artifacts_in_schema_by_type.metadata = {
        "url": "/databases/{databaseName}/schemas/{schemaName}/{artifactType}s"
    }

    @distributed_trace_async
    async def list_partition_infos_for_table(
        self,
        database_name: str,
        table_name: str,
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        **kwargs: Any
    ) -> _models.QueryArtifactsResponse:
        """List all partition information for a table.

        List all partition information for a table.

        :param database_name: Database name. Required.
        :type database_name: str
        :param table_name: Table name. Required.
        :type table_name: str
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryArtifactsResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.QueryArtifactsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.QueryArtifactsResponse] = kwargs.pop("cls", None)

        request = build_list_partition_infos_for_table_request(
            database_name=database_name,
            table_name=table_name,
            continuation_token_parameter=continuation_token_parameter,
            max_page_size=max_page_size,
            api_version=api_version,
            template_url=self.list_partition_infos_for_table.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("QueryArtifactsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_partition_infos_for_table.metadata = {"url": "/databases/{databaseName}/tables/{tableName}/partitionInfos"}

    @distributed_trace_async
    async def list_partition_infos_for_view(
        self,
        database_name: str,
        view_name: str,
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        **kwargs: Any
    ) -> _models.QueryArtifactsResponse:
        """List all partition information for a view.

        List all partition information for a view.

        :param database_name: Database name. Required.
        :type database_name: str
        :param view_name: View name. Required.
        :type view_name: str
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryArtifactsResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.QueryArtifactsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.QueryArtifactsResponse] = kwargs.pop("cls", None)

        request = build_list_partition_infos_for_view_request(
            database_name=database_name,
            view_name=view_name,
            continuation_token_parameter=continuation_token_parameter,
            max_page_size=max_page_size,
            api_version=api_version,
            template_url=self.list_partition_infos_for_view.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("QueryArtifactsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_partition_infos_for_view.metadata = {"url": "/databases/{databaseName}/views/{viewName}/partitionInfos"}

    @distributed_trace_async
    async def list_partition_infos_for_schema_and_table(
        self,
        database_name: str,
        schema_name: str,
        table_name: str,
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        **kwargs: Any
    ) -> _models.QueryArtifactsResponse:
        """List all partition information for table in schema.

        List all partition information for a table in schema.

        :param database_name: Database name. Required.
        :type database_name: str
        :param schema_name: Schema name. Required.
        :type schema_name: str
        :param table_name: Table name. Required.
        :type table_name: str
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryArtifactsResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.QueryArtifactsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.QueryArtifactsResponse] = kwargs.pop("cls", None)

        request = build_list_partition_infos_for_schema_and_table_request(
            database_name=database_name,
            schema_name=schema_name,
            table_name=table_name,
            continuation_token_parameter=continuation_token_parameter,
            max_page_size=max_page_size,
            api_version=api_version,
            template_url=self.list_partition_infos_for_schema_and_table.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("QueryArtifactsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_partition_infos_for_schema_and_table.metadata = {
        "url": "/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/partitionInfos"
    }

    @distributed_trace_async
    async def list_partition_infos_for_schema_and_view(
        self,
        database_name: str,
        schema_name: str,
        view_name: str,
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        **kwargs: Any
    ) -> _models.QueryArtifactsResponse:
        """List all partition information for a view in schema.

        List all partition information for a view in schema.

        :param database_name: Database name. Required.
        :type database_name: str
        :param schema_name: Schema name. Required.
        :type schema_name: str
        :param view_name: View name. Required.
        :type view_name: str
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryArtifactsResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.QueryArtifactsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.QueryArtifactsResponse] = kwargs.pop("cls", None)

        request = build_list_partition_infos_for_schema_and_view_request(
            database_name=database_name,
            schema_name=schema_name,
            view_name=view_name,
            continuation_token_parameter=continuation_token_parameter,
            max_page_size=max_page_size,
            api_version=api_version,
            template_url=self.list_partition_infos_for_schema_and_view.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("QueryArtifactsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_partition_infos_for_schema_and_view.metadata = {
        "url": "/databases/{databaseName}/schemas/{schemaName}/views/{viewName}/partitionInfos"
    }

    @distributed_trace_async
    async def get_database(self, database_name: str, **kwargs: Any) -> _models.DatabaseEntity:
        """Get details about a database.

        Get details about a database.

        :param database_name: Database name. Required.
        :type database_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DatabaseEntity or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.DatabaseEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.DatabaseEntity] = kwargs.pop("cls", None)

        request = build_get_database_request(
            database_name=database_name,
            api_version=api_version,
            template_url=self.get_database.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("DatabaseEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_database.metadata = {"url": "/databases/{databaseName}"}

    @overload
    async def put_database(
        self,
        database_name: str,
        create_artifacts_payload: _models.DatabaseEntity,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Put a database.

        Put a database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param create_artifacts_payload: Database entity payload to create or update a Database.
         Required.
        :type create_artifacts_payload: ~azure.synapse.artifacts.models.DatabaseEntity
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_database(
        self, database_name: str, create_artifacts_payload: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Put a database.

        Put a database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param create_artifacts_payload: Database entity payload to create or update a Database.
         Required.
        :type create_artifacts_payload: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_database(
        self, database_name: str, create_artifacts_payload: Union[_models.DatabaseEntity, IO], **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Put a database.

        Put a database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param create_artifacts_payload: Database entity payload to create or update a Database. Is
         either a DatabaseEntity type or a IO type. Required.
        :type create_artifacts_payload: ~azure.synapse.artifacts.models.DatabaseEntity or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SyMsapiddlResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(create_artifacts_payload, (IOBase, bytes)):
            _content = create_artifacts_payload
        else:
            _json = self._serialize.body(create_artifacts_payload, "DatabaseEntity")

        request = build_put_database_request(
            database_name=database_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_database.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("SyMsapiddlResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    put_database.metadata = {"url": "/databases/{databaseName}"}

    @distributed_trace_async
    async def delete_database(  # pylint: disable=inconsistent-return-statements
        self, database_name: str, **kwargs: Any
    ) -> None:
        """Delete a database.

        Delete a database.

        :param database_name: Database name. Required.
        :type database_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_delete_database_request(
            database_name=database_name,
            api_version=api_version,
            template_url=self.delete_database.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_database.metadata = {"url": "/databases/{databaseName}"}

    @distributed_trace_async
    async def get_artifact_from_db(
        self, database_name: str, artifact_type: Union[str, _models.SASEntityType], artifact_name: str, **kwargs: Any
    ) -> _models.MDEntity:
        """Get an artifact from database.

        Get an artifact from database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MDEntity or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.MDEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.MDEntity] = kwargs.pop("cls", None)

        request = build_get_artifact_from_db_request(
            database_name=database_name,
            artifact_type=artifact_type,
            artifact_name=artifact_name,
            api_version=api_version,
            template_url=self.get_artifact_from_db.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("MDEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_artifact_from_db.metadata = {"url": "/databases/{databaseName}/{artifactType}s/{artifactName}"}

    @overload
    async def put_artifact_in_db(
        self,
        database_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        artifact_name: str,
        create_artifacts_payload: _models.MDEntity,
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Put an artifact in a Database.

        Put an artifact in a Database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :param create_artifacts_payload: Payload containing artifact entity to be created/modified.
         Required.
        :type create_artifacts_payload: ~azure.synapse.artifacts.models.MDEntity
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_artifact_in_db(
        self,
        database_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        artifact_name: str,
        create_artifacts_payload: IO,
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Put an artifact in a Database.

        Put an artifact in a Database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :param create_artifacts_payload: Payload containing artifact entity to be created/modified.
         Required.
        :type create_artifacts_payload: IO
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_artifact_in_db(
        self,
        database_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        artifact_name: str,
        create_artifacts_payload: Union[_models.MDEntity, IO],
        continuation_token_parameter: Optional[str] = None,
        max_page_size: Optional[int] = None,
        **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Put an artifact in a Database.

        Put an artifact in a Database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :param create_artifacts_payload: Payload containing artifact entity to be created/modified. Is
         either a MDEntity type or a IO type. Required.
        :type create_artifacts_payload: ~azure.synapse.artifacts.models.MDEntity or IO
        :param continuation_token_parameter: Continuation token to get next page. Default value is
         None.
        :type continuation_token_parameter: str
        :param max_page_size: Max page size. Default value is None.
        :type max_page_size: int
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SyMsapiddlResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(create_artifacts_payload, (IOBase, bytes)):
            _content = create_artifacts_payload
        else:
            _json = self._serialize.body(create_artifacts_payload, "MDEntity")

        request = build_put_artifact_in_db_request(
            database_name=database_name,
            artifact_type=artifact_type,
            artifact_name=artifact_name,
            continuation_token_parameter=continuation_token_parameter,
            max_page_size=max_page_size,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_artifact_in_db.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("SyMsapiddlResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    put_artifact_in_db.metadata = {"url": "/databases/{databaseName}/{artifactType}s/{artifactName}"}

    @distributed_trace_async
    async def delete_artifact_for_db(  # pylint: disable=inconsistent-return-statements
        self, database_name: str, artifact_type: Union[str, _models.SASEntityType], artifact_name: str, **kwargs: Any
    ) -> None:
        """Delete an artifact in a Database.

        Delete an artifact in a Database.

        :param database_name: Database name. Required.
        :type database_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_delete_artifact_for_db_request(
            database_name=database_name,
            artifact_type=artifact_type,
            artifact_name=artifact_name,
            api_version=api_version,
            template_url=self.delete_artifact_for_db.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_artifact_for_db.metadata = {"url": "/databases/{databaseName}/{artifactType}s/{artifactName}"}

    @distributed_trace_async
    async def get_artifact_from_schema(
        self,
        database_name: str,
        schema_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        artifact_name: str,
        **kwargs: Any
    ) -> _models.MDEntity:
        """Get an artifact from schema.

        Get an artifact from schema.

        :param database_name: Database name. Required.
        :type database_name: str
        :param schema_name: Schema name. Required.
        :type schema_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MDEntity or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.MDEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.MDEntity] = kwargs.pop("cls", None)

        request = build_get_artifact_from_schema_request(
            database_name=database_name,
            schema_name=schema_name,
            artifact_type=artifact_type,
            artifact_name=artifact_name,
            api_version=api_version,
            template_url=self.get_artifact_from_schema.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("MDEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_artifact_from_schema.metadata = {
        "url": "/databases/{databaseName}/schemas/{schemaName}/{artifactType}s/{artifactName}"
    }

    @overload
    async def put_artifact_in_schema(
        self,
        database_name: str,
        schema_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        artifact_name: str,
        create_artifacts_payload: _models.MDEntity,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Create or Update an artifact in a schema.

        Create or Update an artifact in a schema.

        :param database_name: Database name. Required.
        :type database_name: str
        :param schema_name: Schema name. Required.
        :type schema_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :param create_artifacts_payload: Payload containing artifact object to be create/updated.
         Required.
        :type create_artifacts_payload: ~azure.synapse.artifacts.models.MDEntity
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_artifact_in_schema(
        self,
        database_name: str,
        schema_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        artifact_name: str,
        create_artifacts_payload: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Create or Update an artifact in a schema.

        Create or Update an artifact in a schema.

        :param database_name: Database name. Required.
        :type database_name: str
        :param schema_name: Schema name. Required.
        :type schema_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :param create_artifacts_payload: Payload containing artifact object to be create/updated.
         Required.
        :type create_artifacts_payload: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_artifact_in_schema(
        self,
        database_name: str,
        schema_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        artifact_name: str,
        create_artifacts_payload: Union[_models.MDEntity, IO],
        **kwargs: Any
    ) -> _models.SyMsapiddlResponse:
        """Create or Update an artifact in a schema.

        Create or Update an artifact in a schema.

        :param database_name: Database name. Required.
        :type database_name: str
        :param schema_name: Schema name. Required.
        :type schema_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :param create_artifacts_payload: Payload containing artifact object to be create/updated. Is
         either a MDEntity type or a IO type. Required.
        :type create_artifacts_payload: ~azure.synapse.artifacts.models.MDEntity or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SyMsapiddlResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.SyMsapiddlResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SyMsapiddlResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(create_artifacts_payload, (IOBase, bytes)):
            _content = create_artifacts_payload
        else:
            _json = self._serialize.body(create_artifacts_payload, "MDEntity")

        request = build_put_artifact_in_schema_request(
            database_name=database_name,
            schema_name=schema_name,
            artifact_type=artifact_type,
            artifact_name=artifact_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_artifact_in_schema.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("SyMsapiddlResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    put_artifact_in_schema.metadata = {
        "url": "/databases/{databaseName}/schemas/{schemaName}/{artifactType}s/{artifactName}"
    }

    @distributed_trace_async
    async def delete_artifact_from_schema(  # pylint: disable=inconsistent-return-statements
        self,
        database_name: str,
        schema_name: str,
        artifact_type: Union[str, _models.SASEntityType],
        artifact_name: str,
        **kwargs: Any
    ) -> None:
        """Delete an artifact from Schema.

        Delete an artifact from Schema.

        :param database_name: Database name. Required.
        :type database_name: str
        :param schema_name: Schema name. Required.
        :type schema_name: str
        :param artifact_type: Artifact type. Known values are: "DATABASE", "TABLE", "SCHEMA", "VIEW",
         "FUNCTION", "PARTITIONINFO", and "RELATIONSHIP". Required.
        :type artifact_type: str or ~azure.synapse.artifacts.models.SASEntityType
        :param artifact_name: Artifact name. Required.
        :type artifact_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_delete_artifact_from_schema_request(
            database_name=database_name,
            schema_name=schema_name,
            artifact_type=artifact_type,
            artifact_name=artifact_name,
            api_version=api_version,
            template_url=self.delete_artifact_from_schema.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_artifact_from_schema.metadata = {
        "url": "/databases/{databaseName}/schemas/{schemaName}/{artifactType}s/{artifactName}"
    }

    @distributed_trace_async
    async def get_sy_ms_operation_status(self, operation_id: str, **kwargs: Any) -> _models.QueryArtifactsResponse:
        """Get the status of validation by operation Id.

        Get the status of validation by operation Id.

        :param operation_id: Operation Id. Required.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryArtifactsResponse or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.QueryArtifactsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2021-04-01"))
        cls: ClsType[_models.QueryArtifactsResponse] = kwargs.pop("cls", None)

        request = build_get_sy_ms_operation_status_request(
            operation_id=operation_id,
            api_version=api_version,
            template_url=self.get_sy_ms_operation_status.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("QueryArtifactsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_sy_ms_operation_status.metadata = {"url": "/databases/operations/{operationId}"}
