# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._link_connection_operations import build_create_or_update_link_connection_request, build_delete_link_connection_request, build_edit_tables_request, build_get_detailed_status_request, build_get_link_connection_request, build_list_link_connections_by_workspace_request, build_list_link_tables_request, build_query_table_status_request, build_start_request, build_stop_request, build_update_landing_zone_credential_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class LinkConnectionOperations:
    """LinkConnectionOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.synapse.artifacts.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def list_link_connections_by_workspace(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.LinkConnectionListResponse"]:
        """List link connections.

        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either LinkConnectionListResponse or the result of
         cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.synapse.artifacts.models.LinkConnectionListResponse]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LinkConnectionListResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_link_connections_by_workspace_request(
                    api_version=api_version,
                    template_url=self.list_link_connections_by_workspace.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_link_connections_by_workspace_request(
                    api_version=api_version,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("LinkConnectionListResponse", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return AsyncItemPaged(
            get_next, extract_data
        )
    list_link_connections_by_workspace.metadata = {'url': '/linkconnections'}  # type: ignore

    @distributed_trace_async
    async def create_or_update_link_connection(
        self,
        link_connection_name: str,
        link_connection: "_models.LinkConnectionResource",
        **kwargs: Any
    ) -> "_models.LinkConnectionResource":
        """Creates or updates a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :param link_connection: Link connection resource definition.
        :type link_connection: ~azure.synapse.artifacts.models.LinkConnectionResource
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LinkConnectionResource, or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.LinkConnectionResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LinkConnectionResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(link_connection, 'LinkConnectionResource')

        request = build_create_or_update_link_connection_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.create_or_update_link_connection.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LinkConnectionResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update_link_connection.metadata = {'url': '/linkconnections/{linkConnectionName}'}  # type: ignore


    @distributed_trace_async
    async def get_link_connection(
        self,
        link_connection_name: str,
        **kwargs: Any
    ) -> "_models.LinkConnectionResource":
        """Get a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LinkConnectionResource, or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.LinkConnectionResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LinkConnectionResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_get_link_connection_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            template_url=self.get_link_connection.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LinkConnectionResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_link_connection.metadata = {'url': '/linkconnections/{linkConnectionName}'}  # type: ignore


    @distributed_trace_async
    async def delete_link_connection(
        self,
        link_connection_name: str,
        **kwargs: Any
    ) -> None:
        """Delete a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_delete_link_connection_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            template_url=self.delete_link_connection.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_link_connection.metadata = {'url': '/linkconnections/{linkConnectionName}'}  # type: ignore


    @distributed_trace_async
    async def edit_tables(
        self,
        link_connection_name: str,
        link_tables: Optional[List["_models.LinkTableRequest"]] = None,
        **kwargs: Any
    ) -> None:
        """Edit tables for a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :param link_tables: Edit link tables request.
        :type link_tables: list[~azure.synapse.artifacts.models.LinkTableRequest]
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _edit_tables_request = _models.EditTablesRequest(link_tables=link_tables)
        _json = self._serialize.body(_edit_tables_request, 'EditTablesRequest')

        request = build_edit_tables_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.edit_tables.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    edit_tables.metadata = {'url': '/linkconnections/{linkConnectionName}/edittables'}  # type: ignore


    @distributed_trace_async
    async def start(
        self,
        link_connection_name: str,
        **kwargs: Any
    ) -> None:
        """Start a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_start_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            template_url=self.start.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    start.metadata = {'url': '/linkconnections/{linkConnectionName}/start'}  # type: ignore


    @distributed_trace_async
    async def stop(
        self,
        link_connection_name: str,
        **kwargs: Any
    ) -> None:
        """Stop a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_stop_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            template_url=self.stop.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    stop.metadata = {'url': '/linkconnections/{linkConnectionName}/stop'}  # type: ignore


    @distributed_trace_async
    async def get_detailed_status(
        self,
        link_connection_name: str,
        **kwargs: Any
    ) -> "_models.LinkConnectionDetailedStatus":
        """Get the detailed status of a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LinkConnectionDetailedStatus, or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.LinkConnectionDetailedStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LinkConnectionDetailedStatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_get_detailed_status_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            template_url=self.get_detailed_status.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LinkConnectionDetailedStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_detailed_status.metadata = {'url': '/linkconnections/{linkConnectionName}/detailedstatus'}  # type: ignore


    @distributed_trace_async
    async def list_link_tables(
        self,
        link_connection_name: str,
        **kwargs: Any
    ) -> "_models.LinkTableListResponse":
        """List the link tables of a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LinkTableListResponse, or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.LinkTableListResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LinkTableListResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_list_link_tables_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            template_url=self.list_link_tables.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LinkTableListResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_link_tables.metadata = {'url': '/linkconnections/{linkConnectionName}/linktables'}  # type: ignore


    @distributed_trace_async
    async def query_table_status(
        self,
        link_connection_name: str,
        query_table_status_request: "_models.QueryTableStatusRequest",
        **kwargs: Any
    ) -> "_models.LinkConnectionQueryTableStatus":
        """Query the link table status of a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :param query_table_status_request: Query table status request.
        :type query_table_status_request: ~azure.synapse.artifacts.models.QueryTableStatusRequest
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LinkConnectionQueryTableStatus, or the result of cls(response)
        :rtype: ~azure.synapse.artifacts.models.LinkConnectionQueryTableStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LinkConnectionQueryTableStatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(query_table_status_request, 'QueryTableStatusRequest')

        request = build_query_table_status_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.query_table_status.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LinkConnectionQueryTableStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    query_table_status.metadata = {'url': '/linkconnections/{linkConnectionName}/querytablestatus'}  # type: ignore


    @distributed_trace_async
    async def update_landing_zone_credential(
        self,
        link_connection_name: str,
        sas_token: Optional["_models.SecureString"] = None,
        **kwargs: Any
    ) -> None:
        """Update landing zone credential of a link connection.

        :param link_connection_name: The link connection name.
        :type link_connection_name: str
        :param sas_token: Landing zone's sas token.
        :type sas_token: ~azure.synapse.artifacts.models.SecureString
        :keyword api_version: Api Version. The default value is "2021-12-01-preview". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _update_landing_zone_credential_request = _models.UpdateLandingZoneCredential(sas_token=sas_token)
        _json = self._serialize.body(_update_landing_zone_credential_request, 'UpdateLandingZoneCredential')

        request = build_update_landing_zone_credential_request(
            link_connection_name=link_connection_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.update_landing_zone_credential.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_landing_zone_credential.metadata = {'url': '/linkconnections/{linkConnectionName}/updateLandingZoneCredential'}  # type: ignore

