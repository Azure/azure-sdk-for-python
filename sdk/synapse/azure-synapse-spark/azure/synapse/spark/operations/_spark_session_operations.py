# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section
T = TypeVar('T')
JSONType = Any
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_get_spark_sessions_request(
    spark_pool_name: str,
    livy_api_version: str = "2019-11-01-preview",
    *,
    from_parameter: Optional[int] = None,
    size: Optional[int] = None,
    detailed: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if from_parameter is not None:
        query_parameters['from'] = _SERIALIZER.query("from_parameter", from_parameter, 'int')
    if size is not None:
        query_parameters['size'] = _SERIALIZER.query("size", size, 'int')
    if detailed is not None:
        query_parameters['detailed'] = _SERIALIZER.query("detailed", detailed, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_spark_session_request(
    spark_pool_name: str,
    livy_api_version: str = "2019-11-01-preview",
    *,
    json: JSONType = None,
    content: Any = None,
    detailed: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if detailed is not None:
        query_parameters['detailed'] = _SERIALIZER.query("detailed", detailed, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_get_spark_session_request(
    spark_pool_name: str,
    session_id: int,
    livy_api_version: str = "2019-11-01-preview",
    *,
    detailed: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
        "sessionId": _SERIALIZER.url("session_id", session_id, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if detailed is not None:
        query_parameters['detailed'] = _SERIALIZER.query("detailed", detailed, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_cancel_spark_session_request(
    spark_pool_name: str,
    session_id: int,
    livy_api_version: str = "2019-11-01-preview",
    **kwargs: Any
) -> HttpRequest:
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
        "sessionId": _SERIALIZER.url("session_id", session_id, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=url,
        **kwargs
    )


def build_reset_spark_session_timeout_request(
    spark_pool_name: str,
    session_id: int,
    livy_api_version: str = "2019-11-01-preview",
    **kwargs: Any
) -> HttpRequest:
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/reset-timeout')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
        "sessionId": _SERIALIZER.url("session_id", session_id, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    return HttpRequest(
        method="PUT",
        url=url,
        **kwargs
    )


def build_get_spark_statements_request(
    spark_pool_name: str,
    session_id: int,
    livy_api_version: str = "2019-11-01-preview",
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
        "sessionId": _SERIALIZER.url("session_id", session_id, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_create_spark_statement_request(
    spark_pool_name: str,
    session_id: int,
    livy_api_version: str = "2019-11-01-preview",
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
        "sessionId": _SERIALIZER.url("session_id", session_id, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_get_spark_statement_request(
    spark_pool_name: str,
    session_id: int,
    statement_id: int,
    livy_api_version: str = "2019-11-01-preview",
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements/{statementId}')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
        "sessionId": _SERIALIZER.url("session_id", session_id, 'int'),
        "statementId": _SERIALIZER.url("statement_id", statement_id, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_cancel_spark_statement_request(
    spark_pool_name: str,
    session_id: int,
    statement_id: int,
    livy_api_version: str = "2019-11-01-preview",
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements/{statementId}/cancel')
    path_format_arguments = {
        "livyApiVersion": _SERIALIZER.url("livy_api_version", livy_api_version, 'str', skip_quote=True),
        "sparkPoolName": _SERIALIZER.url("spark_pool_name", spark_pool_name, 'str', skip_quote=True),
        "sessionId": _SERIALIZER.url("session_id", session_id, 'int'),
        "statementId": _SERIALIZER.url("statement_id", statement_id, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )

class SparkSessionOperations(object):
    """SparkSessionOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.synapse.spark.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_spark_sessions(
        self,
        from_parameter: Optional[int] = None,
        size: Optional[int] = None,
        detailed: Optional[bool] = None,
        **kwargs: Any
    ) -> "_models.SparkSessionCollection":
        """List all spark sessions which are running under a particular spark pool.

        :param from_parameter: Optional param specifying which index the list should begin from.
        :type from_parameter: int
        :param size: Optional param specifying the size of the returned list.
                     By default it is 20 and that is the maximum.
        :type size: int
        :param detailed: Optional query param specifying whether detailed response is returned beyond
         plain livy.
        :type detailed: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SparkSessionCollection, or the result of cls(response)
        :rtype: ~azure.synapse.spark.models.SparkSessionCollection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SparkSessionCollection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_spark_sessions_request(
            spark_pool_name=self._config.spark_pool_name,
            livy_api_version=self._config.livy_api_version,
            from_parameter=from_parameter,
            size=size,
            detailed=detailed,
            template_url=self.get_spark_sessions.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SparkSessionCollection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_spark_sessions.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions'}  # type: ignore


    @distributed_trace
    def create_spark_session(
        self,
        spark_session_options: "_models.SparkSessionOptions",
        detailed: Optional[bool] = None,
        **kwargs: Any
    ) -> "_models.SparkSession":
        """Create new spark session.

        :param spark_session_options: Livy compatible batch job request payload.
        :type spark_session_options: ~azure.synapse.spark.models.SparkSessionOptions
        :param detailed: Optional query param specifying whether detailed response is returned beyond
         plain livy.
        :type detailed: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SparkSession, or the result of cls(response)
        :rtype: ~azure.synapse.spark.models.SparkSession
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SparkSession"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(spark_session_options, 'SparkSessionOptions')

        request = build_create_spark_session_request(
            spark_pool_name=self._config.spark_pool_name,
            livy_api_version=self._config.livy_api_version,
            content_type=content_type,
            json=_json,
            detailed=detailed,
            template_url=self.create_spark_session.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SparkSession', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_spark_session.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions'}  # type: ignore


    @distributed_trace
    def get_spark_session(
        self,
        session_id: int,
        detailed: Optional[bool] = None,
        **kwargs: Any
    ) -> "_models.SparkSession":
        """Gets a single spark session.

        :param session_id: Identifier for the session.
        :type session_id: int
        :param detailed: Optional query param specifying whether detailed response is returned beyond
         plain livy.
        :type detailed: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SparkSession, or the result of cls(response)
        :rtype: ~azure.synapse.spark.models.SparkSession
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SparkSession"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_spark_session_request(
            spark_pool_name=self._config.spark_pool_name,
            session_id=session_id,
            livy_api_version=self._config.livy_api_version,
            detailed=detailed,
            template_url=self.get_spark_session.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SparkSession', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_spark_session.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}'}  # type: ignore


    @distributed_trace
    def cancel_spark_session(
        self,
        session_id: int,
        **kwargs: Any
    ) -> None:
        """Cancels a running spark session.

        :param session_id: Identifier for the session.
        :type session_id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_cancel_spark_session_request(
            spark_pool_name=self._config.spark_pool_name,
            session_id=session_id,
            livy_api_version=self._config.livy_api_version,
            template_url=self.cancel_spark_session.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    cancel_spark_session.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}'}  # type: ignore


    @distributed_trace
    def reset_spark_session_timeout(
        self,
        session_id: int,
        **kwargs: Any
    ) -> None:
        """Sends a keep alive call to the current session to reset the session timeout.

        :param session_id: Identifier for the session.
        :type session_id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_reset_spark_session_timeout_request(
            spark_pool_name=self._config.spark_pool_name,
            session_id=session_id,
            livy_api_version=self._config.livy_api_version,
            template_url=self.reset_spark_session_timeout.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    reset_spark_session_timeout.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/reset-timeout'}  # type: ignore


    @distributed_trace
    def get_spark_statements(
        self,
        session_id: int,
        **kwargs: Any
    ) -> "_models.SparkStatementCollection":
        """Gets a list of statements within a spark session.

        :param session_id: Identifier for the session.
        :type session_id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SparkStatementCollection, or the result of cls(response)
        :rtype: ~azure.synapse.spark.models.SparkStatementCollection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SparkStatementCollection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_spark_statements_request(
            spark_pool_name=self._config.spark_pool_name,
            session_id=session_id,
            livy_api_version=self._config.livy_api_version,
            template_url=self.get_spark_statements.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SparkStatementCollection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_spark_statements.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements'}  # type: ignore


    @distributed_trace
    def create_spark_statement(
        self,
        session_id: int,
        spark_statement_options: "_models.SparkStatementOptions",
        **kwargs: Any
    ) -> "_models.SparkStatement":
        """Create statement within a spark session.

        :param session_id: Identifier for the session.
        :type session_id: int
        :param spark_statement_options: Livy compatible batch job request payload.
        :type spark_statement_options: ~azure.synapse.spark.models.SparkStatementOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SparkStatement, or the result of cls(response)
        :rtype: ~azure.synapse.spark.models.SparkStatement
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SparkStatement"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(spark_statement_options, 'SparkStatementOptions')

        request = build_create_spark_statement_request(
            spark_pool_name=self._config.spark_pool_name,
            session_id=session_id,
            livy_api_version=self._config.livy_api_version,
            content_type=content_type,
            json=_json,
            template_url=self.create_spark_statement.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SparkStatement', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_spark_statement.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements'}  # type: ignore


    @distributed_trace
    def get_spark_statement(
        self,
        session_id: int,
        statement_id: int,
        **kwargs: Any
    ) -> "_models.SparkStatement":
        """Gets a single statement within a spark session.

        :param session_id: Identifier for the session.
        :type session_id: int
        :param statement_id: Identifier for the statement.
        :type statement_id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SparkStatement, or the result of cls(response)
        :rtype: ~azure.synapse.spark.models.SparkStatement
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SparkStatement"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_spark_statement_request(
            spark_pool_name=self._config.spark_pool_name,
            session_id=session_id,
            statement_id=statement_id,
            livy_api_version=self._config.livy_api_version,
            template_url=self.get_spark_statement.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SparkStatement', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_spark_statement.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements/{statementId}'}  # type: ignore


    @distributed_trace
    def cancel_spark_statement(
        self,
        session_id: int,
        statement_id: int,
        **kwargs: Any
    ) -> "_models.SparkStatementCancellationResult":
        """Kill a statement within a session.

        :param session_id: Identifier for the session.
        :type session_id: int
        :param statement_id: Identifier for the statement.
        :type statement_id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SparkStatementCancellationResult, or the result of cls(response)
        :rtype: ~azure.synapse.spark.models.SparkStatementCancellationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SparkStatementCancellationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_cancel_spark_statement_request(
            spark_pool_name=self._config.spark_pool_name,
            session_id=session_id,
            statement_id=statement_id,
            livy_api_version=self._config.livy_api_version,
            template_url=self.cancel_spark_statement.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SparkStatementCancellationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    cancel_spark_statement.metadata = {'url': '/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements/{statementId}/cancel'}  # type: ignore

