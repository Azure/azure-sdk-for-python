# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Column(Model):
    """A table column.

    A column in a table.

    :param name: The name of this column.
    :type name: str
    :param type: The data type of this column.
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Column, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)


class ErrorDetail(Model):
    """Error details.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The error's code.
    :type code: str
    :param message: Required. A human readable error message.
    :type message: str
    :param target: Indicates which property in the request is responsible for
     the error.
    :type target: str
    :param value: Indicates which value in 'target' is responsible for the
     error.
    :type value: str
    :param resources: Indicates resources which were responsible for the
     error.
    :type resources: list[str]
    :param additional_properties:
    :type additional_properties: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'resources': {'key': 'resources', 'type': '[str]'},
        'additional_properties': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.value = kwargs.get('value', None)
        self.resources = kwargs.get('resources', None)
        self.additional_properties = kwargs.get('additional_properties', None)


class ErrorInfo(Model):
    """The code and message for an error.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. A machine readable error code.
    :type code: str
    :param message: Required. A human readable error message.
    :type message: str
    :param details: error details.
    :type details: list[~azure.applicationinsights.query.models.ErrorDetail]
    :param innererror: Inner error details if they exist.
    :type innererror: ~azure.applicationinsights.query.models.ErrorInfo
    :param additional_properties:
    :type additional_properties: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'ErrorInfo'},
        'additional_properties': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(ErrorInfo, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
        self.additional_properties = kwargs.get('additional_properties', None)


class ErrorResponse(Model):
    """Error details.

    Contains details when the response code indicates an error.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The error details.
    :type error: ~azure.applicationinsights.query.models.ErrorInfo
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorInfo'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class EventsAiInfo(Model):
    """AI related application info for an event result.

    :param i_key: iKey of the app
    :type i_key: str
    :param app_name: Name of the application
    :type app_name: str
    :param app_id: ID of the application
    :type app_id: str
    :param sdk_version: SDK version of the application
    :type sdk_version: str
    """

    _attribute_map = {
        'i_key': {'key': 'iKey', 'type': 'str'},
        'app_name': {'key': 'appName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'sdk_version': {'key': 'sdkVersion', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsAiInfo, self).__init__(**kwargs)
        self.i_key = kwargs.get('i_key', None)
        self.app_name = kwargs.get('app_name', None)
        self.app_id = kwargs.get('app_id', None)
        self.sdk_version = kwargs.get('sdk_version', None)


class EventsApplicationInfo(Model):
    """Application info for an event result.

    :param version: Version of the application
    :type version: str
    """

    _attribute_map = {
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsApplicationInfo, self).__init__(**kwargs)
        self.version = kwargs.get('version', None)


class EventsAvailabilityResultInfo(Model):
    """The availability result info.

    :param name: The name of the availability result
    :type name: str
    :param success: Indicates if the availability result was successful
    :type success: str
    :param duration: The duration of the availability result
    :type duration: long
    :param performance_bucket: The performance bucket of the availability
     result
    :type performance_bucket: str
    :param message: The message of the availability result
    :type message: str
    :param location: The location of the availability result
    :type location: str
    :param id: The ID of the availability result
    :type id: str
    :param size: The size of the availability result
    :type size: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'success': {'key': 'success', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'long'},
        'performance_bucket': {'key': 'performanceBucket', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsAvailabilityResultInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.success = kwargs.get('success', None)
        self.duration = kwargs.get('duration', None)
        self.performance_bucket = kwargs.get('performance_bucket', None)
        self.message = kwargs.get('message', None)
        self.location = kwargs.get('location', None)
        self.id = kwargs.get('id', None)
        self.size = kwargs.get('size', None)


class EventsResultData(Model):
    """Events query result data.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: EventsTraceResult, EventsCustomEventResult,
    EventsPageViewResult, EventsBrowserTimingResult, EventsRequestResult,
    EventsDependencyResult, EventsExceptionResult,
    EventsAvailabilityResultResult, EventsPerformanceCounterResult,
    EventsCustomMetricResult

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'trace': 'EventsTraceResult', 'customEvent': 'EventsCustomEventResult', 'pageView': 'EventsPageViewResult', 'browserTiming': 'EventsBrowserTimingResult', 'request': 'EventsRequestResult', 'dependency': 'EventsDependencyResult', 'exception': 'EventsExceptionResult', 'availabilityResult': 'EventsAvailabilityResultResult', 'performanceCounter': 'EventsPerformanceCounterResult', 'customMetric': 'EventsCustomMetricResult'}
    }

    def __init__(self, **kwargs):
        super(EventsResultData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.count = kwargs.get('count', None)
        self.timestamp = kwargs.get('timestamp', None)
        self.custom_dimensions = kwargs.get('custom_dimensions', None)
        self.custom_measurements = kwargs.get('custom_measurements', None)
        self.operation = kwargs.get('operation', None)
        self.session = kwargs.get('session', None)
        self.user = kwargs.get('user', None)
        self.cloud = kwargs.get('cloud', None)
        self.ai = kwargs.get('ai', None)
        self.application = kwargs.get('application', None)
        self.client = kwargs.get('client', None)
        self.type = None


class EventsAvailabilityResultResult(EventsResultData):
    """An availability result result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param availability_result:
    :type availability_result:
     ~azure.applicationinsights.query.models.EventsAvailabilityResultInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'availability_result': {'key': 'availabilityResult', 'type': 'EventsAvailabilityResultInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsAvailabilityResultResult, self).__init__(**kwargs)
        self.availability_result = kwargs.get('availability_result', None)
        self.type = 'availabilityResult'


class EventsBrowserTimingInfo(Model):
    """The browser timing information.

    :param url_path: The path of the URL
    :type url_path: str
    :param url_host: The host of the URL
    :type url_host: str
    :param name: The name of the page
    :type name: str
    :param url: The url of the page
    :type url: str
    :param total_duration: The total duration of the load
    :type total_duration: long
    :param performance_bucket: The performance bucket of the load
    :type performance_bucket: str
    :param network_duration: The network duration of the load
    :type network_duration: long
    :param send_duration: The send duration of the load
    :type send_duration: long
    :param receive_duration: The receive duration of the load
    :type receive_duration: long
    :param processing_duration: The processing duration of the load
    :type processing_duration: long
    """

    _attribute_map = {
        'url_path': {'key': 'urlPath', 'type': 'str'},
        'url_host': {'key': 'urlHost', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'total_duration': {'key': 'totalDuration', 'type': 'long'},
        'performance_bucket': {'key': 'performanceBucket', 'type': 'str'},
        'network_duration': {'key': 'networkDuration', 'type': 'long'},
        'send_duration': {'key': 'sendDuration', 'type': 'long'},
        'receive_duration': {'key': 'receiveDuration', 'type': 'long'},
        'processing_duration': {'key': 'processingDuration', 'type': 'long'},
    }

    def __init__(self, **kwargs):
        super(EventsBrowserTimingInfo, self).__init__(**kwargs)
        self.url_path = kwargs.get('url_path', None)
        self.url_host = kwargs.get('url_host', None)
        self.name = kwargs.get('name', None)
        self.url = kwargs.get('url', None)
        self.total_duration = kwargs.get('total_duration', None)
        self.performance_bucket = kwargs.get('performance_bucket', None)
        self.network_duration = kwargs.get('network_duration', None)
        self.send_duration = kwargs.get('send_duration', None)
        self.receive_duration = kwargs.get('receive_duration', None)
        self.processing_duration = kwargs.get('processing_duration', None)


class EventsBrowserTimingResult(EventsResultData):
    """A browser timing result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param browser_timing:
    :type browser_timing:
     ~azure.applicationinsights.query.models.EventsBrowserTimingInfo
    :param client_performance:
    :type client_performance:
     ~azure.applicationinsights.query.models.EventsClientPerformanceInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'browser_timing': {'key': 'browserTiming', 'type': 'EventsBrowserTimingInfo'},
        'client_performance': {'key': 'clientPerformance', 'type': 'EventsClientPerformanceInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsBrowserTimingResult, self).__init__(**kwargs)
        self.browser_timing = kwargs.get('browser_timing', None)
        self.client_performance = kwargs.get('client_performance', None)
        self.type = 'browserTiming'


class EventsClientInfo(Model):
    """Client info for an event result.

    :param model: Model of the client
    :type model: str
    :param os: Operating system of the client
    :type os: str
    :param type: Type of the client
    :type type: str
    :param browser: Browser of the client
    :type browser: str
    :param ip: IP address of the client
    :type ip: str
    :param city: City of the client
    :type city: str
    :param state_or_province: State or province of the client
    :type state_or_province: str
    :param country_or_region: Country or region of the client
    :type country_or_region: str
    """

    _attribute_map = {
        'model': {'key': 'model', 'type': 'str'},
        'os': {'key': 'os', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'browser': {'key': 'browser', 'type': 'str'},
        'ip': {'key': 'ip', 'type': 'str'},
        'city': {'key': 'city', 'type': 'str'},
        'state_or_province': {'key': 'stateOrProvince', 'type': 'str'},
        'country_or_region': {'key': 'countryOrRegion', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsClientInfo, self).__init__(**kwargs)
        self.model = kwargs.get('model', None)
        self.os = kwargs.get('os', None)
        self.type = kwargs.get('type', None)
        self.browser = kwargs.get('browser', None)
        self.ip = kwargs.get('ip', None)
        self.city = kwargs.get('city', None)
        self.state_or_province = kwargs.get('state_or_province', None)
        self.country_or_region = kwargs.get('country_or_region', None)


class EventsClientPerformanceInfo(Model):
    """Client performance information.

    :param name: The name of the client performance
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsClientPerformanceInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class EventsCloudInfo(Model):
    """Cloud info for an event result.

    :param role_name: Role name of the cloud
    :type role_name: str
    :param role_instance: Role instance of the cloud
    :type role_instance: str
    """

    _attribute_map = {
        'role_name': {'key': 'roleName', 'type': 'str'},
        'role_instance': {'key': 'roleInstance', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsCloudInfo, self).__init__(**kwargs)
        self.role_name = kwargs.get('role_name', None)
        self.role_instance = kwargs.get('role_instance', None)


class EventsCustomEventInfo(Model):
    """The custom event information.

    :param name: The name of the custom event
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsCustomEventInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class EventsCustomEventResult(EventsResultData):
    """A custom event result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param custom_event:
    :type custom_event:
     ~azure.applicationinsights.query.models.EventsCustomEventInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'custom_event': {'key': 'customEvent', 'type': 'EventsCustomEventInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsCustomEventResult, self).__init__(**kwargs)
        self.custom_event = kwargs.get('custom_event', None)
        self.type = 'customEvent'


class EventsCustomMetricInfo(Model):
    """The custom metric info.

    :param name: The name of the custom metric
    :type name: str
    :param value: The value of the custom metric
    :type value: float
    :param value_sum: The sum of the custom metric
    :type value_sum: float
    :param value_count: The count of the custom metric
    :type value_count: int
    :param value_min: The minimum value of the custom metric
    :type value_min: float
    :param value_max: The maximum value of the custom metric
    :type value_max: float
    :param value_std_dev: The standard deviation of the custom metric
    :type value_std_dev: float
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'float'},
        'value_sum': {'key': 'valueSum', 'type': 'float'},
        'value_count': {'key': 'valueCount', 'type': 'int'},
        'value_min': {'key': 'valueMin', 'type': 'float'},
        'value_max': {'key': 'valueMax', 'type': 'float'},
        'value_std_dev': {'key': 'valueStdDev', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(EventsCustomMetricInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)
        self.value_sum = kwargs.get('value_sum', None)
        self.value_count = kwargs.get('value_count', None)
        self.value_min = kwargs.get('value_min', None)
        self.value_max = kwargs.get('value_max', None)
        self.value_std_dev = kwargs.get('value_std_dev', None)


class EventsCustomMetricResult(EventsResultData):
    """A custom metric result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param custom_metric:
    :type custom_metric:
     ~azure.applicationinsights.query.models.EventsCustomMetricInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'custom_metric': {'key': 'customMetric', 'type': 'EventsCustomMetricInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsCustomMetricResult, self).__init__(**kwargs)
        self.custom_metric = kwargs.get('custom_metric', None)
        self.type = 'customMetric'


class EventsDependencyInfo(Model):
    """The dependency info.

    :param target: The target of the dependency
    :type target: str
    :param data: The data of the dependency
    :type data: str
    :param success: Indicates if the dependency was successful
    :type success: str
    :param duration: The duration of the dependency
    :type duration: long
    :param performance_bucket: The performance bucket of the dependency
    :type performance_bucket: str
    :param result_code: The result code of the dependency
    :type result_code: str
    :param type: The type of the dependency
    :type type: str
    :param name: The name of the dependency
    :type name: str
    :param id: The ID of the dependency
    :type id: str
    """

    _attribute_map = {
        'target': {'key': 'target', 'type': 'str'},
        'data': {'key': 'data', 'type': 'str'},
        'success': {'key': 'success', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'long'},
        'performance_bucket': {'key': 'performanceBucket', 'type': 'str'},
        'result_code': {'key': 'resultCode', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsDependencyInfo, self).__init__(**kwargs)
        self.target = kwargs.get('target', None)
        self.data = kwargs.get('data', None)
        self.success = kwargs.get('success', None)
        self.duration = kwargs.get('duration', None)
        self.performance_bucket = kwargs.get('performance_bucket', None)
        self.result_code = kwargs.get('result_code', None)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)


class EventsDependencyResult(EventsResultData):
    """A dependency result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param dependency:
    :type dependency:
     ~azure.applicationinsights.query.models.EventsDependencyInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'dependency': {'key': 'dependency', 'type': 'EventsDependencyInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsDependencyResult, self).__init__(**kwargs)
        self.dependency = kwargs.get('dependency', None)
        self.type = 'dependency'


class EventsExceptionDetail(Model):
    """Exception details.

    :param severity_level: The severity level of the exception detail
    :type severity_level: str
    :param outer_id: The outer ID of the exception detail
    :type outer_id: str
    :param message: The message of the exception detail
    :type message: str
    :param type: The type of the exception detail
    :type type: str
    :param id: The ID of the exception detail
    :type id: str
    :param parsed_stack: The parsed stack
    :type parsed_stack:
     list[~azure.applicationinsights.query.models.EventsExceptionDetailsParsedStack]
    """

    _attribute_map = {
        'severity_level': {'key': 'severityLevel', 'type': 'str'},
        'outer_id': {'key': 'outerId', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'parsed_stack': {'key': 'parsedStack', 'type': '[EventsExceptionDetailsParsedStack]'},
    }

    def __init__(self, **kwargs):
        super(EventsExceptionDetail, self).__init__(**kwargs)
        self.severity_level = kwargs.get('severity_level', None)
        self.outer_id = kwargs.get('outer_id', None)
        self.message = kwargs.get('message', None)
        self.type = kwargs.get('type', None)
        self.id = kwargs.get('id', None)
        self.parsed_stack = kwargs.get('parsed_stack', None)


class EventsExceptionDetailsParsedStack(Model):
    """A parsed stack entry.

    :param assembly: The assembly of the stack entry
    :type assembly: str
    :param method: The method of the stack entry
    :type method: str
    :param level: The level of the stack entry
    :type level: long
    :param line: The line of the stack entry
    :type line: long
    """

    _attribute_map = {
        'assembly': {'key': 'assembly', 'type': 'str'},
        'method': {'key': 'method', 'type': 'str'},
        'level': {'key': 'level', 'type': 'long'},
        'line': {'key': 'line', 'type': 'long'},
    }

    def __init__(self, **kwargs):
        super(EventsExceptionDetailsParsedStack, self).__init__(**kwargs)
        self.assembly = kwargs.get('assembly', None)
        self.method = kwargs.get('method', None)
        self.level = kwargs.get('level', None)
        self.line = kwargs.get('line', None)


class EventsExceptionInfo(Model):
    """The exception info.

    :param severity_level: The severity level of the exception
    :type severity_level: int
    :param problem_id: The problem ID of the exception
    :type problem_id: str
    :param handled_at: Indicates where the exception was handled at
    :type handled_at: str
    :param assembly: The assembly which threw the exception
    :type assembly: str
    :param method: The method that threw the exception
    :type method: str
    :param message: The message of the exception
    :type message: str
    :param type: The type of the exception
    :type type: str
    :param outer_type: The outer type of the exception
    :type outer_type: str
    :param outer_method: The outer method of the exception
    :type outer_method: str
    :param outer_assembly: The outer assembly of the exception
    :type outer_assembly: str
    :param outer_message: The outer message of the exception
    :type outer_message: str
    :param innermost_type: The inner most type of the exception
    :type innermost_type: str
    :param innermost_message: The inner most message of the exception
    :type innermost_message: str
    :param innermost_method: The inner most method of the exception
    :type innermost_method: str
    :param innermost_assembly: The inner most assembly of the exception
    :type innermost_assembly: str
    :param details: The details of the exception
    :type details:
     list[~azure.applicationinsights.query.models.EventsExceptionDetail]
    """

    _attribute_map = {
        'severity_level': {'key': 'severityLevel', 'type': 'int'},
        'problem_id': {'key': 'problemId', 'type': 'str'},
        'handled_at': {'key': 'handledAt', 'type': 'str'},
        'assembly': {'key': 'assembly', 'type': 'str'},
        'method': {'key': 'method', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'outer_type': {'key': 'outerType', 'type': 'str'},
        'outer_method': {'key': 'outerMethod', 'type': 'str'},
        'outer_assembly': {'key': 'outerAssembly', 'type': 'str'},
        'outer_message': {'key': 'outerMessage', 'type': 'str'},
        'innermost_type': {'key': 'innermostType', 'type': 'str'},
        'innermost_message': {'key': 'innermostMessage', 'type': 'str'},
        'innermost_method': {'key': 'innermostMethod', 'type': 'str'},
        'innermost_assembly': {'key': 'innermostAssembly', 'type': 'str'},
        'details': {'key': 'details', 'type': '[EventsExceptionDetail]'},
    }

    def __init__(self, **kwargs):
        super(EventsExceptionInfo, self).__init__(**kwargs)
        self.severity_level = kwargs.get('severity_level', None)
        self.problem_id = kwargs.get('problem_id', None)
        self.handled_at = kwargs.get('handled_at', None)
        self.assembly = kwargs.get('assembly', None)
        self.method = kwargs.get('method', None)
        self.message = kwargs.get('message', None)
        self.type = kwargs.get('type', None)
        self.outer_type = kwargs.get('outer_type', None)
        self.outer_method = kwargs.get('outer_method', None)
        self.outer_assembly = kwargs.get('outer_assembly', None)
        self.outer_message = kwargs.get('outer_message', None)
        self.innermost_type = kwargs.get('innermost_type', None)
        self.innermost_message = kwargs.get('innermost_message', None)
        self.innermost_method = kwargs.get('innermost_method', None)
        self.innermost_assembly = kwargs.get('innermost_assembly', None)
        self.details = kwargs.get('details', None)


class EventsExceptionResult(EventsResultData):
    """An exception result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param exception:
    :type exception:
     ~azure.applicationinsights.query.models.EventsExceptionInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'exception': {'key': 'exception', 'type': 'EventsExceptionInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsExceptionResult, self).__init__(**kwargs)
        self.exception = kwargs.get('exception', None)
        self.type = 'exception'


class EventsOperationInfo(Model):
    """Operation info for an event result.

    :param name: Name of the operation
    :type name: str
    :param id: ID of the operation
    :type id: str
    :param parent_id: Parent ID of the operation
    :type parent_id: str
    :param synthetic_source: Synthetic source of the operation
    :type synthetic_source: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'synthetic_source': {'key': 'syntheticSource', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsOperationInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.parent_id = kwargs.get('parent_id', None)
        self.synthetic_source = kwargs.get('synthetic_source', None)


class EventsPageViewInfo(Model):
    """The page view information.

    :param name: The name of the page
    :type name: str
    :param url: The URL of the page
    :type url: str
    :param duration: The duration of the page view
    :type duration: str
    :param performance_bucket: The performance bucket of the page view
    :type performance_bucket: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'str'},
        'performance_bucket': {'key': 'performanceBucket', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsPageViewInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.url = kwargs.get('url', None)
        self.duration = kwargs.get('duration', None)
        self.performance_bucket = kwargs.get('performance_bucket', None)


class EventsPageViewResult(EventsResultData):
    """A page view result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param page_view:
    :type page_view:
     ~azure.applicationinsights.query.models.EventsPageViewInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'page_view': {'key': 'pageView', 'type': 'EventsPageViewInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsPageViewResult, self).__init__(**kwargs)
        self.page_view = kwargs.get('page_view', None)
        self.type = 'pageView'


class EventsPerformanceCounterInfo(Model):
    """The performance counter info.

    :param value: The value of the performance counter
    :type value: float
    :param name: The name of the performance counter
    :type name: str
    :param category: The category of the performance counter
    :type category: str
    :param counter: The counter of the performance counter
    :type counter: str
    :param instance_name: The instance name of the performance counter
    :type instance_name: str
    :param instance: The instance of the performance counter
    :type instance: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'name': {'key': 'name', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'counter': {'key': 'counter', 'type': 'str'},
        'instance_name': {'key': 'instanceName', 'type': 'str'},
        'instance': {'key': 'instance', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsPerformanceCounterInfo, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.name = kwargs.get('name', None)
        self.category = kwargs.get('category', None)
        self.counter = kwargs.get('counter', None)
        self.instance_name = kwargs.get('instance_name', None)
        self.instance = kwargs.get('instance', None)


class EventsPerformanceCounterResult(EventsResultData):
    """A performance counter result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param performance_counter:
    :type performance_counter:
     ~azure.applicationinsights.query.models.EventsPerformanceCounterInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'performance_counter': {'key': 'performanceCounter', 'type': 'EventsPerformanceCounterInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsPerformanceCounterResult, self).__init__(**kwargs)
        self.performance_counter = kwargs.get('performance_counter', None)
        self.type = 'performanceCounter'


class EventsRequestInfo(Model):
    """The request info.

    :param name: The name of the request
    :type name: str
    :param url: The URL of the request
    :type url: str
    :param success: Indicates if the request was successful
    :type success: str
    :param duration: The duration of the request
    :type duration: float
    :param performance_bucket: The performance bucket of the request
    :type performance_bucket: str
    :param result_code: The result code of the request
    :type result_code: str
    :param source: The source of the request
    :type source: str
    :param id: The ID of the request
    :type id: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'success': {'key': 'success', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'float'},
        'performance_bucket': {'key': 'performanceBucket', 'type': 'str'},
        'result_code': {'key': 'resultCode', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsRequestInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.url = kwargs.get('url', None)
        self.success = kwargs.get('success', None)
        self.duration = kwargs.get('duration', None)
        self.performance_bucket = kwargs.get('performance_bucket', None)
        self.result_code = kwargs.get('result_code', None)
        self.source = kwargs.get('source', None)
        self.id = kwargs.get('id', None)


class EventsRequestResult(EventsResultData):
    """A request result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param request:
    :type request: ~azure.applicationinsights.query.models.EventsRequestInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'request': {'key': 'request', 'type': 'EventsRequestInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsRequestResult, self).__init__(**kwargs)
        self.request = kwargs.get('request', None)
        self.type = 'request'


class EventsResult(Model):
    """An event query result.

    :param aimessages: OData messages for this response.
    :type aimessages: list[~azure.applicationinsights.query.models.ErrorInfo]
    :param value:
    :type value: ~azure.applicationinsights.query.models.EventsResultData
    """

    _attribute_map = {
        'aimessages': {'key': '@ai\\.messages', 'type': '[ErrorInfo]'},
        'value': {'key': 'value', 'type': 'EventsResultData'},
    }

    def __init__(self, **kwargs):
        super(EventsResult, self).__init__(**kwargs)
        self.aimessages = kwargs.get('aimessages', None)
        self.value = kwargs.get('value', None)


class EventsResultDataCustomDimensions(Model):
    """Custom dimensions of the event.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param additional_properties1:
    :type additional_properties1: object
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_properties1': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(EventsResultDataCustomDimensions, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties1 = kwargs.get('additional_properties1', None)


class EventsResultDataCustomMeasurements(Model):
    """Custom measurements of the event.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param additional_properties1:
    :type additional_properties1: object
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'additional_properties1': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(EventsResultDataCustomMeasurements, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.additional_properties1 = kwargs.get('additional_properties1', None)


class EventsResults(Model):
    """An events query result.

    :param odatacontext: OData context metadata endpoint for this response
    :type odatacontext: str
    :param aimessages: OData messages for this response.
    :type aimessages: list[~azure.applicationinsights.query.models.ErrorInfo]
    :param value: Contents of the events query result.
    :type value:
     list[~azure.applicationinsights.query.models.EventsResultData]
    """

    _attribute_map = {
        'odatacontext': {'key': '@odata\\.context', 'type': 'str'},
        'aimessages': {'key': '@ai\\.messages', 'type': '[ErrorInfo]'},
        'value': {'key': 'value', 'type': '[EventsResultData]'},
    }

    def __init__(self, **kwargs):
        super(EventsResults, self).__init__(**kwargs)
        self.odatacontext = kwargs.get('odatacontext', None)
        self.aimessages = kwargs.get('aimessages', None)
        self.value = kwargs.get('value', None)


class EventsSessionInfo(Model):
    """Session info for an event result.

    :param id: ID of the session
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsSessionInfo, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class EventsTraceInfo(Model):
    """The trace information.

    :param message: The trace message
    :type message: str
    :param severity_level: The trace severity level
    :type severity_level: int
    """

    _attribute_map = {
        'message': {'key': 'message', 'type': 'str'},
        'severity_level': {'key': 'severityLevel', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(EventsTraceInfo, self).__init__(**kwargs)
        self.message = kwargs.get('message', None)
        self.severity_level = kwargs.get('severity_level', None)


class EventsTraceResult(EventsResultData):
    """A trace result.

    All required parameters must be populated in order to send to Azure.

    :param id: The unique ID for this event.
    :type id: str
    :param count: Count of the event
    :type count: long
    :param timestamp: Timestamp of the event
    :type timestamp: datetime
    :param custom_dimensions: Custom dimensions of the event
    :type custom_dimensions:
     ~azure.applicationinsights.query.models.EventsResultDataCustomDimensions
    :param custom_measurements: Custom measurements of the event
    :type custom_measurements:
     ~azure.applicationinsights.query.models.EventsResultDataCustomMeasurements
    :param operation: Operation info of the event
    :type operation:
     ~azure.applicationinsights.query.models.EventsOperationInfo
    :param session: Session info of the event
    :type session: ~azure.applicationinsights.query.models.EventsSessionInfo
    :param user: User info of the event
    :type user: ~azure.applicationinsights.query.models.EventsUserInfo
    :param cloud: Cloud info of the event
    :type cloud: ~azure.applicationinsights.query.models.EventsCloudInfo
    :param ai: AI info of the event
    :type ai: ~azure.applicationinsights.query.models.EventsAiInfo
    :param application: Application info of the event
    :type application:
     ~azure.applicationinsights.query.models.EventsApplicationInfo
    :param client: Client info of the event
    :type client: ~azure.applicationinsights.query.models.EventsClientInfo
    :param type: Required. Constant filled by server.
    :type type: str
    :param trace:
    :type trace: ~azure.applicationinsights.query.models.EventsTraceInfo
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'custom_dimensions': {'key': 'customDimensions', 'type': 'EventsResultDataCustomDimensions'},
        'custom_measurements': {'key': 'customMeasurements', 'type': 'EventsResultDataCustomMeasurements'},
        'operation': {'key': 'operation', 'type': 'EventsOperationInfo'},
        'session': {'key': 'session', 'type': 'EventsSessionInfo'},
        'user': {'key': 'user', 'type': 'EventsUserInfo'},
        'cloud': {'key': 'cloud', 'type': 'EventsCloudInfo'},
        'ai': {'key': 'ai', 'type': 'EventsAiInfo'},
        'application': {'key': 'application', 'type': 'EventsApplicationInfo'},
        'client': {'key': 'client', 'type': 'EventsClientInfo'},
        'type': {'key': 'type', 'type': 'str'},
        'trace': {'key': 'trace', 'type': 'EventsTraceInfo'},
    }

    def __init__(self, **kwargs):
        super(EventsTraceResult, self).__init__(**kwargs)
        self.trace = kwargs.get('trace', None)
        self.type = 'trace'


class EventsUserInfo(Model):
    """User info for an event result.

    :param id: ID of the user
    :type id: str
    :param account_id: Account ID of the user
    :type account_id: str
    :param authenticated_id: Authenticated ID of the user
    :type authenticated_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'authenticated_id': {'key': 'authenticatedId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventsUserInfo, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.account_id = kwargs.get('account_id', None)
        self.authenticated_id = kwargs.get('authenticated_id', None)


class MetadataApplication(Model):
    """An Application Insights application.

    Application Insights apps that were part of the metadata request and that
    the user has access to.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the Application Insights app.
    :type id: str
    :param resource_id: Required. The ARM resource ID of the Application
     Insights app.
    :type resource_id: str
    :param name: Required. The name of the Application Insights app.
    :type name: str
    :param region: Required. The Azure region of the Application Insights app.
    :type region: str
    :param tables: The list of custom tables for the Application Insights app.
    :type tables: list[str]
    :param functions: The list of stored functions on the Application Insights
     app
    :type functions: list[str]
    :param table_groups: The list of table groups on the Application Insights
     app
    :type table_groups: list[str]
    """

    _validation = {
        'id': {'required': True},
        'resource_id': {'required': True},
        'name': {'required': True},
        'region': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'table_groups': {'key': 'tableGroups', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(MetadataApplication, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.name = kwargs.get('name', None)
        self.region = kwargs.get('region', None)
        self.tables = kwargs.get('tables', None)
        self.functions = kwargs.get('functions', None)
        self.table_groups = kwargs.get('table_groups', None)


class MetadataFunction(Model):
    """A stored function.

    Functions are stored Kusto queries that can be specified as part of queries
    by using their name.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the function.
    :type id: str
    :param name: Required. The name of the function, to be used in queries.
    :type name: str
    :param parameters: The parameters/arguments of the function, if any.
    :type parameters: str
    :param display_name: The display name of the function.
    :type display_name: str
    :param description: The description of the function.
    :type description: str
    :param body: Required. The KQL body of the function.
    :type body: str
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MetadataFunction, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.parameters = kwargs.get('parameters', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.body = kwargs.get('body', None)


class MetadataResults(Model):
    """A metadata response.

    The metadata result for the app, including available tables, etc.

    :param table_groups: The list of groups of tables on the app.
    :type table_groups:
     list[~azure.applicationinsights.query.models.MetadataTableGroup]
    :param tables: The list of tables and columns that comprise the schema of
     the app.
    :type tables: list[~azure.applicationinsights.query.models.MetadataTable]
    :param functions: The list of functions stored on the app.
    :type functions:
     list[~azure.applicationinsights.query.models.MetadataFunction]
    :param applications: The list of Application Insights apps that were
     referenced in the metadata request.
    :type applications:
     list[~azure.applicationinsights.query.models.MetadataApplication]
    """

    _validation = {
        'table_groups': {'unique': True},
        'tables': {'unique': True},
        'functions': {'unique': True},
        'applications': {'unique': True},
    }

    _attribute_map = {
        'table_groups': {'key': 'tableGroups', 'type': '[MetadataTableGroup]'},
        'tables': {'key': 'tables', 'type': '[MetadataTable]'},
        'functions': {'key': 'functions', 'type': '[MetadataFunction]'},
        'applications': {'key': 'applications', 'type': '[MetadataApplication]'},
    }

    def __init__(self, **kwargs):
        super(MetadataResults, self).__init__(**kwargs)
        self.table_groups = kwargs.get('table_groups', None)
        self.tables = kwargs.get('tables', None)
        self.functions = kwargs.get('functions', None)
        self.applications = kwargs.get('applications', None)


class MetadataTable(Model):
    """A data table that takes part in a schema of an Application Insights app.

    Tables are part of the app schema, and contain a list of columns and a
    reference to other relevant metadata items.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the table
    :type id: str
    :param name: Required. The name of the table
    :type name: str
    :param description: The description of the table
    :type description: str
    :param timespan_column: The column associated with the timespan query
     parameter for the table
    :type timespan_column: str
    :param columns: The list of columns defined on the table
    :type columns:
     list[~azure.applicationinsights.query.models.MetadataTableColumnsItem]
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'timespan_column': {'key': 'timespanColumn', 'type': 'str'},
        'columns': {'key': 'columns', 'type': '[MetadataTableColumnsItem]'},
    }

    def __init__(self, **kwargs):
        super(MetadataTable, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.timespan_column = kwargs.get('timespan_column', None)
        self.columns = kwargs.get('columns', None)


class MetadataTableColumnsItem(Model):
    """MetadataTableColumnsItem.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the column
    :type name: str
    :param description: The description of the column
    :type description: str
    :param type: Required. The data type of the column. Possible values
     include: 'bool', 'datetime', 'dynamic', 'int', 'long', 'real', 'string'
    :type type: str or
     ~azure.applicationinsights.query.models.MetadataColumnDataType
    :param is_preferred_facet: A flag indicating this column is a preferred
     facet
    :type is_preferred_facet: bool
    :param source: an indication of the source of the column, used only when
     multiple apps have conflicting definition for the column
    :type source: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'is_preferred_facet': {'key': 'isPreferredFacet', 'type': 'bool'},
        'source': {'key': 'source', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(MetadataTableColumnsItem, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.type = kwargs.get('type', None)
        self.is_preferred_facet = kwargs.get('is_preferred_facet', None)
        self.source = kwargs.get('source', None)


class MetadataTableGroup(Model):
    """A group of tables.

    The table grouping can be either an Application Insights schema or a Log
    Analytics solution.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the table group
    :type id: str
    :param name: Required. The name of the table group
    :type name: str
    :param source: The source of the table group, can be either AI or OMS for
     Log Analytics workspaces
    :type source: str
    :param display_name: The display name of the table group
    :type display_name: str
    :param description: The description of the table group
    :type description: str
    :param tables: The list of tables contained in the table group
    :type tables: list[str]
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tables': {'key': 'tables', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(MetadataTableGroup, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.source = kwargs.get('source', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.tables = kwargs.get('tables', None)


class MetricsPostBodySchema(Model):
    """A metric request.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. An identifier for this query.  Must be unique within
     the post body of the request.  This identifier will be the 'id' property
     of the response object representing this query.
    :type id: str
    :param parameters: Required. The parameters for a single metrics query
    :type parameters:
     ~azure.applicationinsights.query.models.MetricsPostBodySchemaParameters
    """

    _validation = {
        'id': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'MetricsPostBodySchemaParameters'},
    }

    def __init__(self, **kwargs):
        super(MetricsPostBodySchema, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.parameters = kwargs.get('parameters', None)


class MetricsPostBodySchemaParameters(Model):
    """The parameters for a single metrics query.

    All required parameters must be populated in order to send to Azure.

    :param metric_id: Required. Possible values include: 'requests/count',
     'requests/duration', 'requests/failed', 'users/count',
     'users/authenticated', 'pageViews/count', 'pageViews/duration',
     'client/processingDuration', 'client/receiveDuration',
     'client/networkDuration', 'client/sendDuration', 'client/totalDuration',
     'dependencies/count', 'dependencies/failed', 'dependencies/duration',
     'exceptions/count', 'exceptions/browser', 'exceptions/server',
     'sessions/count', 'performanceCounters/requestExecutionTime',
     'performanceCounters/requestsPerSecond',
     'performanceCounters/requestsInQueue',
     'performanceCounters/memoryAvailableBytes',
     'performanceCounters/exceptionsPerSecond',
     'performanceCounters/processCpuPercentage',
     'performanceCounters/processIOBytesPerSecond',
     'performanceCounters/processPrivateBytes',
     'performanceCounters/processorCpuPercentage',
     'availabilityResults/availabilityPercentage',
     'availabilityResults/duration', 'billing/telemetryCount',
     'customEvents/count'
    :type metric_id: str or ~azure.applicationinsights.query.models.MetricId
    :param timespan:
    :type timespan: str
    :param aggregation:
    :type aggregation: list[str or
     ~azure.applicationinsights.query.models.MetricsAggregation]
    :param interval:
    :type interval: timedelta
    :param segment:
    :type segment: list[str or
     ~azure.applicationinsights.query.models.MetricsSegment]
    :param top:
    :type top: int
    :param orderby:
    :type orderby: str
    :param filter:
    :type filter: str
    """

    _validation = {
        'metric_id': {'required': True},
    }

    _attribute_map = {
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'timespan': {'key': 'timespan', 'type': 'str'},
        'aggregation': {'key': 'aggregation', 'type': '[str]'},
        'interval': {'key': 'interval', 'type': 'duration'},
        'segment': {'key': 'segment', 'type': '[str]'},
        'top': {'key': 'top', 'type': 'int'},
        'orderby': {'key': 'orderby', 'type': 'str'},
        'filter': {'key': 'filter', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MetricsPostBodySchemaParameters, self).__init__(**kwargs)
        self.metric_id = kwargs.get('metric_id', None)
        self.timespan = kwargs.get('timespan', None)
        self.aggregation = kwargs.get('aggregation', None)
        self.interval = kwargs.get('interval', None)
        self.segment = kwargs.get('segment', None)
        self.top = kwargs.get('top', None)
        self.orderby = kwargs.get('orderby', None)
        self.filter = kwargs.get('filter', None)


class MetricsResult(Model):
    """A metric result.

    :param value:
    :type value: ~azure.applicationinsights.query.models.MetricsResultInfo
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'MetricsResultInfo'},
    }

    def __init__(self, **kwargs):
        super(MetricsResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class MetricsResultInfo(Model):
    """A metric result data.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param start: Start time of the metric.
    :type start: datetime
    :param end: Start time of the metric.
    :type end: datetime
    :param interval: The interval used to segment the metric data.
    :type interval: timedelta
    :param segments: Segmented metric data (if segmented).
    :type segments:
     list[~azure.applicationinsights.query.models.MetricsSegmentInfo]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'start': {'key': 'start', 'type': 'iso-8601'},
        'end': {'key': 'end', 'type': 'iso-8601'},
        'interval': {'key': 'interval', 'type': 'duration'},
        'segments': {'key': 'segments', 'type': '[MetricsSegmentInfo]'},
    }

    def __init__(self, **kwargs):
        super(MetricsResultInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.start = kwargs.get('start', None)
        self.end = kwargs.get('end', None)
        self.interval = kwargs.get('interval', None)
        self.segments = kwargs.get('segments', None)


class MetricsResultsItem(Model):
    """MetricsResultsItem.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The specified ID for this metric.
    :type id: str
    :param status: Required. The HTTP status code of this metric query.
    :type status: int
    :param body: Required. The results of this metric query.
    :type body: ~azure.applicationinsights.query.models.MetricsResult
    """

    _validation = {
        'id': {'required': True},
        'status': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'int'},
        'body': {'key': 'body', 'type': 'MetricsResult'},
    }

    def __init__(self, **kwargs):
        super(MetricsResultsItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.status = kwargs.get('status', None)
        self.body = kwargs.get('body', None)


class MetricsSegmentInfo(Model):
    """A metric segment.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param start: Start time of the metric segment (only when an interval was
     specified).
    :type start: datetime
    :param end: Start time of the metric segment (only when an interval was
     specified).
    :type end: datetime
    :param segments: Segmented metric data (if further segmented).
    :type segments:
     list[~azure.applicationinsights.query.models.MetricsSegmentInfo]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'start': {'key': 'start', 'type': 'iso-8601'},
        'end': {'key': 'end', 'type': 'iso-8601'},
        'segments': {'key': 'segments', 'type': '[MetricsSegmentInfo]'},
    }

    def __init__(self, **kwargs):
        super(MetricsSegmentInfo, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.start = kwargs.get('start', None)
        self.end = kwargs.get('end', None)
        self.segments = kwargs.get('segments', None)


class QueryBody(Model):
    """The Analytics query. Learn more about the [Analytics query
    syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/).

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The query to execute.
    :type query: str
    :param timespan: Optional. The timespan over which to query data. This is
     an ISO8601 time period value.  This timespan is applied in addition to any
     that are specified in the query expression.
    :type timespan: str
    :param applications: A list of Application IDs for cross-application
     queries.
    :type applications: list[str]
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'timespan': {'key': 'timespan', 'type': 'str'},
        'applications': {'key': 'applications', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(QueryBody, self).__init__(**kwargs)
        self.query = kwargs.get('query', None)
        self.timespan = kwargs.get('timespan', None)
        self.applications = kwargs.get('applications', None)


class QueryResults(Model):
    """A query response.

    Contains the tables, columns & rows resulting from a query.

    All required parameters must be populated in order to send to Azure.

    :param tables: Required. The list of tables, columns and rows.
    :type tables: list[~azure.applicationinsights.query.models.Table]
    """

    _validation = {
        'tables': {'required': True},
    }

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[Table]'},
    }

    def __init__(self, **kwargs):
        super(QueryResults, self).__init__(**kwargs)
        self.tables = kwargs.get('tables', None)


class Table(Model):
    """A query response table.

    Contains the columns and rows for one table in a query response.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the table.
    :type name: str
    :param columns: Required. The list of columns in this table.
    :type columns: list[~azure.applicationinsights.query.models.Column]
    :param rows: Required. The resulting rows from this query.
    :type rows: list[list[object]]
    """

    _validation = {
        'name': {'required': True},
        'columns': {'required': True},
        'rows': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'columns': {'key': 'columns', 'type': '[Column]'},
        'rows': {'key': 'rows', 'type': '[[object]]'},
    }

    def __init__(self, **kwargs):
        super(Table, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.columns = kwargs.get('columns', None)
        self.rows = kwargs.get('rows', None)
