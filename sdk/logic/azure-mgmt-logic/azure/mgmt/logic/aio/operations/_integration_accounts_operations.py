# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._integration_accounts_operations import (
    build_create_or_update_request,
    build_delete_request,
    build_get_request,
    build_list_by_resource_group_request,
    build_list_by_subscription_request,
    build_list_callback_url_request,
    build_list_key_vault_keys_request,
    build_log_tracking_events_request,
    build_regenerate_access_key_request,
    build_update_request,
)

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class IntegrationAccountsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.logic.aio.LogicManagementClient`'s
        :attr:`integration_accounts` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_by_subscription(
        self, top: Optional[int] = None, **kwargs: Any
    ) -> AsyncIterable["_models.IntegrationAccount"]:
        """Gets a list of integration accounts by subscription.

        :param top: The number of items to be included in the result. Default value is None.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either IntegrationAccount or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.logic.models.IntegrationAccount]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.IntegrationAccountListResult]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_list_by_subscription_request(
                    subscription_id=self._config.subscription_id,
                    top=top,
                    api_version=api_version,
                    template_url=self.list_by_subscription.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)  # type: ignore
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("IntegrationAccountListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list_by_subscription.metadata = {"url": "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationAccounts"}  # type: ignore

    @distributed_trace
    def list_by_resource_group(
        self, resource_group_name: str, top: Optional[int] = None, **kwargs: Any
    ) -> AsyncIterable["_models.IntegrationAccount"]:
        """Gets a list of integration accounts by resource group.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param top: The number of items to be included in the result. Default value is None.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either IntegrationAccount or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.logic.models.IntegrationAccount]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.IntegrationAccountListResult]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    top=top,
                    api_version=api_version,
                    template_url=self.list_by_resource_group.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)  # type: ignore
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("IntegrationAccountListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list_by_resource_group.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts"}  # type: ignore

    @distributed_trace_async
    async def get(
        self, resource_group_name: str, integration_account_name: str, **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Gets an integration account.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.IntegrationAccount]

        request = build_get_request(
            resource_group_name=resource_group_name,
            integration_account_name=integration_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.get.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("IntegrationAccount", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}"}  # type: ignore

    @overload
    async def create_or_update(
        self,
        resource_group_name: str,
        integration_account_name: str,
        integration_account: _models.IntegrationAccount,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Creates or updates an integration account.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param integration_account: The integration account. Required.
        :type integration_account: ~azure.mgmt.logic.models.IntegrationAccount
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_or_update(
        self,
        resource_group_name: str,
        integration_account_name: str,
        integration_account: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Creates or updates an integration account.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param integration_account: The integration account. Required.
        :type integration_account: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_or_update(
        self,
        resource_group_name: str,
        integration_account_name: str,
        integration_account: Union[_models.IntegrationAccount, IO],
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Creates or updates an integration account.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param integration_account: The integration account. Is either a model type or a IO type.
         Required.
        :type integration_account: ~azure.mgmt.logic.models.IntegrationAccount or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.IntegrationAccount]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(integration_account, (IO, bytes)):
            _content = integration_account
        else:
            _json = self._serialize.body(integration_account, "IntegrationAccount")

        request = build_create_or_update_request(
            resource_group_name=resource_group_name,
            integration_account_name=integration_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_or_update.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize("IntegrationAccount", pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize("IntegrationAccount", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}"}  # type: ignore

    @overload
    async def update(
        self,
        resource_group_name: str,
        integration_account_name: str,
        integration_account: _models.IntegrationAccount,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Updates an integration account.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param integration_account: The integration account. Required.
        :type integration_account: ~azure.mgmt.logic.models.IntegrationAccount
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update(
        self,
        resource_group_name: str,
        integration_account_name: str,
        integration_account: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Updates an integration account.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param integration_account: The integration account. Required.
        :type integration_account: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update(
        self,
        resource_group_name: str,
        integration_account_name: str,
        integration_account: Union[_models.IntegrationAccount, IO],
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Updates an integration account.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param integration_account: The integration account. Is either a model type or a IO type.
         Required.
        :type integration_account: ~azure.mgmt.logic.models.IntegrationAccount or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.IntegrationAccount]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(integration_account, (IO, bytes)):
            _content = integration_account
        else:
            _json = self._serialize.body(integration_account, "IntegrationAccount")

        request = build_update_request(
            resource_group_name=resource_group_name,
            integration_account_name=integration_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.update.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("IntegrationAccount", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}"}  # type: ignore

    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, integration_account_name: str, **kwargs: Any
    ) -> None:
        """Deletes an integration account.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_delete_request(
            resource_group_name=resource_group_name,
            integration_account_name=integration_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.delete.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}"}  # type: ignore

    @overload
    async def list_callback_url(
        self,
        resource_group_name: str,
        integration_account_name: str,
        parameters: _models.GetCallbackUrlParameters,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CallbackUrl:
        """Gets the integration account callback URL.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param parameters: The callback URL parameters. Required.
        :type parameters: ~azure.mgmt.logic.models.GetCallbackUrlParameters
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CallbackUrl or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.CallbackUrl
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def list_callback_url(
        self,
        resource_group_name: str,
        integration_account_name: str,
        parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CallbackUrl:
        """Gets the integration account callback URL.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param parameters: The callback URL parameters. Required.
        :type parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CallbackUrl or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.CallbackUrl
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def list_callback_url(
        self,
        resource_group_name: str,
        integration_account_name: str,
        parameters: Union[_models.GetCallbackUrlParameters, IO],
        **kwargs: Any
    ) -> _models.CallbackUrl:
        """Gets the integration account callback URL.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param parameters: The callback URL parameters. Is either a model type or a IO type. Required.
        :type parameters: ~azure.mgmt.logic.models.GetCallbackUrlParameters or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CallbackUrl or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.CallbackUrl
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.CallbackUrl]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IO, bytes)):
            _content = parameters
        else:
            _json = self._serialize.body(parameters, "GetCallbackUrlParameters")

        request = build_list_callback_url_request(
            resource_group_name=resource_group_name,
            integration_account_name=integration_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.list_callback_url.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CallbackUrl", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_callback_url.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listCallbackUrl"}  # type: ignore

    @overload
    def list_key_vault_keys(
        self,
        resource_group_name: str,
        integration_account_name: str,
        list_key_vault_keys: _models.ListKeyVaultKeysDefinition,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.KeyVaultKey"]:
        """Gets the integration account's Key Vault keys.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param list_key_vault_keys: The key vault parameters. Required.
        :type list_key_vault_keys: ~azure.mgmt.logic.models.ListKeyVaultKeysDefinition
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either KeyVaultKey or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.logic.models.KeyVaultKey]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def list_key_vault_keys(
        self,
        resource_group_name: str,
        integration_account_name: str,
        list_key_vault_keys: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.KeyVaultKey"]:
        """Gets the integration account's Key Vault keys.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param list_key_vault_keys: The key vault parameters. Required.
        :type list_key_vault_keys: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either KeyVaultKey or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.logic.models.KeyVaultKey]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def list_key_vault_keys(
        self,
        resource_group_name: str,
        integration_account_name: str,
        list_key_vault_keys: Union[_models.ListKeyVaultKeysDefinition, IO],
        **kwargs: Any
    ) -> AsyncIterable["_models.KeyVaultKey"]:
        """Gets the integration account's Key Vault keys.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param list_key_vault_keys: The key vault parameters. Is either a model type or a IO type.
         Required.
        :type list_key_vault_keys: ~azure.mgmt.logic.models.ListKeyVaultKeysDefinition or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either KeyVaultKey or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.logic.models.KeyVaultKey]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.KeyVaultKeyCollection]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})
        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(list_key_vault_keys, (IO, bytes)):
            _content = list_key_vault_keys
        else:
            _json = self._serialize.body(list_key_vault_keys, "ListKeyVaultKeysDefinition")

        def prepare_request(next_link=None):
            if not next_link:

                request = build_list_key_vault_keys_request(
                    resource_group_name=resource_group_name,
                    integration_account_name=integration_account_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    content_type=content_type,
                    json=_json,
                    content=_content,
                    template_url=self.list_key_vault_keys.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)  # type: ignore
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("KeyVaultKeyCollection", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list_key_vault_keys.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/listKeyVaultKeys"}  # type: ignore

    @overload
    async def log_tracking_events(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        integration_account_name: str,
        log_tracking_events: _models.TrackingEventsDefinition,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Logs the integration account's tracking events.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param log_tracking_events: The callback URL parameters. Required.
        :type log_tracking_events: ~azure.mgmt.logic.models.TrackingEventsDefinition
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def log_tracking_events(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        integration_account_name: str,
        log_tracking_events: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Logs the integration account's tracking events.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param log_tracking_events: The callback URL parameters. Required.
        :type log_tracking_events: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def log_tracking_events(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        integration_account_name: str,
        log_tracking_events: Union[_models.TrackingEventsDefinition, IO],
        **kwargs: Any
    ) -> None:
        """Logs the integration account's tracking events.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param log_tracking_events: The callback URL parameters. Is either a model type or a IO type.
         Required.
        :type log_tracking_events: ~azure.mgmt.logic.models.TrackingEventsDefinition or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(log_tracking_events, (IO, bytes)):
            _content = log_tracking_events
        else:
            _json = self._serialize.body(log_tracking_events, "TrackingEventsDefinition")

        request = build_log_tracking_events_request(
            resource_group_name=resource_group_name,
            integration_account_name=integration_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.log_tracking_events.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    log_tracking_events.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/logTrackingEvents"}  # type: ignore

    @overload
    async def regenerate_access_key(
        self,
        resource_group_name: str,
        integration_account_name: str,
        regenerate_access_key: _models.RegenerateActionParameter,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Regenerates the integration account access key.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param regenerate_access_key: The access key type. Required.
        :type regenerate_access_key: ~azure.mgmt.logic.models.RegenerateActionParameter
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def regenerate_access_key(
        self,
        resource_group_name: str,
        integration_account_name: str,
        regenerate_access_key: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Regenerates the integration account access key.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param regenerate_access_key: The access key type. Required.
        :type regenerate_access_key: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def regenerate_access_key(
        self,
        resource_group_name: str,
        integration_account_name: str,
        regenerate_access_key: Union[_models.RegenerateActionParameter, IO],
        **kwargs: Any
    ) -> _models.IntegrationAccount:
        """Regenerates the integration account access key.

        :param resource_group_name: The resource group name. Required.
        :type resource_group_name: str
        :param integration_account_name: The integration account name. Required.
        :type integration_account_name: str
        :param regenerate_access_key: The access key type. Is either a model type or a IO type.
         Required.
        :type regenerate_access_key: ~azure.mgmt.logic.models.RegenerateActionParameter or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IntegrationAccount or the result of cls(response)
        :rtype: ~azure.mgmt.logic.models.IntegrationAccount
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2019-05-01"]
        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.IntegrationAccount]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(regenerate_access_key, (IO, bytes)):
            _content = regenerate_access_key
        else:
            _json = self._serialize.body(regenerate_access_key, "RegenerateActionParameter")

        request = build_regenerate_access_key_request(
            resource_group_name=resource_group_name,
            integration_account_name=integration_account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.regenerate_access_key.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("IntegrationAccount", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    regenerate_access_key.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/regenerateAccessKey"}  # type: ignore
