# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

import msrest.serialization

from ._microsoft_postgre_sql_hyperscale_enums import *


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the Batch service.

    :param code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable for display in a user
     interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~azure.mgmt.rdbms.postgresqlhsc.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["CloudErrorBody"]] = None,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class FirewallRule(Resource):
    """Represents a server group firewall rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~azure.mgmt.rdbms.postgresqlhsc.models.SystemData
    :param start_ip_address: Required. The start IP address of the server group firewall rule. Must
     be IPv4 format.
    :type start_ip_address: str
    :param end_ip_address: Required. The end IP address of the server group firewall rule. Must be
     IPv4 format.
    :type end_ip_address: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'start_ip_address': {'required': True, 'pattern': r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'},
        'end_ip_address': {'required': True, 'pattern': r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'start_ip_address': {'key': 'properties.startIpAddress', 'type': 'str'},
        'end_ip_address': {'key': 'properties.endIpAddress', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_ip_address: str,
        end_ip_address: str,
        **kwargs
    ):
        super(FirewallRule, self).__init__(**kwargs)
        self.system_data = None
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address


class FirewallRuleListResult(msrest.serialization.Model):
    """A list of firewall rules.

    :param value: The list of firewall rules in a server group.
    :type value: list[~azure.mgmt.rdbms.postgresqlhsc.models.FirewallRule]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FirewallRule]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["FirewallRule"]] = None,
        **kwargs
    ):
        super(FirewallRuleListResult, self).__init__(**kwargs)
        self.value = value


class MaintenanceWindow(msrest.serialization.Model):
    """Maintenance window of a server group.

    :param custom_window: indicates whether custom window is enabled or disabled.
    :type custom_window: str
    :param start_hour: start hour for maintenance window.
    :type start_hour: int
    :param start_minute: start minute for maintenance window.
    :type start_minute: int
    :param day_of_week: day of week for maintenance window.
    :type day_of_week: int
    """

    _attribute_map = {
        'custom_window': {'key': 'customWindow', 'type': 'str'},
        'start_hour': {'key': 'startHour', 'type': 'int'},
        'start_minute': {'key': 'startMinute', 'type': 'int'},
        'day_of_week': {'key': 'dayOfWeek', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        custom_window: Optional[str] = None,
        start_hour: Optional[int] = None,
        start_minute: Optional[int] = None,
        day_of_week: Optional[int] = None,
        **kwargs
    ):
        super(MaintenanceWindow, self).__init__(**kwargs)
        self.custom_window = custom_window
        self.start_hour = start_hour
        self.start_minute = start_minute
        self.day_of_week = day_of_week


class NameAvailability(msrest.serialization.Model):
    """Represents a resource name availability.

    :param message: Error Message.
    :type message: str
    :param name_available: Indicates whether the resource name is available.
    :type name_available: bool
    :param name: name of the PostgreSQL server.
    :type name: str
    :param type: type of the server.
    :type type: str
    """

    _attribute_map = {
        'message': {'key': 'message', 'type': 'str'},
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        message: Optional[str] = None,
        name_available: Optional[bool] = None,
        name: Optional[str] = None,
        type: Optional[str] = None,
        **kwargs
    ):
        super(NameAvailability, self).__init__(**kwargs)
        self.message = message
        self.name_available = name_available
        self.name = name
        self.type = type


class NameAvailabilityRequest(msrest.serialization.Model):
    """Request from client to check resource name availability.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Resource name to verify.
    :type name: str
    :ivar type: Required. Resource type used for verification. Default value:
     "Microsoft.DBforPostgreSQL/serverGroupsv2".
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "Microsoft.DBforPostgreSQL/serverGroupsv2"

    def __init__(
        self,
        *,
        name: str,
        **kwargs
    ):
        super(NameAvailabilityRequest, self).__init__(**kwargs)
        self.name = name


class Operation(msrest.serialization.Model):
    """REST API operation definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation being performed on this particular object.
    :vartype name: str
    :ivar display: The localized display information for this particular operation or action.
    :vartype display: ~azure.mgmt.rdbms.postgresqlhsc.models.OperationDisplay
    :param is_data_action: Indicates whether the operation is a data action.
    :type is_data_action: bool
    :ivar origin: The intended executor of the operation. Possible values include: "NotSpecified",
     "user", "system".
    :vartype origin: str or ~azure.mgmt.rdbms.postgresqlhsc.models.OperationOrigin
    :ivar properties: Additional descriptions for the operation.
    :vartype properties: dict[str, object]
    """

    _validation = {
        'name': {'readonly': True},
        'display': {'readonly': True},
        'origin': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'origin': {'key': 'origin', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        is_data_action: Optional[bool] = None,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = None
        self.is_data_action = is_data_action
        self.origin = None
        self.properties = None


class OperationDisplay(msrest.serialization.Model):
    """Display metadata associated with the operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: Operation resource provider name.
    :vartype provider: str
    :ivar resource: Resource on which the operation is performed.
    :vartype resource: str
    :ivar operation: Localized friendly name for the operation.
    :vartype operation: str
    :ivar description: Operation description.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """A list of resource provider operations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Collection of available operation details.
    :type value: list[~azure.mgmt.rdbms.postgresqlhsc.models.Operation]
    :ivar next_link: URL client should use to fetch the next page (per server side paging).
     It's null for now, added for future use.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Operation"]] = None,
        **kwargs
    ):
        super(OperationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class Role(Resource):
    """Represents a server group role.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~azure.mgmt.rdbms.postgresqlhsc.models.SystemData
    :param password: The password of the server group role.
    :type password: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'password': {'key': 'properties.password', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        password: Optional[str] = None,
        **kwargs
    ):
        super(Role, self).__init__(**kwargs)
        self.system_data = None
        self.password = password


class RoleListResult(msrest.serialization.Model):
    """A list of roles.

    :param value: The list of roles in a server group.
    :type value: list[~azure.mgmt.rdbms.postgresqlhsc.models.Role]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Role]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Role"]] = None,
        **kwargs
    ):
        super(RoleListResult, self).__init__(**kwargs)
        self.value = value


class ServerConfiguration(Resource):
    """Represents a configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~azure.mgmt.rdbms.postgresqlhsc.models.SystemData
    :param value: Value of the configuration.
    :type value: str
    :ivar source: Source of the configuration.
    :vartype source: str
    :ivar description: Description of the configuration.
    :vartype description: str
    :ivar default_value: Default value of the configuration.
    :vartype default_value: str
    :ivar data_type: Data type of the configuration. Possible values include: "Boolean", "Numeric",
     "Integer", "Enumeration".
    :vartype data_type: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ConfigurationDataType
    :ivar allowed_values: Allowed values of the configuration.
    :vartype allowed_values: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'source': {'readonly': True},
        'description': {'readonly': True},
        'default_value': {'readonly': True},
        'data_type': {'readonly': True},
        'allowed_values': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'value': {'key': 'properties.value', 'type': 'str'},
        'source': {'key': 'properties.source', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'default_value': {'key': 'properties.defaultValue', 'type': 'str'},
        'data_type': {'key': 'properties.dataType', 'type': 'str'},
        'allowed_values': {'key': 'properties.allowedValues', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[str] = None,
        **kwargs
    ):
        super(ServerConfiguration, self).__init__(**kwargs)
        self.system_data = None
        self.value = value
        self.source = None
        self.description = None
        self.default_value = None
        self.data_type = None
        self.allowed_values = None


class ServerConfigurationListResult(msrest.serialization.Model):
    """A list of server configurations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: The list of server configurations.
    :type value: list[~azure.mgmt.rdbms.postgresqlhsc.models.ServerConfiguration]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServerConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ServerConfiguration"]] = None,
        **kwargs
    ):
        super(ServerConfigurationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class ServerGroup(TrackedResource):
    """Represents a server group for create.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~azure.mgmt.rdbms.postgresqlhsc.models.SystemData
    :param create_mode: The mode to create a new server group. Possible values include: "Default",
     "PointInTimeRestore".
    :type create_mode: str or ~azure.mgmt.rdbms.postgresqlhsc.models.CreateMode
    :param administrator_login: The administrator's login name of servers in server group. Can only
     be specified when the server is being created (and is required for creation).
    :type administrator_login: str
    :param administrator_login_password: The password of the administrator login.
    :type administrator_login_password: str
    :param backup_retention_days: The backup retention days for server group.
    :type backup_retention_days: int
    :param postgresql_version: The PostgreSQL version of server group. Possible values include:
     "11", "12".
    :type postgresql_version: str or ~azure.mgmt.rdbms.postgresqlhsc.models.PostgreSQLVersion
    :param citus_version: The Citus version of server group. Possible values include: "8.3", "9.0",
     "9.1", "9.2", "9.3", "9.4", "9.5".
    :type citus_version: str or ~azure.mgmt.rdbms.postgresqlhsc.models.CitusVersion
    :param enable_mx: If Citus MX is enabled or not for the server group.
    :type enable_mx: bool
    :param enable_zfs: If ZFS compression is enabled or not for the server group.
    :type enable_zfs: bool
    :param enable_shards_on_coordinator: If shards on coordinator is enabled or not for the server
     group.
    :type enable_shards_on_coordinator: bool
    :ivar state: A state of a server group that is visible to user. Possible values include:
     "Ready", "Dropping", "Disabled", "Starting", "Stopping", "Stopped", "Updating", "Provisioning".
    :vartype state: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerState
    :ivar earliest_restore_time: The earliest restore point time (ISO8601 format) for server group.
    :vartype earliest_restore_time: ~datetime.datetime
    :ivar resource_provider_type: The resource provider type of server group. Possible values
     include: "Meru", "Marlin".
    :vartype resource_provider_type: str or
     ~azure.mgmt.rdbms.postgresqlhsc.models.ResourceProviderType
    :param server_role_groups: The list of server role groups.
    :type server_role_groups: list[~azure.mgmt.rdbms.postgresqlhsc.models.ServerRoleGroup]
    :param maintenance_window: Maintenance window of a server group.
    :type maintenance_window: ~azure.mgmt.rdbms.postgresqlhsc.models.MaintenanceWindow
    :param availability_zone: Availability Zone information of the server group.
    :type availability_zone: str
    :param standby_availability_zone: Standby Availability Zone information of the server group.
    :type standby_availability_zone: str
    :param delegated_subnet_arguments: The delegated subnet arguments for a server group.
    :type delegated_subnet_arguments:
     ~azure.mgmt.rdbms.postgresqlhsc.models.ServerGroupPropertiesDelegatedSubnetArguments
    :param source_subscription_id: The source subscription id to restore from. It's required when
     'createMode' is 'PointInTimeRestore'.
    :type source_subscription_id: str
    :param source_resource_group_name: The source resource group name to restore from. It's
     required when 'createMode' is 'PointInTimeRestore'.
    :type source_resource_group_name: str
    :param source_server_group_name: The source server group name to restore from. It's required
     when 'createMode' is 'PointInTimeRestore'.
    :type source_server_group_name: str
    :param source_location: The source server group location to restore from. It's required when
     'createMode' is 'PointInTimeRestore'.
    :type source_location: str
    :param point_in_time_utc: Restore point creation time (ISO8601 format), specifying the time to
     restore from. It's required when 'createMode' is 'PointInTimeRestore'.
    :type point_in_time_utc: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'state': {'readonly': True},
        'earliest_restore_time': {'readonly': True},
        'resource_provider_type': {'readonly': True},
        'server_role_groups': {'max_items': 2, 'min_items': 1, 'unique': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'create_mode': {'key': 'properties.createMode', 'type': 'str'},
        'administrator_login': {'key': 'properties.administratorLogin', 'type': 'str'},
        'administrator_login_password': {'key': 'properties.administratorLoginPassword', 'type': 'str'},
        'backup_retention_days': {'key': 'properties.backupRetentionDays', 'type': 'int'},
        'postgresql_version': {'key': 'properties.postgresqlVersion', 'type': 'str'},
        'citus_version': {'key': 'properties.citusVersion', 'type': 'str'},
        'enable_mx': {'key': 'properties.enableMx', 'type': 'bool'},
        'enable_zfs': {'key': 'properties.enableZfs', 'type': 'bool'},
        'enable_shards_on_coordinator': {'key': 'properties.enableShardsOnCoordinator', 'type': 'bool'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'earliest_restore_time': {'key': 'properties.earliestRestoreTime', 'type': 'iso-8601'},
        'resource_provider_type': {'key': 'properties.resourceProviderType', 'type': 'str'},
        'server_role_groups': {'key': 'properties.serverRoleGroups', 'type': '[ServerRoleGroup]'},
        'maintenance_window': {'key': 'properties.maintenanceWindow', 'type': 'MaintenanceWindow'},
        'availability_zone': {'key': 'properties.availabilityZone', 'type': 'str'},
        'standby_availability_zone': {'key': 'properties.standbyAvailabilityZone', 'type': 'str'},
        'delegated_subnet_arguments': {'key': 'properties.delegatedSubnetArguments', 'type': 'ServerGroupPropertiesDelegatedSubnetArguments'},
        'source_subscription_id': {'key': 'properties.sourceSubscriptionId', 'type': 'str'},
        'source_resource_group_name': {'key': 'properties.sourceResourceGroupName', 'type': 'str'},
        'source_server_group_name': {'key': 'properties.sourceServerGroupName', 'type': 'str'},
        'source_location': {'key': 'properties.sourceLocation', 'type': 'str'},
        'point_in_time_utc': {'key': 'properties.pointInTimeUTC', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        create_mode: Optional[Union[str, "CreateMode"]] = None,
        administrator_login: Optional[str] = None,
        administrator_login_password: Optional[str] = None,
        backup_retention_days: Optional[int] = None,
        postgresql_version: Optional[Union[str, "PostgreSQLVersion"]] = None,
        citus_version: Optional[Union[str, "CitusVersion"]] = None,
        enable_mx: Optional[bool] = None,
        enable_zfs: Optional[bool] = None,
        enable_shards_on_coordinator: Optional[bool] = None,
        server_role_groups: Optional[List["ServerRoleGroup"]] = None,
        maintenance_window: Optional["MaintenanceWindow"] = None,
        availability_zone: Optional[str] = None,
        standby_availability_zone: Optional[str] = None,
        delegated_subnet_arguments: Optional["ServerGroupPropertiesDelegatedSubnetArguments"] = None,
        source_subscription_id: Optional[str] = None,
        source_resource_group_name: Optional[str] = None,
        source_server_group_name: Optional[str] = None,
        source_location: Optional[str] = None,
        point_in_time_utc: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(ServerGroup, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.create_mode = create_mode
        self.administrator_login = administrator_login
        self.administrator_login_password = administrator_login_password
        self.backup_retention_days = backup_retention_days
        self.postgresql_version = postgresql_version
        self.citus_version = citus_version
        self.enable_mx = enable_mx
        self.enable_zfs = enable_zfs
        self.enable_shards_on_coordinator = enable_shards_on_coordinator
        self.state = None
        self.earliest_restore_time = None
        self.resource_provider_type = None
        self.server_role_groups = server_role_groups
        self.maintenance_window = maintenance_window
        self.availability_zone = availability_zone
        self.standby_availability_zone = standby_availability_zone
        self.delegated_subnet_arguments = delegated_subnet_arguments
        self.source_subscription_id = source_subscription_id
        self.source_resource_group_name = source_resource_group_name
        self.source_server_group_name = source_server_group_name
        self.source_location = source_location
        self.point_in_time_utc = point_in_time_utc


class ServerGroupConfiguration(Resource):
    """Represents the configuration list of server role groups in a server group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~azure.mgmt.rdbms.postgresqlhsc.models.SystemData
    :ivar description: Description of the configuration.
    :vartype description: str
    :ivar data_type: Data type of the configuration. Possible values include: "Boolean", "Numeric",
     "Integer", "Enumeration".
    :vartype data_type: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ConfigurationDataType
    :ivar allowed_values: Allowed values of the configuration.
    :vartype allowed_values: str
    :param server_role_group_configurations: The list of server role group configuration values.
    :type server_role_group_configurations:
     list[~azure.mgmt.rdbms.postgresqlhsc.models.ServerRoleGroupConfiguration]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'description': {'readonly': True},
        'data_type': {'readonly': True},
        'allowed_values': {'readonly': True},
        'server_role_group_configurations': {'unique': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'data_type': {'key': 'properties.dataType', 'type': 'str'},
        'allowed_values': {'key': 'properties.allowedValues', 'type': 'str'},
        'server_role_group_configurations': {'key': 'properties.serverRoleGroupConfigurations', 'type': '[ServerRoleGroupConfiguration]'},
    }

    def __init__(
        self,
        *,
        server_role_group_configurations: Optional[List["ServerRoleGroupConfiguration"]] = None,
        **kwargs
    ):
        super(ServerGroupConfiguration, self).__init__(**kwargs)
        self.system_data = None
        self.description = None
        self.data_type = None
        self.allowed_values = None
        self.server_role_group_configurations = server_role_group_configurations


class ServerGroupConfigurationListResult(msrest.serialization.Model):
    """A list of server group configurations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: The list of server group configurations.
    :type value: list[~azure.mgmt.rdbms.postgresqlhsc.models.ServerGroupConfiguration]
    :ivar next_link: Link to retrieve next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServerGroupConfiguration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ServerGroupConfiguration"]] = None,
        **kwargs
    ):
        super(ServerGroupConfigurationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class ServerGroupForUpdate(msrest.serialization.Model):
    """Represents a server group for update.

    :param location: The location the resource resides in.
    :type location: str
    :param tags: A set of tags. Application-specific metadata in the form of key-value pairs.
    :type tags: dict[str, str]
    :param administrator_login_password: The password of the administrator login.
    :type administrator_login_password: str
    :param backup_retention_days: The backup retention days for server group.
    :type backup_retention_days: int
    :param postgresql_version: The PostgreSQL version of server group. Possible values include:
     "11", "12".
    :type postgresql_version: str or ~azure.mgmt.rdbms.postgresqlhsc.models.PostgreSQLVersion
    :param citus_version: The Citus version of server group. Possible values include: "8.3", "9.0",
     "9.1", "9.2", "9.3", "9.4", "9.5".
    :type citus_version: str or ~azure.mgmt.rdbms.postgresqlhsc.models.CitusVersion
    :param enable_shards_on_coordinator: If shards on coordinator is enabled or not for the server
     group.
    :type enable_shards_on_coordinator: bool
    :param server_role_groups: The list of server role groups.
    :type server_role_groups: list[~azure.mgmt.rdbms.postgresqlhsc.models.ServerRoleGroup]
    :param maintenance_window: Maintenance window of a server group.
    :type maintenance_window: ~azure.mgmt.rdbms.postgresqlhsc.models.MaintenanceWindow
    :param availability_zone: Availability Zone information of the server group.
    :type availability_zone: str
    :param standby_availability_zone: Standby Availability Zone information of the server group.
    :type standby_availability_zone: str
    """

    _validation = {
        'server_role_groups': {'max_items': 2, 'min_items': 1, 'unique': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'administrator_login_password': {'key': 'properties.administratorLoginPassword', 'type': 'str'},
        'backup_retention_days': {'key': 'properties.backupRetentionDays', 'type': 'int'},
        'postgresql_version': {'key': 'properties.postgresqlVersion', 'type': 'str'},
        'citus_version': {'key': 'properties.citusVersion', 'type': 'str'},
        'enable_shards_on_coordinator': {'key': 'properties.enableShardsOnCoordinator', 'type': 'bool'},
        'server_role_groups': {'key': 'properties.serverRoleGroups', 'type': '[ServerRoleGroup]'},
        'maintenance_window': {'key': 'properties.maintenanceWindow', 'type': 'MaintenanceWindow'},
        'availability_zone': {'key': 'properties.availabilityZone', 'type': 'str'},
        'standby_availability_zone': {'key': 'properties.standbyAvailabilityZone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        administrator_login_password: Optional[str] = None,
        backup_retention_days: Optional[int] = None,
        postgresql_version: Optional[Union[str, "PostgreSQLVersion"]] = None,
        citus_version: Optional[Union[str, "CitusVersion"]] = None,
        enable_shards_on_coordinator: Optional[bool] = None,
        server_role_groups: Optional[List["ServerRoleGroup"]] = None,
        maintenance_window: Optional["MaintenanceWindow"] = None,
        availability_zone: Optional[str] = None,
        standby_availability_zone: Optional[str] = None,
        **kwargs
    ):
        super(ServerGroupForUpdate, self).__init__(**kwargs)
        self.location = location
        self.tags = tags
        self.administrator_login_password = administrator_login_password
        self.backup_retention_days = backup_retention_days
        self.postgresql_version = postgresql_version
        self.citus_version = citus_version
        self.enable_shards_on_coordinator = enable_shards_on_coordinator
        self.server_role_groups = server_role_groups
        self.maintenance_window = maintenance_window
        self.availability_zone = availability_zone
        self.standby_availability_zone = standby_availability_zone


class ServerGroupListResult(msrest.serialization.Model):
    """A list of server groups.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: The list of server groups.
    :type value: list[~azure.mgmt.rdbms.postgresqlhsc.models.ServerGroup]
    :ivar next_link: The link used to get the next page of operations.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServerGroup]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ServerGroup"]] = None,
        **kwargs
    ):
        super(ServerGroupListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class ServerGroupPropertiesDelegatedSubnetArguments(msrest.serialization.Model):
    """The delegated subnet arguments for a server group.

    :param subnet_arm_resource_id: delegated subnet arm resource id.
    :type subnet_arm_resource_id: str
    """

    _attribute_map = {
        'subnet_arm_resource_id': {'key': 'subnetArmResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        subnet_arm_resource_id: Optional[str] = None,
        **kwargs
    ):
        super(ServerGroupPropertiesDelegatedSubnetArguments, self).__init__(**kwargs)
        self.subnet_arm_resource_id = subnet_arm_resource_id


class ServerGroupServer(Resource):
    """Represents a server in a server group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~azure.mgmt.rdbms.postgresqlhsc.models.SystemData
    :param server_edition: The edition of a server (default: GeneralPurpose). Possible values
     include: "GeneralPurpose", "MemoryOptimized".
    :type server_edition: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerEdition
    :param storage_quota_in_mb: The storage of a server in MB (max: 2097152 = 2TiB).
    :type storage_quota_in_mb: long
    :param v_cores: The vCores count of a server (max: 64).
    :type v_cores: long
    :param enable_ha: If high availability is enabled or not for the server.
    :type enable_ha: bool
    :ivar enable_public_ip: If public IP is requested or not for a server.
    :vartype enable_public_ip: bool
    :ivar fully_qualified_domain_name: The fully qualified domain name of a server.
    :vartype fully_qualified_domain_name: str
    :param role: The role of server in the server group. Possible values include: "Coordinator",
     "Worker".
    :type role: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerRole
    :ivar state: A state of a server that is visible to user. Possible values include: "Ready",
     "Dropping", "Disabled", "Starting", "Stopping", "Stopped", "Updating", "Provisioning".
    :vartype state: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerState
    :ivar ha_state: A state of a server group that is visible to user for HA feature. Possible
     values include: "NotEnabled", "CreatingStandby", "ReplicatingData", "FailingOver", "Healthy",
     "RemovingStandby", "NotSync".
    :vartype ha_state: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerHaState
    :param administrator_login: The administrator's login name of a servers in server group.
    :type administrator_login: str
    :param postgresql_version: The PostgreSQL version of server. Possible values include: "11",
     "12".
    :type postgresql_version: str or ~azure.mgmt.rdbms.postgresqlhsc.models.PostgreSQLVersion
    :param citus_version: The Citus version of server. Possible values include: "8.3", "9.0",
     "9.1", "9.2", "9.3", "9.4", "9.5".
    :type citus_version: str or ~azure.mgmt.rdbms.postgresqlhsc.models.CitusVersion
    :param availability_zone: Availability Zone information of the server group.
    :type availability_zone: str
    :param standby_availability_zone: Standby Availability Zone information of the server group.
    :type standby_availability_zone: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'enable_public_ip': {'readonly': True},
        'fully_qualified_domain_name': {'readonly': True},
        'state': {'readonly': True},
        'ha_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'server_edition': {'key': 'properties.serverEdition', 'type': 'str'},
        'storage_quota_in_mb': {'key': 'properties.storageQuotaInMb', 'type': 'long'},
        'v_cores': {'key': 'properties.vCores', 'type': 'long'},
        'enable_ha': {'key': 'properties.enableHa', 'type': 'bool'},
        'enable_public_ip': {'key': 'properties.enablePublicIp', 'type': 'bool'},
        'fully_qualified_domain_name': {'key': 'properties.fullyQualifiedDomainName', 'type': 'str'},
        'role': {'key': 'properties.role', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'ha_state': {'key': 'properties.haState', 'type': 'str'},
        'administrator_login': {'key': 'properties.administratorLogin', 'type': 'str'},
        'postgresql_version': {'key': 'properties.postgresqlVersion', 'type': 'str'},
        'citus_version': {'key': 'properties.citusVersion', 'type': 'str'},
        'availability_zone': {'key': 'properties.availabilityZone', 'type': 'str'},
        'standby_availability_zone': {'key': 'properties.standbyAvailabilityZone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        server_edition: Optional[Union[str, "ServerEdition"]] = None,
        storage_quota_in_mb: Optional[int] = None,
        v_cores: Optional[int] = None,
        enable_ha: Optional[bool] = None,
        role: Optional[Union[str, "ServerRole"]] = None,
        administrator_login: Optional[str] = None,
        postgresql_version: Optional[Union[str, "PostgreSQLVersion"]] = None,
        citus_version: Optional[Union[str, "CitusVersion"]] = None,
        availability_zone: Optional[str] = None,
        standby_availability_zone: Optional[str] = None,
        **kwargs
    ):
        super(ServerGroupServer, self).__init__(**kwargs)
        self.system_data = None
        self.server_edition = server_edition
        self.storage_quota_in_mb = storage_quota_in_mb
        self.v_cores = v_cores
        self.enable_ha = enable_ha
        self.enable_public_ip = None
        self.fully_qualified_domain_name = None
        self.role = role
        self.state = None
        self.ha_state = None
        self.administrator_login = administrator_login
        self.postgresql_version = postgresql_version
        self.citus_version = citus_version
        self.availability_zone = availability_zone
        self.standby_availability_zone = standby_availability_zone


class ServerGroupServerListResult(msrest.serialization.Model):
    """A list of servers in a server group.

    :param value: The list of servers in a server group.
    :type value: list[~azure.mgmt.rdbms.postgresqlhsc.models.ServerGroupServer]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ServerGroupServer]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ServerGroupServer"]] = None,
        **kwargs
    ):
        super(ServerGroupServerListResult, self).__init__(**kwargs)
        self.value = value


class ServerProperties(msrest.serialization.Model):
    """The properties of a server.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param server_edition: The edition of a server (default: GeneralPurpose). Possible values
     include: "GeneralPurpose", "MemoryOptimized".
    :type server_edition: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerEdition
    :param storage_quota_in_mb: The storage of a server in MB (max: 2097152 = 2TiB).
    :type storage_quota_in_mb: long
    :param v_cores: The vCores count of a server (max: 64).
    :type v_cores: long
    :param enable_ha: If high availability is enabled or not for the server.
    :type enable_ha: bool
    :ivar enable_public_ip: If public IP is requested or not for a server.
    :vartype enable_public_ip: bool
    """

    _validation = {
        'enable_public_ip': {'readonly': True},
    }

    _attribute_map = {
        'server_edition': {'key': 'serverEdition', 'type': 'str'},
        'storage_quota_in_mb': {'key': 'storageQuotaInMb', 'type': 'long'},
        'v_cores': {'key': 'vCores', 'type': 'long'},
        'enable_ha': {'key': 'enableHa', 'type': 'bool'},
        'enable_public_ip': {'key': 'enablePublicIp', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        server_edition: Optional[Union[str, "ServerEdition"]] = None,
        storage_quota_in_mb: Optional[int] = None,
        v_cores: Optional[int] = None,
        enable_ha: Optional[bool] = None,
        **kwargs
    ):
        super(ServerProperties, self).__init__(**kwargs)
        self.server_edition = server_edition
        self.storage_quota_in_mb = storage_quota_in_mb
        self.v_cores = v_cores
        self.enable_ha = enable_ha
        self.enable_public_ip = None


class ServerGroupServerProperties(ServerProperties):
    """The properties of a server in server group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param server_edition: The edition of a server (default: GeneralPurpose). Possible values
     include: "GeneralPurpose", "MemoryOptimized".
    :type server_edition: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerEdition
    :param storage_quota_in_mb: The storage of a server in MB (max: 2097152 = 2TiB).
    :type storage_quota_in_mb: long
    :param v_cores: The vCores count of a server (max: 64).
    :type v_cores: long
    :param enable_ha: If high availability is enabled or not for the server.
    :type enable_ha: bool
    :ivar enable_public_ip: If public IP is requested or not for a server.
    :vartype enable_public_ip: bool
    :ivar fully_qualified_domain_name: The fully qualified domain name of a server.
    :vartype fully_qualified_domain_name: str
    :param role: The role of server in the server group. Possible values include: "Coordinator",
     "Worker".
    :type role: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerRole
    :ivar state: A state of a server that is visible to user. Possible values include: "Ready",
     "Dropping", "Disabled", "Starting", "Stopping", "Stopped", "Updating", "Provisioning".
    :vartype state: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerState
    :ivar ha_state: A state of a server group that is visible to user for HA feature. Possible
     values include: "NotEnabled", "CreatingStandby", "ReplicatingData", "FailingOver", "Healthy",
     "RemovingStandby", "NotSync".
    :vartype ha_state: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerHaState
    :param administrator_login: The administrator's login name of a servers in server group.
    :type administrator_login: str
    :param postgresql_version: The PostgreSQL version of server. Possible values include: "11",
     "12".
    :type postgresql_version: str or ~azure.mgmt.rdbms.postgresqlhsc.models.PostgreSQLVersion
    :param citus_version: The Citus version of server. Possible values include: "8.3", "9.0",
     "9.1", "9.2", "9.3", "9.4", "9.5".
    :type citus_version: str or ~azure.mgmt.rdbms.postgresqlhsc.models.CitusVersion
    :param availability_zone: Availability Zone information of the server group.
    :type availability_zone: str
    :param standby_availability_zone: Standby Availability Zone information of the server group.
    :type standby_availability_zone: str
    """

    _validation = {
        'enable_public_ip': {'readonly': True},
        'fully_qualified_domain_name': {'readonly': True},
        'state': {'readonly': True},
        'ha_state': {'readonly': True},
    }

    _attribute_map = {
        'server_edition': {'key': 'serverEdition', 'type': 'str'},
        'storage_quota_in_mb': {'key': 'storageQuotaInMb', 'type': 'long'},
        'v_cores': {'key': 'vCores', 'type': 'long'},
        'enable_ha': {'key': 'enableHa', 'type': 'bool'},
        'enable_public_ip': {'key': 'enablePublicIp', 'type': 'bool'},
        'fully_qualified_domain_name': {'key': 'fullyQualifiedDomainName', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'ha_state': {'key': 'haState', 'type': 'str'},
        'administrator_login': {'key': 'administratorLogin', 'type': 'str'},
        'postgresql_version': {'key': 'postgresqlVersion', 'type': 'str'},
        'citus_version': {'key': 'citusVersion', 'type': 'str'},
        'availability_zone': {'key': 'availabilityZone', 'type': 'str'},
        'standby_availability_zone': {'key': 'standbyAvailabilityZone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        server_edition: Optional[Union[str, "ServerEdition"]] = None,
        storage_quota_in_mb: Optional[int] = None,
        v_cores: Optional[int] = None,
        enable_ha: Optional[bool] = None,
        role: Optional[Union[str, "ServerRole"]] = None,
        administrator_login: Optional[str] = None,
        postgresql_version: Optional[Union[str, "PostgreSQLVersion"]] = None,
        citus_version: Optional[Union[str, "CitusVersion"]] = None,
        availability_zone: Optional[str] = None,
        standby_availability_zone: Optional[str] = None,
        **kwargs
    ):
        super(ServerGroupServerProperties, self).__init__(server_edition=server_edition, storage_quota_in_mb=storage_quota_in_mb, v_cores=v_cores, enable_ha=enable_ha, **kwargs)
        self.fully_qualified_domain_name = None
        self.role = role
        self.state = None
        self.ha_state = None
        self.administrator_login = administrator_login
        self.postgresql_version = postgresql_version
        self.citus_version = citus_version
        self.availability_zone = availability_zone
        self.standby_availability_zone = standby_availability_zone


class ServerNameItem(msrest.serialization.Model):
    """The name object for a server.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param name: The name of a server.
    :type name: str
    :ivar fully_qualified_domain_name: The fully qualified domain name of a server.
    :vartype fully_qualified_domain_name: str
    """

    _validation = {
        'fully_qualified_domain_name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'fully_qualified_domain_name': {'key': 'fullyQualifiedDomainName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(ServerNameItem, self).__init__(**kwargs)
        self.name = name
        self.fully_qualified_domain_name = None


class ServerRoleGroup(ServerProperties):
    """Represents a server role group.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param server_edition: The edition of a server (default: GeneralPurpose). Possible values
     include: "GeneralPurpose", "MemoryOptimized".
    :type server_edition: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerEdition
    :param storage_quota_in_mb: The storage of a server in MB (max: 2097152 = 2TiB).
    :type storage_quota_in_mb: long
    :param v_cores: The vCores count of a server (max: 64).
    :type v_cores: long
    :param enable_ha: If high availability is enabled or not for the server.
    :type enable_ha: bool
    :ivar enable_public_ip: If public IP is requested or not for a server.
    :vartype enable_public_ip: bool
    :param name: The name of the server role group.
    :type name: str
    :param role: The role of servers in the server role group. Possible values include:
     "Coordinator", "Worker".
    :type role: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerRole
    :param server_count: The number of servers in the server role group.
    :type server_count: int
    :ivar server_names: The list of server names in the server role group.
    :vartype server_names: list[~azure.mgmt.rdbms.postgresqlhsc.models.ServerNameItem]
    """

    _validation = {
        'enable_public_ip': {'readonly': True},
        'server_names': {'readonly': True, 'unique': True},
    }

    _attribute_map = {
        'server_edition': {'key': 'serverEdition', 'type': 'str'},
        'storage_quota_in_mb': {'key': 'storageQuotaInMb', 'type': 'long'},
        'v_cores': {'key': 'vCores', 'type': 'long'},
        'enable_ha': {'key': 'enableHa', 'type': 'bool'},
        'enable_public_ip': {'key': 'enablePublicIp', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'server_count': {'key': 'serverCount', 'type': 'int'},
        'server_names': {'key': 'serverNames', 'type': '[ServerNameItem]'},
    }

    def __init__(
        self,
        *,
        server_edition: Optional[Union[str, "ServerEdition"]] = None,
        storage_quota_in_mb: Optional[int] = None,
        v_cores: Optional[int] = None,
        enable_ha: Optional[bool] = None,
        name: Optional[str] = None,
        role: Optional[Union[str, "ServerRole"]] = None,
        server_count: Optional[int] = None,
        **kwargs
    ):
        super(ServerRoleGroup, self).__init__(server_edition=server_edition, storage_quota_in_mb=storage_quota_in_mb, v_cores=v_cores, enable_ha=enable_ha, **kwargs)
        self.name = name
        self.role = role
        self.server_count = server_count
        self.server_names = None


class ServerRoleGroupConfiguration(msrest.serialization.Model):
    """Represents server role group configuration value.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param role: Required. The role of servers in the server role group. Possible values include:
     "Coordinator", "Worker".
    :type role: str or ~azure.mgmt.rdbms.postgresqlhsc.models.ServerRole
    :param value: Required. Value of the configuration.
    :type value: str
    :ivar default_value: Default value of the configuration.
    :vartype default_value: str
    :ivar source: Source of the configuration.
    :vartype source: str
    """

    _validation = {
        'role': {'required': True},
        'value': {'required': True},
        'default_value': {'readonly': True},
        'source': {'readonly': True},
    }

    _attribute_map = {
        'role': {'key': 'role', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'default_value': {'key': 'defaultValue', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        role: Union[str, "ServerRole"],
        value: str,
        **kwargs
    ):
        super(ServerRoleGroupConfiguration, self).__init__(**kwargs)
        self.role = role
        self.value = value
        self.default_value = None
        self.source = None


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~azure.mgmt.rdbms.postgresqlhsc.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or ~azure.mgmt.rdbms.postgresqlhsc.models.CreatedByType
    :param last_modified_at: The type of identity that last modified the resource.
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at
