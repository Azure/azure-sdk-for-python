# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class CitusVersion(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The Citus version.
    """

    EIGHT3 = "8.3"
    NINE0 = "9.0"
    NINE1 = "9.1"
    NINE2 = "9.2"
    NINE3 = "9.3"
    NINE4 = "9.4"
    NINE5 = "9.5"

class ConfigurationDataType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Data type of the configuration.
    """

    BOOLEAN = "Boolean"
    NUMERIC = "Numeric"
    INTEGER = "Integer"
    ENUMERATION = "Enumeration"

class CreatedByType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class CreateMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The mode to create a new server group.
    """

    DEFAULT = "Default"
    POINT_IN_TIME_RESTORE = "PointInTimeRestore"

class OperationOrigin(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The intended executor of the operation.
    """

    NOT_SPECIFIED = "NotSpecified"
    USER = "user"
    SYSTEM = "system"

class PostgreSQLVersion(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The PostgreSQL version.
    """

    ELEVEN = "11"
    TWELVE = "12"

class ResourceProviderType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The resource provider type of server group.
    """

    MERU = "Meru"
    MARLIN = "Marlin"

class ServerEdition(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The edition of a server (default: GeneralPurpose).
    """

    GENERAL_PURPOSE = "GeneralPurpose"
    MEMORY_OPTIMIZED = "MemoryOptimized"

class ServerHaState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A state of a server role group/server that is visible to user for HA feature.
    """

    NOT_ENABLED = "NotEnabled"
    CREATING_STANDBY = "CreatingStandby"
    REPLICATING_DATA = "ReplicatingData"
    FAILING_OVER = "FailingOver"
    HEALTHY = "Healthy"
    REMOVING_STANDBY = "RemovingStandby"
    NOT_SYNC = "NotSync"

class ServerRole(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The role of a server.
    """

    COORDINATOR = "Coordinator"
    WORKER = "Worker"

class ServerState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A state of a server group/server that is visible to user.
    """

    READY = "Ready"
    DROPPING = "Dropping"
    DISABLED = "Disabled"
    STARTING = "Starting"
    STOPPING = "Stopping"
    STOPPED = "Stopped"
    UPDATING = "Updating"
    PROVISIONING = "Provisioning"
