# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AwsCloudProfile(_model_base.Model):
    """cloud profile for AWS.


    :ivar account_id: Account id for the AWS account. Required.
    :vartype account_id: str
    :ivar excluded_accounts: List of AWS accounts which need to be excluded.
    :vartype excluded_accounts: list[str]
    :ivar is_organizational_account: Boolean value that indicates whether the account is
     organizational or not. True represents organization account, whereas false represents a single
     account.
    :vartype is_organizational_account: bool
    """

    account_id: str = rest_field(name="accountId", visibility=["read", "create"])
    """Account id for the AWS account. Required."""
    excluded_accounts: Optional[List[str]] = rest_field(name="excludedAccounts")
    """List of AWS accounts which need to be excluded."""
    is_organizational_account: Optional[bool] = rest_field(
        name="isOrganizationalAccount", visibility=["read", "create"]
    )
    """Boolean value that indicates whether the account is organizational or not. True represents
     organization account, whereas false represents a single account."""

    @overload
    def __init__(
        self,
        *,
        account_id: str,
        excluded_accounts: Optional[List[str]] = None,
        is_organizational_account: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.hybridconnectivity.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.hybridconnectivity.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.hybridconnectivity.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridconnectivity.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ExtensionResource(Resource):
    """The base extension resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridconnectivity.models.SystemData
    """


class GenerateAwsTemplateRequest(_model_base.Model):
    """ConnectorId and SolutionTypes and their properties to Generate AWS CFT Template.

    All required parameters must be populated in order to send to server.

    :ivar connector_id: The name of public cloud connector. Required.
    :vartype connector_id: str
    :ivar solution_types: The list of solution types and their settings.
    :vartype solution_types: list[~azure.mgmt.hybridconnectivity.models.SolutionTypeSettings]
    """

    connector_id: str = rest_field(name="connectorId")
    """The name of public cloud connector. Required."""
    solution_types: Optional[List["_models.SolutionTypeSettings"]] = rest_field(name="solutionTypes")
    """The list of solution types and their settings."""

    @overload
    def __init__(
        self,
        *,
        connector_id: str,
        solution_types: Optional[List["_models.SolutionTypeSettings"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InventoryProperties(_model_base.Model):
    """Definition of inventory.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar cloud_native_type: Gets or sets the cloud native resource type. "ec2"
    :vartype cloud_native_type: str or ~azure.mgmt.hybridconnectivity.models.CloudNativeType
    :ivar cloud_native_resource_id: Gets or sets the cloud native resource name.
    :vartype cloud_native_resource_id: str
    :ivar azure_resource_id: Gets or sets the mapped azure resource id.
    :vartype azure_resource_id: str
    :ivar status: Gets or sets the status of the inventory. Known values are: "New", "InProgress",
     "Completed", and "Failed".
    :vartype status: str or ~azure.mgmt.hybridconnectivity.models.SolutionConfigurationStatus
    :ivar status_details: Gets or sets the status details.
    :vartype status_details: str
    :ivar provisioning_state: The resource provisioning state. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridconnectivity.models.ResourceProvisioningState
    """

    cloud_native_type: Optional[Union[str, "_models.CloudNativeType"]] = rest_field(name="cloudNativeType")
    """Gets or sets the cloud native resource type. \"ec2\""""
    cloud_native_resource_id: Optional[str] = rest_field(name="cloudNativeResourceId")
    """Gets or sets the cloud native resource name."""
    azure_resource_id: Optional[str] = rest_field(name="azureResourceId")
    """Gets or sets the mapped azure resource id."""
    status: Optional[Union[str, "_models.SolutionConfigurationStatus"]] = rest_field()
    """Gets or sets the status of the inventory. Known values are: \"New\", \"InProgress\",
     \"Completed\", and \"Failed\"."""
    status_details: Optional[str] = rest_field(name="statusDetails")
    """Gets or sets the status details."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The resource provisioning state. Known values are: \"Succeeded\", \"Failed\", and \"Canceled\"."""

    @overload
    def __init__(
        self,
        *,
        cloud_native_type: Optional[Union[str, "_models.CloudNativeType"]] = None,
        cloud_native_resource_id: Optional[str] = None,
        azure_resource_id: Optional[str] = None,
        status: Optional[Union[str, "_models.SolutionConfigurationStatus"]] = None,
        status_details: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridconnectivity.models.SystemData
    """


class InventoryResource(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridconnectivity.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.hybridconnectivity.models.InventoryProperties
    """

    properties: Optional["_models.InventoryProperties"] = rest_field()
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.InventoryProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationStatusResult(_model_base.Model):
    """The current status of an async operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified ID for the async operation.
    :vartype id: str
    :ivar name: Name of the async operation.
    :vartype name: str
    :ivar status: Operation status. Required.
    :vartype status: str
    :ivar percent_complete: Percent of the operation that is complete.
    :vartype percent_complete: float
    :ivar start_time: The start time of the operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the operation.
    :vartype end_time: ~datetime.datetime
    :ivar operations: The operations list.
    :vartype operations: list[~azure.mgmt.hybridconnectivity.models.OperationStatusResult]
    :ivar error: If present, details of the operation error.
    :vartype error: ~azure.mgmt.hybridconnectivity.models.ErrorDetail
    :ivar resource_id: Fully qualified ID of the resource against which the original async
     operation was started.
    :vartype resource_id: str
    """

    id: Optional[str] = rest_field()
    """Fully qualified ID for the async operation."""
    name: Optional[str] = rest_field()
    """Name of the async operation."""
    status: str = rest_field()
    """Operation status. Required."""
    percent_complete: Optional[float] = rest_field(name="percentComplete")
    """Percent of the operation that is complete."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", format="rfc3339")
    """The start time of the operation."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", format="rfc3339")
    """The end time of the operation."""
    operations: Optional[List["_models.OperationStatusResult"]] = rest_field()
    """The operations list."""
    error: Optional["_models.ErrorDetail"] = rest_field()
    """If present, details of the operation error."""
    resource_id: Optional[str] = rest_field(name="resourceId", visibility=["read"])
    """Fully qualified ID of the resource against which the original async operation was started."""

    @overload
    def __init__(
        self,
        *,
        status: str,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        percent_complete: Optional[float] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        operations: Optional[List["_models.OperationStatusResult"]] = None,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridconnectivity.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PublicCloudConnector(TrackedResource):
    """Public Cloud Connector.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridconnectivity.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.hybridconnectivity.models.PublicCloudConnectorProperties
    """

    properties: Optional["_models.PublicCloudConnectorProperties"] = rest_field()
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.PublicCloudConnectorProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PublicCloudConnectorProperties(_model_base.Model):
    """Properties of public cloud connectors.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar aws_cloud_profile: Cloud profile for AWS. Required.
    :vartype aws_cloud_profile: ~azure.mgmt.hybridconnectivity.models.AwsCloudProfile
    :ivar host_type: Host cloud the public cloud connector. Required. "AWS"
    :vartype host_type: str or ~azure.mgmt.hybridconnectivity.models.HostType
    :ivar provisioning_state: The resource provisioning state. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridconnectivity.models.ResourceProvisioningState
    :ivar connector_primary_identifier: Connector primary identifier.
    :vartype connector_primary_identifier: str
    """

    aws_cloud_profile: "_models.AwsCloudProfile" = rest_field(name="awsCloudProfile")
    """Cloud profile for AWS. Required."""
    host_type: Union[str, "_models.HostType"] = rest_field(name="hostType", visibility=["read", "create"])
    """Host cloud the public cloud connector. Required. \"AWS\""""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The resource provisioning state. Known values are: \"Succeeded\", \"Failed\", and \"Canceled\"."""
    connector_primary_identifier: Optional[str] = rest_field(name="connectorPrimaryIdentifier", visibility=["read"])
    """Connector primary identifier."""

    @overload
    def __init__(
        self,
        *,
        aws_cloud_profile: "_models.AwsCloudProfile",
        host_type: Union[str, "_models.HostType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionConfiguration(ExtensionResource):
    """Solution Configuration.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridconnectivity.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.hybridconnectivity.models.SolutionConfigurationProperties
    """

    properties: Optional["_models.SolutionConfigurationProperties"] = rest_field()
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SolutionConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionConfigurationProperties(_model_base.Model):
    """Solution configuration resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar provisioning_state: The resource provisioning state. Known values are: "Succeeded",
     "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridconnectivity.models.ResourceProvisioningState
    :ivar solution_type: The type of the solution. Required.
    :vartype solution_type: str
    :ivar solution_settings: Solution settings.
    :vartype solution_settings: ~azure.mgmt.hybridconnectivity.models.SolutionSettings
    :ivar status: The status of solution configurations. Known values are: "New", "InProgress",
     "Completed", and "Failed".
    :vartype status: str or ~azure.mgmt.hybridconnectivity.models.SolutionConfigurationStatus
    :ivar status_details: The detailed message of status details.
    :vartype status_details: str
    :ivar last_sync_time: The last time resources were inventoried.
    :vartype last_sync_time: ~datetime.datetime
    """

    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The resource provisioning state. Known values are: \"Succeeded\", \"Failed\", and \"Canceled\"."""
    solution_type: str = rest_field(name="solutionType")
    """The type of the solution. Required."""
    solution_settings: Optional["_models.SolutionSettings"] = rest_field(name="solutionSettings")
    """Solution settings."""
    status: Optional[Union[str, "_models.SolutionConfigurationStatus"]] = rest_field(visibility=["read"])
    """The status of solution configurations. Known values are: \"New\", \"InProgress\",
     \"Completed\", and \"Failed\"."""
    status_details: Optional[str] = rest_field(name="statusDetails", visibility=["read"])
    """The detailed message of status details."""
    last_sync_time: Optional[datetime.datetime] = rest_field(name="lastSyncTime", visibility=["read"], format="rfc3339")
    """The last time resources were inventoried."""

    @overload
    def __init__(
        self,
        *,
        solution_type: str,
        solution_settings: Optional["_models.SolutionSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionSettings(_model_base.Model):
    """Solution settings."""


class SolutionTypeProperties(_model_base.Model):
    """Definition of Solution type resource.

    :ivar solution_type: The name of the solution type.
    :vartype solution_type: str
    :ivar description: Short description of solution type.
    :vartype description: str
    :ivar supported_azure_regions: The locations this solution is supported in.
    :vartype supported_azure_regions: list[str]
    :ivar solution_settings: Array of solution settings and its description.
    :vartype solution_settings:
     list[~azure.mgmt.hybridconnectivity.models.SolutionTypeSettingsProperties]
    """

    solution_type: Optional[str] = rest_field(name="solutionType")
    """The name of the solution type."""
    description: Optional[str] = rest_field()
    """Short description of solution type."""
    supported_azure_regions: Optional[List[str]] = rest_field(name="supportedAzureRegions")
    """The locations this solution is supported in."""
    solution_settings: Optional[List["_models.SolutionTypeSettingsProperties"]] = rest_field(name="solutionSettings")
    """Array of solution settings and its description."""

    @overload
    def __init__(
        self,
        *,
        solution_type: Optional[str] = None,
        description: Optional[str] = None,
        supported_azure_regions: Optional[List[str]] = None,
        solution_settings: Optional[List["_models.SolutionTypeSettingsProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionTypeResource(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridconnectivity.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.hybridconnectivity.models.SolutionTypeProperties
    """

    properties: Optional["_models.SolutionTypeProperties"] = rest_field()
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.SolutionTypeProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionTypeSettings(_model_base.Model):
    """The properties of Solution Type.

    All required parameters must be populated in order to send to server.

    :ivar solution_type: The type of the solution. Required.
    :vartype solution_type: str
    :ivar solution_settings: Solution settings.
    :vartype solution_settings: ~azure.mgmt.hybridconnectivity.models.SolutionSettings
    """

    solution_type: str = rest_field(name="solutionType")
    """The type of the solution. Required."""
    solution_settings: Optional["_models.SolutionSettings"] = rest_field(name="solutionSettings")
    """Solution settings."""

    @overload
    def __init__(
        self,
        *,
        solution_type: str,
        solution_settings: Optional["_models.SolutionSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SolutionTypeSettingsProperties(_model_base.Model):
    """Represent Solution settings properties description array.


    :ivar name: The name of the solution setting property. Required.
    :vartype name: str
    :ivar display_name: The UI friendly name of the solution setting property. Required.
    :vartype display_name: str
    :ivar type: Type of the solution setting property, represented as a string. Required.
    :vartype type: str
    :ivar description: Description of solution setting property. Required.
    :vartype description: str
    :ivar allowed_values: Array of allowed values for this solution settings property. Required.
    :vartype allowed_values: list[str]
    :ivar default_value: Default value for this solution settings property. Required.
    :vartype default_value: str
    """

    name: str = rest_field()
    """The name of the solution setting property. Required."""
    display_name: str = rest_field(name="displayName")
    """The UI friendly name of the solution setting property. Required."""
    type: str = rest_field()
    """Type of the solution setting property, represented as a string. Required."""
    description: str = rest_field()
    """Description of solution setting property. Required."""
    allowed_values: List[str] = rest_field(name="allowedValues")
    """Array of allowed values for this solution settings property. Required."""
    default_value: str = rest_field(name="defaultValue")
    """Default value for this solution settings property. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        display_name: str,
        type: str,
        description: str,
        allowed_values: List[str],
        default_value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.hybridconnectivity.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.hybridconnectivity.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy")
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="createdByType")
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy")
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="lastModifiedByType")
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(name="lastModifiedAt", format="rfc3339")
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
