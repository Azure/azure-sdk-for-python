# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Optional, TypeVar

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._endpoints_operations import build_create_or_update_request, build_delete_request, build_get_request, build_list_credentials_request, build_list_managed_proxy_details_request, build_list_request, build_update_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class EndpointsOperations:
    """EndpointsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.hybridconnectivity.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def list(
        self,
        resource_uri: str,
        **kwargs: Any
    ) -> AsyncIterable["_models.EndpointsList"]:
        """List of endpoints to the target resource.

        :param resource_uri: The fully qualified Azure Resource manager identifier of the resource to
         be connected.
        :type resource_uri: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either EndpointsList or the result of cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.hybridconnectivity.models.EndpointsList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2022-05-01-preview")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.EndpointsList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_request(
                    resource_uri=resource_uri,
                    api_version=api_version,
                    template_url=self.list.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_request(
                    resource_uri=resource_uri,
                    api_version=api_version,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("EndpointsList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response


        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints"}  # type: ignore

    @distributed_trace_async
    async def get(
        self,
        resource_uri: str,
        endpoint_name: str,
        **kwargs: Any
    ) -> "_models.EndpointResource":
        """Gets the endpoint to the resource.

        :param resource_uri: The fully qualified Azure Resource manager identifier of the resource to
         be connected.
        :type resource_uri: str
        :param endpoint_name: The endpoint name.
        :type endpoint_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EndpointResource, or the result of cls(response)
        :rtype: ~azure.mgmt.hybridconnectivity.models.EndpointResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.EndpointResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2022-05-01-preview")  # type: str

        
        request = build_get_request(
            resource_uri=resource_uri,
            endpoint_name=endpoint_name,
            api_version=api_version,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('EndpointResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}"}  # type: ignore


    @distributed_trace_async
    async def create_or_update(
        self,
        resource_uri: str,
        endpoint_name: str,
        endpoint_resource: "_models.EndpointResource",
        **kwargs: Any
    ) -> "_models.EndpointResource":
        """Create or update the endpoint to the target resource.

        :param resource_uri: The fully qualified Azure Resource manager identifier of the resource to
         be connected.
        :type resource_uri: str
        :param endpoint_name: The endpoint name.
        :type endpoint_name: str
        :param endpoint_resource: Endpoint details.
        :type endpoint_resource: ~azure.mgmt.hybridconnectivity.models.EndpointResource
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EndpointResource, or the result of cls(response)
        :rtype: ~azure.mgmt.hybridconnectivity.models.EndpointResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.EndpointResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2022-05-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(endpoint_resource, 'EndpointResource')

        request = build_create_or_update_request(
            resource_uri=resource_uri,
            endpoint_name=endpoint_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.create_or_update.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('EndpointResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}"}  # type: ignore


    @distributed_trace_async
    async def update(
        self,
        resource_uri: str,
        endpoint_name: str,
        endpoint_resource: "_models.EndpointResource",
        **kwargs: Any
    ) -> "_models.EndpointResource":
        """Update the endpoint to the target resource.

        :param resource_uri: The fully qualified Azure Resource manager identifier of the resource to
         be connected.
        :type resource_uri: str
        :param endpoint_name: The endpoint name.
        :type endpoint_name: str
        :param endpoint_resource: Endpoint details.
        :type endpoint_resource: ~azure.mgmt.hybridconnectivity.models.EndpointResource
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EndpointResource, or the result of cls(response)
        :rtype: ~azure.mgmt.hybridconnectivity.models.EndpointResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.EndpointResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2022-05-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(endpoint_resource, 'EndpointResource')

        request = build_update_request(
            resource_uri=resource_uri,
            endpoint_name=endpoint_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.update.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('EndpointResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update.metadata = {'url': "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}"}  # type: ignore


    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self,
        resource_uri: str,
        endpoint_name: str,
        **kwargs: Any
    ) -> None:
        """Deletes the endpoint access to the target resource.

        :param resource_uri: The fully qualified Azure Resource manager identifier of the resource to
         be connected.
        :type resource_uri: str
        :param endpoint_name: The endpoint name.
        :type endpoint_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2022-05-01-preview")  # type: str

        
        request = build_delete_request(
            resource_uri=resource_uri,
            endpoint_name=endpoint_name,
            api_version=api_version,
            template_url=self.delete.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}"}  # type: ignore


    @distributed_trace_async
    async def list_credentials(
        self,
        resource_uri: str,
        endpoint_name: str,
        expiresin: Optional[int] = 10800,
        **kwargs: Any
    ) -> "_models.EndpointAccessResource":
        """Gets the endpoint access credentials to the resource.

        :param resource_uri: The fully qualified Azure Resource manager identifier of the resource to
         be connected.
        :type resource_uri: str
        :param endpoint_name: The endpoint name.
        :type endpoint_name: str
        :param expiresin: The is how long the endpoint access token is valid (in seconds). Default
         value is 10800.
        :type expiresin: long
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EndpointAccessResource, or the result of cls(response)
        :rtype: ~azure.mgmt.hybridconnectivity.models.EndpointAccessResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.EndpointAccessResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2022-05-01-preview")  # type: str

        
        request = build_list_credentials_request(
            resource_uri=resource_uri,
            endpoint_name=endpoint_name,
            api_version=api_version,
            expiresin=expiresin,
            template_url=self.list_credentials.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('EndpointAccessResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_credentials.metadata = {'url': "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/listCredentials"}  # type: ignore


    @distributed_trace_async
    async def list_managed_proxy_details(
        self,
        resource_uri: str,
        endpoint_name: str,
        managed_proxy_request: "_models.ManagedProxyRequest",
        **kwargs: Any
    ) -> "_models.ManagedProxyResource":
        """Fetches the managed proxy details.

        :param resource_uri: The fully qualified Azure Resource manager identifier of the resource to
         be connected.
        :type resource_uri: str
        :param endpoint_name: The endpoint name.
        :type endpoint_name: str
        :param managed_proxy_request: Object of type ManagedProxyRequest.
        :type managed_proxy_request: ~azure.mgmt.hybridconnectivity.models.ManagedProxyRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ManagedProxyResource, or the result of cls(response)
        :rtype: ~azure.mgmt.hybridconnectivity.models.ManagedProxyResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ManagedProxyResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2022-05-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(managed_proxy_request, 'ManagedProxyRequest')

        request = build_list_managed_proxy_details_request(
            resource_uri=resource_uri,
            endpoint_name=endpoint_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.list_managed_proxy_details.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('ManagedProxyResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_managed_proxy_details.metadata = {'url': "/{resourceUri}/providers/Microsoft.HybridConnectivity/endpoints/{endpointName}/listManagedProxyDetails"}  # type: ignore

