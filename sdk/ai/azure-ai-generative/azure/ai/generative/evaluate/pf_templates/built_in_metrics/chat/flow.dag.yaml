id: chat_quality_safety_eval_flow
name: Chat Quality & Safety Evaluation Flow
inputs:
  metrics:
    type: string
    default: gpt_groundedness,gpt_coherence,violence
    is_chat_input: false
  messages:
    type: list
    default:
    - role: user
      content: How can I check the status of my online order?
    - content: "Hi Sarah Lee! To check the status of your online order for previous
        purchases such as the TrailMaster X4 Tent or the CozyNights Sleeping
        Bag, please refer to your email for order confirmation and tracking
        information. If you need further assistance, feel free to contact our
        customer support at support@contosotrek.com or give us a call at
        1-800-555-1234. "
      role: assistant
      context:
        citations:
        - id: cHJvZHVjdF9pbmZvXzYubWQz
          title: "Information about product item_number: 6"
          content: >-
            # Information about product item_number: 6


            It's essential to check local regulations before using the EcoFire Camping Stove, as some areas may have restrictions on open fires or require a specific type of stove.


            30) How do I clean and maintain the EcoFire Camping Stove?
               To clean the EcoFire Camping Stove, allow it to cool completely, then wipe away any ash or debris with a brush or cloth. Store the stove in a dry place when not in use.
    is_chat_input: false
  deployment_name:
    type: string
    default: gpt-35-turbo
    is_chat_input: false
  threshold:
    type: int
    default: 4
    is_chat_input: false
outputs:
  gpt_coherence:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.gpt_coherence}
  hate_fairness_score:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.hate_fairness_score}
  gpt_fluency_per_turn:
    type: string
    reference: ${concatenate_metrics.output.results_per_turn.gpt_fluency}
  gpt_relevance:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.gpt_relevance}
  self_harm_reasoning:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.self_harm_reasoning}
  self_harm:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.self_harm}
  gpt_retrieval_score_per_turn:
    type: string
    reference: ${concatenate_metrics.output.results_per_turn.gpt_retrieval_score}
  gpt_groundedness_per_turn:
    type: string
    reference: ${concatenate_metrics.output.results_per_turn.gpt_groundedness}
  sexual_score:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.sexual_score}
  violence_score:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.violence_score}
  hate_fairness_reasoning:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.hate_fairness_reasoning}
  hate_fairness:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.hate_fairness}
  gpt_groundedness:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.gpt_groundedness}
  gpt_retrieval_score:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.gpt_retrieval_score}
  gpt_relevance_per_turn:
    type: string
    reference: ${concatenate_metrics.output.results_per_turn.gpt_relevance}
  sexual_reasoning:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.sexual_reasoning}
  gpt_fluency:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.gpt_fluency}
  sexual:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.sexual}
  self_harm_score:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.self_harm_score}
  violence_reasoning:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.violence_reasoning}
  violence:
    type: string
    reference: ${concatenate_metrics.output.results_per_chat.violence}
  gpt_coherence_per_turn:
    type: string
    reference: ${concatenate_metrics.output.results_per_turn.gpt_coherence}
nodes:
- name: aggregate
  type: python
  source:
    type: code
    path: aggregate.py
  inputs:
    metrics: ${select_metrics.output}
    results: ${concatenate_metrics.output}
    thresholds: ${inputs.threshold}
  aggregation: true
  use_variants: false
- name: select_metrics
  type: python
  source:
    type: code
    path: select_metrics.py
  inputs:
    metrics: ${inputs.metrics}
  use_variants: false
- name: evaluate_chat_rag
  type: python
  source:
    type: code
    path: evaluate_chat_rag.py
  inputs:
    connection: openai_connection
    chat: ${inputs.messages}
    deployment_name: ${inputs.deployment_name}
    selected_metrics: ${select_metrics.output}
  activate:
    when: ${validate_conversation.output}
    is: true
  use_variants: false
- name: evaluate_coherence_fluency
  type: python
  source:
    type: code
    path: evaluate_coherence_fluency.py
  inputs:
    connection: openai_connection
    deployment_name: ${inputs.deployment_name}
    parsed_qa: ${parse_chat.output}
    selected_metrics: ${select_metrics.output}
  activate:
    when: ${validate_conversation.output}
    is: true
  use_variants: false
- name: parse_chat
  type: python
  source:
    type: code
    path: parse_chat.py
  inputs:
    chat: ${inputs.messages}
  activate:
    when: ${validate_conversation.output}
    is: true
  use_variants: false
- name: concatenate_metrics
  type: python
  source:
    type: code
    path: concatenate_metrics.py
  inputs:
    non_rag_results: ${evaluate_coherence_fluency.output}
    rag_results: ${evaluate_chat_rag.output}
    safety_results: ${format_service_output.output}
    selected_metrics: ${select_metrics.output}
  use_variants: false
- name: validate_conversation
  type: python
  source:
    type: code
    path: validate_conversation.py
  inputs:
    chat: ${inputs.messages}
    selected_metrics: ${select_metrics.output}
  use_variants: false
- name: validate_service
  type: python
  source:
    type: code
    path: validate_service.py
  inputs:
    selected_metrics: ${select_metrics.output}
  use_variants: false
- name: construct_service_request
  type: python
  source:
    type: code
    path: construct_service_request.py
  inputs:
    selected_metrics: ${select_metrics.output}
    user_text: ${inputs.messages}
  activate:
    when: ${validate_service.output}
    is: true
  use_variants: false
- name: call_rai_service
  type: python
  source:
    type: code
    path: call_rai_service.py
  inputs:
    request_body: ${construct_service_request.output}
  activate:
    when: ${validate_service.output}
    is: true
  use_variants: false
- name: parse_service_response
  type: python
  source:
    type: code
    path: parse_service_response.py
  inputs:
    batch_response: ${call_rai_service.output}
    selected_label_keys: ${select_metrics.output}
  activate:
    when: ${validate_service.output}
    is: true
  use_variants: false
- name: format_service_output
  type: python
  source:
    type: code
    path: format_service_output.py
  inputs:
    parsed_responses: ${parse_service_response.output}
  activate:
    when: ${validate_service.output}
    is: true
  use_variants: false
node_variants: {}
environment:
  python_requirements_txt: requirements.txt
environment_variables:
  PF_WORKER_COUNT: 1
