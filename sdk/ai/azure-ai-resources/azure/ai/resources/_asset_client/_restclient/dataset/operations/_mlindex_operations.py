# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models as _models
from .._serialization import Serializer
from .._vendor import AzureMachineLearningWorkspacesMixinABC, _convert_request, _format_url_section

T = TypeVar("T")
ClsType = Optional[Callable[[
    PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_list_request(
    subscription_id: str,
    resource_group_name: str,
    workspace_name: str,
    *,
    order_by: Optional[str] = None,
    top: Optional[int] = None,
    tags: Optional[str] = None,
    list_view_type: Optional[Union[str, _models.ListViewType]] = None,
    continuation_token_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/mlindex/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/mlindices",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
    }

    _url: str = _format_url_section(
        _url, **path_format_arguments)  # type: ignore

    # Construct parameters
    if order_by is not None:
        _params["orderBy"] = _SERIALIZER.query("order_by", order_by, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if tags is not None:
        _params["tags"] = _SERIALIZER.query("tags", tags, "str")
    if list_view_type is not None:
        _params["listViewType"] = _SERIALIZER.query(
            "list_view_type", list_view_type, "str")
    if continuation_token_parameter is not None:
        _params["continuationToken"] = _SERIALIZER.query(
            "continuation_token_parameter", continuation_token_parameter, "str"
        )

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_get_request(
    subscription_id: str, resource_group_name: str, workspace_name: str, name: str, version: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/{name}/versions/{version}",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "workspaceName": _SERIALIZER.url("workspace_name", workspace_name, "str"),
        "name": _SERIALIZER.url("name", name, "str"),
        "version": _SERIALIZER.url("version", version, "str"),
    }

    _url: str = _format_url_section(
        _url, **path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


class MlIndexOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.machinelearningservices.AzureMachineLearningWorkspaces`'s
        :attr:`data_version` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(
            0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(
            0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(
            0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(
            0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        order_by: Optional[str] = None,
        top: Optional[int] = None,
        tags: Optional[str] = None,
        list_view_type: Optional[Union[str, _models.ListViewType]] = None,
        continuation_token_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable["_models.DataVersionEntity"]:
        """list.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param name: Required.
        :type name: str
        :param order_by: Default value is None.
        :type order_by: str
        :param top: Default value is None.
        :type top: int
        :param tags: Default value is None.
        :type tags: str
        :param list_view_type: Known values are: "ActiveOnly", "ArchivedOnly", and "All". Default value
         is None.
        :type list_view_type: str or ~azure.mgmt.machinelearningservices.models.ListViewType
        :param continuation_token_parameter: Default value is None.
        :type continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either DataVersionEntity or the result of cls(response)
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.machinelearningservices.models.DataVersionEntity]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.PaginatedDataVersionEntityList] = kwargs.pop(
            "cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_list_request(
                    subscription_id=subscription_id,
                    resource_group_name=resource_group_name,
                    workspace_name=workspace_name,
                    order_by=order_by,
                    top=top,
                    tags=tags,
                    list_view_type=list_view_type,
                    continuation_token_parameter=continuation_token_parameter,
                    template_url=self.list.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                request = HttpRequest("GET", next_link)
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize(
                "PaginatedDataVersionEntityList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code,
                          response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(
                    _models.ErrorResponse, pipeline_response)
                raise HttpResponseError(
                    response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    list.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/{name}/versions"
    }

    @distributed_trace
    def get(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        name: str,
        version: str,
        **kwargs: Any
    ) -> _models.DataVersionEntity:
        """get.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param name: Required.
        :type name: str
        :param version: Required.
        :type version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataVersionEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataVersionEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DataVersionEntity] = kwargs.pop("cls", None)

        request = build_get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            name=name,
            version=version,
            template_url=self.get.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "DataVersionEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/{name}/versions/{version}"
    }

    @overload
    def modify(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        name: str,
        version: str,
        body: Optional[_models.DataVersionMutable] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataVersionEntity:
        """modify.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param name: Required.
        :type name: str
        :param version: Required.
        :type version: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DataVersionMutable
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataVersionEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataVersionEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def modify(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        name: str,
        version: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataVersionEntity:
        """modify.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param name: Required.
        :type name: str
        :param version: Required.
        :type version: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataVersionEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataVersionEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def modify(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        name: str,
        version: str,
        body: Optional[Union[_models.DataVersionMutable, IO]] = None,
        **kwargs: Any
    ) -> _models.DataVersionEntity:
        """modify.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param name: Required.
        :type name: str
        :param version: Required.
        :type version: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DataVersionMutable or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataVersionEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataVersionEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataVersionEntity] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "DataVersionMutable")
            else:
                _json = None

        request = build_modify_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            name=name,
            version=version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.modify.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "DataVersionEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    modify.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/{name}/versions/{version}"
    }

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        name: str,
        version: str,
        **kwargs: Any
    ) -> None:
        """delete.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param name: Required.
        :type name: str
        :param version: Required.
        :type version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_delete_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            name=name,
            version=version,
            template_url=self.delete.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in []:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/{name}/versions/{version}"
    }

    @distributed_trace
    def exists(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        name: str,
        version: str,
        **kwargs: Any
    ) -> bool:
        """exists.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param name: Required.
        :type name: str
        :param version: Required.
        :type version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: bool or the result of cls(response)
        :rtype: bool
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[bool] = kwargs.pop("cls", None)

        request = build_exists_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            name=name,
            version=version,
            template_url=self.exists.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("bool", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    exists.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/{name}/versions/{version}/exists"
    }

    @overload
    def get_by_asset_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.AssetId] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataVersionEntity:
        """get_by_asset_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.AssetId
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataVersionEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataVersionEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_by_asset_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataVersionEntity:
        """get_by_asset_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataVersionEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataVersionEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def get_by_asset_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.AssetId, IO]] = None,
        **kwargs: Any
    ) -> _models.DataVersionEntity:
        """get_by_asset_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.AssetId or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataVersionEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataVersionEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataVersionEntity] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "AssetId")
            else:
                _json = None

        request = build_get_by_asset_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.get_by_asset_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "DataVersionEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_by_asset_id.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/getByAssetId"
    }

    @overload
    def create_unregistered_input_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.CreateUnregisteredInputData] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """create_unregistered_input_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateUnregisteredInputData
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_unregistered_input_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """create_unregistered_input_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_unregistered_input_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.CreateUnregisteredInputData, IO]] = None,
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """create_unregistered_input_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateUnregisteredInputData or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataContainerEntity] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(
                    body, "CreateUnregisteredInputData")
            else:
                _json = None

        request = build_create_unregistered_input_data_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_unregistered_input_data.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "DataContainerEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_unregistered_input_data.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/createUnregisteredInput"
    }

    @overload
    def batch_get_or_create_unregistered_input_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.BatchCreateUnregisteredInputData] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchUnregisteredInputDataResponse:
        """batch_get_or_create_unregistered_input_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchCreateUnregisteredInputData
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchUnregisteredInputDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchUnregisteredInputDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def batch_get_or_create_unregistered_input_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchUnregisteredInputDataResponse:
        """batch_get_or_create_unregistered_input_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchUnregisteredInputDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchUnregisteredInputDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def batch_get_or_create_unregistered_input_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.BatchCreateUnregisteredInputData, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchUnregisteredInputDataResponse:
        """batch_get_or_create_unregistered_input_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchCreateUnregisteredInputData or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchUnregisteredInputDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchUnregisteredInputDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchUnregisteredInputDataResponse] = kwargs.pop(
            "cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(
                    body, "BatchCreateUnregisteredInputData")
            else:
                _json = None

        request = build_batch_get_or_create_unregistered_input_data_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_get_or_create_unregistered_input_data.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "BatchUnregisteredInputDataResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    batch_get_or_create_unregistered_input_data.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/batchGetOrCreateUnregisteredInput"
    }

    @overload
    def create_unregistered_output_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.CreateUnregisteredOutputData] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """create_unregistered_output_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateUnregisteredOutputData
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_unregistered_output_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """create_unregistered_output_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_unregistered_output_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.CreateUnregisteredOutputData, IO]] = None,
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """create_unregistered_output_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateUnregisteredOutputData or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataContainerEntity] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(
                    body, "CreateUnregisteredOutputData")
            else:
                _json = None

        request = build_create_unregistered_output_data_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_unregistered_output_data.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "DataContainerEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_unregistered_output_data.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/createUnregisteredOutput"
    }

    @overload
    def batch_get_or_create_unregistered_output_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.BatchCreateUnregisteredOutputData] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchUnregisteredOutputDataResponse:
        """batch_get_or_create_unregistered_output_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchCreateUnregisteredOutputData
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchUnregisteredOutputDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchUnregisteredOutputDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def batch_get_or_create_unregistered_output_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchUnregisteredOutputDataResponse:
        """batch_get_or_create_unregistered_output_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchUnregisteredOutputDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchUnregisteredOutputDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def batch_get_or_create_unregistered_output_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.BatchCreateUnregisteredOutputData, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchUnregisteredOutputDataResponse:
        """batch_get_or_create_unregistered_output_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchCreateUnregisteredOutputData or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchUnregisteredOutputDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchUnregisteredOutputDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchUnregisteredOutputDataResponse] = kwargs.pop(
            "cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(
                    body, "BatchCreateUnregisteredOutputData")
            else:
                _json = None

        request = build_batch_get_or_create_unregistered_output_data_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_get_or_create_unregistered_output_data.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "BatchUnregisteredOutputDataResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    batch_get_or_create_unregistered_output_data.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/batchGetOrCreateUnregisteredOutput"
    }

    @overload
    def registered_existing_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.RegisterExistingData] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """registered_existing_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.RegisterExistingData
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def registered_existing_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """registered_existing_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def registered_existing_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.RegisterExistingData, IO]] = None,
        **kwargs: Any
    ) -> _models.DataContainerEntity:
        """registered_existing_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.RegisterExistingData or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DataContainerEntity or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.DataContainerEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DataContainerEntity] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "RegisterExistingData")
            else:
                _json = None

        request = build_registered_existing_data_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.registered_existing_data.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "DataContainerEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    registered_existing_data.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/registerExisting"
    }

    @overload
    def batch_get_resolved_uris(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.BatchGetResolvedURIs] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchDataUriResponse:
        """batch_get_resolved_uris.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchGetResolvedURIs
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchDataUriResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchDataUriResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def batch_get_resolved_uris(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchDataUriResponse:
        """batch_get_resolved_uris.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchDataUriResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchDataUriResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def batch_get_resolved_uris(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.BatchGetResolvedURIs, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchDataUriResponse:
        """batch_get_resolved_uris.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchGetResolvedURIs or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchDataUriResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchDataUriResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchDataUriResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "BatchGetResolvedURIs")
            else:
                _json = None

        request = build_batch_get_resolved_uris_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_get_resolved_uris.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "BatchDataUriResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    batch_get_resolved_uris.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/batchGetResolvedUris"
    }

    @overload
    def batch_get_by_asset_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.BatchGetByAssetId] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchDataResponse:
        """batch_get_by_asset_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchGetByAssetId
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def batch_get_by_asset_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchDataResponse:
        """batch_get_by_asset_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def batch_get_by_asset_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.BatchGetByAssetId, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchDataResponse:
        """batch_get_by_asset_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a model type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchGetByAssetId or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchDataResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchDataResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop(
            "content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchDataResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "BatchGetByAssetId")
            else:
                _json = None

        request = build_batch_get_by_asset_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_get_by_asset_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code,
                      response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(
                _models.ErrorResponse, pipeline_response)
            raise HttpResponseError(
                response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize(
            "BatchDataResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    batch_get_by_asset_id.metadata = {
        "url": "/data/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/dataversion/batchGetByAssetId"
    }
