# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import UnifiedClientTestBase, UnifiedPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestUnifiedAgentsOperations(UnifiedClientTestBase):
    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_create_agent(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.create_agent(
            body={
                "model": "str",
                "description": "str",
                "instructions": "str",
                "metadata": {"str": "str"},
                "name": "str",
                "response_format": "str",
                "temperature": 0.0,
                "tool_resources": {
                    "azure_ai_search": {"indexes": [{"index_connection_id": "str", "index_name": "str"}]},
                    "code_interpreter": {"data_sources": [{"type": "str", "uri": "str"}], "file_ids": ["str"]},
                    "file_search": {
                        "vector_store_ids": ["str"],
                        "vector_stores": [
                            {"configuration": {"data_sources": [{"type": "str", "uri": "str"}]}, "name": "str"}
                        ],
                    },
                },
                "tools": ["tool_definition"],
                "top_p": 0.0,
            },
            model="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_list_agents(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.list_agents()

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_agent(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_agent(
            assistant_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_update_agent(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.update_agent(
            assistant_id="str",
            body={
                "description": "str",
                "instructions": "str",
                "metadata": {"str": "str"},
                "model": "str",
                "name": "str",
                "response_format": "str",
                "temperature": 0.0,
                "tool_resources": {
                    "azure_ai_search": {"indexes": [{"index_connection_id": "str", "index_name": "str"}]},
                    "code_interpreter": {"data_sources": [{"type": "str", "uri": "str"}], "file_ids": ["str"]},
                    "file_search": {
                        "vector_store_ids": ["str"],
                        "vector_stores": [
                            {"configuration": {"data_sources": [{"type": "str", "uri": "str"}]}, "name": "str"}
                        ],
                    },
                },
                "tools": ["tool_definition"],
                "top_p": 0.0,
            },
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_delete_agent(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.delete_agent(
            assistant_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_create_thread(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.create_thread(
            body={
                "messages": [
                    {
                        "content": "str",
                        "role": "str",
                        "attachments": [
                            {
                                "tools": [{"type": "code_interpreter"}],
                                "data_source": {"type": "str", "uri": "str"},
                                "file_id": "str",
                            }
                        ],
                        "metadata": {"str": "str"},
                    }
                ],
                "metadata": {"str": "str"},
                "tool_resources": {
                    "azure_ai_search": {"indexes": [{"index_connection_id": "str", "index_name": "str"}]},
                    "code_interpreter": {"data_sources": [{"type": "str", "uri": "str"}], "file_ids": ["str"]},
                    "file_search": {
                        "vector_store_ids": ["str"],
                        "vector_stores": [
                            {"configuration": {"data_sources": [{"type": "str", "uri": "str"}]}, "name": "str"}
                        ],
                    },
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_thread(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_thread(
            thread_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_update_thread(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.update_thread(
            thread_id="str",
            body={
                "metadata": {"str": "str"},
                "tool_resources": {
                    "azure_ai_search": {"indexes": [{"index_connection_id": "str", "index_name": "str"}]},
                    "code_interpreter": {"data_sources": [{"type": "str", "uri": "str"}], "file_ids": ["str"]},
                    "file_search": {
                        "vector_store_ids": ["str"],
                        "vector_stores": [
                            {"configuration": {"data_sources": [{"type": "str", "uri": "str"}]}, "name": "str"}
                        ],
                    },
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_delete_thread(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.delete_thread(
            thread_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_create_message(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.create_message(
            thread_id="str",
            body={
                "content": "str",
                "role": "str",
                "attachments": [
                    {
                        "tools": [{"type": "code_interpreter"}],
                        "data_source": {"type": "str", "uri": "str"},
                        "file_id": "str",
                    }
                ],
                "metadata": {"str": "str"},
            },
            role="str",
            content="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_list_messages(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.list_messages(
            thread_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_message(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_message(
            thread_id="str",
            message_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_update_message(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.update_message(
            thread_id="str",
            message_id="str",
            body={"metadata": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_create_run(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.create_run(
            thread_id="str",
            body={
                "assistant_id": "str",
                "additional_instructions": "str",
                "additional_messages": [
                    {
                        "content": "str",
                        "role": "str",
                        "attachments": [
                            {
                                "tools": [{"type": "code_interpreter"}],
                                "data_source": {"type": "str", "uri": "str"},
                                "file_id": "str",
                            }
                        ],
                        "metadata": {"str": "str"},
                    }
                ],
                "instructions": "str",
                "max_completion_tokens": 0,
                "max_prompt_tokens": 0,
                "metadata": {"str": "str"},
                "model": "str",
                "parallel_tool_calls": bool,
                "response_format": "str",
                "stream": bool,
                "temperature": 0.0,
                "tool_choice": "str",
                "tools": ["tool_definition"],
                "top_p": 0.0,
                "truncation_strategy": {"type": "str", "last_messages": 0},
            },
            assistant_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_list_runs(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.list_runs(
            thread_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_run(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_run(
            thread_id="str",
            run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_update_run(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.update_run(
            thread_id="str",
            run_id="str",
            body={"metadata": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_submit_tool_outputs_to_run(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.submit_tool_outputs_to_run(
            thread_id="str",
            run_id="str",
            body={"tool_outputs": [{"output": "str", "tool_call_id": "str"}], "stream": bool},
            tool_outputs=[{"output": "str", "tool_call_id": "str"}],
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_cancel_run(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.cancel_run(
            thread_id="str",
            run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_create_thread_and_run(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.create_thread_and_run(
            body={
                "assistant_id": "str",
                "instructions": "str",
                "max_completion_tokens": 0,
                "max_prompt_tokens": 0,
                "metadata": {"str": "str"},
                "model": "str",
                "parallel_tool_calls": bool,
                "response_format": "str",
                "stream": bool,
                "temperature": 0.0,
                "thread": {
                    "messages": [
                        {
                            "content": "str",
                            "role": "str",
                            "attachments": [
                                {
                                    "tools": [{"type": "code_interpreter"}],
                                    "data_source": {"type": "str", "uri": "str"},
                                    "file_id": "str",
                                }
                            ],
                            "metadata": {"str": "str"},
                        }
                    ],
                    "metadata": {"str": "str"},
                    "tool_resources": {
                        "azure_ai_search": {"indexes": [{"index_connection_id": "str", "index_name": "str"}]},
                        "code_interpreter": {"data_sources": [{"type": "str", "uri": "str"}], "file_ids": ["str"]},
                        "file_search": {
                            "vector_store_ids": ["str"],
                            "vector_stores": [
                                {"configuration": {"data_sources": [{"type": "str", "uri": "str"}]}, "name": "str"}
                            ],
                        },
                    },
                },
                "tool_choice": "str",
                "tool_resources": {
                    "azure_ai_search": {"indexes": [{"index_connection_id": "str", "index_name": "str"}]},
                    "code_interpreter": {"file_ids": ["str"]},
                    "file_search": {"vector_store_ids": ["str"]},
                },
                "tools": ["tool_definition"],
                "top_p": 0.0,
                "truncation_strategy": {"type": "str", "last_messages": 0},
            },
            assistant_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_run_step(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_run_step(
            thread_id="str",
            run_id="str",
            step_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_list_run_steps(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.list_run_steps(
            thread_id="str",
            run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_list_files(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.list_files()

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_upload_file(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.upload_file(
            body={"file": "filetype", "purpose": "str", "filename": "str"},
            file="filetype",
            purpose="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_delete_file(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.delete_file(
            file_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_file(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_file(
            file_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_file_content(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_file_content(
            file_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_list_vector_stores(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.list_vector_stores()

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_create_vector_store(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.create_vector_store(
            body={
                "chunking_strategy": "vector_store_chunking_strategy_request",
                "configuration": {"data_sources": [{"type": "str", "uri": "str"}]},
                "expires_after": {"anchor": "str", "days": 0},
                "file_ids": ["str"],
                "metadata": {"str": "str"},
                "name": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_vector_store(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_vector_store(
            vector_store_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_modify_vector_store(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.modify_vector_store(
            vector_store_id="str",
            body={"expires_after": {"anchor": "str", "days": 0}, "metadata": {"str": "str"}, "name": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_delete_vector_store(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.delete_vector_store(
            vector_store_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_list_vector_store_files(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.list_vector_store_files(
            vector_store_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_create_vector_store_file(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.create_vector_store_file(
            vector_store_id="str",
            body={
                "chunking_strategy": "vector_store_chunking_strategy_request",
                "data_source": {"type": "str", "uri": "str"},
                "file_id": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_vector_store_file(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_vector_store_file(
            vector_store_id="str",
            file_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_delete_vector_store_file(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.delete_vector_store_file(
            vector_store_id="str",
            file_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_create_vector_store_file_batch(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.create_vector_store_file_batch(
            vector_store_id="str",
            body={
                "chunking_strategy": "vector_store_chunking_strategy_request",
                "data_sources": [{"type": "str", "uri": "str"}],
                "file_ids": ["str"],
            },
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_get_vector_store_file_batch(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.get_vector_store_file_batch(
            vector_store_id="str",
            batch_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_cancel_vector_store_file_batch(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.cancel_vector_store_file_batch(
            vector_store_id="str",
            batch_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @UnifiedPreparer()
    @recorded_by_proxy
    def test_agents_list_vector_store_file_batch_files(self, unified_endpoint):
        client = self.create_client(endpoint=unified_endpoint)
        response = client.agents.list_vector_store_file_batch_files(
            vector_store_id="str",
            batch_id="str",
        )

        # please add some check logic here by yourself
        # ...
