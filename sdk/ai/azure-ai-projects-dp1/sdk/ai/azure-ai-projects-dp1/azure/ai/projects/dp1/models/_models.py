# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import AuthorRole, CredentialType, DatasetType, DeploymentType, IndexType, PendingUploadType

if TYPE_CHECKING:
    from .. import models as _models


class Agent(_model_base.Model):
    """Represents an AI agent with configuration, instructions, and tool access.

    :ivar agent_id: A unique identifier for the agent. Required.
    :vartype agent_id: str
    :ivar description: A description of the agent; used for display purposes and to describe the
     agent.
    :vartype description: str
    :ivar metadata: Arbitrary metadata associated with this agent.
    :vartype metadata: dict[str, str]
    :ivar name: The name of the agent; used for display purposes and sent to the LLM to identify
     the agent.
    :vartype name: str
    :ivar agent_model: The model definition for this agent. Required.
    :vartype agent_model: ~azure.ai.projects.dp1.models.AgentModel
    :ivar instructions: Instructions provided to guide how this agent operates.
    :vartype instructions: list[~azure.ai.projects.dp1.models.ChatMessage]
    :ivar tools: A list of tool definitions available to the agent.
    :vartype tools: list[~azure.ai.projects.dp1.models.AgentToolDefinition]
    :ivar tool_choice: How the agent should choose among provided tools.
    :vartype tool_choice: ~azure.ai.projects.dp1.models.ToolChoiceBehavior
    """

    agent_id: str = rest_field(name="agentId", visibility=["read"])
    """A unique identifier for the agent. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of the agent; used for display purposes and to describe the agent."""
    metadata: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Arbitrary metadata associated with this agent."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent; used for display purposes and sent to the LLM to identify the agent."""
    agent_model: "_models.AgentModel" = rest_field(
        name="agentModel", visibility=["read", "create", "update", "delete", "query"]
    )
    """The model definition for this agent. Required."""
    instructions: Optional[List["_models.ChatMessage"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Instructions provided to guide how this agent operates."""
    tools: Optional[List["_models.AgentToolDefinition"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A list of tool definitions available to the agent."""
    tool_choice: Optional["_models.ToolChoiceBehavior"] = rest_field(
        name="toolChoice", visibility=["read", "create", "update", "delete", "query"]
    )
    """How the agent should choose among provided tools."""

    @overload
    def __init__(
        self,
        *,
        agent_model: "_models.AgentModel",
        description: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
        name: Optional[str] = None,
        instructions: Optional[List["_models.ChatMessage"]] = None,
        tools: Optional[List["_models.AgentToolDefinition"]] = None,
        tool_choice: Optional["_models.ToolChoiceBehavior"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ChatMessage(_model_base.Model):
    """A base model for representing a chat message.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AgentMessage, DeveloperMessage, SystemMessage, ToolMessage, UserMessage

    :ivar user_id: The ID of the user who created the message (if applicable).
    :vartype user_id: str
    :ivar agent_id: The ID of the agent who created the message (if applicable).
    :vartype agent_id: str
    :ivar message_id: A unique identifier for this message. Required.
    :vartype message_id: str
    :ivar agent_run_id: A unique run ID, if this message was generated by a run process.
    :vartype agent_run_id: str
    :ivar thread_id: The thread to which this message belongs. Required.
    :vartype thread_id: str
    :ivar role: The role of this message's author. Required. Known values are: "user", "agent",
     "system", "tool", and "developer".
    :vartype role: str or ~azure.ai.projects.dp1.models.AuthorRole
    :ivar content: The contents of the message. Required.
    :vartype content: list[~azure.ai.projects.dp1.models.AIContent]
    :ivar author_name: An optional display name for the author.
    :vartype author_name: str
    :ivar created_at: The timestamp (in Unix time) when this message was created.
    :vartype created_at: int
    :ivar completed_at: The timestamp (in Unix time) when this message was completed, if
     applicable.
    :vartype completed_at: int
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    user_id: Optional[str] = rest_field(name="userId", visibility=["read", "create", "update", "delete", "query"])
    """The ID of the user who created the message (if applicable)."""
    agent_id: Optional[str] = rest_field(name="agentId", visibility=["read", "create", "update", "delete", "query"])
    """The ID of the agent who created the message (if applicable)."""
    message_id: str = rest_field(name="messageId", visibility=["read"])
    """A unique identifier for this message. Required."""
    agent_run_id: Optional[str] = rest_field(
        name="agentRunId", visibility=["read", "create", "update", "delete", "query"]
    )
    """A unique run ID, if this message was generated by a run process."""
    thread_id: str = rest_field(name="threadId", visibility=["read"])
    """The thread to which this message belongs. Required."""
    role: str = rest_discriminator(name="role", visibility=["read", "create", "update", "delete", "query"])
    """The role of this message's author. Required. Known values are: \"user\", \"agent\", \"system\",
     \"tool\", and \"developer\"."""
    content: List["_models.AIContent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The contents of the message. Required."""
    author_name: Optional[str] = rest_field(
        name="authorName", visibility=["read", "create", "update", "delete", "query"]
    )
    """An optional display name for the author."""
    created_at: Optional[int] = rest_field(name="createdAt", visibility=["read", "create", "update", "delete", "query"])
    """The timestamp (in Unix time) when this message was created."""
    completed_at: Optional[int] = rest_field(
        name="completedAt", visibility=["read", "create", "update", "delete", "query"]
    )
    """The timestamp (in Unix time) when this message was completed, if applicable."""

    @overload
    def __init__(
        self,
        *,
        role: str,
        content: List["_models.AIContent"],
        user_id: Optional[str] = None,
        agent_id: Optional[str] = None,
        agent_run_id: Optional[str] = None,
        author_name: Optional[str] = None,
        created_at: Optional[int] = None,
        completed_at: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentMessage(ChatMessage, discriminator="agent"):
    """An agent message within a chat, always with the 'agent' role.

    :ivar user_id: The ID of the user who created the message (if applicable).
    :vartype user_id: str
    :ivar agent_id: The ID of the agent who created the message (if applicable).
    :vartype agent_id: str
    :ivar message_id: A unique identifier for this message. Required.
    :vartype message_id: str
    :ivar agent_run_id: A unique run ID, if this message was generated by a run process.
    :vartype agent_run_id: str
    :ivar thread_id: The thread to which this message belongs. Required.
    :vartype thread_id: str
    :ivar author_name: An optional display name for the author.
    :vartype author_name: str
    :ivar created_at: The timestamp (in Unix time) when this message was created.
    :vartype created_at: int
    :ivar completed_at: The timestamp (in Unix time) when this message was completed, if
     applicable.
    :vartype completed_at: int
    :ivar role: Always 'agent' for agent messages. Required.
    :vartype role: str or ~azure.ai.projects.dp1.models.AGENT
    :ivar content: The contents of the agent message. Required.
    :vartype content: list[~azure.ai.projects.dp1.models.TextContent or
     ~azure.ai.projects.dp1.models.RefusalContent or
     ~azure.ai.projects.dp1.models.ContentFilterContent or
     ~azure.ai.projects.dp1.models.ImageContent or ~azure.ai.projects.dp1.models.AudioContent or
     ~azure.ai.projects.dp1.models.VideoContent or ~azure.ai.projects.dp1.models.FileContent or
     ~azure.ai.projects.dp1.models.ToolCallContent]
    """

    role: Literal[AuthorRole.AGENT] = rest_discriminator(name="role", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Always 'agent' for agent messages. Required."""
    content: List[
        Union[
            "_models.TextContent",
            "_models.RefusalContent",
            "_models.ContentFilterContent",
            "_models.ImageContent",
            "_models.AudioContent",
            "_models.VideoContent",
            "_models.FileContent",
            "_models.ToolCallContent",
        ]
    ] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The contents of the agent message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: List[
            Union[
                "_models.TextContent",
                "_models.RefusalContent",
                "_models.ContentFilterContent",
                "_models.ImageContent",
                "_models.AudioContent",
                "_models.VideoContent",
                "_models.FileContent",
                "_models.ToolCallContent",
            ]
        ],
        user_id: Optional[str] = None,
        agent_id: Optional[str] = None,
        agent_run_id: Optional[str] = None,
        author_name: Optional[str] = None,
        created_at: Optional[int] = None,
        completed_at: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, role=AuthorRole.AGENT, **kwargs)


class AgentModel(_model_base.Model):
    """Represents the model or provider-specific data used by the agent.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureAgentModel, OpenAIAgentModel

    :ivar id: A unique model or deployment ID for this agent model. Required.
    :vartype id: str
    :ivar provider: The name of the provider for this model (e.g., 'openai'). Default value is
     None.
    :vartype provider: str
    :ivar endpoint: An endpoint where the provider can be reached, if applicable.
    :vartype endpoint: str
    :ivar options: Provider-specific configuration and options (JSON-like structure).
    :vartype options: ~azure.ai.projects.dp1.models.JSONAny
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A unique model or deployment ID for this agent model. Required."""
    provider: str = rest_discriminator(name="provider", visibility=["read", "create", "update", "delete", "query"])
    """The name of the provider for this model (e.g., 'openai'). Default value is None."""
    endpoint: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An endpoint where the provider can be reached, if applicable."""
    options: Optional["_models.JSONAny"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Provider-specific configuration and options (JSON-like structure)."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        provider: str = None,
        endpoint: Optional[str] = None,
        options: Optional["_models.JSONAny"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentOptions(_model_base.Model):
    """Options used when creating or updating an Agent.

    :ivar name: The name of the agent; used for display purposes and sent to the LLM to identify
     the agent.
    :vartype name: str
    :ivar agent_model: The model definition for this agent. Required.
    :vartype agent_model: ~azure.ai.projects.dp1.models.AgentModel
    :ivar instructions: Instructions provided to guide how this agent operates.
    :vartype instructions: list[~azure.ai.projects.dp1.models.ChatMessage]
    :ivar tools: A list of tool definitions available to the agent.
    :vartype tools: list[~azure.ai.projects.dp1.models.AgentToolDefinition]
    :ivar tool_choice: How the agent should choose among provided tools.
    :vartype tool_choice: ~azure.ai.projects.dp1.models.ToolChoiceBehavior
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the agent; used for display purposes and sent to the LLM to identify the agent."""
    agent_model: "_models.AgentModel" = rest_field(
        name="agentModel", visibility=["read", "create", "update", "delete", "query"]
    )
    """The model definition for this agent. Required."""
    instructions: Optional[List["_models.ChatMessage"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Instructions provided to guide how this agent operates."""
    tools: Optional[List["_models.AgentToolDefinition"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A list of tool definitions available to the agent."""
    tool_choice: Optional["_models.ToolChoiceBehavior"] = rest_field(
        name="toolChoice", visibility=["read", "create", "update", "delete", "query"]
    )
    """How the agent should choose among provided tools."""

    @overload
    def __init__(
        self,
        *,
        agent_model: "_models.AgentModel",
        name: Optional[str] = None,
        instructions: Optional[List["_models.ChatMessage"]] = None,
        tools: Optional[List["_models.AgentToolDefinition"]] = None,
        tool_choice: Optional["_models.ToolChoiceBehavior"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentToolDefinition(_model_base.Model):
    """Represents a definition of a tool that an agent may use, used in a polymorphic manner.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BingGroundingToolDefinition, CodeInterpreterToolDefinition, FileSearchToolDefinition,
    OpenApiToolDefinition

    :ivar type: Discriminates the various child 'tool definition' types. Required. Default value is
     None.
    :vartype type: str
    :ivar options: Additional options that specify the behavior of this tool (also polymorphic).
    :vartype options: ~azure.ai.projects.dp1.models.AgentToolOptions
    :ivar override: A set of overrides for the tool's name, description, or parameters.
    :vartype override: ~azure.ai.projects.dp1.models.AgentToolDefinitionOverride
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Discriminates the various child 'tool definition' types. Required. Default value is None."""
    options: Optional["_models.AgentToolOptions"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional options that specify the behavior of this tool (also polymorphic)."""
    override: Optional["_models.AgentToolDefinitionOverride"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A set of overrides for the tool's name, description, or parameters."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        options: Optional["_models.AgentToolOptions"] = None,
        override: Optional["_models.AgentToolDefinitionOverride"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentToolDefinitionOverride(_model_base.Model):
    """AgentToolDefinitionOverride.

    :ivar name: An alternate name for the tool.
    :vartype name: str
    :ivar description: An alternate description for the tool.
    :vartype description: str
    :ivar parameters: An alternate JSON schema for the tool's parameters.
    :vartype parameters: ~azure.ai.projects.dp1.models.JSONSchema
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An alternate name for the tool."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An alternate description for the tool."""
    parameters: Optional["_models.JSONSchema"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An alternate JSON schema for the tool's parameters."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        parameters: Optional["_models.JSONSchema"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentToolOptions(_model_base.Model):
    """Base type for any agent tool-specific options, used in a polymorphic manner.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    FunctionToolOptions

    :ivar type: Discriminates the various child 'tool options' types. Required. Default value is
     None.
    :vartype type: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Discriminates the various child 'tool options' types. Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AIContent(_model_base.Model):
    """An abstract representation of a structured content item within a chat message.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AudioContent, ContentFilterContent, FileContent, ImageContent, RefusalContent, TextContent,
    ToolCallContent, ToolResultContent, VideoContent

    :ivar type: Required. Default value is None.
    :vartype type: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Annotations(_model_base.Model):
    """Annotations applied to parts of the message or content.

    :ivar type: The type of annotation. Required.
    :vartype type: str
    :ivar tool_call_id: The tool call ID associated with the annotation.
    :vartype tool_call_id: str
    :ivar json_path: The JSON path associated with the annotation.
    :vartype json_path: str
    :ivar url: The URL associated with the annotation.
    :vartype url: str
    :ivar start: The start position of the annotation.
    :vartype start: int
    :ivar end: The end position of the annotation.
    :vartype end: int
    """

    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of annotation. Required."""
    tool_call_id: Optional[str] = rest_field(
        name="ToolCallId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The tool call ID associated with the annotation."""
    json_path: Optional[str] = rest_field(name="jsonPath", visibility=["read", "create", "update", "delete", "query"])
    """The JSON path associated with the annotation."""
    url: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The URL associated with the annotation."""
    start: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The start position of the annotation."""
    end: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The end position of the annotation."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        tool_call_id: Optional[str] = None,
        json_path: Optional[str] = None,
        url: Optional[str] = None,
        start: Optional[int] = None,
        end: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AudioContent(AIContent, discriminator="audio"):
    """A structured chat content item containing an audio reference.

    :ivar type: Required. Default value is "audio".
    :vartype type: str
    :ivar duration: Duration of audio in seconds (optional).
    :vartype duration: int
    :ivar file_name: The file name for this binary content.
    :vartype file_name: str
    :ivar mime_type: The MIME type for this binary content.
    :vartype mime_type: str
    :ivar uri: URI where the binary content can be retrieved.
    :vartype uri: str
    :ivar data_uri: Data URI containing the binary content inlined.
    :vartype data_uri: str
    :ivar data: Raw bytes for the binary content.
    :vartype data: bytes
    """

    type: Literal["audio"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"audio\"."""
    duration: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Duration of audio in seconds (optional)."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """The file name for this binary content."""
    mime_type: Optional[str] = rest_field(name="mimeType", visibility=["read", "create", "update", "delete", "query"])
    """The MIME type for this binary content."""
    uri: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """URI where the binary content can be retrieved."""
    data_uri: Optional[str] = rest_field(name="dataUri", visibility=["read", "create", "update", "delete", "query"])
    """Data URI containing the binary content inlined."""
    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Raw bytes for the binary content."""

    @overload
    def __init__(
        self,
        *,
        duration: Optional[int] = None,
        file_name: Optional[str] = None,
        mime_type: Optional[str] = None,
        uri: Optional[str] = None,
        data_uri: Optional[str] = None,
        data: Optional[bytes] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="audio", **kwargs)


class ToolChoiceBehavior(_model_base.Model):
    """The base behavior for how an agent chooses among available tools.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AutoToolChoiceBehavior, NoneToolChoiceBehavior, RequiredToolChoiceBehavior

    :ivar type: The kind of tool-choice strategy. Required. Default value is None.
    :vartype type: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """The kind of tool-choice strategy. Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AutoToolChoiceBehavior(ToolChoiceBehavior, discriminator="auto"):
    """Behavior specifying an automatic choice among the given tools.

    :ivar type: Indicates this behavior is 'auto'. Required. Default value is "auto".
    :vartype type: str
    :ivar tool_names: The tool names from which the agent can automatically choose. Required.
    :vartype tool_names: list[str]
    """

    type: Literal["auto"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Indicates this behavior is 'auto'. Required. Default value is \"auto\"."""
    tool_names: List[str] = rest_field(name="toolNames", visibility=["read", "create", "update", "delete", "query"])
    """The tool names from which the agent can automatically choose. Required."""

    @overload
    def __init__(
        self,
        *,
        tool_names: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="auto", **kwargs)


class AzureAgentModel(AgentModel, discriminator="azure"):
    """A specialized AgentModel for Azure-based providers.

    :ivar id: A unique model or deployment ID for this agent model. Required.
    :vartype id: str
    :ivar endpoint: An endpoint where the provider can be reached, if applicable.
    :vartype endpoint: str
    :ivar provider: Identifies this model as coming from an Azure-based provider. Required. Default
     value is "azure".
    :vartype provider: str
    :ivar options: The provider-specific options for this Azure-based model.
    :vartype options: ~azure.ai.projects.dp1.models.AzureModelOptions
    """

    provider: Literal["azure"] = rest_discriminator(name="provider", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Identifies this model as coming from an Azure-based provider. Required. Default value is
     \"azure\"."""
    options: Optional["_models.AzureModelOptions"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The provider-specific options for this Azure-based model."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        endpoint: Optional[str] = None,
        options: Optional["_models.AzureModelOptions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider="azure", **kwargs)


class Index(_model_base.Model):
    """Index resource Definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureAISearchIndex, CosmosDBIndex, ManagedAzureAISearchIndex

    :ivar type: Type of index. Required. Known values are: "AzureSearch",
     "CosmosDBNoSqlVectorStore", and "ManagedAzureSearch".
    :vartype type: str or ~azure.ai.projects.dp1.models.IndexType
    :ivar stage: Asset stage.
    :vartype stage: str
    :ivar id: A unique identifier for the asset, assetId probably?.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar version: The version of the resource. Required.
    :vartype version: str
    :ivar description: The asset description text.
    :vartype description: str
    :ivar tags: Tag dictionary. Tags can be added, removed, and updated.
    :vartype tags: dict[str, str]
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Type of index. Required. Known values are: \"AzureSearch\", \"CosmosDBNoSqlVectorStore\", and
     \"ManagedAzureSearch\"."""
    stage: Optional[str] = rest_field(visibility=["read", "create", "update"])
    """Asset stage."""
    id: Optional[str] = rest_field(visibility=["read"])
    """A unique identifier for the asset, assetId probably?."""
    name: str = rest_field(visibility=["read"])
    """The name of the resource. Required."""
    version: str = rest_field(visibility=["read"])
    """The version of the resource. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The asset description text."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Tag dictionary. Tags can be added, removed, and updated."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        stage: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureAISearchIndex(Index, discriminator="AzureSearch"):
    """Azure AI Search Index Definition.

    :ivar stage: Asset stage.
    :vartype stage: str
    :ivar id: A unique identifier for the asset, assetId probably?.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar version: The version of the resource. Required.
    :vartype version: str
    :ivar description: The asset description text.
    :vartype description: str
    :ivar tags: Tag dictionary. Tags can be added, removed, and updated.
    :vartype tags: dict[str, str]
    :ivar type: Type of index. Required. Azure search
    :vartype type: str or ~azure.ai.projects.dp1.models.AZURE_SEARCH
    :ivar connection_name: Name of connection to Azure AI Search. Required.
    :vartype connection_name: str
    :ivar index_name: Name of index in Azure AI Search resource to attach. Required.
    :vartype index_name: str
    """

    type: Literal[IndexType.AZURE_SEARCH] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Type of index. Required. Azure search"""
    connection_name: str = rest_field(name="connectionName", visibility=["read", "create", "update", "delete", "query"])
    """Name of connection to Azure AI Search. Required."""
    index_name: str = rest_field(name="indexName", visibility=["read", "create", "update", "delete", "query"])
    """Name of index in Azure AI Search resource to attach. Required."""

    @overload
    def __init__(
        self,
        *,
        connection_name: str,
        index_name: str,
        stage: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=IndexType.AZURE_SEARCH, **kwargs)


class AzureModelOptions(_model_base.Model):
    """A set of provider-specific configuration and behavior options for Azure-based models.

    :ivar provider: Identifies this model options object as an Azure-based provider. Required.
     Default value is "azure".
    :vartype provider: str
    :ivar temperature: The sampling temperature to use that controls the apparent creativity of
     generated completions.
     Higher values will make output more random while lower values will make results more focused
     and deterministic.
     It is not recommended to modify temperature and topP for the same completions request as the
     interaction of these two settings is difficult to predict.
    :vartype temperature: float
    :ivar top_p: An alternative to sampling with temperature called nucleus sampling. This value
     causes the
     model to consider the results of tokens with the provided probability mass. As an example, a
     value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     considered.
     It is not recommended to modify temperature and topP for the same completions request as the
     interaction of these two settings is difficult to predict.
    :vartype top_p: float
    """

    provider: Literal["azure"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Identifies this model options object as an Azure-based provider. Required. Default value is
     \"azure\"."""
    temperature: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The sampling temperature to use that controls the apparent creativity of generated completions.
     Higher values will make output more random while lower values will make results more focused
     and deterministic.
     It is not recommended to modify temperature and topP for the same completions request as the
     interaction of these two settings is difficult to predict."""
    top_p: Optional[float] = rest_field(name="topP", visibility=["read", "create", "update", "delete", "query"])
    """An alternative to sampling with temperature called nucleus sampling. This value causes the
     model to consider the results of tokens with the provided probability mass. As an example, a
     value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     considered.
     It is not recommended to modify temperature and topP for the same completions request as the
     interaction of these two settings is difficult to predict."""

    @overload
    def __init__(
        self,
        *,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.provider: Literal["azure"] = "azure"


class BaseCredential(_model_base.Model):
    """Base Credential definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AadCredential, ApiKeyCredential, SasCredential

    :ivar type: Type of credential. Possible values are: AAD, SAS, ApiKey. Required. Known values
     are: "ApiKey", "AAD", and "SAS".
    :vartype type: str or ~azure.ai.projects.dp1.models.CredentialType
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read"])
    """Type of credential. Possible values are: AAD, SAS, ApiKey. Required. Known values are:
     \"ApiKey\", \"AAD\", and \"SAS\"."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BingGroundingToolDefinition(AgentToolDefinition, discriminator="Microsoft.BingGrounding"):
    """A tool definition for Microsoft Bing grounding.

    :ivar options: Additional options that specify the behavior of this tool (also polymorphic).
    :vartype options: ~azure.ai.projects.dp1.models.AgentToolOptions
    :ivar override: A set of overrides for the tool's name, description, or parameters.
    :vartype override: ~azure.ai.projects.dp1.models.AgentToolDefinitionOverride
    :ivar type: Identifies this as a Bing grounding tool definition. Required. Default value is
     "Microsoft.BingGrounding".
    :vartype type: str
    :ivar connection_name: The name of the Bing grounding connection. Required.
    :vartype connection_name: str
    """

    type: Literal["Microsoft.BingGrounding"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Identifies this as a Bing grounding tool definition. Required. Default value is
     \"Microsoft.BingGrounding\"."""
    connection_name: str = rest_field(name="connectionName", visibility=["read", "create", "update", "delete", "query"])
    """The name of the Bing grounding connection. Required."""

    @overload
    def __init__(
        self,
        *,
        connection_name: str,
        options: Optional["_models.AgentToolOptions"] = None,
        override: Optional["_models.AgentToolDefinitionOverride"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="Microsoft.BingGrounding", **kwargs)


class BlobReferenceForConsumption(_model_base.Model):
    """Represents a reference to a blob for consumption.

    :ivar blob_uri: Blob URI path for client to upload data. Example:
     `https://blob.windows.core.net/Container/Path <https://blob.windows.core.net/Container/Path>`_.
     Required.
    :vartype blob_uri: str
    :ivar storage_account_arm_id: ARM ID of the storage account to use. Required.
    :vartype storage_account_arm_id: str
    :ivar credential: Credential info to access the storage account. Required.
    :vartype credential: ~azure.ai.projects.dp1.models.SasCredential
    """

    blob_uri: str = rest_field(name="blobUri", visibility=["read", "create", "update", "delete", "query"])
    """Blob URI path for client to upload data. Example: `https://blob.windows.core.net/Container/Path
     <https://blob.windows.core.net/Container/Path>`_. Required."""
    storage_account_arm_id: str = rest_field(
        name="storageAccountArmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """ARM ID of the storage account to use. Required."""
    credential: "_models.SasCredential" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Credential info to access the storage account. Required."""

    @overload
    def __init__(
        self,
        *,
        blob_uri: str,
        storage_account_arm_id: str,
        credential: "_models.SasCredential",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CodeInterpreterToolDefinition(AgentToolDefinition, discriminator="OpenAI.CodeInterpreter"):
    """A tool definition for the OpenAI Code Interpreter.

    :ivar options: Additional options that specify the behavior of this tool (also polymorphic).
    :vartype options: ~azure.ai.projects.dp1.models.AgentToolOptions
    :ivar override: A set of overrides for the tool's name, description, or parameters.
    :vartype override: ~azure.ai.projects.dp1.models.AgentToolDefinitionOverride
    :ivar type: Identifies this as an OpenAI Code Interpreter tool definition. Required. Default
     value is "OpenAI.CodeInterpreter".
    :vartype type: str
    :ivar file_ids: A list of file IDs this code interpreter requires. Required.
    :vartype file_ids: list[str]
    """

    type: Literal["OpenAI.CodeInterpreter"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Identifies this as an OpenAI Code Interpreter tool definition. Required. Default value is
     \"OpenAI.CodeInterpreter\"."""
    file_ids: List[str] = rest_field(name="fileIds", visibility=["read", "create", "update", "delete", "query"])
    """A list of file IDs this code interpreter requires. Required."""

    @overload
    def __init__(
        self,
        *,
        file_ids: List[str],
        options: Optional["_models.AgentToolOptions"] = None,
        override: Optional["_models.AgentToolDefinitionOverride"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="OpenAI.CodeInterpreter", **kwargs)


class CompletionUsage(_model_base.Model):
    """Detailed token usage data for a run request.

    :ivar output_tokens: Number of completion tokens used over the course of the run step.
     Required.
    :vartype output_tokens: int
    :ivar input_tokens: Number of prompt tokens used over the course of the run step. Required.
    :vartype input_tokens: int
    :ivar total_tokens: Total number of tokens used (prompt + run). Required.
    :vartype total_tokens: int
    :ivar input_token_details: Details of the prompt tokens.
    :vartype input_token_details: ~azure.ai.projects.dp1.models.CompletionUsageInputTokenDetails
    :ivar output_token_details: Breakdown of tokens used in a run.
    :vartype output_token_details: ~azure.ai.projects.dp1.models.CompletionUsageOutputTokenDetails
    """

    output_tokens: int = rest_field(name="outputTokens", visibility=["read", "create", "update", "delete", "query"])
    """Number of completion tokens used over the course of the run step. Required."""
    input_tokens: int = rest_field(name="inputTokens", visibility=["read", "create", "update", "delete", "query"])
    """Number of prompt tokens used over the course of the run step. Required."""
    total_tokens: int = rest_field(name="totalTokens", visibility=["read", "create", "update", "delete", "query"])
    """Total number of tokens used (prompt + run). Required."""
    input_token_details: Optional["_models.CompletionUsageInputTokenDetails"] = rest_field(
        name="inputTokenDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the prompt tokens."""
    output_token_details: Optional["_models.CompletionUsageOutputTokenDetails"] = rest_field(
        name="outputTokenDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Breakdown of tokens used in a run."""

    @overload
    def __init__(
        self,
        *,
        output_tokens: int,
        input_tokens: int,
        total_tokens: int,
        input_token_details: Optional["_models.CompletionUsageInputTokenDetails"] = None,
        output_token_details: Optional["_models.CompletionUsageOutputTokenDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CompletionUsageInputTokenDetails(_model_base.Model):
    """CompletionUsageInputTokenDetails.

    :ivar cached_tokens: The number of cached prompt tokens.
    :vartype cached_tokens: int
    """

    cached_tokens: Optional[int] = rest_field(
        name="cachedTokens", visibility=["read", "create", "update", "delete", "query"]
    )
    """The number of cached prompt tokens."""

    @overload
    def __init__(
        self,
        *,
        cached_tokens: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CompletionUsageOutputTokenDetails(_model_base.Model):
    """CompletionUsageOutputTokenDetails.

    :ivar reasoning_tokens: Tokens generated by the model for reasoning.
    :vartype reasoning_tokens: int
    """

    reasoning_tokens: Optional[int] = rest_field(
        name="reasoningTokens", visibility=["read", "create", "update", "delete", "query"]
    )
    """Tokens generated by the model for reasoning."""

    @overload
    def __init__(
        self,
        *,
        reasoning_tokens: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Connection(_model_base.Model):
    """Response from the listSecrets operation.

    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar type: Category of the connection. Required. Known values are: "AzureOpenAI", "AzureBlob",
     "CognitiveSearch", "CosmosDB", "ApiKey", "AppInsights", and "CustomKeys".
    :vartype type: str or ~azure.ai.projects.dp1.models.ConnectionType
    :ivar target: The connection URL to be used for this service. Required.
    :vartype target: str
    :ivar metadata: Metadata of the connection. Required.
    :vartype metadata: dict[str, str]
    """

    name: str = rest_field(visibility=["read"])
    """The name of the resource. Required."""
    type: Union[str, "_models.ConnectionType"] = rest_field(visibility=["read"])
    """Category of the connection. Required. Known values are: \"AzureOpenAI\", \"AzureBlob\",
     \"CognitiveSearch\", \"CosmosDB\", \"ApiKey\", \"AppInsights\", and \"CustomKeys\"."""
    target: str = rest_field(visibility=["read"])
    """The connection URL to be used for this service. Required."""
    metadata: Dict[str, str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Metadata of the connection. Required."""

    @overload
    def __init__(
        self,
        *,
        metadata: Dict[str, str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentFilterContent(AIContent, discriminator="contentFilter"):
    """A structured chat content item containing a content filter.

    :ivar type: Required. Default value is "contentFilter".
    :vartype type: str
    :ivar content_filter: Content filter data. Required.
    :vartype content_filter: str
    :ivar detected: Whether content was flagged/detected. Required.
    :vartype detected: bool
    """

    type: Literal["contentFilter"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"contentFilter\"."""
    content_filter: str = rest_field(name="contentFilter", visibility=["read", "create", "update", "delete", "query"])
    """Content filter data. Required."""
    detected: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Whether content was flagged/detected. Required."""

    @overload
    def __init__(
        self,
        *,
        content_filter: str,
        detected: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="contentFilter", **kwargs)


class CosmosDBIndex(Index, discriminator="CosmosDBNoSqlVectorStore"):
    """CosmosDB Vector Store Index Definition.

    :ivar stage: Asset stage.
    :vartype stage: str
    :ivar id: A unique identifier for the asset, assetId probably?.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar version: The version of the resource. Required.
    :vartype version: str
    :ivar description: The asset description text.
    :vartype description: str
    :ivar tags: Tag dictionary. Tags can be added, removed, and updated.
    :vartype tags: dict[str, str]
    :ivar type: Type of index. Required. CosmosDB
    :vartype type: str or ~azure.ai.projects.dp1.models.COSMOS_DB
    :ivar connection_name: Name of connection to CosmosDB. Required.
    :vartype connection_name: str
    :ivar database_name: Name of the CosmosDB Database. Required.
    :vartype database_name: str
    :ivar container_name: Name of CosmosDB Container. Required.
    :vartype container_name: str
    :ivar embedding_configuration: Embedding model configuration. Required.
    :vartype embedding_configuration: ~azure.ai.projects.dp1.models.EmbeddingConfiguration
    """

    type: Literal[IndexType.COSMOS_DB] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Type of index. Required. CosmosDB"""
    connection_name: str = rest_field(name="connectionName", visibility=["read", "create", "update", "delete", "query"])
    """Name of connection to CosmosDB. Required."""
    database_name: str = rest_field(name="databaseName", visibility=["read", "create", "update", "delete", "query"])
    """Name of the CosmosDB Database. Required."""
    container_name: str = rest_field(name="containerName", visibility=["read", "create", "update", "delete", "query"])
    """Name of CosmosDB Container. Required."""
    embedding_configuration: "_models.EmbeddingConfiguration" = rest_field(
        name="embeddingConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Embedding model configuration. Required."""

    @overload
    def __init__(
        self,
        *,
        connection_name: str,
        database_name: str,
        container_name: str,
        embedding_configuration: "_models.EmbeddingConfiguration",
        stage: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=IndexType.COSMOS_DB, **kwargs)


class CreateRunRequest(_model_base.Model):
    """CreateRunRequest.

    :ivar run_id: Unique identifier for the run. Required.
    :vartype run_id: str
    :ivar agent: The agent responsible for generating the run. Required.
    :vartype agent: ~azure.ai.projects.dp1.models.Agent
    :ivar input: The list of input messages for the run. Required.
    :vartype input: list[~azure.ai.projects.dp1.models.ChatMessage]
    :ivar thread_id: Optional identifier for an existing conversation thread.
    :vartype thread_id: str
    :ivar metadata: Optional metadata associated with the run request.
    :vartype metadata: dict[str, str]
    :ivar options: Optional configuration for run generation.
    :vartype options: ~azure.ai.projects.dp1.models.RunOptions
    :ivar user_id: Identifier for the user making the request.
    :vartype user_id: str
    """

    run_id: str = rest_field(name="runId", visibility=["read"])
    """Unique identifier for the run. Required."""
    agent: "_models.Agent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The agent responsible for generating the run. Required."""
    input: List["_models.ChatMessage"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The list of input messages for the run. Required."""
    thread_id: Optional[str] = rest_field(name="threadId", visibility=["read", "create", "update", "delete", "query"])
    """Optional identifier for an existing conversation thread."""
    metadata: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional metadata associated with the run request."""
    options: Optional["_models.RunOptions"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional configuration for run generation."""
    user_id: Optional[str] = rest_field(name="userId", visibility=["read", "create", "update", "delete", "query"])
    """Identifier for the user making the request."""

    @overload
    def __init__(
        self,
        *,
        agent: "_models.Agent",
        input: List["_models.ChatMessage"],
        thread_id: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
        options: Optional["_models.RunOptions"] = None,
        user_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DatasetVersion(_model_base.Model):
    """DatasetVersion Definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    FileDatasetVersion, FolderDatasetVersion

    :ivar dataset_uri: [Required] Uri of the data. Example:
     `https://go.microsoft.com/fwlink/?linkid=2202330
     <https://go.microsoft.com/fwlink/?linkid=2202330>`_. Required.
    :vartype dataset_uri: str
    :ivar type: Dataset type. Required. Known values are: "uri_file" and "uri_folder".
    :vartype type: str or ~azure.ai.projects.dp1.models.DatasetType
    :ivar is_reference: Indicates if dataset is reference only or managed by dataset service. If
     true, the underlying data will be deleted when the dataset version is deleted.
    :vartype is_reference: bool
    :ivar stage: Asset stage.
    :vartype stage: str
    :ivar id: A unique identifier for the asset, assetId probably?.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar version: The version of the resource. Required.
    :vartype version: str
    :ivar description: The asset description text.
    :vartype description: str
    :ivar tags: Tag dictionary. Tags can be added, removed, and updated.
    :vartype tags: dict[str, str]
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    dataset_uri: str = rest_field(name="datasetUri", visibility=["read", "create"])
    """[Required] Uri of the data. Example: `https://go.microsoft.com/fwlink/?linkid=2202330
     <https://go.microsoft.com/fwlink/?linkid=2202330>`_. Required."""
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Dataset type. Required. Known values are: \"uri_file\" and \"uri_folder\"."""
    is_reference: Optional[bool] = rest_field(name="isReference", visibility=["read"])
    """Indicates if dataset is reference only or managed by dataset service. If true, the underlying
     data will be deleted when the dataset version is deleted."""
    stage: Optional[str] = rest_field(visibility=["read", "create", "update"])
    """Asset stage."""
    id: Optional[str] = rest_field(visibility=["read"])
    """A unique identifier for the asset, assetId probably?."""
    name: str = rest_field(visibility=["read"])
    """The name of the resource. Required."""
    version: str = rest_field(visibility=["read"])
    """The version of the resource. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The asset description text."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Tag dictionary. Tags can be added, removed, and updated."""

    @overload
    def __init__(
        self,
        *,
        dataset_uri: str,
        type: str,
        stage: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Deployment(_model_base.Model):
    """Model Deployment Definition.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ModelDeployment

    :ivar type: The type of the deployment. Required. "ModelDeployment"
    :vartype type: str or ~azure.ai.projects.dp1.models.DeploymentType
    :ivar name: Name of the deployment. Required.
    :vartype name: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """The type of the deployment. Required. \"ModelDeployment\""""
    name: str = rest_field(visibility=["read"])
    """Name of the deployment. Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DeveloperMessage(ChatMessage, discriminator="developer"):
    """A developer message within a chat, always with the 'developer' role.

    :ivar user_id: The ID of the user who created the message (if applicable).
    :vartype user_id: str
    :ivar agent_id: The ID of the agent who created the message (if applicable).
    :vartype agent_id: str
    :ivar message_id: A unique identifier for this message. Required.
    :vartype message_id: str
    :ivar agent_run_id: A unique run ID, if this message was generated by a run process.
    :vartype agent_run_id: str
    :ivar thread_id: The thread to which this message belongs. Required.
    :vartype thread_id: str
    :ivar author_name: An optional display name for the author.
    :vartype author_name: str
    :ivar created_at: The timestamp (in Unix time) when this message was created.
    :vartype created_at: int
    :ivar completed_at: The timestamp (in Unix time) when this message was completed, if
     applicable.
    :vartype completed_at: int
    :ivar role: Always 'developer' for developer messages. Required.
    :vartype role: str or ~azure.ai.projects.dp1.models.DEVELOPER
    :ivar content: The contents of the developer message. Required.
    :vartype content: list[~azure.ai.projects.dp1.models.TextContent]
    """

    role: Literal[AuthorRole.DEVELOPER] = rest_discriminator(name="role", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Always 'developer' for developer messages. Required."""
    content: List["_models.TextContent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The contents of the developer message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: List["_models.TextContent"],
        user_id: Optional[str] = None,
        agent_id: Optional[str] = None,
        agent_run_id: Optional[str] = None,
        author_name: Optional[str] = None,
        created_at: Optional[int] = None,
        completed_at: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, role=AuthorRole.DEVELOPER, **kwargs)


class EmbeddingConfiguration(_model_base.Model):
    """Embedding configuration class.

    :ivar model_deployment_name: Deployment name of embedding model. It can point to a model
     deployment either in the parent AIServices or a connection. Required.
    :vartype model_deployment_name: str
    :ivar embedding_field: Embedding field. Required.
    :vartype embedding_field: str
    """

    model_deployment_name: str = rest_field(
        name="modelDeploymentName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Deployment name of embedding model. It can point to a model deployment either in the parent
     AIServices or a connection. Required."""
    embedding_field: str = rest_field(name="embeddingField", visibility=["read", "create", "update", "delete", "query"])
    """Embedding field. Required."""

    @overload
    def __init__(
        self,
        *,
        model_deployment_name: str,
        embedding_field: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Evaluation(_model_base.Model):
    """Evaluation Definition.

    :ivar id: Identifier of the evaluation. Required.
    :vartype id: str
    :ivar data: Data for evaluation. Required.
    :vartype data: ~azure.ai.projects.dp1.models.InputData
    :ivar display_name: Display Name for evaluation. It helps to find the evaluation easily in AI
     Foundry. It does not need to be unique.
    :vartype display_name: str
    :ivar description: Description of the evaluation. It can be used to store additional
     information about the evaluation and is mutable.
    :vartype description: str
    :ivar status: Status of the evaluation. It is set by service and is read-only.
    :vartype status: str
    :ivar tags: Evaluation's tags. Unlike properties, tags are fully mutable.
    :vartype tags: dict[str, str]
    :ivar properties: Evaluation's properties. Unlike tags, properties are add-only. Once added, a
     property cannot be removed.
    :vartype properties: dict[str, str]
    :ivar evaluators: Evaluators to be used for the evaluation. Required.
    :vartype evaluators: dict[str, ~azure.ai.projects.dp1.models.EvaluatorConfiguration]
    """

    id: str = rest_field(visibility=["read"])
    """Identifier of the evaluation. Required."""
    data: "_models.InputData" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Data for evaluation. Required."""
    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display Name for evaluation. It helps to find the evaluation easily in AI Foundry. It does not
     need to be unique."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the evaluation. It can be used to store additional information about the
     evaluation and is mutable."""
    status: Optional[str] = rest_field(visibility=["read"])
    """Status of the evaluation. It is set by service and is read-only."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Evaluation's tags. Unlike properties, tags are fully mutable."""
    properties: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Evaluation's properties. Unlike tags, properties are add-only. Once added, a property cannot be
     removed."""
    evaluators: Dict[str, "_models.EvaluatorConfiguration"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Evaluators to be used for the evaluation. Required."""

    @overload
    def __init__(
        self,
        *,
        data: "_models.InputData",
        evaluators: Dict[str, "_models.EvaluatorConfiguration"],
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EvaluatorConfiguration(_model_base.Model):
    """Evaluator Configuration.

    :ivar id: Identifier of the evaluator. Required.
    :vartype id: str
    :ivar init_params: Initialization parameters of the evaluator.
    :vartype init_params: dict[str, any]
    :ivar data_mapping: Data parameters of the evaluator.
    :vartype data_mapping: dict[str, str]
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Identifier of the evaluator. Required."""
    init_params: Optional[Dict[str, Any]] = rest_field(
        name="initParams", visibility=["read", "create", "update", "delete", "query"]
    )
    """Initialization parameters of the evaluator."""
    data_mapping: Optional[Dict[str, str]] = rest_field(
        name="dataMapping", visibility=["read", "create", "update", "delete", "query"]
    )
    """Data parameters of the evaluator."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        init_params: Optional[Dict[str, Any]] = None,
        data_mapping: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileContent(AIContent, discriminator="file"):
    """A structured chat content item containing a file data item.

    :ivar type: Required. Default value is "file".
    :vartype type: str
    :ivar file_name: The file name for this binary content.
    :vartype file_name: str
    :ivar mime_type: The MIME type for this binary content.
    :vartype mime_type: str
    :ivar uri: URI where the binary content can be retrieved.
    :vartype uri: str
    :ivar data_uri: Data URI containing the binary content inlined.
    :vartype data_uri: str
    :ivar data: Raw bytes for the binary content.
    :vartype data: bytes
    """

    type: Literal["file"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"file\"."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """The file name for this binary content."""
    mime_type: Optional[str] = rest_field(name="mimeType", visibility=["read", "create", "update", "delete", "query"])
    """The MIME type for this binary content."""
    uri: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """URI where the binary content can be retrieved."""
    data_uri: Optional[str] = rest_field(name="dataUri", visibility=["read", "create", "update", "delete", "query"])
    """Data URI containing the binary content inlined."""
    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Raw bytes for the binary content."""

    @overload
    def __init__(
        self,
        *,
        file_name: Optional[str] = None,
        mime_type: Optional[str] = None,
        uri: Optional[str] = None,
        data_uri: Optional[str] = None,
        data: Optional[bytes] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="file", **kwargs)


class FileDatasetVersion(DatasetVersion, discriminator="uri_file"):
    """FileDatasetVersion Definition.

    :ivar dataset_uri: [Required] Uri of the data. Example:
     `https://go.microsoft.com/fwlink/?linkid=2202330
     <https://go.microsoft.com/fwlink/?linkid=2202330>`_. Required.
    :vartype dataset_uri: str
    :ivar is_reference: Indicates if dataset is reference only or managed by dataset service. If
     true, the underlying data will be deleted when the dataset version is deleted.
    :vartype is_reference: bool
    :ivar stage: Asset stage.
    :vartype stage: str
    :ivar id: A unique identifier for the asset, assetId probably?.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar version: The version of the resource. Required.
    :vartype version: str
    :ivar description: The asset description text.
    :vartype description: str
    :ivar tags: Tag dictionary. Tags can be added, removed, and updated.
    :vartype tags: dict[str, str]
    :ivar type: Dataset type. Required. URI file.
    :vartype type: str or ~azure.ai.projects.dp1.models.URI_FILE
    :ivar open_ai_purpose: Indicates OpenAI Purpose. FileDatasets created with this field will be
     compatible with OpenAI-specific features. Required.
    :vartype open_ai_purpose: str
    """

    type: Literal[DatasetType.URI_FILE] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Dataset type. Required. URI file."""
    open_ai_purpose: str = rest_field(name="openAIPurpose", visibility=["read", "create", "update", "delete", "query"])
    """Indicates OpenAI Purpose. FileDatasets created with this field will be compatible with
     OpenAI-specific features. Required."""

    @overload
    def __init__(
        self,
        *,
        dataset_uri: str,
        open_ai_purpose: str,
        stage: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=DatasetType.URI_FILE, **kwargs)


class FileSearchToolDefinition(AgentToolDefinition, discriminator="OpenAI.FileSearch"):
    """A tool definition for the OpenAI File Search feature.

    :ivar options: Additional options that specify the behavior of this tool (also polymorphic).
    :vartype options: ~azure.ai.projects.dp1.models.AgentToolOptions
    :ivar override: A set of overrides for the tool's name, description, or parameters.
    :vartype override: ~azure.ai.projects.dp1.models.AgentToolDefinitionOverride
    :ivar type: Identifies this as an OpenAI File Search tool definition. Required. Default value
     is "OpenAI.FileSearch".
    :vartype type: str
    :ivar max_num_results: The maximum number of search results to return (optional).
    :vartype max_num_results: int
    :ivar ranking_options: Extra ranking options, including a threshold and a ranker.
    :vartype ranking_options: ~azure.ai.projects.dp1.models.FileSearchToolDefinitionRankingOptions
    :ivar file_ids: A list of file IDs to be searched. Required.
    :vartype file_ids: list[str]
    """

    type: Literal["OpenAI.FileSearch"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Identifies this as an OpenAI File Search tool definition. Required. Default value is
     \"OpenAI.FileSearch\"."""
    max_num_results: Optional[int] = rest_field(
        name="maxNumResults", visibility=["read", "create", "update", "delete", "query"]
    )
    """The maximum number of search results to return (optional)."""
    ranking_options: Optional["_models.FileSearchToolDefinitionRankingOptions"] = rest_field(
        name="rankingOptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """Extra ranking options, including a threshold and a ranker."""
    file_ids: List[str] = rest_field(name="fileIds", visibility=["read", "create", "update", "delete", "query"])
    """A list of file IDs to be searched. Required."""

    @overload
    def __init__(
        self,
        *,
        file_ids: List[str],
        options: Optional["_models.AgentToolOptions"] = None,
        override: Optional["_models.AgentToolDefinitionOverride"] = None,
        max_num_results: Optional[int] = None,
        ranking_options: Optional["_models.FileSearchToolDefinitionRankingOptions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="OpenAI.FileSearch", **kwargs)


class FileSearchToolDefinitionRankingOptions(_model_base.Model):
    """FileSearchToolDefinitionRankingOptions.

    :ivar score_threshold: The minimum score to include (optional).
    :vartype score_threshold: float
    :ivar ranker: The name of the ranker algorithm. Required.
    :vartype ranker: str
    """

    score_threshold: Optional[float] = rest_field(
        name="scoreThreshold", visibility=["read", "create", "update", "delete", "query"]
    )
    """The minimum score to include (optional)."""
    ranker: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the ranker algorithm. Required."""

    @overload
    def __init__(
        self,
        *,
        ranker: str,
        score_threshold: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FolderDatasetVersion(DatasetVersion, discriminator="uri_folder"):
    """FileDatasetVersion Definition.

    :ivar dataset_uri: [Required] Uri of the data. Example:
     `https://go.microsoft.com/fwlink/?linkid=2202330
     <https://go.microsoft.com/fwlink/?linkid=2202330>`_. Required.
    :vartype dataset_uri: str
    :ivar is_reference: Indicates if dataset is reference only or managed by dataset service. If
     true, the underlying data will be deleted when the dataset version is deleted.
    :vartype is_reference: bool
    :ivar stage: Asset stage.
    :vartype stage: str
    :ivar id: A unique identifier for the asset, assetId probably?.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar version: The version of the resource. Required.
    :vartype version: str
    :ivar description: The asset description text.
    :vartype description: str
    :ivar tags: Tag dictionary. Tags can be added, removed, and updated.
    :vartype tags: dict[str, str]
    :ivar type: Dataset type. Required. URI folder.
    :vartype type: str or ~azure.ai.projects.dp1.models.URI_FOLDER
    """

    type: Literal[DatasetType.URI_FOLDER] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Dataset type. Required. URI folder."""

    @overload
    def __init__(
        self,
        *,
        dataset_uri: str,
        stage: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=DatasetType.URI_FOLDER, **kwargs)


class FunctionToolOptions(AgentToolOptions, discriminator="Function"):
    """Options for a function-based tool behavior.

    :ivar type: Indicates this tool is function-based. Required. Default value is "Function".
    :vartype type: str
    :ivar name: The function/tool name. Required.
    :vartype name: str
    :ivar description: An optional description for the function-based tool.
    :vartype description: str
    :ivar parameters: A JSON schema describing the function's parameters.
    :vartype parameters: ~azure.ai.projects.dp1.models.JSONSchema
    :ivar strict: Indicates whether strict validation is required.
    :vartype strict: bool
    """

    type: Literal["Function"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Indicates this tool is function-based. Required. Default value is \"Function\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The function/tool name. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An optional description for the function-based tool."""
    parameters: Optional["_models.JSONSchema"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A JSON schema describing the function's parameters."""
    strict: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Indicates whether strict validation is required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        parameters: Optional["_models.JSONSchema"] = None,
        strict: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="Function", **kwargs)


class ImageContent(AIContent, discriminator="image"):
    """A structured chat content item containing an image reference.

    :ivar type: Required. Default value is "image".
    :vartype type: str
    :ivar width: Width of the image in pixels (optional).
    :vartype width: int
    :ivar height: Height of the image in pixels (optional).
    :vartype height: int
    :ivar file_name: The file name for this binary content.
    :vartype file_name: str
    :ivar mime_type: The MIME type for this binary content.
    :vartype mime_type: str
    :ivar uri: URI where the binary content can be retrieved.
    :vartype uri: str
    :ivar data_uri: Data URI containing the binary content inlined.
    :vartype data_uri: str
    :ivar data: Raw bytes for the binary content.
    :vartype data: bytes
    """

    type: Literal["image"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"image\"."""
    width: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Width of the image in pixels (optional)."""
    height: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Height of the image in pixels (optional)."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """The file name for this binary content."""
    mime_type: Optional[str] = rest_field(name="mimeType", visibility=["read", "create", "update", "delete", "query"])
    """The MIME type for this binary content."""
    uri: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """URI where the binary content can be retrieved."""
    data_uri: Optional[str] = rest_field(name="dataUri", visibility=["read", "create", "update", "delete", "query"])
    """Data URI containing the binary content inlined."""
    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Raw bytes for the binary content."""

    @overload
    def __init__(
        self,
        *,
        width: Optional[int] = None,
        height: Optional[int] = None,
        file_name: Optional[str] = None,
        mime_type: Optional[str] = None,
        uri: Optional[str] = None,
        data_uri: Optional[str] = None,
        data: Optional[bytes] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="image", **kwargs)


class InputData(_model_base.Model):
    """Abstract data class.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    InputDataset

    :ivar type: Type of the data. Required. Default value is None.
    :vartype type: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Type of the data. Required. Default value is None."""

    @overload
    def __init__(
        self,
        *,
        type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InputDataset(InputData, discriminator="dataset"):
    """Dataset as source for evaluation.

    :ivar type: Required. Default value is "dataset".
    :vartype type: str
    :ivar id: Evaluation input data. Required.
    :vartype id: str
    """

    type: Literal["dataset"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"dataset\"."""
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Evaluation input data. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="dataset", **kwargs)


class JSONAny(_model_base.Model):
    """A JSON-compatible type that can be a primitive, object, or array.

    :ivar string_value: A string value, if present.
    :vartype string_value: str
    :ivar int_value: A 64-bit integer value, if present.
    :vartype int_value: int
    :ivar float_value: A floating-point (double precision) value, if present.
    :vartype float_value: float
    :ivar bool_value: A boolean value, if present.
    :vartype bool_value: bool
    :ivar null_value: Indicates this represents a JSON null if set to true.
    :vartype null_value: bool
    :ivar array_value: A JSON array, if present, expressed as an array of JSONAny elements.
    :vartype array_value: list[~azure.ai.projects.dp1.models.JSONAny]
    :ivar object_value: A JSON object, if present, expressed as a dictionary from string to
     JSONAny.
    :vartype object_value: dict[str, ~azure.ai.projects.dp1.models.JSONAny]
    """

    string_value: Optional[str] = rest_field(
        name="stringValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """A string value, if present."""
    int_value: Optional[int] = rest_field(name="intValue", visibility=["read", "create", "update", "delete", "query"])
    """A 64-bit integer value, if present."""
    float_value: Optional[float] = rest_field(
        name="floatValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """A floating-point (double precision) value, if present."""
    bool_value: Optional[bool] = rest_field(
        name="boolValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """A boolean value, if present."""
    null_value: Optional[bool] = rest_field(
        name="nullValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates this represents a JSON null if set to true."""
    array_value: Optional[List["_models.JSONAny"]] = rest_field(
        name="arrayValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """A JSON array, if present, expressed as an array of JSONAny elements."""
    object_value: Optional[Dict[str, "_models.JSONAny"]] = rest_field(
        name="objectValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """A JSON object, if present, expressed as a dictionary from string to JSONAny."""

    @overload
    def __init__(
        self,
        *,
        string_value: Optional[str] = None,
        int_value: Optional[int] = None,
        float_value: Optional[float] = None,
        bool_value: Optional[bool] = None,
        null_value: Optional[bool] = None,
        array_value: Optional[List["_models.JSONAny"]] = None,
        object_value: Optional[Dict[str, "_models.JSONAny"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class JSONSchema(_model_base.Model):
    """Represents a JSON schema describing object properties and required fields.

    :ivar type: The JSON schema type (e.g., 'object', 'string', 'number'). Required.
    :vartype type: str
    :ivar properties: The properties defined in this JSON schema. Required.
    :vartype properties: dict[str, ~azure.ai.projects.dp1.models.JSONSchema]
    :ivar required: A list of required property names in this schema.
    :vartype required: list[str]
    """

    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The JSON schema type (e.g., 'object', 'string', 'number'). Required."""
    properties: Dict[str, "_models.JSONSchema"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties defined in this JSON schema. Required."""
    required: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A list of required property names in this schema."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        properties: Dict[str, "_models.JSONSchema"],
        required: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagedAzureAISearchIndex(Index, discriminator="ManagedAzureSearch"):
    """Managed Azure AI Search Index Definition.

    :ivar stage: Asset stage.
    :vartype stage: str
    :ivar id: A unique identifier for the asset, assetId probably?.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar version: The version of the resource. Required.
    :vartype version: str
    :ivar description: The asset description text.
    :vartype description: str
    :ivar tags: Tag dictionary. Tags can be added, removed, and updated.
    :vartype tags: dict[str, str]
    :ivar type: Type of index. Required. Managed Azure Search
    :vartype type: str or ~azure.ai.projects.dp1.models.MANAGED_AZURE_SEARCH
    :ivar vector_store_id: Vector store id of managed index. Required.
    :vartype vector_store_id: str
    """

    type: Literal[IndexType.MANAGED_AZURE_SEARCH] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Type of index. Required. Managed Azure Search"""
    vector_store_id: str = rest_field(name="vectorStoreId", visibility=["read", "create", "update", "delete", "query"])
    """Vector store id of managed index. Required."""

    @overload
    def __init__(
        self,
        *,
        vector_store_id: str,
        stage: Optional[str] = None,
        description: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=IndexType.MANAGED_AZURE_SEARCH, **kwargs)


class ModelDeployment(Deployment, discriminator="ModelDeployment"):
    """Model Deployment Definition.

    :ivar name: Name of the deployment. Required.
    :vartype name: str
    :ivar type: The type of the deployment. Required. Model deployment
    :vartype type: str or ~azure.ai.projects.dp1.models.MODEL_DEPLOYMENT
    :ivar model_name: Publisher-specific name of the deployed model. Required.
    :vartype model_name: str
    :ivar model_version: Publisher-specific version of the deployed model. Required.
    :vartype model_version: str
    :ivar model_publisher: Name of the deployed model's publisher. Required.
    :vartype model_publisher: str
    :ivar capabilities: Capabilities of deployed model. Required.
    :vartype capabilities: dict[str, str]
    :ivar sku: Sku of the model deployment. Required.
    :vartype sku: ~azure.ai.projects.dp1.models.Sku
    :ivar connection_name: Name of the connection the deployment comes from.
    :vartype connection_name: str
    """

    type: Literal[DeploymentType.MODEL_DEPLOYMENT] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The type of the deployment. Required. Model deployment"""
    model_name: str = rest_field(name="modelName", visibility=["read"])
    """Publisher-specific name of the deployed model. Required."""
    model_version: str = rest_field(name="modelVersion", visibility=["read"])
    """Publisher-specific version of the deployed model. Required."""
    model_publisher: str = rest_field(name="modelPublisher", visibility=["read"])
    """Name of the deployed model's publisher. Required."""
    capabilities: Dict[str, str] = rest_field(visibility=["read"])
    """Capabilities of deployed model. Required."""
    sku: "_models.Sku" = rest_field(visibility=["read"])
    """Sku of the model deployment. Required."""
    connection_name: Optional[str] = rest_field(name="connectionName", visibility=["read"])
    """Name of the connection the deployment comes from."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=DeploymentType.MODEL_DEPLOYMENT, **kwargs)


class NoneToolChoiceBehavior(ToolChoiceBehavior, discriminator="none"):
    """Behavior specifying that no tools may be chosen.

    :ivar type: Indicates this behavior is 'none'. Required. Default value is "none".
    :vartype type: str
    """

    type: Literal["none"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Indicates this behavior is 'none'. Required. Default value is \"none\"."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="none", **kwargs)


class OpenAIAgentModel(AgentModel, discriminator="openai"):
    """A specialized AgentModel for OpenAI-based providers.

    :ivar id: A unique model or deployment ID for this agent model. Required.
    :vartype id: str
    :ivar endpoint: An endpoint where the provider can be reached, if applicable.
    :vartype endpoint: str
    :ivar provider: Identifies this model as originating from OpenAI. Required. Default value is
     "openai".
    :vartype provider: str
    :ivar options: Provider-specific options for this OpenAI-based model. Required.
    :vartype options: ~azure.ai.projects.dp1.models.OpenAIModelOptions
    """

    provider: Literal["openai"] = rest_discriminator(name="provider", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Identifies this model as originating from OpenAI. Required. Default value is \"openai\"."""
    options: "_models.OpenAIModelOptions" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Provider-specific options for this OpenAI-based model. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        options: "_models.OpenAIModelOptions",
        endpoint: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, provider="openai", **kwargs)


class OpenAIModelOptions(_model_base.Model):
    """A set of provider-specific configuration and behavior options for OpenAI.

    :ivar temperature: The sampling temperature to use that controls the apparent creativity of
     generated completions.
     Higher values will make output more random while lower values will make results more focused
     and deterministic.
     It is not recommended to modify temperature and topP for the same completions request as the
     interaction of these two settings is difficult to predict.
    :vartype temperature: float
    :ivar top_p: An alternative to sampling with temperature called nucleus sampling. This value
     causes the
     model to consider the results of tokens with the provided probability mass. As an example, a
     value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     considered.
     It is not recommended to modify temperature and topP for the same completions request as the
     interaction of these two settings is difficult to predict.
    :vartype top_p: float
    """

    temperature: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The sampling temperature to use that controls the apparent creativity of generated completions.
     Higher values will make output more random while lower values will make results more focused
     and deterministic.
     It is not recommended to modify temperature and topP for the same completions request as the
     interaction of these two settings is difficult to predict."""
    top_p: Optional[float] = rest_field(name="topP", visibility=["read", "create", "update", "delete", "query"])
    """An alternative to sampling with temperature called nucleus sampling. This value causes the
     model to consider the results of tokens with the provided probability mass. As an example, a
     value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     considered.
     It is not recommended to modify temperature and topP for the same completions request as the
     interaction of these two settings is difficult to predict."""

    @overload
    def __init__(
        self,
        *,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenApiToolDefinition(AgentToolDefinition, discriminator="OpenAI.OpenApi"):
    """A tool definition for an OpenAI-based API described by an OpenAPI specification.

    :ivar options: Additional options that specify the behavior of this tool (also polymorphic).
    :vartype options: ~azure.ai.projects.dp1.models.AgentToolOptions
    :ivar override: A set of overrides for the tool's name, description, or parameters.
    :vartype override: ~azure.ai.projects.dp1.models.AgentToolDefinitionOverride
    :ivar type: Identifies this as an OpenAI OpenAPI-based tool definition. Required. Default value
     is "OpenAI.OpenApi".
    :vartype type: str
    :ivar name: The name of the OpenAPI-based tool. Required.
    :vartype name: str
    :ivar description: A description for the tool.
    :vartype description: str
    :ivar open_api_spec: A string containing the raw OpenAPI specification data. Required.
    :vartype open_api_spec: str
    """

    type: Literal["OpenAI.OpenApi"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Identifies this as an OpenAI OpenAPI-based tool definition. Required. Default value is
     \"OpenAI.OpenApi\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the OpenAPI-based tool. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description for the tool."""
    open_api_spec: str = rest_field(name="openApiSpec", visibility=["read", "create", "update", "delete", "query"])
    """A string containing the raw OpenAPI specification data. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        open_api_spec: str,
        options: Optional["_models.AgentToolOptions"] = None,
        override: Optional["_models.AgentToolDefinitionOverride"] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="OpenAI.OpenApi", **kwargs)


class PendingUploadRequest(_model_base.Model):
    """Represents a request for a pending upload.

    :ivar pending_upload_id: If PendingUploadId is not provided, a random GUID will be used.
    :vartype pending_upload_id: str
    :ivar connection_name: Name of Azure blob storage connection to use for generating temporary
     SAS token.
    :vartype connection_name: str
    :ivar pending_upload_type: TemporaryBlobReference is the only supported type. Required.
     Temporary Blob Reference is the only supported type.
    :vartype pending_upload_type: str or ~azure.ai.projects.dp1.models.TEMPORARY_BLOB_REFERENCE
    """

    pending_upload_id: Optional[str] = rest_field(
        name="pendingUploadId", visibility=["read", "create", "update", "delete", "query"]
    )
    """If PendingUploadId is not provided, a random GUID will be used."""
    connection_name: Optional[str] = rest_field(
        name="connectionName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of Azure blob storage connection to use for generating temporary SAS token."""
    pending_upload_type: Literal[PendingUploadType.TEMPORARY_BLOB_REFERENCE] = rest_field(
        name="pendingUploadType", visibility=["read", "create", "update", "delete", "query"]
    )
    """TemporaryBlobReference is the only supported type. Required. Temporary Blob Reference is the
     only supported type."""

    @overload
    def __init__(
        self,
        *,
        pending_upload_type: Literal[PendingUploadType.TEMPORARY_BLOB_REFERENCE],
        pending_upload_id: Optional[str] = None,
        connection_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PendingUploadResponse(_model_base.Model):
    """Represents the response for a pending upload request.

    :ivar blob_reference_for_consumption: Container-level read, write, list SAS. Required.
    :vartype blob_reference_for_consumption:
     ~azure.ai.projects.dp1.models.BlobReferenceForConsumption
    :ivar pending_upload_id: ID for this upload request. Required.
    :vartype pending_upload_id: str
    :ivar dataset_version: Version of dataset to be created if user did not specify version when
     initially creating upload.
    :vartype dataset_version: str
    :ivar pending_upload_type: TemporaryBlobReference is the only supported type. Required.
     Temporary Blob Reference is the only supported type.
    :vartype pending_upload_type: str or ~azure.ai.projects.dp1.models.TEMPORARY_BLOB_REFERENCE
    """

    blob_reference_for_consumption: "_models.BlobReferenceForConsumption" = rest_field(
        name="blobReferenceForConsumption", visibility=["read", "create", "update", "delete", "query"]
    )
    """Container-level read, write, list SAS. Required."""
    pending_upload_id: str = rest_field(
        name="pendingUploadId", visibility=["read", "create", "update", "delete", "query"]
    )
    """ID for this upload request. Required."""
    dataset_version: Optional[str] = rest_field(
        name="datasetVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Version of dataset to be created if user did not specify version when initially creating
     upload."""
    pending_upload_type: Literal[PendingUploadType.TEMPORARY_BLOB_REFERENCE] = rest_field(
        name="pendingUploadType", visibility=["read", "create", "update", "delete", "query"]
    )
    """TemporaryBlobReference is the only supported type. Required. Temporary Blob Reference is the
     only supported type."""

    @overload
    def __init__(
        self,
        *,
        blob_reference_for_consumption: "_models.BlobReferenceForConsumption",
        pending_upload_id: str,
        pending_upload_type: Literal[PendingUploadType.TEMPORARY_BLOB_REFERENCE],
        dataset_version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RefusalContent(AIContent, discriminator="refusal"):
    """A structured chat content item containing model refusal information for a structured outputs
    request.

    :ivar type: Required. Default value is "refusal".
    :vartype type: str
    :ivar refusal: Reason for refusal. Required.
    :vartype refusal: str
    """

    type: Literal["refusal"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"refusal\"."""
    refusal: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reason for refusal. Required."""

    @overload
    def __init__(
        self,
        *,
        refusal: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="refusal", **kwargs)


class RequiredToolChoiceBehavior(ToolChoiceBehavior, discriminator="required"):
    """Behavior specifying that the agent must always use the listed tools.

    :ivar type: Indicates this behavior is 'required'. Required. Default value is "required".
    :vartype type: str
    :ivar tool_names: The tool names that the agent must use. Required.
    :vartype tool_names: list[str]
    """

    type: Literal["required"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Indicates this behavior is 'required'. Required. Default value is \"required\"."""
    tool_names: List[str] = rest_field(name="toolNames", visibility=["read", "create", "update", "delete", "query"])
    """The tool names that the agent must use. Required."""

    @overload
    def __init__(
        self,
        *,
        tool_names: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="required", **kwargs)


class Run(_model_base.Model):
    """An agent-generated run record, including messages and status.

    :ivar agent_id: Unique identifier for the agent responsible for the run. Required.
    :vartype agent_id: str
    :ivar run_id: Unique identifier for this run. Required.
    :vartype run_id: str
    :ivar created_at: Timestamp when the run was initiated (Unix time). Required.
    :vartype created_at: int
    :ivar completed_at: Timestamp when the run finished processing (Unix time). Required.
    :vartype completed_at: int
    :ivar status: Final status of the run request. Required. Is one of the following types:
     Literal["inProgress"], Literal["incomplete"], Literal["cancelled"], Literal["failed"],
     Literal["completed"], str
    :vartype status: str or str or str or str or str or str
    :ivar output: List of output messages generated by the agent. Required.
    :vartype output: list[~azure.ai.projects.dp1.models.ChatMessage]
    :ivar thread_id: Identifier for the thread associated with the run. Required.
    :vartype thread_id: str
    :ivar usage: Token usage details for this run. Required.
    :vartype usage: ~azure.ai.projects.dp1.models.CompletionUsage
    :ivar incomplete_details: Details about why the response is incomplete, if applicable.
     Required.
    :vartype incomplete_details: ~azure.ai.projects.dp1.models.RunIncompleteDetails
    :ivar agent: The agent responsible for generating the run. Required.
    :vartype agent: ~azure.ai.projects.dp1.models.AgentOptions
    :ivar input: The list of input messages for the run. Required.
    :vartype input: list[~azure.ai.projects.dp1.models.ChatMessage]
    :ivar metadata: Optional metadata associated with the run request.
    :vartype metadata: dict[str, str]
    :ivar options: Optional configuration for run generation.
    :vartype options: ~azure.ai.projects.dp1.models.RunOptions
    :ivar user_id: Identifier for the user making the request.
    :vartype user_id: str
    :ivar store: Flag indicating whether to store the run and associated messages.
    :vartype store: bool
    """

    agent_id: str = rest_field(name="agentId", visibility=["read", "create", "update", "delete", "query"])
    """Unique identifier for the agent responsible for the run. Required."""
    run_id: str = rest_field(name="runId", visibility=["read"])
    """Unique identifier for this run. Required."""
    created_at: int = rest_field(name="createdAt", visibility=["read", "create", "update", "delete", "query"])
    """Timestamp when the run was initiated (Unix time). Required."""
    completed_at: int = rest_field(name="completedAt", visibility=["read", "create", "update", "delete", "query"])
    """Timestamp when the run finished processing (Unix time). Required."""
    status: Union[
        Literal["inProgress"], Literal["incomplete"], Literal["cancelled"], Literal["failed"], Literal["completed"], str
    ] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Final status of the run request. Required. Is one of the following types:
     Literal[\"inProgress\"], Literal[\"incomplete\"], Literal[\"cancelled\"], Literal[\"failed\"],
     Literal[\"completed\"], str"""
    output: List["_models.ChatMessage"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of output messages generated by the agent. Required."""
    thread_id: str = rest_field(name="threadId", visibility=["read", "create", "update", "delete", "query"])
    """Identifier for the thread associated with the run. Required."""
    usage: "_models.CompletionUsage" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Token usage details for this run. Required."""
    incomplete_details: "_models.RunIncompleteDetails" = rest_field(
        name="incompleteDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details about why the response is incomplete, if applicable. Required."""
    agent: "_models.AgentOptions" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The agent responsible for generating the run. Required."""
    input: List["_models.ChatMessage"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The list of input messages for the run. Required."""
    metadata: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional metadata associated with the run request."""
    options: Optional["_models.RunOptions"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional configuration for run generation."""
    user_id: Optional[str] = rest_field(name="userId", visibility=["read", "create", "update", "delete", "query"])
    """Identifier for the user making the request."""
    store: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Flag indicating whether to store the run and associated messages."""

    @overload
    def __init__(
        self,
        *,
        agent_id: str,
        created_at: int,
        completed_at: int,
        status: Union[
            Literal["inProgress"],
            Literal["incomplete"],
            Literal["cancelled"],
            Literal["failed"],
            Literal["completed"],
            str,
        ],
        output: List["_models.ChatMessage"],
        thread_id: str,
        usage: "_models.CompletionUsage",
        incomplete_details: "_models.RunIncompleteDetails",
        agent: "_models.AgentOptions",
        input: List["_models.ChatMessage"],
        metadata: Optional[Dict[str, str]] = None,
        options: Optional["_models.RunOptions"] = None,
        user_id: Optional[str] = None,
        store: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunIncompleteDetails(_model_base.Model):
    """RunIncompleteDetails.

    :ivar reason: Reason describing why the response is incomplete. Required.
    :vartype reason: str
    """

    reason: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Reason describing why the response is incomplete. Required."""

    @overload
    def __init__(
        self,
        *,
        reason: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunInputs(_model_base.Model):
    """Parameters for creating a new run request.

    :ivar run_id: Unique identifier for the run. Required.
    :vartype run_id: str
    :ivar agent: The agent responsible for generating the run. Required.
    :vartype agent: ~azure.ai.projects.dp1.models.Agent
    :ivar input: The list of input messages for the run. Required.
    :vartype input: list[~azure.ai.projects.dp1.models.ChatMessage]
    :ivar thread_id: Optional identifier for an existing conversation thread.
    :vartype thread_id: str
    :ivar metadata: Optional metadata associated with the run request.
    :vartype metadata: dict[str, str]
    :ivar options: Optional configuration for run generation.
    :vartype options: ~azure.ai.projects.dp1.models.RunOptions
    :ivar user_id: Identifier for the user making the request.
    :vartype user_id: str
    """

    run_id: str = rest_field(name="runId", visibility=["read"])
    """Unique identifier for the run. Required."""
    agent: "_models.Agent" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The agent responsible for generating the run. Required."""
    input: List["_models.ChatMessage"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The list of input messages for the run. Required."""
    thread_id: Optional[str] = rest_field(name="threadId", visibility=["read", "create", "update", "delete", "query"])
    """Optional identifier for an existing conversation thread."""
    metadata: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional metadata associated with the run request."""
    options: Optional["_models.RunOptions"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Optional configuration for run generation."""
    user_id: Optional[str] = rest_field(name="userId", visibility=["read", "create", "update", "delete", "query"])
    """Identifier for the user making the request."""

    @overload
    def __init__(
        self,
        *,
        agent: "_models.Agent",
        input: List["_models.ChatMessage"],
        thread_id: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
        options: Optional["_models.RunOptions"] = None,
        user_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunOptions(_model_base.Model):
    """Represents advanced options for controlling agent runs.

    :ivar truncation_strategy: Strategy for truncating messages when input exceeds model limits.
    :vartype truncation_strategy: ~azure.ai.projects.dp1.models.TruncationStrategy
    """

    truncation_strategy: Optional["_models.TruncationStrategy"] = rest_field(
        name="truncationStrategy", visibility=["read", "create", "update", "delete", "query"]
    )
    """Strategy for truncating messages when input exceeds model limits."""

    @overload
    def __init__(
        self,
        *,
        truncation_strategy: Optional["_models.TruncationStrategy"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SasCredential(BaseCredential, discriminator="SAS"):
    """SAS Credential definition.

    :ivar sas_token: SAS Token. Required.
    :vartype sas_token: str
    :ivar type: Required.
    :vartype type: str or ~azure.ai.projects.dp1.models.SAS
    """

    sas_token: str = rest_field(name="sasToken", visibility=["read"])
    """SAS Token. Required."""
    type: Literal[CredentialType.SAS] = rest_discriminator(name="type", visibility=["read"])  # type: ignore
    """Required."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type=CredentialType.SAS, **kwargs)


class Sku(_model_base.Model):
    """Sku information.

    :ivar capacity: Sku capacity. Required.
    :vartype capacity: int
    :ivar family: Sku family. Required.
    :vartype family: str
    :ivar name: Sku name. Required.
    :vartype name: str
    :ivar size: Sku size. Required.
    :vartype size: str
    :ivar tier: Sku tier. Required.
    :vartype tier: str
    """

    capacity: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Sku capacity. Required."""
    family: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Sku family. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Sku name. Required."""
    size: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Sku size. Required."""
    tier: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Sku tier. Required."""

    @overload
    def __init__(
        self,
        *,
        capacity: int,
        family: str,
        name: str,
        size: str,
        tier: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemMessage(ChatMessage, discriminator="system"):
    """A system message within a chat, always with the 'system' role.

    :ivar user_id: The ID of the user who created the message (if applicable).
    :vartype user_id: str
    :ivar agent_id: The ID of the agent who created the message (if applicable).
    :vartype agent_id: str
    :ivar message_id: A unique identifier for this message. Required.
    :vartype message_id: str
    :ivar agent_run_id: A unique run ID, if this message was generated by a run process.
    :vartype agent_run_id: str
    :ivar thread_id: The thread to which this message belongs. Required.
    :vartype thread_id: str
    :ivar author_name: An optional display name for the author.
    :vartype author_name: str
    :ivar created_at: The timestamp (in Unix time) when this message was created.
    :vartype created_at: int
    :ivar completed_at: The timestamp (in Unix time) when this message was completed, if
     applicable.
    :vartype completed_at: int
    :ivar role: Always 'system' for system messages. Required.
    :vartype role: str or ~azure.ai.projects.dp1.models.SYSTEM
    :ivar content: The contents of the system message. Required.
    :vartype content: list[~azure.ai.projects.dp1.models.TextContent]
    """

    role: Literal[AuthorRole.SYSTEM] = rest_discriminator(name="role", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Always 'system' for system messages. Required."""
    content: List["_models.TextContent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The contents of the system message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: List["_models.TextContent"],
        user_id: Optional[str] = None,
        agent_id: Optional[str] = None,
        agent_run_id: Optional[str] = None,
        author_name: Optional[str] = None,
        created_at: Optional[int] = None,
        completed_at: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, role=AuthorRole.SYSTEM, **kwargs)


class TextContent(AIContent, discriminator="text"):
    """A structured chat content item containing plain text.

    :ivar type: Required. Default value is "text".
    :vartype type: str
    :ivar text: The text content. Required.
    :vartype text: str
    :ivar annotations: A list of annotations in the text content. Required.
    :vartype annotations: list[~azure.ai.projects.dp1.models.Annotations]
    """

    type: Literal["text"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"text\"."""
    text: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The text content. Required."""
    annotations: List["_models.Annotations"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A list of annotations in the text content. Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        annotations: List["_models.Annotations"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="text", **kwargs)


class Thread(_model_base.Model):
    """Represents a chat thread, which can contain multiple messages.

    :ivar thread_id: A unique identifier for this thread. Required.
    :vartype thread_id: str
    :ivar messages: A list of messages in this thread. Required.
    :vartype messages: list[~azure.ai.projects.dp1.models.ChatMessage]
    """

    thread_id: str = rest_field(name="threadId", visibility=["read"])
    """A unique identifier for this thread. Required."""
    messages: List["_models.ChatMessage"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A list of messages in this thread. Required."""

    @overload
    def __init__(
        self,
        *,
        messages: List["_models.ChatMessage"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ToolCallContent(AIContent, discriminator="toolCall"):
    """A structured chat content item describing a tool call request.

    :ivar type: Required. Default value is "toolCall".
    :vartype type: str
    :ivar name: The name of the tool to call. Required.
    :vartype name: str
    :ivar tool_call_id: The unique ID of the tool call. Required.
    :vartype tool_call_id: str
    :ivar arguments: Arguments passed to this tool call, expressed as JSON-like data rather than
     ``unknown``.
    :vartype arguments: ~azure.ai.projects.dp1.models.JSONAny
    """

    type: Literal["toolCall"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"toolCall\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the tool to call. Required."""
    tool_call_id: str = rest_field(name="toolCallId", visibility=["read", "create", "update", "delete", "query"])
    """The unique ID of the tool call. Required."""
    arguments: Optional["_models.JSONAny"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Arguments passed to this tool call, expressed as JSON-like data rather than ``unknown``."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        tool_call_id: str,
        arguments: Optional["_models.JSONAny"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="toolCall", **kwargs)


class ToolMessage(ChatMessage, discriminator="tool"):
    """A tool message within a chat, always with the 'tool' role.

    :ivar user_id: The ID of the user who created the message (if applicable).
    :vartype user_id: str
    :ivar agent_id: The ID of the agent who created the message (if applicable).
    :vartype agent_id: str
    :ivar message_id: A unique identifier for this message. Required.
    :vartype message_id: str
    :ivar agent_run_id: A unique run ID, if this message was generated by a run process.
    :vartype agent_run_id: str
    :ivar thread_id: The thread to which this message belongs. Required.
    :vartype thread_id: str
    :ivar author_name: An optional display name for the author.
    :vartype author_name: str
    :ivar created_at: The timestamp (in Unix time) when this message was created.
    :vartype created_at: int
    :ivar completed_at: The timestamp (in Unix time) when this message was completed, if
     applicable.
    :vartype completed_at: int
    :ivar role: Always 'tool' for tool messages. Required.
    :vartype role: str or ~azure.ai.projects.dp1.models.TOOL
    :ivar content: The contents of the tool message. Required.
    :vartype content: list[~azure.ai.projects.dp1.models.ToolResultContent]
    """

    role: Literal[AuthorRole.TOOL] = rest_discriminator(name="role", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Always 'tool' for tool messages. Required."""
    content: List["_models.ToolResultContent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The contents of the tool message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: List["_models.ToolResultContent"],
        user_id: Optional[str] = None,
        agent_id: Optional[str] = None,
        agent_run_id: Optional[str] = None,
        author_name: Optional[str] = None,
        created_at: Optional[int] = None,
        completed_at: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, role=AuthorRole.TOOL, **kwargs)


class ToolResultContent(AIContent, discriminator="toolResult"):
    """A structured chat content item describing a tool result.

    :ivar type: Required. Default value is "toolResult".
    :vartype type: str
    :ivar tool_call_id: The ID of the tool call to which this result pertains. Required.
    :vartype tool_call_id: str
    :ivar results: The results returned from the tool, using JSONAny instead of ``unknown``.
    :vartype results: ~azure.ai.projects.dp1.models.JSONAny
    """

    type: Literal["toolResult"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"toolResult\"."""
    tool_call_id: str = rest_field(name="toolCallId", visibility=["read", "create", "update", "delete", "query"])
    """The ID of the tool call to which this result pertains. Required."""
    results: Optional["_models.JSONAny"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The results returned from the tool, using JSONAny instead of ``unknown``."""

    @overload
    def __init__(
        self,
        *,
        tool_call_id: str,
        results: Optional["_models.JSONAny"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="toolResult", **kwargs)


class TruncationStrategy(_model_base.Model):
    """Describes how to truncate messages if they exceed model or provider limits.

    :ivar type: The type of truncation strategy to apply. Required. Is one of the following types:
     Literal["auto"], Literal["lastMessages"], str
    :vartype type: str or str or str
    :ivar last_messages: The number of most recent messages to retain when using 'lastMessages'
     strategy.
    :vartype last_messages: int
    """

    type: Union[Literal["auto"], Literal["lastMessages"], str] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of truncation strategy to apply. Required. Is one of the following types:
     Literal[\"auto\"], Literal[\"lastMessages\"], str"""
    last_messages: Optional[int] = rest_field(
        name="lastMessages", visibility=["read", "create", "update", "delete", "query"]
    )
    """The number of most recent messages to retain when using 'lastMessages' strategy."""

    @overload
    def __init__(
        self,
        *,
        type: Union[Literal["auto"], Literal["lastMessages"], str],
        last_messages: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserMessage(ChatMessage, discriminator="user"):
    """A user message within a chat, always with the 'user' role.

    :ivar user_id: The ID of the user who created the message (if applicable).
    :vartype user_id: str
    :ivar agent_id: The ID of the agent who created the message (if applicable).
    :vartype agent_id: str
    :ivar message_id: A unique identifier for this message. Required.
    :vartype message_id: str
    :ivar agent_run_id: A unique run ID, if this message was generated by a run process.
    :vartype agent_run_id: str
    :ivar thread_id: The thread to which this message belongs. Required.
    :vartype thread_id: str
    :ivar author_name: An optional display name for the author.
    :vartype author_name: str
    :ivar created_at: The timestamp (in Unix time) when this message was created.
    :vartype created_at: int
    :ivar completed_at: The timestamp (in Unix time) when this message was completed, if
     applicable.
    :vartype completed_at: int
    :ivar role: Always 'user' for user messages. Required.
    :vartype role: str or ~azure.ai.projects.dp1.models.USER
    :ivar content: The contents of the user message. Required.
    :vartype content: list[~azure.ai.projects.dp1.models.TextContent or
     ~azure.ai.projects.dp1.models.ImageContent or ~azure.ai.projects.dp1.models.AudioContent or
     ~azure.ai.projects.dp1.models.VideoContent or ~azure.ai.projects.dp1.models.FileContent]
    """

    role: Literal[AuthorRole.USER] = rest_discriminator(name="role", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Always 'user' for user messages. Required."""
    content: List[
        Union[
            "_models.TextContent",
            "_models.ImageContent",
            "_models.AudioContent",
            "_models.VideoContent",
            "_models.FileContent",
        ]
    ] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The contents of the user message. Required."""

    @overload
    def __init__(
        self,
        *,
        content: List[
            Union[
                "_models.TextContent",
                "_models.ImageContent",
                "_models.AudioContent",
                "_models.VideoContent",
                "_models.FileContent",
            ]
        ],
        user_id: Optional[str] = None,
        agent_id: Optional[str] = None,
        agent_run_id: Optional[str] = None,
        author_name: Optional[str] = None,
        created_at: Optional[int] = None,
        completed_at: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, role=AuthorRole.USER, **kwargs)


class VideoContent(AIContent, discriminator="video"):
    """A structured chat content item containing a video reference.

    :ivar type: Required. Default value is "video".
    :vartype type: str
    :ivar duration: Duration of video in seconds (optional).
    :vartype duration: int
    :ivar width: Width of video in pixels (optional).
    :vartype width: int
    :ivar height: Height of video in pixels (optional).
    :vartype height: int
    :ivar file_name: The file name for this binary content.
    :vartype file_name: str
    :ivar mime_type: The MIME type for this binary content.
    :vartype mime_type: str
    :ivar uri: URI where the binary content can be retrieved.
    :vartype uri: str
    :ivar data_uri: Data URI containing the binary content inlined.
    :vartype data_uri: str
    :ivar data: Raw bytes for the binary content.
    :vartype data: bytes
    """

    type: Literal["video"] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Required. Default value is \"video\"."""
    duration: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Duration of video in seconds (optional)."""
    width: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Width of video in pixels (optional)."""
    height: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Height of video in pixels (optional)."""
    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """The file name for this binary content."""
    mime_type: Optional[str] = rest_field(name="mimeType", visibility=["read", "create", "update", "delete", "query"])
    """The MIME type for this binary content."""
    uri: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """URI where the binary content can be retrieved."""
    data_uri: Optional[str] = rest_field(name="dataUri", visibility=["read", "create", "update", "delete", "query"])
    """Data URI containing the binary content inlined."""
    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Raw bytes for the binary content."""

    @overload
    def __init__(
        self,
        *,
        duration: Optional[int] = None,
        width: Optional[int] = None,
        height: Optional[int] = None,
        file_name: Optional[str] = None,
        mime_type: Optional[str] = None,
        uri: Optional[str] = None,
        data_uri: Optional[str] = None,
        data: Optional[bytes] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, type="video", **kwargs)
