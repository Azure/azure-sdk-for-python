# ------------------------------------
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.
# ------------------------------------
"""Customize generated code here.

Follow our quickstart for examples: https://aka.ms/azsdk/python/dpcodegen/python/customize
"""
from typing import List
from typing import Any, Dict, Iterator, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import AuthorRole, CredentialType, DatasetType, DeploymentType, IndexType, PendingUploadType

if TYPE_CHECKING:
    from .. import models as _models

from ._models import RunOutputs as RunOutputsGenerated

class RunOutputs(RunOutputsGenerated):
    """Fields describing the final run outcome, including status, output messages, and usage.

    :ivar status: Final status of the run request. Known values: 'inProgress', 'incomplete',
     'cancelled', 'failed', 'completed' - or custom string. Required. Known values are:
     "inProgress", "incomplete", "cancelled", "failed", and "completed".
    :vartype status: str or ~azure.ai.projects.dp1.models.RunOutputsStatus
    :ivar messages: List of output messages generated by the agent. Required.
    :vartype messages: list[~azure.ai.projects.dp1.models.ChatMessage]
    :ivar usage: Token usage details for this run. Required.
    :vartype usage: ~azure.ai.projects.dp1.models.CompletionUsage
    :ivar incomplete_details: Details about why the response is incomplete, if applicable.
    :vartype incomplete_details: ~azure.ai.projects.dp1.models.RunOutputsIncompleteDetails
    """

    status: Union[str, "_models.RunOutputsStatus"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Final status of the run request. Known values: 'inProgress', 'incomplete', 'cancelled',
     'failed', 'completed' - or custom string. Required. Known values are: \"inProgress\",
     \"incomplete\", \"cancelled\", \"failed\", and \"completed\"."""
    messages: List["_models.ChatMessage"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of output messages generated by the agent. Required."""
    usage: "_models.CompletionUsage" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Token usage details for this run. Required."""
    incomplete_details: Optional["_models.RunOutputsIncompleteDetails"] = rest_field(
        name="incompleteDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details about why the response is incomplete, if applicable."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.RunOutputsStatus"],
        messages: List["_models.ChatMessage"],
        usage: "_models.CompletionUsage",
        incomplete_details: Optional["_models.RunOutputsIncompleteDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)

    @property
    def text_messages(self) -> Iterator["_models.TextContent"]:
        """Iterates over messages and yields only those of type TextMessage."""
        for message in self.messages:
            for content in message.content:
                if isinstance(content, _models.TextContent):
                    yield content.text

    def __iter__(self) -> Iterator["_models.ChatMessage"]:
        """Allows iteration over all messages."""
        return iter(self.messages)


__all__: List[str] = [
    "RunOutputs",
]  # Add all objects you want publicly available to users at this package level


def patch_sdk():
    """Do not remove from this file.

    `patch_sdk` is a last resort escape hatch that allows you to do customizations
    you can't accomplish using the techniques described in
    https://aka.ms/azsdk/python/dpcodegen/python/customize
    """
