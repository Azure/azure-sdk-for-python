# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AuthorRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Possible roles of the message author."""

    USER = "user"
    AGENT = "agent"
    SYSTEM = "system"
    TOOL = "tool"
    DEVELOPER = "developer"


class ConnectionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The Type (or category) of the connection."""

    AZURE_OPEN_AI = "AzureOpenAI"
    """Azure OpenAI Service"""
    AZURE_BLOB_STORAGE = "AzureBlob"
    """Azure Blob Storage"""
    AZURE_AI_SEARCH = "CognitiveSearch"
    """Azure AI Search"""
    COSMOS_DB = "CosmosDB"
    """CosmosDB"""
    API_KEY = "ApiKey"
    """Generic connection that uses API Key authentication"""
    APPLICATION_INSIGHTS = "AppInsights"
    """Application Insights"""
    CUSTOM = "CustomKeys"
    """Custom Keys"""


class CredentialType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The different Credential types."""

    API_KEY = "ApiKey"
    AAD = "AAD"
    SAS = "SAS"


class DatasetType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum to determine the type of data."""

    URI_FILE = "uri_file"
    """URI file."""
    URI_FOLDER = "uri_folder"
    """URI folder."""


class DeploymentType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Represents the type of the deployment. Known literal is 'ModelDeployment'."""

    MODEL_DEPLOYMENT = "ModelDeployment"
    """Model deployment"""


class IndexType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enumerates known index types, but also allows any custom string fallback."""

    AZURE_SEARCH = "AzureSearch"
    """Azure search"""
    COSMOS_DB = "CosmosDBNoSqlVectorStore"
    """CosmosDB"""
    MANAGED_AZURE_SEARCH = "ManagedAzureSearch"
    """Managed Azure Search"""


class ListViewType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """List View Type Definition."""

    ACTIVE_ONLY = "ActiveOnly"
    """List only active items."""
    ARCHIVED_ONLY = "ArchivedOnly"
    """List only archived items."""
    ALL = "All"
    """List all items."""


class PendingUploadType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of pending upload."""

    NONE = "None"
    """No pending upload."""
    TEMPORARY_BLOB_REFERENCE = "TemporaryBlobReference"
    """Temporary Blob Reference is the only supported type."""


class RepeatabilityResult(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Repeatability Result header options."""

    ACCEPTED = "accepted"
    """If the request was accepted and the server guarantees that the server state reflects a single
    execution of the operation."""
    REJECTED = "rejected"
    """If the request was rejected because the combination of Repeatability-First-Sent and
    Repeatability-Request-ID were invalid
    or because the Repeatability-First-Sent value was outside the range of values held by the
    server."""


class RunOutputsStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Known status values for a run, plus a fallback string for unrecognized statuses."""

    IN_PROGRESS = "inProgress"
    """The run is ongoing."""
    INCOMPLETE = "incomplete"
    """The run did not produce a complete output."""
    CANCELLED = "cancelled"
    """The run was canceled."""
    FAILED = "failed"
    """The run failed."""
    COMPLETED = "completed"
    """The run completed successfully."""


class TruncationStrategyType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enumerates known truncation strategy types, but also allows any custom fallback string."""

    AUTO = "auto"
    """Automatically truncate messages to fit limits."""
    LAST_MESSAGES = "lastMessages"
    """Truncate older messages, keeping only the last few."""
