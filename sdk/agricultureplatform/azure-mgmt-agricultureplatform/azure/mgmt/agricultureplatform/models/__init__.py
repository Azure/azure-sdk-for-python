# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=wrong-import-position

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ._patch import *  # pylint: disable=unused-wildcard-import


from ._models import (  # type: ignore
    AgriServiceConfig,
    AgriServiceResource,
    AgriServiceResourceProperties,
    AgriServiceResourceUpdate,
    AgriServiceResourceUpdateProperties,
    AvailableAgriSolutionListResult,
    DataConnectorCredentialMap,
    DataConnectorCredentials,
    DataManagerForAgricultureSolution,
    ErrorAdditionalInfo,
    ErrorDetail,
    ErrorResponse,
    InstalledSolutionMap,
    ManagedOnBehalfOfConfiguration,
    ManagedServiceIdentity,
    MarketPlaceOfferDetails,
    MoboBrokerResource,
    Operation,
    OperationDisplay,
    Resource,
    Sku,
    Solution,
    SystemData,
    TrackedResource,
    UserAssignedIdentity,
)

from ._enums import (  # type: ignore
    ActionType,
    AuthCredentialsKind,
    CreatedByType,
    ManagedServiceIdentityType,
    Origin,
    ProvisioningState,
    SkuTier,
)
from ._patch import __all__ as _patch_all
from ._patch import *
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "AgriServiceConfig",
    "AgriServiceResource",
    "AgriServiceResourceProperties",
    "AgriServiceResourceUpdate",
    "AgriServiceResourceUpdateProperties",
    "AvailableAgriSolutionListResult",
    "DataConnectorCredentialMap",
    "DataConnectorCredentials",
    "DataManagerForAgricultureSolution",
    "ErrorAdditionalInfo",
    "ErrorDetail",
    "ErrorResponse",
    "InstalledSolutionMap",
    "ManagedOnBehalfOfConfiguration",
    "ManagedServiceIdentity",
    "MarketPlaceOfferDetails",
    "MoboBrokerResource",
    "Operation",
    "OperationDisplay",
    "Resource",
    "Sku",
    "Solution",
    "SystemData",
    "TrackedResource",
    "UserAssignedIdentity",
    "ActionType",
    "AuthCredentialsKind",
    "CreatedByType",
    "ManagedServiceIdentityType",
    "Origin",
    "ProvisioningState",
    "SkuTier",
]
__all__.extend([p for p in _patch_all if p not in __all__])  # pyright: ignore
_patch_sdk()
