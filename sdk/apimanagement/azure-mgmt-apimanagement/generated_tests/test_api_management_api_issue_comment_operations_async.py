# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.apimanagement.aio import ApiManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestApiManagementApiIssueCommentOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ApiManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_api_issue_comment_list_by_service(self, resource_group):
        response = self.client.api_issue_comment.list_by_service(
            resource_group_name=resource_group.name,
            service_name="str",
            api_id="str",
            issue_id="str",
            api_version="2024-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_api_issue_comment_get_entity_tag(self, resource_group):
        response = await self.client.api_issue_comment.get_entity_tag(
            resource_group_name=resource_group.name,
            service_name="str",
            api_id="str",
            issue_id="str",
            comment_id="str",
            api_version="2024-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_api_issue_comment_get(self, resource_group):
        response = await self.client.api_issue_comment.get(
            resource_group_name=resource_group.name,
            service_name="str",
            api_id="str",
            issue_id="str",
            comment_id="str",
            api_version="2024-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_api_issue_comment_create_or_update(self, resource_group):
        response = await self.client.api_issue_comment.create_or_update(
            resource_group_name=resource_group.name,
            service_name="str",
            api_id="str",
            issue_id="str",
            comment_id="str",
            parameters={
                "createdDate": "2020-02-20 00:00:00",
                "id": "str",
                "name": "str",
                "text": "str",
                "type": "str",
                "userId": "str",
            },
            api_version="2024-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_api_issue_comment_delete(self, resource_group):
        response = await self.client.api_issue_comment.delete(
            resource_group_name=resource_group.name,
            service_name="str",
            api_id="str",
            issue_id="str",
            comment_id="str",
            if_match="str",
            api_version="2024-05-01",
        )

        # please add some check logic here by yourself
        # ...
