# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AvailableProviderOperation(Model):
    """Class represents provider operation.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Gets or Sets Name of the operations
    :type name: str
    :param display: Gets or sets Display information
     Contains the localized display information for this particular
     operation/action
    :type display:
     ~azure.mgmt.hybriddatamanager.models.AvailableProviderOperationDisplay
    :param origin: Gets or sets Origin
     The intended executor of the operation; governs the display of the
     operation in the RBAC UX and the audit logs UX.
     Default value is “user,system”
    :type origin: str
    :param properties: Gets or sets Properties
     Reserved for future use
    :type properties: object
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'AvailableProviderOperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(AvailableProviderOperation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)
        self.properties = kwargs.get('properties', None)


class AvailableProviderOperationDisplay(Model):
    """Contains the localized display information for this particular operation /
    action.
    These value will be used by several clients for
    (1) custom role definitions for RBAC;
    (2) complex query filters for the event service; and (3) audit history /
    records for management operations.

    :param provider: Gets or sets Provider
     The localized friendly form of the resource provider name – it is expected
     to also include the publisher/company responsible.
     It should use Title Casing and begin with “Microsoft” for 1st party
     services.
    :type provider: str
    :param resource: Gets or sets Resource
     The localized friendly form of the resource type related to this
     action/operation – it should match the public documentation for the
     resource provider.
     It should use Title Casing – for examples, please refer to the “name”
     section.
    :type resource: str
    :param operation: Gets or sets Operation
     The localized friendly name for the operation, as it should be shown to
     the user.
     It should be concise (to fit in drop downs) but clear (i.e.
     self-documenting). It should use Title Casing and include the
     entity/resource to which it applies.
    :type operation: str
    :param description: Gets or sets Description
     The localized friendly description for the operation, as it should be
     shown to the user.
     It should be thorough, yet concise – it will be used in tool tips and
     detailed views.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AvailableProviderOperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class CustomerSecret(Model):
    """The pair of customer secret.

    All required parameters must be populated in order to send to Azure.

    :param key_identifier: Required. The identifier to the data service input
     object which this secret corresponds to.
    :type key_identifier: str
    :param key_value: Required. It contains the encrypted customer secret.
    :type key_value: str
    :param algorithm: Required. The encryption algorithm used to encrypt data.
     Possible values include: 'None', 'RSA1_5', 'RSA_OAEP', 'PlainText'
    :type algorithm: str or
     ~azure.mgmt.hybriddatamanager.models.SupportedAlgorithm
    """

    _validation = {
        'key_identifier': {'required': True},
        'key_value': {'required': True},
        'algorithm': {'required': True},
    }

    _attribute_map = {
        'key_identifier': {'key': 'keyIdentifier', 'type': 'str'},
        'key_value': {'key': 'keyValue', 'type': 'str'},
        'algorithm': {'key': 'algorithm', 'type': 'SupportedAlgorithm'},
    }

    def __init__(self, **kwargs):
        super(CustomerSecret, self).__init__(**kwargs)
        self.key_identifier = kwargs.get('key_identifier', None)
        self.key_value = kwargs.get('key_value', None)
        self.algorithm = kwargs.get('algorithm', None)


class Resource(Model):
    """Model of the Resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The Resource Id.
    :vartype id: str
    :ivar name: The Resource Name.
    :vartype name: str
    :ivar type: The Resource type.
    :vartype type: str
    :param location: Required. The location of the resource. This will be one
     of the supported and registered Azure Geo Regions (e.g. West US, East
     US, Southeast Asia, etc.). The geo region of a resource cannot be changed
     once it is created, but if an identical geo
     region is specified on update the request will succeed.
    :type location: str
    :param tags: The list of key value pairs that describe the resource. These
     tags can be used in viewing and grouping this resource
     (across resource groups).
    :type tags: dict[str, str]
    :param sku: The sku type.
    :type sku: ~azure.mgmt.hybriddatamanager.models.Sku
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'Sku'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.sku = kwargs.get('sku', None)


class DataManager(Resource):
    """The DataManager resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The Resource Id.
    :vartype id: str
    :ivar name: The Resource Name.
    :vartype name: str
    :ivar type: The Resource type.
    :vartype type: str
    :param location: Required. The location of the resource. This will be one
     of the supported and registered Azure Geo Regions (e.g. West US, East
     US, Southeast Asia, etc.). The geo region of a resource cannot be changed
     once it is created, but if an identical geo
     region is specified on update the request will succeed.
    :type location: str
    :param tags: The list of key value pairs that describe the resource. These
     tags can be used in viewing and grouping this resource
     (across resource groups).
    :type tags: dict[str, str]
    :param sku: The sku type.
    :type sku: ~azure.mgmt.hybriddatamanager.models.Sku
    :param etag: Etag of the Resource.
    :type etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataManager, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)


class DataManagerUpdateParameter(Model):
    """The DataManagerUpdateParameter.

    :param sku: The sku type.
    :type sku: ~azure.mgmt.hybriddatamanager.models.Sku
    :param tags: The list of key value pairs that describe the resource. These
     tags can be used in viewing and grouping this resource
     (across resource groups).
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'sku': {'key': 'sku', 'type': 'Sku'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(DataManagerUpdateParameter, self).__init__(**kwargs)
        self.sku = kwargs.get('sku', None)
        self.tags = kwargs.get('tags', None)


class DmsBaseObject(Model):
    """Base class for all objects under DataManager Service.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DmsBaseObject, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.type = None


class DataService(DmsBaseObject):
    """Data Service.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param state: Required. State of the data service. Possible values
     include: 'Disabled', 'Enabled', 'Supported'
    :type state: str or ~azure.mgmt.hybriddatamanager.models.State
    :param supported_data_sink_types: Supported data store types which can be
     used as a sink.
    :type supported_data_sink_types: list[str]
    :param supported_data_source_types: Supported data store types which can
     be used as a source.
    :type supported_data_source_types: list[str]
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'state': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'State'},
        'supported_data_sink_types': {'key': 'properties.supportedDataSinkTypes', 'type': '[str]'},
        'supported_data_source_types': {'key': 'properties.supportedDataSourceTypes', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(DataService, self).__init__(**kwargs)
        self.state = kwargs.get('state', None)
        self.supported_data_sink_types = kwargs.get('supported_data_sink_types', None)
        self.supported_data_source_types = kwargs.get('supported_data_source_types', None)


class DataStore(DmsBaseObject):
    """Data store.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param repository_id: Arm Id for the manager resource to which the data
     source is associated. This is optional.
    :type repository_id: str
    :param state: Required. State of the data source. Possible values include:
     'Disabled', 'Enabled', 'Supported'
    :type state: str or ~azure.mgmt.hybriddatamanager.models.State
    :param extended_properties: A generic json used differently by each data
     source type.
    :type extended_properties: object
    :param data_store_type_id: Required. The arm id of the data store type.
    :type data_store_type_id: str
    :param customer_secrets: List of customer secrets containing a key
     identifier and key value. The key identifier is a way for the specific
     data source to understand the key. Value contains customer secret
     encrypted by the encryptionKeys.
    :type customer_secrets:
     list[~azure.mgmt.hybriddatamanager.models.CustomerSecret]
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'state': {'required': True},
        'data_store_type_id': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'repository_id': {'key': 'properties.repositoryId', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'State'},
        'extended_properties': {'key': 'properties.extendedProperties', 'type': 'object'},
        'data_store_type_id': {'key': 'properties.dataStoreTypeId', 'type': 'str'},
        'customer_secrets': {'key': 'properties.customerSecrets', 'type': '[CustomerSecret]'},
    }

    def __init__(self, **kwargs):
        super(DataStore, self).__init__(**kwargs)
        self.repository_id = kwargs.get('repository_id', None)
        self.state = kwargs.get('state', None)
        self.extended_properties = kwargs.get('extended_properties', None)
        self.data_store_type_id = kwargs.get('data_store_type_id', None)
        self.customer_secrets = kwargs.get('customer_secrets', None)


class DataStoreFilter(Model):
    """Contains the information about the filters for the DataStore.

    :param data_store_type_id: The data store type id.
    :type data_store_type_id: str
    """

    _attribute_map = {
        'data_store_type_id': {'key': 'dataStoreTypeId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataStoreFilter, self).__init__(**kwargs)
        self.data_store_type_id = kwargs.get('data_store_type_id', None)


class DataStoreType(DmsBaseObject):
    """Data Store Type.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param repository_type: Arm type for the manager resource to which the
     data source type is associated. This is optional.
    :type repository_type: str
    :param state: Required. State of the data store type. Possible values
     include: 'Disabled', 'Enabled', 'Supported'
    :type state: str or ~azure.mgmt.hybriddatamanager.models.State
    :param supported_data_services_as_sink: Supported data services where it
     can be used as a sink.
    :type supported_data_services_as_sink: list[str]
    :param supported_data_services_as_source: Supported data services where it
     can be used as a source.
    :type supported_data_services_as_source: list[str]
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'state': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'repository_type': {'key': 'properties.repositoryType', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'State'},
        'supported_data_services_as_sink': {'key': 'properties.supportedDataServicesAsSink', 'type': '[str]'},
        'supported_data_services_as_source': {'key': 'properties.supportedDataServicesAsSource', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(DataStoreType, self).__init__(**kwargs)
        self.repository_type = kwargs.get('repository_type', None)
        self.state = kwargs.get('state', None)
        self.supported_data_services_as_sink = kwargs.get('supported_data_services_as_sink', None)
        self.supported_data_services_as_source = kwargs.get('supported_data_services_as_source', None)


class Error(Model):
    """Top level error for the job.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Error code that can be used to programmatically
     identify the error.
    :type code: str
    :param message: Describes the error in detail and provides debugging
     information.
    :type message: str
    """

    _validation = {
        'code': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Error, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class ErrorDetails(Model):
    """Error Details.

    :param error_message: Error message.
    :type error_message: str
    :param error_code: Error code.
    :type error_code: int
    :param recommended_action: Recommended action for the error.
    :type recommended_action: str
    :param exception_message: Contains the non localized exception message
    :type exception_message: str
    """

    _attribute_map = {
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'int'},
        'recommended_action': {'key': 'recommendedAction', 'type': 'str'},
        'exception_message': {'key': 'exceptionMessage', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ErrorDetails, self).__init__(**kwargs)
        self.error_message = kwargs.get('error_message', None)
        self.error_code = kwargs.get('error_code', None)
        self.recommended_action = kwargs.get('recommended_action', None)
        self.exception_message = kwargs.get('exception_message', None)


class Job(DmsBaseObject):
    """Data service job.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param status: Required. Status of the job. Possible values include:
     'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
     'Cancelled', 'Cancelling'
    :type status: str or ~azure.mgmt.hybriddatamanager.models.JobStatus
    :param start_time: Required. Time at which the job was started in UTC ISO
     8601 format.
    :type start_time: datetime
    :param end_time: Time at which the job ended in UTC ISO 8601 format.
    :type end_time: datetime
    :param is_cancellable: Required. Describes whether the job is cancellable.
     Possible values include: 'NotCancellable', 'Cancellable'
    :type is_cancellable: str or
     ~azure.mgmt.hybriddatamanager.models.IsJobCancellable
    :param bytes_processed: Number of bytes processed by the job as of now.
    :type bytes_processed: long
    :param items_processed: Number of items processed by the job as of now
    :type items_processed: long
    :param total_bytes_to_process: Number of bytes to be processed by the job
     in total.
    :type total_bytes_to_process: long
    :param total_items_to_process: Number of items to be processed by the job
     in total
    :type total_items_to_process: long
    :param details: Details of a job run. This field will only be sent for
     expand details filter.
    :type details: ~azure.mgmt.hybriddatamanager.models.JobDetails
    :param data_source_name: Name of the data source on which the job was
     triggered.
    :type data_source_name: str
    :param data_sink_name: Name of the data sink on which the job was
     triggered.
    :type data_sink_name: str
    :param error: Top level error for the job.
    :type error: ~azure.mgmt.hybriddatamanager.models.Error
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'status': {'required': True},
        'start_time': {'required': True},
        'is_cancellable': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'status': {'key': 'status', 'type': 'JobStatus'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'is_cancellable': {'key': 'properties.isCancellable', 'type': 'IsJobCancellable'},
        'bytes_processed': {'key': 'properties.bytesProcessed', 'type': 'long'},
        'items_processed': {'key': 'properties.itemsProcessed', 'type': 'long'},
        'total_bytes_to_process': {'key': 'properties.totalBytesToProcess', 'type': 'long'},
        'total_items_to_process': {'key': 'properties.totalItemsToProcess', 'type': 'long'},
        'details': {'key': 'properties.details', 'type': 'JobDetails'},
        'data_source_name': {'key': 'properties.dataSourceName', 'type': 'str'},
        'data_sink_name': {'key': 'properties.dataSinkName', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(self, **kwargs):
        super(Job, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.is_cancellable = kwargs.get('is_cancellable', None)
        self.bytes_processed = kwargs.get('bytes_processed', None)
        self.items_processed = kwargs.get('items_processed', None)
        self.total_bytes_to_process = kwargs.get('total_bytes_to_process', None)
        self.total_items_to_process = kwargs.get('total_items_to_process', None)
        self.details = kwargs.get('details', None)
        self.data_source_name = kwargs.get('data_source_name', None)
        self.data_sink_name = kwargs.get('data_sink_name', None)
        self.error = kwargs.get('error', None)


class JobDefinition(DmsBaseObject):
    """Job Definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param data_source_id: Required. Data Source Id associated to the job
     definition.
    :type data_source_id: str
    :param data_sink_id: Required. Data Sink Id associated to the job
     definition.
    :type data_sink_id: str
    :param schedules: Schedule for running the job definition
    :type schedules: list[~azure.mgmt.hybriddatamanager.models.Schedule]
    :param state: Required. State of the job definition. Possible values
     include: 'Disabled', 'Enabled', 'Supported'
    :type state: str or ~azure.mgmt.hybriddatamanager.models.State
    :param last_modified_time: Last modified time of the job definition.
    :type last_modified_time: datetime
    :param run_location: This is the preferred geo location for the job to
     run. Possible values include: 'none', 'australiaeast',
     'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast',
     'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast',
     'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
     'southcentralus', 'southindia', 'northcentralus', 'northeurope',
     'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus',
     'westus2'
    :type run_location: str or
     ~azure.mgmt.hybriddatamanager.models.RunLocation
    :param user_confirmation: Enum to detect if user confirmation is required.
     If not passed will default to NotRequired. Possible values include:
     'NotRequired', 'Required'. Default value: "NotRequired" .
    :type user_confirmation: str or
     ~azure.mgmt.hybriddatamanager.models.UserConfirmation
    :param data_service_input: A generic json used differently by each data
     service type.
    :type data_service_input: object
    :param customer_secrets: List of customer secrets containing a key
     identifier and key value. The key identifier is a way for the specific
     data source to understand the key. Value contains customer secret
     encrypted by the encryptionKeys.
    :type customer_secrets:
     list[~azure.mgmt.hybriddatamanager.models.CustomerSecret]
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'data_source_id': {'required': True},
        'data_sink_id': {'required': True},
        'state': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data_source_id': {'key': 'properties.dataSourceId', 'type': 'str'},
        'data_sink_id': {'key': 'properties.dataSinkId', 'type': 'str'},
        'schedules': {'key': 'properties.schedules', 'type': '[Schedule]'},
        'state': {'key': 'properties.state', 'type': 'State'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'run_location': {'key': 'properties.runLocation', 'type': 'RunLocation'},
        'user_confirmation': {'key': 'properties.userConfirmation', 'type': 'UserConfirmation'},
        'data_service_input': {'key': 'properties.dataServiceInput', 'type': 'object'},
        'customer_secrets': {'key': 'properties.customerSecrets', 'type': '[CustomerSecret]'},
    }

    def __init__(self, **kwargs):
        super(JobDefinition, self).__init__(**kwargs)
        self.data_source_id = kwargs.get('data_source_id', None)
        self.data_sink_id = kwargs.get('data_sink_id', None)
        self.schedules = kwargs.get('schedules', None)
        self.state = kwargs.get('state', None)
        self.last_modified_time = kwargs.get('last_modified_time', None)
        self.run_location = kwargs.get('run_location', None)
        self.user_confirmation = kwargs.get('user_confirmation', "NotRequired")
        self.data_service_input = kwargs.get('data_service_input', None)
        self.customer_secrets = kwargs.get('customer_secrets', None)


class JobDefinitionFilter(Model):
    """Contains the supported job definition filters.

    All required parameters must be populated in order to send to Azure.

    :param state: Required. The state of the job definition. Possible values
     include: 'Disabled', 'Enabled', 'Supported'
    :type state: str or ~azure.mgmt.hybriddatamanager.models.State
    :param data_source: The data source associated with the job definition
    :type data_source: str
    :param last_modified: The last modified date time of the data source.
    :type last_modified: datetime
    """

    _validation = {
        'state': {'required': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'State'},
        'data_source': {'key': 'dataSource', 'type': 'str'},
        'last_modified': {'key': 'lastModified', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(JobDefinitionFilter, self).__init__(**kwargs)
        self.state = kwargs.get('state', None)
        self.data_source = kwargs.get('data_source', None)
        self.last_modified = kwargs.get('last_modified', None)


class JobDetails(Model):
    """Job details.

    :param job_stages: List of stages that ran in the job
    :type job_stages: list[~azure.mgmt.hybriddatamanager.models.JobStages]
    :param job_definition: JobDefinition at the time of the run
    :type job_definition: ~azure.mgmt.hybriddatamanager.models.JobDefinition
    :param error_details: Error details for failure. This is optional.
    :type error_details:
     list[~azure.mgmt.hybriddatamanager.models.ErrorDetails]
    :param item_details_link: Item Details Link to download files or see
     details
    :type item_details_link: str
    """

    _attribute_map = {
        'job_stages': {'key': 'jobStages', 'type': '[JobStages]'},
        'job_definition': {'key': 'jobDefinition', 'type': 'JobDefinition'},
        'error_details': {'key': 'errorDetails', 'type': '[ErrorDetails]'},
        'item_details_link': {'key': 'itemDetailsLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(JobDetails, self).__init__(**kwargs)
        self.job_stages = kwargs.get('job_stages', None)
        self.job_definition = kwargs.get('job_definition', None)
        self.error_details = kwargs.get('error_details', None)
        self.item_details_link = kwargs.get('item_details_link', None)


class JobFilter(Model):
    """Contains the information about the filters for the job.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. The status of the job. Possible values include:
     'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
     'Cancelled', 'Cancelling'
    :type status: str or ~azure.mgmt.hybriddatamanager.models.JobStatus
    :param start_time: The start time of the job.
    :type start_time: datetime
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'JobStatus'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(JobFilter, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.start_time = kwargs.get('start_time', None)


class JobStages(Model):
    """Job stages.

    All required parameters must be populated in order to send to Azure.

    :param stage_name: Name of the job stage.
    :type stage_name: str
    :param stage_status: Required. Status of the job stage. Possible values
     include: 'None', 'InProgress', 'Succeeded', 'WaitingForAction', 'Failed',
     'Cancelled', 'Cancelling'
    :type stage_status: str or ~azure.mgmt.hybriddatamanager.models.JobStatus
    :param job_stage_details: Job Stage Details
    :type job_stage_details: object
    :param error_details: Error details for the stage. This is optional
    :type error_details:
     list[~azure.mgmt.hybriddatamanager.models.ErrorDetails]
    """

    _validation = {
        'stage_status': {'required': True},
    }

    _attribute_map = {
        'stage_name': {'key': 'stageName', 'type': 'str'},
        'stage_status': {'key': 'stageStatus', 'type': 'JobStatus'},
        'job_stage_details': {'key': 'jobStageDetails', 'type': 'object'},
        'error_details': {'key': 'errorDetails', 'type': '[ErrorDetails]'},
    }

    def __init__(self, **kwargs):
        super(JobStages, self).__init__(**kwargs)
        self.stage_name = kwargs.get('stage_name', None)
        self.stage_status = kwargs.get('stage_status', None)
        self.job_stage_details = kwargs.get('job_stage_details', None)
        self.error_details = kwargs.get('error_details', None)


class Key(Model):
    """Encryption Key.

    All required parameters must be populated in order to send to Azure.

    :param key_modulus: Required. Modulus of the encryption key.
    :type key_modulus: str
    :param key_exponent: Required. Exponent of the encryption key.
    :type key_exponent: str
    :param encryption_chunk_size_in_bytes: Required. The maximum byte size
     that can be encrypted by the key. For a key size larger than the size,
     break into chunks and encrypt each chunk, append each encrypted chunk with
     : to mark the end of the chunk.
    :type encryption_chunk_size_in_bytes: int
    """

    _validation = {
        'key_modulus': {'required': True},
        'key_exponent': {'required': True},
        'encryption_chunk_size_in_bytes': {'required': True},
    }

    _attribute_map = {
        'key_modulus': {'key': 'keyModulus', 'type': 'str'},
        'key_exponent': {'key': 'keyExponent', 'type': 'str'},
        'encryption_chunk_size_in_bytes': {'key': 'encryptionChunkSizeInBytes', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(Key, self).__init__(**kwargs)
        self.key_modulus = kwargs.get('key_modulus', None)
        self.key_exponent = kwargs.get('key_exponent', None)
        self.encryption_chunk_size_in_bytes = kwargs.get('encryption_chunk_size_in_bytes', None)


class PublicKey(DmsBaseObject):
    """Public key.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param data_service_level1_key: Required. Level one public key for
     encryption
    :type data_service_level1_key: ~azure.mgmt.hybriddatamanager.models.Key
    :param data_service_level2_key: Required. Level two public key for
     encryption
    :type data_service_level2_key: ~azure.mgmt.hybriddatamanager.models.Key
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'data_service_level1_key': {'required': True},
        'data_service_level2_key': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data_service_level1_key': {'key': 'properties.dataServiceLevel1Key', 'type': 'Key'},
        'data_service_level2_key': {'key': 'properties.dataServiceLevel2Key', 'type': 'Key'},
    }

    def __init__(self, **kwargs):
        super(PublicKey, self).__init__(**kwargs)
        self.data_service_level1_key = kwargs.get('data_service_level1_key', None)
        self.data_service_level2_key = kwargs.get('data_service_level2_key', None)


class RunParameters(Model):
    """Run parameters for a job.

    :param user_confirmation: Enum to detect if user confirmation is required.
     If not passed will default to NotRequired. Possible values include:
     'NotRequired', 'Required'. Default value: "NotRequired" .
    :type user_confirmation: str or
     ~azure.mgmt.hybriddatamanager.models.UserConfirmation
    :param data_service_input: A generic json used differently by each data
     service type.
    :type data_service_input: object
    :param customer_secrets: List of customer secrets containing a key
     identifier and key value. The key identifier is a way for the specific
     data source to understand the key. Value contains customer secret
     encrypted by the encryptionKeys.
    :type customer_secrets:
     list[~azure.mgmt.hybriddatamanager.models.CustomerSecret]
    """

    _attribute_map = {
        'user_confirmation': {'key': 'userConfirmation', 'type': 'UserConfirmation'},
        'data_service_input': {'key': 'dataServiceInput', 'type': 'object'},
        'customer_secrets': {'key': 'customerSecrets', 'type': '[CustomerSecret]'},
    }

    def __init__(self, **kwargs):
        super(RunParameters, self).__init__(**kwargs)
        self.user_confirmation = kwargs.get('user_confirmation', "NotRequired")
        self.data_service_input = kwargs.get('data_service_input', None)
        self.customer_secrets = kwargs.get('customer_secrets', None)


class Schedule(Model):
    """Schedule for the job run.

    :param name: Name of the schedule.
    :type name: str
    :param policy_list: A list of repetition intervals in ISO 8601 format.
    :type policy_list: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'policy_list': {'key': 'policyList', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(Schedule, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.policy_list = kwargs.get('policy_list', None)


class Sku(Model):
    """The sku type.

    :param name: The sku name. Required for data manager creation, optional
     for update.
    :type name: str
    :param tier: The sku tier. This is based on the SKU name.
    :type tier: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Sku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)
