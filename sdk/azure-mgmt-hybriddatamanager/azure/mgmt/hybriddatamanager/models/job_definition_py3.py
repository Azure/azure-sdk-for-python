# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .dms_base_object_py3 import DmsBaseObject


class JobDefinition(DmsBaseObject):
    """Job Definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Name of the object.
    :vartype name: str
    :ivar id: Id of the object.
    :vartype id: str
    :ivar type: Type of the object.
    :vartype type: str
    :param data_source_id: Required. Data Source Id associated to the job
     definition.
    :type data_source_id: str
    :param data_sink_id: Required. Data Sink Id associated to the job
     definition.
    :type data_sink_id: str
    :param schedules: Schedule for running the job definition
    :type schedules: list[~azure.mgmt.hybriddatamanager.models.Schedule]
    :param state: Required. State of the job definition. Possible values
     include: 'Disabled', 'Enabled', 'Supported'
    :type state: str or ~azure.mgmt.hybriddatamanager.models.State
    :param last_modified_time: Last modified time of the job definition.
    :type last_modified_time: datetime
    :param run_location: This is the preferred geo location for the job to
     run. Possible values include: 'none', 'australiaeast',
     'australiasoutheast', 'brazilsouth', 'canadacentral', 'canadaeast',
     'centralindia', 'centralus', 'eastasia', 'eastus', 'eastus2', 'japaneast',
     'japanwest', 'koreacentral', 'koreasouth', 'southeastasia',
     'southcentralus', 'southindia', 'northcentralus', 'northeurope',
     'uksouth', 'ukwest', 'westcentralus', 'westeurope', 'westindia', 'westus',
     'westus2'
    :type run_location: str or
     ~azure.mgmt.hybriddatamanager.models.RunLocation
    :param user_confirmation: Enum to detect if user confirmation is required.
     If not passed will default to NotRequired. Possible values include:
     'NotRequired', 'Required'. Default value: "NotRequired" .
    :type user_confirmation: str or
     ~azure.mgmt.hybriddatamanager.models.UserConfirmation
    :param data_service_input: A generic json used differently by each data
     service type.
    :type data_service_input: object
    :param customer_secrets: List of customer secrets containing a key
     identifier and key value. The key identifier is a way for the specific
     data source to understand the key. Value contains customer secret
     encrypted by the encryptionKeys.
    :type customer_secrets:
     list[~azure.mgmt.hybriddatamanager.models.CustomerSecret]
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'data_source_id': {'required': True},
        'data_sink_id': {'required': True},
        'state': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data_source_id': {'key': 'properties.dataSourceId', 'type': 'str'},
        'data_sink_id': {'key': 'properties.dataSinkId', 'type': 'str'},
        'schedules': {'key': 'properties.schedules', 'type': '[Schedule]'},
        'state': {'key': 'properties.state', 'type': 'State'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'run_location': {'key': 'properties.runLocation', 'type': 'RunLocation'},
        'user_confirmation': {'key': 'properties.userConfirmation', 'type': 'UserConfirmation'},
        'data_service_input': {'key': 'properties.dataServiceInput', 'type': 'object'},
        'customer_secrets': {'key': 'properties.customerSecrets', 'type': '[CustomerSecret]'},
    }

    def __init__(self, *, data_source_id: str, data_sink_id: str, state, schedules=None, last_modified_time=None, run_location=None, user_confirmation="NotRequired", data_service_input=None, customer_secrets=None, **kwargs) -> None:
        super(JobDefinition, self).__init__(**kwargs)
        self.data_source_id = data_source_id
        self.data_sink_id = data_sink_id
        self.schedules = schedules
        self.state = state
        self.last_modified_time = last_modified_time
        self.run_location = run_location
        self.user_confirmation = user_confirmation
        self.data_service_input = data_service_input
        self.customer_secrets = customer_secrets
