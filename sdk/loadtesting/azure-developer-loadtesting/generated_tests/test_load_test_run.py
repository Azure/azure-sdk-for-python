# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import LoadTestRunClientTestBase, LoadTestRunPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLoadTestRun(LoadTestRunClientTestBase):
    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_begin_test_run(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.begin_test_run(
            test_run_id="str",
            body={
                "testRunId": "str",
                "autoStopCriteria": {"autoStopDisabled": bool, "errorRate": 0.0, "errorRateTimeWindowInSeconds": 0},
                "certificate": {"name": "str", "type": "str", "value": "str"},
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "debugLogsEnabled": bool,
                "description": "str",
                "displayName": "str",
                "duration": 0,
                "endDateTime": "2020-02-20 00:00:00",
                "environmentVariables": {"str": "str"},
                "errorDetails": [{"message": "str"}],
                "executedDateTime": "2020-02-20 00:00:00",
                "kind": "str",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "loadTestConfiguration": {
                    "engineInstances": 0,
                    "optionalLoadTestConfig": {
                        "duration": 0,
                        "endpointUrl": "str",
                        "maxResponseTimeInMs": 0,
                        "rampUpTime": 0,
                        "requestsPerSecond": 0,
                        "virtualUsers": 0,
                    },
                    "quickStartTest": bool,
                    "regionalLoadTestConfig": [{"engineInstances": 0, "region": "str"}],
                    "splitAllCSVs": bool,
                },
                "passFailCriteria": {
                    "passFailMetrics": {
                        "str": {
                            "action": "str",
                            "actualValue": 0.0,
                            "aggregate": "str",
                            "clientMetric": "str",
                            "condition": "str",
                            "requestName": "str",
                            "result": "str",
                            "value": 0.0,
                        }
                    }
                },
                "portalUrl": "str",
                "publicIPDisabled": bool,
                "regionalStatistics": {
                    "str": {
                        "errorCount": 0.0,
                        "errorPct": 0.0,
                        "maxResTime": 0.0,
                        "meanResTime": 0.0,
                        "medianResTime": 0.0,
                        "minResTime": 0.0,
                        "pct1ResTime": 0.0,
                        "pct2ResTime": 0.0,
                        "pct3ResTime": 0.0,
                        "pct75ResTime": 0.0,
                        "pct96ResTime": 0.0,
                        "pct97ResTime": 0.0,
                        "pct98ResTime": 0.0,
                        "pct9999ResTime": 0.0,
                        "pct999ResTime": 0.0,
                        "receivedKBytesPerSec": 0.0,
                        "sampleCount": 0.0,
                        "sentKBytesPerSec": 0.0,
                        "throughput": 0.0,
                        "transaction": "str",
                    }
                },
                "requestDataLevel": "str",
                "secrets": {"str": {"type": "str", "value": "str"}},
                "startDateTime": "2020-02-20 00:00:00",
                "status": "str",
                "subnetId": "str",
                "testArtifacts": {
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",
                                "expireDateTime": "2020-02-20 00:00:00",
                                "fileType": "str",
                                "url": "str",
                                "validationFailureDetails": "str",
                                "validationStatus": "str",
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        },
                        "userPropFileInfo": {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        },
                    },
                    "outputArtifacts": {
                        "artifactsContainerInfo": {"expireDateTime": "2020-02-20 00:00:00", "url": "str"},
                        "logsFileInfo": {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        },
                        "reportFileInfo": {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        },
                        "resultFileInfo": {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        },
                    },
                },
                "testId": "str",
                "testResult": "str",
                "testRunStatistics": {
                    "str": {
                        "errorCount": 0.0,
                        "errorPct": 0.0,
                        "maxResTime": 0.0,
                        "meanResTime": 0.0,
                        "medianResTime": 0.0,
                        "minResTime": 0.0,
                        "pct1ResTime": 0.0,
                        "pct2ResTime": 0.0,
                        "pct3ResTime": 0.0,
                        "pct75ResTime": 0.0,
                        "pct96ResTime": 0.0,
                        "pct97ResTime": 0.0,
                        "pct98ResTime": 0.0,
                        "pct9999ResTime": 0.0,
                        "pct999ResTime": 0.0,
                        "receivedKBytesPerSec": 0.0,
                        "sampleCount": 0.0,
                        "sentKBytesPerSec": 0.0,
                        "throughput": 0.0,
                        "transaction": "str",
                    }
                },
                "virtualUsers": 0,
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_create_or_update_app_components(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.create_or_update_app_components(
            test_run_id="str",
            body={
                "components": {
                    "str": {
                        "resourceId": "str",
                        "resourceName": "str",
                        "resourceType": "str",
                        "displayName": "str",
                        "kind": "str",
                        "resourceGroup": "str",
                        "subscriptionId": "str",
                    }
                },
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "testRunId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_create_or_update_server_metrics_config(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.create_or_update_server_metrics_config(
            test_run_id="str",
            body={
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "metrics": {
                    "str": {
                        "aggregation": "str",
                        "metricNamespace": "str",
                        "name": "str",
                        "resourceId": "str",
                        "resourceType": "str",
                        "displayDescription": "str",
                        "id": "str",
                        "unit": "str",
                    }
                },
                "testRunId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_delete_test_run(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.delete_test_run(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_get_app_components(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.get_app_components(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_get_server_metrics_config(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.get_server_metrics_config(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_get_test_run(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.get_test_run(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_get_test_run_file(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.get_test_run_file(
            test_run_id="str",
            file_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_list_metric_dimension_values(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.list_metric_dimension_values(
            test_run_id="str",
            name="str",
            metricname="str",
            metric_namespace="str",
            time_interval="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_get_metric_definitions(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.get_metric_definitions(
            test_run_id="str",
            metric_namespace="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_get_metric_namespaces(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.get_metric_namespaces(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_list_metrics(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.list_metrics(
            test_run_id="str",
            metricname="str",
            metric_namespace="str",
            time_interval="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_list_test_runs(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.list_test_runs()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy
    def test_stop_test_run(self, loadtestrun_endpoint):
        client = self.create_client(endpoint=loadtestrun_endpoint)
        response = client.stop_test_run(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...
