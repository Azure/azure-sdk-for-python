# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import LoadTestRunPreparer
from testpreparer_async import LoadTestRunClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLoadTestRunAsync(LoadTestRunClientTestBaseAsync):
    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_create_or_update_app_components(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.create_or_update_app_components(
            test_run_id="str",
            body={
                "components": {
                    "str": {
                        "resourceId": "str",
                        "resourceName": "str",
                        "resourceType": "str",
                        "displayName": "str",
                        "kind": "str",
                        "resourceGroup": "str",
                        "subscriptionId": "str",
                    }
                },
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "testRunId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_create_or_update_server_metrics_config(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.create_or_update_server_metrics_config(
            test_run_id="str",
            body={
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "metrics": {
                    "str": {
                        "aggregation": "str",
                        "metricNamespace": "str",
                        "name": "str",
                        "resourceId": "str",
                        "resourceType": "str",
                        "displayDescription": "str",
                        "id": "str",
                        "unit": "str",
                    }
                },
                "testRunId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_delete_test_run(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.delete_test_run(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_get_app_components(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.get_app_components(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_get_server_metrics_config(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.get_server_metrics_config(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_get_test_run(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.get_test_run(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_get_test_run_file(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.get_test_run_file(
            test_run_id="str",
            file_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_list_metric_dimension_values(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = client.list_metric_dimension_values(
            test_run_id="str",
            name="str",
            metric_name="str",
            metric_namespace="str",
            time_interval="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_get_metric_definitions(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.get_metric_definitions(
            test_run_id="str",
            metric_namespace="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_get_metric_namespaces(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.get_metric_namespaces(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_list_metrics(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = client.list_metrics(
            test_run_id="str",
            metric_name="str",
            metric_namespace="str",
            time_interval="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_list_test_runs(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = client.list_test_runs()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_stop_test_run(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.stop_test_run(
            test_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_delete_test_profile_run(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.delete_test_profile_run(
            test_profile_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_get_test_profile_run(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.get_test_profile_run(
            test_profile_run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_list_test_profile_runs(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = client.list_test_profile_runs()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @LoadTestRunPreparer()
    @recorded_by_proxy_async
    async def test_stop_test_profile_run(self, loadtestrun_endpoint):
        client = self.create_async_client(endpoint=loadtestrun_endpoint)
        response = await client.stop_test_profile_run(
            test_profile_run_id="str",
        )

        # please add some check logic here by yourself
        # ...
