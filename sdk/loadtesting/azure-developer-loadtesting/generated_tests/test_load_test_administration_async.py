# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import LoadTestAdministrationPreparer
from testpreparer_async import LoadTestAdministrationClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestLoadTestAdministrationAsync(LoadTestAdministrationClientTestBaseAsync):
    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_create_or_update_test(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.create_or_update_test(
            test_id="str",
            body={
                "testId": "str",
                "autoStopCriteria": {"autoStopDisabled": bool, "errorRate": 0.0, "errorRateTimeWindowInSeconds": 0},
                "baselineTestRunId": "str",
                "certificate": {"name": "str", "type": "str", "value": "str"},
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "description": "str",
                "displayName": "str",
                "engineBuiltInIdentityIds": ["str"],
                "engineBuiltInIdentityType": "str",
                "environmentVariables": {"str": "str"},
                "inputArtifacts": {
                    "additionalFileInfo": [
                        {
                            "fileName": "str",
                            "expireDateTime": "2020-02-20 00:00:00",
                            "fileType": "str",
                            "url": "str",
                            "validationFailureDetails": "str",
                            "validationStatus": "str",
                        }
                    ],
                    "configFileInfo": {
                        "fileName": "str",
                        "expireDateTime": "2020-02-20 00:00:00",
                        "fileType": "str",
                        "url": "str",
                        "validationFailureDetails": "str",
                        "validationStatus": "str",
                    },
                    "inputArtifactsZipFileInfo": {
                        "fileName": "str",
                        "expireDateTime": "2020-02-20 00:00:00",
                        "fileType": "str",
                        "url": "str",
                        "validationFailureDetails": "str",
                        "validationStatus": "str",
                    },
                    "testScriptFileInfo": {
                        "fileName": "str",
                        "expireDateTime": "2020-02-20 00:00:00",
                        "fileType": "str",
                        "url": "str",
                        "validationFailureDetails": "str",
                        "validationStatus": "str",
                    },
                    "urlTestConfigFileInfo": {
                        "fileName": "str",
                        "expireDateTime": "2020-02-20 00:00:00",
                        "fileType": "str",
                        "url": "str",
                        "validationFailureDetails": "str",
                        "validationStatus": "str",
                    },
                    "userPropFileInfo": {
                        "fileName": "str",
                        "expireDateTime": "2020-02-20 00:00:00",
                        "fileType": "str",
                        "url": "str",
                        "validationFailureDetails": "str",
                        "validationStatus": "str",
                    },
                },
                "keyvaultReferenceIdentityId": "str",
                "keyvaultReferenceIdentityType": "str",
                "kind": "str",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "loadTestConfiguration": {
                    "engineInstances": 0,
                    "optionalLoadTestConfig": {
                        "duration": 0,
                        "endpointUrl": "str",
                        "maxResponseTimeInMs": 0,
                        "rampUpTime": 0,
                        "requestsPerSecond": 0,
                        "virtualUsers": 0,
                    },
                    "quickStartTest": bool,
                    "regionalLoadTestConfig": [{"engineInstances": 0, "region": "str"}],
                    "splitAllCSVs": bool,
                },
                "metricsReferenceIdentityId": "str",
                "metricsReferenceIdentityType": "str",
                "passFailCriteria": {
                    "passFailMetrics": {
                        "str": {
                            "action": "str",
                            "actualValue": 0.0,
                            "aggregate": "str",
                            "clientMetric": "str",
                            "condition": "str",
                            "requestName": "str",
                            "result": "str",
                            "value": 0.0,
                        }
                    },
                    "passFailServerMetrics": {
                        "str": {
                            "aggregation": "str",
                            "condition": "str",
                            "metricName": "str",
                            "metricNamespace": "str",
                            "resourceId": "str",
                            "value": 0.0,
                            "action": "str",
                            "actualValue": 0.0,
                            "result": "str",
                        }
                    },
                },
                "publicIPDisabled": bool,
                "secrets": {"str": {"type": "str", "value": "str"}},
                "subnetId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_create_or_update_app_components(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.create_or_update_app_components(
            test_id="str",
            body={
                "components": {
                    "str": {
                        "resourceId": "str",
                        "resourceName": "str",
                        "resourceType": "str",
                        "displayName": "str",
                        "kind": "str",
                        "resourceGroup": "str",
                        "subscriptionId": "str",
                    }
                },
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "testId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_create_or_update_server_metrics_config(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.create_or_update_server_metrics_config(
            test_id="str",
            body={
                "metrics": {
                    "str": {
                        "aggregation": "str",
                        "metricNamespace": "str",
                        "name": "str",
                        "resourceId": "str",
                        "resourceType": "str",
                        "displayDescription": "str",
                        "id": "str",
                        "unit": "str",
                    }
                },
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "testId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_get_app_components(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.get_app_components(
            test_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_get_server_metrics_config(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.get_server_metrics_config(
            test_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_get_test(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.get_test(
            test_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_get_test_file(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.get_test_file(
            test_id="str",
            file_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_list_test_files(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = client.list_test_files(
            test_id="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_list_tests(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = client.list_tests()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_delete_test_file(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.delete_test_file(
            test_id="str",
            file_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_delete_test(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.delete_test(
            test_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_create_or_update_test_profile(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.create_or_update_test_profile(
            test_profile_id="str",
            body={
                "testProfileId": "str",
                "createdBy": "str",
                "createdDateTime": "2020-02-20 00:00:00",
                "description": "str",
                "displayName": "str",
                "lastModifiedBy": "str",
                "lastModifiedDateTime": "2020-02-20 00:00:00",
                "targetResourceConfigurations": "target_resource_configurations",
                "targetResourceId": "str",
                "testId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_delete_test_profile(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.delete_test_profile(
            test_profile_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_get_test_profile(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = await client.get_test_profile(
            test_profile_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @LoadTestAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_list_test_profiles(self, loadtestadministration_endpoint):
        client = self.create_async_client(endpoint=loadtestadministration_endpoint)
        response = client.list_test_profiles()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
