# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from io import IOBase
import json
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, List, Optional, Type, TypeVar, Union, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import SdkJSONEncoder, _deserialize
from ..._operations._operations import (
    build_load_test_administration_begin_upload_test_file_request,
    build_load_test_administration_create_or_update_app_components_request,
    build_load_test_administration_create_or_update_server_metrics_config_request,
    build_load_test_administration_create_or_update_test_profile_request,
    build_load_test_administration_create_or_update_test_request,
    build_load_test_administration_delete_test_file_request,
    build_load_test_administration_delete_test_profile_request,
    build_load_test_administration_delete_test_request,
    build_load_test_administration_get_app_components_request,
    build_load_test_administration_get_server_metrics_config_request,
    build_load_test_administration_get_test_file_request,
    build_load_test_administration_get_test_profile_request,
    build_load_test_administration_get_test_request,
    build_load_test_administration_list_test_files_request,
    build_load_test_administration_list_test_profiles_request,
    build_load_test_administration_list_tests_request,
    build_load_test_run_begin_test_profile_run_request,
    build_load_test_run_begin_test_run_request,
    build_load_test_run_create_or_update_app_components_request,
    build_load_test_run_create_or_update_server_metrics_config_request,
    build_load_test_run_delete_test_profile_run_request,
    build_load_test_run_delete_test_run_request,
    build_load_test_run_get_app_components_request,
    build_load_test_run_get_metric_definitions_request,
    build_load_test_run_get_metric_namespaces_request,
    build_load_test_run_get_server_metrics_config_request,
    build_load_test_run_get_test_profile_run_request,
    build_load_test_run_get_test_run_file_request,
    build_load_test_run_get_test_run_request,
    build_load_test_run_list_metric_dimension_values_request,
    build_load_test_run_list_metrics_request,
    build_load_test_run_list_test_profile_runs_request,
    build_load_test_run_list_test_runs_request,
    build_load_test_run_stop_request,
    build_load_test_run_stop_test_profile_run_request,
)
from ..._validation import api_version_validation
from .._vendor import LoadTestAdministrationClientMixinABC, LoadTestRunClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class LoadTestAdministrationClientOperationsMixin(  # pylint: disable=name-too-long
    LoadTestAdministrationClientMixinABC
):

    @overload
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_id", "content_type", "accept"]},
    )
    async def create_or_update_test_profile(
        self,
        test_profile_id: str,
        body: _models.TestProfile,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestProfile:
        # pylint: disable=line-too-long
        """Create a new test profile or update an existing test profile.

        Create a new test profile or update an existing test profile by providing the test profile Id.

        :param test_profile_id: Unique identifier for the test profile, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_id: str
        :param body: The resource instance. Required.
        :type body: ~azure.developer.loadtesting.models.TestProfile
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestProfile. The TestProfile is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfile
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # JSON input template you can fill out and use as your body input.
                body = {
                    "testProfileId": "str",  # Unique identifier for the test profile, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. Description for the test profile.
                    "displayName": "str",  # Optional. Display name of the test profile.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile is created. This property is required for creating a Test Profile and
                      it's not allowed to be updated.
                    "testId": "str"  # Optional. Associated test ID for the test profile. This
                      property is required for creating a Test Profile and it's not allowed to be
                      updated.
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "testProfileId": "str",  # Unique identifier for the test profile, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. Description for the test profile.
                    "displayName": "str",  # Optional. Display name of the test profile.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile is created. This property is required for creating a Test Profile and
                      it's not allowed to be updated.
                    "testId": "str"  # Optional. Associated test ID for the test profile. This
                      property is required for creating a Test Profile and it's not allowed to be
                      updated.
                }
        """

    @overload
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_id", "content_type", "accept"]},
    )
    async def create_or_update_test_profile(
        self, test_profile_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestProfile:
        # pylint: disable=line-too-long
        """Create a new test profile or update an existing test profile.

        Create a new test profile or update an existing test profile by providing the test profile Id.

        :param test_profile_id: Unique identifier for the test profile, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_id: str
        :param body: The resource instance. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestProfile. The TestProfile is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfile
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "testProfileId": "str",  # Unique identifier for the test profile, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. Description for the test profile.
                    "displayName": "str",  # Optional. Display name of the test profile.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile is created. This property is required for creating a Test Profile and
                      it's not allowed to be updated.
                    "testId": "str"  # Optional. Associated test ID for the test profile. This
                      property is required for creating a Test Profile and it's not allowed to be
                      updated.
                }
        """

    @overload
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_id", "content_type", "accept"]},
    )
    async def create_or_update_test_profile(
        self,
        test_profile_id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestProfile:
        # pylint: disable=line-too-long
        """Create a new test profile or update an existing test profile.

        Create a new test profile or update an existing test profile by providing the test profile Id.

        :param test_profile_id: Unique identifier for the test profile, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_id: str
        :param body: The resource instance. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestProfile. The TestProfile is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfile
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "testProfileId": "str",  # Unique identifier for the test profile, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. Description for the test profile.
                    "displayName": "str",  # Optional. Display name of the test profile.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile is created. This property is required for creating a Test Profile and
                      it's not allowed to be updated.
                    "testId": "str"  # Optional. Associated test ID for the test profile. This
                      property is required for creating a Test Profile and it's not allowed to be
                      updated.
                }
        """

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_id", "content_type", "accept"]},
    )
    async def create_or_update_test_profile(
        self, test_profile_id: str, body: Union[_models.TestProfile, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.TestProfile:
        # pylint: disable=line-too-long
        """Create a new test profile or update an existing test profile.

        Create a new test profile or update an existing test profile by providing the test profile Id.

        :param test_profile_id: Unique identifier for the test profile, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_id: str
        :param body: The resource instance. Is one of the following types: TestProfile, JSON, IO[bytes]
         Required.
        :type body: ~azure.developer.loadtesting.models.TestProfile or JSON or IO[bytes]
        :return: TestProfile. The TestProfile is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfile
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # JSON input template you can fill out and use as your body input.
                body = {
                    "testProfileId": "str",  # Unique identifier for the test profile, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. Description for the test profile.
                    "displayName": "str",  # Optional. Display name of the test profile.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile is created. This property is required for creating a Test Profile and
                      it's not allowed to be updated.
                    "testId": "str"  # Optional. Associated test ID for the test profile. This
                      property is required for creating a Test Profile and it's not allowed to be
                      updated.
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "testProfileId": "str",  # Unique identifier for the test profile, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. Description for the test profile.
                    "displayName": "str",  # Optional. Display name of the test profile.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile is created. This property is required for creating a Test Profile and
                      it's not allowed to be updated.
                    "testId": "str"  # Optional. Associated test ID for the test profile. This
                      property is required for creating a Test Profile and it's not allowed to be
                      updated.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TestProfile] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_load_test_administration_create_or_update_test_profile_request(
            test_profile_id=test_profile_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestProfile, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestProfile, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_id", "accept"]},
    )  # pylint: disable=inconsistent-return-statements
    async def delete_test_profile(  # pylint: disable=inconsistent-return-statements
        self, test_profile_id: str, **kwargs: Any
    ) -> None:
        """Delete a test profile.

        Delete a test profile by its test profile Id.

        :param test_profile_id: Unique identifier for the test profile, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_load_test_administration_delete_test_profile_request(
            test_profile_id=test_profile_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_id", "accept"]},
    )
    async def get_test_profile(self, test_profile_id: str, **kwargs: Any) -> _models.TestProfile:
        # pylint: disable=line-too-long
        """Get load test profile details.

        Get load test profile details by test profile Id.

        :param test_profile_id: Unique identifier for the test profile, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_id: str
        :return: TestProfile. The TestProfile is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfile
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "testProfileId": "str",  # Unique identifier for the test profile, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. Description for the test profile.
                    "displayName": "str",  # Optional. Display name of the test profile.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile is created. This property is required for creating a Test Profile and
                      it's not allowed to be updated.
                    "testId": "str"  # Optional. Associated test ID for the test profile. This
                      property is required for creating a Test Profile and it's not allowed to be
                      updated.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestProfile] = kwargs.pop("cls", None)

        _request = build_load_test_administration_get_test_profile_request(
            test_profile_id=test_profile_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestProfile, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={
            "2024-05-01-preview": [
                "api_version",
                "maxpagesize",
                "last_modified_start_time",
                "last_modified_end_time",
                "test_profile_ids",
                "test_ids",
                "accept",
            ]
        },
    )
    def list_test_profiles(
        self,
        *,
        last_modified_start_time: Optional[datetime.datetime] = None,
        last_modified_end_time: Optional[datetime.datetime] = None,
        test_profile_ids: Optional[str] = None,
        test_ids: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.TestProfile"]:
        # pylint: disable=line-too-long
        """List test profiles.

        Get all test profiles for the given filters.

        :keyword last_modified_start_time: Start DateTime(RFC 3339 literal format) of the last updated
         time range to filter test profiles. Default value is None.
        :paramtype last_modified_start_time: ~datetime.datetime
        :keyword last_modified_end_time: End DateTime(RFC 3339 literal format) of the last updated time
         range to filter test profiles. Default value is None.
        :paramtype last_modified_end_time: ~datetime.datetime
        :keyword test_profile_ids: Comma separated list of IDs of the test profiles to filter. Default
         value is None.
        :paramtype test_profile_ids: str
        :keyword test_ids: Comma separated list IDs of the tests which should be associated with the
         test profiles to fetch. Default value is None.
        :paramtype test_ids: str
        :return: An iterator like instance of TestProfile
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.TestProfile]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "testProfileId": "str",  # Unique identifier for the test profile, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. Description for the test profile.
                    "displayName": "str",  # Optional. Display name of the test profile.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile is created. This property is required for creating a Test Profile and
                      it's not allowed to be updated.
                    "testId": "str"  # Optional. Associated test ID for the test profile. This
                      property is required for creating a Test Profile and it's not allowed to be
                      updated.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.TestProfile]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_load_test_administration_list_test_profiles_request(
                    maxpagesize=maxpagesize,
                    last_modified_start_time=last_modified_start_time,
                    last_modified_end_time=last_modified_end_time,
                    test_profile_ids=test_profile_ids,
                    test_ids=test_ids,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TestProfile], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @overload
    async def create_or_update_test(
        self, test_id: str, body: _models.Test, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.Test:
        # pylint: disable=line-too-long
        """Create a new test or update an existing test by providing the test Id.

        Create a new test or update an existing test by providing the test Id.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: The resource instance. Required.
        :type body: ~azure.developer.loadtesting.models.Test
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: Test. The Test is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.Test
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "testId": "str",  # Unique test identifier for the load test, must contain
                      only lower-case alphabetic, numeric, underscore or hyphen characters. Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "baselineTestRunId": "str",  # Optional. Id of the test run to be marked as
                      baseline to view trends of client-side metrics from recent test runs.
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "kind": "str",  # Optional. Kind of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str"  # Optional. Subnet ID on which the load test instances
                      should run.
                }

                # response body for status code(s): 201, 200
                response == {
                    "testId": "str",  # Unique test identifier for the load test, must contain
                      only lower-case alphabetic, numeric, underscore or hyphen characters. Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "baselineTestRunId": "str",  # Optional. Id of the test run to be marked as
                      baseline to view trends of client-side metrics from recent test runs.
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "kind": "str",  # Optional. Kind of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str"  # Optional. Subnet ID on which the load test instances
                      should run.
                }
        """

    @overload
    async def create_or_update_test(
        self, test_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.Test:
        # pylint: disable=line-too-long
        """Create a new test or update an existing test by providing the test Id.

        Create a new test or update an existing test by providing the test Id.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: The resource instance. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: Test. The Test is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.Test
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "testId": "str",  # Unique test identifier for the load test, must contain
                      only lower-case alphabetic, numeric, underscore or hyphen characters. Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "baselineTestRunId": "str",  # Optional. Id of the test run to be marked as
                      baseline to view trends of client-side metrics from recent test runs.
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "kind": "str",  # Optional. Kind of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str"  # Optional. Subnet ID on which the load test instances
                      should run.
                }
        """

    @overload
    async def create_or_update_test(
        self, test_id: str, body: IO[bytes], *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.Test:
        # pylint: disable=line-too-long
        """Create a new test or update an existing test by providing the test Id.

        Create a new test or update an existing test by providing the test Id.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: The resource instance. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: Test. The Test is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.Test
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "testId": "str",  # Unique test identifier for the load test, must contain
                      only lower-case alphabetic, numeric, underscore or hyphen characters. Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "baselineTestRunId": "str",  # Optional. Id of the test run to be marked as
                      baseline to view trends of client-side metrics from recent test runs.
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "kind": "str",  # Optional. Kind of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str"  # Optional. Subnet ID on which the load test instances
                      should run.
                }
        """

    @distributed_trace_async
    async def create_or_update_test(
        self, test_id: str, body: Union[_models.Test, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.Test:
        # pylint: disable=line-too-long
        """Create a new test or update an existing test by providing the test Id.

        Create a new test or update an existing test by providing the test Id.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: The resource instance. Is one of the following types: Test, JSON, IO[bytes]
         Required.
        :type body: ~azure.developer.loadtesting.models.Test or JSON or IO[bytes]
        :return: Test. The Test is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.Test
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "testId": "str",  # Unique test identifier for the load test, must contain
                      only lower-case alphabetic, numeric, underscore or hyphen characters. Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "baselineTestRunId": "str",  # Optional. Id of the test run to be marked as
                      baseline to view trends of client-side metrics from recent test runs.
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "kind": "str",  # Optional. Kind of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str"  # Optional. Subnet ID on which the load test instances
                      should run.
                }

                # response body for status code(s): 201, 200
                response == {
                    "testId": "str",  # Unique test identifier for the load test, must contain
                      only lower-case alphabetic, numeric, underscore or hyphen characters. Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "baselineTestRunId": "str",  # Optional. Id of the test run to be marked as
                      baseline to view trends of client-side metrics from recent test runs.
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "kind": "str",  # Optional. Kind of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str"  # Optional. Subnet ID on which the load test instances
                      should run.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Test] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_load_test_administration_create_or_update_test_request(
            test_id=test_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.Test, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.Test, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_or_update_app_components(
        self,
        test_id: str,
        body: _models.TestAppComponents,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestAppComponents:
        # pylint: disable=line-too-long
        """Add an app component to a test.

        Add an app component to a test by providing the resource Id, name and type.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: App Component model. Required.
        :type body: ~azure.developer.loadtesting.models.TestAppComponents
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestAppComponents. The TestAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }

                # response body for status code(s): 201, 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @overload
    async def create_or_update_app_components(
        self, test_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestAppComponents:
        # pylint: disable=line-too-long
        """Add an app component to a test.

        Add an app component to a test by providing the resource Id, name and type.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: App Component model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestAppComponents. The TestAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @overload
    async def create_or_update_app_components(
        self, test_id: str, body: IO[bytes], *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestAppComponents:
        # pylint: disable=line-too-long
        """Add an app component to a test.

        Add an app component to a test by providing the resource Id, name and type.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: App Component model. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestAppComponents. The TestAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @distributed_trace_async
    async def create_or_update_app_components(
        self, test_id: str, body: Union[_models.TestAppComponents, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.TestAppComponents:
        # pylint: disable=line-too-long
        """Add an app component to a test.

        Add an app component to a test by providing the resource Id, name and type.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: App Component model. Is one of the following types: TestAppComponents, JSON,
         IO[bytes] Required.
        :type body: ~azure.developer.loadtesting.models.TestAppComponents or JSON or IO[bytes]
        :return: TestAppComponents. The TestAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }

                # response body for status code(s): 201, 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("content-type", None))
        cls: ClsType[_models.TestAppComponents] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_load_test_administration_create_or_update_app_components_request(
            test_id=test_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestAppComponents, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestAppComponents, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_or_update_server_metrics_config(
        self,
        test_id: str,
        body: _models.TestServerMetricConfig,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestServerMetricConfig:
        """Configure server metrics for a test.

        Configure server metrics for a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Server metric configuration model. Required.
        :type body: ~azure.developer.loadtesting.models.TestServerMetricConfig
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestServerMetricConfig. The TestServerMetricConfig is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }

                # response body for status code(s): 201, 200
                response == {
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @overload
    async def create_or_update_server_metrics_config(
        self, test_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestServerMetricConfig:
        """Configure server metrics for a test.

        Configure server metrics for a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Server metric configuration model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestServerMetricConfig. The TestServerMetricConfig is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @overload
    async def create_or_update_server_metrics_config(
        self, test_id: str, body: IO[bytes], *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestServerMetricConfig:
        """Configure server metrics for a test.

        Configure server metrics for a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Server metric configuration model. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestServerMetricConfig. The TestServerMetricConfig is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @distributed_trace_async
    async def create_or_update_server_metrics_config(
        self, test_id: str, body: Union[_models.TestServerMetricConfig, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.TestServerMetricConfig:
        """Configure server metrics for a test.

        Configure server metrics for a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Server metric configuration model. Is one of the following types:
         TestServerMetricConfig, JSON, IO[bytes] Required.
        :type body: ~azure.developer.loadtesting.models.TestServerMetricConfig or JSON or IO[bytes]
        :return: TestServerMetricConfig. The TestServerMetricConfig is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }

                # response body for status code(s): 201, 200
                response == {
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("content-type", None))
        cls: ClsType[_models.TestServerMetricConfig] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_load_test_administration_create_or_update_server_metrics_config_request(
            test_id=test_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestServerMetricConfig, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestServerMetricConfig, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_app_components(self, test_id: str, **kwargs: Any) -> _models.TestAppComponents:
        # pylint: disable=line-too-long
        """Get associated app component (collection of azure resources) for the given test.

        Get associated app component (collection of azure resources) for the given test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: TestAppComponents. The TestAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestAppComponents] = kwargs.pop("cls", None)

        _request = build_load_test_administration_get_app_components_request(
            test_id=test_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestAppComponents, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_server_metrics_config(self, test_id: str, **kwargs: Any) -> _models.TestServerMetricConfig:
        """List server metrics configuration for the given test.

        List server metrics configuration for the given test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: TestServerMetricConfig. The TestServerMetricConfig is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestServerMetricConfig] = kwargs.pop("cls", None)

        _request = build_load_test_administration_get_server_metrics_config_request(
            test_id=test_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestServerMetricConfig, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_test(self, test_id: str, **kwargs: Any) -> _models.Test:
        # pylint: disable=line-too-long
        """Get load test details by test Id.

        Get load test details by test Id.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: Test. The Test is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.Test
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "testId": "str",  # Unique test identifier for the load test, must contain
                      only lower-case alphabetic, numeric, underscore or hyphen characters. Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "baselineTestRunId": "str",  # Optional. Id of the test run to be marked as
                      baseline to view trends of client-side metrics from recent test runs.
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "kind": "str",  # Optional. Kind of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str"  # Optional. Subnet ID on which the load test instances
                      should run.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Test] = kwargs.pop("cls", None)

        _request = build_load_test_administration_get_test_request(
            test_id=test_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Test, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_test_file(self, test_id: str, file_name: str, **kwargs: Any) -> _models.TestFileInfo:
        # pylint: disable=line-too-long
        """Get all the files that are associated with a test.

        Get all the files that are associated with a test.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param file_name: Name of the file. Required.
        :type file_name: str
        :return: TestFileInfo. The TestFileInfo is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestFileInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "fileName": "str",  # Name of the file. Required.
                    "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry time of the file
                      (RFC 3339 literal format).
                    "fileType": "str",  # Optional. File type. Known values are: "JMX_FILE",
                      "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                      and "TEST_SCRIPT".
                    "url": "str",  # Optional. File URL.
                    "validationFailureDetails": "str",  # Optional. Validation failure error
                      details.
                    "validationStatus": "str"  # Optional. Validation status of the file. Known
                      values are: "NOT_VALIDATED", "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestFileInfo] = kwargs.pop("cls", None)

        _request = build_load_test_administration_get_test_file_request(
            test_id=test_id,
            file_name=file_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestFileInfo, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_test_files(self, test_id: str, **kwargs: Any) -> AsyncIterable["_models.TestFileInfo"]:
        # pylint: disable=line-too-long
        """Get all test files.

        Get all test files.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: An iterator like instance of TestFileInfo
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.TestFileInfo]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "fileName": "str",  # Name of the file. Required.
                    "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry time of the file
                      (RFC 3339 literal format).
                    "fileType": "str",  # Optional. File type. Known values are: "JMX_FILE",
                      "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                      and "TEST_SCRIPT".
                    "url": "str",  # Optional. File URL.
                    "validationFailureDetails": "str",  # Optional. Validation failure error
                      details.
                    "validationStatus": "str"  # Optional. Validation status of the file. Known
                      values are: "NOT_VALIDATED", "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.TestFileInfo]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_load_test_administration_list_test_files_request(
                    test_id=test_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TestFileInfo], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_tests(
        self,
        *,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        last_modified_start_time: Optional[datetime.datetime] = None,
        last_modified_end_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.Test"]:
        # pylint: disable=line-too-long
        """Get all load tests by the fully qualified resource Id e.g
        subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.

        Get all load tests by the fully qualified resource Id e.g
        subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.

        :keyword orderby: Sort on the supported fields in (field asc/desc) format. eg:
         lastModifiedDateTime asc. Supported fields - lastModifiedDateTime. Default value is None.
        :paramtype orderby: str
        :keyword search: Prefix based, case sensitive search on searchable fields - displayName,
         createdBy. For example, to search for a test, with display name is Login Test,
         the search parameter can be Login. Default value is None.
        :paramtype search: str
        :keyword last_modified_start_time: Start DateTime(RFC 3339 literal format) of the last updated
         time range to filter tests. Default value is None.
        :paramtype last_modified_start_time: ~datetime.datetime
        :keyword last_modified_end_time: End DateTime(RFC 3339 literal format) of the last updated time
         range to filter tests. Default value is None.
        :paramtype last_modified_end_time: ~datetime.datetime
        :return: An iterator like instance of Test
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.Test]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "testId": "str",  # Unique test identifier for the load test, must contain
                      only lower-case alphabetic, numeric, underscore or hyphen characters. Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "baselineTestRunId": "str",  # Optional. Id of the test run to be marked as
                      baseline to view trends of client-side metrics from recent test runs.
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "urlTestConfigFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "fileName": "str",  # Name of the file. Required.
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (RFC 3339 literal format).
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                              "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                            "url": "str",  # Optional. File URL.
                            "validationFailureDetails": "str",  # Optional. Validation
                              failure error details.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "kind": "str",  # Optional. Kind of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str"  # Optional. Subnet ID on which the load test instances
                      should run.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.Test]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_load_test_administration_list_tests_request(
                    orderby=orderby,
                    search=search,
                    last_modified_start_time=last_modified_start_time,
                    last_modified_end_time=last_modified_end_time,
                    maxpagesize=maxpagesize,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Test], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def begin_upload_test_file(
        self,
        test_id: str,
        file_name: str,
        body: bytes,
        *,
        file_type: Optional[Union[str, _models.FileType]] = None,
        **kwargs: Any
    ) -> _models.TestFileInfo:
        # pylint: disable=line-too-long
        """Upload input file for a given test Id. File size can't be more than 50 MB.
        Existing file with same name for the given test will be overwritten. File
        should be provided in the request body as application/octet-stream.

        Upload input file for a given test Id. File size can't be more than 50 MB.
        Existing file with same name for the given test will be overwritten. File
        should be provided in the request body as application/octet-stream.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param file_name: Unique name for test file with file extension like : App.jmx. Required.
        :type file_name: str
        :param body: The file content as application/octet-stream. Required.
        :type body: bytes
        :keyword file_type: File type. Known values are: "JMX_FILE", "USER_PROPERTIES",
         "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT". Default value
         is None.
        :paramtype file_type: str or ~azure.developer.loadtesting.models.FileType
        :return: TestFileInfo. The TestFileInfo is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestFileInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "fileName": "str",  # Name of the file. Required.
                    "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry time of the file
                      (RFC 3339 literal format).
                    "fileType": "str",  # Optional. File type. Known values are: "JMX_FILE",
                      "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                      and "TEST_SCRIPT".
                    "url": "str",  # Optional. File URL.
                    "validationFailureDetails": "str",  # Optional. Validation failure error
                      details.
                    "validationStatus": "str"  # Optional. Validation status of the file. Known
                      values are: "NOT_VALIDATED", "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("content-type", "application/octet-stream"))
        cls: ClsType[_models.TestFileInfo] = kwargs.pop("cls", None)

        _content = body

        _request = build_load_test_administration_begin_upload_test_file_request(
            test_id=test_id,
            file_name=file_name,
            file_type=file_type,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestFileInfo, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_test_file(  # pylint: disable=inconsistent-return-statements
        self, test_id: str, file_name: str, **kwargs: Any
    ) -> None:
        """Delete file by the file name for a test.

        Delete file by the file name for a test.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param file_name: Name of the file. Required.
        :type file_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_load_test_administration_delete_test_file_request(
            test_id=test_id,
            file_name=file_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def delete_test(self, test_id: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete a test by its test Id.

        Delete a test by its test Id.

        :param test_id: Unique test identifier for the load test, must contain only lower-case
         alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_load_test_administration_delete_test_request(
            test_id=test_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore


class LoadTestRunClientOperationsMixin(LoadTestRunClientMixinABC):

    @overload
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_run_id", "content_type", "accept"]},
    )
    async def begin_test_profile_run(
        self,
        test_profile_run_id: str,
        body: _models.TestProfileRun,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestProfileRun:
        # pylint: disable=line-too-long
        """Create and start a new test profile run.

        Create and start a new test profile run with the given test profile run Id.

        :param test_profile_run_id: Unique identifier for the test profile run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_run_id: str
        :param body: The resource instance. Required.
        :type body: ~azure.developer.loadtesting.models.TestProfileRun
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestProfileRun. The TestProfileRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfileRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # JSON input template you can fill out and use as your body input.
                body = {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }
        """

    @overload
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_run_id", "content_type", "accept"]},
    )
    async def begin_test_profile_run(
        self, test_profile_run_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestProfileRun:
        # pylint: disable=line-too-long
        """Create and start a new test profile run.

        Create and start a new test profile run with the given test profile run Id.

        :param test_profile_run_id: Unique identifier for the test profile run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_run_id: str
        :param body: The resource instance. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestProfileRun. The TestProfileRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfileRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }
        """

    @overload
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_run_id", "content_type", "accept"]},
    )
    async def begin_test_profile_run(
        self,
        test_profile_run_id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestProfileRun:
        # pylint: disable=line-too-long
        """Create and start a new test profile run.

        Create and start a new test profile run with the given test profile run Id.

        :param test_profile_run_id: Unique identifier for the test profile run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_run_id: str
        :param body: The resource instance. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestProfileRun. The TestProfileRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfileRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }
        """

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_run_id", "content_type", "accept"]},
    )
    async def begin_test_profile_run(
        self, test_profile_run_id: str, body: Union[_models.TestProfileRun, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.TestProfileRun:
        # pylint: disable=line-too-long
        """Create and start a new test profile run.

        Create and start a new test profile run with the given test profile run Id.

        :param test_profile_run_id: Unique identifier for the test profile run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_run_id: str
        :param body: The resource instance. Is one of the following types: TestProfileRun, JSON,
         IO[bytes] Required.
        :type body: ~azure.developer.loadtesting.models.TestProfileRun or JSON or IO[bytes]
        :return: TestProfileRun. The TestProfileRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfileRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # JSON input template you can fill out and use as your body input.
                body = {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TestProfileRun] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_load_test_run_begin_test_profile_run_request(
            test_profile_run_id=test_profile_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestProfileRun, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestProfileRun, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_run_id", "accept"]},
    )  # pylint: disable=inconsistent-return-statements
    async def delete_test_profile_run(  # pylint: disable=inconsistent-return-statements
        self, test_profile_run_id: str, **kwargs: Any
    ) -> None:
        """Delete an existing load test profile run.

        Delete an existing load test profile run by providing the test profile run Id.

        :param test_profile_run_id: Unique identifier for the test profile run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_run_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_load_test_run_delete_test_profile_run_request(
            test_profile_run_id=test_profile_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_run_id", "accept"]},
    )
    async def get_test_profile_run(self, test_profile_run_id: str, **kwargs: Any) -> _models.TestProfileRun:
        # pylint: disable=line-too-long
        """Get test profile run details.

        Get test profile run details by test profile run Id.

        :param test_profile_run_id: Unique identifier for the test profile run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_run_id: str
        :return: TestProfileRun. The TestProfileRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfileRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestProfileRun] = kwargs.pop("cls", None)

        _request = build_load_test_run_get_test_profile_run_request(
            test_profile_run_id=test_profile_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestProfileRun, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={
            "2024-05-01-preview": [
                "api_version",
                "maxpagesize",
                "min_start_date_time",
                "max_start_date_time",
                "min_end_date_time",
                "max_end_date_time",
                "created_date_start_time",
                "created_date_end_time",
                "test_profile_run_ids",
                "test_profile_ids",
                "statuses",
                "accept",
            ]
        },
    )
    def list_test_profile_runs(
        self,
        *,
        min_start_date_time: Optional[datetime.datetime] = None,
        max_start_date_time: Optional[datetime.datetime] = None,
        min_end_date_time: Optional[datetime.datetime] = None,
        max_end_date_time: Optional[datetime.datetime] = None,
        created_date_start_time: Optional[datetime.datetime] = None,
        created_date_end_time: Optional[datetime.datetime] = None,
        test_profile_run_ids: Optional[str] = None,
        test_profile_ids: Optional[str] = None,
        statuses: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.TestProfileRun"]:
        # pylint: disable=line-too-long
        """List test profile runs.

        Get all test profile runs for the given filters.

        :keyword min_start_date_time: Minimum Start DateTime(RFC 3339 literal format) of the test
         profile runs to filter on. Default value is None.
        :paramtype min_start_date_time: ~datetime.datetime
        :keyword max_start_date_time: Maximum Start DateTime(RFC 3339 literal format) of the test
         profile runs to filter on. Default value is None.
        :paramtype max_start_date_time: ~datetime.datetime
        :keyword min_end_date_time: Minimum End DateTime(RFC 3339 literal format) of the test profile
         runs to filter on. Default value is None.
        :paramtype min_end_date_time: ~datetime.datetime
        :keyword max_end_date_time: Maximum End DateTime(RFC 3339 literal format) of the test profile
         runs to filter on. Default value is None.
        :paramtype max_end_date_time: ~datetime.datetime
        :keyword created_date_start_time: Start DateTime(RFC 3339 literal format) of the created time
         range to filter test profile runs. Default value is None.
        :paramtype created_date_start_time: ~datetime.datetime
        :keyword created_date_end_time: End DateTime(RFC 3339 literal format) of the created time range
         to filter test profile runs. Default value is None.
        :paramtype created_date_end_time: ~datetime.datetime
        :keyword test_profile_run_ids: Comma separated list of IDs of the test profile runs to filter.
         Default value is None.
        :paramtype test_profile_run_ids: str
        :keyword test_profile_ids: Comma separated IDs of the test profiles which should be associated
         with the test profile runs to fetch. Default value is None.
        :paramtype test_profile_ids: str
        :keyword statuses: Comma separated list of Statuses of the test profile runs to filter. Default
         value is None.
        :paramtype statuses: str
        :return: An iterator like instance of TestProfileRun
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.TestProfileRun]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.TestProfileRun]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_load_test_run_list_test_profile_runs_request(
                    maxpagesize=maxpagesize,
                    min_start_date_time=min_start_date_time,
                    max_start_date_time=max_start_date_time,
                    min_end_date_time=min_end_date_time,
                    max_end_date_time=max_end_date_time,
                    created_date_start_time=created_date_start_time,
                    created_date_end_time=created_date_end_time,
                    test_profile_run_ids=test_profile_run_ids,
                    test_profile_ids=test_profile_ids,
                    statuses=statuses,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TestProfileRun], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2024-05-01-preview",
        params_added_on={"2024-05-01-preview": ["api_version", "test_profile_run_id", "accept"]},
    )
    async def stop_test_profile_run(self, test_profile_run_id: str, **kwargs: Any) -> _models.TestProfileRun:
        # pylint: disable=line-too-long
        """Stop test profile run.

        Stop test profile run for the given test profile run Id.

        :param test_profile_run_id: Unique identifier for the test profile run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_profile_run_id: str
        :return: TestProfileRun. The TestProfileRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestProfileRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "FunctionsFlexConsumption":
                target_resource_configurations = {
                    "kind": "FunctionsFlexConsumption",
                    "configurations": {
                        "str": {
                            "httpConcurrency": 0,  # HTTP Concurrency for the function
                              app. Required.
                            "instanceMemoryMB": 0  # Memory size of the instance.
                              Supported values are 2048, 4096. Required.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "testProfileRunId": "str",  # Unique identifier for the test profile run,
                      must contain only lower-case alphabetic, numeric, underscore or hyphen
                      characters. Required.
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "description": "str",  # Optional. The test profile run description.
                    "displayName": "str",  # Optional. Display name for the test profile run.
                    "durationInSeconds": 0,  # Optional. Test profile run duration in seconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run end
                      DateTime(RFC 3339 literal format).
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "recommendations": [
                        {
                            "category": "str",  # Category of the recommendation.
                              Required. Known values are: "ThroughputOptimized" and "CostOptimized".
                            "configurations": [
                                "str"  # Optional. List of configurations IDs for
                                  which the recommendation is applicable. These are a subset of the
                                  provided target resource configurations.
                            ]
                        }
                    ],
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test profile run
                      start DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test profile run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "EXECUTING", "DONE", "CANCELLING", "CANCELLED", and
                      "FAILED".
                    "targetResourceConfigurations": target_resource_configurations,
                    "targetResourceId": "str",  # Optional. Target resource ID on which the test
                      profile run is created.
                    "testProfileId": "str",  # Optional. Associated test profile ID for the test
                      profile run. This is required to create a test profile run and can't be updated.
                    "testRunDetails": {
                        "str": {
                            "configurationId": "str",  # ID of the configuration on which
                              the test ran. Required.
                            "properties": {
                                "str": "str"  # Key value pair of extra properties
                                  associated with the test run. Required.
                            },
                            "status": "str"  # Status of the test run. Required. Known
                              values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED",
                              "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
                              "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED",
                              "VALIDATION_SUCCESS", and "VALIDATION_FAILURE".
                        }
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestProfileRun] = kwargs.pop("cls", None)

        _request = build_load_test_run_stop_test_profile_run_request(
            test_profile_run_id=test_profile_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestProfileRun, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def begin_test_run(
        self,
        test_run_id: str,
        body: _models.TestRun,
        *,
        content_type: str = "application/merge-patch+json",
        old_test_run_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TestRun:
        # pylint: disable=line-too-long
        """Create and start a new test run with the given test run Id.

        Create and start a new test run with the given test run Id.

        :param test_run_id: Unique test run identifier for the load test run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: The resource instance. Required.
        :type body: ~azure.developer.loadtesting.models.TestRun
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :keyword old_test_run_id: Existing test run identifier that should be rerun, if this is
         provided, the
         test will run with the JMX file, configuration and app components from the
         existing test run. You can override the configuration values for new test run
         in the request body. Default value is None.
        :paramtype old_test_run_id: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }

                # response body for status code(s): 201, 200
                response == {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }
        """

    @overload
    async def begin_test_run(
        self,
        test_run_id: str,
        body: JSON,
        *,
        content_type: str = "application/merge-patch+json",
        old_test_run_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TestRun:
        # pylint: disable=line-too-long
        """Create and start a new test run with the given test run Id.

        Create and start a new test run with the given test run Id.

        :param test_run_id: Unique test run identifier for the load test run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: The resource instance. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :keyword old_test_run_id: Existing test run identifier that should be rerun, if this is
         provided, the
         test will run with the JMX file, configuration and app components from the
         existing test run. You can override the configuration values for new test run
         in the request body. Default value is None.
        :paramtype old_test_run_id: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }
        """

    @overload
    async def begin_test_run(
        self,
        test_run_id: str,
        body: IO[bytes],
        *,
        content_type: str = "application/merge-patch+json",
        old_test_run_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TestRun:
        # pylint: disable=line-too-long
        """Create and start a new test run with the given test run Id.

        Create and start a new test run with the given test run Id.

        :param test_run_id: Unique test run identifier for the load test run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: The resource instance. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :keyword old_test_run_id: Existing test run identifier that should be rerun, if this is
         provided, the
         test will run with the JMX file, configuration and app components from the
         existing test run. You can override the configuration values for new test run
         in the request body. Default value is None.
        :paramtype old_test_run_id: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }
        """

    @distributed_trace_async
    async def begin_test_run(
        self,
        test_run_id: str,
        body: Union[_models.TestRun, JSON, IO[bytes]],
        *,
        old_test_run_id: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TestRun:
        # pylint: disable=line-too-long
        """Create and start a new test run with the given test run Id.

        Create and start a new test run with the given test run Id.

        :param test_run_id: Unique test run identifier for the load test run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: The resource instance. Is one of the following types: TestRun, JSON, IO[bytes]
         Required.
        :type body: ~azure.developer.loadtesting.models.TestRun or JSON or IO[bytes]
        :keyword old_test_run_id: Existing test run identifier that should be rerun, if this is
         provided, the
         test will run with the JMX file, configuration and app components from the
         existing test run. You can override the configuration values for new test run
         in the request body. Default value is None.
        :paramtype old_test_run_id: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }

                # response body for status code(s): 201, 200
                response == {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.TestRun] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_load_test_run_begin_test_run_request(
            test_run_id=test_run_id,
            old_test_run_id=old_test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestRun, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestRun, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_or_update_app_components(
        self,
        test_run_id: str,
        body: _models.TestRunAppComponents,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestRunAppComponents:
        # pylint: disable=line-too-long
        """Add an app component to a test run.

        Add an app component to a test run by providing the resource Id, name and type.

        :param test_run_id: Unique Id for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: App Component model. Required.
        :type body: ~azure.developer.loadtesting.models.TestRunAppComponents
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRunAppComponents. The TestRunAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }

                # response body for status code(s): 201, 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @overload
    async def create_or_update_app_components(
        self, test_run_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestRunAppComponents:
        # pylint: disable=line-too-long
        """Add an app component to a test run.

        Add an app component to a test run by providing the resource Id, name and type.

        :param test_run_id: Unique Id for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: App Component model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRunAppComponents. The TestRunAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @overload
    async def create_or_update_app_components(
        self, test_run_id: str, body: IO[bytes], *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestRunAppComponents:
        # pylint: disable=line-too-long
        """Add an app component to a test run.

        Add an app component to a test run by providing the resource Id, name and type.

        :param test_run_id: Unique Id for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: App Component model. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRunAppComponents. The TestRunAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @distributed_trace_async
    async def create_or_update_app_components(
        self, test_run_id: str, body: Union[_models.TestRunAppComponents, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.TestRunAppComponents:
        # pylint: disable=line-too-long
        """Add an app component to a test run.

        Add an app component to a test run by providing the resource Id, name and type.

        :param test_run_id: Unique Id for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: App Component model. Is one of the following types: TestRunAppComponents, JSON,
         IO[bytes] Required.
        :type body: ~azure.developer.loadtesting.models.TestRunAppComponents or JSON or IO[bytes]
        :return: TestRunAppComponents. The TestRunAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }

                # response body for status code(s): 201, 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("content-type", None))
        cls: ClsType[_models.TestRunAppComponents] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_load_test_run_create_or_update_app_components_request(
            test_run_id=test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestRunAppComponents, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestRunAppComponents, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_or_update_server_metrics_config(
        self,
        test_run_id: str,
        body: _models.TestRunServerMetricConfig,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.TestRunServerMetricConfig:
        """Configure server metrics for a test run.

        Configure server metrics for a test run.

        :param test_run_id: Unique Id for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Server metric configuration model. Required.
        :type body: ~azure.developer.loadtesting.models.TestRunServerMetricConfig
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRunServerMetricConfig. The TestRunServerMetricConfig is compatible with
         MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }

                # response body for status code(s): 201, 200
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @overload
    async def create_or_update_server_metrics_config(
        self, test_run_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestRunServerMetricConfig:
        """Configure server metrics for a test run.

        Configure server metrics for a test run.

        :param test_run_id: Unique Id for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Server metric configuration model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRunServerMetricConfig. The TestRunServerMetricConfig is compatible with
         MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @overload
    async def create_or_update_server_metrics_config(
        self, test_run_id: str, body: IO[bytes], *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.TestRunServerMetricConfig:
        """Configure server metrics for a test run.

        Configure server metrics for a test run.

        :param test_run_id: Unique Id for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Server metric configuration model. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: TestRunServerMetricConfig. The TestRunServerMetricConfig is compatible with
         MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @distributed_trace_async
    async def create_or_update_server_metrics_config(
        self, test_run_id: str, body: Union[_models.TestRunServerMetricConfig, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.TestRunServerMetricConfig:
        """Configure server metrics for a test run.

        Configure server metrics for a test run.

        :param test_run_id: Unique Id for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Server metric configuration model. Is one of the following types:
         TestRunServerMetricConfig, JSON, IO[bytes] Required.
        :type body: ~azure.developer.loadtesting.models.TestRunServerMetricConfig or JSON or IO[bytes]
        :return: TestRunServerMetricConfig. The TestRunServerMetricConfig is compatible with
         MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }

                # response body for status code(s): 201, 200
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("content-type", None))
        cls: ClsType[_models.TestRunServerMetricConfig] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_load_test_run_create_or_update_server_metrics_config_request(
            test_run_id=test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestRunServerMetricConfig, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.TestRunServerMetricConfig, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_test_run(  # pylint: disable=inconsistent-return-statements
        self, test_run_id: str, **kwargs: Any
    ) -> None:
        """Delete an existing load test run.

        Delete an existing load test run by providing the testRunId.

        :param test_run_id: Unique test run identifier for the load test run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_load_test_run_delete_test_run_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def get_app_components(self, test_run_id: str, **kwargs: Any) -> _models.TestRunAppComponents:
        # pylint: disable=line-too-long
        """Get associated app component (collection of azure resources) for the given test
        run.

        Get associated app component (collection of azure resources) for the given test
        run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: TestRunAppComponents. The TestRunAppComponents is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunAppComponents
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "components": {
                        "str": {
                            "resourceId": "str",  # fully qualified resource Id e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                              Required.
                            "resourceName": "str",  # Azure resource name, required while
                              creating the app component. Required.
                            "resourceType": "str",  # Azure resource type, required while
                              creating the app component. Required.
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestRunAppComponents] = kwargs.pop("cls", None)

        _request = build_load_test_run_get_app_components_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestRunAppComponents, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_server_metrics_config(self, test_run_id: str, **kwargs: Any) -> _models.TestRunServerMetricConfig:
        """Get associated server metrics configuration for the given test run.

        Get associated server metrics configuration for the given test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: TestRunServerMetricConfig. The TestRunServerMetricConfig is compatible with
         MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunServerMetricConfig
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": "str",  # The invariant value of metric name.
                              Required.
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestRunServerMetricConfig] = kwargs.pop("cls", None)

        _request = build_load_test_run_get_server_metrics_config_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestRunServerMetricConfig, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_test_run(self, test_run_id: str, **kwargs: Any) -> _models.TestRun:
        # pylint: disable=line-too-long
        """Get test run details by test run Id.

        Get test run details by test run Id.

        :param test_run_id: Unique test run identifier for the load test run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestRun] = kwargs.pop("cls", None)

        _request = build_load_test_run_get_test_run_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestRun, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_test_run_file(self, test_run_id: str, file_name: str, **kwargs: Any) -> _models.TestRunFileInfo:
        # pylint: disable=line-too-long
        """Get test run file by file name.

        Get test run file by file name.

        :param test_run_id: Unique test run identifier for the load test run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param file_name: Name of the file. Required.
        :type file_name: str
        :return: TestRunFileInfo. The TestRunFileInfo is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRunFileInfo
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "fileName": "str",  # Name of the file. Required.
                    "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry time of the file
                      (RFC 3339 literal format).
                    "fileType": "str",  # Optional. File type. Known values are: "JMX_FILE",
                      "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                      and "TEST_SCRIPT".
                    "url": "str",  # Optional. File URL.
                    "validationFailureDetails": "str",  # Optional. Validation failure error
                      details.
                    "validationStatus": "str"  # Optional. Validation status of the file. Known
                      values are: "NOT_VALIDATED", "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestRunFileInfo] = kwargs.pop("cls", None)

        _request = build_load_test_run_get_test_run_file_request(
            test_run_id=test_run_id,
            file_name=file_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestRunFileInfo, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def list_metric_dimension_values(
        self,
        test_run_id: str,
        name: str,
        *,
        metric_name: str,
        metric_namespace: str,
        time_interval: str,
        interval: Optional[Union[str, _models.TimeGrain]] = None,
        **kwargs: Any
    ) -> _models.DimensionValueList:
        """List the dimension values for the given metric dimension name.

        List the dimension values for the given metric dimension name.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param name: Dimension name. Required.
        :type name: str
        :keyword metric_name: Metric name. Required.
        :paramtype metric_name: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :keyword time_interval: The timespan of the query. It is a string with the following format
         'startDateTime_ISO/endDateTime_ISO'. Required.
        :paramtype time_interval: str
        :keyword interval: The interval (i.e. timegrain) of the query. Known values are: "PT5S",
         "PT10S", "PT1M", "PT5M", and "PT1H". Default value is None.
        :paramtype interval: str or ~azure.developer.loadtesting.models.TimeGrain
        :return: DimensionValueList. The DimensionValueList is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.DimensionValueList
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "name": "str",  # Optional. The dimension name.
                    "nextLink": "str",  # Optional. Link for the next set of values in case of
                      paginated results, if applicable.
                    "value": [
                        "str"  # Optional. The dimension value.
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DimensionValueList] = kwargs.pop("cls", None)

        _request = build_load_test_run_list_metric_dimension_values_request(
            test_run_id=test_run_id,
            name=name,
            metric_name=metric_name,
            metric_namespace=metric_namespace,
            time_interval=time_interval,
            interval=interval,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DimensionValueList, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_metric_definitions(
        self, test_run_id: str, *, metric_namespace: str, **kwargs: Any
    ) -> _models.MetricDefinitionCollection:
        # pylint: disable=line-too-long
        """List the metric definitions for a load test run.

        List the metric definitions for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :return: MetricDefinitionCollection. The MetricDefinitionCollection is compatible with
         MutableMapping
        :rtype: ~azure.developer.loadtesting.models.MetricDefinitionCollection
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "description": "str",  # Optional. The metric description.
                            "dimensions": [
                                {
                                    "description": "str",  # Optional. The
                                      description.
                                    "name": "str"  # Optional. The name.
                                }
                            ],
                            "metricAvailabilities": [
                                {
                                    "timeGrain": "str"  # Optional. The time
                                      grain specifies the aggregation interval for the metric.
                                      Expressed as a duration 'PT1M', 'PT1H', etc. Known values are:
                                      "PT5S", "PT10S", "PT1M", "PT5M", and "PT1H".
                                }
                            ],
                            "name": "str",  # Optional. The metric name.
                            "namespace": "str",  # Optional. The namespace the metric
                              belongs to.
                            "primaryAggregationType": "str",  # Optional. The primary
                              aggregation type value defining how to use the values for display. Known
                              values are: "Average", "Count", "None", "Total", "Percentile75",
                              "Percentile90", "Percentile95", "Percentile96", "Percentile97",
                              "Percentile98", "Percentile99", "Percentile999", and "Percentile9999".
                            "supportedAggregationTypes": [
                                "str"  # Optional. The collection of what all
                                  aggregation types are supported.
                            ],
                            "unit": "str"  # Optional. The unit of the metric. Known
                              values are: "NotSpecified", "Percent", "Count", "Seconds",
                              "Milliseconds", "Bytes", "BytesPerSecond", and "CountPerSecond".
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.MetricDefinitionCollection] = kwargs.pop("cls", None)

        _request = build_load_test_run_get_metric_definitions_request(
            test_run_id=test_run_id,
            metric_namespace=metric_namespace,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.MetricDefinitionCollection, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get_metric_namespaces(self, test_run_id: str, **kwargs: Any) -> _models.MetricNamespaceCollection:
        """List the metric namespaces for a load test run.

        List the metric namespaces for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: MetricNamespaceCollection. The MetricNamespaceCollection is compatible with
         MutableMapping
        :rtype: ~azure.developer.loadtesting.models.MetricNamespaceCollection
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "description": "str",  # Optional. The namespace description.
                            "name": "str"  # Optional. The metric namespace name.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.MetricNamespaceCollection] = kwargs.pop("cls", None)

        _request = build_load_test_run_get_metric_namespaces_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.MetricNamespaceCollection, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def list_metrics(
        self,
        test_run_id: str,
        body: Optional[_models.MetricRequestPayload] = None,
        *,
        metric_name: str,
        metric_namespace: str,
        time_interval: str,
        aggregation: Optional[str] = None,
        interval: Optional[Union[str, _models.TimeGrain]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.TimeSeriesElement"]:
        """List the metric values for a load test run.

        List the metric values for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Metric dimension filter. Default value is None.
        :type body: ~azure.developer.loadtesting.models.MetricRequestPayload
        :keyword metric_name: Metric name. Required.
        :paramtype metric_name: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :keyword time_interval: The timespan of the query. It is a string with the following format
         'startDateTime_ISO/endDateTime_ISO'. Required.
        :paramtype time_interval: str
        :keyword aggregation: The aggregation. Default value is None.
        :paramtype aggregation: str
        :keyword interval: The interval (i.e. timegrain) of the query. Known values are: "PT5S",
         "PT10S", "PT1M", "PT5M", and "PT1H". Default value is None.
        :paramtype interval: str or ~azure.developer.loadtesting.models.TimeGrain
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An iterator like instance of TimeSeriesElement
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.TimeSeriesElement]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "filters": [
                        {
                            "name": "str",  # Optional. The dimension name.
                            "values": [
                                "str"  # Optional. The dimension values. Maximum
                                  values can be 20.
                            ]
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "data": [
                        {
                            "timestamp": "2020-02-20 00:00:00",  # Optional. The
                              timestamp for the metric value in RFC 3339 format.
                            "value": 0.0  # Optional. The metric value.
                        }
                    ],
                    "dimensionValues": [
                        {
                            "name": "str",  # Optional. The name of the dimension.
                            "value": "str"  # Optional. The value of the dimension.
                        }
                    ]
                }
        """

    @overload
    def list_metrics(
        self,
        test_run_id: str,
        body: Optional[JSON] = None,
        *,
        metric_name: str,
        metric_namespace: str,
        time_interval: str,
        aggregation: Optional[str] = None,
        interval: Optional[Union[str, _models.TimeGrain]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.TimeSeriesElement"]:
        """List the metric values for a load test run.

        List the metric values for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Metric dimension filter. Default value is None.
        :type body: JSON
        :keyword metric_name: Metric name. Required.
        :paramtype metric_name: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :keyword time_interval: The timespan of the query. It is a string with the following format
         'startDateTime_ISO/endDateTime_ISO'. Required.
        :paramtype time_interval: str
        :keyword aggregation: The aggregation. Default value is None.
        :paramtype aggregation: str
        :keyword interval: The interval (i.e. timegrain) of the query. Known values are: "PT5S",
         "PT10S", "PT1M", "PT5M", and "PT1H". Default value is None.
        :paramtype interval: str or ~azure.developer.loadtesting.models.TimeGrain
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An iterator like instance of TimeSeriesElement
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.TimeSeriesElement]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "data": [
                        {
                            "timestamp": "2020-02-20 00:00:00",  # Optional. The
                              timestamp for the metric value in RFC 3339 format.
                            "value": 0.0  # Optional. The metric value.
                        }
                    ],
                    "dimensionValues": [
                        {
                            "name": "str",  # Optional. The name of the dimension.
                            "value": "str"  # Optional. The value of the dimension.
                        }
                    ]
                }
        """

    @overload
    def list_metrics(
        self,
        test_run_id: str,
        body: Optional[IO[bytes]] = None,
        *,
        metric_name: str,
        metric_namespace: str,
        time_interval: str,
        aggregation: Optional[str] = None,
        interval: Optional[Union[str, _models.TimeGrain]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.TimeSeriesElement"]:
        """List the metric values for a load test run.

        List the metric values for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Metric dimension filter. Default value is None.
        :type body: IO[bytes]
        :keyword metric_name: Metric name. Required.
        :paramtype metric_name: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :keyword time_interval: The timespan of the query. It is a string with the following format
         'startDateTime_ISO/endDateTime_ISO'. Required.
        :paramtype time_interval: str
        :keyword aggregation: The aggregation. Default value is None.
        :paramtype aggregation: str
        :keyword interval: The interval (i.e. timegrain) of the query. Known values are: "PT5S",
         "PT10S", "PT1M", "PT5M", and "PT1H". Default value is None.
        :paramtype interval: str or ~azure.developer.loadtesting.models.TimeGrain
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An iterator like instance of TimeSeriesElement
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.TimeSeriesElement]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "data": [
                        {
                            "timestamp": "2020-02-20 00:00:00",  # Optional. The
                              timestamp for the metric value in RFC 3339 format.
                            "value": 0.0  # Optional. The metric value.
                        }
                    ],
                    "dimensionValues": [
                        {
                            "name": "str",  # Optional. The name of the dimension.
                            "value": "str"  # Optional. The value of the dimension.
                        }
                    ]
                }
        """

    @distributed_trace
    def list_metrics(
        self,
        test_run_id: str,
        body: Optional[Union[_models.MetricRequestPayload, JSON, IO[bytes]]] = None,
        *,
        metric_name: str,
        metric_namespace: str,
        time_interval: str,
        aggregation: Optional[str] = None,
        interval: Optional[Union[str, _models.TimeGrain]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.TimeSeriesElement"]:
        """List the metric values for a load test run.

        List the metric values for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Metric dimension filter. Is one of the following types: MetricRequestPayload,
         JSON, IO[bytes] Default value is None.
        :type body: ~azure.developer.loadtesting.models.MetricRequestPayload or JSON or IO[bytes]
        :keyword metric_name: Metric name. Required.
        :paramtype metric_name: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :keyword time_interval: The timespan of the query. It is a string with the following format
         'startDateTime_ISO/endDateTime_ISO'. Required.
        :paramtype time_interval: str
        :keyword aggregation: The aggregation. Default value is None.
        :paramtype aggregation: str
        :keyword interval: The interval (i.e. timegrain) of the query. Known values are: "PT5S",
         "PT10S", "PT1M", "PT5M", and "PT1H". Default value is None.
        :paramtype interval: str or ~azure.developer.loadtesting.models.TimeGrain
        :return: An iterator like instance of TimeSeriesElement
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.TimeSeriesElement]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "filters": [
                        {
                            "name": "str",  # Optional. The dimension name.
                            "values": [
                                "str"  # Optional. The dimension values. Maximum
                                  values can be 20.
                            ]
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "data": [
                        {
                            "timestamp": "2020-02-20 00:00:00",  # Optional. The
                              timestamp for the metric value in RFC 3339 format.
                            "value": 0.0  # Optional. The metric value.
                        }
                    ],
                    "dimensionValues": [
                        {
                            "name": "str",  # Optional. The name of the dimension.
                            "value": "str"  # Optional. The value of the dimension.
                        }
                    ]
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[List[_models.TimeSeriesElement]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})
        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore
            else:
                _content = None

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_load_test_run_list_metrics_request(
                    test_run_id=test_run_id,
                    metric_name=metric_name,
                    metric_namespace=metric_namespace,
                    time_interval=time_interval,
                    aggregation=aggregation,
                    interval=interval,
                    content_type=content_type,
                    api_version=self._config.api_version,
                    content=_content,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TimeSeriesElement], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_test_runs(
        self,
        *,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        test_id: Optional[str] = None,
        execution_from: Optional[datetime.datetime] = None,
        execution_to: Optional[datetime.datetime] = None,
        status: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.TestRun"]:
        # pylint: disable=line-too-long
        """Get all test runs for the given filters.

        Get all test runs for the given filters.

        :keyword orderby: Sort on the supported fields in (field asc/desc) format. eg: executedDateTime
         asc. Supported fields - executedDateTime. Default value is None.
        :paramtype orderby: str
        :keyword search: Prefix based, case sensitive search on searchable fields - description,
         executedUser. For example, to search for a test run, with description 500 VUs,
         the search parameter can be 500. Default value is None.
        :paramtype search: str
        :keyword test_id: Unique name of an existing load test. Default value is None.
        :paramtype test_id: str
        :keyword execution_from: Start DateTime(RFC 3339 literal format) of test-run execution time
         filter range. Default value is None.
        :paramtype execution_from: ~datetime.datetime
        :keyword execution_to: End DateTime(RFC 3339 literal format) of test-run execution time filter
         range. Default value is None.
        :paramtype execution_to: ~datetime.datetime
        :keyword status: Comma separated list of test run status. Default value is None.
        :paramtype status: str
        :return: An iterator like instance of TestRun
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.developer.loadtesting.models.TestRun]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.TestRun]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_load_test_run_list_test_runs_request(
                    orderby=orderby,
                    search=search,
                    test_id=test_id,
                    execution_from=execution_from,
                    execution_to=execution_to,
                    status=status,
                    maxpagesize=maxpagesize,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.TestRun], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def stop(self, test_run_id: str, **kwargs: Any) -> _models.TestRun:
        # pylint: disable=line-too-long
        """Stop test run by test run Id.

        Stop test run by test run Id.

        :param test_run_id: Unique test run identifier for the load test run, must contain only
         lower-case alphabetic, numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: TestRun. The TestRun is compatible with MutableMapping
        :rtype: ~azure.developer.loadtesting.models.TestRun
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "testRunId": "str",  # Unique test run identifier for the load test run, must
                      contain only lower-case alphabetic, numeric, underscore or hyphen characters.
                      Required.
                    "autoStopCriteria": {
                        "autoStopDisabled": bool,  # Optional. Whether auto-stop should be
                          disabled. The default value is false.
                        "errorRate": 0.0,  # Optional. Threshold percentage of errors on
                          which test run should be automatically stopped. Allowed values are in range
                          of 0.0-100.0.
                        "errorRateTimeWindowInSeconds": 0  # Optional. Time window during
                          which the error percentage should be evaluated in seconds.
                    },
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(RFC 3339 literal format).
                    "debugLogsEnabled": bool,  # Optional. Enable or disable debug level logging.
                      True if debug logs are enabled for the test run. False otherwise.
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(RFC 3339 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "kind": "str",  # Optional. Type of test. Known values are: "URL", "JMX", and
                      "Locust".
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(RFC 3339 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-400. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration in seconds.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              https://contoso-app.azurewebsites.net/login.
                            "maxResponseTimeInMs": 0,  # Optional. Maximum response time
                              in milliseconds of the API/endpoint.
                            "rampUpTime": 0,  # Optional. Ramp up time in seconds.
                            "requestsPerSecond": 0,  # Optional. Target throughput
                              (requests per second). This may not be necessarily achieved. The actual
                              throughput will be lower if the application is not capable of handling
                              it.
                            "virtualUsers": 0  # Optional. No of concurrent virtual
                              users.
                        },
                        "quickStartTest": bool,  # Optional. If true, optionalLoadTestConfig
                          is required and JMX script for the load test is not required to upload.
                        "regionalLoadTestConfig": [
                            {
                                "engineInstances": 0,  # The number of engine
                                  instances to execute load test in specified region. Supported values
                                  are in range of 1-400. Required.
                                "region": "str"  # Azure region name. The region name
                                  should of format accepted by ARM, and should be a region supported by
                                  Azure Load Testing. For example, East US should be passed as
                                  "eastus". The region name must match one of the strings in the "Name"
                                  column returned from running the "az account list-locations -o table"
                                  Azure CLI command. Required.
                            }
                        ],
                        "splitAllCSVs": bool  # Optional. If false, Azure Load Testing copies
                          and processes your input files unmodified across all test engine instances.
                          If true, Azure Load Testing splits the CSV input data evenly across all
                          engine instances. If you provide multiple CSV files, each file will be split
                          evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "continue" and "stop".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions   *
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  percentiles like "u2018p50"u2019, "u2018p90"u2019, & so on,
                                  "u2018min"u2019,   "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec,   "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p75", "p90", "p95", "p96", "p97", "p98", "p99", "p99.9", "p99.99",
                                  "min", and "max".
                                "clientMetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "publicIPDisabled": bool,  # Optional. Inject load test engines without
                      deploying public IP for outbound access.
                    "regionalStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "requestDataLevel": "str",  # Optional. Request data collection level for
                      test run. Known values are: "NONE" and "ERRORS".
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(RFC 3339 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "fileName": "str",  # Name of the file.
                                      Required.
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (RFC 3339 literal format).
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES",
                                      "ADDITIONAL_ARTIFACTS", "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG",
                                      and "TEST_SCRIPT".
                                    "url": "str",  # Optional. File URL.
                                    "validationFailureDetails": "str",  #
                                      Optional. Validation failure error details.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "urlTestConfigFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "artifactsContainerInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the container (RFC 3339 literal format).
                                "url": "str"  # Optional. This is a SAS URI to an
                                  Azure Storage Container that contains the test run artifacts.
                            },
                            "logsFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "reportFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultFileInfo": {
                                "fileName": "str",  # Name of the file. Required.
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (RFC 3339 literal format).
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", "ADDITIONAL_ARTIFACTS",
                                  "ZIPPED_ARTIFACTS", "URL_TEST_CONFIG", and "TEST_SCRIPT".
                                "url": "str",  # Optional. File URL.
                                "validationFailureDetails": "str",  # Optional.
                                  Validation failure error details.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "pct75ResTime": 0.0,  # Optional. 75 percentile response
                              time.
                            "pct96ResTime": 0.0,  # Optional. 96 percentile response
                              time.
                            "pct97ResTime": 0.0,  # Optional. 97 percentile response
                              time.
                            "pct98ResTime": 0.0,  # Optional. 98 percentile response
                              time.
                            "pct9999ResTime": 0.0,  # Optional. 99.99 percentile response
                              time.
                            "pct999ResTime": 0.0,  # Optional. 99.9 percentile response
                              time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "virtualUsers": 0  # Optional. Number of virtual users, for which test has
                      been run.
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TestRun] = kwargs.pop("cls", None)

        _request = build_load_test_run_stop_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TestRun, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
