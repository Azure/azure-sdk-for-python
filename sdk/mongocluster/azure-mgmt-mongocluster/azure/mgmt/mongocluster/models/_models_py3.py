# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.mongocluster.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.mongocluster.models.SystemData
    """


class AzureResourceManagerPrivateEndpointConnection(ProxyResource):  # pylint: disable=name-too-long
    """The private endpoint connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.mongocluster.models.SystemData
    :ivar properties: The private endpoint connection properties.
    :vartype properties: ~azure.mgmt.mongocluster.models.PrivateEndpointConnectionProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "PrivateEndpointConnectionProperties"},
    }

    def __init__(
        self, *, properties: Optional["_models.PrivateEndpointConnectionProperties"] = None, **kwargs: Any
    ) -> None:
        """
        :keyword properties: The private endpoint connection properties.
        :paramtype properties: ~azure.mgmt.mongocluster.models.PrivateEndpointConnectionProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class CheckNameAvailabilityRequest(_serialization.Model):
    """The check availability request body.

    :ivar name: The name of the resource for which availability needs to be checked.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, type: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: The name of the resource for which availability needs to be checked.
        :paramtype name: str
        :keyword type: The resource type.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type


class CheckNameAvailabilityResponse(_serialization.Model):
    """The check availability result.

    :ivar name_available: Indicates if the resource name is available.
    :vartype name_available: bool
    :ivar reason: The reason why the given name is not available. Known values are: "Invalid" and
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.mongocluster.models.CheckNameAvailabilityReason
    :ivar message: Detailed reason why the given name is available.
    :vartype message: str
    """

    _attribute_map = {
        "name_available": {"key": "nameAvailable", "type": "bool"},
        "reason": {"key": "reason", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(
        self,
        *,
        name_available: Optional[bool] = None,
        reason: Optional[Union[str, "_models.CheckNameAvailabilityReason"]] = None,
        message: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name_available: Indicates if the resource name is available.
        :paramtype name_available: bool
        :keyword reason: The reason why the given name is not available. Known values are: "Invalid"
         and "AlreadyExists".
        :paramtype reason: str or ~azure.mgmt.mongocluster.models.CheckNameAvailabilityReason
        :keyword message: Detailed reason why the given name is available.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.name_available = name_available
        self.reason = reason
        self.message = message


class ConnectionString(_serialization.Model):
    """Connection string for the mongo cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar connection_string: Value of the connection string.
    :vartype connection_string: str
    :ivar description: Description of the connection string.
    :vartype description: str
    """

    _validation = {
        "connection_string": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "connection_string": {"key": "connectionString", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.connection_string = None
        self.description = None


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.mongocluster.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.mongocluster.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.mongocluster.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.mongocluster.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class FirewallRule(ProxyResource):
    """Represents a mongo cluster firewall rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.mongocluster.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.mongocluster.models.FirewallRuleProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "FirewallRuleProperties"},
    }

    def __init__(self, *, properties: Optional["_models.FirewallRuleProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.mongocluster.models.FirewallRuleProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class FirewallRuleListResult(_serialization.Model):
    """The response of a FirewallRule list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The FirewallRule items on this page. Required.
    :vartype value: list[~azure.mgmt.mongocluster.models.FirewallRule]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FirewallRule]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.FirewallRule"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The FirewallRule items on this page. Required.
        :paramtype value: list[~azure.mgmt.mongocluster.models.FirewallRule]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FirewallRuleProperties(_serialization.Model):
    """The properties of a mongo cluster firewall rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar provisioning_state: The provisioning state of the firewall rule. Known values are:
     "Succeeded", "Failed", "Canceled", "InProgress", "Updating", and "Dropping".
    :vartype provisioning_state: str or ~azure.mgmt.mongocluster.models.ProvisioningState
    :ivar start_ip_address: The start IP address of the mongo cluster firewall rule. Must be IPv4
     format. Required.
    :vartype start_ip_address: str
    :ivar end_ip_address: The end IP address of the mongo cluster firewall rule. Must be IPv4
     format. Required.
    :vartype end_ip_address: str
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "start_ip_address": {
            "required": True,
            "pattern": r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
        },
        "end_ip_address": {
            "required": True,
            "pattern": r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
        },
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "start_ip_address": {"key": "startIpAddress", "type": "str"},
        "end_ip_address": {"key": "endIpAddress", "type": "str"},
    }

    def __init__(self, *, start_ip_address: str, end_ip_address: str, **kwargs: Any) -> None:
        """
        :keyword start_ip_address: The start IP address of the mongo cluster firewall rule. Must be
         IPv4 format. Required.
        :paramtype start_ip_address: str
        :keyword end_ip_address: The end IP address of the mongo cluster firewall rule. Must be IPv4
         format. Required.
        :paramtype end_ip_address: str
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address


class ListConnectionStringsResult(_serialization.Model):
    """The connection strings for the given mongo cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar connection_strings: An array that contains the connection strings for a mongo cluster.
    :vartype connection_strings: list[~azure.mgmt.mongocluster.models.ConnectionString]
    """

    _validation = {
        "connection_strings": {"readonly": True},
    }

    _attribute_map = {
        "connection_strings": {"key": "connectionStrings", "type": "[ConnectionString]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.connection_strings = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.mongocluster.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class MongoCluster(TrackedResource):
    """Represents a mongo cluster resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.mongocluster.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.mongocluster.models.MongoClusterProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "MongoClusterProperties"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.MongoClusterProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.mongocluster.models.MongoClusterProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties


class MongoClusterListResult(_serialization.Model):
    """The response of a MongoCluster list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The MongoCluster items on this page. Required.
    :vartype value: list[~azure.mgmt.mongocluster.models.MongoCluster]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[MongoCluster]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.MongoCluster"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The MongoCluster items on this page. Required.
        :paramtype value: list[~azure.mgmt.mongocluster.models.MongoCluster]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class MongoClusterProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The properties of a mongo cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar create_mode: The mode to create a mongo cluster. Known values are: "Default" and
     "PointInTimeRestore".
    :vartype create_mode: str or ~azure.mgmt.mongocluster.models.CreateMode
    :ivar restore_parameters: The parameters to create a point-in-time restore mongo cluster.
    :vartype restore_parameters: ~azure.mgmt.mongocluster.models.MongoClusterRestoreParameters
    :ivar administrator_login: The administrator's login for the mongo cluster.
    :vartype administrator_login: str
    :ivar administrator_login_password: The password of the administrator login.
    :vartype administrator_login_password: str
    :ivar server_version: The Mongo DB server version. Defaults to the latest available version if
     not specified.
    :vartype server_version: str
    :ivar connection_string: The default mongo connection string for the cluster.
    :vartype connection_string: str
    :ivar earliest_restore_time: Earliest restore timestamp in UTC ISO8601 format.
    :vartype earliest_restore_time: str
    :ivar provisioning_state: The provisioning state of the mongo cluster. Known values are:
     "Succeeded", "Failed", "Canceled", "InProgress", "Updating", and "Dropping".
    :vartype provisioning_state: str or ~azure.mgmt.mongocluster.models.ProvisioningState
    :ivar cluster_status: The status of the mongo cluster. Known values are: "Ready",
     "Provisioning", "Updating", "Starting", "Stopping", "Stopped", and "Dropping".
    :vartype cluster_status: str or ~azure.mgmt.mongocluster.models.MongoClusterStatus
    :ivar public_network_access: Whether or not public endpoint access is allowed for this mongo
     cluster. Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.mongocluster.models.PublicNetworkAccess
    :ivar node_group_specs: The list of node group specs in the cluster.
    :vartype node_group_specs: list[~azure.mgmt.mongocluster.models.NodeGroupSpec]
    :ivar private_endpoint_connections: List of private endpoint connections.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.mongocluster.models.AzureResourceManagerPrivateEndpointConnection]
    """

    _validation = {
        "connection_string": {"readonly": True},
        "earliest_restore_time": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "cluster_status": {"readonly": True},
        "private_endpoint_connections": {"readonly": True},
    }

    _attribute_map = {
        "create_mode": {"key": "createMode", "type": "str"},
        "restore_parameters": {"key": "restoreParameters", "type": "MongoClusterRestoreParameters"},
        "administrator_login": {"key": "administratorLogin", "type": "str"},
        "administrator_login_password": {"key": "administratorLoginPassword", "type": "str"},
        "server_version": {"key": "serverVersion", "type": "str"},
        "connection_string": {"key": "connectionString", "type": "str"},
        "earliest_restore_time": {"key": "earliestRestoreTime", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "cluster_status": {"key": "clusterStatus", "type": "str"},
        "public_network_access": {"key": "publicNetworkAccess", "type": "str"},
        "node_group_specs": {"key": "nodeGroupSpecs", "type": "[NodeGroupSpec]"},
        "private_endpoint_connections": {
            "key": "privateEndpointConnections",
            "type": "[AzureResourceManagerPrivateEndpointConnection]",
        },
    }

    def __init__(
        self,
        *,
        create_mode: Optional[Union[str, "_models.CreateMode"]] = None,
        restore_parameters: Optional["_models.MongoClusterRestoreParameters"] = None,
        administrator_login: Optional[str] = None,
        administrator_login_password: Optional[str] = None,
        server_version: Optional[str] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = None,
        node_group_specs: Optional[List["_models.NodeGroupSpec"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword create_mode: The mode to create a mongo cluster. Known values are: "Default" and
         "PointInTimeRestore".
        :paramtype create_mode: str or ~azure.mgmt.mongocluster.models.CreateMode
        :keyword restore_parameters: The parameters to create a point-in-time restore mongo cluster.
        :paramtype restore_parameters: ~azure.mgmt.mongocluster.models.MongoClusterRestoreParameters
        :keyword administrator_login: The administrator's login for the mongo cluster.
        :paramtype administrator_login: str
        :keyword administrator_login_password: The password of the administrator login.
        :paramtype administrator_login_password: str
        :keyword server_version: The Mongo DB server version. Defaults to the latest available version
         if not specified.
        :paramtype server_version: str
        :keyword public_network_access: Whether or not public endpoint access is allowed for this mongo
         cluster. Known values are: "Enabled" and "Disabled".
        :paramtype public_network_access: str or ~azure.mgmt.mongocluster.models.PublicNetworkAccess
        :keyword node_group_specs: The list of node group specs in the cluster.
        :paramtype node_group_specs: list[~azure.mgmt.mongocluster.models.NodeGroupSpec]
        """
        super().__init__(**kwargs)
        self.create_mode = create_mode
        self.restore_parameters = restore_parameters
        self.administrator_login = administrator_login
        self.administrator_login_password = administrator_login_password
        self.server_version = server_version
        self.connection_string = None
        self.earliest_restore_time = None
        self.provisioning_state = None
        self.cluster_status = None
        self.public_network_access = public_network_access
        self.node_group_specs = node_group_specs
        self.private_endpoint_connections = None


class MongoClusterRestoreParameters(_serialization.Model):
    """Parameters used for restore operations.

    :ivar point_in_time_utc: UTC point in time to restore a mongo cluster.
    :vartype point_in_time_utc: ~datetime.datetime
    :ivar source_resource_id: Resource ID to locate the source cluster to restore.
    :vartype source_resource_id: str
    """

    _attribute_map = {
        "point_in_time_utc": {"key": "pointInTimeUTC", "type": "iso-8601"},
        "source_resource_id": {"key": "sourceResourceId", "type": "str"},
    }

    def __init__(
        self,
        *,
        point_in_time_utc: Optional[datetime.datetime] = None,
        source_resource_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword point_in_time_utc: UTC point in time to restore a mongo cluster.
        :paramtype point_in_time_utc: ~datetime.datetime
        :keyword source_resource_id: Resource ID to locate the source cluster to restore.
        :paramtype source_resource_id: str
        """
        super().__init__(**kwargs)
        self.point_in_time_utc = point_in_time_utc
        self.source_resource_id = source_resource_id


class MongoClusterUpdate(_serialization.Model):
    """The type used for update operations of the MongoCluster.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The updatable properties of the MongoCluster.
    :vartype properties: ~azure.mgmt.mongocluster.models.MongoClusterUpdateProperties
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "MongoClusterUpdateProperties"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.MongoClusterUpdateProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: The updatable properties of the MongoCluster.
        :paramtype properties: ~azure.mgmt.mongocluster.models.MongoClusterUpdateProperties
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties


class MongoClusterUpdateProperties(_serialization.Model):
    """The updatable properties of the MongoCluster.

    :ivar administrator_login: The administrator's login for the mongo cluster.
    :vartype administrator_login: str
    :ivar administrator_login_password: The password of the administrator login.
    :vartype administrator_login_password: str
    :ivar server_version: The Mongo DB server version. Defaults to the latest available version if
     not specified.
    :vartype server_version: str
    :ivar public_network_access: Whether or not public endpoint access is allowed for this mongo
     cluster. Known values are: "Enabled" and "Disabled".
    :vartype public_network_access: str or ~azure.mgmt.mongocluster.models.PublicNetworkAccess
    :ivar node_group_specs: The list of node group specs in the cluster.
    :vartype node_group_specs: list[~azure.mgmt.mongocluster.models.NodeGroupSpec]
    """

    _attribute_map = {
        "administrator_login": {"key": "administratorLogin", "type": "str"},
        "administrator_login_password": {"key": "administratorLoginPassword", "type": "str"},
        "server_version": {"key": "serverVersion", "type": "str"},
        "public_network_access": {"key": "publicNetworkAccess", "type": "str"},
        "node_group_specs": {"key": "nodeGroupSpecs", "type": "[NodeGroupSpec]"},
    }

    def __init__(
        self,
        *,
        administrator_login: Optional[str] = None,
        administrator_login_password: Optional[str] = None,
        server_version: Optional[str] = None,
        public_network_access: Optional[Union[str, "_models.PublicNetworkAccess"]] = None,
        node_group_specs: Optional[List["_models.NodeGroupSpec"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword administrator_login: The administrator's login for the mongo cluster.
        :paramtype administrator_login: str
        :keyword administrator_login_password: The password of the administrator login.
        :paramtype administrator_login_password: str
        :keyword server_version: The Mongo DB server version. Defaults to the latest available version
         if not specified.
        :paramtype server_version: str
        :keyword public_network_access: Whether or not public endpoint access is allowed for this mongo
         cluster. Known values are: "Enabled" and "Disabled".
        :paramtype public_network_access: str or ~azure.mgmt.mongocluster.models.PublicNetworkAccess
        :keyword node_group_specs: The list of node group specs in the cluster.
        :paramtype node_group_specs: list[~azure.mgmt.mongocluster.models.NodeGroupSpec]
        """
        super().__init__(**kwargs)
        self.administrator_login = administrator_login
        self.administrator_login_password = administrator_login_password
        self.server_version = server_version
        self.public_network_access = public_network_access
        self.node_group_specs = node_group_specs


class NodeGroupProperties(_serialization.Model):
    """The properties of the node group on a cluster.

    :ivar sku: The resource sku for the node group. This defines the size of CPU and memory that is
     provisioned for each node. Example values: 'M30', 'M40'.
    :vartype sku: str
    :ivar disk_size_gb: The disk storage size for the node group in GB. Example values: 128, 256,
     512, 1024.
    :vartype disk_size_gb: int
    :ivar enable_ha: Whether high availability is enabled on the node group.
    :vartype enable_ha: bool
    """

    _attribute_map = {
        "sku": {"key": "sku", "type": "str"},
        "disk_size_gb": {"key": "diskSizeGB", "type": "int"},
        "enable_ha": {"key": "enableHa", "type": "bool"},
    }

    def __init__(
        self,
        *,
        sku: Optional[str] = None,
        disk_size_gb: Optional[int] = None,
        enable_ha: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sku: The resource sku for the node group. This defines the size of CPU and memory that
         is provisioned for each node. Example values: 'M30', 'M40'.
        :paramtype sku: str
        :keyword disk_size_gb: The disk storage size for the node group in GB. Example values: 128,
         256, 512, 1024.
        :paramtype disk_size_gb: int
        :keyword enable_ha: Whether high availability is enabled on the node group.
        :paramtype enable_ha: bool
        """
        super().__init__(**kwargs)
        self.sku = sku
        self.disk_size_gb = disk_size_gb
        self.enable_ha = enable_ha


class NodeGroupSpec(_serialization.Model):
    """Specification for a node group.

    :ivar sku: The resource sku for the node group. This defines the size of CPU and memory that is
     provisioned for each node. Example values: 'M30', 'M40'.
    :vartype sku: str
    :ivar disk_size_gb: The disk storage size for the node group in GB. Example values: 128, 256,
     512, 1024.
    :vartype disk_size_gb: int
    :ivar enable_ha: Whether high availability is enabled on the node group.
    :vartype enable_ha: bool
    :ivar kind: The node type deployed in the node group. "Shard"
    :vartype kind: str or ~azure.mgmt.mongocluster.models.NodeKind
    :ivar node_count: The number of nodes in the node group.
    :vartype node_count: int
    """

    _attribute_map = {
        "sku": {"key": "sku", "type": "str"},
        "disk_size_gb": {"key": "diskSizeGB", "type": "int"},
        "enable_ha": {"key": "enableHa", "type": "bool"},
        "kind": {"key": "kind", "type": "str"},
        "node_count": {"key": "nodeCount", "type": "int"},
    }

    def __init__(
        self,
        *,
        sku: Optional[str] = None,
        disk_size_gb: Optional[int] = None,
        enable_ha: Optional[bool] = None,
        kind: Optional[Union[str, "_models.NodeKind"]] = None,
        node_count: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword sku: The resource sku for the node group. This defines the size of CPU and memory that
         is provisioned for each node. Example values: 'M30', 'M40'.
        :paramtype sku: str
        :keyword disk_size_gb: The disk storage size for the node group in GB. Example values: 128,
         256, 512, 1024.
        :paramtype disk_size_gb: int
        :keyword enable_ha: Whether high availability is enabled on the node group.
        :paramtype enable_ha: bool
        :keyword kind: The node type deployed in the node group. "Shard"
        :paramtype kind: str or ~azure.mgmt.mongocluster.models.NodeKind
        :keyword node_count: The number of nodes in the node group.
        :paramtype node_count: int
        """
        super().__init__(**kwargs)
        self.sku = sku
        self.disk_size_gb = disk_size_gb
        self.enable_ha = enable_ha
        self.kind = kind
        self.node_count = node_count


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.mongocluster.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.mongocluster.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.mongocluster.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.mongocluster.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.mongocluster.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class PrivateEndpoint(_serialization.Model):
    """The private endpoint resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ARM identifier for private endpoint.
    :vartype id: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None


class PrivateEndpointConnectionProperties(_serialization.Model):
    """Properties of the private endpoint connection.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar group_ids: The group ids for the private endpoint resource.
    :vartype group_ids: list[str]
    :ivar private_endpoint: The private endpoint resource.
    :vartype private_endpoint: ~azure.mgmt.mongocluster.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider. Required.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.mongocluster.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Known values are: "Succeeded", "Creating", "Deleting", and "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.mongocluster.models.PrivateEndpointConnectionProvisioningState
    """

    _validation = {
        "group_ids": {"readonly": True},
        "private_link_service_connection_state": {"required": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "group_ids": {"key": "groupIds", "type": "[str]"},
        "private_endpoint": {"key": "privateEndpoint", "type": "PrivateEndpoint"},
        "private_link_service_connection_state": {
            "key": "privateLinkServiceConnectionState",
            "type": "PrivateLinkServiceConnectionState",
        },
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        private_link_service_connection_state: "_models.PrivateLinkServiceConnectionState",
        private_endpoint: Optional["_models.PrivateEndpoint"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword private_endpoint: The private endpoint resource.
        :paramtype private_endpoint: ~azure.mgmt.mongocluster.models.PrivateEndpoint
        :keyword private_link_service_connection_state: A collection of information about the state of
         the connection between service consumer and provider. Required.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.mongocluster.models.PrivateLinkServiceConnectionState
        """
        super().__init__(**kwargs)
        self.group_ids = None
        self.private_endpoint = private_endpoint
        self.private_link_service_connection_state = private_link_service_connection_state
        self.provisioning_state = None


class PrivateEndpointConnectionResource(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.mongocluster.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.mongocluster.models.PrivateEndpointConnectionProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "PrivateEndpointConnectionProperties"},
    }

    def __init__(
        self, *, properties: Optional["_models.PrivateEndpointConnectionProperties"] = None, **kwargs: Any
    ) -> None:
        """
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.mongocluster.models.PrivateEndpointConnectionProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class PrivateEndpointConnectionResourceListResult(_serialization.Model):  # pylint: disable=name-too-long
    """The response of a PrivateEndpointConnectionResource list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The PrivateEndpointConnectionResource items on this page. Required.
    :vartype value: list[~azure.mgmt.mongocluster.models.PrivateEndpointConnectionResource]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[PrivateEndpointConnectionResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: List["_models.PrivateEndpointConnectionResource"],
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: The PrivateEndpointConnectionResource items on this page. Required.
        :paramtype value: list[~azure.mgmt.mongocluster.models.PrivateEndpointConnectionResource]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PrivateLinkResource(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.mongocluster.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.mongocluster.models.PrivateLinkResourceProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "PrivateLinkResourceProperties"},
    }

    def __init__(self, *, properties: Optional["_models.PrivateLinkResourceProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: The resource-specific properties for this resource.
        :paramtype properties: ~azure.mgmt.mongocluster.models.PrivateLinkResourceProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class PrivateLinkResourceListResult(_serialization.Model):
    """The response of a PrivateLinkResource list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The PrivateLinkResource items on this page. Required.
    :vartype value: list[~azure.mgmt.mongocluster.models.PrivateLinkResource]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[PrivateLinkResource]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.PrivateLinkResource"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The PrivateLinkResource items on this page. Required.
        :paramtype value: list[~azure.mgmt.mongocluster.models.PrivateLinkResource]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PrivateLinkResourceProperties(_serialization.Model):
    """Properties of a private link resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar group_id: The private link resource group id.
    :vartype group_id: str
    :ivar required_members: The private link resource required member names.
    :vartype required_members: list[str]
    :ivar required_zone_names: The private link resource private link DNS zone name.
    :vartype required_zone_names: list[str]
    """

    _validation = {
        "group_id": {"readonly": True},
        "required_members": {"readonly": True},
    }

    _attribute_map = {
        "group_id": {"key": "groupId", "type": "str"},
        "required_members": {"key": "requiredMembers", "type": "[str]"},
        "required_zone_names": {"key": "requiredZoneNames", "type": "[str]"},
    }

    def __init__(self, *, required_zone_names: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword required_zone_names: The private link resource private link DNS zone name.
        :paramtype required_zone_names: list[str]
        """
        super().__init__(**kwargs)
        self.group_id = None
        self.required_members = None
        self.required_zone_names = required_zone_names


class PrivateLinkServiceConnectionState(_serialization.Model):
    """A collection of information about the state of the connection between service consumer and
    provider.

    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service. Known values are: "Pending", "Approved", and "Rejected".
    :vartype status: str or ~azure.mgmt.mongocluster.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval/rejection of the connection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype actions_required: str
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "actions_required": {"key": "actionsRequired", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = None,
        description: Optional[str] = None,
        actions_required: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Indicates whether the connection has been Approved/Rejected/Removed by the
         owner of the service. Known values are: "Pending", "Approved", and "Rejected".
        :paramtype status: str or
         ~azure.mgmt.mongocluster.models.PrivateEndpointServiceConnectionStatus
        :keyword description: The reason for approval/rejection of the connection.
        :paramtype description: str
        :keyword actions_required: A message indicating if changes on the service provider require any
         updates on the consumer.
        :paramtype actions_required: str
        """
        super().__init__(**kwargs)
        self.status = status
        self.description = description
        self.actions_required = actions_required


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.mongocluster.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.mongocluster.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.mongocluster.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.mongocluster.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at
