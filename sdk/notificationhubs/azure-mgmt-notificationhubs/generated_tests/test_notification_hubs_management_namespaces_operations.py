# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.notificationhubs import NotificationHubsManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestNotificationHubsManagementNamespacesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(NotificationHubsManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_check_availability(self, resource_group):
        response = self.client.namespaces.check_availability(
            parameters={
                "name": "str",
                "id": "str",
                "isAvailiable": bool,
                "location": "str",
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get(self, resource_group):
        response = self.client.namespaces.get(
            resource_group_name=resource_group.name,
            namespace_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_begin_create_or_update(self, resource_group):
        response = self.client.namespaces.begin_create_or_update(
            resource_group_name=resource_group.name,
            namespace_name="str",
            parameters={
                "location": "str",
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "createdAt": "2020-02-20 00:00:00",
                "critical": bool,
                "dataCenter": "str",
                "enabled": bool,
                "id": "str",
                "metricId": "str",
                "name": "str",
                "namespaceType": "str",
                "networkAcls": {
                    "ipRules": [{"ipMask": "str", "rights": ["str"]}],
                    "publicNetworkRule": {"rights": ["str"]},
                },
                "pnsCredentials": {
                    "admCredential": {"authTokenUrl": "str", "clientId": "str", "clientSecret": "str"},
                    "apnsCredential": {
                        "endpoint": "str",
                        "apnsCertificate": "str",
                        "appId": "str",
                        "appName": "str",
                        "certificateKey": "str",
                        "keyId": "str",
                        "thumbprint": "str",
                        "token": "str",
                    },
                    "baiduCredential": {"baiduApiKey": "str", "baiduEndPoint": "str", "baiduSecretKey": "str"},
                    "browserCredential": {"subject": "str", "vapidPrivateKey": "str", "vapidPublicKey": "str"},
                    "fcmV1Credential": {"clientEmail": "str", "privateKey": "str", "projectId": "str"},
                    "gcmCredential": {"googleApiKey": "str", "gcmEndpoint": "str"},
                    "mpnsCredential": {"certificateKey": "str", "mpnsCertificate": "str", "thumbprint": "str"},
                    "wnsCredential": {
                        "certificateKey": "str",
                        "packageSid": "str",
                        "secretKey": "str",
                        "windowsLiveEndpoint": "str",
                        "wnsCertificate": "str",
                    },
                    "xiaomiCredential": {"appSecret": "str", "endpoint": "str"},
                },
                "privateEndpointConnections": [
                    {
                        "id": "str",
                        "name": "str",
                        "properties": {
                            "groupIds": ["str"],
                            "privateEndpoint": {"id": "str"},
                            "privateLinkServiceConnectionState": {
                                "actionsRequired": "str",
                                "description": "str",
                                "status": "str",
                            },
                            "provisioningState": "str",
                        },
                        "systemData": {
                            "createdAt": "2020-02-20 00:00:00",
                            "createdBy": "str",
                            "createdByType": "str",
                            "lastModifiedAt": "2020-02-20 00:00:00",
                            "lastModifiedBy": "str",
                            "lastModifiedByType": "str",
                        },
                        "type": "str",
                    }
                ],
                "provisioningState": "str",
                "publicNetworkAccess": "Enabled",
                "region": "str",
                "replicationRegion": "str",
                "scaleUnit": "str",
                "serviceBusEndpoint": "str",
                "status": "str",
                "subscriptionId": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
                "updatedAt": "2020-02-20 00:00:00",
                "zoneRedundancy": "Disabled",
            },
            api_version="2023-10-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_update(self, resource_group):
        response = self.client.namespaces.update(
            resource_group_name=resource_group.name,
            namespace_name="str",
            parameters={
                "properties": {
                    "createdAt": "2020-02-20 00:00:00",
                    "critical": bool,
                    "dataCenter": "str",
                    "enabled": bool,
                    "metricId": "str",
                    "name": "str",
                    "namespaceType": "str",
                    "networkAcls": {
                        "ipRules": [{"ipMask": "str", "rights": ["str"]}],
                        "publicNetworkRule": {"rights": ["str"]},
                    },
                    "pnsCredentials": {
                        "admCredential": {"authTokenUrl": "str", "clientId": "str", "clientSecret": "str"},
                        "apnsCredential": {
                            "endpoint": "str",
                            "apnsCertificate": "str",
                            "appId": "str",
                            "appName": "str",
                            "certificateKey": "str",
                            "keyId": "str",
                            "thumbprint": "str",
                            "token": "str",
                        },
                        "baiduCredential": {"baiduApiKey": "str", "baiduEndPoint": "str", "baiduSecretKey": "str"},
                        "browserCredential": {"subject": "str", "vapidPrivateKey": "str", "vapidPublicKey": "str"},
                        "fcmV1Credential": {"clientEmail": "str", "privateKey": "str", "projectId": "str"},
                        "gcmCredential": {"googleApiKey": "str", "gcmEndpoint": "str"},
                        "mpnsCredential": {"certificateKey": "str", "mpnsCertificate": "str", "thumbprint": "str"},
                        "wnsCredential": {
                            "certificateKey": "str",
                            "packageSid": "str",
                            "secretKey": "str",
                            "windowsLiveEndpoint": "str",
                            "wnsCertificate": "str",
                        },
                        "xiaomiCredential": {"appSecret": "str", "endpoint": "str"},
                    },
                    "privateEndpointConnections": [
                        {
                            "id": "str",
                            "name": "str",
                            "properties": {
                                "groupIds": ["str"],
                                "privateEndpoint": {"id": "str"},
                                "privateLinkServiceConnectionState": {
                                    "actionsRequired": "str",
                                    "description": "str",
                                    "status": "str",
                                },
                                "provisioningState": "str",
                            },
                            "systemData": {
                                "createdAt": "2020-02-20 00:00:00",
                                "createdBy": "str",
                                "createdByType": "str",
                                "lastModifiedAt": "2020-02-20 00:00:00",
                                "lastModifiedBy": "str",
                                "lastModifiedByType": "str",
                            },
                            "type": "str",
                        }
                    ],
                    "provisioningState": "str",
                    "publicNetworkAccess": "Enabled",
                    "region": "str",
                    "replicationRegion": "str",
                    "scaleUnit": "str",
                    "serviceBusEndpoint": "str",
                    "status": "str",
                    "subscriptionId": "str",
                    "updatedAt": "2020-02-20 00:00:00",
                    "zoneRedundancy": "Disabled",
                },
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete(self, resource_group):
        response = self.client.namespaces.delete(
            resource_group_name=resource_group.name,
            namespace_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_all(self, resource_group):
        response = self.client.namespaces.list_all(
            api_version="2023-10-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list(self, resource_group):
        response = self.client.namespaces.list(
            resource_group_name=resource_group.name,
            api_version="2023-10-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_create_or_update_authorization_rule(self, resource_group):
        response = self.client.namespaces.create_or_update_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
            parameters={
                "claimType": "str",
                "claimValue": "str",
                "createdTime": "2020-02-20 00:00:00",
                "id": "str",
                "keyName": "str",
                "location": "str",
                "modifiedTime": "2020-02-20 00:00:00",
                "name": "str",
                "primaryKey": "str",
                "revision": 0,
                "rights": ["str"],
                "secondaryKey": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_delete_authorization_rule(self, resource_group):
        response = self.client.namespaces.delete_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_authorization_rule(self, resource_group):
        response = self.client.namespaces.get_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_authorization_rules(self, resource_group):
        response = self.client.namespaces.list_authorization_rules(
            resource_group_name=resource_group.name,
            namespace_name="str",
            api_version="2023-10-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_list_keys(self, resource_group):
        response = self.client.namespaces.list_keys(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_regenerate_keys(self, resource_group):
        response = self.client.namespaces.regenerate_keys(
            resource_group_name=resource_group.name,
            namespace_name="str",
            authorization_rule_name="str",
            parameters={"policyKey": "str"},
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_get_pns_credentials(self, resource_group):
        response = self.client.namespaces.get_pns_credentials(
            resource_group_name=resource_group.name,
            namespace_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...
