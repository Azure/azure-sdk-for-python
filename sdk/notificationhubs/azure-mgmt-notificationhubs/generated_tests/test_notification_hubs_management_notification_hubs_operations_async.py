# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.notificationhubs.aio import NotificationHubsManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestNotificationHubsManagementNotificationHubsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(NotificationHubsManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_check_notification_hub_availability(self, resource_group):
        response = await self.client.notification_hubs.check_notification_hub_availability(
            resource_group_name=resource_group.name,
            namespace_name="str",
            parameters={
                "name": "str",
                "id": "str",
                "isAvailiable": bool,
                "location": "str",
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.notification_hubs.get(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.notification_hubs.create_or_update(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            parameters={
                "location": "str",
                "admCredential": {"authTokenUrl": "str", "clientId": "str", "clientSecret": "str"},
                "apnsCredential": {
                    "endpoint": "str",
                    "apnsCertificate": "str",
                    "appId": "str",
                    "appName": "str",
                    "certificateKey": "str",
                    "keyId": "str",
                    "thumbprint": "str",
                    "token": "str",
                },
                "authorizationRules": [
                    {
                        "rights": ["str"],
                        "claimType": "str",
                        "claimValue": "str",
                        "createdTime": "2020-02-20 00:00:00",
                        "keyName": "str",
                        "modifiedTime": "2020-02-20 00:00:00",
                        "primaryKey": "str",
                        "revision": 0,
                        "secondaryKey": "str",
                    }
                ],
                "baiduCredential": {"baiduApiKey": "str", "baiduEndPoint": "str", "baiduSecretKey": "str"},
                "browserCredential": {"subject": "str", "vapidPrivateKey": "str", "vapidPublicKey": "str"},
                "dailyMaxActiveDevices": 0,
                "fcmV1Credential": {"clientEmail": "str", "privateKey": "str", "projectId": "str"},
                "gcmCredential": {"googleApiKey": "str", "gcmEndpoint": "str"},
                "id": "str",
                "mpnsCredential": {"certificateKey": "str", "mpnsCertificate": "str", "thumbprint": "str"},
                "name": "str",
                "registrationTtl": "str",
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
                "wnsCredential": {
                    "certificateKey": "str",
                    "packageSid": "str",
                    "secretKey": "str",
                    "windowsLiveEndpoint": "str",
                    "wnsCertificate": "str",
                },
                "xiaomiCredential": {"appSecret": "str", "endpoint": "str"},
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.notification_hubs.update(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            parameters={
                "admCredential": {"authTokenUrl": "str", "clientId": "str", "clientSecret": "str"},
                "apnsCredential": {
                    "endpoint": "str",
                    "apnsCertificate": "str",
                    "appId": "str",
                    "appName": "str",
                    "certificateKey": "str",
                    "keyId": "str",
                    "thumbprint": "str",
                    "token": "str",
                },
                "authorizationRules": [
                    {
                        "rights": ["str"],
                        "claimType": "str",
                        "claimValue": "str",
                        "createdTime": "2020-02-20 00:00:00",
                        "keyName": "str",
                        "modifiedTime": "2020-02-20 00:00:00",
                        "primaryKey": "str",
                        "revision": 0,
                        "secondaryKey": "str",
                    }
                ],
                "baiduCredential": {"baiduApiKey": "str", "baiduEndPoint": "str", "baiduSecretKey": "str"},
                "browserCredential": {"subject": "str", "vapidPrivateKey": "str", "vapidPublicKey": "str"},
                "dailyMaxActiveDevices": 0,
                "fcmV1Credential": {"clientEmail": "str", "privateKey": "str", "projectId": "str"},
                "gcmCredential": {"googleApiKey": "str", "gcmEndpoint": "str"},
                "mpnsCredential": {"certificateKey": "str", "mpnsCertificate": "str", "thumbprint": "str"},
                "name": "str",
                "registrationTtl": "str",
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
                "wnsCredential": {
                    "certificateKey": "str",
                    "packageSid": "str",
                    "secretKey": "str",
                    "windowsLiveEndpoint": "str",
                    "wnsCertificate": "str",
                },
                "xiaomiCredential": {"appSecret": "str", "endpoint": "str"},
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.notification_hubs.delete(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.notification_hubs.list(
            resource_group_name=resource_group.name,
            namespace_name="str",
            api_version="2023-10-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_debug_send(self, resource_group):
        response = await self.client.notification_hubs.debug_send(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update_authorization_rule(self, resource_group):
        response = await self.client.notification_hubs.create_or_update_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            authorization_rule_name="str",
            parameters={
                "claimType": "str",
                "claimValue": "str",
                "createdTime": "2020-02-20 00:00:00",
                "id": "str",
                "keyName": "str",
                "location": "str",
                "modifiedTime": "2020-02-20 00:00:00",
                "name": "str",
                "primaryKey": "str",
                "revision": 0,
                "rights": ["str"],
                "secondaryKey": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete_authorization_rule(self, resource_group):
        response = await self.client.notification_hubs.delete_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            authorization_rule_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_authorization_rule(self, resource_group):
        response = await self.client.notification_hubs.get_authorization_rule(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            authorization_rule_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_authorization_rules(self, resource_group):
        response = self.client.notification_hubs.list_authorization_rules(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            api_version="2023-10-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_keys(self, resource_group):
        response = await self.client.notification_hubs.list_keys(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            authorization_rule_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_regenerate_keys(self, resource_group):
        response = await self.client.notification_hubs.regenerate_keys(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            authorization_rule_name="str",
            parameters={"policyKey": "str"},
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get_pns_credentials(self, resource_group):
        response = await self.client.notification_hubs.get_pns_credentials(
            resource_group_name=resource_group.name,
            namespace_name="str",
            notification_hub_name="str",
            api_version="2023-10-01-preview",
        )

        # please add some check logic here by yourself
        # ...
