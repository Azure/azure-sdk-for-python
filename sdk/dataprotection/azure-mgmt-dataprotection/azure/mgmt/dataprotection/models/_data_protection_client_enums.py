# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class AbsoluteMarker(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ALL_BACKUP = "AllBackup"
    FIRST_OF_DAY = "FirstOfDay"
    FIRST_OF_MONTH = "FirstOfMonth"
    FIRST_OF_WEEK = "FirstOfWeek"
    FIRST_OF_YEAR = "FirstOfYear"

class AlertsState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class CreatedByType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class CurrentProtectionState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the current protection state of the resource
    """

    INVALID = "Invalid"
    NOT_PROTECTED = "NotProtected"
    CONFIGURING_PROTECTION = "ConfiguringProtection"
    PROTECTION_CONFIGURED = "ProtectionConfigured"
    BACKUP_SCHEDULES_SUSPENDED = "BackupSchedulesSuspended"
    RETENTION_SCHEDULES_SUSPENDED = "RetentionSchedulesSuspended"
    PROTECTION_STOPPED = "ProtectionStopped"
    PROTECTION_ERROR = "ProtectionError"
    CONFIGURING_PROTECTION_FAILED = "ConfiguringProtectionFailed"
    SOFT_DELETING = "SoftDeleting"
    SOFT_DELETED = "SoftDeleted"
    UPDATING_PROTECTION = "UpdatingProtection"

class DataStoreTypes(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """type of datastore; Operational/Vault/Archive
    """

    OPERATIONAL_STORE = "OperationalStore"
    VAULT_STORE = "VaultStore"
    ARCHIVE_STORE = "ArchiveStore"

class DayOfWeek(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    FRIDAY = "Friday"
    MONDAY = "Monday"
    SATURDAY = "Saturday"
    SUNDAY = "Sunday"
    THURSDAY = "Thursday"
    TUESDAY = "Tuesday"
    WEDNESDAY = "Wednesday"

class FeatureSupportStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """feature support status
    """

    INVALID = "Invalid"
    NOT_SUPPORTED = "NotSupported"
    ALPHA_PREVIEW = "AlphaPreview"
    PRIVATE_PREVIEW = "PrivatePreview"
    PUBLIC_PREVIEW = "PublicPreview"
    GENERALLY_AVAILABLE = "GenerallyAvailable"

class FeatureType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """backup support feature type.
    """

    INVALID = "Invalid"
    DATA_SOURCE_TYPE = "DataSourceType"

class Month(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    APRIL = "April"
    AUGUST = "August"
    DECEMBER = "December"
    FEBRUARY = "February"
    JANUARY = "January"
    JULY = "July"
    JUNE = "June"
    MARCH = "March"
    MAY = "May"
    NOVEMBER = "November"
    OCTOBER = "October"
    SEPTEMBER = "September"

class ProvisioningState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Provisioning state of the BackupVault resource
    """

    FAILED = "Failed"
    PROVISIONING = "Provisioning"
    SUCCEEDED = "Succeeded"
    UNKNOWN = "Unknown"
    UPDATING = "Updating"

class RecoveryOption(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Recovery Option
    """

    FAIL_IF_EXISTS = "FailIfExists"

class RehydrationPriority(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Priority to be used for rehydration. Values High or Standard
    """

    INVALID = "Invalid"
    HIGH = "High"
    STANDARD = "Standard"

class RehydrationStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS"
    COMPLETED = "COMPLETED"
    DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS"
    DELETED = "DELETED"
    FAILED = "FAILED"

class ResourceMoveState(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Resource move state for backup vault
    """

    UNKNOWN = "Unknown"
    IN_PROGRESS = "InProgress"
    PREPARE_FAILED = "PrepareFailed"
    COMMIT_FAILED = "CommitFailed"
    FAILED = "Failed"
    PREPARE_TIMEDOUT = "PrepareTimedout"
    COMMIT_TIMEDOUT = "CommitTimedout"
    CRITICAL_FAILURE = "CriticalFailure"
    PARTIAL_SUCCESS = "PartialSuccess"
    MOVE_SUCCEEDED = "MoveSucceeded"

class RestoreSourceDataStoreType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Gets or sets the type of the source data store.
    """

    OPERATIONAL_STORE = "OperationalStore"
    VAULT_STORE = "VaultStore"
    ARCHIVE_STORE = "ArchiveStore"

class RestoreTargetLocationType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Denotes the target location where the data will be restored,
    string value for the enum
    {Microsoft.Internal.AzureBackup.DataProtection.Common.Interface.RestoreTargetLocationType}
    """

    INVALID = "Invalid"
    AZURE_BLOBS = "AzureBlobs"
    AZURE_FILES = "AzureFiles"

class SecretStoreType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Gets or sets the type of secret store
    """

    INVALID = "Invalid"
    AZURE_KEY_VAULT = "AzureKeyVault"

class SourceDataStoreType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Gets or sets the type of the source data store.
    """

    ARCHIVE_STORE = "ArchiveStore"
    SNAPSHOT_STORE = "SnapshotStore"
    VAULT_STORE = "VaultStore"

class Status(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the protection status of the resource
    """

    CONFIGURING_PROTECTION = "ConfiguringProtection"
    CONFIGURING_PROTECTION_FAILED = "ConfiguringProtectionFailed"
    PROTECTION_CONFIGURED = "ProtectionConfigured"
    PROTECTION_STOPPED = "ProtectionStopped"
    SOFT_DELETED = "SoftDeleted"
    SOFT_DELETING = "SoftDeleting"

class StorageSettingStoreTypes(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Gets or sets the type of the datastore.
    """

    ARCHIVE_STORE = "ArchiveStore"
    SNAPSHOT_STORE = "SnapshotStore"
    VAULT_STORE = "VaultStore"

class StorageSettingTypes(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Gets or sets the type.
    """

    GEO_REDUNDANT = "GeoRedundant"
    LOCALLY_REDUNDANT = "LocallyRedundant"

class SyncType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Field indicating sync type e.g. to sync only in case of failure or in all cases
    """

    DEFAULT = "Default"
    FORCE_RESYNC = "ForceResync"

class ValidationType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the type of validation. In case of DeepValidation, all validations from
    /validateForBackup API will run again.
    """

    SHALLOW_VALIDATION = "ShallowValidation"
    DEEP_VALIDATION = "DeepValidation"

class WeekNumber(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):

    FIRST = "First"
    FOURTH = "Fourth"
    LAST = "Last"
    SECOND = "Second"
    THIRD = "Third"
