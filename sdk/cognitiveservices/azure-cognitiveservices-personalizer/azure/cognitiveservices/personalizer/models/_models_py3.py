# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class ErrorResponse(Model):
    """Used to return an error to the client.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The error object.
    :type error:
     ~azure.cognitiveservices.personalizer.models.PersonalizerError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'PersonalizerError'},
    }

    def __init__(self, *, error, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class InternalError(Model):
    """An object containing more specific information than the parent object about
    the error.

    :param code: Detailed error code.
    :type code: str
    :param innererror: The error object.
    :type innererror:
     ~azure.cognitiveservices.personalizer.models.InternalError
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InternalError'},
    }

    def __init__(self, *, code: str=None, innererror=None, **kwargs) -> None:
        super(InternalError, self).__init__(**kwargs)
        self.code = code
        self.innererror = innererror


class PersonalizerError(Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. High level error code. Possible values include:
     'BadRequest', 'ResourceNotFound', 'InternalServerError'
    :type code: str or ~azure.cognitiveservices.personalizer.models.ErrorCode
    :param message: Required. A message explaining the error reported by the
     service.
    :type message: str
    :param target: Error source element.
    :type target: str
    :param details: An array of details about specific errors that led to this
     reported error.
    :type details:
     list[~azure.cognitiveservices.personalizer.models.PersonalizerError]
    :param inner_error: Finer error details.
    :type inner_error:
     ~azure.cognitiveservices.personalizer.models.InternalError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[PersonalizerError]'},
        'inner_error': {'key': 'innerError', 'type': 'InternalError'},
    }

    def __init__(self, *, code, message: str, target: str=None, details=None, inner_error=None, **kwargs) -> None:
        super(PersonalizerError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.inner_error = inner_error


class RankableAction(Model):
    """An action with it's associated features used for ranking.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Id of the action.
    :type id: str
    :param features: Required. List of dictionaries containing features.
    :type features: list[object]
    """

    _validation = {
        'id': {'required': True, 'max_length': 256},
        'features': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'features': {'key': 'features', 'type': '[object]'},
    }

    def __init__(self, *, id: str, features, **kwargs) -> None:
        super(RankableAction, self).__init__(**kwargs)
        self.id = id
        self.features = features


class RankedAction(Model):
    """A ranked action with its resulting probability.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Id of the action
    :vartype id: str
    :ivar probability: Probability of the action
    :vartype probability: float
    """

    _validation = {
        'id': {'readonly': True, 'max_length': 256},
        'probability': {'readonly': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'probability': {'key': 'probability', 'type': 'float'},
    }

    def __init__(self, **kwargs) -> None:
        super(RankedAction, self).__init__(**kwargs)
        self.id = None
        self.probability = None


class RankRequest(Model):
    """Request a set of actions to be ranked by the Personalizer service.

    All required parameters must be populated in order to send to Azure.

    :param context_features: Features of the context used for Personalizer as
     a
     dictionary of dictionaries. This depends on the application, and
     typically includes features about the current user, their
     device, profile information, data about time and date, etc.
    :type context_features: list[object]
    :param actions: Required. The set of actions the Personalizer service can
     pick from.
     The set should not contain more than 50 actions.
     The order of the actions does not affect the rank result but the order
     should match the sequence your application would have used to display
     them.
    :type actions:
     list[~azure.cognitiveservices.personalizer.models.RankableAction]
    :param excluded_actions: The set of action ids to exclude from ranking.
    :type excluded_actions: list[str]
    :param event_id: Optionally pass an eventId that uniquely identifies this
     Rank event.
     If null, the service generates a unique eventId. The eventId will be used
     for
     associating this request with its reward, as well as seeding the
     pseudo-random
     generator when making a Personalizer call.
    :type event_id: str
    :param defer_activation: Send false if the user will see the rank results,
     therefore
     Personalizer will expect a Reward call, otherwise it will assign the
     default
     Reward to the event. Send true if it is possible the user will not see the
     rank results, because the page is rendering later, or the Rank results may
     be
     overridden by code further downstream. Default value: False .
    :type defer_activation: bool
    """

    _validation = {
        'actions': {'required': True},
        'event_id': {'max_length': 256},
    }

    _attribute_map = {
        'context_features': {'key': 'contextFeatures', 'type': '[object]'},
        'actions': {'key': 'actions', 'type': '[RankableAction]'},
        'excluded_actions': {'key': 'excludedActions', 'type': '[str]'},
        'event_id': {'key': 'eventId', 'type': 'str'},
        'defer_activation': {'key': 'deferActivation', 'type': 'bool'},
    }

    def __init__(self, *, actions, context_features=None, excluded_actions=None, event_id: str=None, defer_activation: bool=False, **kwargs) -> None:
        super(RankRequest, self).__init__(**kwargs)
        self.context_features = context_features
        self.actions = actions
        self.excluded_actions = excluded_actions
        self.event_id = event_id
        self.defer_activation = defer_activation


class RankResponse(Model):
    """A resulting ordered list of actions that result from a rank request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar ranking: The calculated ranking for the current request.
    :vartype ranking:
     list[~azure.cognitiveservices.personalizer.models.RankedAction]
    :ivar event_id: The eventId for the round trip from request to response.
    :vartype event_id: str
    :ivar reward_action_id: The action chosen by the Personalizer service.
     This is the action for which to report the reward. This might not be the
     first found in 'ranking' if an action in the request in first position was
     part of the excluded ids.
    :vartype reward_action_id: str
    """

    _validation = {
        'ranking': {'readonly': True},
        'event_id': {'readonly': True, 'max_length': 256},
        'reward_action_id': {'readonly': True, 'max_length': 256},
    }

    _attribute_map = {
        'ranking': {'key': 'ranking', 'type': '[RankedAction]'},
        'event_id': {'key': 'eventId', 'type': 'str'},
        'reward_action_id': {'key': 'rewardActionId', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(RankResponse, self).__init__(**kwargs)
        self.ranking = None
        self.event_id = None
        self.reward_action_id = None


class RewardRequest(Model):
    """Reward given to a rank response.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Reward to be assigned to an action. Value should
     be between -1 and 1 inclusive.
    :type value: float
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(self, *, value: float, **kwargs) -> None:
        super(RewardRequest, self).__init__(**kwargs)
        self.value = value
