# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class ContainerStatus(Model):
    """ContainerStatus.

    :param service:
    :type service: str
    :param api_status:
    :type api_status: str
    :param api_status_message:
    :type api_status_message: str
    """

    _attribute_map = {
        'service': {'key': 'service', 'type': 'str'},
        'api_status': {'key': 'apiStatus', 'type': 'str'},
        'api_status_message': {'key': 'apiStatusMessage', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerStatus, self).__init__(**kwargs)
        self.service = kwargs.get('service', None)
        self.api_status = kwargs.get('api_status', None)
        self.api_status_message = kwargs.get('api_status_message', None)


class DateRange(Model):
    """DateRange.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar from_property:
    :vartype from_property: datetime
    :ivar to:
    :vartype to: datetime
    """

    _validation = {
        'from_property': {'readonly': True},
        'to': {'readonly': True},
    }

    _attribute_map = {
        'from_property': {'key': 'from', 'type': 'iso-8601'},
        'to': {'key': 'to', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(DateRange, self).__init__(**kwargs)
        self.from_property = None
        self.to = None


class ErrorResponse(Model):
    """Used to return an error to the client.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The error object.
    :type error:
     ~azure.cognitiveservices.personalizer.models.PersonalizerError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'PersonalizerError'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class Evaluation(Model):
    """Evaluation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar start_time:
    :vartype start_time: datetime
    :ivar end_time:
    :vartype end_time: datetime
    :ivar job_id:
    :vartype job_id: str
    :ivar status: Possible values include: 'completed', 'pending', 'failed',
     'notSubmitted'
    :vartype status: str or
     ~azure.cognitiveservices.personalizer.models.EvaluationJobStatus
    :param policy_results:
    :type policy_results:
     list[~azure.cognitiveservices.personalizer.models.PolicyResult]
    :param feature_importance:
    :type feature_importance: list[list[str]]
    """

    _validation = {
        'id': {'readonly': True, 'max_length': 256},
        'name': {'readonly': True, 'max_length': 256},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'job_id': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'policy_results': {'key': 'policyResults', 'type': '[PolicyResult]'},
        'feature_importance': {'key': 'featureImportance', 'type': '[[str]]'},
    }

    def __init__(self, **kwargs):
        super(Evaluation, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.start_time = None
        self.end_time = None
        self.job_id = None
        self.status = None
        self.policy_results = kwargs.get('policy_results', None)
        self.feature_importance = kwargs.get('feature_importance', None)


class EvaluationContract(Model):
    """A counterfactual evaluation.

    All required parameters must be populated in order to send to Azure.

    :param enable_offline_experimentation: True if the evaluation should
     explore for a more optimal Learning settings.
    :type enable_offline_experimentation: bool
    :param name: Required. The name of the evaluation.
    :type name: str
    :param start_time: Required. The start time of the evaluation.
    :type start_time: datetime
    :param end_time: Required. The end time of the evaluation.
    :type end_time: datetime
    :param policies: Required. Additional Learning settings to evaluate.
    :type policies:
     list[~azure.cognitiveservices.personalizer.models.PolicyContract]
    """

    _validation = {
        'name': {'required': True, 'max_length': 256},
        'start_time': {'required': True},
        'end_time': {'required': True},
        'policies': {'required': True},
    }

    _attribute_map = {
        'enable_offline_experimentation': {'key': 'enableOfflineExperimentation', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'policies': {'key': 'policies', 'type': '[PolicyContract]'},
    }

    def __init__(self, **kwargs):
        super(EvaluationContract, self).__init__(**kwargs)
        self.enable_offline_experimentation = kwargs.get('enable_offline_experimentation', None)
        self.name = kwargs.get('name', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.policies = kwargs.get('policies', None)


class InternalError(Model):
    """An object containing more specific information than the parent object about
    the error.

    :param code: Detailed error code.
    :type code: str
    :param innererror: The error object.
    :type innererror:
     ~azure.cognitiveservices.personalizer.models.InternalError
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InternalError'},
    }

    def __init__(self, **kwargs):
        super(InternalError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.innererror = kwargs.get('innererror', None)


class LogsProperties(Model):
    """LogsProperties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar date_range:
    :vartype date_range:
     ~azure.cognitiveservices.personalizer.models.LogsPropertiesDateRange
    """

    _validation = {
        'date_range': {'readonly': True},
    }

    _attribute_map = {
        'date_range': {'key': 'dateRange', 'type': 'LogsPropertiesDateRange'},
    }

    def __init__(self, **kwargs):
        super(LogsProperties, self).__init__(**kwargs)
        self.date_range = None


class LogsPropertiesDateRange(DateRange):
    """LogsPropertiesDateRange.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar from_property:
    :vartype from_property: datetime
    :ivar to:
    :vartype to: datetime
    """

    _validation = {
        'from_property': {'readonly': True},
        'to': {'readonly': True},
    }

    _attribute_map = {
        'from_property': {'key': 'from', 'type': 'iso-8601'},
        'to': {'key': 'to', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(LogsPropertiesDateRange, self).__init__(**kwargs)


class ModelProperties(Model):
    """ModelProperties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar creation_time:
    :vartype creation_time: datetime
    :ivar last_modified_time:
    :vartype last_modified_time: datetime
    """

    _validation = {
        'creation_time': {'readonly': True},
        'last_modified_time': {'readonly': True},
    }

    _attribute_map = {
        'creation_time': {'key': 'creationTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(ModelProperties, self).__init__(**kwargs)
        self.creation_time = None
        self.last_modified_time = None


class PersonalizerError(Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. High level error code. Possible values include:
     'BadRequest', 'ResourceNotFound', 'InternalServerError',
     'InvalidServiceConfiguration', 'InvalidPolicyConfiguration',
     'InvalidPolicyContract', 'InvalidEvaluationContract',
     'InvalidRewardRequest', 'InvalidEventIdToActivate', 'InvalidRankRequest',
     'InvalidExportLogsRequest', 'InvalidContainer', 'FrontEndNotFound',
     'EvaluationNotFound', 'LogsPropertiesNotFound', 'RankNullResponse',
     'UpdateConfigurationFailed', 'ModelResetFailed'
    :type code: str or
     ~azure.cognitiveservices.personalizer.models.PersonalizerErrorCode
    :param message: Required. A message explaining the error reported by the
     service.
    :type message: str
    :param target: Error source element.
    :type target: str
    :param details: An array of details about specific errors that led to this
     reported error.
    :type details:
     list[~azure.cognitiveservices.personalizer.models.PersonalizerError]
    :param inner_error: Finer error details.
    :type inner_error:
     ~azure.cognitiveservices.personalizer.models.InternalError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[PersonalizerError]'},
        'inner_error': {'key': 'innerError', 'type': 'InternalError'},
    }

    def __init__(self, **kwargs):
        super(PersonalizerError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.inner_error = kwargs.get('inner_error', None)


class PolicyContract(Model):
    """Learning settings specifying how to train the model.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of the Learning settings.
    :type name: str
    :param arguments: Required. Arguments of the Learning settings.
    :type arguments: str
    """

    _validation = {
        'name': {'required': True, 'max_length': 256},
        'arguments': {'required': True, 'max_length': 1024},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'arguments': {'key': 'arguments', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(PolicyContract, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.arguments = kwargs.get('arguments', None)


class PolicyResult(Model):
    """PolicyResult.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name:
    :vartype name: str
    :ivar arguments:
    :vartype arguments: str
    :ivar summary:
    :vartype summary:
     list[~azure.cognitiveservices.personalizer.models.PolicyResultSummary]
    :ivar total_summary:
    :vartype total_summary:
     ~azure.cognitiveservices.personalizer.models.PolicyResultTotalSummary
    """

    _validation = {
        'name': {'readonly': True},
        'arguments': {'readonly': True},
        'summary': {'readonly': True},
        'total_summary': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'arguments': {'key': 'arguments', 'type': 'str'},
        'summary': {'key': 'summary', 'type': '[PolicyResultSummary]'},
        'total_summary': {'key': 'totalSummary', 'type': 'PolicyResultTotalSummary'},
    }

    def __init__(self, **kwargs):
        super(PolicyResult, self).__init__(**kwargs)
        self.name = None
        self.arguments = None
        self.summary = None
        self.total_summary = None


class PolicyResultSummary(Model):
    """PolicyResultSummary.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar time_stamp:
    :vartype time_stamp: datetime
    :ivar ips_estimator_numerator:
    :vartype ips_estimator_numerator: float
    :ivar ips_estimator_denominator:
    :vartype ips_estimator_denominator: float
    :ivar snips_estimator_denominator:
    :vartype snips_estimator_denominator: float
    :ivar aggregate_time_window:
    :vartype aggregate_time_window: timedelta
    :param non_zero_probability:
    :type non_zero_probability: float
    :ivar confidence_interval:
    :vartype confidence_interval: float
    :ivar sum_of_squares:
    :vartype sum_of_squares: float
    """

    _validation = {
        'time_stamp': {'readonly': True},
        'ips_estimator_numerator': {'readonly': True},
        'ips_estimator_denominator': {'readonly': True},
        'snips_estimator_denominator': {'readonly': True},
        'aggregate_time_window': {'readonly': True},
        'confidence_interval': {'readonly': True},
        'sum_of_squares': {'readonly': True},
    }

    _attribute_map = {
        'time_stamp': {'key': 'timeStamp', 'type': 'iso-8601'},
        'ips_estimator_numerator': {'key': 'ipsEstimatorNumerator', 'type': 'float'},
        'ips_estimator_denominator': {'key': 'ipsEstimatorDenominator', 'type': 'float'},
        'snips_estimator_denominator': {'key': 'snipsEstimatorDenominator', 'type': 'float'},
        'aggregate_time_window': {'key': 'aggregateTimeWindow', 'type': 'duration'},
        'non_zero_probability': {'key': 'nonZeroProbability', 'type': 'float'},
        'confidence_interval': {'key': 'confidenceInterval', 'type': 'float'},
        'sum_of_squares': {'key': 'sumOfSquares', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(PolicyResultSummary, self).__init__(**kwargs)
        self.time_stamp = None
        self.ips_estimator_numerator = None
        self.ips_estimator_denominator = None
        self.snips_estimator_denominator = None
        self.aggregate_time_window = None
        self.non_zero_probability = kwargs.get('non_zero_probability', None)
        self.confidence_interval = None
        self.sum_of_squares = None


class PolicyResultTotalSummary(PolicyResultSummary):
    """PolicyResultTotalSummary.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar time_stamp:
    :vartype time_stamp: datetime
    :ivar ips_estimator_numerator:
    :vartype ips_estimator_numerator: float
    :ivar ips_estimator_denominator:
    :vartype ips_estimator_denominator: float
    :ivar snips_estimator_denominator:
    :vartype snips_estimator_denominator: float
    :ivar aggregate_time_window:
    :vartype aggregate_time_window: timedelta
    :param non_zero_probability:
    :type non_zero_probability: float
    :ivar confidence_interval:
    :vartype confidence_interval: float
    :ivar sum_of_squares:
    :vartype sum_of_squares: float
    """

    _validation = {
        'time_stamp': {'readonly': True},
        'ips_estimator_numerator': {'readonly': True},
        'ips_estimator_denominator': {'readonly': True},
        'snips_estimator_denominator': {'readonly': True},
        'aggregate_time_window': {'readonly': True},
        'confidence_interval': {'readonly': True},
        'sum_of_squares': {'readonly': True},
    }

    _attribute_map = {
        'time_stamp': {'key': 'timeStamp', 'type': 'iso-8601'},
        'ips_estimator_numerator': {'key': 'ipsEstimatorNumerator', 'type': 'float'},
        'ips_estimator_denominator': {'key': 'ipsEstimatorDenominator', 'type': 'float'},
        'snips_estimator_denominator': {'key': 'snipsEstimatorDenominator', 'type': 'float'},
        'aggregate_time_window': {'key': 'aggregateTimeWindow', 'type': 'duration'},
        'non_zero_probability': {'key': 'nonZeroProbability', 'type': 'float'},
        'confidence_interval': {'key': 'confidenceInterval', 'type': 'float'},
        'sum_of_squares': {'key': 'sumOfSquares', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(PolicyResultTotalSummary, self).__init__(**kwargs)


class RankableAction(Model):
    """An action with it's associated features used for ranking.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Id of the action.
    :type id: str
    :param features: Required. List of dictionaries containing features.
    :type features: list[object]
    """

    _validation = {
        'id': {'required': True, 'max_length': 256},
        'features': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'features': {'key': 'features', 'type': '[object]'},
    }

    def __init__(self, **kwargs):
        super(RankableAction, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.features = kwargs.get('features', None)


class RankedAction(Model):
    """A ranked action with its resulting probability.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Id of the action
    :vartype id: str
    :ivar probability: Probability of the action
    :vartype probability: float
    """

    _validation = {
        'id': {'readonly': True, 'max_length': 256},
        'probability': {'readonly': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'probability': {'key': 'probability', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(RankedAction, self).__init__(**kwargs)
        self.id = None
        self.probability = None


class RankRequest(Model):
    """Request a set of actions to be ranked by the Personalizer service.

    All required parameters must be populated in order to send to Azure.

    :param context_features: Features of the context used for Personalizer as
     a
     dictionary of dictionaries. This depends on the application, and
     typically includes features about the current user, their
     device, profile information, aggregated data about time and date, etc.
     Features should not include personally identifiable information (PII),
     unique UserIDs, or precise timestamps.
    :type context_features: list[object]
    :param actions: Required. The set of actions the Personalizer service can
     pick from.
     The set should not contain more than 50 actions.
     The order of the actions does not affect the rank result but the order
     should match the sequence your application would have used to display
     them.
     The first item in the array will be used as Baseline item in Offline
     evaluations.
    :type actions:
     list[~azure.cognitiveservices.personalizer.models.RankableAction]
    :param excluded_actions: The set of action ids to exclude from ranking.
    :type excluded_actions: list[str]
    :param event_id: Optionally pass an eventId that uniquely identifies this
     Rank event.
     If null, the service generates a unique eventId. The eventId will be used
     for
     associating this request with its reward, as well as seeding the
     pseudo-random
     generator when making a Personalizer call.
    :type event_id: str
    :param defer_activation: Send false if it is certain the rewardActionId in
     rank results will be shown to the user, therefore
     Personalizer will expect a Reward call, otherwise it will assign the
     default
     Reward to the event. Send true if it is possible the user will not see the
     action specified in the rank results, because the page is rendering later,
     or the Rank results may be
     overridden by code further downstream. Default value: False .
    :type defer_activation: bool
    """

    _validation = {
        'actions': {'required': True},
        'event_id': {'max_length': 256},
    }

    _attribute_map = {
        'context_features': {'key': 'contextFeatures', 'type': '[object]'},
        'actions': {'key': 'actions', 'type': '[RankableAction]'},
        'excluded_actions': {'key': 'excludedActions', 'type': '[str]'},
        'event_id': {'key': 'eventId', 'type': 'str'},
        'defer_activation': {'key': 'deferActivation', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(RankRequest, self).__init__(**kwargs)
        self.context_features = kwargs.get('context_features', None)
        self.actions = kwargs.get('actions', None)
        self.excluded_actions = kwargs.get('excluded_actions', None)
        self.event_id = kwargs.get('event_id', None)
        self.defer_activation = kwargs.get('defer_activation', False)


class RankResponse(Model):
    """Returns which action to use as rewardActionId, and additional information
    about each action as a result of a Rank request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar ranking: The calculated ranking for the current request.
    :vartype ranking:
     list[~azure.cognitiveservices.personalizer.models.RankedAction]
    :ivar event_id: The eventId for the round trip from request to response.
    :vartype event_id: str
    :ivar reward_action_id: The action chosen by the Personalizer service.
     This is the action your application should display, and for which to
     report the reward. This might not be the
     first found in 'ranking' if an action in the request in first position was
     part of the excluded ids.
    :vartype reward_action_id: str
    """

    _validation = {
        'ranking': {'readonly': True},
        'event_id': {'readonly': True, 'max_length': 256},
        'reward_action_id': {'readonly': True, 'max_length': 256},
    }

    _attribute_map = {
        'ranking': {'key': 'ranking', 'type': '[RankedAction]'},
        'event_id': {'key': 'eventId', 'type': 'str'},
        'reward_action_id': {'key': 'rewardActionId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RankResponse, self).__init__(**kwargs)
        self.ranking = None
        self.event_id = None
        self.reward_action_id = None


class RewardRequest(Model):
    """Reward given to a rank response.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Reward to be assigned to an action. Value should
     be between -1 and 1 inclusive.
    :type value: float
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(RewardRequest, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ServiceConfiguration(Model):
    """The configuration of the service.

    All required parameters must be populated in order to send to Azure.

    :param reward_wait_time: Required. The time span waited until a request is
     marked with the default reward.
     For example, PT5M (5 mins). For information about the time format,
     see http://en.wikipedia.org/wiki/ISO_8601#Durations
    :type reward_wait_time: timedelta
    :param default_reward: Required. The reward given if a reward is not
     received within the specified wait time.
    :type default_reward: float
    :param reward_aggregation: Required. The function used to process rewards,
     if multiple reward scores are received before rewardWaitTime is over.
    :type reward_aggregation: str
    :param exploration_percentage: Required. The percentage of rank responses
     that will use exploration.
    :type exploration_percentage: float
    :param model_export_frequency: Required. Personalizer will start using the
     most updated trained model for online ranks automatically every specified
     time period.
     For example, PT5M (5 mins). For information about the time format,
     see http://en.wikipedia.org/wiki/ISO_8601#Durations
    :type model_export_frequency: timedelta
    :param log_mirror_enabled: Flag indicates whether log mirroring is
     enabled.
    :type log_mirror_enabled: bool
    :param log_mirror_sas_uri: Azure storage account container SAS URI for log
     mirroring.
    :type log_mirror_sas_uri: str
    :param log_retention_days: Required. Number of days historical logs are to
     be maintained. -1 implies the logs will never be deleted.
    :type log_retention_days: int
    """

    _validation = {
        'reward_wait_time': {'required': True},
        'default_reward': {'required': True, 'maximum': 1, 'minimum': -1},
        'reward_aggregation': {'required': True, 'max_length': 256},
        'exploration_percentage': {'required': True, 'maximum': 1, 'minimum': 0},
        'model_export_frequency': {'required': True},
        'log_retention_days': {'required': True, 'maximum': 2147483647, 'minimum': -1},
    }

    _attribute_map = {
        'reward_wait_time': {'key': 'rewardWaitTime', 'type': 'duration'},
        'default_reward': {'key': 'defaultReward', 'type': 'float'},
        'reward_aggregation': {'key': 'rewardAggregation', 'type': 'str'},
        'exploration_percentage': {'key': 'explorationPercentage', 'type': 'float'},
        'model_export_frequency': {'key': 'modelExportFrequency', 'type': 'duration'},
        'log_mirror_enabled': {'key': 'logMirrorEnabled', 'type': 'bool'},
        'log_mirror_sas_uri': {'key': 'logMirrorSasUri', 'type': 'str'},
        'log_retention_days': {'key': 'logRetentionDays', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(ServiceConfiguration, self).__init__(**kwargs)
        self.reward_wait_time = kwargs.get('reward_wait_time', None)
        self.default_reward = kwargs.get('default_reward', None)
        self.reward_aggregation = kwargs.get('reward_aggregation', None)
        self.exploration_percentage = kwargs.get('exploration_percentage', None)
        self.model_export_frequency = kwargs.get('model_export_frequency', None)
        self.log_mirror_enabled = kwargs.get('log_mirror_enabled', None)
        self.log_mirror_sas_uri = kwargs.get('log_mirror_sas_uri', None)
        self.log_retention_days = kwargs.get('log_retention_days', None)
