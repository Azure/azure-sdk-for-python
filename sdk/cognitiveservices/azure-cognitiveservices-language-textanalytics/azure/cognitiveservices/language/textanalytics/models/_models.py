# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class DetectedLanguage(Model):
    """DetectedLanguage.

    :param name: Long name of a detected language (e.g. English, French).
    :type name: str
    :param iso6391_name: A two letter representation of the detected language
     according to the ISO 639-1 standard (e.g. en, fr).
    :type iso6391_name: str
    :param score: A confidence score between 0 and 1. Scores close to 1
     indicate 100% certainty that the identified language is true.
    :type score: float
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'iso6391_name': {'key': 'iso6391Name', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(DetectedLanguage, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.iso6391_name = kwargs.get('iso6391_name', None)
        self.score = kwargs.get('score', None)


class DocumentStatistics(Model):
    """DocumentStatistics.

    :param characters_count: Number of text elements recognized in the
     document.
    :type characters_count: int
    :param transactions_count: Number of transactions for the document.
    :type transactions_count: int
    """

    _attribute_map = {
        'characters_count': {'key': 'charactersCount', 'type': 'int'},
        'transactions_count': {'key': 'transactionsCount', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(DocumentStatistics, self).__init__(**kwargs)
        self.characters_count = kwargs.get('characters_count', None)
        self.transactions_count = kwargs.get('transactions_count', None)


class EntitiesBatchResult(Model):
    """EntitiesBatchResult.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar documents: Response by document
    :vartype documents:
     list[~azure.cognitiveservices.language.textanalytics.models.EntitiesBatchResultItem]
    :ivar errors: Errors and Warnings by document
    :vartype errors:
     list[~azure.cognitiveservices.language.textanalytics.models.ErrorRecord]
    :ivar statistics: (Optional) if showStats=true was specified in the
     request this field will contain information about the request payload.
    :vartype statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    """

    _validation = {
        'documents': {'readonly': True},
        'errors': {'readonly': True},
        'statistics': {'readonly': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[EntitiesBatchResultItem]'},
        'errors': {'key': 'errors', 'type': '[ErrorRecord]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
    }

    def __init__(self, **kwargs):
        super(EntitiesBatchResult, self).__init__(**kwargs)
        self.documents = None
        self.errors = None
        self.statistics = None


class EntitiesBatchResultItem(Model):
    """EntitiesBatchResultItem.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param id: Unique, non-empty document identifier.
    :type id: str
    :ivar entities: Recognized entities in the document.
    :vartype entities:
     list[~azure.cognitiveservices.language.textanalytics.models.EntityRecord]
    :param statistics: (Optional) if showStats=true was specified in the
     request this field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _validation = {
        'entities': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'entities': {'key': 'entities', 'type': '[EntityRecord]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, **kwargs):
        super(EntitiesBatchResultItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.entities = None
        self.statistics = kwargs.get('statistics', None)


class EntityRecord(Model):
    """EntityRecord.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param name: Entity formal name.
    :type name: str
    :param matches: List of instances this entity appears in the text.
    :type matches:
     list[~azure.cognitiveservices.language.textanalytics.models.MatchRecord]
    :param wikipedia_language: Wikipedia language for which the WikipediaId
     and WikipediaUrl refers to.
    :type wikipedia_language: str
    :param wikipedia_id: Wikipedia unique identifier of the recognized entity.
    :type wikipedia_id: str
    :ivar wikipedia_url: URL for the entity's Wikipedia page.
    :vartype wikipedia_url: str
    :param bing_id: Bing unique identifier of the recognized entity. Use in
     conjunction with the Bing Entity Search API to fetch additional relevant
     information.
    :type bing_id: str
    :param type: Entity type from Named Entity Recognition model
    :type type: str
    :param sub_type: Entity sub type from Named Entity Recognition model
    :type sub_type: str
    """

    _validation = {
        'wikipedia_url': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'matches': {'key': 'matches', 'type': '[MatchRecord]'},
        'wikipedia_language': {'key': 'wikipediaLanguage', 'type': 'str'},
        'wikipedia_id': {'key': 'wikipediaId', 'type': 'str'},
        'wikipedia_url': {'key': 'wikipediaUrl', 'type': 'str'},
        'bing_id': {'key': 'bingId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'sub_type': {'key': 'subType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EntityRecord, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.matches = kwargs.get('matches', None)
        self.wikipedia_language = kwargs.get('wikipedia_language', None)
        self.wikipedia_id = kwargs.get('wikipedia_id', None)
        self.wikipedia_url = None
        self.bing_id = kwargs.get('bing_id', None)
        self.type = kwargs.get('type', None)
        self.sub_type = kwargs.get('sub_type', None)


class ErrorRecord(Model):
    """ErrorRecord.

    :param id: Input document unique identifier the error refers to.
    :type id: str
    :param message: Error message.
    :type message: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ErrorRecord, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.message = kwargs.get('message', None)


class ErrorResponse(Model):
    """ErrorResponse.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param target:
    :type target: str
    :param inner_error:
    :type inner_error:
     ~azure.cognitiveservices.language.textanalytics.models.InternalError
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'InternalError'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.inner_error = kwargs.get('inner_error', None)


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class InternalError(Model):
    """InternalError.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param inner_error:
    :type inner_error:
     ~azure.cognitiveservices.language.textanalytics.models.InternalError
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'InternalError'},
    }

    def __init__(self, **kwargs):
        super(InternalError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.inner_error = kwargs.get('inner_error', None)


class KeyPhraseBatchResult(Model):
    """KeyPhraseBatchResult.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar documents: Response by document
    :vartype documents:
     list[~azure.cognitiveservices.language.textanalytics.models.KeyPhraseBatchResultItem]
    :ivar errors: Errors and Warnings by document
    :vartype errors:
     list[~azure.cognitiveservices.language.textanalytics.models.ErrorRecord]
    :ivar statistics: =(Optional) if showStats=true was specified in the
     request this field will contain information about the request payload.
    :vartype statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    """

    _validation = {
        'documents': {'readonly': True},
        'errors': {'readonly': True},
        'statistics': {'readonly': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[KeyPhraseBatchResultItem]'},
        'errors': {'key': 'errors', 'type': '[ErrorRecord]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
    }

    def __init__(self, **kwargs):
        super(KeyPhraseBatchResult, self).__init__(**kwargs)
        self.documents = None
        self.errors = None
        self.statistics = None


class KeyPhraseBatchResultItem(Model):
    """KeyPhraseBatchResultItem.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param id: Unique, non-empty document identifier.
    :type id: str
    :ivar key_phrases: A list of representative words or phrases. The number
     of key phrases returned is proportional to the number of words in the
     input document.
    :vartype key_phrases: list[str]
    :param statistics: (Optional) if showStats=true was specified in the
     request this field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _validation = {
        'key_phrases': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'key_phrases': {'key': 'keyPhrases', 'type': '[str]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, **kwargs):
        super(KeyPhraseBatchResultItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.key_phrases = None
        self.statistics = kwargs.get('statistics', None)


class LanguageBatchInput(Model):
    """LanguageBatchInput.

    :param documents:
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.LanguageInput]
    """

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[LanguageInput]'},
    }

    def __init__(self, **kwargs):
        super(LanguageBatchInput, self).__init__(**kwargs)
        self.documents = kwargs.get('documents', None)


class LanguageBatchResult(Model):
    """LanguageBatchResult.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar documents: Response by document
    :vartype documents:
     list[~azure.cognitiveservices.language.textanalytics.models.LanguageBatchResultItem]
    :ivar errors: Errors and Warnings by document
    :vartype errors:
     list[~azure.cognitiveservices.language.textanalytics.models.ErrorRecord]
    :ivar statistics: (Optional) if showStats=true was specified in the
     request this field will contain information about the request payload.
    :vartype statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    """

    _validation = {
        'documents': {'readonly': True},
        'errors': {'readonly': True},
        'statistics': {'readonly': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[LanguageBatchResultItem]'},
        'errors': {'key': 'errors', 'type': '[ErrorRecord]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
    }

    def __init__(self, **kwargs):
        super(LanguageBatchResult, self).__init__(**kwargs)
        self.documents = None
        self.errors = None
        self.statistics = None


class LanguageBatchResultItem(Model):
    """LanguageBatchResultItem.

    :param id: Unique, non-empty document identifier.
    :type id: str
    :param detected_languages: A list of extracted languages.
    :type detected_languages:
     list[~azure.cognitiveservices.language.textanalytics.models.DetectedLanguage]
    :param statistics: (Optional) if showStats=true was specified in the
     request this field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'detected_languages': {'key': 'detectedLanguages', 'type': '[DetectedLanguage]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, **kwargs):
        super(LanguageBatchResultItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.detected_languages = kwargs.get('detected_languages', None)
        self.statistics = kwargs.get('statistics', None)


class LanguageInput(Model):
    """LanguageInput.

    :param country_hint:
    :type country_hint: str
    :param id: Unique, non-empty document identifier.
    :type id: str
    :param text:
    :type text: str
    """

    _attribute_map = {
        'country_hint': {'key': 'countryHint', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(LanguageInput, self).__init__(**kwargs)
        self.country_hint = kwargs.get('country_hint', None)
        self.id = kwargs.get('id', None)
        self.text = kwargs.get('text', None)


class MatchRecord(Model):
    """MatchRecord.

    :param wikipedia_score: (optional) If a well-known item with Wikipedia
     link is recognized, a decimal number denoting the confidence level of the
     Wikipedia info will be returned.
    :type wikipedia_score: float
    :param entity_type_score: (optional) If an entity type is recognized, a
     decimal number denoting the confidence level of the entity type will be
     returned.
    :type entity_type_score: float
    :param text: Entity text as appears in the request.
    :type text: str
    :param offset: Start position (in Unicode characters) for the entity match
     text.
    :type offset: int
    :param length: Length (in Unicode characters) for the entity match text.
    :type length: int
    """

    _attribute_map = {
        'wikipedia_score': {'key': 'wikipediaScore', 'type': 'float'},
        'entity_type_score': {'key': 'entityTypeScore', 'type': 'float'},
        'text': {'key': 'text', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(MatchRecord, self).__init__(**kwargs)
        self.wikipedia_score = kwargs.get('wikipedia_score', None)
        self.entity_type_score = kwargs.get('entity_type_score', None)
        self.text = kwargs.get('text', None)
        self.offset = kwargs.get('offset', None)
        self.length = kwargs.get('length', None)


class MultiLanguageBatchInput(Model):
    """MultiLanguageBatchInput.

    :param documents:
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.MultiLanguageInput]
    """

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[MultiLanguageInput]'},
    }

    def __init__(self, **kwargs):
        super(MultiLanguageBatchInput, self).__init__(**kwargs)
        self.documents = kwargs.get('documents', None)


class MultiLanguageInput(Model):
    """MultiLanguageInput.

    :param language: This is the 2 letter ISO 639-1 representation of a
     language. For example, use "en" for English; "es" for Spanish etc.,
    :type language: str
    :param id: Unique, non-empty document identifier.
    :type id: str
    :param text:
    :type text: str
    """

    _attribute_map = {
        'language': {'key': 'language', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MultiLanguageInput, self).__init__(**kwargs)
        self.language = kwargs.get('language', None)
        self.id = kwargs.get('id', None)
        self.text = kwargs.get('text', None)


class RequestStatistics(Model):
    """RequestStatistics.

    :param documents_count: Number of documents submitted in the request.
    :type documents_count: int
    :param valid_documents_count: Number of valid documents. This excludes
     empty, over-size limit or non-supported languages documents.
    :type valid_documents_count: int
    :param erroneous_documents_count: Number of invalid documents. This
     includes empty, over-size limit or non-supported languages documents.
    :type erroneous_documents_count: int
    :param transactions_count: Number of transactions for the request.
    :type transactions_count: long
    """

    _attribute_map = {
        'documents_count': {'key': 'documentsCount', 'type': 'int'},
        'valid_documents_count': {'key': 'validDocumentsCount', 'type': 'int'},
        'erroneous_documents_count': {'key': 'erroneousDocumentsCount', 'type': 'int'},
        'transactions_count': {'key': 'transactionsCount', 'type': 'long'},
    }

    def __init__(self, **kwargs):
        super(RequestStatistics, self).__init__(**kwargs)
        self.documents_count = kwargs.get('documents_count', None)
        self.valid_documents_count = kwargs.get('valid_documents_count', None)
        self.erroneous_documents_count = kwargs.get('erroneous_documents_count', None)
        self.transactions_count = kwargs.get('transactions_count', None)


class SentimentBatchResult(Model):
    """SentimentBatchResult.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar documents: Response by document
    :vartype documents:
     list[~azure.cognitiveservices.language.textanalytics.models.SentimentBatchResultItem]
    :ivar errors: Errors and Warnings by document
    :vartype errors:
     list[~azure.cognitiveservices.language.textanalytics.models.ErrorRecord]
    :ivar statistics: (Optional) if showStats=true was specified in the
     request this field will contain information about the request payload.
    :vartype statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    """

    _validation = {
        'documents': {'readonly': True},
        'errors': {'readonly': True},
        'statistics': {'readonly': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[SentimentBatchResultItem]'},
        'errors': {'key': 'errors', 'type': '[ErrorRecord]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
    }

    def __init__(self, **kwargs):
        super(SentimentBatchResult, self).__init__(**kwargs)
        self.documents = None
        self.errors = None
        self.statistics = None


class SentimentBatchResultItem(Model):
    """SentimentBatchResultItem.

    :param id: Unique, non-empty document identifier.
    :type id: str
    :param score: A decimal number between 0 and 1 denoting the sentiment of
     the document. A score above 0.7 usually refers to a positive document
     while a score below 0.3 normally has a negative connotation. Mid values
     refer to neutral text.
    :type score: float
    :param statistics: (Optional) if showStats=true was specified in the
     request this field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, **kwargs):
        super(SentimentBatchResultItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.score = kwargs.get('score', None)
        self.statistics = kwargs.get('statistics', None)
