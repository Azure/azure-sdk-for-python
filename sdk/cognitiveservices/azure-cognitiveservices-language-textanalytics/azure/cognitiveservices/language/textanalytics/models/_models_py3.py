# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AnalyzeBatchInput(Model):
    """AnalyzeBatchInput.

    All required parameters must be populated in order to send to Azure.

    :param display_name: Optional display name for the analysis job.
    :type display_name: str
    :param analysis_input: Required.
    :type analysis_input:
     ~azure.cognitiveservices.language.textanalytics.models.MultiLanguageBatchInput
    :param tasks: Required. The set of tasks to execute on the input
     documents. Cannot specify the same task more than once.
    :type tasks:
     ~azure.cognitiveservices.language.textanalytics.models.JobManifestTasks
    """

    _validation = {
        'analysis_input': {'required': True},
        'tasks': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'analysis_input': {'key': 'analysisInput', 'type': 'MultiLanguageBatchInput'},
        'tasks': {'key': 'tasks', 'type': 'JobManifestTasks'},
    }

    def __init__(self, *, analysis_input, tasks, display_name: str=None, **kwargs) -> None:
        super(AnalyzeBatchInput, self).__init__(**kwargs)
        self.display_name = display_name
        self.analysis_input = analysis_input
        self.tasks = tasks


class AnalyzeJobState(Model):
    """AnalyzeJobState.

    All required parameters must be populated in order to send to Azure.

    :param created_date_time: Required.
    :type created_date_time: datetime
    :param display_name:
    :type display_name: str
    :param expiration_date_time:
    :type expiration_date_time: datetime
    :param job_id: Required.
    :type job_id: str
    :param last_update_date_time: Required.
    :type last_update_date_time: datetime
    :param status: Required. Possible values include: 'notStarted', 'running',
     'succeeded', 'failed', 'cancelled', 'cancelling', 'partiallyCompleted'
    :type status: str or
     ~azure.cognitiveservices.language.textanalytics.models.State
    :param tasks: Required.
    :type tasks:
     ~azure.cognitiveservices.language.textanalytics.models.AnalyzeJobStateTasks
    :param errors:
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsError]
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    :param next_link:
    :type next_link: str
    """

    _validation = {
        'created_date_time': {'required': True},
        'job_id': {'required': True},
        'last_update_date_time': {'required': True},
        'status': {'required': True},
        'tasks': {'required': True},
    }

    _attribute_map = {
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'State'},
        'tasks': {'key': 'tasks', 'type': 'AnalyzeJobStateTasks'},
        'errors': {'key': 'errors', 'type': '[TextAnalyticsError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'next_link': {'key': '@nextLink', 'type': 'str'},
    }

    def __init__(self, *, created_date_time, job_id: str, last_update_date_time, status, tasks, display_name: str=None, expiration_date_time=None, errors=None, statistics=None, next_link: str=None, **kwargs) -> None:
        super(AnalyzeJobState, self).__init__(**kwargs)
        self.created_date_time = created_date_time
        self.display_name = display_name
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_update_date_time = last_update_date_time
        self.status = status
        self.tasks = tasks
        self.errors = errors
        self.statistics = statistics
        self.next_link = next_link


class AnalyzeJobStateTasks(Model):
    """AnalyzeJobStateTasks.

    All required parameters must be populated in order to send to Azure.

    :param details:
    :type details:
     ~azure.cognitiveservices.language.textanalytics.models.AnalyzeJobStateTasksDetails
    :param completed: Required.
    :type completed: int
    :param failed: Required.
    :type failed: int
    :param in_progress: Required.
    :type in_progress: int
    :param total: Required.
    :type total: int
    :param entity_recognition_tasks:
    :type entity_recognition_tasks:
     list[~azure.cognitiveservices.language.textanalytics.models.AnalyzeJobStateTasksEntityRecognitionTasksItem]
    :param entity_recognition_pii_tasks:
    :type entity_recognition_pii_tasks:
     list[~azure.cognitiveservices.language.textanalytics.models.AnalyzeJobStateTasksEntityRecognitionPiiTasksItem]
    :param key_phrase_extraction_tasks:
    :type key_phrase_extraction_tasks:
     list[~azure.cognitiveservices.language.textanalytics.models.AnalyzeJobStateTasksKeyPhraseExtractionTasksItem]
    """

    _validation = {
        'completed': {'required': True},
        'failed': {'required': True},
        'in_progress': {'required': True},
        'total': {'required': True},
    }

    _attribute_map = {
        'details': {'key': 'details', 'type': 'AnalyzeJobStateTasksDetails'},
        'completed': {'key': 'completed', 'type': 'int'},
        'failed': {'key': 'failed', 'type': 'int'},
        'in_progress': {'key': 'inProgress', 'type': 'int'},
        'total': {'key': 'total', 'type': 'int'},
        'entity_recognition_tasks': {'key': 'entityRecognitionTasks', 'type': '[AnalyzeJobStateTasksEntityRecognitionTasksItem]'},
        'entity_recognition_pii_tasks': {'key': 'entityRecognitionPiiTasks', 'type': '[AnalyzeJobStateTasksEntityRecognitionPiiTasksItem]'},
        'key_phrase_extraction_tasks': {'key': 'keyPhraseExtractionTasks', 'type': '[AnalyzeJobStateTasksKeyPhraseExtractionTasksItem]'},
    }

    def __init__(self, *, completed: int, failed: int, in_progress: int, total: int, details=None, entity_recognition_tasks=None, entity_recognition_pii_tasks=None, key_phrase_extraction_tasks=None, **kwargs) -> None:
        super(AnalyzeJobStateTasks, self).__init__(**kwargs)
        self.details = details
        self.completed = completed
        self.failed = failed
        self.in_progress = in_progress
        self.total = total
        self.entity_recognition_tasks = entity_recognition_tasks
        self.entity_recognition_pii_tasks = entity_recognition_pii_tasks
        self.key_phrase_extraction_tasks = key_phrase_extraction_tasks


class TaskState(Model):
    """TaskState.

    All required parameters must be populated in order to send to Azure.

    :param last_update_date_time: Required.
    :type last_update_date_time: datetime
    :param name:
    :type name: str
    :param status: Required.
    :type status: object
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
    }

    def __init__(self, *, last_update_date_time, status, name: str=None, **kwargs) -> None:
        super(TaskState, self).__init__(**kwargs)
        self.last_update_date_time = last_update_date_time
        self.name = name
        self.status = status


class AnalyzeJobStateTasksDetails(TaskState):
    """AnalyzeJobStateTasksDetails.

    All required parameters must be populated in order to send to Azure.

    :param last_update_date_time: Required.
    :type last_update_date_time: datetime
    :param name:
    :type name: str
    :param status: Required.
    :type status: object
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
    }

    def __init__(self, *, last_update_date_time, status, name: str=None, **kwargs) -> None:
        super(AnalyzeJobStateTasksDetails, self).__init__(last_update_date_time=last_update_date_time, name=name, status=status, **kwargs)


class AnalyzeJobStateTasksEntityRecognitionPiiTasksItem(TaskState):
    """AnalyzeJobStateTasksEntityRecognitionPiiTasksItem.

    All required parameters must be populated in order to send to Azure.

    :param last_update_date_time: Required.
    :type last_update_date_time: datetime
    :param name:
    :type name: str
    :param status: Required.
    :type status: object
    :param results: Required.
    :type results:
     ~azure.cognitiveservices.language.textanalytics.models.PiiResult
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
        'results': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
        'results': {'key': 'results', 'type': 'PiiResult'},
    }

    def __init__(self, *, last_update_date_time, status, results, name: str=None, **kwargs) -> None:
        super(AnalyzeJobStateTasksEntityRecognitionPiiTasksItem, self).__init__(last_update_date_time=last_update_date_time, name=name, status=status, **kwargs)
        self.results = results


class AnalyzeJobStateTasksEntityRecognitionTasksItem(TaskState):
    """AnalyzeJobStateTasksEntityRecognitionTasksItem.

    All required parameters must be populated in order to send to Azure.

    :param last_update_date_time: Required.
    :type last_update_date_time: datetime
    :param name:
    :type name: str
    :param status: Required.
    :type status: object
    :param results: Required.
    :type results:
     ~azure.cognitiveservices.language.textanalytics.models.EntitiesResult
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
        'results': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
        'results': {'key': 'results', 'type': 'EntitiesResult'},
    }

    def __init__(self, *, last_update_date_time, status, results, name: str=None, **kwargs) -> None:
        super(AnalyzeJobStateTasksEntityRecognitionTasksItem, self).__init__(last_update_date_time=last_update_date_time, name=name, status=status, **kwargs)
        self.results = results


class AnalyzeJobStateTasksKeyPhraseExtractionTasksItem(TaskState):
    """AnalyzeJobStateTasksKeyPhraseExtractionTasksItem.

    All required parameters must be populated in order to send to Azure.

    :param last_update_date_time: Required.
    :type last_update_date_time: datetime
    :param name:
    :type name: str
    :param status: Required.
    :type status: object
    :param results: Required.
    :type results:
     ~azure.cognitiveservices.language.textanalytics.models.KeyPhraseResult
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
        'results': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
        'results': {'key': 'results', 'type': 'KeyPhraseResult'},
    }

    def __init__(self, *, last_update_date_time, status, results, name: str=None, **kwargs) -> None:
        super(AnalyzeJobStateTasksKeyPhraseExtractionTasksItem, self).__init__(last_update_date_time=last_update_date_time, name=name, status=status, **kwargs)
        self.results = results


class AspectConfidenceScoreLabel(Model):
    """Represents the confidence scores across all sentiment classes: positive,
    neutral, negative.

    All required parameters must be populated in order to send to Azure.

    :param positive: Required.
    :type positive: float
    :param negative: Required.
    :type negative: float
    """

    _validation = {
        'positive': {'required': True},
        'negative': {'required': True},
    }

    _attribute_map = {
        'positive': {'key': 'positive', 'type': 'float'},
        'negative': {'key': 'negative', 'type': 'float'},
    }

    def __init__(self, *, positive: float, negative: float, **kwargs) -> None:
        super(AspectConfidenceScoreLabel, self).__init__(**kwargs)
        self.positive = positive
        self.negative = negative


class AspectRelation(Model):
    """AspectRelation.

    All required parameters must be populated in order to send to Azure.

    :param relation_type: Required. The type related to the aspect. Possible
     values include: 'opinion', 'aspect'
    :type relation_type: str or
     ~azure.cognitiveservices.language.textanalytics.models.AspectRelationType
    :param ref: Required. The JSON pointer indicating the linked object.
    :type ref: str
    """

    _validation = {
        'relation_type': {'required': True},
        'ref': {'required': True},
    }

    _attribute_map = {
        'relation_type': {'key': 'relationType', 'type': 'AspectRelationType'},
        'ref': {'key': 'ref', 'type': 'str'},
    }

    def __init__(self, *, relation_type, ref: str, **kwargs) -> None:
        super(AspectRelation, self).__init__(**kwargs)
        self.relation_type = relation_type
        self.ref = ref


class DetectedLanguage(Model):
    """DetectedLanguage.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Long name of a detected language (e.g. English,
     French).
    :type name: str
    :param iso6391_name: Required. A two letter representation of the detected
     language according to the ISO 639-1 standard (e.g. en, fr).
    :type iso6391_name: str
    :param confidence_score: Required. A confidence score between 0 and 1.
     Scores close to 1 indicate 100% certainty that the identified language is
     true.
    :type confidence_score: float
    """

    _validation = {
        'name': {'required': True},
        'iso6391_name': {'required': True},
        'confidence_score': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'iso6391_name': {'key': 'iso6391Name', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
    }

    def __init__(self, *, name: str, iso6391_name: str, confidence_score: float, **kwargs) -> None:
        super(DetectedLanguage, self).__init__(**kwargs)
        self.name = name
        self.iso6391_name = iso6391_name
        self.confidence_score = confidence_score


class DocumentEntities(Model):
    """DocumentEntities.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique, non-empty document identifier.
    :type id: str
    :param entities: Required. Recognized entities in the document.
    :type entities:
     list[~azure.cognitiveservices.language.textanalytics.models.Entity]
    :param warnings: Required. Warnings encountered while processing document.
    :type warnings:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsWarning]
    :param statistics: if showStats=true was specified in the request this
     field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _validation = {
        'id': {'required': True},
        'entities': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'entities': {'key': 'entities', 'type': '[Entity]'},
        'warnings': {'key': 'warnings', 'type': '[TextAnalyticsWarning]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, *, id: str, entities, warnings, statistics=None, **kwargs) -> None:
        super(DocumentEntities, self).__init__(**kwargs)
        self.id = id
        self.entities = entities
        self.warnings = warnings
        self.statistics = statistics


class DocumentError(Model):
    """DocumentError.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Document Id.
    :type id: str
    :param error: Required. Document Error.
    :type error:
     ~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsError
    """

    _validation = {
        'id': {'required': True},
        'error': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'error': {'key': 'error', 'type': 'TextAnalyticsError'},
    }

    def __init__(self, *, id: str, error, **kwargs) -> None:
        super(DocumentError, self).__init__(**kwargs)
        self.id = id
        self.error = error


class DocumentHealthcareEntities(Model):
    """DocumentHealthcareEntities.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique, non-empty document identifier.
    :type id: str
    :param entities: Required. Healthcare entities.
    :type entities:
     list[~azure.cognitiveservices.language.textanalytics.models.HealthcareEntity]
    :param relations: Required. Healthcare entity relations.
    :type relations:
     list[~azure.cognitiveservices.language.textanalytics.models.HealthcareRelation]
    :param warnings: Required. Warnings encountered while processing document.
    :type warnings:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsWarning]
    :param statistics: if showStats=true was specified in the request this
     field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _validation = {
        'id': {'required': True},
        'entities': {'required': True},
        'relations': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'entities': {'key': 'entities', 'type': '[HealthcareEntity]'},
        'relations': {'key': 'relations', 'type': '[HealthcareRelation]'},
        'warnings': {'key': 'warnings', 'type': '[TextAnalyticsWarning]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, *, id: str, entities, relations, warnings, statistics=None, **kwargs) -> None:
        super(DocumentHealthcareEntities, self).__init__(**kwargs)
        self.id = id
        self.entities = entities
        self.relations = relations
        self.warnings = warnings
        self.statistics = statistics


class DocumentKeyPhrases(Model):
    """DocumentKeyPhrases.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique, non-empty document identifier.
    :type id: str
    :param key_phrases: Required. A list of representative words or phrases.
     The number of key phrases returned is proportional to the number of words
     in the input document.
    :type key_phrases: list[str]
    :param warnings: Required. Warnings encountered while processing document.
    :type warnings:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsWarning]
    :param statistics: if showStats=true was specified in the request this
     field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _validation = {
        'id': {'required': True},
        'key_phrases': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'key_phrases': {'key': 'keyPhrases', 'type': '[str]'},
        'warnings': {'key': 'warnings', 'type': '[TextAnalyticsWarning]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, *, id: str, key_phrases, warnings, statistics=None, **kwargs) -> None:
        super(DocumentKeyPhrases, self).__init__(**kwargs)
        self.id = id
        self.key_phrases = key_phrases
        self.warnings = warnings
        self.statistics = statistics


class DocumentLanguage(Model):
    """DocumentLanguage.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique, non-empty document identifier.
    :type id: str
    :param detected_language: Required. Detected Language.
    :type detected_language:
     ~azure.cognitiveservices.language.textanalytics.models.DetectedLanguage
    :param warnings: Required. Warnings encountered while processing document.
    :type warnings:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsWarning]
    :param statistics: if showStats=true was specified in the request this
     field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _validation = {
        'id': {'required': True},
        'detected_language': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'detected_language': {'key': 'detectedLanguage', 'type': 'DetectedLanguage'},
        'warnings': {'key': 'warnings', 'type': '[TextAnalyticsWarning]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, *, id: str, detected_language, warnings, statistics=None, **kwargs) -> None:
        super(DocumentLanguage, self).__init__(**kwargs)
        self.id = id
        self.detected_language = detected_language
        self.warnings = warnings
        self.statistics = statistics


class DocumentLinkedEntities(Model):
    """DocumentLinkedEntities.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique, non-empty document identifier.
    :type id: str
    :param entities: Required. Recognized well-known entities in the document.
    :type entities:
     list[~azure.cognitiveservices.language.textanalytics.models.LinkedEntity]
    :param warnings: Required. Warnings encountered while processing document.
    :type warnings:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsWarning]
    :param statistics: if showStats=true was specified in the request this
     field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _validation = {
        'id': {'required': True},
        'entities': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'entities': {'key': 'entities', 'type': '[LinkedEntity]'},
        'warnings': {'key': 'warnings', 'type': '[TextAnalyticsWarning]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, *, id: str, entities, warnings, statistics=None, **kwargs) -> None:
        super(DocumentLinkedEntities, self).__init__(**kwargs)
        self.id = id
        self.entities = entities
        self.warnings = warnings
        self.statistics = statistics


class DocumentSentiment(Model):
    """DocumentSentiment.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique, non-empty document identifier.
    :type id: str
    :param sentiment: Required. Predicted sentiment for document (Negative,
     Neutral, Positive, or Mixed). Possible values include: 'positive',
     'neutral', 'negative', 'mixed'
    :type sentiment: str or
     ~azure.cognitiveservices.language.textanalytics.models.DocumentSentimentValue
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    :param confidence_scores: Required. Document level sentiment confidence
     scores between 0 and 1 for each sentiment class.
    :type confidence_scores:
     ~azure.cognitiveservices.language.textanalytics.models.SentimentConfidenceScorePerLabel
    :param sentences: Required. Sentence level sentiment analysis.
    :type sentences:
     list[~azure.cognitiveservices.language.textanalytics.models.SentenceSentiment]
    :param warnings: Required. Warnings encountered while processing document.
    :type warnings:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsWarning]
    """

    _validation = {
        'id': {'required': True},
        'sentiment': {'required': True},
        'confidence_scores': {'required': True},
        'sentences': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'sentiment': {'key': 'sentiment', 'type': 'DocumentSentimentValue'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
        'confidence_scores': {'key': 'confidenceScores', 'type': 'SentimentConfidenceScorePerLabel'},
        'sentences': {'key': 'sentences', 'type': '[SentenceSentiment]'},
        'warnings': {'key': 'warnings', 'type': '[TextAnalyticsWarning]'},
    }

    def __init__(self, *, id: str, sentiment, confidence_scores, sentences, warnings, statistics=None, **kwargs) -> None:
        super(DocumentSentiment, self).__init__(**kwargs)
        self.id = id
        self.sentiment = sentiment
        self.statistics = statistics
        self.confidence_scores = confidence_scores
        self.sentences = sentences
        self.warnings = warnings


class DocumentStatistics(Model):
    """if showStats=true was specified in the request this field will contain
    information about the document payload.

    All required parameters must be populated in order to send to Azure.

    :param characters_count: Required. Number of text elements recognized in
     the document.
    :type characters_count: int
    :param transactions_count: Required. Number of transactions for the
     document.
    :type transactions_count: int
    """

    _validation = {
        'characters_count': {'required': True},
        'transactions_count': {'required': True},
    }

    _attribute_map = {
        'characters_count': {'key': 'charactersCount', 'type': 'int'},
        'transactions_count': {'key': 'transactionsCount', 'type': 'int'},
    }

    def __init__(self, *, characters_count: int, transactions_count: int, **kwargs) -> None:
        super(DocumentStatistics, self).__init__(**kwargs)
        self.characters_count = characters_count
        self.transactions_count = transactions_count


class EntitiesResult(Model):
    """EntitiesResult.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required. Response by document
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentEntities]
    :param errors: Required. Errors by document id.
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentError]
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    :param model_version: Required. This field indicates which model is used
     for scoring.
    :type model_version: str
    """

    _validation = {
        'documents': {'required': True},
        'errors': {'required': True},
        'model_version': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[DocumentEntities]'},
        'errors': {'key': 'errors', 'type': '[DocumentError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(self, *, documents, errors, model_version: str, statistics=None, **kwargs) -> None:
        super(EntitiesResult, self).__init__(**kwargs)
        self.documents = documents
        self.errors = errors
        self.statistics = statistics
        self.model_version = model_version


class EntitiesTask(Model):
    """EntitiesTask.

    :param parameters:
    :type parameters:
     ~azure.cognitiveservices.language.textanalytics.models.EntitiesTaskParameters
    """

    _attribute_map = {
        'parameters': {'key': 'parameters', 'type': 'EntitiesTaskParameters'},
    }

    def __init__(self, *, parameters=None, **kwargs) -> None:
        super(EntitiesTask, self).__init__(**kwargs)
        self.parameters = parameters


class EntitiesTaskParameters(Model):
    """EntitiesTaskParameters.

    :param model_version:  Default value: "latest" .
    :type model_version: str
    :param string_index_type: Possible values include: 'TextElements_v8',
     'UnicodeCodePoint', 'Utf16CodeUnit'. Default value: "TextElements_v8" .
    :type string_index_type: str or
     ~azure.cognitiveservices.language.textanalytics.models.StringIndexTypeResponse
    """

    _attribute_map = {
        'model_version': {'key': 'model-version', 'type': 'str'},
        'string_index_type': {'key': 'stringIndexType', 'type': 'StringIndexTypeResponse'},
    }

    def __init__(self, *, model_version: str="latest", string_index_type="TextElements_v8", **kwargs) -> None:
        super(EntitiesTaskParameters, self).__init__(**kwargs)
        self.model_version = model_version
        self.string_index_type = string_index_type


class Entity(Model):
    """Entity.

    All required parameters must be populated in order to send to Azure.

    :param text: Required. Entity text as appears in the request.
    :type text: str
    :param category: Required. Entity type.
    :type category: str
    :param subcategory: (Optional) Entity sub type.
    :type subcategory: str
    :param offset: Required. Start position for the entity text. Use of
     different 'stringIndexType' values can affect the offset returned.
    :type offset: int
    :param length: Required. Length for the entity text. Use of different
     'stringIndexType' values can affect the length returned.
    :type length: int
    :param confidence_score: Required. Confidence score between 0 and 1 of the
     extracted entity.
    :type confidence_score: float
    """

    _validation = {
        'text': {'required': True},
        'category': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
        'confidence_score': {'required': True},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'subcategory': {'key': 'subcategory', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
    }

    def __init__(self, *, text: str, category: str, offset: int, length: int, confidence_score: float, subcategory: str=None, **kwargs) -> None:
        super(Entity, self).__init__(**kwargs)
        self.text = text
        self.category = category
        self.subcategory = subcategory
        self.offset = offset
        self.length = length
        self.confidence_score = confidence_score


class EntityLinkingResult(Model):
    """EntityLinkingResult.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required. Response by document
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentLinkedEntities]
    :param errors: Required. Errors by document id.
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentError]
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    :param model_version: Required. This field indicates which model is used
     for scoring.
    :type model_version: str
    """

    _validation = {
        'documents': {'required': True},
        'errors': {'required': True},
        'model_version': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[DocumentLinkedEntities]'},
        'errors': {'key': 'errors', 'type': '[DocumentError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(self, *, documents, errors, model_version: str, statistics=None, **kwargs) -> None:
        super(EntityLinkingResult, self).__init__(**kwargs)
        self.documents = documents
        self.errors = errors
        self.statistics = statistics
        self.model_version = model_version


class ErrorResponse(Model):
    """ErrorResponse.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. Document Error.
    :type error:
     ~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'TextAnalyticsError'},
    }

    def __init__(self, *, error, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class HealthcareEntity(Entity):
    """HealthcareEntity.

    All required parameters must be populated in order to send to Azure.

    :param text: Required. Entity text as appears in the request.
    :type text: str
    :param category: Required. Entity type.
    :type category: str
    :param subcategory: (Optional) Entity sub type.
    :type subcategory: str
    :param offset: Required. Start position for the entity text. Use of
     different 'stringIndexType' values can affect the offset returned.
    :type offset: int
    :param length: Required. Length for the entity text. Use of different
     'stringIndexType' values can affect the length returned.
    :type length: int
    :param confidence_score: Required. Confidence score between 0 and 1 of the
     extracted entity.
    :type confidence_score: float
    :param is_negated: Required.
    :type is_negated: bool
    :param links: Entity references in known data sources.
    :type links:
     list[~azure.cognitiveservices.language.textanalytics.models.HealthcareEntityLink]
    """

    _validation = {
        'text': {'required': True},
        'category': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
        'confidence_score': {'required': True},
        'is_negated': {'required': True},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'subcategory': {'key': 'subcategory', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'is_negated': {'key': 'isNegated', 'type': 'bool'},
        'links': {'key': 'links', 'type': '[HealthcareEntityLink]'},
    }

    def __init__(self, *, text: str, category: str, offset: int, length: int, confidence_score: float, is_negated: bool, subcategory: str=None, links=None, **kwargs) -> None:
        super(HealthcareEntity, self).__init__(text=text, category=category, subcategory=subcategory, offset=offset, length=length, confidence_score=confidence_score, **kwargs)
        self.is_negated = is_negated
        self.links = links


class HealthcareEntityLink(Model):
    """HealthcareEntityLink.

    All required parameters must be populated in order to send to Azure.

    :param data_source: Required. Entity Catalog. Examples include: UMLS, CHV,
     MSH, etc.
    :type data_source: str
    :param id: Required. Entity id in the given source catalog.
    :type id: str
    """

    _validation = {
        'data_source': {'required': True},
        'id': {'required': True},
    }

    _attribute_map = {
        'data_source': {'key': 'dataSource', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, *, data_source: str, id: str, **kwargs) -> None:
        super(HealthcareEntityLink, self).__init__(**kwargs)
        self.data_source = data_source
        self.id = id


class HealthcareJobState(Model):
    """HealthcareJobState.

    All required parameters must be populated in order to send to Azure.

    :param created_date_time: Required.
    :type created_date_time: datetime
    :param display_name:
    :type display_name: str
    :param expiration_date_time:
    :type expiration_date_time: datetime
    :param job_id: Required.
    :type job_id: str
    :param last_update_date_time: Required.
    :type last_update_date_time: datetime
    :param status: Required. Possible values include: 'notStarted', 'running',
     'succeeded', 'failed', 'cancelled', 'cancelling', 'partiallyCompleted'
    :type status: str or
     ~azure.cognitiveservices.language.textanalytics.models.State
    :param results:
    :type results:
     ~azure.cognitiveservices.language.textanalytics.models.HealthcareResult
    :param errors:
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsError]
    :param next_link:
    :type next_link: str
    """

    _validation = {
        'created_date_time': {'required': True},
        'job_id': {'required': True},
        'last_update_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'State'},
        'results': {'key': 'results', 'type': 'HealthcareResult'},
        'errors': {'key': 'errors', 'type': '[TextAnalyticsError]'},
        'next_link': {'key': '@nextLink', 'type': 'str'},
    }

    def __init__(self, *, created_date_time, job_id: str, last_update_date_time, status, display_name: str=None, expiration_date_time=None, results=None, errors=None, next_link: str=None, **kwargs) -> None:
        super(HealthcareJobState, self).__init__(**kwargs)
        self.created_date_time = created_date_time
        self.display_name = display_name
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_update_date_time = last_update_date_time
        self.status = status
        self.results = results
        self.errors = errors
        self.next_link = next_link


class HealthcareRelation(Model):
    """HealthcareRelation.

    All required parameters must be populated in order to send to Azure.

    :param relation_type: Required. Type of relation. Examples include:
     `DosageOfMedication` or 'FrequencyOfMedication', etc.
    :type relation_type: str
    :param bidirectional: Required. If true the relation between the entities
     is bidirectional, otherwise directionality is source to target.
    :type bidirectional: bool
    :param source: Required. Reference link to the source entity.
    :type source: str
    :param target: Required. Reference link to the target entity.
    :type target: str
    """

    _validation = {
        'relation_type': {'required': True},
        'bidirectional': {'required': True},
        'source': {'required': True},
        'target': {'required': True},
    }

    _attribute_map = {
        'relation_type': {'key': 'relationType', 'type': 'str'},
        'bidirectional': {'key': 'bidirectional', 'type': 'bool'},
        'source': {'key': 'source', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, *, relation_type: str, bidirectional: bool, source: str, target: str, **kwargs) -> None:
        super(HealthcareRelation, self).__init__(**kwargs)
        self.relation_type = relation_type
        self.bidirectional = bidirectional
        self.source = source
        self.target = target


class HealthcareResult(Model):
    """HealthcareResult.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required. Response by document
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentHealthcareEntities]
    :param errors: Required. Errors by document id.
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentError]
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    :param model_version: Required. This field indicates which model is used
     for scoring.
    :type model_version: str
    """

    _validation = {
        'documents': {'required': True},
        'errors': {'required': True},
        'model_version': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[DocumentHealthcareEntities]'},
        'errors': {'key': 'errors', 'type': '[DocumentError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(self, *, documents, errors, model_version: str, statistics=None, **kwargs) -> None:
        super(HealthcareResult, self).__init__(**kwargs)
        self.documents = documents
        self.errors = errors
        self.statistics = statistics
        self.model_version = model_version


class InnerError(Model):
    """InnerError.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Error code. Possible values include:
     'InvalidParameterValue', 'InvalidRequestBodyFormat', 'EmptyRequest',
     'MissingInputRecords', 'InvalidDocument', 'ModelVersionIncorrect',
     'InvalidDocumentBatch', 'UnsupportedLanguageCode', 'InvalidCountryHint'
    :type code: str or
     ~azure.cognitiveservices.language.textanalytics.models.InnerErrorCodeValue
    :param message: Required. Error message.
    :type message: str
    :param details: Error details.
    :type details: dict[str, str]
    :param target: Error target.
    :type target: str
    :param innererror: Inner error contains more specific information.
    :type innererror:
     ~azure.cognitiveservices.language.textanalytics.models.InnerError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '{str}'},
        'target': {'key': 'target', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
    }

    def __init__(self, *, code, message: str, details=None, target: str=None, innererror=None, **kwargs) -> None:
        super(InnerError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details
        self.target = target
        self.innererror = innererror


class JobDescriptor(Model):
    """JobDescriptor.

    :param display_name: Optional display name for the analysis job.
    :type display_name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(self, *, display_name: str=None, **kwargs) -> None:
        super(JobDescriptor, self).__init__(**kwargs)
        self.display_name = display_name


class JobManifest(Model):
    """JobManifest.

    All required parameters must be populated in order to send to Azure.

    :param tasks: Required. The set of tasks to execute on the input
     documents. Cannot specify the same task more than once.
    :type tasks:
     ~azure.cognitiveservices.language.textanalytics.models.JobManifestTasks
    """

    _validation = {
        'tasks': {'required': True},
    }

    _attribute_map = {
        'tasks': {'key': 'tasks', 'type': 'JobManifestTasks'},
    }

    def __init__(self, *, tasks, **kwargs) -> None:
        super(JobManifest, self).__init__(**kwargs)
        self.tasks = tasks


class JobManifestTasks(Model):
    """The set of tasks to execute on the input documents. Cannot specify the same
    task more than once.

    :param entity_recognition_tasks:
    :type entity_recognition_tasks:
     list[~azure.cognitiveservices.language.textanalytics.models.EntitiesTask]
    :param entity_recognition_pii_tasks:
    :type entity_recognition_pii_tasks:
     list[~azure.cognitiveservices.language.textanalytics.models.PiiTask]
    :param key_phrase_extraction_tasks:
    :type key_phrase_extraction_tasks:
     list[~azure.cognitiveservices.language.textanalytics.models.KeyPhrasesTask]
    """

    _attribute_map = {
        'entity_recognition_tasks': {'key': 'entityRecognitionTasks', 'type': '[EntitiesTask]'},
        'entity_recognition_pii_tasks': {'key': 'entityRecognitionPiiTasks', 'type': '[PiiTask]'},
        'key_phrase_extraction_tasks': {'key': 'keyPhraseExtractionTasks', 'type': '[KeyPhrasesTask]'},
    }

    def __init__(self, *, entity_recognition_tasks=None, entity_recognition_pii_tasks=None, key_phrase_extraction_tasks=None, **kwargs) -> None:
        super(JobManifestTasks, self).__init__(**kwargs)
        self.entity_recognition_tasks = entity_recognition_tasks
        self.entity_recognition_pii_tasks = entity_recognition_pii_tasks
        self.key_phrase_extraction_tasks = key_phrase_extraction_tasks


class JobMetadata(Model):
    """JobMetadata.

    All required parameters must be populated in order to send to Azure.

    :param created_date_time: Required.
    :type created_date_time: datetime
    :param display_name:
    :type display_name: str
    :param expiration_date_time:
    :type expiration_date_time: datetime
    :param job_id: Required.
    :type job_id: str
    :param last_update_date_time: Required.
    :type last_update_date_time: datetime
    :param status: Required. Possible values include: 'notStarted', 'running',
     'succeeded', 'failed', 'cancelled', 'cancelling', 'partiallyCompleted'
    :type status: str or
     ~azure.cognitiveservices.language.textanalytics.models.State
    """

    _validation = {
        'created_date_time': {'required': True},
        'job_id': {'required': True},
        'last_update_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'State'},
    }

    def __init__(self, *, created_date_time, job_id: str, last_update_date_time, status, display_name: str=None, expiration_date_time=None, **kwargs) -> None:
        super(JobMetadata, self).__init__(**kwargs)
        self.created_date_time = created_date_time
        self.display_name = display_name
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_update_date_time = last_update_date_time
        self.status = status


class KeyPhraseResult(Model):
    """KeyPhraseResult.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required. Response by document
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentKeyPhrases]
    :param errors: Required. Errors by document id.
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentError]
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    :param model_version: Required. This field indicates which model is used
     for scoring.
    :type model_version: str
    """

    _validation = {
        'documents': {'required': True},
        'errors': {'required': True},
        'model_version': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[DocumentKeyPhrases]'},
        'errors': {'key': 'errors', 'type': '[DocumentError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(self, *, documents, errors, model_version: str, statistics=None, **kwargs) -> None:
        super(KeyPhraseResult, self).__init__(**kwargs)
        self.documents = documents
        self.errors = errors
        self.statistics = statistics
        self.model_version = model_version


class KeyPhrasesTask(Model):
    """KeyPhrasesTask.

    :param parameters:
    :type parameters:
     ~azure.cognitiveservices.language.textanalytics.models.KeyPhrasesTaskParameters
    """

    _attribute_map = {
        'parameters': {'key': 'parameters', 'type': 'KeyPhrasesTaskParameters'},
    }

    def __init__(self, *, parameters=None, **kwargs) -> None:
        super(KeyPhrasesTask, self).__init__(**kwargs)
        self.parameters = parameters


class KeyPhrasesTaskParameters(Model):
    """KeyPhrasesTaskParameters.

    :param model_version:  Default value: "latest" .
    :type model_version: str
    """

    _attribute_map = {
        'model_version': {'key': 'model-version', 'type': 'str'},
    }

    def __init__(self, *, model_version: str="latest", **kwargs) -> None:
        super(KeyPhrasesTaskParameters, self).__init__(**kwargs)
        self.model_version = model_version


class LanguageBatchInput(Model):
    """LanguageBatchInput.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required.
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.LanguageInput]
    """

    _validation = {
        'documents': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[LanguageInput]'},
    }

    def __init__(self, *, documents, **kwargs) -> None:
        super(LanguageBatchInput, self).__init__(**kwargs)
        self.documents = documents


class LanguageInput(Model):
    """LanguageInput.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique, non-empty document identifier.
    :type id: str
    :param text: Required.
    :type text: str
    :param country_hint:
    :type country_hint: str
    """

    _validation = {
        'id': {'required': True},
        'text': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
        'country_hint': {'key': 'countryHint', 'type': 'str'},
    }

    def __init__(self, *, id: str, text: str, country_hint: str=None, **kwargs) -> None:
        super(LanguageInput, self).__init__(**kwargs)
        self.id = id
        self.text = text
        self.country_hint = country_hint


class LanguageResult(Model):
    """LanguageResult.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required. Response by document
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentLanguage]
    :param errors: Required. Errors by document id.
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentError]
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    :param model_version: Required. This field indicates which model is used
     for scoring.
    :type model_version: str
    """

    _validation = {
        'documents': {'required': True},
        'errors': {'required': True},
        'model_version': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[DocumentLanguage]'},
        'errors': {'key': 'errors', 'type': '[DocumentError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(self, *, documents, errors, model_version: str, statistics=None, **kwargs) -> None:
        super(LanguageResult, self).__init__(**kwargs)
        self.documents = documents
        self.errors = errors
        self.statistics = statistics
        self.model_version = model_version


class LinkedEntity(Model):
    """LinkedEntity.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Entity Linking formal name.
    :type name: str
    :param matches: Required. List of instances this entity appears in the
     text.
    :type matches:
     list[~azure.cognitiveservices.language.textanalytics.models.Match]
    :param language: Required. Language used in the data source.
    :type language: str
    :param id: Unique identifier of the recognized entity from the data
     source.
    :type id: str
    :param url: Required. URL for the entity's page from the data source.
    :type url: str
    :param data_source: Required. Data source used to extract entity linking,
     such as Wiki/Bing etc.
    :type data_source: str
    :param bing_id: Bing Entity Search API unique identifier of the recognized
     entity.
    :type bing_id: str
    """

    _validation = {
        'name': {'required': True},
        'matches': {'required': True},
        'language': {'required': True},
        'url': {'required': True},
        'data_source': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'matches': {'key': 'matches', 'type': '[Match]'},
        'language': {'key': 'language', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'data_source': {'key': 'dataSource', 'type': 'str'},
        'bing_id': {'key': 'bingId', 'type': 'str'},
    }

    def __init__(self, *, name: str, matches, language: str, url: str, data_source: str, id: str=None, bing_id: str=None, **kwargs) -> None:
        super(LinkedEntity, self).__init__(**kwargs)
        self.name = name
        self.matches = matches
        self.language = language
        self.id = id
        self.url = url
        self.data_source = data_source
        self.bing_id = bing_id


class Match(Model):
    """Match.

    All required parameters must be populated in order to send to Azure.

    :param confidence_score: Required. If a well-known item is recognized, a
     decimal number denoting the confidence level between 0 and 1 will be
     returned.
    :type confidence_score: float
    :param text: Required. Entity text as appears in the request.
    :type text: str
    :param offset: Required. Start position for the entity match text.
    :type offset: int
    :param length: Required. Length for the entity match text.
    :type length: int
    """

    _validation = {
        'confidence_score': {'required': True},
        'text': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
    }

    _attribute_map = {
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'text': {'key': 'text', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
    }

    def __init__(self, *, confidence_score: float, text: str, offset: int, length: int, **kwargs) -> None:
        super(Match, self).__init__(**kwargs)
        self.confidence_score = confidence_score
        self.text = text
        self.offset = offset
        self.length = length


class MultiLanguageBatchInput(Model):
    """Contains a set of input documents to be analyzed by the service.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required. The set of documents to process as part of
     this batch.
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.MultiLanguageInput]
    """

    _validation = {
        'documents': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[MultiLanguageInput]'},
    }

    def __init__(self, *, documents, **kwargs) -> None:
        super(MultiLanguageBatchInput, self).__init__(**kwargs)
        self.documents = documents


class MultiLanguageInput(Model):
    """Contains an input document to be analyzed by the service.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. A unique, non-empty document identifier.
    :type id: str
    :param text: Required. The input text to process.
    :type text: str
    :param language: (Optional) This is the 2 letter ISO 639-1 representation
     of a language. For example, use "en" for English; "es" for Spanish etc. If
     not set, use "en" for English as default.
    :type language: str
    """

    _validation = {
        'id': {'required': True},
        'text': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
    }

    def __init__(self, *, id: str, text: str, language: str=None, **kwargs) -> None:
        super(MultiLanguageInput, self).__init__(**kwargs)
        self.id = id
        self.text = text
        self.language = language


class Pagination(Model):
    """Pagination.

    :param next_link:
    :type next_link: str
    """

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
    }

    def __init__(self, *, next_link: str=None, **kwargs) -> None:
        super(Pagination, self).__init__(**kwargs)
        self.next_link = next_link


class PiiDocumentEntities(Model):
    """PiiDocumentEntities.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique, non-empty document identifier.
    :type id: str
    :param redacted_text: Required. Returns redacted text.
    :type redacted_text: str
    :param entities: Required. Recognized entities in the document.
    :type entities:
     list[~azure.cognitiveservices.language.textanalytics.models.Entity]
    :param warnings: Required. Warnings encountered while processing document.
    :type warnings:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsWarning]
    :param statistics: if showStats=true was specified in the request this
     field will contain information about the document payload.
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.DocumentStatistics
    """

    _validation = {
        'id': {'required': True},
        'redacted_text': {'required': True},
        'entities': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'redacted_text': {'key': 'redactedText', 'type': 'str'},
        'entities': {'key': 'entities', 'type': '[Entity]'},
        'warnings': {'key': 'warnings', 'type': '[TextAnalyticsWarning]'},
        'statistics': {'key': 'statistics', 'type': 'DocumentStatistics'},
    }

    def __init__(self, *, id: str, redacted_text: str, entities, warnings, statistics=None, **kwargs) -> None:
        super(PiiDocumentEntities, self).__init__(**kwargs)
        self.id = id
        self.redacted_text = redacted_text
        self.entities = entities
        self.warnings = warnings
        self.statistics = statistics


class PiiResult(Model):
    """PiiResult.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required. Response by document
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.PiiDocumentEntities]
    :param errors: Required. Errors by document id.
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentError]
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    :param model_version: Required. This field indicates which model is used
     for scoring.
    :type model_version: str
    """

    _validation = {
        'documents': {'required': True},
        'errors': {'required': True},
        'model_version': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[PiiDocumentEntities]'},
        'errors': {'key': 'errors', 'type': '[DocumentError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(self, *, documents, errors, model_version: str, statistics=None, **kwargs) -> None:
        super(PiiResult, self).__init__(**kwargs)
        self.documents = documents
        self.errors = errors
        self.statistics = statistics
        self.model_version = model_version


class PiiTask(Model):
    """PiiTask.

    :param parameters:
    :type parameters:
     ~azure.cognitiveservices.language.textanalytics.models.PiiTaskParameters
    """

    _attribute_map = {
        'parameters': {'key': 'parameters', 'type': 'PiiTaskParameters'},
    }

    def __init__(self, *, parameters=None, **kwargs) -> None:
        super(PiiTask, self).__init__(**kwargs)
        self.parameters = parameters


class PiiTaskParameters(Model):
    """PiiTaskParameters.

    :param domain: Possible values include: 'phi', 'none'. Default value:
     "none" .
    :type domain: str or
     ~azure.cognitiveservices.language.textanalytics.models.enum
    :param model_version:  Default value: "latest" .
    :type model_version: str
    :param string_index_type: Possible values include: 'TextElements_v8',
     'UnicodeCodePoint', 'Utf16CodeUnit'. Default value: "TextElements_v8" .
    :type string_index_type: str or
     ~azure.cognitiveservices.language.textanalytics.models.StringIndexTypeResponse
    """

    _attribute_map = {
        'domain': {'key': 'domain', 'type': 'str'},
        'model_version': {'key': 'model-version', 'type': 'str'},
        'string_index_type': {'key': 'stringIndexType', 'type': 'StringIndexTypeResponse'},
    }

    def __init__(self, *, domain="none", model_version: str="latest", string_index_type="TextElements_v8", **kwargs) -> None:
        super(PiiTaskParameters, self).__init__(**kwargs)
        self.domain = domain
        self.model_version = model_version
        self.string_index_type = string_index_type


class RequestStatistics(Model):
    """if showStats=true was specified in the request this field will contain
    information about the request payload.

    All required parameters must be populated in order to send to Azure.

    :param documents_count: Required. Number of documents submitted in the
     request.
    :type documents_count: int
    :param valid_documents_count: Required. Number of valid documents. This
     excludes empty, over-size limit or non-supported languages documents.
    :type valid_documents_count: int
    :param erroneous_documents_count: Required. Number of invalid documents.
     This includes empty, over-size limit or non-supported languages documents.
    :type erroneous_documents_count: int
    :param transactions_count: Required. Number of transactions for the
     request.
    :type transactions_count: long
    """

    _validation = {
        'documents_count': {'required': True},
        'valid_documents_count': {'required': True},
        'erroneous_documents_count': {'required': True},
        'transactions_count': {'required': True},
    }

    _attribute_map = {
        'documents_count': {'key': 'documentsCount', 'type': 'int'},
        'valid_documents_count': {'key': 'validDocumentsCount', 'type': 'int'},
        'erroneous_documents_count': {'key': 'erroneousDocumentsCount', 'type': 'int'},
        'transactions_count': {'key': 'transactionsCount', 'type': 'long'},
    }

    def __init__(self, *, documents_count: int, valid_documents_count: int, erroneous_documents_count: int, transactions_count: int, **kwargs) -> None:
        super(RequestStatistics, self).__init__(**kwargs)
        self.documents_count = documents_count
        self.valid_documents_count = valid_documents_count
        self.erroneous_documents_count = erroneous_documents_count
        self.transactions_count = transactions_count


class SentenceAspect(Model):
    """SentenceAspect.

    All required parameters must be populated in order to send to Azure.

    :param sentiment: Required. Aspect level sentiment for the aspect in the
     sentence. Possible values include: 'positive', 'mixed', 'negative'
    :type sentiment: str or
     ~azure.cognitiveservices.language.textanalytics.models.TokenSentimentValue
    :param confidence_scores: Required. Aspect level sentiment confidence
     scores for the aspect in the sentence.
    :type confidence_scores:
     ~azure.cognitiveservices.language.textanalytics.models.AspectConfidenceScoreLabel
    :param offset: Required. The aspect offset from the start of the sentence.
    :type offset: int
    :param length: Required. The length of the aspect.
    :type length: int
    :param text: Required. The aspect text detected.
    :type text: str
    :param relations: Required. The array of either opinion or aspect object
     which is related to the aspect.
    :type relations:
     list[~azure.cognitiveservices.language.textanalytics.models.AspectRelation]
    """

    _validation = {
        'sentiment': {'required': True},
        'confidence_scores': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
        'text': {'required': True},
        'relations': {'required': True},
    }

    _attribute_map = {
        'sentiment': {'key': 'sentiment', 'type': 'TokenSentimentValue'},
        'confidence_scores': {'key': 'confidenceScores', 'type': 'AspectConfidenceScoreLabel'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'text': {'key': 'text', 'type': 'str'},
        'relations': {'key': 'relations', 'type': '[AspectRelation]'},
    }

    def __init__(self, *, sentiment, confidence_scores, offset: int, length: int, text: str, relations, **kwargs) -> None:
        super(SentenceAspect, self).__init__(**kwargs)
        self.sentiment = sentiment
        self.confidence_scores = confidence_scores
        self.offset = offset
        self.length = length
        self.text = text
        self.relations = relations


class SentenceOpinion(Model):
    """SentenceOpinion.

    All required parameters must be populated in order to send to Azure.

    :param sentiment: Required. Opinion level sentiment for the aspect in the
     sentence. Possible values include: 'positive', 'mixed', 'negative'
    :type sentiment: str or
     ~azure.cognitiveservices.language.textanalytics.models.TokenSentimentValue
    :param confidence_scores: Required. Opinion level sentiment confidence
     scores for the aspect in the sentence.
    :type confidence_scores:
     ~azure.cognitiveservices.language.textanalytics.models.AspectConfidenceScoreLabel
    :param offset: Required. The opinion offset from the start of the
     sentence.
    :type offset: int
    :param length: Required. The length of the opinion.
    :type length: int
    :param text: Required. The aspect text detected.
    :type text: str
    :param is_negated: Required. The indicator representing if the opinion is
     negated.
    :type is_negated: bool
    """

    _validation = {
        'sentiment': {'required': True},
        'confidence_scores': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
        'text': {'required': True},
        'is_negated': {'required': True},
    }

    _attribute_map = {
        'sentiment': {'key': 'sentiment', 'type': 'TokenSentimentValue'},
        'confidence_scores': {'key': 'confidenceScores', 'type': 'AspectConfidenceScoreLabel'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'text': {'key': 'text', 'type': 'str'},
        'is_negated': {'key': 'isNegated', 'type': 'bool'},
    }

    def __init__(self, *, sentiment, confidence_scores, offset: int, length: int, text: str, is_negated: bool, **kwargs) -> None:
        super(SentenceOpinion, self).__init__(**kwargs)
        self.sentiment = sentiment
        self.confidence_scores = confidence_scores
        self.offset = offset
        self.length = length
        self.text = text
        self.is_negated = is_negated


class SentenceSentiment(Model):
    """SentenceSentiment.

    All required parameters must be populated in order to send to Azure.

    :param text: Required. The sentence text.
    :type text: str
    :param sentiment: Required. The predicted Sentiment for the sentence.
     Possible values include: 'positive', 'neutral', 'negative'
    :type sentiment: str or
     ~azure.cognitiveservices.language.textanalytics.models.SentenceSentimentValue
    :param confidence_scores: Required. The sentiment confidence score between
     0 and 1 for the sentence for all classes.
    :type confidence_scores:
     ~azure.cognitiveservices.language.textanalytics.models.SentimentConfidenceScorePerLabel
    :param offset: Required. The sentence offset from the start of the
     document.
    :type offset: int
    :param length: Required. The length of the sentence.
    :type length: int
    :param aspects: The array of aspect object for the sentence.
    :type aspects:
     list[~azure.cognitiveservices.language.textanalytics.models.SentenceAspect]
    :param opinions: The array of opinion object for the sentence.
    :type opinions:
     list[~azure.cognitiveservices.language.textanalytics.models.SentenceOpinion]
    """

    _validation = {
        'text': {'required': True},
        'sentiment': {'required': True},
        'confidence_scores': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'sentiment': {'key': 'sentiment', 'type': 'SentenceSentimentValue'},
        'confidence_scores': {'key': 'confidenceScores', 'type': 'SentimentConfidenceScorePerLabel'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'aspects': {'key': 'aspects', 'type': '[SentenceAspect]'},
        'opinions': {'key': 'opinions', 'type': '[SentenceOpinion]'},
    }

    def __init__(self, *, text: str, sentiment, confidence_scores, offset: int, length: int, aspects=None, opinions=None, **kwargs) -> None:
        super(SentenceSentiment, self).__init__(**kwargs)
        self.text = text
        self.sentiment = sentiment
        self.confidence_scores = confidence_scores
        self.offset = offset
        self.length = length
        self.aspects = aspects
        self.opinions = opinions


class SentimentConfidenceScorePerLabel(Model):
    """Represents the confidence scores between 0 and 1 across all sentiment
    classes: positive, neutral, negative.

    All required parameters must be populated in order to send to Azure.

    :param positive: Required.
    :type positive: float
    :param neutral: Required.
    :type neutral: float
    :param negative: Required.
    :type negative: float
    """

    _validation = {
        'positive': {'required': True},
        'neutral': {'required': True},
        'negative': {'required': True},
    }

    _attribute_map = {
        'positive': {'key': 'positive', 'type': 'float'},
        'neutral': {'key': 'neutral', 'type': 'float'},
        'negative': {'key': 'negative', 'type': 'float'},
    }

    def __init__(self, *, positive: float, neutral: float, negative: float, **kwargs) -> None:
        super(SentimentConfidenceScorePerLabel, self).__init__(**kwargs)
        self.positive = positive
        self.neutral = neutral
        self.negative = negative


class SentimentResponse(Model):
    """SentimentResponse.

    All required parameters must be populated in order to send to Azure.

    :param documents: Required. Sentiment analysis per document.
    :type documents:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentSentiment]
    :param errors: Required. Errors by document id.
    :type errors:
     list[~azure.cognitiveservices.language.textanalytics.models.DocumentError]
    :param statistics:
    :type statistics:
     ~azure.cognitiveservices.language.textanalytics.models.RequestStatistics
    :param model_version: Required. This field indicates which model is used
     for scoring.
    :type model_version: str
    """

    _validation = {
        'documents': {'required': True},
        'errors': {'required': True},
        'model_version': {'required': True},
    }

    _attribute_map = {
        'documents': {'key': 'documents', 'type': '[DocumentSentiment]'},
        'errors': {'key': 'errors', 'type': '[DocumentError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(self, *, documents, errors, model_version: str, statistics=None, **kwargs) -> None:
        super(SentimentResponse, self).__init__(**kwargs)
        self.documents = documents
        self.errors = errors
        self.statistics = statistics
        self.model_version = model_version


class TasksState(Model):
    """TasksState.

    All required parameters must be populated in order to send to Azure.

    :param tasks: Required.
    :type tasks:
     ~azure.cognitiveservices.language.textanalytics.models.AnalyzeJobStateTasks
    """

    _validation = {
        'tasks': {'required': True},
    }

    _attribute_map = {
        'tasks': {'key': 'tasks', 'type': 'AnalyzeJobStateTasks'},
    }

    def __init__(self, *, tasks, **kwargs) -> None:
        super(TasksState, self).__init__(**kwargs)
        self.tasks = tasks


class TextAnalyticsError(Model):
    """TextAnalyticsError.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Error code. Possible values include:
     'InvalidRequest', 'InvalidArgument', 'InternalServerError',
     'ServiceUnavailable', 'NotFound'
    :type code: str or
     ~azure.cognitiveservices.language.textanalytics.models.ErrorCodeValue
    :param message: Required. Error message.
    :type message: str
    :param target: Error target.
    :type target: str
    :param innererror: Inner error contains more specific information.
    :type innererror:
     ~azure.cognitiveservices.language.textanalytics.models.InnerError
    :param details: Details about specific errors that led to this reported
     error.
    :type details:
     list[~azure.cognitiveservices.language.textanalytics.models.TextAnalyticsError]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'ErrorCodeValue'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
        'details': {'key': 'details', 'type': '[TextAnalyticsError]'},
    }

    def __init__(self, *, code, message: str, target: str=None, innererror=None, details=None, **kwargs) -> None:
        super(TextAnalyticsError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.innererror = innererror
        self.details = details


class TextAnalyticsWarning(Model):
    """TextAnalyticsWarning.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. Error code. Possible values include:
     'LongWordsInDocument', 'DocumentTruncated'
    :type code: str or
     ~azure.cognitiveservices.language.textanalytics.models.WarningCodeValue
    :param message: Required. Warning message.
    :type message: str
    :param target_ref: A JSON pointer reference indicating the target object.
    :type target_ref: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target_ref': {'key': 'targetRef', 'type': 'str'},
    }

    def __init__(self, *, code, message: str, target_ref: str=None, **kwargs) -> None:
        super(TextAnalyticsWarning, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target_ref = target_ref
