# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
from typing import Any, Callable, Optional, TypeVar, Union, overload

from azure.core import PipelineClient
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._configuration import TranscriptionClientConfiguration
from .._utils.model_base import Model as _Model, _deserialize
from .._utils.serialization import Serializer
from .._utils.utils import ClientMixinABC, prepare_multipart_form_data

JSON = MutableMapping[str, Any]
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_transcription_transcribe_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-10-15"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/transcriptions:transcribe"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class _TranscriptionClientOperationsMixin(
    ClientMixinABC[PipelineClient[HttpRequest, HttpResponse], TranscriptionClientConfiguration]
):

    @overload
    def transcribe(self, body: _models.TranscribeRequestContent, **kwargs: Any) -> _models.TranscriptionResult:
        """Transcribes the provided audio stream.

        :param body: The body of the multipart request. Required.
        :type body: ~azure.ai.speech.transcription.models.TranscribeRequestContent
        :return: TranscriptionResult. The TranscriptionResult is compatible with MutableMapping
        :rtype: ~azure.ai.speech.transcription.models.TranscriptionResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def transcribe(self, body: JSON, **kwargs: Any) -> _models.TranscriptionResult:
        """Transcribes the provided audio stream.

        :param body: The body of the multipart request. Required.
        :type body: JSON
        :return: TranscriptionResult. The TranscriptionResult is compatible with MutableMapping
        :rtype: ~azure.ai.speech.transcription.models.TranscriptionResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def transcribe(
        self, body: Union[_models.TranscribeRequestContent, JSON], **kwargs: Any
    ) -> _models.TranscriptionResult:
        """Transcribes the provided audio stream.

        :param body: The body of the multipart request. Is either a TranscribeRequestContent type or a
         JSON type. Required.
        :type body: ~azure.ai.speech.transcription.models.TranscribeRequestContent or JSON
        :return: TranscriptionResult. The TranscriptionResult is compatible with MutableMapping
        :rtype: ~azure.ai.speech.transcription.models.TranscriptionResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.TranscriptionResult] = kwargs.pop("cls", None)

        _body = body.as_dict() if isinstance(body, _Model) else body
        _file_fields: list[str] = ["audio"]
        _data_fields: list[str] = ["options"]
        _files, _data = prepare_multipart_form_data(_body, _file_fields, _data_fields)

        _request = build_transcription_transcribe_request(
            api_version=self._config.api_version,
            files=_files,
            data=_data,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.TranscriptionResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
