# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class NewsOperations(object):
    """NewsOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar x_bing_apis_sdk: Activate swagger compliance. Constant value: "true".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config
        self.x_bing_apis_sdk = "true"

    def search(
            self, query, accept_language=None, user_agent=None, client_id=None, client_ip=None, location=None, country_code=None, count=None, freshness=None, market=None, offset=None, original_image=None, safe_search=None, set_lang=None, sort_by=None, text_decorations=None, text_format=None, custom_headers=None, raw=False, **operation_config):
        """The News Search API lets you send a search query to Bing and get back a
        list of news that are relevant to the search query. This section
        provides technical details about the query parameters and headers that
        you use to request news and the JSON response objects that contain
        them.  For examples that show how to make requests, see [Searching the
        web for
        news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).

        :param query: The user's search query string. The query string cannot
         be empty. The query string may contain [Bing Advanced
         Operators](http://msdn.microsoft.com/library/ff795620.aspx). For
         example, to limit news to a specific domain, use the
         [site:](http://msdn.microsoft.com/library/ff795613.aspx) operator. Use
         this parameter only with the News Search API. Do not specify this
         parameter when calling the Trending Topics API or News Category API.
        :type query: str
        :param accept_language: A comma-delimited list of one or more
         languages to use for user interface strings. The list is in decreasing
         order of preference. For additional information, including expected
         format, see
         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
         This header and the
         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#setlang)
         query parameter are mutually exclusive; do not specify both. If you
         set this header, you must also specify the
         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#cc)
         query parameter. To determine the market to return results for, Bing
         uses the first supported language it finds from the list and combines
         it with the cc parameter value. If the list does not include a
         supported language, Bing finds the closest language and market that
         supports the request or it uses an aggregated or default market for
         the results. To determine the market that Bing used, see the
         BingAPIs-Market header. Use this header and the cc query parameter
         only if you specify multiple languages. Otherwise, use the
         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#mkt)
         and
         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#setlang)
         query parameters. A user interface string is a string that's used as a
         label in a user interface. There are few user interface strings in the
         JSON response objects. Any links to Bing.com properties in the
         response objects apply the specified language.
        :type accept_language: str
        :param user_agent: The user agent originating the request. Bing uses
         the user agent to provide mobile users with an optimized experience.
         Although optional, you are encouraged to always specify this header.
         The user-agent should be the same string that any commonly used
         browser sends. For information about user agents, see [RFC
         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The
         following are examples of user-agent strings. Windows Phone:
         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;
         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0
         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)
         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /
         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)
         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1
         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;
         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0
         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like
         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53
        :type user_agent: str
        :param client_id: Bing uses this header to provide users with
         consistent behavior across Bing API calls. Bing often flights new
         features and improvements, and it uses the client ID as a key for
         assigning traffic on different flights. If you do not use the same
         client ID for a user across multiple requests, then Bing may assign
         the user to multiple conflicting flights. Being assigned to multiple
         conflicting flights can lead to an inconsistent user experience. For
         example, if the second request has a different flight assignment than
         the first, the experience may be unexpected. Also, Bing can use the
         client ID to tailor web results to that client IDâ€™s search history,
         providing a richer experience for the user. Bing also uses this header
         to help improve result rankings by analyzing the activity generated by
         a client ID. The relevance improvements help with better quality of
         results delivered by Bing APIs and in turn enables higher
         click-through rates for the API consumer. IMPORTANT: Although
         optional, you should consider this header required. Persisting the
         client ID across multiple requests for the same end user and device
         combination enables 1) the API consumer to receive a consistent user
         experience, and 2) higher click-through rates via better quality of
         results from the Bing APIs. Each user that uses your application on
         the device must have a unique, Bing generated client ID. If you do not
         include this header in the request, Bing generates an ID and returns
         it in the X-MSEdge-ClientID response header. The only time that you
         should NOT include this header in a request is the first time the user
         uses your app on that device. Use the client ID for each Bing API
         request that your app makes for this user on the device. Persist the
         client ID. To persist the ID in a browser app, use a persistent HTTP
         cookie to ensure the ID is used across all sessions. Do not use a
         session cookie. For other apps such as mobile apps, use the device's
         persistent storage to persist the ID. The next time the user uses your
         app on that device, get the client ID that you persisted. Bing
         responses may or may not include this header. If the response includes
         this header, capture the client ID and use it for all subsequent Bing
         requests for the user on that device. If you include the
         X-MSEdge-ClientID, you must not include cookies in the request.
        :type client_id: str
        :param client_ip: The IPv4 or IPv6 address of the client device. The
         IP address is used to discover the user's location. Bing uses the
         location information to determine safe search behavior. Although
         optional, you are encouraged to always specify this header and the
         X-Search-Location header. Do not obfuscate the address (for example,
         by changing the last octet to 0). Obfuscating the address results in
         the location not being anywhere near the device's actual location,
         which may result in Bing serving erroneous results.
        :type client_ip: str
        :param location: A semicolon-delimited list of key/value pairs that
         describe the client's geographical location. Bing uses the location
         information to determine safe search behavior and to return relevant
         local content. Specify the key/value pair as <key>:<value>. The
         following are the keys that you use to specify the user's location.
         lat (required): The latitude of the client's location, in degrees. The
         latitude must be greater than or equal to -90.0 and less than or equal
         to +90.0. Negative values indicate southern latitudes and positive
         values indicate northern latitudes. long (required): The longitude of
         the client's location, in degrees. The longitude must be greater than
         or equal to -180.0 and less than or equal to +180.0. Negative values
         indicate western longitudes and positive values indicate eastern
         longitudes. re (required): The radius, in meters, which specifies the
         horizontal accuracy of the coordinates. Pass the value returned by the
         device's location service. Typical values might be 22m for GPS/Wi-Fi,
         380m for cell tower triangulation, and 18,000m for reverse IP lookup.
         ts (optional): The UTC UNIX timestamp of when the client was at the
         location. (The UNIX timestamp is the number of seconds since January
         1, 1970.) head (optional): The client's relative heading or direction
         of travel. Specify the direction of travel as degrees from 0 through
         360, counting clockwise relative to true north. Specify this key only
         if the sp key is nonzero. sp (optional): The horizontal velocity
         (speed), in meters per second, that the client device is traveling.
         alt (optional): The altitude of the client device, in meters. are
         (optional): The radius, in meters, that specifies the vertical
         accuracy of the coordinates. Specify this key only if you specify the
         alt key. Although many of the keys are optional, the more information
         that you provide, the more accurate the location results are. Although
         optional, you are encouraged to always specify the user's geographical
         location. Providing the location is especially important if the
         client's IP address does not accurately reflect the user's physical
         location (for example, if the client uses VPN). For optimal results,
         you should include this header and the X-MSEdge-ClientIP header, but
         at a minimum, you should include this header.
        :type location: str
        :param country_code: A 2-character country code of the country where
         the results come from. This API supports only the United States
         market. If you specify this query parameter, it must be set to us. If
         you set this parameter, you must also specify the Accept-Language
         header. Bing uses the first supported language it finds from the
         languages list, and combine that language with the country code that
         you specify to determine the market to return results for. If the
         languages list does not include a supported language, Bing finds the
         closest language and market that supports the request, or it may use
         an aggregated or default market for the results instead of a specified
         one. You should use this query parameter and the Accept-Language query
         parameter only if you specify multiple languages; otherwise, you
         should use the mkt and setLang query parameters. This parameter and
         the mkt query parameter are mutually exclusiveâ€”do not specify both.
        :type country_code: str
        :param count: The number of news articles to return in the response.
         The actual number delivered may be less than requested. The default is
         10 and the maximum value is 100. The actual number delivered may be
         less than requested.You may use this parameter along with the offset
         parameter to page results. For example, if your user interface
         displays 20 articles per page, set count to 20 and offset to 0 to get
         the first page of results. For each subsequent page, increment offset
         by 20 (for example, 0, 20, 40). It is possible for multiple pages to
         include some overlap in results.
        :type count: int
        :param freshness: Filter news by the date and time that Bing
         discovered the news. The following are the possible filter values.
         Day: Return news discovered within the last 24 hours. Week: Return
         news discovered within the last 7 days. Month: Return news discovered
         within the last 30 days. Use this parameter only with the News Search
         API. Do not specify this parameter when calling the News Category API
         or the Trending Topics API. Possible values include: 'Day', 'Week',
         'Month'
        :type freshness: str or
         ~azure.cognitiveservices.search.newssearch.models.Freshness
        :param market: The market where the results come from. Typically, mkt
         is the country where the user is making the request from. However, it
         could be a different country if the user is not located in a country
         where Bing delivers results. The market must be in the form <language
         code>-<country code>. For example, en-US. The string is case
         insensitive. For a list of possible market values, see [Market
         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes).
         NOTE: If known, you are encouraged to always specify the market.
         Specifying the market helps Bing route the request and return an
         appropriate and optimal response. If you specify a market that is not
         listed in [Market
         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes),
         Bing uses a best fit market code based on an internal mapping that is
         subject to change. This parameter and the
         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#cc)
         query parameter are mutually exclusiveâ€”do not specify both.
        :type market: str
        :param offset: The zero-based offset that indicates the number of news
         to skip before returning news. The default is 0. The offset should be
         less than
         ([totalEstimatedMatches](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#news-totalmatches)
         - count). Use this parameter along with the count parameter to page
         results. For example, if your user interface displays 20 news per
         page, set count to 20 and offset to 0 to get the first page of
         results. For each subsequent page, increment offset by 20 (for
         example, 0, 20, 40). It is possible for multiple pages to include some
         overlap in results.
        :type offset: int
        :param original_image: A Boolean value that determines whether the
         image's contentUrl contains a URL that points to a thumbnail of the
         original article's image or the image itself. If the article includes
         an image, and this parameter is set to true, the image's contentUrl
         property contains a URL that you may use to download the original
         image from the publisher's website. Otherwise, if this parameter is
         false, the image's contentUrl and thumbnailUrl URLs both point to the
         same thumbnail image. Use this parameter only with the News Search
         API. Do not specify this parameter when calling the Trending Topics
         API or News Category API.
        :type original_image: bool
        :param safe_search: Filter news for adult content. The following are
         the possible filter values. Off: Return news articles with adult text,
         images, or videos. Moderate: Return news articles with adult text but
         not adult images or videos. Strict: Do not return news articles with
         adult text, images, or videos. If the request comes from a market that
         Bing's adult policy requires that safeSearch is set to Strict, Bing
         ignores the safeSearch value and uses Strict. If you use the site:
         query operator, there is the chance that the response may contain
         adult content regardless of what the safeSearch query parameter is set
         to. Use site: only if you are aware of the content on the site and
         your scenario supports the possibility of adult content. Possible
         values include: 'Off', 'Moderate', 'Strict'
        :type safe_search: str or
         ~azure.cognitiveservices.search.newssearch.models.SafeSearch
        :param set_lang: The language to use for user interface strings.
         Specify the language using the ISO 639-1 2-letter language code. For
         example, the language code for English is EN. The default is EN
         (English). Although optional, you should always specify the language.
         Typically, you set setLang to the same language specified by mkt
         unless the user wants the user interface strings displayed in a
         different language. This parameter and the
         [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#acceptlanguage)
         header are mutually exclusive; do not specify both. A user interface
         string is a string that's used as a label in a user interface. There
         are few user interface strings in the JSON response objects. Also, any
         links to Bing.com properties in the response objects apply the
         specified language.
        :type set_lang: str
        :param sort_by: The order to return the news in. The following are the
         possible case-insensitive values. Date: If the request is through the
         News Search API, the response returns news articles sorted by date
         from the most recent to the oldest. If the request is through the News
         Trending Topics API, the response returns trending topics sorted by
         date from the most recent to the oldest.
        :type sort_by: str
        :param text_decorations: A Boolean value that determines whether
         display strings contain decoration markers such as hit highlighting
         characters. If true, the strings may include markers. The default is
         false. To specify whether to use Unicode characters or HTML tags as
         the markers, see the
         [textFormat](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#textformat)
         query parameter. For information about hit highlighting, see [Hit
         Highlighting](https://docs.microsoft.com/azure/cognitive-services/bing-news-search/hit-highlighting).
        :type text_decorations: bool
        :param text_format: The type of markers to use for text decorations
         (see the textDecorations query parameter). Possible values are Rawâ€”Use
         Unicode characters to mark content that needs special formatting. The
         Unicode characters are in the range E000 through E019. For example,
         Bing uses E000 and E001 to mark the beginning and end of query terms
         for hit highlighting. HTMLâ€”Use HTML tags to mark content that needs
         special formatting. For example, use <b> tags to highlight query terms
         in display strings. The default is Raw. For display strings that
         contain escapable HTML characters such as <, >, and &, if textFormat
         is set to HTML, Bing escapes the characters as appropriate (for
         example, < is escaped to &lt;). Possible values include: 'Raw', 'Html'
        :type text_format: str or
         ~azure.cognitiveservices.search.newssearch.models.TextFormat
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: News or ClientRawResponse if raw=true
        :rtype: ~azure.cognitiveservices.search.newssearch.models.News or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.cognitiveservices.search.newssearch.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.search.metadata['url']
        path_format_arguments = {
            'Endpoint': self._serialize.url("self.config.endpoint", self.config.endpoint, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if country_code is not None:
            query_parameters['cc'] = self._serialize.query("country_code", country_code, 'str')
        if count is not None:
            query_parameters['count'] = self._serialize.query("count", count, 'int')
        if freshness is not None:
            query_parameters['freshness'] = self._serialize.query("freshness", freshness, 'str')
        if market is not None:
            query_parameters['mkt'] = self._serialize.query("market", market, 'str')
        if offset is not None:
            query_parameters['offset'] = self._serialize.query("offset", offset, 'int')
        if original_image is not None:
            query_parameters['originalImg'] = self._serialize.query("original_image", original_image, 'bool')
        query_parameters['q'] = self._serialize.query("query", query, 'str')
        if safe_search is not None:
            query_parameters['safeSearch'] = self._serialize.query("safe_search", safe_search, 'str')
        if set_lang is not None:
            query_parameters['setLang'] = self._serialize.query("set_lang", set_lang, 'str')
        if sort_by is not None:
            query_parameters['sortBy'] = self._serialize.query("sort_by", sort_by, 'str')
        if text_decorations is not None:
            query_parameters['textDecorations'] = self._serialize.query("text_decorations", text_decorations, 'bool')
        if text_format is not None:
            query_parameters['textFormat'] = self._serialize.query("text_format", text_format, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['X-BingApis-SDK'] = self._serialize.header("self.x_bing_apis_sdk", self.x_bing_apis_sdk, 'str')
        if accept_language is not None:
            header_parameters['Accept-Language'] = self._serialize.header("accept_language", accept_language, 'str')
        if user_agent is not None:
            header_parameters['User-Agent'] = self._serialize.header("user_agent", user_agent, 'str')
        if client_id is not None:
            header_parameters['X-MSEdge-ClientID'] = self._serialize.header("client_id", client_id, 'str')
        if client_ip is not None:
            header_parameters['X-MSEdge-ClientIP'] = self._serialize.header("client_ip", client_ip, 'str')
        if location is not None:
            header_parameters['X-Search-Location'] = self._serialize.header("location", location, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('News', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    search.metadata = {'url': '/news/search'}

    def category(
            self, accept_language=None, user_agent=None, client_id=None, client_ip=None, location=None, country_code=None, category=None, count=None, headline_count=None, market=None, offset=None, original_image=None, safe_search=None, set_lang=None, text_decorations=None, text_format=None, custom_headers=None, raw=False, **operation_config):
        """The News Category API lets you search on Bing and get back a list of
        top news articles by category. This section provides technical details
        about the query parameters and headers that you use to request news and
        the JSON response objects that contain them.  For examples that show
        how to make requests, see [Searching the web for
        news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).

        :param accept_language: A comma-delimited list of one or more
         languages to use for user interface strings. The list is in decreasing
         order of preference. For additional information, including expected
         format, see
         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
         This header and the
         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#setlang)
         query parameter are mutually exclusive; do not specify both. If you
         set this header, you must also specify the
         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#cc)
         query parameter. To determine the market to return results for, Bing
         uses the first supported language it finds from the list and combines
         it with the cc parameter value. If the list does not include a
         supported language, Bing finds the closest language and market that
         supports the request or it uses an aggregated or default market for
         the results. To determine the market that Bing used, see the
         BingAPIs-Market header. Use this header and the cc query parameter
         only if you specify multiple languages. Otherwise, use the
         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#mkt)
         and
         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#setlang)
         query parameters. A user interface string is a string that's used as a
         label in a user interface. There are few user interface strings in the
         JSON response objects. Any links to Bing.com properties in the
         response objects apply the specified language.
        :type accept_language: str
        :param user_agent: The user agent originating the request. Bing uses
         the user agent to provide mobile users with an optimized experience.
         Although optional, you are encouraged to always specify this header.
         The user-agent should be the same string that any commonly used
         browser sends. For information about user agents, see [RFC
         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The
         following are examples of user-agent strings. Windows Phone:
         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;
         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0
         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)
         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /
         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)
         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1
         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;
         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0
         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like
         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53
        :type user_agent: str
        :param client_id: Bing uses this header to provide users with
         consistent behavior across Bing API calls. Bing often flights new
         features and improvements, and it uses the client ID as a key for
         assigning traffic on different flights. If you do not use the same
         client ID for a user across multiple requests, then Bing may assign
         the user to multiple conflicting flights. Being assigned to multiple
         conflicting flights can lead to an inconsistent user experience. For
         example, if the second request has a different flight assignment than
         the first, the experience may be unexpected. Also, Bing can use the
         client ID to tailor web results to that client IDâ€™s search history,
         providing a richer experience for the user. Bing also uses this header
         to help improve result rankings by analyzing the activity generated by
         a client ID. The relevance improvements help with better quality of
         results delivered by Bing APIs and in turn enables higher
         click-through rates for the API consumer. IMPORTANT: Although
         optional, you should consider this header required. Persisting the
         client ID across multiple requests for the same end user and device
         combination enables 1) the API consumer to receive a consistent user
         experience, and 2) higher click-through rates via better quality of
         results from the Bing APIs. Each user that uses your application on
         the device must have a unique, Bing generated client ID. If you do not
         include this header in the request, Bing generates an ID and returns
         it in the X-MSEdge-ClientID response header. The only time that you
         should NOT include this header in a request is the first time the user
         uses your app on that device. Use the client ID for each Bing API
         request that your app makes for this user on the device. Persist the
         client ID. To persist the ID in a browser app, use a persistent HTTP
         cookie to ensure the ID is used across all sessions. Do not use a
         session cookie. For other apps such as mobile apps, use the device's
         persistent storage to persist the ID. The next time the user uses your
         app on that device, get the client ID that you persisted. Bing
         responses may or may not include this header. If the response includes
         this header, capture the client ID and use it for all subsequent Bing
         requests for the user on that device. If you include the
         X-MSEdge-ClientID, you must not include cookies in the request.
        :type client_id: str
        :param client_ip: The IPv4 or IPv6 address of the client device. The
         IP address is used to discover the user's location. Bing uses the
         location information to determine safe search behavior. Although
         optional, you are encouraged to always specify this header and the
         X-Search-Location header. Do not obfuscate the address (for example,
         by changing the last octet to 0). Obfuscating the address results in
         the location not being anywhere near the device's actual location,
         which may result in Bing serving erroneous results.
        :type client_ip: str
        :param location: A semicolon-delimited list of key/value pairs that
         describe the client's geographical location. Bing uses the location
         information to determine safe search behavior and to return relevant
         local content. Specify the key/value pair as <key>:<value>. The
         following are the keys that you use to specify the user's location.
         lat (required): The latitude of the client's location, in degrees. The
         latitude must be greater than or equal to -90.0 and less than or equal
         to +90.0. Negative values indicate southern latitudes and positive
         values indicate northern latitudes. long (required): The longitude of
         the client's location, in degrees. The longitude must be greater than
         or equal to -180.0 and less than or equal to +180.0. Negative values
         indicate western longitudes and positive values indicate eastern
         longitudes. re (required): The radius, in meters, which specifies the
         horizontal accuracy of the coordinates. Pass the value returned by the
         device's location service. Typical values might be 22m for GPS/Wi-Fi,
         380m for cell tower triangulation, and 18,000m for reverse IP lookup.
         ts (optional): The UTC UNIX timestamp of when the client was at the
         location. (The UNIX timestamp is the number of seconds since January
         1, 1970.) head (optional): The client's relative heading or direction
         of travel. Specify the direction of travel as degrees from 0 through
         360, counting clockwise relative to true north. Specify this key only
         if the sp key is nonzero. sp (optional): The horizontal velocity
         (speed), in meters per second, that the client device is traveling.
         alt (optional): The altitude of the client device, in meters. are
         (optional): The radius, in meters, that specifies the vertical
         accuracy of the coordinates. Specify this key only if you specify the
         alt key. Although many of the keys are optional, the more information
         that you provide, the more accurate the location results are. Although
         optional, you are encouraged to always specify the user's geographical
         location. Providing the location is especially important if the
         client's IP address does not accurately reflect the user's physical
         location (for example, if the client uses VPN). For optimal results,
         you should include this header and the X-MSEdge-ClientIP header, but
         at a minimum, you should include this header.
        :type location: str
        :param country_code: A 2-character country code of the country where
         the results come from. This API supports only the United States
         market. If you specify this query parameter, it must be set to us. If
         you set this parameter, you must also specify the Accept-Language
         header. Bing uses the first supported language it finds from the
         languages list, and combine that language with the country code that
         you specify to determine the market to return results for. If the
         languages list does not include a supported language, Bing finds the
         closest language and market that supports the request, or it may use
         an aggregated or default market for the results instead of a specified
         one. You should use this query parameter and the Accept-Language query
         parameter only if you specify multiple languages; otherwise, you
         should use the mkt and setLang query parameters. This parameter and
         the mkt query parameter are mutually exclusiveâ€”do not specify both.
        :type country_code: str
        :param category: The category of articles to return. For example,
         Sports articles or Entertainment articles. For a list of possible
         categories, see [News Categories by
         Market](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#categories-by-market).
         Use this parameter only with News Category API. If you do not specify
         this parameter, the response includes both: Headline articles
         typically published in the last 24 hours from any category and
         articles from each parent category (up to four articles). If the
         article is a headline, the article's headline field is set to true. By
         default, the response includes up to 12 headline articles. To specify
         the number of headline articles to return, set the
         [headlineCount](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#headlineCount)
         query parameter.
        :type category: str
        :param count: The number of news articles to return in the response.
         The actual number delivered may be less than requested. The default is
         10 and the maximum value is 100. The actual number delivered may be
         less than requested.You may use this parameter along with the offset
         parameter to page results. For example, if your user interface
         displays 20 articles per page, set count to 20 and offset to 0 to get
         the first page of results. For each subsequent page, increment offset
         by 20 (for example, 0, 20, 40). It is possible for multiple pages to
         include some overlap in results. If you do not specify the
         [category](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#category)
         parameter, Bing ignores this parameter.
        :type count: int
        :param headline_count: The number of headline articles to return in
         the response. The default is 12. Specify this parameter only if you do
         not specify the
         [category](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#category)
         parameter.
        :type headline_count: int
        :param market: The market where the results come from. Typically, mkt
         is the country where the user is making the request from. However, it
         could be a different country if the user is not located in a country
         where Bing delivers results. The market must be in the form <language
         code>-<country code>. For example, en-US. The string is case
         insensitive. For a list of possible market values, see [Market
         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes).
         NOTE: If known, you are encouraged to always specify the market.
         Specifying the market helps Bing route the request and return an
         appropriate and optimal response. If you specify a market that is not
         listed in [Market
         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes),
         Bing uses a best fit market code based on an internal mapping that is
         subject to change. This parameter and the
         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#cc)
         query parameter are mutually exclusiveâ€”do not specify both.
        :type market: str
        :param offset: The zero-based offset that indicates the number of news
         to skip before returning news. The default is 0. The offset should be
         less than
         ([totalEstimatedMatches](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#news-totalmatches)
         - count). Use this parameter along with the count parameter to page
         results. For example, if your user interface displays 20 news per
         page, set count to 20 and offset to 0 to get the first page of
         results. For each subsequent page, increment offset by 20 (for
         example, 0, 20, 40). It is possible for multiple pages to include some
         overlap in results. If you do not specify the
         [category](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#category)
         parameter, Bing ignores this parameter.
        :type offset: int
        :param original_image: A Boolean value that determines whether the
         image's contentUrl contains a URL that points to a thumbnail of the
         original article's image or the image itself. If the article includes
         an image, and this parameter is set to true, the image's contentUrl
         property contains a URL that you may use to download the original
         image from the publisher's website. Otherwise, if this parameter is
         false, the image's contentUrl and thumbnailUrl URLs both point to the
         same thumbnail image. Use this parameter only with the News Search API
         or News Category API. Trending Topics API ignore this parameter.
        :type original_image: bool
        :param safe_search: Filter news for adult content. The following are
         the possible filter values. Off: Return news articles with adult text,
         images, or videos. Moderate: Return news articles with adult text but
         not adult images or videos. Strict: Do not return news articles with
         adult text, images, or videos. If the request comes from a market that
         Bing's adult policy requires that safeSearch is set to Strict, Bing
         ignores the safeSearch value and uses Strict. If you use the site:
         query operator, there is the chance that the response may contain
         adult content regardless of what the safeSearch query parameter is set
         to. Use site: only if you are aware of the content on the site and
         your scenario supports the possibility of adult content. Possible
         values include: 'Off', 'Moderate', 'Strict'
        :type safe_search: str or
         ~azure.cognitiveservices.search.newssearch.models.SafeSearch
        :param set_lang: The language to use for user interface strings.
         Specify the language using the ISO 639-1 2-letter language code. For
         example, the language code for English is EN. The default is EN
         (English). Although optional, you should always specify the language.
         Typically, you set setLang to the same language specified by mkt
         unless the user wants the user interface strings displayed in a
         different language. This parameter and the
         [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#acceptlanguage)
         header are mutually exclusive; do not specify both. A user interface
         string is a string that's used as a label in a user interface. There
         are few user interface strings in the JSON response objects. Also, any
         links to Bing.com properties in the response objects apply the
         specified language.
        :type set_lang: str
        :param text_decorations: A Boolean value that determines whether
         display strings contain decoration markers such as hit highlighting
         characters. If true, the strings may include markers. The default is
         false. To specify whether to use Unicode characters or HTML tags as
         the markers, see the
         [textFormat](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#textformat)
         query parameter. For information about hit highlighting, see [Hit
         Highlighting](https://docs.microsoft.com/azure/cognitive-services/bing-news-search/hit-highlighting).
        :type text_decorations: bool
        :param text_format: The type of markers to use for text decorations
         (see the textDecorations query parameter). Possible values are Rawâ€”Use
         Unicode characters to mark content that needs special formatting. The
         Unicode characters are in the range E000 through E019. For example,
         Bing uses E000 and E001 to mark the beginning and end of query terms
         for hit highlighting. HTMLâ€”Use HTML tags to mark content that needs
         special formatting. For example, use <b> tags to highlight query terms
         in display strings. The default is Raw. For display strings that
         contain escapable HTML characters such as <, >, and &, if textFormat
         is set to HTML, Bing escapes the characters as appropriate (for
         example, < is escaped to &lt;). Possible values include: 'Raw', 'Html'
        :type text_format: str or
         ~azure.cognitiveservices.search.newssearch.models.TextFormat
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: News or ClientRawResponse if raw=true
        :rtype: ~azure.cognitiveservices.search.newssearch.models.News or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.cognitiveservices.search.newssearch.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.category.metadata['url']
        path_format_arguments = {
            'Endpoint': self._serialize.url("self.config.endpoint", self.config.endpoint, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if country_code is not None:
            query_parameters['cc'] = self._serialize.query("country_code", country_code, 'str')
        if category is not None:
            query_parameters['category'] = self._serialize.query("category", category, 'str')
        if count is not None:
            query_parameters['count'] = self._serialize.query("count", count, 'int')
        if headline_count is not None:
            query_parameters['headlineCount'] = self._serialize.query("headline_count", headline_count, 'int')
        if market is not None:
            query_parameters['mkt'] = self._serialize.query("market", market, 'str')
        if offset is not None:
            query_parameters['offset'] = self._serialize.query("offset", offset, 'int')
        if original_image is not None:
            query_parameters['originalImg'] = self._serialize.query("original_image", original_image, 'bool')
        if safe_search is not None:
            query_parameters['safeSearch'] = self._serialize.query("safe_search", safe_search, 'str')
        if set_lang is not None:
            query_parameters['setLang'] = self._serialize.query("set_lang", set_lang, 'str')
        if text_decorations is not None:
            query_parameters['textDecorations'] = self._serialize.query("text_decorations", text_decorations, 'bool')
        if text_format is not None:
            query_parameters['textFormat'] = self._serialize.query("text_format", text_format, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['X-BingApis-SDK'] = self._serialize.header("self.x_bing_apis_sdk", self.x_bing_apis_sdk, 'str')
        if accept_language is not None:
            header_parameters['Accept-Language'] = self._serialize.header("accept_language", accept_language, 'str')
        if user_agent is not None:
            header_parameters['User-Agent'] = self._serialize.header("user_agent", user_agent, 'str')
        if client_id is not None:
            header_parameters['X-MSEdge-ClientID'] = self._serialize.header("client_id", client_id, 'str')
        if client_ip is not None:
            header_parameters['X-MSEdge-ClientIP'] = self._serialize.header("client_ip", client_ip, 'str')
        if location is not None:
            header_parameters['X-Search-Location'] = self._serialize.header("location", location, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('News', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    category.metadata = {'url': '/news'}

    def trending(
            self, accept_language=None, user_agent=None, client_id=None, client_ip=None, location=None, country_code=None, count=None, market=None, offset=None, safe_search=None, set_lang=None, since=None, sort_by=None, text_decorations=None, text_format=None, custom_headers=None, raw=False, **operation_config):
        """The News Trending Topics API lets you search on Bing and get back a
        list of trending news topics that are currently trending on Bing. This
        section provides technical details about the query parameters and
        headers that you use to request news and the JSON response objects that
        contain them.  For examples that show how to make requests, see
        [Searching the web for
        news](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-news-search/search-the-web).

        :param accept_language: A comma-delimited list of one or more
         languages to use for user interface strings. The list is in decreasing
         order of preference. For additional information, including expected
         format, see
         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
         This header and the
         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#setlang)
         query parameter are mutually exclusive; do not specify both. If you
         set this header, you must also specify the
         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#cc)
         query parameter. To determine the market to return results for, Bing
         uses the first supported language it finds from the list and combines
         it with the cc parameter value. If the list does not include a
         supported language, Bing finds the closest language and market that
         supports the request or it uses an aggregated or default market for
         the results. To determine the market that Bing used, see the
         BingAPIs-Market header. Use this header and the cc query parameter
         only if you specify multiple languages. Otherwise, use the
         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#mkt)
         and
         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#setlang)
         query parameters. A user interface string is a string that's used as a
         label in a user interface. There are few user interface strings in the
         JSON response objects. Any links to Bing.com properties in the
         response objects apply the specified language.
        :type accept_language: str
        :param user_agent: The user agent originating the request. Bing uses
         the user agent to provide mobile users with an optimized experience.
         Although optional, you are encouraged to always specify this header.
         The user-agent should be the same string that any commonly used
         browser sends. For information about user agents, see [RFC
         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The
         following are examples of user-agent strings. Windows Phone:
         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;
         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0
         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)
         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /
         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)
         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1
         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;
         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0
         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like
         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53
        :type user_agent: str
        :param client_id: Bing uses this header to provide users with
         consistent behavior across Bing API calls. Bing often flights new
         features and improvements, and it uses the client ID as a key for
         assigning traffic on different flights. If you do not use the same
         client ID for a user across multiple requests, then Bing may assign
         the user to multiple conflicting flights. Being assigned to multiple
         conflicting flights can lead to an inconsistent user experience. For
         example, if the second request has a different flight assignment than
         the first, the experience may be unexpected. Also, Bing can use the
         client ID to tailor web results to that client IDâ€™s search history,
         providing a richer experience for the user. Bing also uses this header
         to help improve result rankings by analyzing the activity generated by
         a client ID. The relevance improvements help with better quality of
         results delivered by Bing APIs and in turn enables higher
         click-through rates for the API consumer. IMPORTANT: Although
         optional, you should consider this header required. Persisting the
         client ID across multiple requests for the same end user and device
         combination enables 1) the API consumer to receive a consistent user
         experience, and 2) higher click-through rates via better quality of
         results from the Bing APIs. Each user that uses your application on
         the device must have a unique, Bing generated client ID. If you do not
         include this header in the request, Bing generates an ID and returns
         it in the X-MSEdge-ClientID response header. The only time that you
         should NOT include this header in a request is the first time the user
         uses your app on that device. Use the client ID for each Bing API
         request that your app makes for this user on the device. Persist the
         client ID. To persist the ID in a browser app, use a persistent HTTP
         cookie to ensure the ID is used across all sessions. Do not use a
         session cookie. For other apps such as mobile apps, use the device's
         persistent storage to persist the ID. The next time the user uses your
         app on that device, get the client ID that you persisted. Bing
         responses may or may not include this header. If the response includes
         this header, capture the client ID and use it for all subsequent Bing
         requests for the user on that device. If you include the
         X-MSEdge-ClientID, you must not include cookies in the request.
        :type client_id: str
        :param client_ip: The IPv4 or IPv6 address of the client device. The
         IP address is used to discover the user's location. Bing uses the
         location information to determine safe search behavior. Although
         optional, you are encouraged to always specify this header and the
         X-Search-Location header. Do not obfuscate the address (for example,
         by changing the last octet to 0). Obfuscating the address results in
         the location not being anywhere near the device's actual location,
         which may result in Bing serving erroneous results.
        :type client_ip: str
        :param location: A semicolon-delimited list of key/value pairs that
         describe the client's geographical location. Bing uses the location
         information to determine safe search behavior and to return relevant
         local content. Specify the key/value pair as <key>:<value>. The
         following are the keys that you use to specify the user's location.
         lat (required): The latitude of the client's location, in degrees. The
         latitude must be greater than or equal to -90.0 and less than or equal
         to +90.0. Negative values indicate southern latitudes and positive
         values indicate northern latitudes. long (required): The longitude of
         the client's location, in degrees. The longitude must be greater than
         or equal to -180.0 and less than or equal to +180.0. Negative values
         indicate western longitudes and positive values indicate eastern
         longitudes. re (required): The radius, in meters, which specifies the
         horizontal accuracy of the coordinates. Pass the value returned by the
         device's location service. Typical values might be 22m for GPS/Wi-Fi,
         380m for cell tower triangulation, and 18,000m for reverse IP lookup.
         ts (optional): The UTC UNIX timestamp of when the client was at the
         location. (The UNIX timestamp is the number of seconds since January
         1, 1970.) head (optional): The client's relative heading or direction
         of travel. Specify the direction of travel as degrees from 0 through
         360, counting clockwise relative to true north. Specify this key only
         if the sp key is nonzero. sp (optional): The horizontal velocity
         (speed), in meters per second, that the client device is traveling.
         alt (optional): The altitude of the client device, in meters. are
         (optional): The radius, in meters, that specifies the vertical
         accuracy of the coordinates. Specify this key only if you specify the
         alt key. Although many of the keys are optional, the more information
         that you provide, the more accurate the location results are. Although
         optional, you are encouraged to always specify the user's geographical
         location. Providing the location is especially important if the
         client's IP address does not accurately reflect the user's physical
         location (for example, if the client uses VPN). For optimal results,
         you should include this header and the X-MSEdge-ClientIP header, but
         at a minimum, you should include this header.
        :type location: str
        :param country_code: A 2-character country code of the country where
         the results come from. This API supports only the United States
         market. If you specify this query parameter, it must be set to us. If
         you set this parameter, you must also specify the Accept-Language
         header. Bing uses the first supported language it finds from the
         languages list, and combine that language with the country code that
         you specify to determine the market to return results for. If the
         languages list does not include a supported language, Bing finds the
         closest language and market that supports the request, or it may use
         an aggregated or default market for the results instead of a specified
         one. You should use this query parameter and the Accept-Language query
         parameter only if you specify multiple languages; otherwise, you
         should use the mkt and setLang query parameters. This parameter and
         the mkt query parameter are mutually exclusiveâ€”do not specify both.
        :type country_code: str
        :param count: The number of news articles to return in the response.
         The actual number delivered may be less than requested. The default is
         10 and the maximum value is 100. The actual number delivered may be
         less than requested.You may use this parameter along with the offset
         parameter to page results. For example, if your user interface
         displays 20 articles per page, set count to 20 and offset to 0 to get
         the first page of results. For each subsequent page, increment offset
         by 20 (for example, 0, 20, 40). It is possible for multiple pages to
         include some overlap in results.
        :type count: int
        :param market: The market where the results come from. Typically, mkt
         is the country where the user is making the request from. However, it
         could be a different country if the user is not located in a country
         where Bing delivers results. The market must be in the form <language
         code>-<country code>. For example, en-US. The string is case
         insensitive. For a list of possible market values, see [Market
         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes).
         NOTE: If known, you are encouraged to always specify the market.
         Specifying the market helps Bing route the request and return an
         appropriate and optimal response. If you specify a market that is not
         listed in [Market
         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes),
         Bing uses a best fit market code based on an internal mapping that is
         subject to change. This parameter and the
         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#cc)
         query parameter are mutually exclusiveâ€”do not specify both.
        :type market: str
        :param offset: The zero-based offset that indicates the number of news
         to skip before returning news. The default is 0. The offset should be
         less than
         ([totalEstimatedMatches](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#news-totalmatches)
         - count). Use this parameter along with the count parameter to page
         results. For example, if your user interface displays 20 news per
         page, set count to 20 and offset to 0 to get the first page of
         results. For each subsequent page, increment offset by 20 (for
         example, 0, 20, 40). It is possible for multiple pages to include some
         overlap in results.
        :type offset: int
        :param safe_search: Filter news for adult content. The following are
         the possible filter values. Off: Return news articles with adult text,
         images, or videos. Moderate: Return news articles with adult text but
         not adult images or videos. Strict: Do not return news articles with
         adult text, images, or videos. If the request comes from a market that
         Bing's adult policy requires that safeSearch is set to Strict, Bing
         ignores the safeSearch value and uses Strict. If you use the site:
         query operator, there is the chance that the response may contain
         adult content regardless of what the safeSearch query parameter is set
         to. Use site: only if you are aware of the content on the site and
         your scenario supports the possibility of adult content. Possible
         values include: 'Off', 'Moderate', 'Strict'
        :type safe_search: str or
         ~azure.cognitiveservices.search.newssearch.models.SafeSearch
        :param set_lang: The language to use for user interface strings.
         Specify the language using the ISO 639-1 2-letter language code. For
         example, the language code for English is EN. The default is EN
         (English). Although optional, you should always specify the language.
         Typically, you set setLang to the same language specified by mkt
         unless the user wants the user interface strings displayed in a
         different language. This parameter and the
         [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#acceptlanguage)
         header are mutually exclusive; do not specify both. A user interface
         string is a string that's used as a label in a user interface. There
         are few user interface strings in the JSON response objects. Also, any
         links to Bing.com properties in the response objects apply the
         specified language.
        :type set_lang: str
        :param since: The Unix epoch time (Unix timestamp) that Bing uses to
         select the trending topics. Bing returns trending topics that it
         discovered on or after the specified date and time, not the date the
         topic was published. To use this parameter, also specify the sortBy
         parameter. Use this parameter only with the News Trending Topics API.
         Do not specify this parameter when calling the News Search API or News
         Category API.
        :type since: long
        :param sort_by: The order to return the news in. The following are the
         possible case-insensitive values. Date: If the request is through the
         News Search API, the response returns news articles sorted by date
         from the most recent to the oldest. If the request is through the News
         Trending Topics API, the response returns trending topics sorted by
         date from the most recent to the oldest.
        :type sort_by: str
        :param text_decorations: A Boolean value that determines whether
         display strings contain decoration markers such as hit highlighting
         characters. If true, the strings may include markers. The default is
         false. To specify whether to use Unicode characters or HTML tags as
         the markers, see the
         [textFormat](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#textformat)
         query parameter. For information about hit highlighting, see [Hit
         Highlighting](https://docs.microsoft.com/azure/cognitive-services/bing-news-search/hit-highlighting).
        :type text_decorations: bool
        :param text_format: The type of markers to use for text decorations
         (see the textDecorations query parameter). Possible values are Rawâ€”Use
         Unicode characters to mark content that needs special formatting. The
         Unicode characters are in the range E000 through E019. For example,
         Bing uses E000 and E001 to mark the beginning and end of query terms
         for hit highlighting. HTMLâ€”Use HTML tags to mark content that needs
         special formatting. For example, use <b> tags to highlight query terms
         in display strings. The default is Raw. For display strings that
         contain escapable HTML characters such as <, >, and &, if textFormat
         is set to HTML, Bing escapes the characters as appropriate (for
         example, < is escaped to &lt;). Possible values include: 'Raw', 'Html'
        :type text_format: str or
         ~azure.cognitiveservices.search.newssearch.models.TextFormat
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TrendingTopics or ClientRawResponse if raw=true
        :rtype:
         ~azure.cognitiveservices.search.newssearch.models.TrendingTopics or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.cognitiveservices.search.newssearch.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.trending.metadata['url']
        path_format_arguments = {
            'Endpoint': self._serialize.url("self.config.endpoint", self.config.endpoint, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if country_code is not None:
            query_parameters['cc'] = self._serialize.query("country_code", country_code, 'str')
        if count is not None:
            query_parameters['count'] = self._serialize.query("count", count, 'int')
        if market is not None:
            query_parameters['mkt'] = self._serialize.query("market", market, 'str')
        if offset is not None:
            query_parameters['offset'] = self._serialize.query("offset", offset, 'int')
        if safe_search is not None:
            query_parameters['safeSearch'] = self._serialize.query("safe_search", safe_search, 'str')
        if set_lang is not None:
            query_parameters['setLang'] = self._serialize.query("set_lang", set_lang, 'str')
        if since is not None:
            query_parameters['since'] = self._serialize.query("since", since, 'long')
        if sort_by is not None:
            query_parameters['sortBy'] = self._serialize.query("sort_by", sort_by, 'str')
        if text_decorations is not None:
            query_parameters['textDecorations'] = self._serialize.query("text_decorations", text_decorations, 'bool')
        if text_format is not None:
            query_parameters['textFormat'] = self._serialize.query("text_format", text_format, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['X-BingApis-SDK'] = self._serialize.header("self.x_bing_apis_sdk", self.x_bing_apis_sdk, 'str')
        if accept_language is not None:
            header_parameters['Accept-Language'] = self._serialize.header("accept_language", accept_language, 'str')
        if user_agent is not None:
            header_parameters['User-Agent'] = self._serialize.header("user_agent", user_agent, 'str')
        if client_id is not None:
            header_parameters['X-MSEdge-ClientID'] = self._serialize.header("client_id", client_id, 'str')
        if client_ip is not None:
            header_parameters['X-MSEdge-ClientIP'] = self._serialize.header("client_ip", client_ip, 'str')
        if location is not None:
            header_parameters['X-Search-Location'] = self._serialize.header("location", location, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('TrendingTopics', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    trending.metadata = {'url': '/news/trendingtopics'}
