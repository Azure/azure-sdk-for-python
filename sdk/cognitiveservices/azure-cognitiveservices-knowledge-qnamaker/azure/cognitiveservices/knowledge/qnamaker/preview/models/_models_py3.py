# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class ActiveLearningSettingsDTO(Model):
    """Active Learning settings of the endpoint.

    :param enable: True/False string providing Active Learning
    :type enable: str
    """

    _attribute_map = {
        'enable': {'key': 'enable', 'type': 'str'},
    }

    def __init__(self, *, enable: str=None, **kwargs) -> None:
        super(ActiveLearningSettingsDTO, self).__init__(**kwargs)
        self.enable = enable


class AlterationsDTO(Model):
    """Collection of words that are synonyms.

    All required parameters must be populated in order to send to Azure.

    :param alterations: Required. Words that are synonymous with each other.
    :type alterations: list[str]
    """

    _validation = {
        'alterations': {'required': True},
    }

    _attribute_map = {
        'alterations': {'key': 'alterations', 'type': '[str]'},
    }

    def __init__(self, *, alterations, **kwargs) -> None:
        super(AlterationsDTO, self).__init__(**kwargs)
        self.alterations = alterations


class AnswerSpanRequestDTO(Model):
    """To configure Answer span prediction feature.

    :param enable: Enable or Disable Answer Span prediction.
    :type enable: bool
    :param score_threshold: Minimum threshold score required to include an
     answer span.
    :type score_threshold: float
    :param top_answers_with_span: Number of Top answers to be considered for
     span prediction.
    :type top_answers_with_span: int
    """

    _validation = {
        'top_answers_with_span': {'maximum': 10, 'minimum': 1},
    }

    _attribute_map = {
        'enable': {'key': 'enable', 'type': 'bool'},
        'score_threshold': {'key': 'scoreThreshold', 'type': 'float'},
        'top_answers_with_span': {'key': 'topAnswersWithSpan', 'type': 'int'},
    }

    def __init__(self, *, enable: bool=None, score_threshold: float=None, top_answers_with_span: int=None, **kwargs) -> None:
        super(AnswerSpanRequestDTO, self).__init__(**kwargs)
        self.enable = enable
        self.score_threshold = score_threshold
        self.top_answers_with_span = top_answers_with_span


class AnswerSpanResponseDTO(Model):
    """Answer span object of QnA.

    :param text: Predicted text of answer span.
    :type text: str
    :param score: Predicted score of answer span.
    :type score: float
    :param start_index: Start index of answer span in answer.
    :type start_index: int
    :param end_index: End index of answer span in answer.
    :type end_index: int
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
        'start_index': {'key': 'startIndex', 'type': 'int'},
        'end_index': {'key': 'endIndex', 'type': 'int'},
    }

    def __init__(self, *, text: str=None, score: float=None, start_index: int=None, end_index: int=None, **kwargs) -> None:
        super(AnswerSpanResponseDTO, self).__init__(**kwargs)
        self.text = text
        self.score = score
        self.start_index = start_index
        self.end_index = end_index


class ContextDTO(Model):
    """Context associated with Qna.

    :param is_context_only: To mark if a prompt is relevant only with a
     previous question or not.
     true - Do not include this QnA as search result for queries without
     context
     false - ignores context and includes this QnA in search result
    :type is_context_only: bool
    :param prompts: List of prompts associated with the answer.
    :type prompts:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.PromptDTO]
    """

    _validation = {
        'prompts': {'max_items': 20},
    }

    _attribute_map = {
        'is_context_only': {'key': 'isContextOnly', 'type': 'bool'},
        'prompts': {'key': 'prompts', 'type': '[PromptDTO]'},
    }

    def __init__(self, *, is_context_only: bool=None, prompts=None, **kwargs) -> None:
        super(ContextDTO, self).__init__(**kwargs)
        self.is_context_only = is_context_only
        self.prompts = prompts


class CreateKbDTO(Model):
    """Post body schema for CreateKb operation.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Friendly name for the knowledgebase.
    :type name: str
    :param qna_list: List of Q-A (QnADTO) to be added to the knowledgebase.
     Q-A Ids are assigned by the service and should be omitted.
    :type qna_list:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnADTO]
    :param urls: List of URLs to be used for extracting Q-A.
    :type urls: list[str]
    :param files: List of files from which to Extract Q-A.
    :type files:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.FileDTO]
    :param enable_hierarchical_extraction: Enable hierarchical extraction of
     Q-A from files and urls. Value to be considered False if this field is not
     present.
    :type enable_hierarchical_extraction: bool
    :param default_answer_used_for_extraction: Text string to be used as the
     answer in any Q-A which has no extracted answer from the document but has
     a hierarchy. Required when EnableHierarchicalExtraction field is set to
     True.
    :type default_answer_used_for_extraction: str
    :param language: Language of the knowledgebase. Please find the list of
     supported languages <a
     href="https://aka.ms/qnamaker-languages#languages-supported"
     target="_blank">here</a>.
    :type language: str
    """

    _validation = {
        'name': {'required': True, 'max_length': 100, 'min_length': 1},
        'default_answer_used_for_extraction': {'max_length': 300, 'min_length': 1},
        'language': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'qna_list': {'key': 'qnaList', 'type': '[QnADTO]'},
        'urls': {'key': 'urls', 'type': '[str]'},
        'files': {'key': 'files', 'type': '[FileDTO]'},
        'enable_hierarchical_extraction': {'key': 'enableHierarchicalExtraction', 'type': 'bool'},
        'default_answer_used_for_extraction': {'key': 'defaultAnswerUsedForExtraction', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
    }

    def __init__(self, *, name: str, qna_list=None, urls=None, files=None, enable_hierarchical_extraction: bool=None, default_answer_used_for_extraction: str=None, language: str=None, **kwargs) -> None:
        super(CreateKbDTO, self).__init__(**kwargs)
        self.name = name
        self.qna_list = qna_list
        self.urls = urls
        self.files = files
        self.enable_hierarchical_extraction = enable_hierarchical_extraction
        self.default_answer_used_for_extraction = default_answer_used_for_extraction
        self.language = language


class CreateKbInputDTO(Model):
    """Input to create KB.

    :param qna_list: List of QNA to be added to the index. Ids are generated
     by the service and should be omitted.
    :type qna_list:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnADTO]
    :param urls: List of URLs to be added to knowledgebase.
    :type urls: list[str]
    :param files: List of files to be added to knowledgebase.
    :type files:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.FileDTO]
    """

    _attribute_map = {
        'qna_list': {'key': 'qnaList', 'type': '[QnADTO]'},
        'urls': {'key': 'urls', 'type': '[str]'},
        'files': {'key': 'files', 'type': '[FileDTO]'},
    }

    def __init__(self, *, qna_list=None, urls=None, files=None, **kwargs) -> None:
        super(CreateKbInputDTO, self).__init__(**kwargs)
        self.qna_list = qna_list
        self.urls = urls
        self.files = files


class DeleteKbContentsDTO(Model):
    """PATCH body schema of Delete Operation in UpdateKb.

    :param ids: List of Qna Ids to be deleted
    :type ids: list[int]
    :param sources: List of sources to be deleted from knowledgebase.
    :type sources: list[str]
    """

    _attribute_map = {
        'ids': {'key': 'ids', 'type': '[int]'},
        'sources': {'key': 'sources', 'type': '[str]'},
    }

    def __init__(self, *, ids=None, sources=None, **kwargs) -> None:
        super(DeleteKbContentsDTO, self).__init__(**kwargs)
        self.ids = ids
        self.sources = sources


class EndpointKeysDTO(Model):
    """Schema for EndpointKeys generate/refresh operations.

    :param primary_endpoint_key: Primary Access Key.
    :type primary_endpoint_key: str
    :param secondary_endpoint_key: Secondary Access Key.
    :type secondary_endpoint_key: str
    :param installed_version: Current version of runtime.
    :type installed_version: str
    :param last_stable_version: Latest version of runtime.
    :type last_stable_version: str
    :param language: Language setting of runtime.
    :type language: str
    """

    _attribute_map = {
        'primary_endpoint_key': {'key': 'primaryEndpointKey', 'type': 'str'},
        'secondary_endpoint_key': {'key': 'secondaryEndpointKey', 'type': 'str'},
        'installed_version': {'key': 'installedVersion', 'type': 'str'},
        'last_stable_version': {'key': 'lastStableVersion', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
    }

    def __init__(self, *, primary_endpoint_key: str=None, secondary_endpoint_key: str=None, installed_version: str=None, last_stable_version: str=None, language: str=None, **kwargs) -> None:
        super(EndpointKeysDTO, self).__init__(**kwargs)
        self.primary_endpoint_key = primary_endpoint_key
        self.secondary_endpoint_key = secondary_endpoint_key
        self.installed_version = installed_version
        self.last_stable_version = last_stable_version
        self.language = language


class EndpointSettingsDTO(Model):
    """Endpoint settings.

    :param active_learning: Active Learning settings of the endpoint.
    :type active_learning:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.EndpointSettingsDTOActiveLearning
    """

    _attribute_map = {
        'active_learning': {'key': 'activeLearning', 'type': 'EndpointSettingsDTOActiveLearning'},
    }

    def __init__(self, *, active_learning=None, **kwargs) -> None:
        super(EndpointSettingsDTO, self).__init__(**kwargs)
        self.active_learning = active_learning


class EndpointSettingsDTOActiveLearning(ActiveLearningSettingsDTO):
    """Active Learning settings of the endpoint.

    :param enable: True/False string providing Active Learning
    :type enable: str
    """

    _attribute_map = {
        'enable': {'key': 'enable', 'type': 'str'},
    }

    def __init__(self, *, enable: str=None, **kwargs) -> None:
        super(EndpointSettingsDTOActiveLearning, self).__init__(enable=enable, **kwargs)


class Error(Model):
    """The error object. As per Microsoft One API guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. One of a server-defined set of error codes.
     Possible values include: 'BadArgument', 'Forbidden', 'NotFound',
     'KbNotFound', 'Unauthorized', 'Unspecified', 'EndpointKeysError',
     'QuotaExceeded', 'QnaRuntimeError', 'SKULimitExceeded',
     'OperationNotFound', 'ServiceError', 'ValidationFailure',
     'ExtractionFailure'
    :type code: str or
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.ErrorCodeType
    :param message: A human-readable representation of the error.
    :type message: str
    :param target: The target of the error.
    :type target: str
    :param details: An array of details about specific errors that led to this
     reported error.
    :type details:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.Error]
    :param inner_error: An object containing more specific information than
     the current object about the error.
    :type inner_error:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'inner_error': {'key': 'innerError', 'type': 'InnerErrorModel'},
    }

    def __init__(self, *, code, message: str=None, target: str=None, details=None, inner_error=None, **kwargs) -> None:
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.inner_error = inner_error


class ErrorResponse(Model):
    """Error response. As per Microsoft One API guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    :param error: The error object.
    :type error:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.ErrorResponseError
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponseError'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class ErrorResponseError(Error):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. One of a server-defined set of error codes.
     Possible values include: 'BadArgument', 'Forbidden', 'NotFound',
     'KbNotFound', 'Unauthorized', 'Unspecified', 'EndpointKeysError',
     'QuotaExceeded', 'QnaRuntimeError', 'SKULimitExceeded',
     'OperationNotFound', 'ServiceError', 'ValidationFailure',
     'ExtractionFailure'
    :type code: str or
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.ErrorCodeType
    :param message: A human-readable representation of the error.
    :type message: str
    :param target: The target of the error.
    :type target: str
    :param details: An array of details about specific errors that led to this
     reported error.
    :type details:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.Error]
    :param inner_error: An object containing more specific information than
     the current object about the error.
    :type inner_error:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'inner_error': {'key': 'innerError', 'type': 'InnerErrorModel'},
    }

    def __init__(self, *, code, message: str=None, target: str=None, details=None, inner_error=None, **kwargs) -> None:
        super(ErrorResponseError, self).__init__(code=code, message=message, target=target, details=details, inner_error=inner_error, **kwargs)


class FeedbackRecordDTO(Model):
    """Active learning feedback record.

    :param user_id: Unique identifier for the user.
    :type user_id: str
    :param user_question: The suggested question being provided as feedback.
    :type user_question: str
    :param qna_id: The qnaId for which the suggested question is provided as
     feedback.
    :type qna_id: int
    """

    _validation = {
        'user_question': {'max_length': 1000},
    }

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_question': {'key': 'userQuestion', 'type': 'str'},
        'qna_id': {'key': 'qnaId', 'type': 'int'},
    }

    def __init__(self, *, user_id: str=None, user_question: str=None, qna_id: int=None, **kwargs) -> None:
        super(FeedbackRecordDTO, self).__init__(**kwargs)
        self.user_id = user_id
        self.user_question = user_question
        self.qna_id = qna_id


class FeedbackRecordsDTO(Model):
    """Active learning feedback records.

    :param feedback_records: List of feedback records.
    :type feedback_records:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.FeedbackRecordDTO]
    """

    _attribute_map = {
        'feedback_records': {'key': 'feedbackRecords', 'type': '[FeedbackRecordDTO]'},
    }

    def __init__(self, *, feedback_records=None, **kwargs) -> None:
        super(FeedbackRecordsDTO, self).__init__(**kwargs)
        self.feedback_records = feedback_records


class FileDTO(Model):
    """DTO to hold details of uploaded files.

    All required parameters must be populated in order to send to Azure.

    :param file_name: Required. File name. Supported file types are ".tsv",
     ".pdf", ".txt", ".docx", ".xlsx".
    :type file_name: str
    :param file_uri: Required. Public URI of the file.
    :type file_uri: str
    """

    _validation = {
        'file_name': {'required': True, 'max_length': 200, 'min_length': 1},
        'file_uri': {'required': True},
    }

    _attribute_map = {
        'file_name': {'key': 'fileName', 'type': 'str'},
        'file_uri': {'key': 'fileUri', 'type': 'str'},
    }

    def __init__(self, *, file_name: str, file_uri: str, **kwargs) -> None:
        super(FileDTO, self).__init__(**kwargs)
        self.file_name = file_name
        self.file_uri = file_uri


class InnerErrorModel(Model):
    """An object containing more specific information about the error. As per
    Microsoft One API guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    :param code: A more specific error code than was provided by the
     containing error.
    :type code: str
    :param inner_error: An object containing more specific information than
     the current object about the error.
    :type inner_error:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.InnerErrorModel
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'InnerErrorModel'},
    }

    def __init__(self, *, code: str=None, inner_error=None, **kwargs) -> None:
        super(InnerErrorModel, self).__init__(**kwargs)
        self.code = code
        self.inner_error = inner_error


class KnowledgebaseDTO(Model):
    """Response schema for CreateKb operation.

    :param id: Unique id that identifies a knowledgebase.
    :type id: str
    :param host_name: URL host name at which the knowledgebase is hosted.
    :type host_name: str
    :param last_accessed_timestamp: Time stamp at which the knowledgebase was
     last accessed (UTC).
    :type last_accessed_timestamp: str
    :param last_changed_timestamp: Time stamp at which the knowledgebase was
     last modified (UTC).
    :type last_changed_timestamp: str
    :param last_published_timestamp: Time stamp at which the knowledgebase was
     last published (UTC).
    :type last_published_timestamp: str
    :param name: Friendly name of the knowledgebase.
    :type name: str
    :param user_id: User who created / owns the knowledgebase.
    :type user_id: str
    :param urls: URL sources from which Q-A were extracted and added to the
     knowledgebase.
    :type urls: list[str]
    :param sources: Custom sources from which Q-A were extracted or explicitly
     added to the knowledgebase.
    :type sources: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'host_name': {'key': 'hostName', 'type': 'str'},
        'last_accessed_timestamp': {'key': 'lastAccessedTimestamp', 'type': 'str'},
        'last_changed_timestamp': {'key': 'lastChangedTimestamp', 'type': 'str'},
        'last_published_timestamp': {'key': 'lastPublishedTimestamp', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'urls': {'key': 'urls', 'type': '[str]'},
        'sources': {'key': 'sources', 'type': '[str]'},
    }

    def __init__(self, *, id: str=None, host_name: str=None, last_accessed_timestamp: str=None, last_changed_timestamp: str=None, last_published_timestamp: str=None, name: str=None, user_id: str=None, urls=None, sources=None, **kwargs) -> None:
        super(KnowledgebaseDTO, self).__init__(**kwargs)
        self.id = id
        self.host_name = host_name
        self.last_accessed_timestamp = last_accessed_timestamp
        self.last_changed_timestamp = last_changed_timestamp
        self.last_published_timestamp = last_published_timestamp
        self.name = name
        self.user_id = user_id
        self.urls = urls
        self.sources = sources


class KnowledgebasesDTO(Model):
    """Collection of knowledgebases owned by a user.

    :param knowledgebases: Collection of knowledgebase records.
    :type knowledgebases:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.KnowledgebaseDTO]
    """

    _attribute_map = {
        'knowledgebases': {'key': 'knowledgebases', 'type': '[KnowledgebaseDTO]'},
    }

    def __init__(self, *, knowledgebases=None, **kwargs) -> None:
        super(KnowledgebasesDTO, self).__init__(**kwargs)
        self.knowledgebases = knowledgebases


class MetadataDTO(Model):
    """Name - value pair of metadata.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Metadata name.
    :type name: str
    :param value: Required. Metadata value.
    :type value: str
    """

    _validation = {
        'name': {'required': True, 'max_length': 100, 'min_length': 1},
        'value': {'required': True, 'max_length': 500, 'min_length': 1},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, *, name: str, value: str, **kwargs) -> None:
        super(MetadataDTO, self).__init__(**kwargs)
        self.name = name
        self.value = value


class Operation(Model):
    """Record to track long running operation.

    :param operation_state: Operation state. Possible values include:
     'Failed', 'NotStarted', 'Running', 'Succeeded'
    :type operation_state: str or
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.OperationStateType
    :param created_timestamp: Timestamp when the operation was created.
    :type created_timestamp: str
    :param last_action_timestamp: Timestamp when the current state was
     entered.
    :type last_action_timestamp: str
    :param resource_location: Relative URI to the target resource location for
     completed resources.
    :type resource_location: str
    :param user_id: User Id
    :type user_id: str
    :param operation_id: Operation Id.
    :type operation_id: str
    :param error_response: Error details in case of failures.
    :type error_response:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.ErrorResponse
    """

    _attribute_map = {
        'operation_state': {'key': 'operationState', 'type': 'str'},
        'created_timestamp': {'key': 'createdTimestamp', 'type': 'str'},
        'last_action_timestamp': {'key': 'lastActionTimestamp', 'type': 'str'},
        'resource_location': {'key': 'resourceLocation', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'error_response': {'key': 'errorResponse', 'type': 'ErrorResponse'},
    }

    def __init__(self, *, operation_state=None, created_timestamp: str=None, last_action_timestamp: str=None, resource_location: str=None, user_id: str=None, operation_id: str=None, error_response=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.operation_state = operation_state
        self.created_timestamp = created_timestamp
        self.last_action_timestamp = last_action_timestamp
        self.resource_location = resource_location
        self.user_id = user_id
        self.operation_id = operation_id
        self.error_response = error_response


class PromptDTO(Model):
    """Prompt for an answer.

    :param display_order: Index of the prompt - used in ordering of the
     prompts
    :type display_order: int
    :param qna_id: Qna id corresponding to the prompt - if QnaId is present,
     QnADTO object is ignored.
    :type qna_id: int
    :param qna: QnADTO - Either QnaId or QnADTO needs to be present in a
     PromptDTO object
    :type qna:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.PromptDTOQna
    :param display_text: Text displayed to represent a follow up question
     prompt
    :type display_text: str
    """

    _validation = {
        'display_text': {'max_length': 200},
    }

    _attribute_map = {
        'display_order': {'key': 'displayOrder', 'type': 'int'},
        'qna_id': {'key': 'qnaId', 'type': 'int'},
        'qna': {'key': 'qna', 'type': 'PromptDTOQna'},
        'display_text': {'key': 'displayText', 'type': 'str'},
    }

    def __init__(self, *, display_order: int=None, qna_id: int=None, qna=None, display_text: str=None, **kwargs) -> None:
        super(PromptDTO, self).__init__(**kwargs)
        self.display_order = display_order
        self.qna_id = qna_id
        self.qna = qna
        self.display_text = display_text


class QnADTO(Model):
    """Q-A object.

    All required parameters must be populated in order to send to Azure.

    :param id: Unique id for the Q-A.
    :type id: int
    :param answer: Required. Answer text
    :type answer: str
    :param source: Source from which Q-A was indexed. eg.
     https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
    :type source: str
    :param questions: Required. List of questions associated with the answer.
    :type questions: list[str]
    :param metadata: List of metadata associated with the answer.
    :type metadata:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.MetadataDTO]
    :param context: Context of a QnA
    :type context:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnADTOContext
    :param last_updated_timestamp: Timestamp when the QnA was last updated.
    :type last_updated_timestamp: str
    """

    _validation = {
        'answer': {'required': True, 'max_length': 25000, 'min_length': 1},
        'source': {'max_length': 300},
        'questions': {'required': True},
        'last_updated_timestamp': {'max_length': 300},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'answer': {'key': 'answer', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'questions': {'key': 'questions', 'type': '[str]'},
        'metadata': {'key': 'metadata', 'type': '[MetadataDTO]'},
        'context': {'key': 'context', 'type': 'QnADTOContext'},
        'last_updated_timestamp': {'key': 'lastUpdatedTimestamp', 'type': 'str'},
    }

    def __init__(self, *, answer: str, questions, id: int=None, source: str=None, metadata=None, context=None, last_updated_timestamp: str=None, **kwargs) -> None:
        super(QnADTO, self).__init__(**kwargs)
        self.id = id
        self.answer = answer
        self.source = source
        self.questions = questions
        self.metadata = metadata
        self.context = context
        self.last_updated_timestamp = last_updated_timestamp


class PromptDTOQna(QnADTO):
    """QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object.

    All required parameters must be populated in order to send to Azure.

    :param id: Unique id for the Q-A.
    :type id: int
    :param answer: Required. Answer text
    :type answer: str
    :param source: Source from which Q-A was indexed. eg.
     https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
    :type source: str
    :param questions: Required. List of questions associated with the answer.
    :type questions: list[str]
    :param metadata: List of metadata associated with the answer.
    :type metadata:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.MetadataDTO]
    :param context: Context of a QnA
    :type context:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnADTOContext
    :param last_updated_timestamp: Timestamp when the QnA was last updated.
    :type last_updated_timestamp: str
    """

    _validation = {
        'answer': {'required': True, 'max_length': 25000, 'min_length': 1},
        'source': {'max_length': 300},
        'questions': {'required': True},
        'last_updated_timestamp': {'max_length': 300},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'answer': {'key': 'answer', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'questions': {'key': 'questions', 'type': '[str]'},
        'metadata': {'key': 'metadata', 'type': '[MetadataDTO]'},
        'context': {'key': 'context', 'type': 'QnADTOContext'},
        'last_updated_timestamp': {'key': 'lastUpdatedTimestamp', 'type': 'str'},
    }

    def __init__(self, *, answer: str, questions, id: int=None, source: str=None, metadata=None, context=None, last_updated_timestamp: str=None, **kwargs) -> None:
        super(PromptDTOQna, self).__init__(id=id, answer=answer, source=source, questions=questions, metadata=metadata, context=context, last_updated_timestamp=last_updated_timestamp, **kwargs)


class QnADocumentsDTO(Model):
    """List of QnADTO.

    :param qna_documents: List of answers.
    :type qna_documents:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnADTO]
    """

    _attribute_map = {
        'qna_documents': {'key': 'qnaDocuments', 'type': '[QnADTO]'},
    }

    def __init__(self, *, qna_documents=None, **kwargs) -> None:
        super(QnADocumentsDTO, self).__init__(**kwargs)
        self.qna_documents = qna_documents


class QnADTOContext(ContextDTO):
    """Context of a QnA.

    :param is_context_only: To mark if a prompt is relevant only with a
     previous question or not.
     true - Do not include this QnA as search result for queries without
     context
     false - ignores context and includes this QnA in search result
    :type is_context_only: bool
    :param prompts: List of prompts associated with the answer.
    :type prompts:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.PromptDTO]
    """

    _validation = {
        'prompts': {'max_items': 20},
    }

    _attribute_map = {
        'is_context_only': {'key': 'isContextOnly', 'type': 'bool'},
        'prompts': {'key': 'prompts', 'type': '[PromptDTO]'},
    }

    def __init__(self, *, is_context_only: bool=None, prompts=None, **kwargs) -> None:
        super(QnADTOContext, self).__init__(is_context_only=is_context_only, prompts=prompts, **kwargs)


class QnASearchResult(Model):
    """Represents Search Result.

    :param questions: List of questions.
    :type questions: list[str]
    :param answer: Answer.
    :type answer: str
    :param score: Search result score.
    :type score: float
    :param id: Id of the QnA result.
    :type id: int
    :param source: Source of QnA result.
    :type source: str
    :param metadata: List of metadata.
    :type metadata:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.MetadataDTO]
    :param context: Context object of the QnA
    :type context:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnASearchResultContext
    :param answer_span: Answer span object of QnA with respect to user's
     question.
    :type answer_span:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnASearchResultAnswerSpan
    """

    _attribute_map = {
        'questions': {'key': 'questions', 'type': '[str]'},
        'answer': {'key': 'answer', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
        'id': {'key': 'id', 'type': 'int'},
        'source': {'key': 'source', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': '[MetadataDTO]'},
        'context': {'key': 'context', 'type': 'QnASearchResultContext'},
        'answer_span': {'key': 'answerSpan', 'type': 'QnASearchResultAnswerSpan'},
    }

    def __init__(self, *, questions=None, answer: str=None, score: float=None, id: int=None, source: str=None, metadata=None, context=None, answer_span=None, **kwargs) -> None:
        super(QnASearchResult, self).__init__(**kwargs)
        self.questions = questions
        self.answer = answer
        self.score = score
        self.id = id
        self.source = source
        self.metadata = metadata
        self.context = context
        self.answer_span = answer_span


class QnASearchResultAnswerSpan(AnswerSpanResponseDTO):
    """Answer span object of QnA with respect to user's question.

    :param text: Predicted text of answer span.
    :type text: str
    :param score: Predicted score of answer span.
    :type score: float
    :param start_index: Start index of answer span in answer.
    :type start_index: int
    :param end_index: End index of answer span in answer.
    :type end_index: int
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
        'start_index': {'key': 'startIndex', 'type': 'int'},
        'end_index': {'key': 'endIndex', 'type': 'int'},
    }

    def __init__(self, *, text: str=None, score: float=None, start_index: int=None, end_index: int=None, **kwargs) -> None:
        super(QnASearchResultAnswerSpan, self).__init__(text=text, score=score, start_index=start_index, end_index=end_index, **kwargs)


class QnASearchResultContext(ContextDTO):
    """Context object of the QnA.

    :param is_context_only: To mark if a prompt is relevant only with a
     previous question or not.
     true - Do not include this QnA as search result for queries without
     context
     false - ignores context and includes this QnA in search result
    :type is_context_only: bool
    :param prompts: List of prompts associated with the answer.
    :type prompts:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.PromptDTO]
    """

    _validation = {
        'prompts': {'max_items': 20},
    }

    _attribute_map = {
        'is_context_only': {'key': 'isContextOnly', 'type': 'bool'},
        'prompts': {'key': 'prompts', 'type': '[PromptDTO]'},
    }

    def __init__(self, *, is_context_only: bool=None, prompts=None, **kwargs) -> None:
        super(QnASearchResultContext, self).__init__(is_context_only=is_context_only, prompts=prompts, **kwargs)


class QnASearchResultList(Model):
    """Represents List of Question Answers.

    :param answers: Represents Search Result list.
    :type answers:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnASearchResult]
    """

    _attribute_map = {
        'answers': {'key': 'answers', 'type': '[QnASearchResult]'},
    }

    def __init__(self, *, answers=None, **kwargs) -> None:
        super(QnASearchResultList, self).__init__(**kwargs)
        self.answers = answers


class QueryContextDTO(Model):
    """Context object with previous QnA's information.

    :param previous_qna_id: Previous QnA Id - qnaId of the top result.
    :type previous_qna_id: int
    :param previous_user_query: Previous user query.
    :type previous_user_query: str
    """

    _attribute_map = {
        'previous_qna_id': {'key': 'previousQnaId', 'type': 'int'},
        'previous_user_query': {'key': 'previousUserQuery', 'type': 'str'},
    }

    def __init__(self, *, previous_qna_id: int=None, previous_user_query: str=None, **kwargs) -> None:
        super(QueryContextDTO, self).__init__(**kwargs)
        self.previous_qna_id = previous_qna_id
        self.previous_user_query = previous_user_query


class QueryDTO(Model):
    """POST body schema to query the knowledgebase.

    :param qna_id: Exact qnaId to fetch from the knowledgebase, this field
     takes priority over question.
    :type qna_id: str
    :param question: User question to query against the knowledge base.
    :type question: str
    :param top: Max number of answers to be returned for the question.
    :type top: int
    :param user_id: Unique identifier for the user.
    :type user_id: str
    :param is_test: Query against the test index.
    :type is_test: bool
    :param score_threshold: Minimum threshold score for answers.
    :type score_threshold: float
    :param context: Context object with previous QnA's information.
    :type context:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.QueryDTOContext
    :param ranker_type: Optional field. Set to 'QuestionOnly' for using a
     question only Ranker.
    :type ranker_type: str
    :param strict_filters: Find QnAs that are associated with the given list
     of metadata.
    :type strict_filters:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.MetadataDTO]
    :param strict_filters_compound_operation_type: Optional field. Set to 'OR'
     for using OR operation for strict filters. Possible values include: 'AND',
     'OR'
    :type strict_filters_compound_operation_type: str or
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.StrictFiltersCompoundOperationType
    :param answer_span_request: To configure Answer span prediction feature.
    :type answer_span_request:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.QueryDTOAnswerSpanRequest
    """

    _attribute_map = {
        'qna_id': {'key': 'qnaId', 'type': 'str'},
        'question': {'key': 'question', 'type': 'str'},
        'top': {'key': 'top', 'type': 'int'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'is_test': {'key': 'isTest', 'type': 'bool'},
        'score_threshold': {'key': 'scoreThreshold', 'type': 'float'},
        'context': {'key': 'context', 'type': 'QueryDTOContext'},
        'ranker_type': {'key': 'rankerType', 'type': 'str'},
        'strict_filters': {'key': 'strictFilters', 'type': '[MetadataDTO]'},
        'strict_filters_compound_operation_type': {'key': 'strictFiltersCompoundOperationType', 'type': 'str'},
        'answer_span_request': {'key': 'answerSpanRequest', 'type': 'QueryDTOAnswerSpanRequest'},
    }

    def __init__(self, *, qna_id: str=None, question: str=None, top: int=None, user_id: str=None, is_test: bool=None, score_threshold: float=None, context=None, ranker_type: str=None, strict_filters=None, strict_filters_compound_operation_type=None, answer_span_request=None, **kwargs) -> None:
        super(QueryDTO, self).__init__(**kwargs)
        self.qna_id = qna_id
        self.question = question
        self.top = top
        self.user_id = user_id
        self.is_test = is_test
        self.score_threshold = score_threshold
        self.context = context
        self.ranker_type = ranker_type
        self.strict_filters = strict_filters
        self.strict_filters_compound_operation_type = strict_filters_compound_operation_type
        self.answer_span_request = answer_span_request


class QueryDTOAnswerSpanRequest(AnswerSpanRequestDTO):
    """To configure Answer span prediction feature.

    :param enable: Enable or Disable Answer Span prediction.
    :type enable: bool
    :param score_threshold: Minimum threshold score required to include an
     answer span.
    :type score_threshold: float
    :param top_answers_with_span: Number of Top answers to be considered for
     span prediction.
    :type top_answers_with_span: int
    """

    _validation = {
        'top_answers_with_span': {'maximum': 10, 'minimum': 1},
    }

    _attribute_map = {
        'enable': {'key': 'enable', 'type': 'bool'},
        'score_threshold': {'key': 'scoreThreshold', 'type': 'float'},
        'top_answers_with_span': {'key': 'topAnswersWithSpan', 'type': 'int'},
    }

    def __init__(self, *, enable: bool=None, score_threshold: float=None, top_answers_with_span: int=None, **kwargs) -> None:
        super(QueryDTOAnswerSpanRequest, self).__init__(enable=enable, score_threshold=score_threshold, top_answers_with_span=top_answers_with_span, **kwargs)


class QueryDTOContext(QueryContextDTO):
    """Context object with previous QnA's information.

    :param previous_qna_id: Previous QnA Id - qnaId of the top result.
    :type previous_qna_id: int
    :param previous_user_query: Previous user query.
    :type previous_user_query: str
    """

    _attribute_map = {
        'previous_qna_id': {'key': 'previousQnaId', 'type': 'int'},
        'previous_user_query': {'key': 'previousUserQuery', 'type': 'str'},
    }

    def __init__(self, *, previous_qna_id: int=None, previous_user_query: str=None, **kwargs) -> None:
        super(QueryDTOContext, self).__init__(previous_qna_id=previous_qna_id, previous_user_query=previous_user_query, **kwargs)


class ReplaceKbDTO(Model):
    """Post body schema for Replace KB operation.

    All required parameters must be populated in order to send to Azure.

    :param qn_alist: Required. List of Q-A (QnADTO) to be added to the
     knowledgebase. Q-A Ids are assigned by the service and should be omitted.
    :type qn_alist:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnADTO]
    """

    _validation = {
        'qn_alist': {'required': True},
    }

    _attribute_map = {
        'qn_alist': {'key': 'qnAList', 'type': '[QnADTO]'},
    }

    def __init__(self, *, qn_alist, **kwargs) -> None:
        super(ReplaceKbDTO, self).__init__(**kwargs)
        self.qn_alist = qn_alist


class UpdateContextDTO(Model):
    """Update Body schema to represent context to be updated.

    :param prompts_to_delete: List of prompts associated with qna to be
     deleted
    :type prompts_to_delete: list[int]
    :param prompts_to_add: List of prompts to be added to the qna.
    :type prompts_to_add:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.PromptDTO]
    :param is_context_only: To mark if a prompt is relevant only with a
     previous question or not.
     true - Do not include this QnA as search result for queries without
     context
     false - ignores context and includes this QnA in search result
    :type is_context_only: bool
    """

    _attribute_map = {
        'prompts_to_delete': {'key': 'promptsToDelete', 'type': '[int]'},
        'prompts_to_add': {'key': 'promptsToAdd', 'type': '[PromptDTO]'},
        'is_context_only': {'key': 'isContextOnly', 'type': 'bool'},
    }

    def __init__(self, *, prompts_to_delete=None, prompts_to_add=None, is_context_only: bool=None, **kwargs) -> None:
        super(UpdateContextDTO, self).__init__(**kwargs)
        self.prompts_to_delete = prompts_to_delete
        self.prompts_to_add = prompts_to_add
        self.is_context_only = is_context_only


class UpdateKbContentsDTO(Model):
    """PATCH body schema for Update operation in Update Kb.

    :param name: Friendly name for the knowledgebase.
    :type name: str
    :param qna_list: List of Q-A (UpdateQnaDTO) to be added to the
     knowledgebase.
    :type qna_list:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.UpdateQnaDTO]
    :param urls: List of existing URLs to be refreshed. The content will be
     extracted again and re-indexed.
    :type urls: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'qna_list': {'key': 'qnaList', 'type': '[UpdateQnaDTO]'},
        'urls': {'key': 'urls', 'type': '[str]'},
    }

    def __init__(self, *, name: str=None, qna_list=None, urls=None, **kwargs) -> None:
        super(UpdateKbContentsDTO, self).__init__(**kwargs)
        self.name = name
        self.qna_list = qna_list
        self.urls = urls


class UpdateKbOperationDTO(Model):
    """Contains list of QnAs to be updated.

    :param add: An instance of CreateKbInputDTO for add operation
    :type add:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.UpdateKbOperationDTOAdd
    :param delete: An instance of DeleteKbContentsDTO for delete Operation
    :type delete:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.UpdateKbOperationDTODelete
    :param update: An instance of UpdateKbContentsDTO for Update Operation
    :type update:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.UpdateKbOperationDTOUpdate
    :param enable_hierarchical_extraction: Enable hierarchical extraction of
     Q-A from files and urls. The value set during KB creation will be used if
     this field is not present.
    :type enable_hierarchical_extraction: bool
    :param default_answer_used_for_extraction: Text string to be used as the
     answer in any Q-A which has no extracted answer from the document but has
     a hierarchy. Required when EnableHierarchicalExtraction field is set to
     True.
    :type default_answer_used_for_extraction: str
    """

    _validation = {
        'default_answer_used_for_extraction': {'max_length': 300, 'min_length': 1},
    }

    _attribute_map = {
        'add': {'key': 'add', 'type': 'UpdateKbOperationDTOAdd'},
        'delete': {'key': 'delete', 'type': 'UpdateKbOperationDTODelete'},
        'update': {'key': 'update', 'type': 'UpdateKbOperationDTOUpdate'},
        'enable_hierarchical_extraction': {'key': 'enableHierarchicalExtraction', 'type': 'bool'},
        'default_answer_used_for_extraction': {'key': 'defaultAnswerUsedForExtraction', 'type': 'str'},
    }

    def __init__(self, *, add=None, delete=None, update=None, enable_hierarchical_extraction: bool=None, default_answer_used_for_extraction: str=None, **kwargs) -> None:
        super(UpdateKbOperationDTO, self).__init__(**kwargs)
        self.add = add
        self.delete = delete
        self.update = update
        self.enable_hierarchical_extraction = enable_hierarchical_extraction
        self.default_answer_used_for_extraction = default_answer_used_for_extraction


class UpdateKbOperationDTOAdd(CreateKbInputDTO):
    """An instance of CreateKbInputDTO for add operation.

    :param qna_list: List of QNA to be added to the index. Ids are generated
     by the service and should be omitted.
    :type qna_list:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.QnADTO]
    :param urls: List of URLs to be added to knowledgebase.
    :type urls: list[str]
    :param files: List of files to be added to knowledgebase.
    :type files:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.FileDTO]
    """

    _attribute_map = {
        'qna_list': {'key': 'qnaList', 'type': '[QnADTO]'},
        'urls': {'key': 'urls', 'type': '[str]'},
        'files': {'key': 'files', 'type': '[FileDTO]'},
    }

    def __init__(self, *, qna_list=None, urls=None, files=None, **kwargs) -> None:
        super(UpdateKbOperationDTOAdd, self).__init__(qna_list=qna_list, urls=urls, files=files, **kwargs)


class UpdateKbOperationDTODelete(DeleteKbContentsDTO):
    """An instance of DeleteKbContentsDTO for delete Operation.

    :param ids: List of Qna Ids to be deleted
    :type ids: list[int]
    :param sources: List of sources to be deleted from knowledgebase.
    :type sources: list[str]
    """

    _attribute_map = {
        'ids': {'key': 'ids', 'type': '[int]'},
        'sources': {'key': 'sources', 'type': '[str]'},
    }

    def __init__(self, *, ids=None, sources=None, **kwargs) -> None:
        super(UpdateKbOperationDTODelete, self).__init__(ids=ids, sources=sources, **kwargs)


class UpdateKbOperationDTOUpdate(UpdateKbContentsDTO):
    """An instance of UpdateKbContentsDTO for Update Operation.

    :param name: Friendly name for the knowledgebase.
    :type name: str
    :param qna_list: List of Q-A (UpdateQnaDTO) to be added to the
     knowledgebase.
    :type qna_list:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.UpdateQnaDTO]
    :param urls: List of existing URLs to be refreshed. The content will be
     extracted again and re-indexed.
    :type urls: list[str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'qna_list': {'key': 'qnaList', 'type': '[UpdateQnaDTO]'},
        'urls': {'key': 'urls', 'type': '[str]'},
    }

    def __init__(self, *, name: str=None, qna_list=None, urls=None, **kwargs) -> None:
        super(UpdateKbOperationDTOUpdate, self).__init__(name=name, qna_list=qna_list, urls=urls, **kwargs)


class UpdateMetadataDTO(Model):
    """PATCH Body schema to represent list of Metadata to be updated.

    :param delete: List of Metadata associated with answer to be deleted
    :type delete:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.MetadataDTO]
    :param add: List of metadata associated with answer to be added
    :type add:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.MetadataDTO]
    """

    _attribute_map = {
        'delete': {'key': 'delete', 'type': '[MetadataDTO]'},
        'add': {'key': 'add', 'type': '[MetadataDTO]'},
    }

    def __init__(self, *, delete=None, add=None, **kwargs) -> None:
        super(UpdateMetadataDTO, self).__init__(**kwargs)
        self.delete = delete
        self.add = add


class UpdateQnaDTO(Model):
    """PATCH Body schema for Update Qna List.

    :param id: Unique id for the Q-A
    :type id: int
    :param answer: Answer text
    :type answer: str
    :param source: Source from which Q-A was indexed. eg.
     https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
    :type source: str
    :param questions: List of questions associated with the answer.
    :type questions:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.UpdateQnaDTOQuestions
    :param metadata: List of metadata associated with the answer to be updated
    :type metadata:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.UpdateQnaDTOMetadata
    :param context: Context associated with Qna to be updated.
    :type context:
     ~azure.cognitiveservices.knowledge.qnamaker.preview.models.UpdateQnaDTOContext
    """

    _validation = {
        'id': {'maximum': 2147483647, 'minimum': 0},
        'source': {'max_length': 300},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'answer': {'key': 'answer', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'questions': {'key': 'questions', 'type': 'UpdateQnaDTOQuestions'},
        'metadata': {'key': 'metadata', 'type': 'UpdateQnaDTOMetadata'},
        'context': {'key': 'context', 'type': 'UpdateQnaDTOContext'},
    }

    def __init__(self, *, id: int=None, answer: str=None, source: str=None, questions=None, metadata=None, context=None, **kwargs) -> None:
        super(UpdateQnaDTO, self).__init__(**kwargs)
        self.id = id
        self.answer = answer
        self.source = source
        self.questions = questions
        self.metadata = metadata
        self.context = context


class UpdateQnaDTOContext(UpdateContextDTO):
    """Context associated with Qna to be updated.

    :param prompts_to_delete: List of prompts associated with qna to be
     deleted
    :type prompts_to_delete: list[int]
    :param prompts_to_add: List of prompts to be added to the qna.
    :type prompts_to_add:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.PromptDTO]
    :param is_context_only: To mark if a prompt is relevant only with a
     previous question or not.
     true - Do not include this QnA as search result for queries without
     context
     false - ignores context and includes this QnA in search result
    :type is_context_only: bool
    """

    _attribute_map = {
        'prompts_to_delete': {'key': 'promptsToDelete', 'type': '[int]'},
        'prompts_to_add': {'key': 'promptsToAdd', 'type': '[PromptDTO]'},
        'is_context_only': {'key': 'isContextOnly', 'type': 'bool'},
    }

    def __init__(self, *, prompts_to_delete=None, prompts_to_add=None, is_context_only: bool=None, **kwargs) -> None:
        super(UpdateQnaDTOContext, self).__init__(prompts_to_delete=prompts_to_delete, prompts_to_add=prompts_to_add, is_context_only=is_context_only, **kwargs)


class UpdateQnaDTOMetadata(UpdateMetadataDTO):
    """List of metadata associated with the answer to be updated.

    :param delete: List of Metadata associated with answer to be deleted
    :type delete:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.MetadataDTO]
    :param add: List of metadata associated with answer to be added
    :type add:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.MetadataDTO]
    """

    _attribute_map = {
        'delete': {'key': 'delete', 'type': '[MetadataDTO]'},
        'add': {'key': 'add', 'type': '[MetadataDTO]'},
    }

    def __init__(self, *, delete=None, add=None, **kwargs) -> None:
        super(UpdateQnaDTOMetadata, self).__init__(delete=delete, add=add, **kwargs)


class UpdateQuestionsDTO(Model):
    """PATCH Body schema for Update Kb which contains list of questions to be
    added and deleted.

    :param add: List of questions to be added
    :type add: list[str]
    :param delete: List of questions to be deleted.
    :type delete: list[str]
    """

    _attribute_map = {
        'add': {'key': 'add', 'type': '[str]'},
        'delete': {'key': 'delete', 'type': '[str]'},
    }

    def __init__(self, *, add=None, delete=None, **kwargs) -> None:
        super(UpdateQuestionsDTO, self).__init__(**kwargs)
        self.add = add
        self.delete = delete


class UpdateQnaDTOQuestions(UpdateQuestionsDTO):
    """List of questions associated with the answer.

    :param add: List of questions to be added
    :type add: list[str]
    :param delete: List of questions to be deleted.
    :type delete: list[str]
    """

    _attribute_map = {
        'add': {'key': 'add', 'type': '[str]'},
        'delete': {'key': 'delete', 'type': '[str]'},
    }

    def __init__(self, *, add=None, delete=None, **kwargs) -> None:
        super(UpdateQnaDTOQuestions, self).__init__(add=add, delete=delete, **kwargs)


class WordAlterationsDTO(Model):
    """Collection of word alterations.

    All required parameters must be populated in order to send to Azure.

    :param word_alterations: Required. Collection of word alterations.
    :type word_alterations:
     list[~azure.cognitiveservices.knowledge.qnamaker.preview.models.AlterationsDTO]
    """

    _validation = {
        'word_alterations': {'required': True},
    }

    _attribute_map = {
        'word_alterations': {'key': 'wordAlterations', 'type': '[AlterationsDTO]'},
    }

    def __init__(self, *, word_alterations, **kwargs) -> None:
        super(WordAlterationsDTO, self).__init__(**kwargs)
        self.word_alterations = word_alterations
