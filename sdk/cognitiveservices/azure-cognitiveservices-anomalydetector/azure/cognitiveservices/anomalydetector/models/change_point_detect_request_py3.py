# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ChangePointDetectRequest(Model):
    """ChangePointDetectRequest.

    All required parameters must be populated in order to send to Azure.

    :param series: Required. Time series data points. Points should be sorted
     by timestamp in ascending order to match the change point detection
     result.
    :type series: list[~azure.cognitiveservices.anomalydetector.models.Point]
    :param granularity: Required. Can only be one of yearly, monthly, weekly,
     daily, hourly or minutely. Granularity is used for verify whether input
     series is valid. Possible values include: 'yearly', 'monthly', 'weekly',
     'daily', 'hourly', 'minutely'
    :type granularity: str or
     ~azure.cognitiveservices.anomalydetector.models.Granularity
    :param custom_interval: Custom Interval is used to set non-standard time
     interval, for example, if the series is 5 minutes, request can be set as
     {"granularity":"minutely", "customInterval":5}.
    :type custom_interval: int
    :param period: Optional argument, periodic value of a time series. If the
     value is null or does not present, the API will determine the period
     automatically.
    :type period: int
    :param stable_trend_window: Optional argument, advanced model parameter, a
     default stableTrendWindow will be used in detection.
    :type stable_trend_window: int
    :param threshold: Optional argument, advanced model parameter, between
     0.0-1.0, the lower the value is, the larger the trend error will be which
     means less change point will be accepted.
    :type threshold: float
    """

    _validation = {
        'series': {'required': True},
        'granularity': {'required': True},
    }

    _attribute_map = {
        'series': {'key': 'series', 'type': '[Point]'},
        'granularity': {'key': 'granularity', 'type': 'Granularity'},
        'custom_interval': {'key': 'customInterval', 'type': 'int'},
        'period': {'key': 'period', 'type': 'int'},
        'stable_trend_window': {'key': 'stableTrendWindow', 'type': 'int'},
        'threshold': {'key': 'threshold', 'type': 'float'},
    }

    def __init__(self, *, series, granularity, custom_interval: int=None, period: int=None, stable_trend_window: int=None, threshold: float=None, **kwargs) -> None:
        super(ChangePointDetectRequest, self).__init__(**kwargs)
        self.series = series
        self.granularity = granularity
        self.custom_interval = custom_interval
        self.period = period
        self.stable_trend_window = stable_trend_window
        self.threshold = threshold
