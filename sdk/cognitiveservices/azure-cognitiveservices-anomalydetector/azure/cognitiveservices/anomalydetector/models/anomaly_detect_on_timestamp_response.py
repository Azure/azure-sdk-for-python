# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AnomalyDetectOnTimestampResponse(Model):
    """AnomalyDetectOnTimestampResponse.

    All required parameters must be populated in order to send to Azure.

    :param period: Required. Frequency extracted from the series, zero means
     no recurrent pattern has been found.
    :type period: int
    :param timestamp: Required. Timestamp of a point.
    :type timestamp: datetime
    :param value: Required. Value of a point.
    :type value: float
    :param expected_value: Required. ExpectedValue of a point on the
     timestamp.
    :type expected_value: float
    :param upper_margin: Required. UpperMargin of a point on the timestamp.
     UpperMargin is used to calculate upperBoundary, which equals to
     expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can
     be filtered by upperBoundary and lowerBoundary. By adjusting marginScale
     value, less significant anomalies can be filtered in client side.
    :type upper_margin: float
    :param lower_margin: Required. LowerMargin of a point on the timestamp.
     LowerMargin is used to calculate lowerBoundary, which equals to
     expectedValue - (100 - marginScale)*lowerMargin. Points between the
     boundary can be marked as normal ones in client side.
    :type lower_margin: float
    :param is_anomaly: Required. Anomaly property of a point on the timestamp.
     True means an anomaly either negative or positive has been detected.
    :type is_anomaly: bool
    :param is_negative_anomaly: Required. Anomaly status in negative direction
     on the timestamp. True means a negative anomaly has been detected. A
     negative anomaly means the point is detected as an anomaly and its real
     value is smaller than the expected one.
    :type is_negative_anomaly: bool
    :param is_positive_anomaly: Required. Anomaly status in positive direction
     on the timestamp. True means a positive anomaly has been detected. A
     positive anomaly means the point is detected as an anomaly and its real
     value is larger than the expected one.
    :type is_positive_anomaly: bool
    """

    _validation = {
        'period': {'required': True},
        'timestamp': {'required': True},
        'value': {'required': True},
        'expected_value': {'required': True},
        'upper_margin': {'required': True},
        'lower_margin': {'required': True},
        'is_anomaly': {'required': True},
        'is_negative_anomaly': {'required': True},
        'is_positive_anomaly': {'required': True},
    }

    _attribute_map = {
        'period': {'key': 'period', 'type': 'int'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'value': {'key': 'value', 'type': 'float'},
        'expected_value': {'key': 'expectedValue', 'type': 'float'},
        'upper_margin': {'key': 'upperMargin', 'type': 'float'},
        'lower_margin': {'key': 'lowerMargin', 'type': 'float'},
        'is_anomaly': {'key': 'isAnomaly', 'type': 'bool'},
        'is_negative_anomaly': {'key': 'isNegativeAnomaly', 'type': 'bool'},
        'is_positive_anomaly': {'key': 'isPositiveAnomaly', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(AnomalyDetectOnTimestampResponse, self).__init__(**kwargs)
        self.period = kwargs.get('period', None)
        self.timestamp = kwargs.get('timestamp', None)
        self.value = kwargs.get('value', None)
        self.expected_value = kwargs.get('expected_value', None)
        self.upper_margin = kwargs.get('upper_margin', None)
        self.lower_margin = kwargs.get('lower_margin', None)
        self.is_anomaly = kwargs.get('is_anomaly', None)
        self.is_negative_anomaly = kwargs.get('is_negative_anomaly', None)
        self.is_positive_anomaly = kwargs.get('is_positive_anomaly', None)
