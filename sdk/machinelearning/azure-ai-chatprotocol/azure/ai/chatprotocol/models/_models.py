# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class ChatChoice(_model_base.Model):
    """The representation of a single generated completion.

    All required parameters must be populated in order to send to Azure.

    :ivar index: The index of the of the chat choice, relative to the other choices in the same
     completion. Required.
    :vartype index: int
    :ivar message: The chat message for a given chat completion. Required.
    :vartype message: ~azure.ai.chatprotocol.models.ChatMessage
    :ivar session_state: Field that allows the chat app to store and retrieve data, the structure
     of such data is dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences.
    :vartype session_state: any
    :ivar context: Context allows the chat app to receive extra parameters from the client, such as
     temperature, functions, or
     customer_info. These parameters are specific to the chat app and not understood by the generic
     clients.
    :vartype context: dict[str, any]
    :ivar finish_reason: The reason this chat completion completed its generation. Required. Known
     values are: "stop" and "length".
    :vartype finish_reason: str or ~azure.ai.chatprotocol.models.FinishReason
    """

    index: int = rest_field()
    """The index of the of the chat choice, relative to the other choices in the same completion.
     Required."""
    message: "_models.ChatMessage" = rest_field()
    """The chat message for a given chat completion. Required."""
    session_state: Optional[Any] = rest_field()
    """Field that allows the chat app to store and retrieve data, the structure of such data is
     dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences."""
    context: Optional[Dict[str, Any]] = rest_field()
    """Context allows the chat app to receive extra parameters from the client, such as temperature,
     functions, or
     customer_info. These parameters are specific to the chat app and not understood by the generic
     clients."""
    finish_reason: Union[str, "_models.FinishReason"] = rest_field()
    """The reason this chat completion completed its generation. Required. Known values are: \"stop\"
     and \"length\"."""

    @overload
    def __init__(
        self,
        *,
        index: int,
        message: "_models.ChatMessage",
        finish_reason: Union[str, "_models.FinishReason"],
        session_state: Optional[Any] = None,
        context: Optional[Dict[str, Any]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ChatCompletion(_model_base.Model):
    """Representation of the response to a chat completion request.

    All required parameters must be populated in order to send to Azure.

    :ivar choices: The collection of generated completions. Required.
    :vartype choices: list[~azure.ai.chatprotocol.models.ChatChoice]
    """

    choices: List["_models.ChatChoice"] = rest_field()
    """The collection of generated completions. Required."""

    @overload
    def __init__(
        self,
        *,
        choices: List["_models.ChatChoice"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ChatCompletionChunk(_model_base.Model):
    """A single response to a streaming completion request.

    All required parameters must be populated in order to send to Azure.

    :ivar choices: The collection of choice deltas received in this chunk. Required.
    :vartype choices: list[~azure.ai.chatprotocol.models.ChoiceDelta]
    """

    choices: List["_models.ChoiceDelta"] = rest_field()
    """The collection of choice deltas received in this chunk. Required."""

    @overload
    def __init__(
        self,
        *,
        choices: List["_models.ChoiceDelta"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ChatCompletionOptions(_model_base.Model):
    """The configuration for a chat completion request.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar messages: The collection of context messages associated with this completion request.
     Required.
    :vartype messages: list[~azure.ai.chatprotocol.models.ChatMessage]
    :ivar stream: Indicates whether the completion is a streaming or non-streaming completion.
     Required. Default value is False.
    :vartype stream: bool
    :ivar session_state: Field that allows the chat app to store and retrieve data, the structure
     of such data is dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences.
    :vartype session_state: any
    :ivar context: Context allows the chat app to receive extra parameters from the client, such as
     temperature, functions, or
     customer_info. These parameters are specific to the chat app and not understood by the generic
     clients.
    :vartype context: dict[str, any]
    """

    messages: List["_models.ChatMessage"] = rest_field()
    """The collection of context messages associated with this completion request. Required."""
    stream: Literal[False] = rest_field()
    """Indicates whether the completion is a streaming or non-streaming completion. Required. Default
     value is False."""
    session_state: Optional[Any] = rest_field()
    """Field that allows the chat app to store and retrieve data, the structure of such data is
     dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences."""
    context: Optional[Dict[str, Any]] = rest_field()
    """Context allows the chat app to receive extra parameters from the client, such as temperature,
     functions, or
     customer_info. These parameters are specific to the chat app and not understood by the generic
     clients."""

    @overload
    def __init__(
        self,
        *,
        messages: List["_models.ChatMessage"],
        session_state: Optional[Any] = None,
        context: Optional[Dict[str, Any]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.stream: Literal[False] = False


class ChatMessage(_model_base.Model):
    """A single, role-attributed message within a chat completion interaction.

    All required parameters must be populated in order to send to Azure.

    :ivar content: The text associated with the message. Required.
    :vartype content: str
    :ivar role: The role associated with the message. Required. Known values are: "user", "system",
     and "assistant".
    :vartype role: str or ~azure.ai.chatprotocol.models.ChatRole
    :ivar session_state: Field that allows the chat app to store and retrieve data, the structure
     of such data is dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences.
    :vartype session_state: any
    """

    content: str = rest_field()
    """The text associated with the message. Required."""
    role: Union[str, "_models.ChatRole"] = rest_field()
    """The role associated with the message. Required. Known values are: \"user\", \"system\", and
     \"assistant\"."""
    session_state: Optional[Any] = rest_field()
    """Field that allows the chat app to store and retrieve data, the structure of such data is
     dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences."""

    @overload
    def __init__(
        self,
        *,
        content: str,
        role: Union[str, "_models.ChatRole"],
        session_state: Optional[Any] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ChatMessageDelta(_model_base.Model):
    """The representation of a delta message received in a streaming completion.

    :ivar content: An incremental part of the text associated with the message.
    :vartype content: str
    :ivar role: The role associated with the message. Known values are: "user", "system", and
     "assistant".
    :vartype role: str or ~azure.ai.chatprotocol.models.ChatRole
    :ivar session_state: Field that allows the chat app to store and retrieve data, the structure
     of such data is dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences.
    :vartype session_state: any
    """

    content: Optional[str] = rest_field()
    """An incremental part of the text associated with the message."""
    role: Optional[Union[str, "_models.ChatRole"]] = rest_field()
    """The role associated with the message. Known values are: \"user\", \"system\", and
     \"assistant\"."""
    session_state: Optional[Any] = rest_field()
    """Field that allows the chat app to store and retrieve data, the structure of such data is
     dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences."""

    @overload
    def __init__(
        self,
        *,
        content: Optional[str] = None,
        role: Optional[Union[str, "_models.ChatRole"]] = None,
        session_state: Optional[Any] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ChoiceDelta(_model_base.Model):
    """The representation of an incremental choice received in a streaming completion.

    All required parameters must be populated in order to send to Azure.

    :ivar index: The index of the of the chat choice, relative to the other choices in the same
     completion. Required.
    :vartype index: int
    :ivar delta: The partial message received for this choice. Required.
    :vartype delta: ~azure.ai.chatprotocol.models.ChatMessageDelta
    :ivar session_state: Field that allows the chat app to store and retrieve data, the structure
     of such data is dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences.
    :vartype session_state: any
    :ivar context: Context allows the chat app to receive extra parameters from the client, such as
     temperature, functions, or
     customer_info. These parameters are specific to the chat app and not understood by the generic
     clients.
    :vartype context: dict[str, any]
    :ivar finish_reason: The reason this chat completion completed its generation. Known values
     are: "stop" and "length".
    :vartype finish_reason: str or ~azure.ai.chatprotocol.models.FinishReason
    """

    index: int = rest_field()
    """The index of the of the chat choice, relative to the other choices in the same completion.
     Required."""
    delta: "_models.ChatMessageDelta" = rest_field()
    """The partial message received for this choice. Required."""
    session_state: Optional[Any] = rest_field()
    """Field that allows the chat app to store and retrieve data, the structure of such data is
     dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences."""
    context: Optional[Dict[str, Any]] = rest_field()
    """Context allows the chat app to receive extra parameters from the client, such as temperature,
     functions, or
     customer_info. These parameters are specific to the chat app and not understood by the generic
     clients."""
    finish_reason: Optional[Union[str, "_models.FinishReason"]] = rest_field()
    """The reason this chat completion completed its generation. Known values are: \"stop\" and
     \"length\"."""

    @overload
    def __init__(
        self,
        *,
        index: int,
        delta: "_models.ChatMessageDelta",
        session_state: Optional[Any] = None,
        context: Optional[Dict[str, Any]] = None,
        finish_reason: Optional[Union[str, "_models.FinishReason"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StreamingChatCompletionOptions(_model_base.Model):
    """The configuration for a streaming chat completion request.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar messages: The collection of context messages associated with this completion request.
     Required.
    :vartype messages: list[~azure.ai.chatprotocol.models.ChatMessage]
    :ivar stream: Indicates whether the completion is a streaming or non-streaming completion.
     Required. Default value is True.
    :vartype stream: bool
    :ivar session_state: Field that allows the chat app to store and retrieve data, the structure
     of such data is dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences.
    :vartype session_state: any
    :ivar context: Context allows the chat app to receive extra parameters from the client, such as
     temperature, functions, or
     customer_info. These parameters are specific to the chat app and not understood by the generic
     clients.
    :vartype context: dict[str, any]
    """

    messages: List["_models.ChatMessage"] = rest_field()
    """The collection of context messages associated with this completion request. Required."""
    stream: Literal[True] = rest_field()
    """Indicates whether the completion is a streaming or non-streaming completion. Required. Default
     value is True."""
    session_state: Optional[Any] = rest_field()
    """Field that allows the chat app to store and retrieve data, the structure of such data is
     dependant on the backend
     being used. The client must send back the data in this field unchanged in subsequent requests,
     until the chat app
     sends a new one. The data in this field can be used to implement stateful services, such as
     remembering previous
     conversations or user preferences."""
    context: Optional[Dict[str, Any]] = rest_field()
    """Context allows the chat app to receive extra parameters from the client, such as temperature,
     functions, or
     customer_info. These parameters are specific to the chat app and not understood by the generic
     clients."""

    @overload
    def __init__(
        self,
        *,
        messages: List["_models.ChatMessage"],
        session_state: Optional[Any] = None,
        context: Optional[Dict[str, Any]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.stream: Literal[True] = True
