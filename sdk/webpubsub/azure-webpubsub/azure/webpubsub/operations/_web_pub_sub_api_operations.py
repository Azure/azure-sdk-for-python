# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError


class WebPubSubApiOperations(object):
    """WebPubSubApiOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def broadcast(
            self, payload_message, hub=None, excluded=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Broadcast content inside request body to all the connected to endpoint
        "/ws/client".

        :param payload_message:
        :type payload_message: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param excluded: Excluded connection Ids
        :type excluded: list[str]
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.broadcast.metadata['url']

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if excluded is not None:
            query_parameters['excluded'] = self._serialize.query("excluded", excluded, '[str]', div=',')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/octet-stream'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(payload_message, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    broadcast.metadata = {'url': '/api/messages'}

    def send_to_user(
            self, id, payload_message, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Send content inside request body to the specific user.

        :param id: The user Id.
        :type id: str
        :param payload_message:
        :type payload_message: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.send_to_user.metadata['url']
        path_format_arguments = {
            'id': self._serialize.url("id", id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/octet-stream'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(payload_message, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_to_user.metadata = {'url': '/api/users/{id}/messages'}

    def send_to_connection(
            self, connection_id, payload_message, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Send content inside request body to the specific connection.

        :param connection_id: The connection Id.
        :type connection_id: str
        :param payload_message:
        :type payload_message: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.send_to_connection.metadata['url']
        path_format_arguments = {
            'connectionId': self._serialize.url("connection_id", connection_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/octet-stream'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(payload_message, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_to_connection.metadata = {'url': '/api/connections/{connectionId}/messages'}

    def group_broadcast(
            self, group, payload_message, hub=None, excluded=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Send content inside request body to a group of connections.

        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param payload_message:
        :type payload_message: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param excluded: Excluded connection Ids
        :type excluded: list[str]
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.group_broadcast.metadata['url']
        path_format_arguments = {
            'group': self._serialize.url("group", group, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if excluded is not None:
            query_parameters['excluded'] = self._serialize.query("excluded", excluded, '[str]', div=',')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/octet-stream'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(payload_message, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    group_broadcast.metadata = {'url': '/api/groups/{group}/messages'}

    def check_connection_existence(
            self, connection_id, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Check if the connection with the given connectionId exists.

        :param connection_id: The connection Id.
        :type connection_id: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.check_connection_existence.metadata['url']
        path_format_arguments = {
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    check_connection_existence.metadata = {'url': '/api/connections/{connectionId}'}

    def close_client_connection(
            self, connection_id, hub=None, reason=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Close the client connection.

        :param connection_id: Target connection Id
        :type connection_id: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param reason: The reason closing the client connection
        :type reason: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.close_client_connection.metadata['url']
        path_format_arguments = {
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if reason is not None:
            query_parameters['reason'] = self._serialize.query("reason", reason, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    close_client_connection.metadata = {'url': '/api/connections/{connectionId}'}

    def check_group_existence(
            self, group, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Check if there are any client connections inside the given group.

        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.check_group_existence.metadata['url']
        path_format_arguments = {
            'group': self._serialize.url("group", group, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    check_group_existence.metadata = {'url': '/api/groups/{group}'}

    def check_user_existence(
            self, user, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Check if there are any client connections connected for the given user.

        :param user: Target user Id
        :type user: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.check_user_existence.metadata['url']
        path_format_arguments = {
            'user': self._serialize.url("user", user, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    check_user_existence.metadata = {'url': '/api/users/{user}'}

    def add_connection_to_group(
            self, group, connection_id, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Add a connection to the target group.

        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param connection_id: Target connection Id
        :type connection_id: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.add_connection_to_group.metadata['url']
        path_format_arguments = {
            'group': self._serialize.url("group", group, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    add_connection_to_group.metadata = {'url': '/api/groups/{group}/connections/{connectionId}'}

    def remove_connection_from_group(
            self, group, connection_id, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Remove a connection from the target group.

        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param connection_id: Target connection Id
        :type connection_id: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.remove_connection_from_group.metadata['url']
        path_format_arguments = {
            'group': self._serialize.url("group", group, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    remove_connection_from_group.metadata = {'url': '/api/groups/{group}/connections/{connectionId}'}

    def check_user_existence_in_group(
            self, group, user, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Check whether a user exists in the target group.

        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param user: Target user Id
        :type user: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.check_user_existence_in_group.metadata['url']
        path_format_arguments = {
            'group': self._serialize.url("group", group, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'user': self._serialize.url("user", user, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    check_user_existence_in_group.metadata = {'url': '/api/users/{user}/groups/{group}'}

    def add_user_to_group(
            self, group, user, hub=None, ttl=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Add a user to the target group.

        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param user: Target user Id
        :type user: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param ttl: Specifies the seconds that the user exists in the group.
         If not set, the user lives in the group forever.
        :type ttl: int
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.add_user_to_group.metadata['url']
        path_format_arguments = {
            'group': self._serialize.url("group", group, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'user': self._serialize.url("user", user, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if ttl is not None:
            query_parameters['ttl'] = self._serialize.query("ttl", ttl, 'int')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    add_user_to_group.metadata = {'url': '/api/users/{user}/groups/{group}'}

    def remove_user_from_group(
            self, group, user, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Remove a user from the target group.

        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param user: Target user Id
        :type user: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.remove_user_from_group.metadata['url']
        path_format_arguments = {
            'group': self._serialize.url("group", group, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'user': self._serialize.url("user", user, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    remove_user_from_group.metadata = {'url': '/api/users/{user}/groups/{group}'}

    def remove_user_from_all_groups(
            self, user, hub=None, api_version="2020-10-01", custom_headers=None, raw=False, **operation_config):
        """Remove a user from all groups.

        :param user: Target user Id
        :type user: str
        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
         When it is not set, it uses the default hub
        :type hub: str
        :param api_version:
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.remove_user_from_all_groups.metadata['url']
        path_format_arguments = {
            'user': self._serialize.url("user", user, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if hub is not None:
            query_parameters['hub'] = self._serialize.query("hub", hub, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    remove_user_from_all_groups.metadata = {'url': '/api/users/{user}/groups'}
