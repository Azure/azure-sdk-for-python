# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Optional, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from azure.core.rest import AsyncHttpResponse, HttpRequest
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Dict

from ._configuration import AzureWebPubSubClientConfiguration
from .operations import HealthApiOperations
from .operations import WebPubSubOperations


class AzureWebPubSubClient(object):
    """AzureWebPubSubClient.

    :ivar health_api: HealthApiOperations operations
    :vartype health_api: azure.messaging.webpubsub.aio.operations.HealthApiOperations
    :ivar web_pub_sub: WebPubSubOperations operations
    :vartype web_pub_sub: azure.messaging.webpubsub.aio.operations.WebPubSubOperations
    """

    def __init__(
        self,
        **kwargs: Any
    ) -> None:
        base_url = 'None'
        self._config = AzureWebPubSubClientConfiguration(**kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {}  # type: Dict[str, Any]
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.health_api = HealthApiOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.web_pub_sub = WebPubSubOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def send_request(self, http_request: HttpRequest, **kwargs: Any) -> AsyncHttpResponse:
        """Runs the network request through the client's chained policies.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.rest.HttpRequest
        :keyword bool stream_response: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """
        request_copy = deepcopy(http_request)
        request_copy.url = self._client.format_url(request_copy.url)
        stream_response = kwargs.pop("stream_response", True)
        pipeline_response = await self._client._pipeline.run(request_copy, stream=stream_response, **kwargs)
        return AsyncHttpResponse(
            status_code=pipeline_response.http_response.status_code,
            request=request_copy,
            _internal_response=pipeline_response.http_response
        )

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "AzureWebPubSubClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
