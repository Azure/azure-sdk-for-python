# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError


class WebPubSubOperations(object):
    """WebPubSubOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def send_to_all(
            self, hub, message, excluded=None, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Broadcast content inside request body to all the connected client
        connections.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param message: The payload body.
        :type message: str
        :param excluded: Excluded connection Ids.
        :type excluded: list[str]
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.send_to_all.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if excluded is not None:
            query_parameters['excluded'] = self._serialize.query("excluded", excluded, '[str]', div=',')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(message, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_to_all.metadata = {'url': '/api/hubs/{hub}/:send'}

    def connection_exists(
            self, hub, connection_id, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Check if the connection with the given connectionId exists.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param connection_id: The connection Id.
        :type connection_id: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.connection_exists.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    connection_exists.metadata = {'url': '/api/hubs/{hub}/connections/{connectionId}'}

    def close_client_connection(
            self, hub, connection_id, reason=None, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Close the client connection.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param connection_id: Target connection Id.
        :type connection_id: str
        :param reason: The reason closing the client connection.
        :type reason: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.close_client_connection.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if reason is not None:
            query_parameters['reason'] = self._serialize.query("reason", reason, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    close_client_connection.metadata = {'url': '/api/hubs/{hub}/connections/{connectionId}'}

    def send_to_connection(
            self, hub, connection_id, message, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Send content inside request body to the specific connection.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param connection_id: The connection Id.
        :type connection_id: str
        :param message: The payload body.
        :type message: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.send_to_connection.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(message, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_to_connection.metadata = {'url': '/api/hubs/{hub}/connections/{connectionId}/:send'}

    def group_exists(
            self, hub, group, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Check if there are any client connections inside the given group.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.group_exists.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'group': self._serialize.url("group", group, 'str', max_length=1024, min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    group_exists.metadata = {'url': '/api/hubs/{hub}/groups/{group}'}

    def send_to_group(
            self, hub, group, message, excluded=None, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Send content inside request body to a group of connections.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param message: The payload body.
        :type message: str
        :param excluded: Excluded connection Ids
        :type excluded: list[str]
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.send_to_group.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'group': self._serialize.url("group", group, 'str', max_length=1024, min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if excluded is not None:
            query_parameters['excluded'] = self._serialize.query("excluded", excluded, '[str]', div=',')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(message, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_to_group.metadata = {'url': '/api/hubs/{hub}/groups/{group}/:send'}

    def add_connection_to_group(
            self, hub, group, connection_id, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Add a connection to the target group.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param connection_id: Target connection Id
        :type connection_id: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.add_connection_to_group.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'group': self._serialize.url("group", group, 'str', max_length=1024, min_length=1),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    add_connection_to_group.metadata = {'url': '/api/hubs/{hub}/groups/{group}/connections/{connectionId}'}

    def remove_connection_from_group(
            self, hub, group, connection_id, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Remove a connection from the target group.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param connection_id: Target connection Id.
        :type connection_id: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.remove_connection_from_group.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'group': self._serialize.url("group", group, 'str', max_length=1024, min_length=1),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    remove_connection_from_group.metadata = {'url': '/api/hubs/{hub}/groups/{group}/connections/{connectionId}'}

    def user_exists(
            self, hub, user_id, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Check if there are any client connections connected for the given user.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param user_id: Target user Id.
        :type user_id: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.user_exists.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'userId': self._serialize.url("user_id", user_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    user_exists.metadata = {'url': '/api/hubs/{hub}/users/{userId}'}

    def send_to_user(
            self, hub, user_id, message, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Send content inside request body to the specific user.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param user_id: The user Id.
        :type user_id: str
        :param message: The payload body.
        :type message: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.send_to_user.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'userId': self._serialize.url("user_id", user_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(message, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    send_to_user.metadata = {'url': '/api/hubs/{hub}/users/{userId}/:send'}

    def add_user_to_group(
            self, hub, group, user_id, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Add a user to the target group.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param user_id: Target user Id.
        :type user_id: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.add_user_to_group.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'group': self._serialize.url("group", group, 'str', max_length=1024, min_length=1),
            'userId': self._serialize.url("user_id", user_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    add_user_to_group.metadata = {'url': '/api/hubs/{hub}/users/{userId}/groups/{group}'}

    def remove_user_from_group(
            self, hub, group, user_id, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Remove a user from the target group.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param group: Target group name, which length should be greater than 0
         and less than 1025.
        :type group: str
        :param user_id: Target user Id.
        :type user_id: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.remove_user_from_group.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'group': self._serialize.url("group", group, 'str', max_length=1024, min_length=1),
            'userId': self._serialize.url("user_id", user_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    remove_user_from_group.metadata = {'url': '/api/hubs/{hub}/users/{userId}/groups/{group}'}

    def remove_user_from_all_groups(
            self, hub, user_id, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Remove a user from all groups.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param user_id: Target user Id.
        :type user_id: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.remove_user_from_all_groups.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'userId': self._serialize.url("user_id", user_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    remove_user_from_all_groups.metadata = {'url': '/api/hubs/{hub}/users/{userId}/groups'}

    def grant_permission(
            self, hub, permission, connection_id, target_name=None, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Grant permission to the connection.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param permission: The permission: current supported actions are
         joinLeaveGroup and sendToGroup. Possible values include:
         'sendToGroup', 'joinLeaveGroup'
        :type permission: str or
         ~azure.messaging.webpubsub.models.WebPubSubPermission
        :param connection_id: Target connection Id.
        :type connection_id: str
        :param target_name: Optional. If not set, grant the permission to all
         the targets. If set, grant the permission to the specific target. The
         meaning of the target depends on the specific permission.
        :type target_name: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.grant_permission.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'permission': self._serialize.url("permission", permission, 'str'),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if target_name is not None:
            query_parameters['targetName'] = self._serialize.query("target_name", target_name, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    grant_permission.metadata = {'url': '/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}'}

    def revoke_permission(
            self, hub, permission, connection_id, target_name=None, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Revoke permission for the connection.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param permission: The permission: current supported actions are
         joinLeaveGroup and sendToGroup. Possible values include:
         'sendToGroup', 'joinLeaveGroup'
        :type permission: str or
         ~azure.messaging.webpubsub.models.WebPubSubPermission
        :param connection_id: Target connection Id.
        :type connection_id: str
        :param target_name: Optional. If not set, revoke the permission for
         all targets. If set, revoke the permission for the specific target.
         The meaning of the target depends on the specific permission.
        :type target_name: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.revoke_permission.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'permission': self._serialize.url("permission", permission, 'str'),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if target_name is not None:
            query_parameters['targetName'] = self._serialize.query("target_name", target_name, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    revoke_permission.metadata = {'url': '/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}'}

    def check_permission(
            self, hub, permission, connection_id, target_name=None, api_version="2021-05-01-preview", custom_headers=None, raw=False, **operation_config):
        """Check if a connection has permission to the specified action.

        :param hub: Target hub name, which should start with alphabetic
         characters and only contain alpha-numeric characters or underscore.
        :type hub: str
        :param permission: The permission: current supported actions are
         joinLeaveGroup and sendToGroup. Possible values include:
         'sendToGroup', 'joinLeaveGroup'
        :type permission: str or
         ~azure.messaging.webpubsub.models.WebPubSubPermission
        :param connection_id: Target connection Id.
        :type connection_id: str
        :param target_name: Optional. If not set, get the permission for all
         targets. If set, get the permission for the specific target. The
         meaning of the target depends on the specific permission.
        :type target_name: str
        :param api_version: The version of the REST APIs.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.check_permission.metadata['url']
        path_format_arguments = {
            'hub': self._serialize.url("hub", hub, 'str', pattern=r'^[A-Za-z][A-Za-z0-9_`,.[\]]{0,127}$'),
            'permission': self._serialize.url("permission", permission, 'str'),
            'connectionId': self._serialize.url("connection_id", connection_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if target_name is not None:
            query_parameters['targetName'] = self._serialize.query("target_name", target_name, 'str')
        if api_version is not None:
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 404]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    check_permission.metadata = {'url': '/api/hubs/{hub}/permissions/{permission}/connections/{connectionId}'}
