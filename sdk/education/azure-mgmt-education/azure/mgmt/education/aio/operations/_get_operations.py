# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._get_operations import build_grant_request, build_lab_request, build_student_lab_request, build_student_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class GetOperations:
    """GetOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.education.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def grant(
        self,
        billing_account_name: str,
        billing_profile_name: str,
        include_allocated_budget: Optional[bool] = None,
        **kwargs: Any
    ) -> "_models.GrantDetails":
        """Get details for a specific grant linked to the provided billing account and billing profile.

        :param billing_account_name: Billing account name.
        :type billing_account_name: str
        :param billing_profile_name: Billing profile name.
        :type billing_profile_name: str
        :param include_allocated_budget: May be used to include information about budget that has been
         allocated. Default value is None.
        :type include_allocated_budget: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GrantDetails, or the result of cls(response)
        :rtype: ~azure.mgmt.education.models.GrantDetails
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.GrantDetails"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_grant_request(
            billing_account_name=billing_account_name,
            billing_profile_name=billing_profile_name,
            api_version=api_version,
            include_allocated_budget=include_allocated_budget,
            template_url=self.grant.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseBody, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('GrantDetails', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    grant.metadata = {'url': "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/providers/Microsoft.Education/grants/default"}  # type: ignore


    @distributed_trace_async
    async def lab(
        self,
        billing_account_name: str,
        billing_profile_name: str,
        invoice_section_name: str,
        include_budget: Optional[bool] = None,
        **kwargs: Any
    ) -> "_models.LabDetails":
        """Get the details for a specific lab associated with the provided billing account name, billing
        profile name, and invoice section name.

        :param billing_account_name: Billing account name.
        :type billing_account_name: str
        :param billing_profile_name: Billing profile name.
        :type billing_profile_name: str
        :param invoice_section_name: Invoice section name.
        :type invoice_section_name: str
        :param include_budget: May be used to include budget information. Default value is None.
        :type include_budget: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LabDetails, or the result of cls(response)
        :rtype: ~azure.mgmt.education.models.LabDetails
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LabDetails"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_lab_request(
            billing_account_name=billing_account_name,
            billing_profile_name=billing_profile_name,
            invoice_section_name=invoice_section_name,
            api_version=api_version,
            include_budget=include_budget,
            template_url=self.lab.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseBody, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('LabDetails', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    lab.metadata = {'url': "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default"}  # type: ignore


    @distributed_trace_async
    async def student(
        self,
        billing_account_name: str,
        billing_profile_name: str,
        invoice_section_name: str,
        student_alias: str,
        **kwargs: Any
    ) -> "_models.StudentDetails":
        """Get the details for a specific student in the specified lab by student alias.

        :param billing_account_name: Billing account name.
        :type billing_account_name: str
        :param billing_profile_name: Billing profile name.
        :type billing_profile_name: str
        :param invoice_section_name: Invoice section name.
        :type invoice_section_name: str
        :param student_alias: Student alias.
        :type student_alias: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: StudentDetails, or the result of cls(response)
        :rtype: ~azure.mgmt.education.models.StudentDetails
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.StudentDetails"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_student_request(
            billing_account_name=billing_account_name,
            billing_profile_name=billing_profile_name,
            invoice_section_name=invoice_section_name,
            student_alias=student_alias,
            api_version=api_version,
            template_url=self.student.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseBody, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('StudentDetails', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    student.metadata = {'url': "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Education/labs/default/students/{studentAlias}"}  # type: ignore


    @distributed_trace_async
    async def student_lab(
        self,
        student_lab_name: str,
        **kwargs: Any
    ) -> "_models.StudentLabDetails":
        """Get the details for a specified lab associated with the student lab.

        :param student_lab_name: Student lab name.
        :type student_lab_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: StudentLabDetails, or the result of cls(response)
        :rtype: ~azure.mgmt.education.models.StudentLabDetails
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.StudentLabDetails"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str

        
        request = build_student_lab_request(
            student_lab_name=student_lab_name,
            api_version=api_version,
            template_url=self.student_lab.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponseBody, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('StudentLabDetails', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    student_lab.metadata = {'url': "/providers/Microsoft.Education/studentLabs/{studentLabName}"}  # type: ignore

