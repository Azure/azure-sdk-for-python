# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse

from .. import models


class ReceivedRoutesOperations(object):
    """ReceivedRoutesOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The client API version. Constant value: "2020-10-01".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.api_version = "2020-10-01"

        self.config = config

    def list_by_peering(
            self, resource_group_name, peering_name, prefix=None, as_path=None, origin_as_validation_state=None, rpki_validation_state=None, skip_token=None, custom_headers=None, raw=False, **operation_config):
        """Lists the prefixes received over the specified peering under the given
        subscription and resource group.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param peering_name: The name of the peering.
        :type peering_name: str
        :param prefix: The optional prefix that can be used to filter the
         routes.
        :type prefix: str
        :param as_path: The optional AS path that can be used to filter the
         routes.
        :type as_path: str
        :param origin_as_validation_state: The optional origin AS validation
         state that can be used to filter the routes.
        :type origin_as_validation_state: str
        :param rpki_validation_state: The optional RPKI validation state that
         can be used to filter the routes.
        :type rpki_validation_state: str
        :param skip_token: The optional page continuation token that is used
         in the event of paginated result.
        :type skip_token: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of PeeringReceivedRoute
        :rtype:
         ~azure.mgmt.peering.models.PeeringReceivedRoutePaged[~azure.mgmt.peering.models.PeeringReceivedRoute]
        :raises:
         :class:`ErrorResponseException<azure.mgmt.peering.models.ErrorResponseException>`
        """
        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_by_peering.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
                    'peeringName': self._serialize.url("peering_name", peering_name, 'str'),
                    'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str')
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                if prefix is not None:
                    query_parameters['prefix'] = self._serialize.query("prefix", prefix, 'str')
                if as_path is not None:
                    query_parameters['asPath'] = self._serialize.query("as_path", as_path, 'str')
                if origin_as_validation_state is not None:
                    query_parameters['originAsValidationState'] = self._serialize.query("origin_as_validation_state", origin_as_validation_state, 'str')
                if rpki_validation_state is not None:
                    query_parameters['rpkiValidationState'] = self._serialize.query("rpki_validation_state", rpki_validation_state, 'str')
                if skip_token is not None:
                    query_parameters['$skipToken'] = self._serialize.query("skip_token", skip_token, 'str')
                query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                raise models.ErrorResponseException(self._deserialize, response)

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.PeeringReceivedRoutePaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    list_by_peering.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Peering/peerings/{peeringName}/receivedRoutes'}
