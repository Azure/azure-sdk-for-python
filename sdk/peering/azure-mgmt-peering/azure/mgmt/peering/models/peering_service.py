# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource import Resource


class PeeringService(Resource):
    """Peering Service.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the resource.
    :vartype name: str
    :ivar id: The ID of the resource.
    :vartype id: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param peering_service_location: The PeeringServiceLocation of the
     Customer.
    :type peering_service_location: str
    :param peering_service_provider: The MAPS Provider Name.
    :type peering_service_provider: str
    :ivar provisioning_state: The provisioning state of the resource. Possible
     values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.peering.models.ProvisioningState
    :param location: Required. The location of the resource.
    :type location: str
    :param tags: The resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'peering_service_location': {'key': 'properties.peeringServiceLocation', 'type': 'str'},
        'peering_service_provider': {'key': 'properties.peeringServiceProvider', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(PeeringService, self).__init__(**kwargs)
        self.peering_service_location = kwargs.get('peering_service_location', None)
        self.peering_service_provider = kwargs.get('peering_service_provider', None)
        self.provisioning_state = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
