# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource_py3 import Resource


class PeeringServicePrefix(Resource):
    """The peering service prefix class.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: The name of the resource.
    :vartype name: str
    :ivar id: The ID of the resource.
    :vartype id: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param prefix: Valid route prefix
    :type prefix: str
    :param prefix_validation_state: The prefix validation state. Possible
     values include: 'None', 'Invalid', 'Verified', 'Failed', 'Pending',
     'Unknown'
    :type prefix_validation_state: str or
     ~azure.mgmt.peering.models.PrefixValidationState
    :param learned_type: The prefix learned type. Possible values include:
     'None', 'ViaPartner', 'ViaSession'
    :type learned_type: str or ~azure.mgmt.peering.models.LearnedType
    :ivar provisioning_state: The provisioning state of the resource. Possible
     values include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.peering.models.ProvisioningState
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'prefix': {'key': 'properties.prefix', 'type': 'str'},
        'prefix_validation_state': {'key': 'properties.prefixValidationState', 'type': 'str'},
        'learned_type': {'key': 'properties.learnedType', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(self, *, prefix: str=None, prefix_validation_state=None, learned_type=None, **kwargs) -> None:
        super(PeeringServicePrefix, self).__init__(**kwargs)
        self.prefix = prefix
        self.prefix_validation_state = prefix_validation_state
        self.learned_type = learned_type
        self.provisioning_state = None
