# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class HttpAuthentication(_serialization.Model):
    """HttpAuthentication.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    OAuthAuthentication, BasicAuthentication, ClientCertAuthentication

    All required parameters must be populated in order to send to Azure.

    :ivar type: Gets or sets the HTTP authentication type. Required. Known values are:
     "NotSpecified", "ClientCertificate", "ActiveDirectoryOAuth", and "Basic".
    :vartype type: str or ~azure.mgmt.scheduler.models.HttpAuthenticationType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    _subtype_map = {
        "type": {
            "ActiveDirectoryOAuth": "OAuthAuthentication",
            "Basic": "BasicAuthentication",
            "ClientCertificate": "ClientCertAuthentication",
        }
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None


class BasicAuthentication(HttpAuthentication):
    """BasicAuthentication.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Gets or sets the HTTP authentication type. Required. Known values are:
     "NotSpecified", "ClientCertificate", "ActiveDirectoryOAuth", and "Basic".
    :vartype type: str or ~azure.mgmt.scheduler.models.HttpAuthenticationType
    :ivar username: Gets or sets the username.
    :vartype username: str
    :ivar password: Gets or sets the password, return value will always be empty.
    :vartype password: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "username": {"key": "username", "type": "str"},
        "password": {"key": "password", "type": "str"},
    }

    def __init__(self, *, username: Optional[str] = None, password: Optional[str] = None, **kwargs):
        """
        :keyword username: Gets or sets the username.
        :paramtype username: str
        :keyword password: Gets or sets the password, return value will always be empty.
        :paramtype password: str
        """
        super().__init__(**kwargs)
        self.type: str = "Basic"
        self.username = username
        self.password = password


class ClientCertAuthentication(HttpAuthentication):
    """ClientCertAuthentication.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Gets or sets the HTTP authentication type. Required. Known values are:
     "NotSpecified", "ClientCertificate", "ActiveDirectoryOAuth", and "Basic".
    :vartype type: str or ~azure.mgmt.scheduler.models.HttpAuthenticationType
    :ivar password: Gets or sets the certificate password, return value will always be empty.
    :vartype password: str
    :ivar pfx: Gets or sets the pfx certificate. Accepts certification in base64 encoding, return
     value will always be empty.
    :vartype pfx: str
    :ivar certificate_thumbprint: Gets or sets the certificate thumbprint.
    :vartype certificate_thumbprint: str
    :ivar certificate_expiration_date: Gets or sets the certificate expiration date.
    :vartype certificate_expiration_date: ~datetime.datetime
    :ivar certificate_subject_name: Gets or sets the certificate subject name.
    :vartype certificate_subject_name: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "password": {"key": "password", "type": "str"},
        "pfx": {"key": "pfx", "type": "str"},
        "certificate_thumbprint": {"key": "certificateThumbprint", "type": "str"},
        "certificate_expiration_date": {"key": "certificateExpirationDate", "type": "iso-8601"},
        "certificate_subject_name": {"key": "certificateSubjectName", "type": "str"},
    }

    def __init__(
        self,
        *,
        password: Optional[str] = None,
        pfx: Optional[str] = None,
        certificate_thumbprint: Optional[str] = None,
        certificate_expiration_date: Optional[datetime.datetime] = None,
        certificate_subject_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword password: Gets or sets the certificate password, return value will always be empty.
        :paramtype password: str
        :keyword pfx: Gets or sets the pfx certificate. Accepts certification in base64 encoding,
         return value will always be empty.
        :paramtype pfx: str
        :keyword certificate_thumbprint: Gets or sets the certificate thumbprint.
        :paramtype certificate_thumbprint: str
        :keyword certificate_expiration_date: Gets or sets the certificate expiration date.
        :paramtype certificate_expiration_date: ~datetime.datetime
        :keyword certificate_subject_name: Gets or sets the certificate subject name.
        :paramtype certificate_subject_name: str
        """
        super().__init__(**kwargs)
        self.type: str = "ClientCertificate"
        self.password = password
        self.pfx = pfx
        self.certificate_thumbprint = certificate_thumbprint
        self.certificate_expiration_date = certificate_expiration_date
        self.certificate_subject_name = certificate_subject_name


class HttpRequest(_serialization.Model):
    """HttpRequest.

    :ivar authentication: Gets or sets the authentication method of the request.
    :vartype authentication: ~azure.mgmt.scheduler.models.HttpAuthentication
    :ivar uri: Gets or sets the URI of the request.
    :vartype uri: str
    :ivar method: Gets or sets the method of the request.
    :vartype method: str
    :ivar body: Gets or sets the request body.
    :vartype body: str
    :ivar headers: Gets or sets the headers.
    :vartype headers: dict[str, str]
    """

    _attribute_map = {
        "authentication": {"key": "authentication", "type": "HttpAuthentication"},
        "uri": {"key": "uri", "type": "str"},
        "method": {"key": "method", "type": "str"},
        "body": {"key": "body", "type": "str"},
        "headers": {"key": "headers", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        authentication: Optional["_models.HttpAuthentication"] = None,
        uri: Optional[str] = None,
        method: Optional[str] = None,
        body: Optional[str] = None,
        headers: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword authentication: Gets or sets the authentication method of the request.
        :paramtype authentication: ~azure.mgmt.scheduler.models.HttpAuthentication
        :keyword uri: Gets or sets the URI of the request.
        :paramtype uri: str
        :keyword method: Gets or sets the method of the request.
        :paramtype method: str
        :keyword body: Gets or sets the request body.
        :paramtype body: str
        :keyword headers: Gets or sets the headers.
        :paramtype headers: dict[str, str]
        """
        super().__init__(**kwargs)
        self.authentication = authentication
        self.uri = uri
        self.method = method
        self.body = body
        self.headers = headers


class JobAction(_serialization.Model):
    """JobAction.

    :ivar type: Gets or sets the job action type. Known values are: "Http", "Https",
     "StorageQueue", "ServiceBusQueue", and "ServiceBusTopic".
    :vartype type: str or ~azure.mgmt.scheduler.models.JobActionType
    :ivar request: Gets or sets the http requests.
    :vartype request: ~azure.mgmt.scheduler.models.HttpRequest
    :ivar queue_message: Gets or sets the storage queue message.
    :vartype queue_message: ~azure.mgmt.scheduler.models.StorageQueueMessage
    :ivar service_bus_queue_message: Gets or sets the service bus queue message.
    :vartype service_bus_queue_message: ~azure.mgmt.scheduler.models.ServiceBusQueueMessage
    :ivar service_bus_topic_message: Gets or sets the service bus topic message.
    :vartype service_bus_topic_message: ~azure.mgmt.scheduler.models.ServiceBusTopicMessage
    :ivar retry_policy: Gets or sets the retry policy.
    :vartype retry_policy: ~azure.mgmt.scheduler.models.RetryPolicy
    :ivar error_action: Gets or sets the error action.
    :vartype error_action: ~azure.mgmt.scheduler.models.JobErrorAction
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "request": {"key": "request", "type": "HttpRequest"},
        "queue_message": {"key": "queueMessage", "type": "StorageQueueMessage"},
        "service_bus_queue_message": {"key": "serviceBusQueueMessage", "type": "ServiceBusQueueMessage"},
        "service_bus_topic_message": {"key": "serviceBusTopicMessage", "type": "ServiceBusTopicMessage"},
        "retry_policy": {"key": "retryPolicy", "type": "RetryPolicy"},
        "error_action": {"key": "errorAction", "type": "JobErrorAction"},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.JobActionType"]] = None,
        request: Optional["_models.HttpRequest"] = None,
        queue_message: Optional["_models.StorageQueueMessage"] = None,
        service_bus_queue_message: Optional["_models.ServiceBusQueueMessage"] = None,
        service_bus_topic_message: Optional["_models.ServiceBusTopicMessage"] = None,
        retry_policy: Optional["_models.RetryPolicy"] = None,
        error_action: Optional["_models.JobErrorAction"] = None,
        **kwargs
    ):
        """
        :keyword type: Gets or sets the job action type. Known values are: "Http", "Https",
         "StorageQueue", "ServiceBusQueue", and "ServiceBusTopic".
        :paramtype type: str or ~azure.mgmt.scheduler.models.JobActionType
        :keyword request: Gets or sets the http requests.
        :paramtype request: ~azure.mgmt.scheduler.models.HttpRequest
        :keyword queue_message: Gets or sets the storage queue message.
        :paramtype queue_message: ~azure.mgmt.scheduler.models.StorageQueueMessage
        :keyword service_bus_queue_message: Gets or sets the service bus queue message.
        :paramtype service_bus_queue_message: ~azure.mgmt.scheduler.models.ServiceBusQueueMessage
        :keyword service_bus_topic_message: Gets or sets the service bus topic message.
        :paramtype service_bus_topic_message: ~azure.mgmt.scheduler.models.ServiceBusTopicMessage
        :keyword retry_policy: Gets or sets the retry policy.
        :paramtype retry_policy: ~azure.mgmt.scheduler.models.RetryPolicy
        :keyword error_action: Gets or sets the error action.
        :paramtype error_action: ~azure.mgmt.scheduler.models.JobErrorAction
        """
        super().__init__(**kwargs)
        self.type = type
        self.request = request
        self.queue_message = queue_message
        self.service_bus_queue_message = service_bus_queue_message
        self.service_bus_topic_message = service_bus_topic_message
        self.retry_policy = retry_policy
        self.error_action = error_action


class JobCollectionDefinition(_serialization.Model):
    """JobCollectionDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Gets the job collection resource identifier.
    :vartype id: str
    :ivar type: Gets the job collection resource type.
    :vartype type: str
    :ivar name: Gets or sets the job collection resource name.
    :vartype name: str
    :ivar location: Gets or sets the storage account location.
    :vartype location: str
    :ivar tags: Gets or sets the tags.
    :vartype tags: dict[str, str]
    :ivar properties: Gets or sets the job collection properties.
    :vartype properties: ~azure.mgmt.scheduler.models.JobCollectionProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "JobCollectionProperties"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.JobCollectionProperties"] = None,
        **kwargs
    ):
        """
        :keyword name: Gets or sets the job collection resource name.
        :paramtype name: str
        :keyword location: Gets or sets the storage account location.
        :paramtype location: str
        :keyword tags: Gets or sets the tags.
        :paramtype tags: dict[str, str]
        :keyword properties: Gets or sets the job collection properties.
        :paramtype properties: ~azure.mgmt.scheduler.models.JobCollectionProperties
        """
        super().__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = name
        self.location = location
        self.tags = tags
        self.properties = properties


class JobCollectionListResult(_serialization.Model):
    """JobCollectionListResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Gets the job collections.
    :vartype value: list[~azure.mgmt.scheduler.models.JobCollectionDefinition]
    :ivar next_link: Gets or sets the URL to get the next set of job collections.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[JobCollectionDefinition]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: Gets or sets the URL to get the next set of job collections.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class JobCollectionProperties(_serialization.Model):
    """JobCollectionProperties.

    :ivar sku: Gets or sets the SKU.
    :vartype sku: ~azure.mgmt.scheduler.models.Sku
    :ivar state: Gets or sets the state. Known values are: "Enabled", "Disabled", "Suspended", and
     "Deleted".
    :vartype state: str or ~azure.mgmt.scheduler.models.JobCollectionState
    :ivar quota: Gets or sets the job collection quota.
    :vartype quota: ~azure.mgmt.scheduler.models.JobCollectionQuota
    """

    _attribute_map = {
        "sku": {"key": "sku", "type": "Sku"},
        "state": {"key": "state", "type": "str"},
        "quota": {"key": "quota", "type": "JobCollectionQuota"},
    }

    def __init__(
        self,
        *,
        sku: Optional["_models.Sku"] = None,
        state: Optional[Union[str, "_models.JobCollectionState"]] = None,
        quota: Optional["_models.JobCollectionQuota"] = None,
        **kwargs
    ):
        """
        :keyword sku: Gets or sets the SKU.
        :paramtype sku: ~azure.mgmt.scheduler.models.Sku
        :keyword state: Gets or sets the state. Known values are: "Enabled", "Disabled", "Suspended",
         and "Deleted".
        :paramtype state: str or ~azure.mgmt.scheduler.models.JobCollectionState
        :keyword quota: Gets or sets the job collection quota.
        :paramtype quota: ~azure.mgmt.scheduler.models.JobCollectionQuota
        """
        super().__init__(**kwargs)
        self.sku = sku
        self.state = state
        self.quota = quota


class JobCollectionQuota(_serialization.Model):
    """JobCollectionQuota.

    :ivar max_job_count: Gets or set the maximum job count.
    :vartype max_job_count: int
    :ivar max_job_occurrence: Gets or sets the maximum job occurrence.
    :vartype max_job_occurrence: int
    :ivar max_recurrence: Gets or set the maximum recurrence.
    :vartype max_recurrence: ~azure.mgmt.scheduler.models.JobMaxRecurrence
    """

    _attribute_map = {
        "max_job_count": {"key": "maxJobCount", "type": "int"},
        "max_job_occurrence": {"key": "maxJobOccurrence", "type": "int"},
        "max_recurrence": {"key": "maxRecurrence", "type": "JobMaxRecurrence"},
    }

    def __init__(
        self,
        *,
        max_job_count: Optional[int] = None,
        max_job_occurrence: Optional[int] = None,
        max_recurrence: Optional["_models.JobMaxRecurrence"] = None,
        **kwargs
    ):
        """
        :keyword max_job_count: Gets or set the maximum job count.
        :paramtype max_job_count: int
        :keyword max_job_occurrence: Gets or sets the maximum job occurrence.
        :paramtype max_job_occurrence: int
        :keyword max_recurrence: Gets or set the maximum recurrence.
        :paramtype max_recurrence: ~azure.mgmt.scheduler.models.JobMaxRecurrence
        """
        super().__init__(**kwargs)
        self.max_job_count = max_job_count
        self.max_job_occurrence = max_job_occurrence
        self.max_recurrence = max_recurrence


class JobDefinition(_serialization.Model):
    """JobDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Gets the job resource identifier.
    :vartype id: str
    :ivar type: Gets the job resource type.
    :vartype type: str
    :ivar name: Gets the job resource name.
    :vartype name: str
    :ivar properties: Gets or sets the job properties.
    :vartype properties: ~azure.mgmt.scheduler.models.JobProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
        "name": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "properties": {"key": "properties", "type": "JobProperties"},
    }

    def __init__(self, *, properties: Optional["_models.JobProperties"] = None, **kwargs):
        """
        :keyword properties: Gets or sets the job properties.
        :paramtype properties: ~azure.mgmt.scheduler.models.JobProperties
        """
        super().__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.properties = properties


class JobErrorAction(_serialization.Model):
    """JobErrorAction.

    :ivar type: Gets or sets the job error action type. Known values are: "Http", "Https",
     "StorageQueue", "ServiceBusQueue", and "ServiceBusTopic".
    :vartype type: str or ~azure.mgmt.scheduler.models.JobActionType
    :ivar request: Gets or sets the http requests.
    :vartype request: ~azure.mgmt.scheduler.models.HttpRequest
    :ivar queue_message: Gets or sets the storage queue message.
    :vartype queue_message: ~azure.mgmt.scheduler.models.StorageQueueMessage
    :ivar service_bus_queue_message: Gets or sets the service bus queue message.
    :vartype service_bus_queue_message: ~azure.mgmt.scheduler.models.ServiceBusQueueMessage
    :ivar service_bus_topic_message: Gets or sets the service bus topic message.
    :vartype service_bus_topic_message: ~azure.mgmt.scheduler.models.ServiceBusTopicMessage
    :ivar retry_policy: Gets or sets the retry policy.
    :vartype retry_policy: ~azure.mgmt.scheduler.models.RetryPolicy
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "request": {"key": "request", "type": "HttpRequest"},
        "queue_message": {"key": "queueMessage", "type": "StorageQueueMessage"},
        "service_bus_queue_message": {"key": "serviceBusQueueMessage", "type": "ServiceBusQueueMessage"},
        "service_bus_topic_message": {"key": "serviceBusTopicMessage", "type": "ServiceBusTopicMessage"},
        "retry_policy": {"key": "retryPolicy", "type": "RetryPolicy"},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.JobActionType"]] = None,
        request: Optional["_models.HttpRequest"] = None,
        queue_message: Optional["_models.StorageQueueMessage"] = None,
        service_bus_queue_message: Optional["_models.ServiceBusQueueMessage"] = None,
        service_bus_topic_message: Optional["_models.ServiceBusTopicMessage"] = None,
        retry_policy: Optional["_models.RetryPolicy"] = None,
        **kwargs
    ):
        """
        :keyword type: Gets or sets the job error action type. Known values are: "Http", "Https",
         "StorageQueue", "ServiceBusQueue", and "ServiceBusTopic".
        :paramtype type: str or ~azure.mgmt.scheduler.models.JobActionType
        :keyword request: Gets or sets the http requests.
        :paramtype request: ~azure.mgmt.scheduler.models.HttpRequest
        :keyword queue_message: Gets or sets the storage queue message.
        :paramtype queue_message: ~azure.mgmt.scheduler.models.StorageQueueMessage
        :keyword service_bus_queue_message: Gets or sets the service bus queue message.
        :paramtype service_bus_queue_message: ~azure.mgmt.scheduler.models.ServiceBusQueueMessage
        :keyword service_bus_topic_message: Gets or sets the service bus topic message.
        :paramtype service_bus_topic_message: ~azure.mgmt.scheduler.models.ServiceBusTopicMessage
        :keyword retry_policy: Gets or sets the retry policy.
        :paramtype retry_policy: ~azure.mgmt.scheduler.models.RetryPolicy
        """
        super().__init__(**kwargs)
        self.type = type
        self.request = request
        self.queue_message = queue_message
        self.service_bus_queue_message = service_bus_queue_message
        self.service_bus_topic_message = service_bus_topic_message
        self.retry_policy = retry_policy


class JobHistoryDefinition(_serialization.Model):
    """JobHistoryDefinition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Gets the job history identifier.
    :vartype id: str
    :ivar type: Gets the job history resource type.
    :vartype type: str
    :ivar name: Gets the job history name.
    :vartype name: str
    :ivar properties: Gets or sets the job history properties.
    :vartype properties: ~azure.mgmt.scheduler.models.JobHistoryDefinitionProperties
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
        "name": {"readonly": True},
        "properties": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "properties": {"key": "properties", "type": "JobHistoryDefinitionProperties"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.properties = None


class JobHistoryDefinitionProperties(_serialization.Model):
    """JobHistoryDefinitionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar start_time: Gets the start time for this job.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Gets the end time for this job.
    :vartype end_time: ~datetime.datetime
    :ivar expected_execution_time: Gets the expected execution time for this job.
    :vartype expected_execution_time: ~datetime.datetime
    :ivar action_name: Gets the job history action name. Known values are: "MainAction" and
     "ErrorAction".
    :vartype action_name: str or ~azure.mgmt.scheduler.models.JobHistoryActionName
    :ivar status: Gets the job history status. Known values are: "Completed", "Failed", and
     "Postponed".
    :vartype status: str or ~azure.mgmt.scheduler.models.JobExecutionStatus
    :ivar message: Gets the message for the job history.
    :vartype message: str
    :ivar retry_count: Gets the retry count for job.
    :vartype retry_count: int
    :ivar repeat_count: Gets the repeat count for the job.
    :vartype repeat_count: int
    """

    _validation = {
        "start_time": {"readonly": True},
        "end_time": {"readonly": True},
        "expected_execution_time": {"readonly": True},
        "action_name": {"readonly": True},
        "status": {"readonly": True},
        "message": {"readonly": True},
        "retry_count": {"readonly": True},
        "repeat_count": {"readonly": True},
    }

    _attribute_map = {
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "expected_execution_time": {"key": "expectedExecutionTime", "type": "iso-8601"},
        "action_name": {"key": "actionName", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "retry_count": {"key": "retryCount", "type": "int"},
        "repeat_count": {"key": "repeatCount", "type": "int"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.start_time = None
        self.end_time = None
        self.expected_execution_time = None
        self.action_name = None
        self.status = None
        self.message = None
        self.retry_count = None
        self.repeat_count = None


class JobHistoryFilter(_serialization.Model):
    """JobHistoryFilter.

    :ivar status: Gets or sets the job execution status. Known values are: "Completed", "Failed",
     and "Postponed".
    :vartype status: str or ~azure.mgmt.scheduler.models.JobExecutionStatus
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
    }

    def __init__(self, *, status: Optional[Union[str, "_models.JobExecutionStatus"]] = None, **kwargs):
        """
        :keyword status: Gets or sets the job execution status. Known values are: "Completed",
         "Failed", and "Postponed".
        :paramtype status: str or ~azure.mgmt.scheduler.models.JobExecutionStatus
        """
        super().__init__(**kwargs)
        self.status = status


class JobHistoryListResult(_serialization.Model):
    """JobHistoryListResult.

    :ivar value: Gets or sets the job histories under job.
    :vartype value: list[~azure.mgmt.scheduler.models.JobHistoryDefinition]
    :ivar next_link: Gets or sets the URL to get the next set of job histories.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[JobHistoryDefinition]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.JobHistoryDefinition"]] = None, next_link: Optional[str] = None, **kwargs
    ):
        """
        :keyword value: Gets or sets the job histories under job.
        :paramtype value: list[~azure.mgmt.scheduler.models.JobHistoryDefinition]
        :keyword next_link: Gets or sets the URL to get the next set of job histories.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class JobListResult(_serialization.Model):
    """JobListResult.

    :ivar value: Gets or sets all jobs under job collection.
    :vartype value: list[~azure.mgmt.scheduler.models.JobDefinition]
    :ivar next_link: Gets or sets the URL to get the next set of jobs.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[JobDefinition]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.JobDefinition"]] = None, next_link: Optional[str] = None, **kwargs
    ):
        """
        :keyword value: Gets or sets all jobs under job collection.
        :paramtype value: list[~azure.mgmt.scheduler.models.JobDefinition]
        :keyword next_link: Gets or sets the URL to get the next set of jobs.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class JobMaxRecurrence(_serialization.Model):
    """JobMaxRecurrence.

    :ivar frequency: Gets or sets the frequency of recurrence (second, minute, hour, day, week,
     month). Known values are: "Minute", "Hour", "Day", "Week", and "Month".
    :vartype frequency: str or ~azure.mgmt.scheduler.models.RecurrenceFrequency
    :ivar interval: Gets or sets the interval between retries.
    :vartype interval: int
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
        "interval": {"key": "interval", "type": "int"},
    }

    def __init__(
        self,
        *,
        frequency: Optional[Union[str, "_models.RecurrenceFrequency"]] = None,
        interval: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword frequency: Gets or sets the frequency of recurrence (second, minute, hour, day, week,
         month). Known values are: "Minute", "Hour", "Day", "Week", and "Month".
        :paramtype frequency: str or ~azure.mgmt.scheduler.models.RecurrenceFrequency
        :keyword interval: Gets or sets the interval between retries.
        :paramtype interval: int
        """
        super().__init__(**kwargs)
        self.frequency = frequency
        self.interval = interval


class JobProperties(_serialization.Model):
    """JobProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar start_time: Gets or sets the job start time.
    :vartype start_time: ~datetime.datetime
    :ivar action: Gets or sets the job action.
    :vartype action: ~azure.mgmt.scheduler.models.JobAction
    :ivar recurrence: Gets or sets the job recurrence.
    :vartype recurrence: ~azure.mgmt.scheduler.models.JobRecurrence
    :ivar state: Gets or set the job state. Known values are: "Enabled", "Disabled", "Faulted", and
     "Completed".
    :vartype state: str or ~azure.mgmt.scheduler.models.JobState
    :ivar status: Gets the job status.
    :vartype status: ~azure.mgmt.scheduler.models.JobStatus
    """

    _validation = {
        "status": {"readonly": True},
    }

    _attribute_map = {
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "action": {"key": "action", "type": "JobAction"},
        "recurrence": {"key": "recurrence", "type": "JobRecurrence"},
        "state": {"key": "state", "type": "str"},
        "status": {"key": "status", "type": "JobStatus"},
    }

    def __init__(
        self,
        *,
        start_time: Optional[datetime.datetime] = None,
        action: Optional["_models.JobAction"] = None,
        recurrence: Optional["_models.JobRecurrence"] = None,
        state: Optional[Union[str, "_models.JobState"]] = None,
        **kwargs
    ):
        """
        :keyword start_time: Gets or sets the job start time.
        :paramtype start_time: ~datetime.datetime
        :keyword action: Gets or sets the job action.
        :paramtype action: ~azure.mgmt.scheduler.models.JobAction
        :keyword recurrence: Gets or sets the job recurrence.
        :paramtype recurrence: ~azure.mgmt.scheduler.models.JobRecurrence
        :keyword state: Gets or set the job state. Known values are: "Enabled", "Disabled", "Faulted",
         and "Completed".
        :paramtype state: str or ~azure.mgmt.scheduler.models.JobState
        """
        super().__init__(**kwargs)
        self.start_time = start_time
        self.action = action
        self.recurrence = recurrence
        self.state = state
        self.status = None


class JobRecurrence(_serialization.Model):
    """JobRecurrence.

    :ivar frequency: Gets or sets the frequency of recurrence (second, minute, hour, day, week,
     month). Known values are: "Minute", "Hour", "Day", "Week", and "Month".
    :vartype frequency: str or ~azure.mgmt.scheduler.models.RecurrenceFrequency
    :ivar interval: Gets or sets the interval between retries.
    :vartype interval: int
    :ivar count: Gets or sets the maximum number of times that the job should run.
    :vartype count: int
    :ivar end_time: Gets or sets the time at which the job will complete.
    :vartype end_time: ~datetime.datetime
    :ivar schedule:
    :vartype schedule: ~azure.mgmt.scheduler.models.JobRecurrenceSchedule
    """

    _attribute_map = {
        "frequency": {"key": "frequency", "type": "str"},
        "interval": {"key": "interval", "type": "int"},
        "count": {"key": "count", "type": "int"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "schedule": {"key": "schedule", "type": "JobRecurrenceSchedule"},
    }

    def __init__(
        self,
        *,
        frequency: Optional[Union[str, "_models.RecurrenceFrequency"]] = None,
        interval: Optional[int] = None,
        count: Optional[int] = None,
        end_time: Optional[datetime.datetime] = None,
        schedule: Optional["_models.JobRecurrenceSchedule"] = None,
        **kwargs
    ):
        """
        :keyword frequency: Gets or sets the frequency of recurrence (second, minute, hour, day, week,
         month). Known values are: "Minute", "Hour", "Day", "Week", and "Month".
        :paramtype frequency: str or ~azure.mgmt.scheduler.models.RecurrenceFrequency
        :keyword interval: Gets or sets the interval between retries.
        :paramtype interval: int
        :keyword count: Gets or sets the maximum number of times that the job should run.
        :paramtype count: int
        :keyword end_time: Gets or sets the time at which the job will complete.
        :paramtype end_time: ~datetime.datetime
        :keyword schedule:
        :paramtype schedule: ~azure.mgmt.scheduler.models.JobRecurrenceSchedule
        """
        super().__init__(**kwargs)
        self.frequency = frequency
        self.interval = interval
        self.count = count
        self.end_time = end_time
        self.schedule = schedule


class JobRecurrenceSchedule(_serialization.Model):
    """JobRecurrenceSchedule.

    :ivar week_days: Gets or sets the days of the week that the job should execute on.
    :vartype week_days: list[str or ~azure.mgmt.scheduler.models.DayOfWeek]
    :ivar hours: Gets or sets the hours of the day that the job should execute at.
    :vartype hours: list[int]
    :ivar minutes: Gets or sets the minutes of the hour that the job should execute at.
    :vartype minutes: list[int]
    :ivar month_days: Gets or sets the days of the month that the job should execute on. Must be
     between 1 and 31.
    :vartype month_days: list[int]
    :ivar monthly_occurrences: Gets or sets the occurrences of days within a month.
    :vartype monthly_occurrences:
     list[~azure.mgmt.scheduler.models.JobRecurrenceScheduleMonthlyOccurrence]
    """

    _attribute_map = {
        "week_days": {"key": "weekDays", "type": "[str]"},
        "hours": {"key": "hours", "type": "[int]"},
        "minutes": {"key": "minutes", "type": "[int]"},
        "month_days": {"key": "monthDays", "type": "[int]"},
        "monthly_occurrences": {"key": "monthlyOccurrences", "type": "[JobRecurrenceScheduleMonthlyOccurrence]"},
    }

    def __init__(
        self,
        *,
        week_days: Optional[List[Union[str, "_models.DayOfWeek"]]] = None,
        hours: Optional[List[int]] = None,
        minutes: Optional[List[int]] = None,
        month_days: Optional[List[int]] = None,
        monthly_occurrences: Optional[List["_models.JobRecurrenceScheduleMonthlyOccurrence"]] = None,
        **kwargs
    ):
        """
        :keyword week_days: Gets or sets the days of the week that the job should execute on.
        :paramtype week_days: list[str or ~azure.mgmt.scheduler.models.DayOfWeek]
        :keyword hours: Gets or sets the hours of the day that the job should execute at.
        :paramtype hours: list[int]
        :keyword minutes: Gets or sets the minutes of the hour that the job should execute at.
        :paramtype minutes: list[int]
        :keyword month_days: Gets or sets the days of the month that the job should execute on. Must be
         between 1 and 31.
        :paramtype month_days: list[int]
        :keyword monthly_occurrences: Gets or sets the occurrences of days within a month.
        :paramtype monthly_occurrences:
         list[~azure.mgmt.scheduler.models.JobRecurrenceScheduleMonthlyOccurrence]
        """
        super().__init__(**kwargs)
        self.week_days = week_days
        self.hours = hours
        self.minutes = minutes
        self.month_days = month_days
        self.monthly_occurrences = monthly_occurrences


class JobRecurrenceScheduleMonthlyOccurrence(_serialization.Model):
    """JobRecurrenceScheduleMonthlyOccurrence.

    :ivar day: Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday, friday,
     saturday, sunday. Known values are: "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
     "Saturday", and "Sunday".
    :vartype day: str or ~azure.mgmt.scheduler.models.JobScheduleDay
    :ivar occurrence: Gets or sets the occurrence. Must be between -5 and 5.
    :vartype occurrence: int
    """

    _attribute_map = {
        "day": {"key": "day", "type": "str"},
        "occurrence": {"key": "Occurrence", "type": "int"},
    }

    def __init__(
        self, *, day: Optional[Union[str, "_models.JobScheduleDay"]] = None, occurrence: Optional[int] = None, **kwargs
    ):
        """
        :keyword day: Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday,
         friday, saturday, sunday. Known values are: "Monday", "Tuesday", "Wednesday", "Thursday",
         "Friday", "Saturday", and "Sunday".
        :paramtype day: str or ~azure.mgmt.scheduler.models.JobScheduleDay
        :keyword occurrence: Gets or sets the occurrence. Must be between -5 and 5.
        :paramtype occurrence: int
        """
        super().__init__(**kwargs)
        self.day = day
        self.occurrence = occurrence


class JobStateFilter(_serialization.Model):
    """JobStateFilter.

    :ivar state: Gets or sets the job state. Known values are: "Enabled", "Disabled", "Faulted",
     and "Completed".
    :vartype state: str or ~azure.mgmt.scheduler.models.JobState
    """

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
    }

    def __init__(self, *, state: Optional[Union[str, "_models.JobState"]] = None, **kwargs):
        """
        :keyword state: Gets or sets the job state. Known values are: "Enabled", "Disabled", "Faulted",
         and "Completed".
        :paramtype state: str or ~azure.mgmt.scheduler.models.JobState
        """
        super().__init__(**kwargs)
        self.state = state


class JobStatus(_serialization.Model):
    """JobStatus.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar execution_count: Gets the number of times this job has executed.
    :vartype execution_count: int
    :ivar failure_count: Gets the number of times this job has failed.
    :vartype failure_count: int
    :ivar faulted_count: Gets the number of faulted occurrences (occurrences that were retried and
     failed as many times as the retry policy states).
    :vartype faulted_count: int
    :ivar last_execution_time: Gets the time the last occurrence executed in ISO-8601 format.
     Could be empty if job has not run yet.
    :vartype last_execution_time: ~datetime.datetime
    :ivar next_execution_time: Gets the time of the next occurrence in ISO-8601 format. Could be
     empty if the job is completed.
    :vartype next_execution_time: ~datetime.datetime
    """

    _validation = {
        "execution_count": {"readonly": True},
        "failure_count": {"readonly": True},
        "faulted_count": {"readonly": True},
        "last_execution_time": {"readonly": True},
        "next_execution_time": {"readonly": True},
    }

    _attribute_map = {
        "execution_count": {"key": "executionCount", "type": "int"},
        "failure_count": {"key": "failureCount", "type": "int"},
        "faulted_count": {"key": "faultedCount", "type": "int"},
        "last_execution_time": {"key": "lastExecutionTime", "type": "iso-8601"},
        "next_execution_time": {"key": "nextExecutionTime", "type": "iso-8601"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.execution_count = None
        self.failure_count = None
        self.faulted_count = None
        self.last_execution_time = None
        self.next_execution_time = None


class OAuthAuthentication(HttpAuthentication):
    """OAuthAuthentication.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Gets or sets the HTTP authentication type. Required. Known values are:
     "NotSpecified", "ClientCertificate", "ActiveDirectoryOAuth", and "Basic".
    :vartype type: str or ~azure.mgmt.scheduler.models.HttpAuthenticationType
    :ivar secret: Gets or sets the secret, return value will always be empty.
    :vartype secret: str
    :ivar tenant: Gets or sets the tenant.
    :vartype tenant: str
    :ivar audience: Gets or sets the audience.
    :vartype audience: str
    :ivar client_id: Gets or sets the client identifier.
    :vartype client_id: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "secret": {"key": "secret", "type": "str"},
        "tenant": {"key": "tenant", "type": "str"},
        "audience": {"key": "audience", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(
        self,
        *,
        secret: Optional[str] = None,
        tenant: Optional[str] = None,
        audience: Optional[str] = None,
        client_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword secret: Gets or sets the secret, return value will always be empty.
        :paramtype secret: str
        :keyword tenant: Gets or sets the tenant.
        :paramtype tenant: str
        :keyword audience: Gets or sets the audience.
        :paramtype audience: str
        :keyword client_id: Gets or sets the client identifier.
        :paramtype client_id: str
        """
        super().__init__(**kwargs)
        self.type: str = "ActiveDirectoryOAuth"
        self.secret = secret
        self.tenant = tenant
        self.audience = audience
        self.client_id = client_id


class RetryPolicy(_serialization.Model):
    """RetryPolicy.

    :ivar retry_type: Gets or sets the retry strategy to be used. Known values are: "None" and
     "Fixed".
    :vartype retry_type: str or ~azure.mgmt.scheduler.models.RetryType
    :ivar retry_interval: Gets or sets the retry interval between retries, specify duration in ISO
     8601 format.
    :vartype retry_interval: ~datetime.timedelta
    :ivar retry_count: Gets or sets the number of times a retry should be attempted.
    :vartype retry_count: int
    """

    _attribute_map = {
        "retry_type": {"key": "retryType", "type": "str"},
        "retry_interval": {"key": "retryInterval", "type": "duration"},
        "retry_count": {"key": "retryCount", "type": "int"},
    }

    def __init__(
        self,
        *,
        retry_type: Optional[Union[str, "_models.RetryType"]] = None,
        retry_interval: Optional[datetime.timedelta] = None,
        retry_count: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword retry_type: Gets or sets the retry strategy to be used. Known values are: "None" and
         "Fixed".
        :paramtype retry_type: str or ~azure.mgmt.scheduler.models.RetryType
        :keyword retry_interval: Gets or sets the retry interval between retries, specify duration in
         ISO 8601 format.
        :paramtype retry_interval: ~datetime.timedelta
        :keyword retry_count: Gets or sets the number of times a retry should be attempted.
        :paramtype retry_count: int
        """
        super().__init__(**kwargs)
        self.retry_type = retry_type
        self.retry_interval = retry_interval
        self.retry_count = retry_count


class ServiceBusAuthentication(_serialization.Model):
    """ServiceBusAuthentication.

    :ivar sas_key: Gets or sets the SAS key.
    :vartype sas_key: str
    :ivar sas_key_name: Gets or sets the SAS key name.
    :vartype sas_key_name: str
    :ivar type: Gets or sets the authentication type. Known values are: "NotSpecified" and
     "SharedAccessKey".
    :vartype type: str or ~azure.mgmt.scheduler.models.ServiceBusAuthenticationType
    """

    _attribute_map = {
        "sas_key": {"key": "sasKey", "type": "str"},
        "sas_key_name": {"key": "sasKeyName", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self,
        *,
        sas_key: Optional[str] = None,
        sas_key_name: Optional[str] = None,
        type: Optional[Union[str, "_models.ServiceBusAuthenticationType"]] = None,
        **kwargs
    ):
        """
        :keyword sas_key: Gets or sets the SAS key.
        :paramtype sas_key: str
        :keyword sas_key_name: Gets or sets the SAS key name.
        :paramtype sas_key_name: str
        :keyword type: Gets or sets the authentication type. Known values are: "NotSpecified" and
         "SharedAccessKey".
        :paramtype type: str or ~azure.mgmt.scheduler.models.ServiceBusAuthenticationType
        """
        super().__init__(**kwargs)
        self.sas_key = sas_key
        self.sas_key_name = sas_key_name
        self.type = type


class ServiceBusBrokeredMessageProperties(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """ServiceBusBrokeredMessageProperties.

    :ivar content_type: Gets or sets the content type.
    :vartype content_type: str
    :ivar correlation_id: Gets or sets the correlation ID.
    :vartype correlation_id: str
    :ivar force_persistence: Gets or sets the force persistence.
    :vartype force_persistence: bool
    :ivar label: Gets or sets the label.
    :vartype label: str
    :ivar message_id: Gets or sets the message ID.
    :vartype message_id: str
    :ivar partition_key: Gets or sets the partition key.
    :vartype partition_key: str
    :ivar reply_to: Gets or sets the reply to.
    :vartype reply_to: str
    :ivar reply_to_session_id: Gets or sets the reply to session ID.
    :vartype reply_to_session_id: str
    :ivar scheduled_enqueue_time_utc: Gets or sets the scheduled enqueue time UTC.
    :vartype scheduled_enqueue_time_utc: ~datetime.datetime
    :ivar session_id: Gets or sets the session ID.
    :vartype session_id: str
    :ivar time_to_live: Gets or sets the time to live.
    :vartype time_to_live: ~datetime.timedelta
    :ivar to: Gets or sets the to.
    :vartype to: str
    :ivar via_partition_key: Gets or sets the via partition key.
    :vartype via_partition_key: str
    """

    _attribute_map = {
        "content_type": {"key": "contentType", "type": "str"},
        "correlation_id": {"key": "correlationId", "type": "str"},
        "force_persistence": {"key": "forcePersistence", "type": "bool"},
        "label": {"key": "label", "type": "str"},
        "message_id": {"key": "messageId", "type": "str"},
        "partition_key": {"key": "partitionKey", "type": "str"},
        "reply_to": {"key": "replyTo", "type": "str"},
        "reply_to_session_id": {"key": "replyToSessionId", "type": "str"},
        "scheduled_enqueue_time_utc": {"key": "scheduledEnqueueTimeUtc", "type": "iso-8601"},
        "session_id": {"key": "sessionId", "type": "str"},
        "time_to_live": {"key": "timeToLive", "type": "duration"},
        "to": {"key": "to", "type": "str"},
        "via_partition_key": {"key": "viaPartitionKey", "type": "str"},
    }

    def __init__(
        self,
        *,
        content_type: Optional[str] = None,
        correlation_id: Optional[str] = None,
        force_persistence: Optional[bool] = None,
        label: Optional[str] = None,
        message_id: Optional[str] = None,
        partition_key: Optional[str] = None,
        reply_to: Optional[str] = None,
        reply_to_session_id: Optional[str] = None,
        scheduled_enqueue_time_utc: Optional[datetime.datetime] = None,
        session_id: Optional[str] = None,
        time_to_live: Optional[datetime.timedelta] = None,
        to: Optional[str] = None,
        via_partition_key: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword content_type: Gets or sets the content type.
        :paramtype content_type: str
        :keyword correlation_id: Gets or sets the correlation ID.
        :paramtype correlation_id: str
        :keyword force_persistence: Gets or sets the force persistence.
        :paramtype force_persistence: bool
        :keyword label: Gets or sets the label.
        :paramtype label: str
        :keyword message_id: Gets or sets the message ID.
        :paramtype message_id: str
        :keyword partition_key: Gets or sets the partition key.
        :paramtype partition_key: str
        :keyword reply_to: Gets or sets the reply to.
        :paramtype reply_to: str
        :keyword reply_to_session_id: Gets or sets the reply to session ID.
        :paramtype reply_to_session_id: str
        :keyword scheduled_enqueue_time_utc: Gets or sets the scheduled enqueue time UTC.
        :paramtype scheduled_enqueue_time_utc: ~datetime.datetime
        :keyword session_id: Gets or sets the session ID.
        :paramtype session_id: str
        :keyword time_to_live: Gets or sets the time to live.
        :paramtype time_to_live: ~datetime.timedelta
        :keyword to: Gets or sets the to.
        :paramtype to: str
        :keyword via_partition_key: Gets or sets the via partition key.
        :paramtype via_partition_key: str
        """
        super().__init__(**kwargs)
        self.content_type = content_type
        self.correlation_id = correlation_id
        self.force_persistence = force_persistence
        self.label = label
        self.message_id = message_id
        self.partition_key = partition_key
        self.reply_to = reply_to
        self.reply_to_session_id = reply_to_session_id
        self.scheduled_enqueue_time_utc = scheduled_enqueue_time_utc
        self.session_id = session_id
        self.time_to_live = time_to_live
        self.to = to
        self.via_partition_key = via_partition_key


class ServiceBusMessage(_serialization.Model):
    """ServiceBusMessage.

    :ivar authentication: Gets or sets the Service Bus authentication.
    :vartype authentication: ~azure.mgmt.scheduler.models.ServiceBusAuthentication
    :ivar brokered_message_properties: Gets or sets the brokered message properties.
    :vartype brokered_message_properties:
     ~azure.mgmt.scheduler.models.ServiceBusBrokeredMessageProperties
    :ivar custom_message_properties: Gets or sets the custom message properties.
    :vartype custom_message_properties: dict[str, str]
    :ivar message: Gets or sets the message.
    :vartype message: str
    :ivar namespace: Gets or sets the namespace.
    :vartype namespace: str
    :ivar transport_type: Gets or sets the transport type. Known values are: "NotSpecified",
     "NetMessaging", and "AMQP".
    :vartype transport_type: str or ~azure.mgmt.scheduler.models.ServiceBusTransportType
    """

    _attribute_map = {
        "authentication": {"key": "authentication", "type": "ServiceBusAuthentication"},
        "brokered_message_properties": {
            "key": "brokeredMessageProperties",
            "type": "ServiceBusBrokeredMessageProperties",
        },
        "custom_message_properties": {"key": "customMessageProperties", "type": "{str}"},
        "message": {"key": "message", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
        "transport_type": {"key": "transportType", "type": "str"},
    }

    def __init__(
        self,
        *,
        authentication: Optional["_models.ServiceBusAuthentication"] = None,
        brokered_message_properties: Optional["_models.ServiceBusBrokeredMessageProperties"] = None,
        custom_message_properties: Optional[Dict[str, str]] = None,
        message: Optional[str] = None,
        namespace: Optional[str] = None,
        transport_type: Optional[Union[str, "_models.ServiceBusTransportType"]] = None,
        **kwargs
    ):
        """
        :keyword authentication: Gets or sets the Service Bus authentication.
        :paramtype authentication: ~azure.mgmt.scheduler.models.ServiceBusAuthentication
        :keyword brokered_message_properties: Gets or sets the brokered message properties.
        :paramtype brokered_message_properties:
         ~azure.mgmt.scheduler.models.ServiceBusBrokeredMessageProperties
        :keyword custom_message_properties: Gets or sets the custom message properties.
        :paramtype custom_message_properties: dict[str, str]
        :keyword message: Gets or sets the message.
        :paramtype message: str
        :keyword namespace: Gets or sets the namespace.
        :paramtype namespace: str
        :keyword transport_type: Gets or sets the transport type. Known values are: "NotSpecified",
         "NetMessaging", and "AMQP".
        :paramtype transport_type: str or ~azure.mgmt.scheduler.models.ServiceBusTransportType
        """
        super().__init__(**kwargs)
        self.authentication = authentication
        self.brokered_message_properties = brokered_message_properties
        self.custom_message_properties = custom_message_properties
        self.message = message
        self.namespace = namespace
        self.transport_type = transport_type


class ServiceBusQueueMessage(ServiceBusMessage):
    """ServiceBusQueueMessage.

    :ivar authentication: Gets or sets the Service Bus authentication.
    :vartype authentication: ~azure.mgmt.scheduler.models.ServiceBusAuthentication
    :ivar brokered_message_properties: Gets or sets the brokered message properties.
    :vartype brokered_message_properties:
     ~azure.mgmt.scheduler.models.ServiceBusBrokeredMessageProperties
    :ivar custom_message_properties: Gets or sets the custom message properties.
    :vartype custom_message_properties: dict[str, str]
    :ivar message: Gets or sets the message.
    :vartype message: str
    :ivar namespace: Gets or sets the namespace.
    :vartype namespace: str
    :ivar transport_type: Gets or sets the transport type. Known values are: "NotSpecified",
     "NetMessaging", and "AMQP".
    :vartype transport_type: str or ~azure.mgmt.scheduler.models.ServiceBusTransportType
    :ivar queue_name: Gets or sets the queue name.
    :vartype queue_name: str
    """

    _attribute_map = {
        "authentication": {"key": "authentication", "type": "ServiceBusAuthentication"},
        "brokered_message_properties": {
            "key": "brokeredMessageProperties",
            "type": "ServiceBusBrokeredMessageProperties",
        },
        "custom_message_properties": {"key": "customMessageProperties", "type": "{str}"},
        "message": {"key": "message", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
        "transport_type": {"key": "transportType", "type": "str"},
        "queue_name": {"key": "queueName", "type": "str"},
    }

    def __init__(
        self,
        *,
        authentication: Optional["_models.ServiceBusAuthentication"] = None,
        brokered_message_properties: Optional["_models.ServiceBusBrokeredMessageProperties"] = None,
        custom_message_properties: Optional[Dict[str, str]] = None,
        message: Optional[str] = None,
        namespace: Optional[str] = None,
        transport_type: Optional[Union[str, "_models.ServiceBusTransportType"]] = None,
        queue_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword authentication: Gets or sets the Service Bus authentication.
        :paramtype authentication: ~azure.mgmt.scheduler.models.ServiceBusAuthentication
        :keyword brokered_message_properties: Gets or sets the brokered message properties.
        :paramtype brokered_message_properties:
         ~azure.mgmt.scheduler.models.ServiceBusBrokeredMessageProperties
        :keyword custom_message_properties: Gets or sets the custom message properties.
        :paramtype custom_message_properties: dict[str, str]
        :keyword message: Gets or sets the message.
        :paramtype message: str
        :keyword namespace: Gets or sets the namespace.
        :paramtype namespace: str
        :keyword transport_type: Gets or sets the transport type. Known values are: "NotSpecified",
         "NetMessaging", and "AMQP".
        :paramtype transport_type: str or ~azure.mgmt.scheduler.models.ServiceBusTransportType
        :keyword queue_name: Gets or sets the queue name.
        :paramtype queue_name: str
        """
        super().__init__(
            authentication=authentication,
            brokered_message_properties=brokered_message_properties,
            custom_message_properties=custom_message_properties,
            message=message,
            namespace=namespace,
            transport_type=transport_type,
            **kwargs
        )
        self.queue_name = queue_name


class ServiceBusTopicMessage(ServiceBusMessage):
    """ServiceBusTopicMessage.

    :ivar authentication: Gets or sets the Service Bus authentication.
    :vartype authentication: ~azure.mgmt.scheduler.models.ServiceBusAuthentication
    :ivar brokered_message_properties: Gets or sets the brokered message properties.
    :vartype brokered_message_properties:
     ~azure.mgmt.scheduler.models.ServiceBusBrokeredMessageProperties
    :ivar custom_message_properties: Gets or sets the custom message properties.
    :vartype custom_message_properties: dict[str, str]
    :ivar message: Gets or sets the message.
    :vartype message: str
    :ivar namespace: Gets or sets the namespace.
    :vartype namespace: str
    :ivar transport_type: Gets or sets the transport type. Known values are: "NotSpecified",
     "NetMessaging", and "AMQP".
    :vartype transport_type: str or ~azure.mgmt.scheduler.models.ServiceBusTransportType
    :ivar topic_path: Gets or sets the topic path.
    :vartype topic_path: str
    """

    _attribute_map = {
        "authentication": {"key": "authentication", "type": "ServiceBusAuthentication"},
        "brokered_message_properties": {
            "key": "brokeredMessageProperties",
            "type": "ServiceBusBrokeredMessageProperties",
        },
        "custom_message_properties": {"key": "customMessageProperties", "type": "{str}"},
        "message": {"key": "message", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
        "transport_type": {"key": "transportType", "type": "str"},
        "topic_path": {"key": "topicPath", "type": "str"},
    }

    def __init__(
        self,
        *,
        authentication: Optional["_models.ServiceBusAuthentication"] = None,
        brokered_message_properties: Optional["_models.ServiceBusBrokeredMessageProperties"] = None,
        custom_message_properties: Optional[Dict[str, str]] = None,
        message: Optional[str] = None,
        namespace: Optional[str] = None,
        transport_type: Optional[Union[str, "_models.ServiceBusTransportType"]] = None,
        topic_path: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword authentication: Gets or sets the Service Bus authentication.
        :paramtype authentication: ~azure.mgmt.scheduler.models.ServiceBusAuthentication
        :keyword brokered_message_properties: Gets or sets the brokered message properties.
        :paramtype brokered_message_properties:
         ~azure.mgmt.scheduler.models.ServiceBusBrokeredMessageProperties
        :keyword custom_message_properties: Gets or sets the custom message properties.
        :paramtype custom_message_properties: dict[str, str]
        :keyword message: Gets or sets the message.
        :paramtype message: str
        :keyword namespace: Gets or sets the namespace.
        :paramtype namespace: str
        :keyword transport_type: Gets or sets the transport type. Known values are: "NotSpecified",
         "NetMessaging", and "AMQP".
        :paramtype transport_type: str or ~azure.mgmt.scheduler.models.ServiceBusTransportType
        :keyword topic_path: Gets or sets the topic path.
        :paramtype topic_path: str
        """
        super().__init__(
            authentication=authentication,
            brokered_message_properties=brokered_message_properties,
            custom_message_properties=custom_message_properties,
            message=message,
            namespace=namespace,
            transport_type=transport_type,
            **kwargs
        )
        self.topic_path = topic_path


class Sku(_serialization.Model):
    """Sku.

    :ivar name: Gets or set the SKU. Known values are: "Standard", "Free", "P10Premium", and
     "P20Premium".
    :vartype name: str or ~azure.mgmt.scheduler.models.SkuDefinition
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Optional[Union[str, "_models.SkuDefinition"]] = None, **kwargs):
        """
        :keyword name: Gets or set the SKU. Known values are: "Standard", "Free", "P10Premium", and
         "P20Premium".
        :paramtype name: str or ~azure.mgmt.scheduler.models.SkuDefinition
        """
        super().__init__(**kwargs)
        self.name = name


class StorageQueueMessage(_serialization.Model):
    """StorageQueueMessage.

    :ivar storage_account: Gets or sets the storage account name.
    :vartype storage_account: str
    :ivar queue_name: Gets or sets the queue name.
    :vartype queue_name: str
    :ivar sas_token: Gets or sets the SAS key.
    :vartype sas_token: str
    :ivar message: Gets or sets the message.
    :vartype message: str
    """

    _attribute_map = {
        "storage_account": {"key": "storageAccount", "type": "str"},
        "queue_name": {"key": "queueName", "type": "str"},
        "sas_token": {"key": "sasToken", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(
        self,
        *,
        storage_account: Optional[str] = None,
        queue_name: Optional[str] = None,
        sas_token: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword storage_account: Gets or sets the storage account name.
        :paramtype storage_account: str
        :keyword queue_name: Gets or sets the queue name.
        :paramtype queue_name: str
        :keyword sas_token: Gets or sets the SAS key.
        :paramtype sas_token: str
        :keyword message: Gets or sets the message.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.storage_account = storage_account
        self.queue_name = queue_name
        self.sas_token = sas_token
        self.message = message
