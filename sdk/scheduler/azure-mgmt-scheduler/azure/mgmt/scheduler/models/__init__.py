# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import BasicAuthentication
from ._models_py3 import ClientCertAuthentication
from ._models_py3 import HttpAuthentication
from ._models_py3 import HttpRequest
from ._models_py3 import JobAction
from ._models_py3 import JobCollectionDefinition
from ._models_py3 import JobCollectionListResult
from ._models_py3 import JobCollectionProperties
from ._models_py3 import JobCollectionQuota
from ._models_py3 import JobDefinition
from ._models_py3 import JobErrorAction
from ._models_py3 import JobHistoryDefinition
from ._models_py3 import JobHistoryDefinitionProperties
from ._models_py3 import JobHistoryFilter
from ._models_py3 import JobHistoryListResult
from ._models_py3 import JobListResult
from ._models_py3 import JobMaxRecurrence
from ._models_py3 import JobProperties
from ._models_py3 import JobRecurrence
from ._models_py3 import JobRecurrenceSchedule
from ._models_py3 import JobRecurrenceScheduleMonthlyOccurrence
from ._models_py3 import JobStateFilter
from ._models_py3 import JobStatus
from ._models_py3 import OAuthAuthentication
from ._models_py3 import RetryPolicy
from ._models_py3 import ServiceBusAuthentication
from ._models_py3 import ServiceBusBrokeredMessageProperties
from ._models_py3 import ServiceBusMessage
from ._models_py3 import ServiceBusQueueMessage
from ._models_py3 import ServiceBusTopicMessage
from ._models_py3 import Sku
from ._models_py3 import StorageQueueMessage

from ._scheduler_management_client_enums import DayOfWeek
from ._scheduler_management_client_enums import HttpAuthenticationType
from ._scheduler_management_client_enums import JobActionType
from ._scheduler_management_client_enums import JobCollectionState
from ._scheduler_management_client_enums import JobExecutionStatus
from ._scheduler_management_client_enums import JobHistoryActionName
from ._scheduler_management_client_enums import JobScheduleDay
from ._scheduler_management_client_enums import JobState
from ._scheduler_management_client_enums import RecurrenceFrequency
from ._scheduler_management_client_enums import RetryType
from ._scheduler_management_client_enums import ServiceBusAuthenticationType
from ._scheduler_management_client_enums import ServiceBusTransportType
from ._scheduler_management_client_enums import SkuDefinition
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "BasicAuthentication",
    "ClientCertAuthentication",
    "HttpAuthentication",
    "HttpRequest",
    "JobAction",
    "JobCollectionDefinition",
    "JobCollectionListResult",
    "JobCollectionProperties",
    "JobCollectionQuota",
    "JobDefinition",
    "JobErrorAction",
    "JobHistoryDefinition",
    "JobHistoryDefinitionProperties",
    "JobHistoryFilter",
    "JobHistoryListResult",
    "JobListResult",
    "JobMaxRecurrence",
    "JobProperties",
    "JobRecurrence",
    "JobRecurrenceSchedule",
    "JobRecurrenceScheduleMonthlyOccurrence",
    "JobStateFilter",
    "JobStatus",
    "OAuthAuthentication",
    "RetryPolicy",
    "ServiceBusAuthentication",
    "ServiceBusBrokeredMessageProperties",
    "ServiceBusMessage",
    "ServiceBusQueueMessage",
    "ServiceBusTopicMessage",
    "Sku",
    "StorageQueueMessage",
    "DayOfWeek",
    "HttpAuthenticationType",
    "JobActionType",
    "JobCollectionState",
    "JobExecutionStatus",
    "JobHistoryActionName",
    "JobScheduleDay",
    "JobState",
    "RecurrenceFrequency",
    "RetryType",
    "ServiceBusAuthenticationType",
    "ServiceBusTransportType",
    "SkuDefinition",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
