# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.identity import DefaultAzureCredential

from azure.mgmt.neonpostgres import NeonPostgresMgmtClient

"""
# PREREQUISITES
    pip install azure-identity
    pip install azure-mgmt-neonpostgres
# USAGE
    python branches_create_or_update_maximum_set_gen.py

    Before run the sample, please set the values of the client ID, tenant ID and client secret
    of the AAD application as environment variables: AZURE_CLIENT_ID, AZURE_TENANT_ID,
    AZURE_CLIENT_SECRET. For more info about how to get the value, please see:
    https://docs.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal
"""


def main():
    client = NeonPostgresMgmtClient(
        credential=DefaultAzureCredential(),
        subscription_id="SUBSCRIPTION_ID",
    )

    response = client.branches.begin_create_or_update(
        resource_group_name="rgneon",
        organization_name="myOrganization",
        project_name="myProject",
        branch_name="feature",
        resource={
            "properties": {
                "attributes": [{"name": "on", "value": "qzp"}],
                "databaseName": "zxqetv",
                "databases": [
                    {
                        "attributes": [{"name": "on", "value": "qzp"}],
                        "branchId": "sllrohrmwkgzre",
                        "entityName": "MainDatabase",
                        "ownerName": "rjpysakvuicrlwvzcbmp",
                    }
                ],
                "endpoints": [
                    {
                        "attributes": [{"name": "on", "value": "qzp"}],
                        "branchId": "blclbeuzvywzagbuvdo",
                        "endpointType": "read_only",
                        "entityName": "PrimaryEndpoint",
                        "projectId": "vwwhykqyr",
                        "size": {"autoscalingLimitMaxCu": 14, "autoscalingLimitMinCu": 3},
                    }
                ],
                "entityName": "FeatureBranch",
                "parentId": "parent-123abc",
                "projectId": "cxhihpayn",
                "roleName": "lwlafskrxvggwnfu",
                "roles": [
                    {
                        "attributes": [{"name": "on", "value": "qzp"}],
                        "branchId": "tnmwjbftrvfpepgeytoeqsyhyz",
                        "entityName": "AdminRole",
                        "isSuperUser": True,
                        "permissions": ["cgubrzxkomlxoqdua"],
                    }
                ],
            }
        },
    ).result()
    print(response)


# x-ms-original-file: 2025-06-23-preview/Branches_CreateOrUpdate_MaximumSet_Gen.json
if __name__ == "__main__":
    main()
