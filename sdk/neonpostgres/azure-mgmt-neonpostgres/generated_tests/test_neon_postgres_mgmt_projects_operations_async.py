# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.neonpostgres.aio import NeonPostgresMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestNeonPostgresMgmtProjectsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(NeonPostgresMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_projects_get(self, resource_group):
        response = await self.client.projects.get(
            resource_group_name=resource_group.name,
            organization_name="str",
            project_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_projects_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.projects.begin_create_or_update(
                resource_group_name=resource_group.name,
                organization_name="str",
                project_name="str",
                resource={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "attributes": [{"name": "str", "value": "str"}],
                        "branch": {
                            "attributes": [{"name": "str", "value": "str"}],
                            "createdAt": "str",
                            "databaseName": "str",
                            "databases": [
                                {
                                    "attributes": [{"name": "str", "value": "str"}],
                                    "branchId": "str",
                                    "createdAt": "str",
                                    "entityId": "str",
                                    "entityName": "str",
                                    "ownerName": "str",
                                    "provisioningState": "str",
                                }
                            ],
                            "endpoints": [
                                {
                                    "attributes": [{"name": "str", "value": "str"}],
                                    "branchId": "str",
                                    "createdAt": "str",
                                    "endpointType": "str",
                                    "entityId": "str",
                                    "entityName": "str",
                                    "projectId": "str",
                                    "provisioningState": "str",
                                }
                            ],
                            "entityId": "str",
                            "entityName": "str",
                            "parentId": "str",
                            "projectId": "str",
                            "provisioningState": "str",
                            "roleName": "str",
                            "roles": [
                                {
                                    "attributes": [{"name": "str", "value": "str"}],
                                    "branchId": "str",
                                    "createdAt": "str",
                                    "entityId": "str",
                                    "entityName": "str",
                                    "isSuperUser": bool,
                                    "permissions": ["str"],
                                    "provisioningState": "str",
                                }
                            ],
                        },
                        "createdAt": "str",
                        "databases": [
                            {
                                "attributes": [{"name": "str", "value": "str"}],
                                "branchId": "str",
                                "createdAt": "str",
                                "entityId": "str",
                                "entityName": "str",
                                "ownerName": "str",
                                "provisioningState": "str",
                            }
                        ],
                        "defaultEndpointSettings": {"autoscalingLimitMaxCu": 0.0, "autoscalingLimitMinCu": 0.0},
                        "endpoints": [
                            {
                                "attributes": [{"name": "str", "value": "str"}],
                                "branchId": "str",
                                "createdAt": "str",
                                "endpointType": "str",
                                "entityId": "str",
                                "entityName": "str",
                                "projectId": "str",
                                "provisioningState": "str",
                            }
                        ],
                        "entityId": "str",
                        "entityName": "str",
                        "historyRetention": 0,
                        "pgVersion": 0,
                        "provisioningState": "str",
                        "regionId": "str",
                        "roles": [
                            {
                                "attributes": [{"name": "str", "value": "str"}],
                                "branchId": "str",
                                "createdAt": "str",
                                "entityId": "str",
                                "entityName": "str",
                                "isSuperUser": bool,
                                "permissions": ["str"],
                                "provisioningState": "str",
                            }
                        ],
                        "storage": 0,
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_projects_begin_update(self, resource_group):
        response = await (
            await self.client.projects.begin_update(
                resource_group_name=resource_group.name,
                organization_name="str",
                project_name="str",
                properties={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "attributes": [{"name": "str", "value": "str"}],
                        "branch": {
                            "attributes": [{"name": "str", "value": "str"}],
                            "createdAt": "str",
                            "databaseName": "str",
                            "databases": [
                                {
                                    "attributes": [{"name": "str", "value": "str"}],
                                    "branchId": "str",
                                    "createdAt": "str",
                                    "entityId": "str",
                                    "entityName": "str",
                                    "ownerName": "str",
                                    "provisioningState": "str",
                                }
                            ],
                            "endpoints": [
                                {
                                    "attributes": [{"name": "str", "value": "str"}],
                                    "branchId": "str",
                                    "createdAt": "str",
                                    "endpointType": "str",
                                    "entityId": "str",
                                    "entityName": "str",
                                    "projectId": "str",
                                    "provisioningState": "str",
                                }
                            ],
                            "entityId": "str",
                            "entityName": "str",
                            "parentId": "str",
                            "projectId": "str",
                            "provisioningState": "str",
                            "roleName": "str",
                            "roles": [
                                {
                                    "attributes": [{"name": "str", "value": "str"}],
                                    "branchId": "str",
                                    "createdAt": "str",
                                    "entityId": "str",
                                    "entityName": "str",
                                    "isSuperUser": bool,
                                    "permissions": ["str"],
                                    "provisioningState": "str",
                                }
                            ],
                        },
                        "createdAt": "str",
                        "databases": [
                            {
                                "attributes": [{"name": "str", "value": "str"}],
                                "branchId": "str",
                                "createdAt": "str",
                                "entityId": "str",
                                "entityName": "str",
                                "ownerName": "str",
                                "provisioningState": "str",
                            }
                        ],
                        "defaultEndpointSettings": {"autoscalingLimitMaxCu": 0.0, "autoscalingLimitMinCu": 0.0},
                        "endpoints": [
                            {
                                "attributes": [{"name": "str", "value": "str"}],
                                "branchId": "str",
                                "createdAt": "str",
                                "endpointType": "str",
                                "entityId": "str",
                                "entityName": "str",
                                "projectId": "str",
                                "provisioningState": "str",
                            }
                        ],
                        "entityId": "str",
                        "entityName": "str",
                        "historyRetention": 0,
                        "pgVersion": 0,
                        "provisioningState": "str",
                        "regionId": "str",
                        "roles": [
                            {
                                "attributes": [{"name": "str", "value": "str"}],
                                "branchId": "str",
                                "createdAt": "str",
                                "entityId": "str",
                                "entityName": "str",
                                "isSuperUser": bool,
                                "permissions": ["str"],
                                "provisioningState": "str",
                            }
                        ],
                        "storage": 0,
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_projects_delete(self, resource_group):
        response = await self.client.projects.delete(
            resource_group_name=resource_group.name,
            organization_name="str",
            project_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_projects_list(self, resource_group):
        response = self.client.projects.list(
            resource_group_name=resource_group.name,
            organization_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_projects_get_connection_uri(self, resource_group):
        response = await self.client.projects.get_connection_uri(
            resource_group_name=resource_group.name,
            organization_name="str",
            project_name="str",
            connection_uri_parameters={
                "branchId": "str",
                "connectionStringUri": "str",
                "databaseName": "str",
                "endpointId": "str",
                "isPooled": bool,
                "projectId": "str",
                "roleName": "str",
            },
        )

        # please add some check logic here by yourself
        # ...
