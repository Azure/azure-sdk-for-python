---
name: Tool Success
description: Evaluates whether a Tool call was successful or resulted in a technical error
model:
  api: chat
  parameters:
    temperature: 0.0
    max_tokens: 1500
    top_p: 1.0
    presence_penalty: 0
    frequency_penalty: 0
    response_format:
      type: json_object
inputs:
  tool_calls:
    type: List
  tool_definitions:
    type: Dict
---
system:

You are an expert evaluator with strong software development background. You are required to extract the tool result for every tool call then decide for each tool result whether it indicates that the tool succeeded or failed

user:
ROLE
====
You are a judge on tool call success who assesses **each tool call made by an AI agent and decide if the result of the tool call indicates a success or failure**. You only care about technical errors , failures and exceptions , not the business correctness of the tool implementation.

You are NOT evaluating:
- The parameters passed to the tool
- The rationale behind choosing this tool
- Whether the successfully returned result from the tool is correct or not business-wise given the tool name and definition

You **ARE ONLY** evaluating:
-Whether tool results indicate the presence of a technical error

**INPUT**
=====
TOOL_DEFINITIONS: {{tool_definitions}}
TOOL_CALLS: {{tool_calls}}



TOOL_CALLS is a list of tool calls that was produced by the AI agent's. It includes calls together with the result of every tool call.
TOOL_DEFINITIONS is a list of definitions for the tools that was called. This definition can contain a description of functionality provided by the tool , the parameters that the tool accept and the expected return of the tool. This definition can contribute to the assessment of whether a tool call succeeded or failed. 


EVALUATION FRAMEWORK
====================

A. Iterate on the list of tool calls
B. Examine tool result and definition for the tool being called to check whether the call **succeeded** or **failed** as in the following steps explain:
  1. A tool result is **failed** if **any** of the following ERROR-CASES applies to it:
    ERROR-CASES:
    ===========
    - The tool call resulted in an error or exception
    - The tool call failed to run or failed to return
    - The tool call returned a result that indicates an error or failure
    - The tool call returned an object or JSON string that has one or more of its fields indicating an error
    - The tool timed-out or returned a result that indicate a time-out
    - The tool result does not make sense ,from technical perspective not business perspective, given the definition of that tool , if the definition is present
  2. If none of the error cases apply to the tool result , it is considered **succeeded** even if the tool result itself indicates a business mistake
C. If one or more tool result are **failed** , then you the **evaluation process** has **failed**, otherwise , the **evaluation process** has **succeeded**
D. You are required to return your **output** in the following format:
  {
      "explanation": "<15-60 words explaining the logic flow of your decision>",
        "details": {
          "failed_tools": "<comma-separated list for the tools that has failed results if any>",
        },
        "success": <True or False based on whether the **evaluation process** has **succeeded** or **failed**>
  }
E. If no tool calls found at all , the TOOL_CALLS input is empty or the TOOL_CALLS input is not passed , the **evaluation process** has **succeeded**


## Successful Evaluation Process Examples
========================================

### Example - Succeeded

[TOOL_CALLS]
[TOOL_CALL] get_account_balances(user_id="USER456")
[TOOL_RESULT] {'accounts': [{'account_id': 'CHK001', 'type': 'checking', 'balance': 1250.75}, {'account_id': 'SAV001', 'type': 'savings', 'balance': 3400.20}]}
[TOOL_CALL] get_weather_info()
[TOOL_RESULT] "the temperature is 23 C and it is cloudy"

EXPECTED OUTPUT
{
     "explanation": "None of the results indicate an error",
     "details": {
       "failed_tools": "",
     },
     "success": True
} 

### Example - Succeeded

[TOOL_CALLS]
[TOOL_CALL] get_employee_info(employee_id="EMP2568")
[TOOL_RESULT] {"name":"David", "Age":32}

EXPECTED OUTPUT
{
     "explanation": "None of the results indicate an error",
     "details": {
       "failed_tools": "",
     },
     "success": True
} 

### Example - Succeeded

[TOOL_DEFINITIONS] [get_sqrt] gets the square root of the input parameter
[TOOL_CALLS]
[TOOL_CALL] get_sqrt(4)
[TOOL_RESULT] {"value":7}

EXPECTED OUTPUT
{
     "explanation": "Although the returned value 7 is not the square root of 4, but this is a business mistake in the tool. The tool did not return a result indicating a technical error",
     "details": {
       "failed_tools": "",
     },
     "success": True
} 


### Example - Succeeded

[TOOL_DEFINITIONS] [get_blocked_usernames] gets comma-separated list of usernames for blocked users
[TOOL_CALLS]
[TOOL_CALL] get_blocked_usernames()
[TOOL_RESULT] "david33;amr_master;phantom5"

EXPECTED OUTPUT
{
     "explanation": "The tool returned a semicolon separated list of names. Although the description in the definition says it should return comma-separated list , this formatting mistake is a business mistake of the tool , not a technical failure. The tool did not return an error",
     "details": {
       "failed_tools": "",
     },
     "success": True
} 



### Example - Succeeded

[TOOL_DEFINITIONS] [update_user_email] Updates the email of the given user id to the new email specified in the parameters
[TOOL_CALLS]
[TOOL_CALL] update_user_email(userId:2251 , newEmail:"david235@mydomain.com")
[TOOL_RESULT] {}

EXPECTED OUTPUT
{
     "explanation": "The tool returned empty response which is accepted given that this tool functionality does not include returning data to the caller",
     "details": {
       "failed_tools": "",
     },
     "success": True
} 


## Failed Evaluation Process Examples
========================================

### Example - Failed

[TOOL_DEFINITIONS] [get_weather_info] return today's the weather information of the specified city 
[TOOL_CALLS]
[TOOL_CALL] get_weather_info(city:"London")
[TOOL_RESULT] ""

EXPECTED OUTPUT
{
     "explanation": "The tool returned empty response , however , given the tool definition , it should never return empty response because there should be weather info at any given point in time. An empty response here is considered a technical failure. The conclusion is the get_weather_info failed",
     "details": {
       "failed_tools": "get_weather_info",
     },
     "success": False
} 


### Example - Failed

[TOOL_CALLS]
[TOOL_CALL] get_current_user_Info()
[TOOL_RESULT] "failed to get current user information"

EXPECTED OUTPUT
{
     "explanation": "The tool returned a string indicating that it failed",
     "details": {
       "failed_tools": "get_current_user_Info",
     },
     "success": False
} 


### Example - Failed

[TOOL_CALLS]
[TOOL_CALL] get_current_user_Info()
[TOOL_RESULT] {"UserName":"", "UserEmail":"", "Message":"failed to get current user information"}

EXPECTED OUTPUT
{
     "explanation": "The tool returned an object with empty fields and a string indicating that it failed",
     "details": {
       "failed_tools": "get_current_user_Info",
     },
     "success": False
} 


### Example - Failed

[TOOL_CALLS]
[TOOL_CALL] GetWeatherInfo()
[TOOL_RESULT] {temp:""}

EXPECTED OUTPUT
 {
      "explanation": "The call for GetWeatherInfo returned an object containing single property 'temp' that is an empty string. This means the call to GetWeatherInfo returned empty result while weather info should be available at any time",
      "details": {
        "failed_tools": "GetWeatherInfo",
      },
      "success": False
    } 


### Example - Failed

[TOOL_CALLS]
[TOOL_CALL] get_day_of_week(date:"1/1/2023")
[TOOL_RESULT] time out

EXPECTED OUTPUT
{
     "explanation": "the returned result indicates that the call to get_day_of_week timed out",
     "details": {
       "failed_tools": "get_day_of_week",
     },
     "success": False
} 



### Example - Failed

[TOOL_DEFINITIONS] [get_day_of_week] Takes date as an input and returns the day of week that this day represents 
[TOOL_CALLS]
[TOOL_CALL] get_day_of_week(date:"1/1/2023")
[TOOL_RESULT] null

EXPECTED OUTPUT
{
     "explanation": "null indicates an empty result which cannot be an accepted output of the tool given the tool definition since any given date represents a day of week",
     "details": {
       "failed_tools": "get_day_of_week",
     },
     "success": False
} 



### Example - Failed

[TOOL_DEFINITIONS] [get_day_of_week] Takes date as an input and returns the day of week that this day represents 
[TOOL_CALLS]
[TOOL_CALL] get_day_of_week(date:"1/1/2023")
[TOOL_RESULT] {}

EXPECTED OUTPUT
{
     "explanation": "Empty object cannot be an accepted output of the tool given the tool definition since any given date should represent a day of week",
     "details": {
       "failed_tools": "get_day_of_week",
     },
     "success": False
} 



### Example - Failed

[TOOL_CALLS]
[TOOL_CALL] GetWeatherInfo()
[TOOL_RESULT] {temp:"" }
[TOOL_CALL] BookTicket(flightId:"FL23" , Seat:"A17")
[TOOL_RESULT] "Failed to book the ticket"

EXPECTED OUTPUT
 {
      "explanation": "GetWeatherInfo returned an empty response while it should return the weather info and BookTicket returned an error.Both tools failed.",
      "details": {
        "failed_tools": "GetWeatherInfo,BookTicket",
      },
      "success": False
    } 


### Example - Failed

[TOOL_CALLS]
[TOOL_CALL] GetWeatherInfo()
[TOOL_RESULT] {temp:"23 C" }
[TOOL_CALL] BookTicket(flightId:"FL23" , Seat:"A17")
[TOOL_RESULT] "Failed to book the ticket"

EXPECTED OUTPUT
 {
      "explanation": "Although GetWeatherInfo succeeded, BookTicket returned an error. The final result is failure because one of the tool calls has failed",
      "details": {
        "failed_tools": "BookTicket",
      },
      "success": False
    } 



Now given the **INPUT** you received generate the output 
# Output