# ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# ---------------------------------------------------------

import os
from typing import Dict, List, Optional

from azure.core.credentials import TokenCredential
from azure.ai.evaluation._model_configurations import AzureAIProject
from azure.ai.evaluation.simulator._model_tools import ManagedIdentityAPITokenManager
from azure.ai.evaluation.autogen.raiclient import MachineLearningServicesClient
import jwt
import time

class GeneratedRAIClient:
    """Client for the Responsible AI Service using the auto-generated MachineLearningServicesClient.
    
    :param azure_ai_project: The scope of the Azure AI project. It contains subscription id, resource group, and project name.
    :type azure_ai_project: ~azure.ai.evaluation.AzureAIProject
    :param token_manager: The token manager
    :type token_manager: ~azure.ai.evaluation.simulator._model_tools._identity_manager.APITokenManager
    """
    
    def __init__(self, azure_ai_project: AzureAIProject, token_manager: ManagedIdentityAPITokenManager):
        self.azure_ai_project = azure_ai_project
        self.token_manager = token_manager
        
        # Service URL construction
        if "RAI_SVC_URL" in os.environ:
            endpoint = os.environ["RAI_SVC_URL"].rstrip("/")
        else:
            endpoint = self._get_service_discovery_url()
            
        # Create the autogenerated client
        self._client = MachineLearningServicesClient(
            endpoint=endpoint,
            subscription_id=self.azure_ai_project["subscription_id"],
            resource_group_name=self.azure_ai_project["resource_group_name"],
            workspace_name=self.azure_ai_project["project_name"],
            credential=self.token_manager,
        )
        
    def _get_service_discovery_url(self):
        """Get the service discovery URL.
        
        :return: The service discovery URL
        :rtype: str
        """
        import requests
        bearer_token = self._fetch_or_reuse_token(self.token_manager)
        headers = {"Authorization": f"Bearer {bearer_token}", "Content-Type": "application/json"}
        
        response = requests.get(
            f"https://management.azure.com/subscriptions/{self.azure_ai_project['subscription_id']}/"
            f"resourceGroups/{self.azure_ai_project['resource_group_name']}/"
            f"providers/Microsoft.MachineLearningServices/workspaces/{self.azure_ai_project['project_name']}?"
            f"api-version=2023-08-01-preview",
            headers=headers,
            timeout=5,
        )
        
        if response.status_code != 200:
            msg = (
                f"Failed to connect to your Azure AI project. Please check if the project scope is configured "
                f"correctly, and make sure you have the necessary access permissions. "
                f"Status code: {response.status_code}."
            )
            raise Exception(msg)

        # Parse the discovery URL
        from urllib.parse import urlparse
        base_url = urlparse(response.json()["properties"]["discoveryUrl"])
        return f"{base_url.scheme}://{base_url.netloc}"
    
    async def get_attack_objectives(self, risk_categories: List[str], application_scenario: str = None) -> Dict:
        """Get attack objectives using the auto-generated operations.
        
        :param risk_categories: List of risk categories to generate attack objectives for
        :type risk_categories: List[str]
        :param application_scenario: Optional description of the application scenario for context
        :type application_scenario: str
        :return: The attack objectives
        :rtype: Dict
        """
        
        try:
            # Send the request using the autogenerated client
            response = self._client.rai_svc.get_attack_objectives(
                risk_types=risk_categories,
                lang="en"
            )
            # TODO figure out how to process this string output properly
            return response
            
        except Exception as e:
            import pdb; pdb.set_trace()
            # For now, while the API might not be fully implemented, return a mock response
            mock_objectives = {
                "objectives": [
                    {
                        "risk_category": cat,
                        "conversation_starter": f"This is a mocked attack objective for {cat}",
                        "metadata": {
                            "category": cat
                        }
                    } for cat in risk_categories
                ]
            }
            return mock_objectives
        
    def _fetch_or_reuse_token(self, credential: TokenCredential, token: Optional[str] = None) -> str:
        """Get token. Fetch a new token if the current token is near expiry

        :param credential: The Azure authentication credential.
        :type credential:
        ~azure.core.credentials.TokenCredential
        :param token: The Azure authentication token. Defaults to None. If none, a new token will be fetched.
        :type token: str
        :return: The Azure authentication token.
        """
        if token:
            # Decode the token to get its expiration time
            try:
                decoded_token = jwt.decode(token, options={"verify_signature": False})
            except jwt.PyJWTError:
                pass
            else:
                exp_time = decoded_token["exp"]
                current_time = time.time()

                # Return current token if not near expiry
                if (exp_time - current_time) >= 300:
                    return token

        return credential.get_token("https://management.azure.com/.default").token