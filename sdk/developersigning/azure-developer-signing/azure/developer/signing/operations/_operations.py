# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Iterable, List, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_certificate_profile_operations_get_signing_status_request(  # pylint: disable=name-too-long
    account_name: str, certificate_profile: str, operation_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-06-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/{operationId}"
    path_format_arguments = {
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "certificateProfile": _SERIALIZER.url("certificate_profile", certificate_profile, "str"),
        "operationId": _SERIALIZER.url("operation_id", operation_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificate_profile_operations_get_sign_root_certificate_request(  # pylint: disable=name-too-long
    account_name: str, certificate_profile: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-06-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/rootcert"
    path_format_arguments = {
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "certificateProfile": _SERIALIZER.url("certificate_profile", certificate_profile, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificate_profile_operations_list_extended_key_usages_request(  # pylint: disable=name-too-long
    account_name: str, certificate_profile: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-06-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}/sign/eku"
    path_format_arguments = {
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "certificateProfile": _SERIALIZER.url("certificate_profile", certificate_profile, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_certificate_profile_operations_sign_request(  # pylint: disable=name-too-long
    account_name: str,
    certificate_profile: str,
    *,
    client_version: Optional[str] = None,
    x_correlation_id: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-06-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/codesigningaccounts/{accountName}/certificateprofiles/{certificateProfile}:sign"
    path_format_arguments = {
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "certificateProfile": _SERIALIZER.url("certificate_profile", certificate_profile, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if client_version is not None:
        _headers["client-version"] = _SERIALIZER.header("client_version", client_version, "str")
    if x_correlation_id is not None:
        _headers["x-correlation-id"] = _SERIALIZER.header("x_correlation_id", x_correlation_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class CertificateProfileOperationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.signing.SigningClient`'s
        :attr:`certificate_profile_operations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get_signing_status(  # pylint: disable=inconsistent-return-statements
        self, account_name: str, certificate_profile: str, operation_id: str, **kwargs: Any
    ) -> None:
        """Gets the status of a signing operation.

        This status operation requires that a Sign request has been submitted and the operationId is
        known.

        :param account_name: Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Signing Certificate profile name. Required.
        :type certificate_profile: str
        :param operation_id: The unique ID of the operation. Required.
        :type operation_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_certificate_profile_operations_get_signing_status_request(
            account_name=account_name,
            certificate_profile=certificate_profile,
            operation_id=operation_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "region": self._serialize.url("self._config.region", self._config.region, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_sign_root_certificate(self, account_name: str, certificate_profile: str, **kwargs: Any) -> bytes:
        """Gets the signing root certificate on the certificate chain for that account and profile name.

        The root certificate is generated as part of the initial account creation and it is used to
        sign the bits for the profile provided.

        :param account_name: Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Signing Certificate profile name. Required.
        :type certificate_profile: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: bytes
        :rtype: bytes
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[bytes] = kwargs.pop("cls", None)

        _request = build_certificate_profile_operations_get_sign_root_certificate_request(
            account_name=account_name,
            certificate_profile=certificate_profile,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "region": self._serialize.url("self._config.region", self._config.region, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response.read()
        deserialized = response.content

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list_extended_key_usages(
        self, account_name: str, certificate_profile: str, **kwargs: Any
    ) -> Iterable["_models.ExtendedKeyUsage"]:
        """Gets a list of extended key usage object identifiers that are allowed for this account and
        profile combination.

        The list of extended key usages are used to determine the purpose of the certificate usage as
        part of the signing operation.

        :param account_name: Azure Developer Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Developer Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :return: An iterator like instance of ExtendedKeyUsage
        :rtype: ~azure.core.paging.ItemPaged[~azure.developer.signing.models.ExtendedKeyUsage]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "eku": "str"  # An oid string that represents an eku. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.ExtendedKeyUsage]] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_certificate_profile_operations_list_extended_key_usages_request(
                    account_name=account_name,
                    certificate_profile=certificate_profile,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "region": self._serialize.url("self._config.region", self._config.region, "str", skip_quote=True),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "region": self._serialize.url("self._config.region", self._config.region, "str", skip_quote=True),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.ExtendedKeyUsage], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    def _sign_initial(
        self,
        account_name: str,
        certificate_profile: str,
        body: Union[_models.SigningPayloadOptions, JSON, IO[bytes]],
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_certificate_profile_operations_sign_request(
            account_name=account_name,
            certificate_profile=certificate_profile,
            client_version=client_version,
            x_correlation_id=x_correlation_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "region": self._serialize.url("self._config.region", self._config.region, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))
        response_headers["x-ms-error-code"] = self._deserialize("str", response.headers.get("x-ms-error-code"))

        deserialized = _deserialize(JSON, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_sign(
        self,
        account_name: str,
        certificate_profile: str,
        body: _models.SigningPayloadOptions,
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SignResult]:
        # pylint: disable=line-too-long
        """Submit a sign operation.

        Submit a sign operation under the created account and profile name provided.

        :param account_name: Azure Developer Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Developer Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :param body: Required.
        :type body: ~azure.developer.signing.models.SigningPayloadOptions
        :keyword client_version: An optional client version. Default value is None.
        :paramtype client_version: str
        :keyword x_correlation_id: An identifier used to batch multiple requests. Default value is
         None.
        :paramtype x_correlation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns SignResult. The SignResult is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.developer.signing.models.SignResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "digest": bytes("bytes", encoding="utf-8"),  # Content digest to sign.
                      Required.
                    "signatureAlgorithm": "str",  # The supported signature algorithm
                      identifiers. Required. Known values are: "RS256", "RS384", "RS512", "PS256",
                      "PS384", "PS512", "ES256", "ES384", "ES512", and "ES256K".
                    "authenticodeHashList": [
                        bytes("bytes", encoding="utf-8")  # Optional. List of authenticode
                          digital signatures.
                    ],
                    "fileHashList": [
                        bytes("bytes", encoding="utf-8")  # Optional. List of full file
                          digital signatures.
                    ]
                }

                # response body for status code(s): 202
                response == {
                    "signature": bytes("bytes", encoding="utf-8"),  # Optional. Digital signature
                      of the requested content digest.
                    "signingCertificate": bytes("bytes", encoding="utf-8")  # Optional. Signing
                      certificate corresponding to the private key used to sign the requested  digest.
                }
        """

    @overload
    def begin_sign(
        self,
        account_name: str,
        certificate_profile: str,
        body: JSON,
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SignResult]:
        # pylint: disable=line-too-long
        """Submit a sign operation.

        Submit a sign operation under the created account and profile name provided.

        :param account_name: Azure Developer Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Developer Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :param body: Required.
        :type body: JSON
        :keyword client_version: An optional client version. Default value is None.
        :paramtype client_version: str
        :keyword x_correlation_id: An identifier used to batch multiple requests. Default value is
         None.
        :paramtype x_correlation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns SignResult. The SignResult is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.developer.signing.models.SignResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "signature": bytes("bytes", encoding="utf-8"),  # Optional. Digital signature
                      of the requested content digest.
                    "signingCertificate": bytes("bytes", encoding="utf-8")  # Optional. Signing
                      certificate corresponding to the private key used to sign the requested  digest.
                }
        """

    @overload
    def begin_sign(
        self,
        account_name: str,
        certificate_profile: str,
        body: IO[bytes],
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[_models.SignResult]:
        # pylint: disable=line-too-long
        """Submit a sign operation.

        Submit a sign operation under the created account and profile name provided.

        :param account_name: Azure Developer Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Developer Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :param body: Required.
        :type body: IO[bytes]
        :keyword client_version: An optional client version. Default value is None.
        :paramtype client_version: str
        :keyword x_correlation_id: An identifier used to batch multiple requests. Default value is
         None.
        :paramtype x_correlation_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns SignResult. The SignResult is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.developer.signing.models.SignResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "signature": bytes("bytes", encoding="utf-8"),  # Optional. Digital signature
                      of the requested content digest.
                    "signingCertificate": bytes("bytes", encoding="utf-8")  # Optional. Signing
                      certificate corresponding to the private key used to sign the requested  digest.
                }
        """

    @distributed_trace
    def begin_sign(
        self,
        account_name: str,
        certificate_profile: str,
        body: Union[_models.SigningPayloadOptions, JSON, IO[bytes]],
        *,
        client_version: Optional[str] = None,
        x_correlation_id: Optional[str] = None,
        **kwargs: Any
    ) -> LROPoller[_models.SignResult]:
        # pylint: disable=line-too-long
        """Submit a sign operation.

        Submit a sign operation under the created account and profile name provided.

        :param account_name: Azure Developer Signing account name. Required.
        :type account_name: str
        :param certificate_profile: Azure Developer Signing certificate profile name under an account.
         Required.
        :type certificate_profile: str
        :param body: Is one of the following types: SigningPayloadOptions, JSON, IO[bytes] Required.
        :type body: ~azure.developer.signing.models.SigningPayloadOptions or JSON or IO[bytes]
        :keyword client_version: An optional client version. Default value is None.
        :paramtype client_version: str
        :keyword x_correlation_id: An identifier used to batch multiple requests. Default value is
         None.
        :paramtype x_correlation_id: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns SignResult. The SignResult is compatible with
         MutableMapping
        :rtype: ~azure.core.polling.LROPoller[~azure.developer.signing.models.SignResult]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "digest": bytes("bytes", encoding="utf-8"),  # Content digest to sign.
                      Required.
                    "signatureAlgorithm": "str",  # The supported signature algorithm
                      identifiers. Required. Known values are: "RS256", "RS384", "RS512", "PS256",
                      "PS384", "PS512", "ES256", "ES384", "ES512", and "ES256K".
                    "authenticodeHashList": [
                        bytes("bytes", encoding="utf-8")  # Optional. List of authenticode
                          digital signatures.
                    ],
                    "fileHashList": [
                        bytes("bytes", encoding="utf-8")  # Optional. List of full file
                          digital signatures.
                    ]
                }

                # response body for status code(s): 202
                response == {
                    "signature": bytes("bytes", encoding="utf-8"),  # Optional. Digital signature
                      of the requested content digest.
                    "signingCertificate": bytes("bytes", encoding="utf-8")  # Optional. Signing
                      certificate corresponding to the private key used to sign the requested  digest.
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SignResult] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._sign_initial(
                account_name=account_name,
                certificate_profile=certificate_profile,
                body=body,
                client_version=client_version,
                x_correlation_id=x_correlation_id,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )
            response_headers["x-ms-error-code"] = self._deserialize("str", response.headers.get("x-ms-error-code"))

            deserialized = _deserialize(_models.SignResult, response.json().get("result"))
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "region": self._serialize.url("self._config.region", self._config.region, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, LROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[_models.SignResult].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.SignResult](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )
