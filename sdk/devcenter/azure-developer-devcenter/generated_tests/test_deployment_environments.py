# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import DeploymentEnvironmentsClientTestBase, DeploymentEnvironmentsPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDeploymentEnvironments(DeploymentEnvironmentsClientTestBase):
    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_list_all_environments(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.list_all_environments(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_list_environments(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.list_environments(
            project_name="str",
            user_id="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_get_environment(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.get_environment(
            project_name="str",
            user_id="str",
            environment_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_begin_create_or_update_environment(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.begin_create_or_update_environment(
            project_name="str",
            user_id="str",
            environment_name="str",
            body={
                "catalogName": "str",
                "environmentDefinitionName": "str",
                "environmentType": "str",
                "name": "str",
                "error": ~azure.core.ODataV4Format,
                "parameters": {"str": {}},
                "provisioningState": "str",
                "resourceGroupId": "str",
                "user": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_begin_delete_environment(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.begin_delete_environment(
            project_name="str",
            user_id="str",
            environment_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_list_catalogs(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.list_catalogs(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_get_catalog(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.get_catalog(
            project_name="str",
            catalog_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_list_environment_definitions(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.list_environment_definitions(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_list_environment_definitions_by_catalog(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.list_environment_definitions_by_catalog(
            project_name="str",
            catalog_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_get_environment_definition(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.get_environment_definition(
            project_name="str",
            catalog_name="str",
            definition_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DeploymentEnvironmentsPreparer()
    @recorded_by_proxy
    def test_list_environment_types(self, deploymentenvironments_endpoint):
        client = self.create_client(endpoint=deploymentenvironments_endpoint)
        response = client.list_environment_types(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
