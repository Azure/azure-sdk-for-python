# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import DevBoxesPreparer
from testpreparer_async import DevBoxesClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDevBoxesAsync(DevBoxesClientTestBaseAsync):
    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_list_pools(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = client.list_pools(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_get_pool(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await client.get_pool(
            project_name="str",
            pool_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_list_schedules(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = client.list_schedules(
            project_name="str",
            pool_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_get_schedule(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await client.get_schedule(
            project_name="str",
            pool_name="str",
            schedule_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_list_all_dev_boxes(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = client.list_all_dev_boxes()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_list_all_dev_boxes_by_user(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = client.list_all_dev_boxes_by_user(
            user_id="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_list_dev_boxes(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = client.list_dev_boxes(
            project_name="str",
            user_id="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_get_dev_box(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await client.get_dev_box(
            project_name="str",
            user_id="str",
            dev_box_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_begin_create_dev_box(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await (
            await client.begin_create_dev_box(
                project_name="str",
                user_id="str",
                dev_box_name="str",
                body={
                    "name": "str",
                    "poolName": "str",
                    "actionState": "str",
                    "createdTime": "2020-02-20 00:00:00",
                    "error": ~azure.core.ODataV4Format,
                    "hardwareProfile": {"memoryGB": 0, "skuName": "str", "vCPUs": 0},
                    "hibernateSupport": "str",
                    "imageReference": {
                        "name": "str",
                        "operatingSystem": "str",
                        "osBuildNumber": "str",
                        "publishedDate": "2020-02-20 00:00:00",
                        "version": "str",
                    },
                    "localAdministrator": "str",
                    "location": "str",
                    "osType": "str",
                    "powerState": "str",
                    "projectName": "str",
                    "provisioningState": "str",
                    "storageProfile": {"osDisk": {"diskSizeGB": 0}},
                    "uniqueId": "str",
                    "user": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_begin_delete_dev_box(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await (
            await client.begin_delete_dev_box(
                project_name="str",
                user_id="str",
                dev_box_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_begin_start_dev_box(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await (
            await client.begin_start_dev_box(
                project_name="str",
                user_id="str",
                dev_box_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_begin_stop_dev_box(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await (
            await client.begin_stop_dev_box(
                project_name="str",
                user_id="str",
                dev_box_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_begin_restart_dev_box(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await (
            await client.begin_restart_dev_box(
                project_name="str",
                user_id="str",
                dev_box_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_get_remote_connection(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await client.get_remote_connection(
            project_name="str",
            user_id="str",
            dev_box_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_list_dev_box_actions(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = client.list_dev_box_actions(
            project_name="str",
            user_id="str",
            dev_box_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_get_dev_box_action(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await client.get_dev_box_action(
            project_name="str",
            user_id="str",
            dev_box_name="str",
            action_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_skip_action(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await client.skip_action(
            project_name="str",
            user_id="str",
            dev_box_name="str",
            action_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_delay_action(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = await client.delay_action(
            project_name="str",
            user_id="str",
            dev_box_name="str",
            action_name="str",
            delay_until="2020-02-20 00:00:00",
        )

        # please add some check logic here by yourself
        # ...

    @DevBoxesPreparer()
    @recorded_by_proxy_async
    async def test_delay_all_actions(self, devboxes_endpoint):
        client = self.create_async_client(endpoint=devboxes_endpoint)
        response = client.delay_all_actions(
            project_name="str",
            user_id="str",
            dev_box_name="str",
            delay_until="2020-02-20 00:00:00",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
