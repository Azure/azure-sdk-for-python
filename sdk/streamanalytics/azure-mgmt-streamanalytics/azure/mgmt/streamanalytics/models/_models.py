# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Serialization(msrest.serialization.Model):
    """Describes how data from an input is serialized or how data is serialized when written to an output.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AvroSerialization, CsvSerialization, JsonSerialization, ParquetSerialization.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of serialization that the input or output uses.
     Required on PUT (CreateOrReplace) requests.Constant filled by server. Possible values include:
     "Csv", "Avro", "Json", "Parquet".
    :vartype type: str or ~stream_analytics_management_client.models.EventSerializationType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Avro': 'AvroSerialization', 'Csv': 'CsvSerialization', 'Json': 'JsonSerialization', 'Parquet': 'ParquetSerialization'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Serialization, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class AvroSerialization(Serialization):
    """Describes how data from an input is serialized or how data is serialized when written to an output in Avro format.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of serialization that the input or output uses.
     Required on PUT (CreateOrReplace) requests.Constant filled by server. Possible values include:
     "Csv", "Avro", "Json", "Parquet".
    :vartype type: str or ~stream_analytics_management_client.models.EventSerializationType
    :ivar properties: The properties that are associated with the Avro serialization type. Required
     on PUT (CreateOrReplace) requests.
    :vartype properties: any
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: The properties that are associated with the Avro serialization type.
         Required on PUT (CreateOrReplace) requests.
        :paramtype properties: any
        """
        super(AvroSerialization, self).__init__(**kwargs)
        self.type = 'Avro'  # type: str
        self.properties = kwargs.get('properties', None)


class OutputDataSource(msrest.serialization.Model):
    """Describes the data source that output will be written to.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureDataLakeStoreOutputDataSource, EventHubV2OutputDataSource, EventHubOutputDataSource, ServiceBusQueueOutputDataSource, ServiceBusTopicOutputDataSource, AzureSynapseOutputDataSource, AzureSqlDatabaseOutputDataSource, BlobOutputDataSource, DocumentDbOutputDataSource, AzureTableOutputDataSource, PowerBIOutputDataSource.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Microsoft.DataLake/Accounts': 'AzureDataLakeStoreOutputDataSource', 'Microsoft.EventHub/EventHub': 'EventHubV2OutputDataSource', 'Microsoft.ServiceBus/EventHub': 'EventHubOutputDataSource', 'Microsoft.ServiceBus/Queue': 'ServiceBusQueueOutputDataSource', 'Microsoft.ServiceBus/Topic': 'ServiceBusTopicOutputDataSource', 'Microsoft.Sql/Server/DataWarehouse': 'AzureSynapseOutputDataSource', 'Microsoft.Sql/Server/Database': 'AzureSqlDatabaseOutputDataSource', 'Microsoft.Storage/Blob': 'BlobOutputDataSource', 'Microsoft.Storage/DocumentDB': 'DocumentDbOutputDataSource', 'Microsoft.Storage/Table': 'AzureTableOutputDataSource', 'PowerBI': 'PowerBIOutputDataSource'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OutputDataSource, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class AzureDataLakeStoreOutputDataSource(OutputDataSource):
    """Describes an Azure Data Lake Store output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar refresh_token: A refresh token that can be used to obtain a valid access token that can
     then be used to authenticate with the data source. A valid refresh token is currently only
     obtainable via the Azure Portal. It is recommended to put a dummy string value here when
     creating the data source and then going to the Azure Portal to authenticate the data source
     which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
     requests.
    :vartype refresh_token: str
    :ivar token_user_principal_name: The user principal name (UPN) of the user that was used to
     obtain the refresh token. Use this property to help remember which user was used to obtain the
     refresh token.
    :vartype token_user_principal_name: str
    :ivar token_user_display_name: The user display name of the user that was used to obtain the
     refresh token. Use this property to help remember which user was used to obtain the refresh
     token.
    :vartype token_user_display_name: str
    :ivar account_name: The name of the Azure Data Lake Store account. Required on PUT
     (CreateOrReplace) requests.
    :vartype account_name: str
    :ivar tenant_id: The tenant id of the user used to obtain the refresh token. Required on PUT
     (CreateOrReplace) requests.
    :vartype tenant_id: str
    :ivar file_path_prefix: The location of the file to which the output should be written to.
     Required on PUT (CreateOrReplace) requests.
    :vartype file_path_prefix: str
    :ivar date_format: The date format. Wherever {date} appears in filePathPrefix, the value of
     this property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in filePathPrefix, the value of
     this property is used as the time format instead.
    :vartype time_format: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'refresh_token': {'key': 'properties.refreshToken', 'type': 'str'},
        'token_user_principal_name': {'key': 'properties.tokenUserPrincipalName', 'type': 'str'},
        'token_user_display_name': {'key': 'properties.tokenUserDisplayName', 'type': 'str'},
        'account_name': {'key': 'properties.accountName', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'file_path_prefix': {'key': 'properties.filePathPrefix', 'type': 'str'},
        'date_format': {'key': 'properties.dateFormat', 'type': 'str'},
        'time_format': {'key': 'properties.timeFormat', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword refresh_token: A refresh token that can be used to obtain a valid access token that
         can then be used to authenticate with the data source. A valid refresh token is currently only
         obtainable via the Azure Portal. It is recommended to put a dummy string value here when
         creating the data source and then going to the Azure Portal to authenticate the data source
         which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
         requests.
        :paramtype refresh_token: str
        :keyword token_user_principal_name: The user principal name (UPN) of the user that was used to
         obtain the refresh token. Use this property to help remember which user was used to obtain the
         refresh token.
        :paramtype token_user_principal_name: str
        :keyword token_user_display_name: The user display name of the user that was used to obtain the
         refresh token. Use this property to help remember which user was used to obtain the refresh
         token.
        :paramtype token_user_display_name: str
        :keyword account_name: The name of the Azure Data Lake Store account. Required on PUT
         (CreateOrReplace) requests.
        :paramtype account_name: str
        :keyword tenant_id: The tenant id of the user used to obtain the refresh token. Required on PUT
         (CreateOrReplace) requests.
        :paramtype tenant_id: str
        :keyword file_path_prefix: The location of the file to which the output should be written to.
         Required on PUT (CreateOrReplace) requests.
        :paramtype file_path_prefix: str
        :keyword date_format: The date format. Wherever {date} appears in filePathPrefix, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in filePathPrefix, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(AzureDataLakeStoreOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.DataLake/Accounts'  # type: str
        self.refresh_token = kwargs.get('refresh_token', None)
        self.token_user_principal_name = kwargs.get('token_user_principal_name', None)
        self.token_user_display_name = kwargs.get('token_user_display_name', None)
        self.account_name = kwargs.get('account_name', None)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.file_path_prefix = kwargs.get('file_path_prefix', None)
        self.date_format = kwargs.get('date_format', None)
        self.time_format = kwargs.get('time_format', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class OAuthBasedDataSourceProperties(msrest.serialization.Model):
    """The properties that are associated with data sources that use OAuth as their authentication model.

    :ivar refresh_token: A refresh token that can be used to obtain a valid access token that can
     then be used to authenticate with the data source. A valid refresh token is currently only
     obtainable via the Azure Portal. It is recommended to put a dummy string value here when
     creating the data source and then going to the Azure Portal to authenticate the data source
     which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
     requests.
    :vartype refresh_token: str
    :ivar token_user_principal_name: The user principal name (UPN) of the user that was used to
     obtain the refresh token. Use this property to help remember which user was used to obtain the
     refresh token.
    :vartype token_user_principal_name: str
    :ivar token_user_display_name: The user display name of the user that was used to obtain the
     refresh token. Use this property to help remember which user was used to obtain the refresh
     token.
    :vartype token_user_display_name: str
    """

    _attribute_map = {
        'refresh_token': {'key': 'refreshToken', 'type': 'str'},
        'token_user_principal_name': {'key': 'tokenUserPrincipalName', 'type': 'str'},
        'token_user_display_name': {'key': 'tokenUserDisplayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword refresh_token: A refresh token that can be used to obtain a valid access token that
         can then be used to authenticate with the data source. A valid refresh token is currently only
         obtainable via the Azure Portal. It is recommended to put a dummy string value here when
         creating the data source and then going to the Azure Portal to authenticate the data source
         which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
         requests.
        :paramtype refresh_token: str
        :keyword token_user_principal_name: The user principal name (UPN) of the user that was used to
         obtain the refresh token. Use this property to help remember which user was used to obtain the
         refresh token.
        :paramtype token_user_principal_name: str
        :keyword token_user_display_name: The user display name of the user that was used to obtain the
         refresh token. Use this property to help remember which user was used to obtain the refresh
         token.
        :paramtype token_user_display_name: str
        """
        super(OAuthBasedDataSourceProperties, self).__init__(**kwargs)
        self.refresh_token = kwargs.get('refresh_token', None)
        self.token_user_principal_name = kwargs.get('token_user_principal_name', None)
        self.token_user_display_name = kwargs.get('token_user_display_name', None)


class AzureDataLakeStoreOutputDataSourceProperties(OAuthBasedDataSourceProperties):
    """The properties that are associated with an Azure Data Lake Store.

    :ivar refresh_token: A refresh token that can be used to obtain a valid access token that can
     then be used to authenticate with the data source. A valid refresh token is currently only
     obtainable via the Azure Portal. It is recommended to put a dummy string value here when
     creating the data source and then going to the Azure Portal to authenticate the data source
     which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
     requests.
    :vartype refresh_token: str
    :ivar token_user_principal_name: The user principal name (UPN) of the user that was used to
     obtain the refresh token. Use this property to help remember which user was used to obtain the
     refresh token.
    :vartype token_user_principal_name: str
    :ivar token_user_display_name: The user display name of the user that was used to obtain the
     refresh token. Use this property to help remember which user was used to obtain the refresh
     token.
    :vartype token_user_display_name: str
    :ivar account_name: The name of the Azure Data Lake Store account. Required on PUT
     (CreateOrReplace) requests.
    :vartype account_name: str
    :ivar tenant_id: The tenant id of the user used to obtain the refresh token. Required on PUT
     (CreateOrReplace) requests.
    :vartype tenant_id: str
    :ivar file_path_prefix: The location of the file to which the output should be written to.
     Required on PUT (CreateOrReplace) requests.
    :vartype file_path_prefix: str
    :ivar date_format: The date format. Wherever {date} appears in filePathPrefix, the value of
     this property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in filePathPrefix, the value of
     this property is used as the time format instead.
    :vartype time_format: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _attribute_map = {
        'refresh_token': {'key': 'refreshToken', 'type': 'str'},
        'token_user_principal_name': {'key': 'tokenUserPrincipalName', 'type': 'str'},
        'token_user_display_name': {'key': 'tokenUserDisplayName', 'type': 'str'},
        'account_name': {'key': 'accountName', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'file_path_prefix': {'key': 'filePathPrefix', 'type': 'str'},
        'date_format': {'key': 'dateFormat', 'type': 'str'},
        'time_format': {'key': 'timeFormat', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword refresh_token: A refresh token that can be used to obtain a valid access token that
         can then be used to authenticate with the data source. A valid refresh token is currently only
         obtainable via the Azure Portal. It is recommended to put a dummy string value here when
         creating the data source and then going to the Azure Portal to authenticate the data source
         which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
         requests.
        :paramtype refresh_token: str
        :keyword token_user_principal_name: The user principal name (UPN) of the user that was used to
         obtain the refresh token. Use this property to help remember which user was used to obtain the
         refresh token.
        :paramtype token_user_principal_name: str
        :keyword token_user_display_name: The user display name of the user that was used to obtain the
         refresh token. Use this property to help remember which user was used to obtain the refresh
         token.
        :paramtype token_user_display_name: str
        :keyword account_name: The name of the Azure Data Lake Store account. Required on PUT
         (CreateOrReplace) requests.
        :paramtype account_name: str
        :keyword tenant_id: The tenant id of the user used to obtain the refresh token. Required on PUT
         (CreateOrReplace) requests.
        :paramtype tenant_id: str
        :keyword file_path_prefix: The location of the file to which the output should be written to.
         Required on PUT (CreateOrReplace) requests.
        :paramtype file_path_prefix: str
        :keyword date_format: The date format. Wherever {date} appears in filePathPrefix, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in filePathPrefix, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(AzureDataLakeStoreOutputDataSourceProperties, self).__init__(**kwargs)
        self.account_name = kwargs.get('account_name', None)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.file_path_prefix = kwargs.get('file_path_prefix', None)
        self.date_format = kwargs.get('date_format', None)
        self.time_format = kwargs.get('time_format', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class FunctionBinding(msrest.serialization.Model):
    """The physical binding of the function. For example, in the Azure Machine Learning web service’s case, this describes the endpoint.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureMachineLearningWebServiceFunctionBinding, JavaScriptFunctionBinding.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the function binding type.Constant filled by server.
    :vartype type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Microsoft.MachineLearning/WebService': 'AzureMachineLearningWebServiceFunctionBinding', 'Microsoft.StreamAnalytics/JavascriptUdf': 'JavaScriptFunctionBinding'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(FunctionBinding, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class AzureMachineLearningWebServiceFunctionBinding(FunctionBinding):
    """The binding to an Azure Machine Learning web service.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the function binding type.Constant filled by server.
    :vartype type: str
    :ivar endpoint: The Request-Response execute endpoint of the Azure Machine Learning web
     service. Find out more here:
     https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs.
    :vartype endpoint: str
    :ivar api_key: The API key used to authenticate with Request-Response endpoint.
    :vartype api_key: str
    :ivar inputs: The inputs for the Azure Machine Learning web service endpoint.
    :vartype inputs:
     ~stream_analytics_management_client.models.AzureMachineLearningWebServiceInputs
    :ivar outputs: A list of outputs from the Azure Machine Learning web service endpoint
     execution.
    :vartype outputs:
     list[~stream_analytics_management_client.models.AzureMachineLearningWebServiceOutputColumn]
    :ivar batch_size: Number between 1 and 10000 describing maximum number of rows for every Azure
     ML RRS execute request. Default is 1000.
    :vartype batch_size: int
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'endpoint': {'key': 'properties.endpoint', 'type': 'str'},
        'api_key': {'key': 'properties.apiKey', 'type': 'str'},
        'inputs': {'key': 'properties.inputs', 'type': 'AzureMachineLearningWebServiceInputs'},
        'outputs': {'key': 'properties.outputs', 'type': '[AzureMachineLearningWebServiceOutputColumn]'},
        'batch_size': {'key': 'properties.batchSize', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword endpoint: The Request-Response execute endpoint of the Azure Machine Learning web
         service. Find out more here:
         https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs.
        :paramtype endpoint: str
        :keyword api_key: The API key used to authenticate with Request-Response endpoint.
        :paramtype api_key: str
        :keyword inputs: The inputs for the Azure Machine Learning web service endpoint.
        :paramtype inputs:
         ~stream_analytics_management_client.models.AzureMachineLearningWebServiceInputs
        :keyword outputs: A list of outputs from the Azure Machine Learning web service endpoint
         execution.
        :paramtype outputs:
         list[~stream_analytics_management_client.models.AzureMachineLearningWebServiceOutputColumn]
        :keyword batch_size: Number between 1 and 10000 describing maximum number of rows for every
         Azure ML RRS execute request. Default is 1000.
        :paramtype batch_size: int
        """
        super(AzureMachineLearningWebServiceFunctionBinding, self).__init__(**kwargs)
        self.type = 'Microsoft.MachineLearning/WebService'  # type: str
        self.endpoint = kwargs.get('endpoint', None)
        self.api_key = kwargs.get('api_key', None)
        self.inputs = kwargs.get('inputs', None)
        self.outputs = kwargs.get('outputs', None)
        self.batch_size = kwargs.get('batch_size', None)


class FunctionRetrieveDefaultDefinitionParameters(msrest.serialization.Model):
    """Parameters used to specify the type of function to retrieve the default definition for.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters, JavaScriptFunctionRetrieveDefaultDefinitionParameters.

    All required parameters must be populated in order to send to Azure.

    :ivar binding_type: Required. Indicates the function binding type.Constant filled by server.
    :vartype binding_type: str
    """

    _validation = {
        'binding_type': {'required': True},
    }

    _attribute_map = {
        'binding_type': {'key': 'bindingType', 'type': 'str'},
    }

    _subtype_map = {
        'binding_type': {'Microsoft.MachineLearning/WebService': 'AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters', 'Microsoft.StreamAnalytics/JavascriptUdf': 'JavaScriptFunctionRetrieveDefaultDefinitionParameters'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(FunctionRetrieveDefaultDefinitionParameters, self).__init__(**kwargs)
        self.binding_type = None  # type: Optional[str]


class AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters(FunctionRetrieveDefaultDefinitionParameters):
    """The parameters needed to retrieve the default function definition for an Azure Machine Learning web service function.

    All required parameters must be populated in order to send to Azure.

    :ivar binding_type: Required. Indicates the function binding type.Constant filled by server.
    :vartype binding_type: str
    :ivar execute_endpoint: The Request-Response execute endpoint of the Azure Machine Learning web
     service. Find out more here:
     https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs.
    :vartype execute_endpoint: str
    :ivar udf_type: The function type. The only acceptable values to pass in are None and "Scalar".
     The default value is None.
    :vartype udf_type: str
    """

    _validation = {
        'binding_type': {'required': True},
    }

    _attribute_map = {
        'binding_type': {'key': 'bindingType', 'type': 'str'},
        'execute_endpoint': {'key': 'bindingRetrievalProperties.executeEndpoint', 'type': 'str'},
        'udf_type': {'key': 'bindingRetrievalProperties.udfType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword execute_endpoint: The Request-Response execute endpoint of the Azure Machine Learning
         web service. Find out more here:
         https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs.
        :paramtype execute_endpoint: str
        :keyword udf_type: The function type. The only acceptable values to pass in are None and
         "Scalar". The default value is None.
        :paramtype udf_type: str
        """
        super(AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters, self).__init__(**kwargs)
        self.binding_type = 'Microsoft.MachineLearning/WebService'  # type: str
        self.execute_endpoint = kwargs.get('execute_endpoint', None)
        self.udf_type = kwargs.get('udf_type', None)


class AzureMachineLearningWebServiceInputColumn(msrest.serialization.Model):
    """Describes an input column for the Azure Machine Learning web service endpoint.

    :ivar name: The name of the input column.
    :vartype name: str
    :ivar data_type: The (Azure Machine Learning supported) data type of the input column. A list
     of valid  Azure Machine Learning data types are described at
     https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
    :vartype data_type: str
    :ivar map_to: The zero based index of the function parameter this input maps to.
    :vartype map_to: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'data_type': {'key': 'dataType', 'type': 'str'},
        'map_to': {'key': 'mapTo', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the input column.
        :paramtype name: str
        :keyword data_type: The (Azure Machine Learning supported) data type of the input column. A
         list of valid  Azure Machine Learning data types are described at
         https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
        :paramtype data_type: str
        :keyword map_to: The zero based index of the function parameter this input maps to.
        :paramtype map_to: int
        """
        super(AzureMachineLearningWebServiceInputColumn, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.data_type = kwargs.get('data_type', None)
        self.map_to = kwargs.get('map_to', None)


class AzureMachineLearningWebServiceInputs(msrest.serialization.Model):
    """The inputs for the Azure Machine Learning web service endpoint.

    :ivar name: The name of the input. This is the name provided while authoring the endpoint.
    :vartype name: str
    :ivar column_names: A list of input columns for the Azure Machine Learning web service
     endpoint.
    :vartype column_names:
     list[~stream_analytics_management_client.models.AzureMachineLearningWebServiceInputColumn]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'column_names': {'key': 'columnNames', 'type': '[AzureMachineLearningWebServiceInputColumn]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the input. This is the name provided while authoring the endpoint.
        :paramtype name: str
        :keyword column_names: A list of input columns for the Azure Machine Learning web service
         endpoint.
        :paramtype column_names:
         list[~stream_analytics_management_client.models.AzureMachineLearningWebServiceInputColumn]
        """
        super(AzureMachineLearningWebServiceInputs, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.column_names = kwargs.get('column_names', None)


class AzureMachineLearningWebServiceOutputColumn(msrest.serialization.Model):
    """Describes an output column for the Azure Machine Learning web service endpoint.

    :ivar name: The name of the output column.
    :vartype name: str
    :ivar data_type: The (Azure Machine Learning supported) data type of the output column. A list
     of valid  Azure Machine Learning data types are described at
     https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
    :vartype data_type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'data_type': {'key': 'dataType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the output column.
        :paramtype name: str
        :keyword data_type: The (Azure Machine Learning supported) data type of the output column. A
         list of valid  Azure Machine Learning data types are described at
         https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx .
        :paramtype data_type: str
        """
        super(AzureMachineLearningWebServiceOutputColumn, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.data_type = kwargs.get('data_type', None)


class AzureSqlDatabaseDataSourceProperties(msrest.serialization.Model):
    """The properties that are associated with an Azure SQL database data source.

    :ivar server: The name of the SQL server containing the Azure SQL database. Required on PUT
     (CreateOrReplace) requests.
    :vartype server: str
    :ivar database: The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
    :vartype database: str
    :ivar user: The user name that will be used to connect to the Azure SQL database. Required on
     PUT (CreateOrReplace) requests.
    :vartype user: str
    :ivar password: The password that will be used to connect to the Azure SQL database. Required
     on PUT (CreateOrReplace) requests.
    :vartype password: str
    :ivar table: The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace)
     requests.
    :vartype table: str
    :ivar max_batch_count: Max Batch count for write to Sql database, the default value is 10,000.
     Optional on PUT requests.
    :vartype max_batch_count: float
    :ivar max_writer_count: Max Writer count, currently only 1(single writer) and 0(based on query
     partition) are available. Optional on PUT requests.
    :vartype max_writer_count: float
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _attribute_map = {
        'server': {'key': 'server', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'user': {'key': 'user', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'max_batch_count': {'key': 'maxBatchCount', 'type': 'float'},
        'max_writer_count': {'key': 'maxWriterCount', 'type': 'float'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword server: The name of the SQL server containing the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype server: str
        :keyword database: The name of the Azure SQL database. Required on PUT (CreateOrReplace)
         requests.
        :paramtype database: str
        :keyword user: The user name that will be used to connect to the Azure SQL database. Required
         on PUT (CreateOrReplace) requests.
        :paramtype user: str
        :keyword password: The password that will be used to connect to the Azure SQL database.
         Required on PUT (CreateOrReplace) requests.
        :paramtype password: str
        :keyword table: The name of the table in the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype table: str
        :keyword max_batch_count: Max Batch count for write to Sql database, the default value is
         10,000. Optional on PUT requests.
        :paramtype max_batch_count: float
        :keyword max_writer_count: Max Writer count, currently only 1(single writer) and 0(based on
         query partition) are available. Optional on PUT requests.
        :paramtype max_writer_count: float
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(AzureSqlDatabaseDataSourceProperties, self).__init__(**kwargs)
        self.server = kwargs.get('server', None)
        self.database = kwargs.get('database', None)
        self.user = kwargs.get('user', None)
        self.password = kwargs.get('password', None)
        self.table = kwargs.get('table', None)
        self.max_batch_count = kwargs.get('max_batch_count', None)
        self.max_writer_count = kwargs.get('max_writer_count', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class AzureSqlDatabaseOutputDataSource(OutputDataSource):
    """Describes an Azure SQL database output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar server: The name of the SQL server containing the Azure SQL database. Required on PUT
     (CreateOrReplace) requests.
    :vartype server: str
    :ivar database: The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
    :vartype database: str
    :ivar user: The user name that will be used to connect to the Azure SQL database. Required on
     PUT (CreateOrReplace) requests.
    :vartype user: str
    :ivar password: The password that will be used to connect to the Azure SQL database. Required
     on PUT (CreateOrReplace) requests.
    :vartype password: str
    :ivar table: The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace)
     requests.
    :vartype table: str
    :ivar max_batch_count: Max Batch count for write to Sql database, the default value is 10,000.
     Optional on PUT requests.
    :vartype max_batch_count: float
    :ivar max_writer_count: Max Writer count, currently only 1(single writer) and 0(based on query
     partition) are available. Optional on PUT requests.
    :vartype max_writer_count: float
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'server': {'key': 'properties.server', 'type': 'str'},
        'database': {'key': 'properties.database', 'type': 'str'},
        'user': {'key': 'properties.user', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'table': {'key': 'properties.table', 'type': 'str'},
        'max_batch_count': {'key': 'properties.maxBatchCount', 'type': 'float'},
        'max_writer_count': {'key': 'properties.maxWriterCount', 'type': 'float'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword server: The name of the SQL server containing the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype server: str
        :keyword database: The name of the Azure SQL database. Required on PUT (CreateOrReplace)
         requests.
        :paramtype database: str
        :keyword user: The user name that will be used to connect to the Azure SQL database. Required
         on PUT (CreateOrReplace) requests.
        :paramtype user: str
        :keyword password: The password that will be used to connect to the Azure SQL database.
         Required on PUT (CreateOrReplace) requests.
        :paramtype password: str
        :keyword table: The name of the table in the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype table: str
        :keyword max_batch_count: Max Batch count for write to Sql database, the default value is
         10,000. Optional on PUT requests.
        :paramtype max_batch_count: float
        :keyword max_writer_count: Max Writer count, currently only 1(single writer) and 0(based on
         query partition) are available. Optional on PUT requests.
        :paramtype max_writer_count: float
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(AzureSqlDatabaseOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Sql/Server/Database'  # type: str
        self.server = kwargs.get('server', None)
        self.database = kwargs.get('database', None)
        self.user = kwargs.get('user', None)
        self.password = kwargs.get('password', None)
        self.table = kwargs.get('table', None)
        self.max_batch_count = kwargs.get('max_batch_count', None)
        self.max_writer_count = kwargs.get('max_writer_count', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class AzureSqlDatabaseOutputDataSourceProperties(AzureSqlDatabaseDataSourceProperties):
    """The properties that are associated with an Azure SQL database output.

    :ivar server: The name of the SQL server containing the Azure SQL database. Required on PUT
     (CreateOrReplace) requests.
    :vartype server: str
    :ivar database: The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
    :vartype database: str
    :ivar user: The user name that will be used to connect to the Azure SQL database. Required on
     PUT (CreateOrReplace) requests.
    :vartype user: str
    :ivar password: The password that will be used to connect to the Azure SQL database. Required
     on PUT (CreateOrReplace) requests.
    :vartype password: str
    :ivar table: The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace)
     requests.
    :vartype table: str
    :ivar max_batch_count: Max Batch count for write to Sql database, the default value is 10,000.
     Optional on PUT requests.
    :vartype max_batch_count: float
    :ivar max_writer_count: Max Writer count, currently only 1(single writer) and 0(based on query
     partition) are available. Optional on PUT requests.
    :vartype max_writer_count: float
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _attribute_map = {
        'server': {'key': 'server', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'user': {'key': 'user', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'max_batch_count': {'key': 'maxBatchCount', 'type': 'float'},
        'max_writer_count': {'key': 'maxWriterCount', 'type': 'float'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword server: The name of the SQL server containing the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype server: str
        :keyword database: The name of the Azure SQL database. Required on PUT (CreateOrReplace)
         requests.
        :paramtype database: str
        :keyword user: The user name that will be used to connect to the Azure SQL database. Required
         on PUT (CreateOrReplace) requests.
        :paramtype user: str
        :keyword password: The password that will be used to connect to the Azure SQL database.
         Required on PUT (CreateOrReplace) requests.
        :paramtype password: str
        :keyword table: The name of the table in the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype table: str
        :keyword max_batch_count: Max Batch count for write to Sql database, the default value is
         10,000. Optional on PUT requests.
        :paramtype max_batch_count: float
        :keyword max_writer_count: Max Writer count, currently only 1(single writer) and 0(based on
         query partition) are available. Optional on PUT requests.
        :paramtype max_writer_count: float
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(AzureSqlDatabaseOutputDataSourceProperties, self).__init__(**kwargs)


class ReferenceInputDataSource(msrest.serialization.Model):
    """Describes an input data source that contains reference data.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureSqlReferenceInputDataSource, BlobReferenceInputDataSource.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of input data source containing reference data.
     Required on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Microsoft.Sql/Server/Database': 'AzureSqlReferenceInputDataSource', 'Microsoft.Storage/Blob': 'BlobReferenceInputDataSource'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ReferenceInputDataSource, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class AzureSqlReferenceInputDataSource(ReferenceInputDataSource):
    """Describes an Azure SQL database reference input data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of input data source containing reference data.
     Required on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar server: This element is associated with the datasource element. This is the name of the
     server that contains the database that will be written to.
    :vartype server: str
    :ivar database: This element is associated with the datasource element. This is the name of the
     database that output will be written to.
    :vartype database: str
    :ivar user: This element is associated with the datasource element. This is the user name that
     will be used to connect to the SQL Database instance.
    :vartype user: str
    :ivar password: This element is associated with the datasource element. This is the password
     that will be used to connect to the SQL Database instance.
    :vartype password: str
    :ivar table: This element is associated with the datasource element. The name of the table in
     the Azure SQL database..
    :vartype table: str
    :ivar refresh_type: Indicates the type of data refresh option. Possible values include:
     "Static", "RefreshPeriodicallyWithFull", "RefreshPeriodicallyWithDelta".
    :vartype refresh_type: str or ~stream_analytics_management_client.models.RefreshType
    :ivar refresh_rate: This element is associated with the datasource element. This indicates how
     frequently the data will be fetched from the database. It is of DateTime format.
    :vartype refresh_rate: str
    :ivar full_snapshot_query: This element is associated with the datasource element. This query
     is used to fetch data from the sql database.
    :vartype full_snapshot_query: str
    :ivar delta_snapshot_query: This element is associated with the datasource element. This query
     is used to fetch incremental changes from the SQL database. To use this option, we recommend
     using temporal tables in Azure SQL Database.
    :vartype delta_snapshot_query: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'server': {'key': 'properties.server', 'type': 'str'},
        'database': {'key': 'properties.database', 'type': 'str'},
        'user': {'key': 'properties.user', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'table': {'key': 'properties.table', 'type': 'str'},
        'refresh_type': {'key': 'properties.refreshType', 'type': 'str'},
        'refresh_rate': {'key': 'properties.refreshRate', 'type': 'str'},
        'full_snapshot_query': {'key': 'properties.fullSnapshotQuery', 'type': 'str'},
        'delta_snapshot_query': {'key': 'properties.deltaSnapshotQuery', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword server: This element is associated with the datasource element. This is the name of
         the server that contains the database that will be written to.
        :paramtype server: str
        :keyword database: This element is associated with the datasource element. This is the name of
         the database that output will be written to.
        :paramtype database: str
        :keyword user: This element is associated with the datasource element. This is the user name
         that will be used to connect to the SQL Database instance.
        :paramtype user: str
        :keyword password: This element is associated with the datasource element. This is the password
         that will be used to connect to the SQL Database instance.
        :paramtype password: str
        :keyword table: This element is associated with the datasource element. The name of the table
         in the Azure SQL database..
        :paramtype table: str
        :keyword refresh_type: Indicates the type of data refresh option. Possible values include:
         "Static", "RefreshPeriodicallyWithFull", "RefreshPeriodicallyWithDelta".
        :paramtype refresh_type: str or ~stream_analytics_management_client.models.RefreshType
        :keyword refresh_rate: This element is associated with the datasource element. This indicates
         how frequently the data will be fetched from the database. It is of DateTime format.
        :paramtype refresh_rate: str
        :keyword full_snapshot_query: This element is associated with the datasource element. This
         query is used to fetch data from the sql database.
        :paramtype full_snapshot_query: str
        :keyword delta_snapshot_query: This element is associated with the datasource element. This
         query is used to fetch incremental changes from the SQL database. To use this option, we
         recommend using temporal tables in Azure SQL Database.
        :paramtype delta_snapshot_query: str
        """
        super(AzureSqlReferenceInputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Sql/Server/Database'  # type: str
        self.server = kwargs.get('server', None)
        self.database = kwargs.get('database', None)
        self.user = kwargs.get('user', None)
        self.password = kwargs.get('password', None)
        self.table = kwargs.get('table', None)
        self.refresh_type = kwargs.get('refresh_type', None)
        self.refresh_rate = kwargs.get('refresh_rate', None)
        self.full_snapshot_query = kwargs.get('full_snapshot_query', None)
        self.delta_snapshot_query = kwargs.get('delta_snapshot_query', None)


class AzureSynapseDataSourceProperties(msrest.serialization.Model):
    """The properties that are associated with an Azure SQL database data source.

    :ivar server: The name of the SQL server containing the Azure SQL database. Required on PUT
     (CreateOrReplace) requests.
    :vartype server: str
    :ivar database: The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
    :vartype database: str
    :ivar table: The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace)
     requests.
    :vartype table: str
    :ivar user: The user name that will be used to connect to the Azure SQL database. Required on
     PUT (CreateOrReplace) requests.
    :vartype user: str
    :ivar password: The password that will be used to connect to the Azure SQL database. Required
     on PUT (CreateOrReplace) requests.
    :vartype password: str
    """

    _attribute_map = {
        'server': {'key': 'server', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'user': {'key': 'user', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword server: The name of the SQL server containing the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype server: str
        :keyword database: The name of the Azure SQL database. Required on PUT (CreateOrReplace)
         requests.
        :paramtype database: str
        :keyword table: The name of the table in the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype table: str
        :keyword user: The user name that will be used to connect to the Azure SQL database. Required
         on PUT (CreateOrReplace) requests.
        :paramtype user: str
        :keyword password: The password that will be used to connect to the Azure SQL database.
         Required on PUT (CreateOrReplace) requests.
        :paramtype password: str
        """
        super(AzureSynapseDataSourceProperties, self).__init__(**kwargs)
        self.server = kwargs.get('server', None)
        self.database = kwargs.get('database', None)
        self.table = kwargs.get('table', None)
        self.user = kwargs.get('user', None)
        self.password = kwargs.get('password', None)


class AzureSynapseOutputDataSource(OutputDataSource):
    """Describes an Azure Synapse output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar server: The name of the SQL server containing the Azure SQL database. Required on PUT
     (CreateOrReplace) requests.
    :vartype server: str
    :ivar database: The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
    :vartype database: str
    :ivar table: The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace)
     requests.
    :vartype table: str
    :ivar user: The user name that will be used to connect to the Azure SQL database. Required on
     PUT (CreateOrReplace) requests.
    :vartype user: str
    :ivar password: The password that will be used to connect to the Azure SQL database. Required
     on PUT (CreateOrReplace) requests.
    :vartype password: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'server': {'key': 'properties.server', 'type': 'str'},
        'database': {'key': 'properties.database', 'type': 'str'},
        'table': {'key': 'properties.table', 'type': 'str'},
        'user': {'key': 'properties.user', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword server: The name of the SQL server containing the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype server: str
        :keyword database: The name of the Azure SQL database. Required on PUT (CreateOrReplace)
         requests.
        :paramtype database: str
        :keyword table: The name of the table in the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype table: str
        :keyword user: The user name that will be used to connect to the Azure SQL database. Required
         on PUT (CreateOrReplace) requests.
        :paramtype user: str
        :keyword password: The password that will be used to connect to the Azure SQL database.
         Required on PUT (CreateOrReplace) requests.
        :paramtype password: str
        """
        super(AzureSynapseOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Sql/Server/DataWarehouse'  # type: str
        self.server = kwargs.get('server', None)
        self.database = kwargs.get('database', None)
        self.table = kwargs.get('table', None)
        self.user = kwargs.get('user', None)
        self.password = kwargs.get('password', None)


class AzureSynapseOutputDataSourceProperties(AzureSynapseDataSourceProperties):
    """The properties that are associated with an Azure Synapse output.

    :ivar server: The name of the SQL server containing the Azure SQL database. Required on PUT
     (CreateOrReplace) requests.
    :vartype server: str
    :ivar database: The name of the Azure SQL database. Required on PUT (CreateOrReplace) requests.
    :vartype database: str
    :ivar table: The name of the table in the Azure SQL database. Required on PUT (CreateOrReplace)
     requests.
    :vartype table: str
    :ivar user: The user name that will be used to connect to the Azure SQL database. Required on
     PUT (CreateOrReplace) requests.
    :vartype user: str
    :ivar password: The password that will be used to connect to the Azure SQL database. Required
     on PUT (CreateOrReplace) requests.
    :vartype password: str
    """

    _attribute_map = {
        'server': {'key': 'server', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'user': {'key': 'user', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword server: The name of the SQL server containing the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype server: str
        :keyword database: The name of the Azure SQL database. Required on PUT (CreateOrReplace)
         requests.
        :paramtype database: str
        :keyword table: The name of the table in the Azure SQL database. Required on PUT
         (CreateOrReplace) requests.
        :paramtype table: str
        :keyword user: The user name that will be used to connect to the Azure SQL database. Required
         on PUT (CreateOrReplace) requests.
        :paramtype user: str
        :keyword password: The password that will be used to connect to the Azure SQL database.
         Required on PUT (CreateOrReplace) requests.
        :paramtype password: str
        """
        super(AzureSynapseOutputDataSourceProperties, self).__init__(**kwargs)


class AzureTableOutputDataSource(OutputDataSource):
    """Describes an Azure Table output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar account_name: The name of the Azure Storage account. Required on PUT (CreateOrReplace)
     requests.
    :vartype account_name: str
    :ivar account_key: The account key for the Azure Storage account. Required on PUT
     (CreateOrReplace) requests.
    :vartype account_key: str
    :ivar table: The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
    :vartype table: str
    :ivar partition_key: This element indicates the name of a column from the SELECT statement in
     the query that will be used as the partition key for the Azure Table. Required on PUT
     (CreateOrReplace) requests.
    :vartype partition_key: str
    :ivar row_key: This element indicates the name of a column from the SELECT statement in the
     query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace)
     requests.
    :vartype row_key: str
    :ivar columns_to_remove: If specified, each item in the array is the name of a column to remove
     (if present) from output event entities.
    :vartype columns_to_remove: list[str]
    :ivar batch_size: The number of rows to write to the Azure Table at a time.
    :vartype batch_size: int
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'account_name': {'key': 'properties.accountName', 'type': 'str'},
        'account_key': {'key': 'properties.accountKey', 'type': 'str'},
        'table': {'key': 'properties.table', 'type': 'str'},
        'partition_key': {'key': 'properties.partitionKey', 'type': 'str'},
        'row_key': {'key': 'properties.rowKey', 'type': 'str'},
        'columns_to_remove': {'key': 'properties.columnsToRemove', 'type': '[str]'},
        'batch_size': {'key': 'properties.batchSize', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_name: The name of the Azure Storage account. Required on PUT (CreateOrReplace)
         requests.
        :paramtype account_name: str
        :keyword account_key: The account key for the Azure Storage account. Required on PUT
         (CreateOrReplace) requests.
        :paramtype account_key: str
        :keyword table: The name of the Azure Table. Required on PUT (CreateOrReplace) requests.
        :paramtype table: str
        :keyword partition_key: This element indicates the name of a column from the SELECT statement
         in the query that will be used as the partition key for the Azure Table. Required on PUT
         (CreateOrReplace) requests.
        :paramtype partition_key: str
        :keyword row_key: This element indicates the name of a column from the SELECT statement in the
         query that will be used as the row key for the Azure Table. Required on PUT (CreateOrReplace)
         requests.
        :paramtype row_key: str
        :keyword columns_to_remove: If specified, each item in the array is the name of a column to
         remove (if present) from output event entities.
        :paramtype columns_to_remove: list[str]
        :keyword batch_size: The number of rows to write to the Azure Table at a time.
        :paramtype batch_size: int
        """
        super(AzureTableOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Storage/Table'  # type: str
        self.account_name = kwargs.get('account_name', None)
        self.account_key = kwargs.get('account_key', None)
        self.table = kwargs.get('table', None)
        self.partition_key = kwargs.get('partition_key', None)
        self.row_key = kwargs.get('row_key', None)
        self.columns_to_remove = kwargs.get('columns_to_remove', None)
        self.batch_size = kwargs.get('batch_size', None)


class BlobDataSourceProperties(msrest.serialization.Model):
    """The properties that are associated with a blob data source.

    :ivar storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
     (CreateOrReplace) requests.
    :vartype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
    :ivar container: The name of a container within the associated Storage account. This container
     contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace)
     requests.
    :vartype container: str
    :ivar path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
     against which blob names will be matched to determine whether or not they should be included as
     input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
     detailed explanation and example.
    :vartype path_pattern: str
    :ivar date_format: The date format. Wherever {date} appears in pathPattern, the value of this
     property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in pathPattern, the value of this
     property is used as the time format instead.
    :vartype time_format: str
    """

    _attribute_map = {
        'storage_accounts': {'key': 'storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'container', 'type': 'str'},
        'path_pattern': {'key': 'pathPattern', 'type': 'str'},
        'date_format': {'key': 'dateFormat', 'type': 'str'},
        'time_format': {'key': 'timeFormat', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
         (CreateOrReplace) requests.
        :paramtype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
        :keyword container: The name of a container within the associated Storage account. This
         container contains either the blob(s) to be read from or written to. Required on PUT
         (CreateOrReplace) requests.
        :paramtype container: str
        :keyword path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
         against which blob names will be matched to determine whether or not they should be included as
         input or output to the job. See
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
         detailed explanation and example.
        :paramtype path_pattern: str
        :keyword date_format: The date format. Wherever {date} appears in pathPattern, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in pathPattern, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        """
        super(BlobDataSourceProperties, self).__init__(**kwargs)
        self.storage_accounts = kwargs.get('storage_accounts', None)
        self.container = kwargs.get('container', None)
        self.path_pattern = kwargs.get('path_pattern', None)
        self.date_format = kwargs.get('date_format', None)
        self.time_format = kwargs.get('time_format', None)


class BlobOutputDataSource(OutputDataSource):
    """Describes a blob output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
     (CreateOrReplace) requests.
    :vartype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
    :ivar container: The name of a container within the associated Storage account. This container
     contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace)
     requests.
    :vartype container: str
    :ivar path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
     against which blob names will be matched to determine whether or not they should be included as
     input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
     detailed explanation and example.
    :vartype path_pattern: str
    :ivar date_format: The date format. Wherever {date} appears in pathPattern, the value of this
     property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in pathPattern, the value of this
     property is used as the time format instead.
    :vartype time_format: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'properties.container', 'type': 'str'},
        'path_pattern': {'key': 'properties.pathPattern', 'type': 'str'},
        'date_format': {'key': 'properties.dateFormat', 'type': 'str'},
        'time_format': {'key': 'properties.timeFormat', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
         (CreateOrReplace) requests.
        :paramtype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
        :keyword container: The name of a container within the associated Storage account. This
         container contains either the blob(s) to be read from or written to. Required on PUT
         (CreateOrReplace) requests.
        :paramtype container: str
        :keyword path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
         against which blob names will be matched to determine whether or not they should be included as
         input or output to the job. See
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
         detailed explanation and example.
        :paramtype path_pattern: str
        :keyword date_format: The date format. Wherever {date} appears in pathPattern, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in pathPattern, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(BlobOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Storage/Blob'  # type: str
        self.storage_accounts = kwargs.get('storage_accounts', None)
        self.container = kwargs.get('container', None)
        self.path_pattern = kwargs.get('path_pattern', None)
        self.date_format = kwargs.get('date_format', None)
        self.time_format = kwargs.get('time_format', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class BlobOutputDataSourceProperties(BlobDataSourceProperties):
    """The properties that are associated with a blob output.

    :ivar storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
     (CreateOrReplace) requests.
    :vartype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
    :ivar container: The name of a container within the associated Storage account. This container
     contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace)
     requests.
    :vartype container: str
    :ivar path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
     against which blob names will be matched to determine whether or not they should be included as
     input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
     detailed explanation and example.
    :vartype path_pattern: str
    :ivar date_format: The date format. Wherever {date} appears in pathPattern, the value of this
     property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in pathPattern, the value of this
     property is used as the time format instead.
    :vartype time_format: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _attribute_map = {
        'storage_accounts': {'key': 'storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'container', 'type': 'str'},
        'path_pattern': {'key': 'pathPattern', 'type': 'str'},
        'date_format': {'key': 'dateFormat', 'type': 'str'},
        'time_format': {'key': 'timeFormat', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
         (CreateOrReplace) requests.
        :paramtype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
        :keyword container: The name of a container within the associated Storage account. This
         container contains either the blob(s) to be read from or written to. Required on PUT
         (CreateOrReplace) requests.
        :paramtype container: str
        :keyword path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
         against which blob names will be matched to determine whether or not they should be included as
         input or output to the job. See
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
         detailed explanation and example.
        :paramtype path_pattern: str
        :keyword date_format: The date format. Wherever {date} appears in pathPattern, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in pathPattern, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(BlobOutputDataSourceProperties, self).__init__(**kwargs)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class BlobReferenceInputDataSource(ReferenceInputDataSource):
    """Describes a blob input data source that contains reference data.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of input data source containing reference data.
     Required on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
     (CreateOrReplace) requests.
    :vartype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
    :ivar container: The name of a container within the associated Storage account. This container
     contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace)
     requests.
    :vartype container: str
    :ivar path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
     against which blob names will be matched to determine whether or not they should be included as
     input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
     detailed explanation and example.
    :vartype path_pattern: str
    :ivar date_format: The date format. Wherever {date} appears in pathPattern, the value of this
     property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in pathPattern, the value of this
     property is used as the time format instead.
    :vartype time_format: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'properties.container', 'type': 'str'},
        'path_pattern': {'key': 'properties.pathPattern', 'type': 'str'},
        'date_format': {'key': 'properties.dateFormat', 'type': 'str'},
        'time_format': {'key': 'properties.timeFormat', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
         (CreateOrReplace) requests.
        :paramtype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
        :keyword container: The name of a container within the associated Storage account. This
         container contains either the blob(s) to be read from or written to. Required on PUT
         (CreateOrReplace) requests.
        :paramtype container: str
        :keyword path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
         against which blob names will be matched to determine whether or not they should be included as
         input or output to the job. See
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
         detailed explanation and example.
        :paramtype path_pattern: str
        :keyword date_format: The date format. Wherever {date} appears in pathPattern, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in pathPattern, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        """
        super(BlobReferenceInputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Storage/Blob'  # type: str
        self.storage_accounts = kwargs.get('storage_accounts', None)
        self.container = kwargs.get('container', None)
        self.path_pattern = kwargs.get('path_pattern', None)
        self.date_format = kwargs.get('date_format', None)
        self.time_format = kwargs.get('time_format', None)


class BlobReferenceInputDataSourceProperties(BlobDataSourceProperties):
    """The properties that are associated with a blob input containing reference data.

    :ivar storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
     (CreateOrReplace) requests.
    :vartype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
    :ivar container: The name of a container within the associated Storage account. This container
     contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace)
     requests.
    :vartype container: str
    :ivar path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
     against which blob names will be matched to determine whether or not they should be included as
     input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
     detailed explanation and example.
    :vartype path_pattern: str
    :ivar date_format: The date format. Wherever {date} appears in pathPattern, the value of this
     property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in pathPattern, the value of this
     property is used as the time format instead.
    :vartype time_format: str
    """

    _attribute_map = {
        'storage_accounts': {'key': 'storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'container', 'type': 'str'},
        'path_pattern': {'key': 'pathPattern', 'type': 'str'},
        'date_format': {'key': 'dateFormat', 'type': 'str'},
        'time_format': {'key': 'timeFormat', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
         (CreateOrReplace) requests.
        :paramtype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
        :keyword container: The name of a container within the associated Storage account. This
         container contains either the blob(s) to be read from or written to. Required on PUT
         (CreateOrReplace) requests.
        :paramtype container: str
        :keyword path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
         against which blob names will be matched to determine whether or not they should be included as
         input or output to the job. See
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
         detailed explanation and example.
        :paramtype path_pattern: str
        :keyword date_format: The date format. Wherever {date} appears in pathPattern, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in pathPattern, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        """
        super(BlobReferenceInputDataSourceProperties, self).__init__(**kwargs)


class StreamInputDataSource(msrest.serialization.Model):
    """Describes an input data source that contains stream data.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: IoTHubStreamInputDataSource, EventHubV2StreamInputDataSource, EventHubStreamInputDataSource, BlobStreamInputDataSource.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of input data source containing stream data. Required
     on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Microsoft.Devices/IotHubs': 'IoTHubStreamInputDataSource', 'Microsoft.EventHub/EventHub': 'EventHubV2StreamInputDataSource', 'Microsoft.ServiceBus/EventHub': 'EventHubStreamInputDataSource', 'Microsoft.Storage/Blob': 'BlobStreamInputDataSource'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(StreamInputDataSource, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class BlobStreamInputDataSource(StreamInputDataSource):
    """Describes a blob input data source that contains stream data.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of input data source containing stream data. Required
     on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
     (CreateOrReplace) requests.
    :vartype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
    :ivar container: The name of a container within the associated Storage account. This container
     contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace)
     requests.
    :vartype container: str
    :ivar path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
     against which blob names will be matched to determine whether or not they should be included as
     input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
     detailed explanation and example.
    :vartype path_pattern: str
    :ivar date_format: The date format. Wherever {date} appears in pathPattern, the value of this
     property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in pathPattern, the value of this
     property is used as the time format instead.
    :vartype time_format: str
    :ivar source_partition_count: The partition count of the blob input data source. Range 1 - 256.
    :vartype source_partition_count: int
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'properties.container', 'type': 'str'},
        'path_pattern': {'key': 'properties.pathPattern', 'type': 'str'},
        'date_format': {'key': 'properties.dateFormat', 'type': 'str'},
        'time_format': {'key': 'properties.timeFormat', 'type': 'str'},
        'source_partition_count': {'key': 'properties.sourcePartitionCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
         (CreateOrReplace) requests.
        :paramtype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
        :keyword container: The name of a container within the associated Storage account. This
         container contains either the blob(s) to be read from or written to. Required on PUT
         (CreateOrReplace) requests.
        :paramtype container: str
        :keyword path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
         against which blob names will be matched to determine whether or not they should be included as
         input or output to the job. See
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
         detailed explanation and example.
        :paramtype path_pattern: str
        :keyword date_format: The date format. Wherever {date} appears in pathPattern, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in pathPattern, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        :keyword source_partition_count: The partition count of the blob input data source. Range 1 -
         256.
        :paramtype source_partition_count: int
        """
        super(BlobStreamInputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Storage/Blob'  # type: str
        self.storage_accounts = kwargs.get('storage_accounts', None)
        self.container = kwargs.get('container', None)
        self.path_pattern = kwargs.get('path_pattern', None)
        self.date_format = kwargs.get('date_format', None)
        self.time_format = kwargs.get('time_format', None)
        self.source_partition_count = kwargs.get('source_partition_count', None)


class BlobStreamInputDataSourceProperties(BlobDataSourceProperties):
    """The properties that are associated with a blob input containing stream data.

    :ivar storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
     (CreateOrReplace) requests.
    :vartype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
    :ivar container: The name of a container within the associated Storage account. This container
     contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace)
     requests.
    :vartype container: str
    :ivar path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
     against which blob names will be matched to determine whether or not they should be included as
     input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
     detailed explanation and example.
    :vartype path_pattern: str
    :ivar date_format: The date format. Wherever {date} appears in pathPattern, the value of this
     property is used as the date format instead.
    :vartype date_format: str
    :ivar time_format: The time format. Wherever {time} appears in pathPattern, the value of this
     property is used as the time format instead.
    :vartype time_format: str
    :ivar source_partition_count: The partition count of the blob input data source. Range 1 - 256.
    :vartype source_partition_count: int
    """

    _attribute_map = {
        'storage_accounts': {'key': 'storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'container', 'type': 'str'},
        'path_pattern': {'key': 'pathPattern', 'type': 'str'},
        'date_format': {'key': 'dateFormat', 'type': 'str'},
        'time_format': {'key': 'timeFormat', 'type': 'str'},
        'source_partition_count': {'key': 'sourcePartitionCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_accounts: A list of one or more Azure Storage accounts. Required on PUT
         (CreateOrReplace) requests.
        :paramtype storage_accounts: list[~stream_analytics_management_client.models.StorageAccount]
        :keyword container: The name of a container within the associated Storage account. This
         container contains either the blob(s) to be read from or written to. Required on PUT
         (CreateOrReplace) requests.
        :paramtype container: str
        :keyword path_pattern: The blob path pattern. Not a regular expression. It represents a pattern
         against which blob names will be matched to determine whether or not they should be included as
         input or output to the job. See
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more
         detailed explanation and example.
        :paramtype path_pattern: str
        :keyword date_format: The date format. Wherever {date} appears in pathPattern, the value of
         this property is used as the date format instead.
        :paramtype date_format: str
        :keyword time_format: The time format. Wherever {time} appears in pathPattern, the value of
         this property is used as the time format instead.
        :paramtype time_format: str
        :keyword source_partition_count: The partition count of the blob input data source. Range 1 -
         256.
        :paramtype source_partition_count: int
        """
        super(BlobStreamInputDataSourceProperties, self).__init__(**kwargs)
        self.source_partition_count = kwargs.get('source_partition_count', None)


class Resource(msrest.serialization.Model):
    """The base resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives.
        :paramtype location: str
        """
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs.get('location', None)


class Cluster(TrackedResource):
    """A Stream Analytics Cluster object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    :ivar sku: The SKU of the cluster. This determines the size/capacity of the cluster. Required
     on PUT (CreateOrUpdate) requests.
    :vartype sku: ~stream_analytics_management_client.models.ClusterSku
    :ivar etag: The current entity tag for the cluster. This is an opaque string. You can use it to
     detect whether the resource has changed between requests. You can also use it in the If-Match
     or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    :ivar created_date: The date this cluster was created.
    :vartype created_date: ~datetime.datetime
    :ivar cluster_id: Unique identifier for the cluster.
    :vartype cluster_id: str
    :ivar provisioning_state: The status of the cluster provisioning. The three terminal states
     are: Succeeded, Failed and Canceled. Possible values include: "Succeeded", "Failed",
     "Canceled", "InProgress".
    :vartype provisioning_state: str or
     ~stream_analytics_management_client.models.ClusterProvisioningState
    :ivar capacity_allocated: Represents the number of streaming units currently being used on the
     cluster.
    :vartype capacity_allocated: int
    :ivar capacity_assigned: Represents the sum of the SUs of all streaming jobs associated with
     the cluster. If all of the jobs were running, this would be the capacity allocated.
    :vartype capacity_assigned: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'created_date': {'readonly': True},
        'cluster_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'capacity_allocated': {'readonly': True},
        'capacity_assigned': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'ClusterSku'},
        'etag': {'key': 'etag', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'cluster_id': {'key': 'properties.clusterId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'capacity_allocated': {'key': 'properties.capacityAllocated', 'type': 'int'},
        'capacity_assigned': {'key': 'properties.capacityAssigned', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives.
        :paramtype location: str
        :keyword sku: The SKU of the cluster. This determines the size/capacity of the cluster.
         Required on PUT (CreateOrUpdate) requests.
        :paramtype sku: ~stream_analytics_management_client.models.ClusterSku
        """
        super(Cluster, self).__init__(**kwargs)
        self.sku = kwargs.get('sku', None)
        self.etag = None
        self.created_date = None
        self.cluster_id = None
        self.provisioning_state = None
        self.capacity_allocated = None
        self.capacity_assigned = None


class ClusterInfo(msrest.serialization.Model):
    """The properties associated with a Stream Analytics cluster.

    :ivar id: The resource id of cluster.
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: The resource id of cluster.
        :paramtype id: str
        """
        super(ClusterInfo, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class ClusterJob(msrest.serialization.Model):
    """A streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID of the streaming job.
    :vartype id: str
    :ivar streaming_units: The number of streaming units that are used by the streaming job.
    :vartype streaming_units: int
    :ivar job_state: The current execution state of the streaming job. Possible values include:
     "Created", "Starting", "Running", "Stopping", "Stopped", "Deleting", "Failed", "Degraded",
     "Restarting", "Scaling".
    :vartype job_state: str or ~stream_analytics_management_client.models.JobState
    """

    _validation = {
        'id': {'readonly': True},
        'streaming_units': {'readonly': True},
        'job_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'streaming_units': {'key': 'streamingUnits', 'type': 'int'},
        'job_state': {'key': 'jobState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ClusterJob, self).__init__(**kwargs)
        self.id = None
        self.streaming_units = None
        self.job_state = None


class ClusterJobListResult(msrest.serialization.Model):
    """A list of streaming jobs. Populated by a List operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of streaming jobs.
    :vartype value: list[~stream_analytics_management_client.models.ClusterJob]
    :ivar next_link: The URL to fetch the next set of streaming jobs.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ClusterJob]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ClusterJobListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ClusterListResult(msrest.serialization.Model):
    """A list of clusters populated by a 'list' operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of clusters.
    :vartype value: list[~stream_analytics_management_client.models.Cluster]
    :ivar next_link: The URL to fetch the next set of clusters.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Cluster]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ClusterListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ClusterSku(msrest.serialization.Model):
    """The SKU of the cluster. This determines the size/capacity of the cluster. Required on PUT (CreateOrUpdate) requests.

    :ivar name: Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate) requests.
     Possible values include: "Default".
    :vartype name: str or ~stream_analytics_management_client.models.ClusterSkuName
    :ivar capacity: Denotes the number of streaming units the cluster can support. Valid values for
     this property are multiples of 36 with a minimum value of 36 and maximum value of 216. Required
     on PUT (CreateOrUpdate) requests.
    :vartype capacity: int
    """

    _validation = {
        'capacity': {'maximum': 216, 'minimum': 36},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Specifies the SKU name of the cluster. Required on PUT (CreateOrUpdate)
         requests. Possible values include: "Default".
        :paramtype name: str or ~stream_analytics_management_client.models.ClusterSkuName
        :keyword capacity: Denotes the number of streaming units the cluster can support. Valid values
         for this property are multiples of 36 with a minimum value of 36 and maximum value of 216.
         Required on PUT (CreateOrUpdate) requests.
        :paramtype capacity: int
        """
        super(ClusterSku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.capacity = kwargs.get('capacity', None)


class Compression(msrest.serialization.Model):
    """Describes how input data is compressed.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of compression that the input uses. Required on PUT
     (CreateOrReplace) requests. Possible values include: "None", "GZip", "Deflate".
    :vartype type: str or ~stream_analytics_management_client.models.CompressionType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: Required. Indicates the type of compression that the input uses. Required on PUT
         (CreateOrReplace) requests. Possible values include: "None", "GZip", "Deflate".
        :paramtype type: str or ~stream_analytics_management_client.models.CompressionType
        """
        super(Compression, self).__init__(**kwargs)
        self.type = kwargs['type']


class CsvSerialization(Serialization):
    """Describes how data from an input is serialized or how data is serialized when written to an output in CSV format.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of serialization that the input or output uses.
     Required on PUT (CreateOrReplace) requests.Constant filled by server. Possible values include:
     "Csv", "Avro", "Json", "Parquet".
    :vartype type: str or ~stream_analytics_management_client.models.EventSerializationType
    :ivar field_delimiter: Specifies the delimiter that will be used to separate comma-separated
     value (CSV) records. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of
     supported values. Required on PUT (CreateOrReplace) requests.
    :vartype field_delimiter: str
    :ivar encoding: Specifies the encoding of the incoming data in the case of input and the
     encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     Possible values include: "UTF8".
    :vartype encoding: str or ~stream_analytics_management_client.models.Encoding
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'field_delimiter': {'key': 'properties.fieldDelimiter', 'type': 'str'},
        'encoding': {'key': 'properties.encoding', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword field_delimiter: Specifies the delimiter that will be used to separate comma-separated
         value (CSV) records. See
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a list of
         supported values. Required on PUT (CreateOrReplace) requests.
        :paramtype field_delimiter: str
        :keyword encoding: Specifies the encoding of the incoming data in the case of input and the
         encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
         Possible values include: "UTF8".
        :paramtype encoding: str or ~stream_analytics_management_client.models.Encoding
        """
        super(CsvSerialization, self).__init__(**kwargs)
        self.type = 'Csv'  # type: str
        self.field_delimiter = kwargs.get('field_delimiter', None)
        self.encoding = kwargs.get('encoding', None)


class DiagnosticCondition(msrest.serialization.Model):
    """Condition applicable to the resource, or to the job overall, that warrant customer attention.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar since: The UTC timestamp of when the condition started. Customers should be able to find
     a corresponding event in the ops log around this time.
    :vartype since: str
    :ivar code: The opaque diagnostic code.
    :vartype code: str
    :ivar message: The human-readable message describing the condition in detail. Localized in the
     Accept-Language of the client request.
    :vartype message: str
    """

    _validation = {
        'since': {'readonly': True},
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'since': {'key': 'since', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DiagnosticCondition, self).__init__(**kwargs)
        self.since = None
        self.code = None
        self.message = None


class Diagnostics(msrest.serialization.Model):
    """Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar conditions: A collection of zero or more conditions applicable to the resource, or to the
     job overall, that warrant customer attention.
    :vartype conditions: list[~stream_analytics_management_client.models.DiagnosticCondition]
    """

    _validation = {
        'conditions': {'readonly': True},
    }

    _attribute_map = {
        'conditions': {'key': 'conditions', 'type': '[DiagnosticCondition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Diagnostics, self).__init__(**kwargs)
        self.conditions = None


class DocumentDbOutputDataSource(OutputDataSource):
    """Describes a DocumentDB output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar account_id: The DocumentDB account name or ID. Required on PUT (CreateOrReplace)
     requests.
    :vartype account_id: str
    :ivar account_key: The account key for the DocumentDB account. Required on PUT
     (CreateOrReplace) requests.
    :vartype account_key: str
    :ivar database: The name of the DocumentDB database. Required on PUT (CreateOrReplace)
     requests.
    :vartype database: str
    :ivar collection_name_pattern: The collection name pattern for the collections to be used. The
     collection name format can be constructed using the optional {partition} token, where
     partitions start from 0. See the DocumentDB section of
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more
     information. Required on PUT (CreateOrReplace) requests.
    :vartype collection_name_pattern: str
    :ivar partition_key: The name of the field in output events used to specify the key for
     partitioning output across collections. If 'collectionNamePattern' contains the {partition}
     token, this property is required to be specified.
    :vartype partition_key: str
    :ivar document_id: The name of the field in output events used to specify the primary key which
     insert or update operations are based on.
    :vartype document_id: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'account_id': {'key': 'properties.accountId', 'type': 'str'},
        'account_key': {'key': 'properties.accountKey', 'type': 'str'},
        'database': {'key': 'properties.database', 'type': 'str'},
        'collection_name_pattern': {'key': 'properties.collectionNamePattern', 'type': 'str'},
        'partition_key': {'key': 'properties.partitionKey', 'type': 'str'},
        'document_id': {'key': 'properties.documentId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_id: The DocumentDB account name or ID. Required on PUT (CreateOrReplace)
         requests.
        :paramtype account_id: str
        :keyword account_key: The account key for the DocumentDB account. Required on PUT
         (CreateOrReplace) requests.
        :paramtype account_key: str
        :keyword database: The name of the DocumentDB database. Required on PUT (CreateOrReplace)
         requests.
        :paramtype database: str
        :keyword collection_name_pattern: The collection name pattern for the collections to be used.
         The collection name format can be constructed using the optional {partition} token, where
         partitions start from 0. See the DocumentDB section of
         https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for more
         information. Required on PUT (CreateOrReplace) requests.
        :paramtype collection_name_pattern: str
        :keyword partition_key: The name of the field in output events used to specify the key for
         partitioning output across collections. If 'collectionNamePattern' contains the {partition}
         token, this property is required to be specified.
        :paramtype partition_key: str
        :keyword document_id: The name of the field in output events used to specify the primary key
         which insert or update operations are based on.
        :paramtype document_id: str
        """
        super(DocumentDbOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Storage/DocumentDB'  # type: str
        self.account_id = kwargs.get('account_id', None)
        self.account_key = kwargs.get('account_key', None)
        self.database = kwargs.get('database', None)
        self.collection_name_pattern = kwargs.get('collection_name_pattern', None)
        self.partition_key = kwargs.get('partition_key', None)
        self.document_id = kwargs.get('document_id', None)


class Error(msrest.serialization.Model):
    """Common error representation.

    :ivar error: Error definition properties.
    :vartype error: ~stream_analytics_management_client.models.ErrorError
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: Error definition properties.
        :paramtype error: ~stream_analytics_management_client.models.ErrorError
        """
        super(Error, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorDetails(msrest.serialization.Model):
    """Common error details representation.

    :ivar code: Error code.
    :vartype code: str
    :ivar target: Error target.
    :vartype target: str
    :ivar message: Error message.
    :vartype message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Error code.
        :paramtype code: str
        :keyword target: Error target.
        :paramtype target: str
        :keyword message: Error message.
        :paramtype message: str
        """
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.target = kwargs.get('target', None)
        self.message = kwargs.get('message', None)


class ErrorError(msrest.serialization.Model):
    """Error definition properties.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    :ivar target: Error target.
    :vartype target: str
    :ivar details: Error details.
    :vartype details: list[~stream_analytics_management_client.models.ErrorDetails]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetails]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Error code.
        :paramtype code: str
        :keyword message: Error message.
        :paramtype message: str
        :keyword target: Error target.
        :paramtype target: str
        :keyword details: Error details.
        :paramtype details: list[~stream_analytics_management_client.models.ErrorDetails]
        """
        super(ErrorError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class ErrorResponse(msrest.serialization.Model):
    """Describes the error that occurred.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Error code associated with the error that occurred.
    :vartype code: str
    :ivar message: Describes the error in detail.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = None
        self.message = None


class ServiceBusDataSourceProperties(msrest.serialization.Model):
    """The common properties that are associated with Service Bus data sources (Queues, Topics, Event Hubs, etc.).

    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _attribute_map = {
        'service_bus_namespace': {'key': 'serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(ServiceBusDataSourceProperties, self).__init__(**kwargs)
        self.service_bus_namespace = kwargs.get('service_bus_namespace', None)
        self.shared_access_policy_name = kwargs.get('shared_access_policy_name', None)
        self.shared_access_policy_key = kwargs.get('shared_access_policy_key', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class EventHubDataSourceProperties(ServiceBusDataSourceProperties):
    """The common properties that are associated with Event Hub data sources.

    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
    :vartype event_hub_name: str
    """

    _attribute_map = {
        'service_bus_namespace': {'key': 'serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
        'event_hub_name': {'key': 'eventHubName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
        :paramtype event_hub_name: str
        """
        super(EventHubDataSourceProperties, self).__init__(**kwargs)
        self.event_hub_name = kwargs.get('event_hub_name', None)


class EventHubOutputDataSource(OutputDataSource):
    """Describes an Event Hub output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
    :vartype event_hub_name: str
    :ivar partition_key: The key/column that is used to determine to which partition to send event
     data.
    :vartype partition_key: str
    :ivar property_columns: The properties associated with this Event Hub output.
    :vartype property_columns: list[str]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
        'event_hub_name': {'key': 'properties.eventHubName', 'type': 'str'},
        'partition_key': {'key': 'properties.partitionKey', 'type': 'str'},
        'property_columns': {'key': 'properties.propertyColumns', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
        :paramtype event_hub_name: str
        :keyword partition_key: The key/column that is used to determine to which partition to send
         event data.
        :paramtype partition_key: str
        :keyword property_columns: The properties associated with this Event Hub output.
        :paramtype property_columns: list[str]
        """
        super(EventHubOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.ServiceBus/EventHub'  # type: str
        self.service_bus_namespace = kwargs.get('service_bus_namespace', None)
        self.shared_access_policy_name = kwargs.get('shared_access_policy_name', None)
        self.shared_access_policy_key = kwargs.get('shared_access_policy_key', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)
        self.event_hub_name = kwargs.get('event_hub_name', None)
        self.partition_key = kwargs.get('partition_key', None)
        self.property_columns = kwargs.get('property_columns', None)


class EventHubOutputDataSourceProperties(EventHubDataSourceProperties):
    """The properties that are associated with an Event Hub output.

    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
    :vartype event_hub_name: str
    :ivar partition_key: The key/column that is used to determine to which partition to send event
     data.
    :vartype partition_key: str
    :ivar property_columns: The properties associated with this Event Hub output.
    :vartype property_columns: list[str]
    """

    _attribute_map = {
        'service_bus_namespace': {'key': 'serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
        'event_hub_name': {'key': 'eventHubName', 'type': 'str'},
        'partition_key': {'key': 'partitionKey', 'type': 'str'},
        'property_columns': {'key': 'propertyColumns', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
        :paramtype event_hub_name: str
        :keyword partition_key: The key/column that is used to determine to which partition to send
         event data.
        :paramtype partition_key: str
        :keyword property_columns: The properties associated with this Event Hub output.
        :paramtype property_columns: list[str]
        """
        super(EventHubOutputDataSourceProperties, self).__init__(**kwargs)
        self.partition_key = kwargs.get('partition_key', None)
        self.property_columns = kwargs.get('property_columns', None)


class EventHubStreamInputDataSource(StreamInputDataSource):
    """Describes an Event Hub input data source that contains stream data.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of input data source containing stream data. Required
     on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
    :vartype event_hub_name: str
    :ivar consumer_group_name: The name of an Event Hub Consumer Group that should be used to read
     events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows
     each of those inputs to receive the same events from the Event Hub. If not specified, the input
     uses the Event Hub’s default consumer group.
    :vartype consumer_group_name: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
        'event_hub_name': {'key': 'properties.eventHubName', 'type': 'str'},
        'consumer_group_name': {'key': 'properties.consumerGroupName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
        :paramtype event_hub_name: str
        :keyword consumer_group_name: The name of an Event Hub Consumer Group that should be used to
         read events from the Event Hub. Specifying distinct consumer group names for multiple inputs
         allows each of those inputs to receive the same events from the Event Hub. If not specified,
         the input uses the Event Hub’s default consumer group.
        :paramtype consumer_group_name: str
        """
        super(EventHubStreamInputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.ServiceBus/EventHub'  # type: str
        self.service_bus_namespace = kwargs.get('service_bus_namespace', None)
        self.shared_access_policy_name = kwargs.get('shared_access_policy_name', None)
        self.shared_access_policy_key = kwargs.get('shared_access_policy_key', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)
        self.event_hub_name = kwargs.get('event_hub_name', None)
        self.consumer_group_name = kwargs.get('consumer_group_name', None)


class EventHubStreamInputDataSourceProperties(EventHubDataSourceProperties):
    """The properties that are associated with a Event Hub input containing stream data.

    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
    :vartype event_hub_name: str
    :ivar consumer_group_name: The name of an Event Hub Consumer Group that should be used to read
     events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows
     each of those inputs to receive the same events from the Event Hub. If not specified, the input
     uses the Event Hub’s default consumer group.
    :vartype consumer_group_name: str
    """

    _attribute_map = {
        'service_bus_namespace': {'key': 'serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
        'event_hub_name': {'key': 'eventHubName', 'type': 'str'},
        'consumer_group_name': {'key': 'consumerGroupName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
        :paramtype event_hub_name: str
        :keyword consumer_group_name: The name of an Event Hub Consumer Group that should be used to
         read events from the Event Hub. Specifying distinct consumer group names for multiple inputs
         allows each of those inputs to receive the same events from the Event Hub. If not specified,
         the input uses the Event Hub’s default consumer group.
        :paramtype consumer_group_name: str
        """
        super(EventHubStreamInputDataSourceProperties, self).__init__(**kwargs)
        self.consumer_group_name = kwargs.get('consumer_group_name', None)


class EventHubV2OutputDataSource(OutputDataSource):
    """Describes an Event Hub output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
    :vartype event_hub_name: str
    :ivar partition_key: The key/column that is used to determine to which partition to send event
     data.
    :vartype partition_key: str
    :ivar property_columns: The properties associated with this Event Hub output.
    :vartype property_columns: list[str]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
        'event_hub_name': {'key': 'properties.eventHubName', 'type': 'str'},
        'partition_key': {'key': 'properties.partitionKey', 'type': 'str'},
        'property_columns': {'key': 'properties.propertyColumns', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
        :paramtype event_hub_name: str
        :keyword partition_key: The key/column that is used to determine to which partition to send
         event data.
        :paramtype partition_key: str
        :keyword property_columns: The properties associated with this Event Hub output.
        :paramtype property_columns: list[str]
        """
        super(EventHubV2OutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.EventHub/EventHub'  # type: str
        self.service_bus_namespace = kwargs.get('service_bus_namespace', None)
        self.shared_access_policy_name = kwargs.get('shared_access_policy_name', None)
        self.shared_access_policy_key = kwargs.get('shared_access_policy_key', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)
        self.event_hub_name = kwargs.get('event_hub_name', None)
        self.partition_key = kwargs.get('partition_key', None)
        self.property_columns = kwargs.get('property_columns', None)


class EventHubV2StreamInputDataSource(StreamInputDataSource):
    """Describes an Event Hub input data source that contains stream data.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of input data source containing stream data. Required
     on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
    :vartype event_hub_name: str
    :ivar consumer_group_name: The name of an Event Hub Consumer Group that should be used to read
     events from the Event Hub. Specifying distinct consumer group names for multiple inputs allows
     each of those inputs to receive the same events from the Event Hub. If not specified, the input
     uses the Event Hub’s default consumer group.
    :vartype consumer_group_name: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
        'event_hub_name': {'key': 'properties.eventHubName', 'type': 'str'},
        'consumer_group_name': {'key': 'properties.consumerGroupName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword event_hub_name: The name of the Event Hub. Required on PUT (CreateOrReplace) requests.
        :paramtype event_hub_name: str
        :keyword consumer_group_name: The name of an Event Hub Consumer Group that should be used to
         read events from the Event Hub. Specifying distinct consumer group names for multiple inputs
         allows each of those inputs to receive the same events from the Event Hub. If not specified,
         the input uses the Event Hub’s default consumer group.
        :paramtype consumer_group_name: str
        """
        super(EventHubV2StreamInputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.EventHub/EventHub'  # type: str
        self.service_bus_namespace = kwargs.get('service_bus_namespace', None)
        self.shared_access_policy_name = kwargs.get('shared_access_policy_name', None)
        self.shared_access_policy_key = kwargs.get('shared_access_policy_key', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)
        self.event_hub_name = kwargs.get('event_hub_name', None)
        self.consumer_group_name = kwargs.get('consumer_group_name', None)


class SubResource(msrest.serialization.Model):
    """The base sub-resource model definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Resource name.
        :paramtype name: str
        """
        super(SubResource, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.type = None


class Function(SubResource):
    """A function object, containing all information associated with the named function. All functions are contained under a streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar properties: The properties that are associated with a function.
    :vartype properties: ~stream_analytics_management_client.models.FunctionProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'FunctionProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Resource name.
        :paramtype name: str
        :keyword properties: The properties that are associated with a function.
        :paramtype properties: ~stream_analytics_management_client.models.FunctionProperties
        """
        super(Function, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class FunctionInput(msrest.serialization.Model):
    """Describes one input parameter of a function.

    :ivar data_type: The (Azure Stream Analytics supported) data type of the function input
     parameter. A list of valid Azure Stream Analytics data types are described at
     https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx.
    :vartype data_type: str
    :ivar is_configuration_parameter: A flag indicating if the parameter is a configuration
     parameter. True if this input parameter is expected to be a constant. Default is false.
    :vartype is_configuration_parameter: bool
    """

    _attribute_map = {
        'data_type': {'key': 'dataType', 'type': 'str'},
        'is_configuration_parameter': {'key': 'isConfigurationParameter', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_type: The (Azure Stream Analytics supported) data type of the function input
         parameter. A list of valid Azure Stream Analytics data types are described at
         https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx.
        :paramtype data_type: str
        :keyword is_configuration_parameter: A flag indicating if the parameter is a configuration
         parameter. True if this input parameter is expected to be a constant. Default is false.
        :paramtype is_configuration_parameter: bool
        """
        super(FunctionInput, self).__init__(**kwargs)
        self.data_type = kwargs.get('data_type', None)
        self.is_configuration_parameter = kwargs.get('is_configuration_parameter', None)


class FunctionListResult(msrest.serialization.Model):
    """Object containing a list of functions under a streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of functions under a streaming job. Populated by a 'List' operation.
    :vartype value: list[~stream_analytics_management_client.models.Function]
    :ivar next_link: The link (url) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Function]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(FunctionListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class FunctionOutput(msrest.serialization.Model):
    """Describes the output of a function.

    :ivar data_type: The (Azure Stream Analytics supported) data type of the function output. A
     list of valid Azure Stream Analytics data types are described at
     https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx.
    :vartype data_type: str
    """

    _attribute_map = {
        'data_type': {'key': 'dataType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_type: The (Azure Stream Analytics supported) data type of the function output. A
         list of valid Azure Stream Analytics data types are described at
         https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx.
        :paramtype data_type: str
        """
        super(FunctionOutput, self).__init__(**kwargs)
        self.data_type = kwargs.get('data_type', None)


class FunctionProperties(msrest.serialization.Model):
    """The properties that are associated with a function.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ScalarFunctionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of function.Constant filled by server.
    :vartype type: str
    :ivar etag: The current entity tag for the function. This is an opaque string. You can use it
     to detect whether the resource has changed between requests. You can also use it in the
     If-Match or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    """

    _validation = {
        'type': {'required': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Scalar': 'ScalarFunctionProperties'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(FunctionProperties, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]
        self.etag = None


class Identity(msrest.serialization.Model):
    """Describes how identity is verified.

    :ivar tenant_id: The identity tenantId.
    :vartype tenant_id: str
    :ivar principal_id: The identity principal ID.
    :vartype principal_id: str
    :ivar type: The identity type.
    :vartype type: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id: The identity tenantId.
        :paramtype tenant_id: str
        :keyword principal_id: The identity principal ID.
        :paramtype principal_id: str
        :keyword type: The identity type.
        :paramtype type: str
        """
        super(Identity, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.principal_id = kwargs.get('principal_id', None)
        self.type = kwargs.get('type', None)


class Input(SubResource):
    """An input object, containing all information associated with the named input. All inputs are contained under a streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar properties: The properties that are associated with an input. Required on PUT
     (CreateOrReplace) requests.
    :vartype properties: ~stream_analytics_management_client.models.InputProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'InputProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Resource name.
        :paramtype name: str
        :keyword properties: The properties that are associated with an input. Required on PUT
         (CreateOrReplace) requests.
        :paramtype properties: ~stream_analytics_management_client.models.InputProperties
        """
        super(Input, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class InputListResult(msrest.serialization.Model):
    """Object containing a list of inputs under a streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of inputs under a streaming job. Populated by a 'List' operation.
    :vartype value: list[~stream_analytics_management_client.models.Input]
    :ivar next_link: The link (url) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Input]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(InputListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class InputProperties(msrest.serialization.Model):
    """The properties that are associated with an input.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ReferenceInputProperties, StreamInputProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates whether the input is a source of reference data or stream data.
     Required on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar serialization: Describes how data from an input is serialized or how data is serialized
     when written to an output. Required on PUT (CreateOrReplace) requests.
    :vartype serialization: ~stream_analytics_management_client.models.Serialization
    :ivar diagnostics: Describes conditions applicable to the Input, Output, or the job overall,
     that warrant customer attention.
    :vartype diagnostics: ~stream_analytics_management_client.models.Diagnostics
    :ivar etag: The current entity tag for the input. This is an opaque string. You can use it to
     detect whether the resource has changed between requests. You can also use it in the If-Match
     or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    :ivar compression: Describes how input data is compressed.
    :vartype compression: ~stream_analytics_management_client.models.Compression
    :ivar partition_key: partitionKey Describes a key in the input data which is used for
     partitioning the input data.
    :vartype partition_key: str
    """

    _validation = {
        'type': {'required': True},
        'diagnostics': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'serialization': {'key': 'serialization', 'type': 'Serialization'},
        'diagnostics': {'key': 'diagnostics', 'type': 'Diagnostics'},
        'etag': {'key': 'etag', 'type': 'str'},
        'compression': {'key': 'compression', 'type': 'Compression'},
        'partition_key': {'key': 'partitionKey', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Reference': 'ReferenceInputProperties', 'Stream': 'StreamInputProperties'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword serialization: Describes how data from an input is serialized or how data is
         serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        :paramtype serialization: ~stream_analytics_management_client.models.Serialization
        :keyword compression: Describes how input data is compressed.
        :paramtype compression: ~stream_analytics_management_client.models.Compression
        :keyword partition_key: partitionKey Describes a key in the input data which is used for
         partitioning the input data.
        :paramtype partition_key: str
        """
        super(InputProperties, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]
        self.serialization = kwargs.get('serialization', None)
        self.diagnostics = None
        self.etag = None
        self.compression = kwargs.get('compression', None)
        self.partition_key = kwargs.get('partition_key', None)


class IoTHubStreamInputDataSource(StreamInputDataSource):
    """Describes an IoT Hub input data source that contains stream data.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of input data source containing stream data. Required
     on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar iot_hub_namespace: The name or the URI of the IoT Hub. Required on PUT (CreateOrReplace)
     requests.
    :vartype iot_hub_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the IoT Hub. This policy
     must contain at least the Service connect permission. Required on PUT (CreateOrReplace)
     requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar consumer_group_name: The name of an IoT Hub Consumer Group that should be used to read
     events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
    :vartype consumer_group_name: str
    :ivar endpoint: The IoT Hub endpoint to connect to (ie. messages/events,
     messages/operationsMonitoringEvents, etc.).
    :vartype endpoint: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'iot_hub_namespace': {'key': 'properties.iotHubNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'consumer_group_name': {'key': 'properties.consumerGroupName', 'type': 'str'},
        'endpoint': {'key': 'properties.endpoint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword iot_hub_namespace: The name or the URI of the IoT Hub. Required on PUT
         (CreateOrReplace) requests.
        :paramtype iot_hub_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the IoT Hub. This policy
         must contain at least the Service connect permission. Required on PUT (CreateOrReplace)
         requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword consumer_group_name: The name of an IoT Hub Consumer Group that should be used to read
         events from the IoT Hub. If not specified, the input uses the Iot Hub’s default consumer group.
        :paramtype consumer_group_name: str
        :keyword endpoint: The IoT Hub endpoint to connect to (ie. messages/events,
         messages/operationsMonitoringEvents, etc.).
        :paramtype endpoint: str
        """
        super(IoTHubStreamInputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.Devices/IotHubs'  # type: str
        self.iot_hub_namespace = kwargs.get('iot_hub_namespace', None)
        self.shared_access_policy_name = kwargs.get('shared_access_policy_name', None)
        self.shared_access_policy_key = kwargs.get('shared_access_policy_key', None)
        self.consumer_group_name = kwargs.get('consumer_group_name', None)
        self.endpoint = kwargs.get('endpoint', None)


class JavaScriptFunctionBinding(FunctionBinding):
    """The binding to a JavaScript function.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the function binding type.Constant filled by server.
    :vartype type: str
    :ivar script: The JavaScript code containing a single function definition. For example:
     'function (x, y) { return x + y; }'.
    :vartype script: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'script': {'key': 'properties.script', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword script: The JavaScript code containing a single function definition. For example:
         'function (x, y) { return x + y; }'.
        :paramtype script: str
        """
        super(JavaScriptFunctionBinding, self).__init__(**kwargs)
        self.type = 'Microsoft.StreamAnalytics/JavascriptUdf'  # type: str
        self.script = kwargs.get('script', None)


class JavaScriptFunctionRetrieveDefaultDefinitionParameters(FunctionRetrieveDefaultDefinitionParameters):
    """The parameters needed to retrieve the default function definition for a JavaScript function.

    All required parameters must be populated in order to send to Azure.

    :ivar binding_type: Required. Indicates the function binding type.Constant filled by server.
    :vartype binding_type: str
    :ivar script: The JavaScript code containing a single function definition. For example:
     'function (x, y) { return x + y; }'.
    :vartype script: str
    :ivar udf_type: The function type. The only acceptable values to pass in are None and "Scalar".
     The default value is None.
    :vartype udf_type: str
    """

    _validation = {
        'binding_type': {'required': True},
    }

    _attribute_map = {
        'binding_type': {'key': 'bindingType', 'type': 'str'},
        'script': {'key': 'bindingRetrievalProperties.script', 'type': 'str'},
        'udf_type': {'key': 'bindingRetrievalProperties.udfType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword script: The JavaScript code containing a single function definition. For example:
         'function (x, y) { return x + y; }'.
        :paramtype script: str
        :keyword udf_type: The function type. The only acceptable values to pass in are None and
         "Scalar". The default value is None.
        :paramtype udf_type: str
        """
        super(JavaScriptFunctionRetrieveDefaultDefinitionParameters, self).__init__(**kwargs)
        self.binding_type = 'Microsoft.StreamAnalytics/JavascriptUdf'  # type: str
        self.script = kwargs.get('script', None)
        self.udf_type = kwargs.get('udf_type', None)


class StorageAccount(msrest.serialization.Model):
    """The properties that are associated with an Azure Storage account.

    :ivar account_name: The name of the Azure Storage account. Required on PUT (CreateOrReplace)
     requests.
    :vartype account_name: str
    :ivar account_key: The account key for the Azure Storage account. Required on PUT
     (CreateOrReplace) requests.
    :vartype account_key: str
    """

    _attribute_map = {
        'account_name': {'key': 'accountName', 'type': 'str'},
        'account_key': {'key': 'accountKey', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_name: The name of the Azure Storage account. Required on PUT (CreateOrReplace)
         requests.
        :paramtype account_name: str
        :keyword account_key: The account key for the Azure Storage account. Required on PUT
         (CreateOrReplace) requests.
        :paramtype account_key: str
        """
        super(StorageAccount, self).__init__(**kwargs)
        self.account_name = kwargs.get('account_name', None)
        self.account_key = kwargs.get('account_key', None)


class JobStorageAccount(StorageAccount):
    """The properties that are associated with an Azure Storage account with MSI.

    :ivar account_name: The name of the Azure Storage account. Required on PUT (CreateOrReplace)
     requests.
    :vartype account_name: str
    :ivar account_key: The account key for the Azure Storage account. Required on PUT
     (CreateOrReplace) requests.
    :vartype account_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _attribute_map = {
        'account_name': {'key': 'accountName', 'type': 'str'},
        'account_key': {'key': 'accountKey', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_name: The name of the Azure Storage account. Required on PUT (CreateOrReplace)
         requests.
        :paramtype account_name: str
        :keyword account_key: The account key for the Azure Storage account. Required on PUT
         (CreateOrReplace) requests.
        :paramtype account_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(JobStorageAccount, self).__init__(**kwargs)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class JsonSerialization(Serialization):
    """Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of serialization that the input or output uses.
     Required on PUT (CreateOrReplace) requests.Constant filled by server. Possible values include:
     "Csv", "Avro", "Json", "Parquet".
    :vartype type: str or ~stream_analytics_management_client.models.EventSerializationType
    :ivar encoding: Specifies the encoding of the incoming data in the case of input and the
     encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     Possible values include: "UTF8".
    :vartype encoding: str or ~stream_analytics_management_client.models.Encoding
    :ivar format: This property only applies to JSON serialization of outputs only. It is not
     applicable to inputs. This property specifies the format of the JSON the output will be written
     in. The currently supported values are 'lineSeparated' indicating the output will be formatted
     by having each JSON object separated by a new line and 'array' indicating the output will be
     formatted as an array of JSON objects. Default value is 'lineSeparated' if left null. Possible
     values include: "LineSeparated", "Array".
    :vartype format: str or
     ~stream_analytics_management_client.models.JsonOutputSerializationFormat
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'encoding': {'key': 'properties.encoding', 'type': 'str'},
        'format': {'key': 'properties.format', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword encoding: Specifies the encoding of the incoming data in the case of input and the
         encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
         Possible values include: "UTF8".
        :paramtype encoding: str or ~stream_analytics_management_client.models.Encoding
        :keyword format: This property only applies to JSON serialization of outputs only. It is not
         applicable to inputs. This property specifies the format of the JSON the output will be written
         in. The currently supported values are 'lineSeparated' indicating the output will be formatted
         by having each JSON object separated by a new line and 'array' indicating the output will be
         formatted as an array of JSON objects. Default value is 'lineSeparated' if left null. Possible
         values include: "LineSeparated", "Array".
        :paramtype format: str or
         ~stream_analytics_management_client.models.JsonOutputSerializationFormat
        """
        super(JsonSerialization, self).__init__(**kwargs)
        self.type = 'Json'  # type: str
        self.encoding = kwargs.get('encoding', None)
        self.format = kwargs.get('format', None)


class Operation(msrest.serialization.Model):
    """A Stream Analytics REST API operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation being performed on this particular object.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar display: Contains the localized display information for this particular operation /
     action.
    :vartype display: ~stream_analytics_management_client.models.OperationDisplay
    """

    _validation = {
        'name': {'readonly': True},
        'display': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword is_data_action: Indicates whether the operation is a data action.
        :paramtype is_data_action: bool
        """
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = kwargs.get('is_data_action', None)
        self.display = None


class OperationDisplay(msrest.serialization.Model):
    """Contains the localized display information for this particular operation / action.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name.
    :vartype provider: str
    :ivar resource: The localized friendly form of the resource type related to this
     action/operation.
    :vartype resource: str
    :ivar operation: The localized friendly name for the operation.
    :vartype operation: str
    :ivar description: The localized friendly description for the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """Result of the request to list Stream Analytics operations. It contains a list of operations and a URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of Stream Analytics operations supported by the Microsoft.StreamAnalytics
     resource provider.
    :vartype value: list[~stream_analytics_management_client.models.Operation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class Output(SubResource):
    """An output object, containing all information associated with the named output. All outputs are contained under a streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar datasource: Describes the data source that output will be written to. Required on PUT
     (CreateOrReplace) requests.
    :vartype datasource: ~stream_analytics_management_client.models.OutputDataSource
    :ivar time_window: The time frame for filtering Stream Analytics job outputs.
    :vartype time_window: str
    :ivar size_window: The size window to constrain a Stream Analytics output to.
    :vartype size_window: float
    :ivar serialization: Describes how data from an input is serialized or how data is serialized
     when written to an output. Required on PUT (CreateOrReplace) requests.
    :vartype serialization: ~stream_analytics_management_client.models.Serialization
    :ivar diagnostics: Describes conditions applicable to the Input, Output, or the job overall,
     that warrant customer attention.
    :vartype diagnostics: ~stream_analytics_management_client.models.Diagnostics
    :ivar etag: The current entity tag for the output. This is an opaque string. You can use it to
     detect whether the resource has changed between requests. You can also use it in the If-Match
     or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'diagnostics': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'datasource': {'key': 'properties.datasource', 'type': 'OutputDataSource'},
        'time_window': {'key': 'properties.timeWindow', 'type': 'str'},
        'size_window': {'key': 'properties.sizeWindow', 'type': 'float'},
        'serialization': {'key': 'properties.serialization', 'type': 'Serialization'},
        'diagnostics': {'key': 'properties.diagnostics', 'type': 'Diagnostics'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Resource name.
        :paramtype name: str
        :keyword datasource: Describes the data source that output will be written to. Required on PUT
         (CreateOrReplace) requests.
        :paramtype datasource: ~stream_analytics_management_client.models.OutputDataSource
        :keyword time_window: The time frame for filtering Stream Analytics job outputs.
        :paramtype time_window: str
        :keyword size_window: The size window to constrain a Stream Analytics output to.
        :paramtype size_window: float
        :keyword serialization: Describes how data from an input is serialized or how data is
         serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        :paramtype serialization: ~stream_analytics_management_client.models.Serialization
        """
        super(Output, self).__init__(**kwargs)
        self.datasource = kwargs.get('datasource', None)
        self.time_window = kwargs.get('time_window', None)
        self.size_window = kwargs.get('size_window', None)
        self.serialization = kwargs.get('serialization', None)
        self.diagnostics = None
        self.etag = None


class OutputListResult(msrest.serialization.Model):
    """Object containing a list of outputs under a streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of outputs under a streaming job. Populated by a 'List' operation.
    :vartype value: list[~stream_analytics_management_client.models.Output]
    :ivar next_link: The link (url) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Output]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OutputListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ParquetSerialization(Serialization):
    """Describes how data from an input is serialized or how data is serialized when written to an output in Parquet format.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of serialization that the input or output uses.
     Required on PUT (CreateOrReplace) requests.Constant filled by server. Possible values include:
     "Csv", "Avro", "Json", "Parquet".
    :vartype type: str or ~stream_analytics_management_client.models.EventSerializationType
    :ivar properties: The properties that are associated with the Parquet serialization type.
     Required on PUT (CreateOrReplace) requests.
    :vartype properties: any
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: The properties that are associated with the Parquet serialization type.
         Required on PUT (CreateOrReplace) requests.
        :paramtype properties: any
        """
        super(ParquetSerialization, self).__init__(**kwargs)
        self.type = 'Parquet'  # type: str
        self.properties = kwargs.get('properties', None)


class PowerBIOutputDataSource(OutputDataSource):
    """Describes a Power BI output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar refresh_token: A refresh token that can be used to obtain a valid access token that can
     then be used to authenticate with the data source. A valid refresh token is currently only
     obtainable via the Azure Portal. It is recommended to put a dummy string value here when
     creating the data source and then going to the Azure Portal to authenticate the data source
     which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
     requests.
    :vartype refresh_token: str
    :ivar token_user_principal_name: The user principal name (UPN) of the user that was used to
     obtain the refresh token. Use this property to help remember which user was used to obtain the
     refresh token.
    :vartype token_user_principal_name: str
    :ivar token_user_display_name: The user display name of the user that was used to obtain the
     refresh token. Use this property to help remember which user was used to obtain the refresh
     token.
    :vartype token_user_display_name: str
    :ivar dataset: The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
    :vartype dataset: str
    :ivar table: The name of the Power BI table under the specified dataset. Required on PUT
     (CreateOrReplace) requests.
    :vartype table: str
    :ivar group_id: The ID of the Power BI group.
    :vartype group_id: str
    :ivar group_name: The name of the Power BI group. Use this property to help remember which
     specific Power BI group id was used.
    :vartype group_name: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'refresh_token': {'key': 'properties.refreshToken', 'type': 'str'},
        'token_user_principal_name': {'key': 'properties.tokenUserPrincipalName', 'type': 'str'},
        'token_user_display_name': {'key': 'properties.tokenUserDisplayName', 'type': 'str'},
        'dataset': {'key': 'properties.dataset', 'type': 'str'},
        'table': {'key': 'properties.table', 'type': 'str'},
        'group_id': {'key': 'properties.groupId', 'type': 'str'},
        'group_name': {'key': 'properties.groupName', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword refresh_token: A refresh token that can be used to obtain a valid access token that
         can then be used to authenticate with the data source. A valid refresh token is currently only
         obtainable via the Azure Portal. It is recommended to put a dummy string value here when
         creating the data source and then going to the Azure Portal to authenticate the data source
         which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
         requests.
        :paramtype refresh_token: str
        :keyword token_user_principal_name: The user principal name (UPN) of the user that was used to
         obtain the refresh token. Use this property to help remember which user was used to obtain the
         refresh token.
        :paramtype token_user_principal_name: str
        :keyword token_user_display_name: The user display name of the user that was used to obtain the
         refresh token. Use this property to help remember which user was used to obtain the refresh
         token.
        :paramtype token_user_display_name: str
        :keyword dataset: The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
        :paramtype dataset: str
        :keyword table: The name of the Power BI table under the specified dataset. Required on PUT
         (CreateOrReplace) requests.
        :paramtype table: str
        :keyword group_id: The ID of the Power BI group.
        :paramtype group_id: str
        :keyword group_name: The name of the Power BI group. Use this property to help remember which
         specific Power BI group id was used.
        :paramtype group_name: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(PowerBIOutputDataSource, self).__init__(**kwargs)
        self.type = 'PowerBI'  # type: str
        self.refresh_token = kwargs.get('refresh_token', None)
        self.token_user_principal_name = kwargs.get('token_user_principal_name', None)
        self.token_user_display_name = kwargs.get('token_user_display_name', None)
        self.dataset = kwargs.get('dataset', None)
        self.table = kwargs.get('table', None)
        self.group_id = kwargs.get('group_id', None)
        self.group_name = kwargs.get('group_name', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class PowerBIOutputDataSourceProperties(OAuthBasedDataSourceProperties):
    """The properties that are associated with a Power BI output.

    :ivar refresh_token: A refresh token that can be used to obtain a valid access token that can
     then be used to authenticate with the data source. A valid refresh token is currently only
     obtainable via the Azure Portal. It is recommended to put a dummy string value here when
     creating the data source and then going to the Azure Portal to authenticate the data source
     which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
     requests.
    :vartype refresh_token: str
    :ivar token_user_principal_name: The user principal name (UPN) of the user that was used to
     obtain the refresh token. Use this property to help remember which user was used to obtain the
     refresh token.
    :vartype token_user_principal_name: str
    :ivar token_user_display_name: The user display name of the user that was used to obtain the
     refresh token. Use this property to help remember which user was used to obtain the refresh
     token.
    :vartype token_user_display_name: str
    :ivar dataset: The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
    :vartype dataset: str
    :ivar table: The name of the Power BI table under the specified dataset. Required on PUT
     (CreateOrReplace) requests.
    :vartype table: str
    :ivar group_id: The ID of the Power BI group.
    :vartype group_id: str
    :ivar group_name: The name of the Power BI group. Use this property to help remember which
     specific Power BI group id was used.
    :vartype group_name: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    """

    _attribute_map = {
        'refresh_token': {'key': 'refreshToken', 'type': 'str'},
        'token_user_principal_name': {'key': 'tokenUserPrincipalName', 'type': 'str'},
        'token_user_display_name': {'key': 'tokenUserDisplayName', 'type': 'str'},
        'dataset': {'key': 'dataset', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'group_name': {'key': 'groupName', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword refresh_token: A refresh token that can be used to obtain a valid access token that
         can then be used to authenticate with the data source. A valid refresh token is currently only
         obtainable via the Azure Portal. It is recommended to put a dummy string value here when
         creating the data source and then going to the Azure Portal to authenticate the data source
         which will update this property with a valid refresh token. Required on PUT (CreateOrReplace)
         requests.
        :paramtype refresh_token: str
        :keyword token_user_principal_name: The user principal name (UPN) of the user that was used to
         obtain the refresh token. Use this property to help remember which user was used to obtain the
         refresh token.
        :paramtype token_user_principal_name: str
        :keyword token_user_display_name: The user display name of the user that was used to obtain the
         refresh token. Use this property to help remember which user was used to obtain the refresh
         token.
        :paramtype token_user_display_name: str
        :keyword dataset: The name of the Power BI dataset. Required on PUT (CreateOrReplace) requests.
        :paramtype dataset: str
        :keyword table: The name of the Power BI table under the specified dataset. Required on PUT
         (CreateOrReplace) requests.
        :paramtype table: str
        :keyword group_id: The ID of the Power BI group.
        :paramtype group_id: str
        :keyword group_name: The name of the Power BI group. Use this property to help remember which
         specific Power BI group id was used.
        :paramtype group_name: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        """
        super(PowerBIOutputDataSourceProperties, self).__init__(**kwargs)
        self.dataset = kwargs.get('dataset', None)
        self.table = kwargs.get('table', None)
        self.group_id = kwargs.get('group_id', None)
        self.group_name = kwargs.get('group_name', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)


class ProxyResource(Resource):
    """The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ProxyResource, self).__init__(**kwargs)


class PrivateEndpoint(ProxyResource):
    """Complete information about the private endpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :ivar etag: Unique opaque string (generally a GUID) that represents the metadata state of the
     resource (private endpoint) and changes whenever the resource is updated. Required on PUT
     (CreateOrUpdate) requests.
    :vartype etag: str
    :ivar created_date: The date when this private endpoint was created.
    :vartype created_date: str
    :ivar manual_private_link_service_connections: A list of connections to the remote resource.
     Immutable after it is set.
    :vartype manual_private_link_service_connections:
     list[~stream_analytics_management_client.models.PrivateLinkServiceConnection]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'created_date': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'str'},
        'manual_private_link_service_connections': {'key': 'properties.manualPrivateLinkServiceConnections', 'type': '[PrivateLinkServiceConnection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword manual_private_link_service_connections: A list of connections to the remote resource.
         Immutable after it is set.
        :paramtype manual_private_link_service_connections:
         list[~stream_analytics_management_client.models.PrivateLinkServiceConnection]
        """
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.etag = None
        self.created_date = None
        self.manual_private_link_service_connections = kwargs.get('manual_private_link_service_connections', None)


class PrivateEndpointListResult(msrest.serialization.Model):
    """A list of private endpoints.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of private endpoints.
    :vartype value: list[~stream_analytics_management_client.models.PrivateEndpoint]
    :ivar next_link: The URL to fetch the next set of private endpoints.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateEndpoint]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(PrivateEndpointListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class PrivateLinkConnectionState(msrest.serialization.Model):
    """A collection of read-only information about the state of the connection to the private remote resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the remote resource/service.
    :vartype status: str
    :ivar description: The reason for approval/rejection of the connection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype actions_required: str
    """

    _validation = {
        'status': {'readonly': True},
        'description': {'readonly': True},
        'actions_required': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(PrivateLinkConnectionState, self).__init__(**kwargs)
        self.status = None
        self.description = None
        self.actions_required = None


class PrivateLinkServiceConnection(msrest.serialization.Model):
    """A grouping of information about the connection to the remote resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar private_link_service_id: The resource id of the private link service. Required on PUT
     (CreateOrUpdate) requests.
    :vartype private_link_service_id: str
    :ivar group_ids: The ID(s) of the group(s) obtained from the remote resource that this private
     endpoint should connect to. Required on PUT (CreateOrUpdate) requests.
    :vartype group_ids: list[str]
    :ivar request_message: A message passed to the owner of the remote resource with this
     connection request. Restricted to 140 chars.
    :vartype request_message: str
    :ivar private_link_service_connection_state: A collection of read-only information about the
     state of the connection to the private remote resource.
    :vartype private_link_service_connection_state:
     ~stream_analytics_management_client.models.PrivateLinkConnectionState
    """

    _validation = {
        'request_message': {'readonly': True},
    }

    _attribute_map = {
        'private_link_service_id': {'key': 'properties.privateLinkServiceId', 'type': 'str'},
        'group_ids': {'key': 'properties.groupIds', 'type': '[str]'},
        'request_message': {'key': 'properties.requestMessage', 'type': 'str'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkConnectionState'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword private_link_service_id: The resource id of the private link service. Required on PUT
         (CreateOrUpdate) requests.
        :paramtype private_link_service_id: str
        :keyword group_ids: The ID(s) of the group(s) obtained from the remote resource that this
         private endpoint should connect to. Required on PUT (CreateOrUpdate) requests.
        :paramtype group_ids: list[str]
        :keyword private_link_service_connection_state: A collection of read-only information about the
         state of the connection to the private remote resource.
        :paramtype private_link_service_connection_state:
         ~stream_analytics_management_client.models.PrivateLinkConnectionState
        """
        super(PrivateLinkServiceConnection, self).__init__(**kwargs)
        self.private_link_service_id = kwargs.get('private_link_service_id', None)
        self.group_ids = kwargs.get('group_ids', None)
        self.request_message = None
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)


class ReferenceInputProperties(InputProperties):
    """The properties that are associated with an input containing reference data.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates whether the input is a source of reference data or stream data.
     Required on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar serialization: Describes how data from an input is serialized or how data is serialized
     when written to an output. Required on PUT (CreateOrReplace) requests.
    :vartype serialization: ~stream_analytics_management_client.models.Serialization
    :ivar diagnostics: Describes conditions applicable to the Input, Output, or the job overall,
     that warrant customer attention.
    :vartype diagnostics: ~stream_analytics_management_client.models.Diagnostics
    :ivar etag: The current entity tag for the input. This is an opaque string. You can use it to
     detect whether the resource has changed between requests. You can also use it in the If-Match
     or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    :ivar compression: Describes how input data is compressed.
    :vartype compression: ~stream_analytics_management_client.models.Compression
    :ivar partition_key: partitionKey Describes a key in the input data which is used for
     partitioning the input data.
    :vartype partition_key: str
    :ivar datasource: Describes an input data source that contains reference data. Required on PUT
     (CreateOrReplace) requests.
    :vartype datasource: ~stream_analytics_management_client.models.ReferenceInputDataSource
    """

    _validation = {
        'type': {'required': True},
        'diagnostics': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'serialization': {'key': 'serialization', 'type': 'Serialization'},
        'diagnostics': {'key': 'diagnostics', 'type': 'Diagnostics'},
        'etag': {'key': 'etag', 'type': 'str'},
        'compression': {'key': 'compression', 'type': 'Compression'},
        'partition_key': {'key': 'partitionKey', 'type': 'str'},
        'datasource': {'key': 'datasource', 'type': 'ReferenceInputDataSource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword serialization: Describes how data from an input is serialized or how data is
         serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        :paramtype serialization: ~stream_analytics_management_client.models.Serialization
        :keyword compression: Describes how input data is compressed.
        :paramtype compression: ~stream_analytics_management_client.models.Compression
        :keyword partition_key: partitionKey Describes a key in the input data which is used for
         partitioning the input data.
        :paramtype partition_key: str
        :keyword datasource: Describes an input data source that contains reference data. Required on
         PUT (CreateOrReplace) requests.
        :paramtype datasource: ~stream_analytics_management_client.models.ReferenceInputDataSource
        """
        super(ReferenceInputProperties, self).__init__(**kwargs)
        self.type = 'Reference'  # type: str
        self.datasource = kwargs.get('datasource', None)


class ResourceTestStatus(msrest.serialization.Model):
    """Describes the status of the test operation along with error information, if applicable.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the test operation.
    :vartype status: str
    :ivar error: Describes the error that occurred.
    :vartype error: ~stream_analytics_management_client.models.ErrorResponse
    """

    _validation = {
        'status': {'readonly': True},
        'error': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ErrorResponse'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ResourceTestStatus, self).__init__(**kwargs)
        self.status = None
        self.error = None


class ScalarFunctionProperties(FunctionProperties):
    """The properties that are associated with a scalar function.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of function.Constant filled by server.
    :vartype type: str
    :ivar etag: The current entity tag for the function. This is an opaque string. You can use it
     to detect whether the resource has changed between requests. You can also use it in the
     If-Match or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    :ivar inputs: A list of inputs describing the parameters of the function.
    :vartype inputs: list[~stream_analytics_management_client.models.FunctionInput]
    :ivar output: The output of the function.
    :vartype output: ~stream_analytics_management_client.models.FunctionOutput
    :ivar binding: The physical binding of the function. For example, in the Azure Machine Learning
     web service’s case, this describes the endpoint.
    :vartype binding: ~stream_analytics_management_client.models.FunctionBinding
    """

    _validation = {
        'type': {'required': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'inputs': {'key': 'properties.inputs', 'type': '[FunctionInput]'},
        'output': {'key': 'properties.output', 'type': 'FunctionOutput'},
        'binding': {'key': 'properties.binding', 'type': 'FunctionBinding'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword inputs: A list of inputs describing the parameters of the function.
        :paramtype inputs: list[~stream_analytics_management_client.models.FunctionInput]
        :keyword output: The output of the function.
        :paramtype output: ~stream_analytics_management_client.models.FunctionOutput
        :keyword binding: The physical binding of the function. For example, in the Azure Machine
         Learning web service’s case, this describes the endpoint.
        :paramtype binding: ~stream_analytics_management_client.models.FunctionBinding
        """
        super(ScalarFunctionProperties, self).__init__(**kwargs)
        self.type = 'Scalar'  # type: str
        self.inputs = kwargs.get('inputs', None)
        self.output = kwargs.get('output', None)
        self.binding = kwargs.get('binding', None)


class ScaleStreamingJobParameters(msrest.serialization.Model):
    """Parameters supplied to the Scale Streaming Job operation.

    :ivar streaming_units: Specifies the number of streaming units that the streaming job will
     scale to.
    :vartype streaming_units: int
    """

    _attribute_map = {
        'streaming_units': {'key': 'streamingUnits', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword streaming_units: Specifies the number of streaming units that the streaming job will
         scale to.
        :paramtype streaming_units: int
        """
        super(ScaleStreamingJobParameters, self).__init__(**kwargs)
        self.streaming_units = kwargs.get('streaming_units', None)


class ServiceBusQueueOutputDataSource(OutputDataSource):
    """Describes a Service Bus Queue output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar queue_name: The name of the Service Bus Queue. Required on PUT (CreateOrReplace)
     requests.
    :vartype queue_name: str
    :ivar property_columns: A string array of the names of output columns to be attached to Service
     Bus messages as custom properties.
    :vartype property_columns: list[str]
    :ivar system_property_columns: The system properties associated with the Service Bus Queue. The
     following system properties are supported: ReplyToSessionId, ContentType, To, Subject,
     CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo,
     Label, ScheduledEnqueueTimeUtc.
    :vartype system_property_columns: any
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
        'queue_name': {'key': 'properties.queueName', 'type': 'str'},
        'property_columns': {'key': 'properties.propertyColumns', 'type': '[str]'},
        'system_property_columns': {'key': 'properties.systemPropertyColumns', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword queue_name: The name of the Service Bus Queue. Required on PUT (CreateOrReplace)
         requests.
        :paramtype queue_name: str
        :keyword property_columns: A string array of the names of output columns to be attached to
         Service Bus messages as custom properties.
        :paramtype property_columns: list[str]
        :keyword system_property_columns: The system properties associated with the Service Bus Queue.
         The following system properties are supported: ReplyToSessionId, ContentType, To, Subject,
         CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo,
         Label, ScheduledEnqueueTimeUtc.
        :paramtype system_property_columns: any
        """
        super(ServiceBusQueueOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.ServiceBus/Queue'  # type: str
        self.service_bus_namespace = kwargs.get('service_bus_namespace', None)
        self.shared_access_policy_name = kwargs.get('shared_access_policy_name', None)
        self.shared_access_policy_key = kwargs.get('shared_access_policy_key', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)
        self.queue_name = kwargs.get('queue_name', None)
        self.property_columns = kwargs.get('property_columns', None)
        self.system_property_columns = kwargs.get('system_property_columns', None)


class ServiceBusQueueOutputDataSourceProperties(ServiceBusDataSourceProperties):
    """The properties that are associated with a Service Bus Queue output.

    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar queue_name: The name of the Service Bus Queue. Required on PUT (CreateOrReplace)
     requests.
    :vartype queue_name: str
    :ivar property_columns: A string array of the names of output columns to be attached to Service
     Bus messages as custom properties.
    :vartype property_columns: list[str]
    :ivar system_property_columns: The system properties associated with the Service Bus Queue. The
     following system properties are supported: ReplyToSessionId, ContentType, To, Subject,
     CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo,
     Label, ScheduledEnqueueTimeUtc.
    :vartype system_property_columns: any
    """

    _attribute_map = {
        'service_bus_namespace': {'key': 'serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
        'queue_name': {'key': 'queueName', 'type': 'str'},
        'property_columns': {'key': 'propertyColumns', 'type': '[str]'},
        'system_property_columns': {'key': 'systemPropertyColumns', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword queue_name: The name of the Service Bus Queue. Required on PUT (CreateOrReplace)
         requests.
        :paramtype queue_name: str
        :keyword property_columns: A string array of the names of output columns to be attached to
         Service Bus messages as custom properties.
        :paramtype property_columns: list[str]
        :keyword system_property_columns: The system properties associated with the Service Bus Queue.
         The following system properties are supported: ReplyToSessionId, ContentType, To, Subject,
         CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId, ReplyTo,
         Label, ScheduledEnqueueTimeUtc.
        :paramtype system_property_columns: any
        """
        super(ServiceBusQueueOutputDataSourceProperties, self).__init__(**kwargs)
        self.queue_name = kwargs.get('queue_name', None)
        self.property_columns = kwargs.get('property_columns', None)
        self.system_property_columns = kwargs.get('system_property_columns', None)


class ServiceBusTopicOutputDataSource(OutputDataSource):
    """Describes a Service Bus Topic output data source.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates the type of data source output will be written to. Required on
     PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar topic_name: The name of the Service Bus Topic. Required on PUT (CreateOrReplace)
     requests.
    :vartype topic_name: str
    :ivar property_columns: A string array of the names of output columns to be attached to Service
     Bus messages as custom properties.
    :vartype property_columns: list[str]
    :ivar system_property_columns: The system properties associated with the Service Bus Topic
     Output. The following system properties are supported: ReplyToSessionId, ContentType, To,
     Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId,
     ReplyTo, Label, ScheduledEnqueueTimeUtc.
    :vartype system_property_columns: dict[str, str]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'properties.authenticationMode', 'type': 'str'},
        'topic_name': {'key': 'properties.topicName', 'type': 'str'},
        'property_columns': {'key': 'properties.propertyColumns', 'type': '[str]'},
        'system_property_columns': {'key': 'properties.systemPropertyColumns', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword topic_name: The name of the Service Bus Topic. Required on PUT (CreateOrReplace)
         requests.
        :paramtype topic_name: str
        :keyword property_columns: A string array of the names of output columns to be attached to
         Service Bus messages as custom properties.
        :paramtype property_columns: list[str]
        :keyword system_property_columns: The system properties associated with the Service Bus Topic
         Output. The following system properties are supported: ReplyToSessionId, ContentType, To,
         Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId,
         ReplyTo, Label, ScheduledEnqueueTimeUtc.
        :paramtype system_property_columns: dict[str, str]
        """
        super(ServiceBusTopicOutputDataSource, self).__init__(**kwargs)
        self.type = 'Microsoft.ServiceBus/Topic'  # type: str
        self.service_bus_namespace = kwargs.get('service_bus_namespace', None)
        self.shared_access_policy_name = kwargs.get('shared_access_policy_name', None)
        self.shared_access_policy_key = kwargs.get('shared_access_policy_key', None)
        self.authentication_mode = kwargs.get('authentication_mode', None)
        self.topic_name = kwargs.get('topic_name', None)
        self.property_columns = kwargs.get('property_columns', None)
        self.system_property_columns = kwargs.get('system_property_columns', None)


class ServiceBusTopicOutputDataSourceProperties(ServiceBusDataSourceProperties):
    """The properties that are associated with a Service Bus Topic output.

    :ivar service_bus_namespace: The namespace that is associated with the desired Event Hub,
     Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype service_bus_namespace: str
    :ivar shared_access_policy_name: The shared access policy name for the Event Hub, Service Bus
     Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_name: str
    :ivar shared_access_policy_key: The shared access policy key for the specified shared access
     policy. Required on PUT (CreateOrReplace) requests.
    :vartype shared_access_policy_key: str
    :ivar authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
     "ConnectionString".
    :vartype authentication_mode: str or
     ~stream_analytics_management_client.models.AuthenticationMode
    :ivar topic_name: The name of the Service Bus Topic. Required on PUT (CreateOrReplace)
     requests.
    :vartype topic_name: str
    :ivar property_columns: A string array of the names of output columns to be attached to Service
     Bus messages as custom properties.
    :vartype property_columns: list[str]
    :ivar system_property_columns: The system properties associated with the Service Bus Topic
     Output. The following system properties are supported: ReplyToSessionId, ContentType, To,
     Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId,
     ReplyTo, Label, ScheduledEnqueueTimeUtc.
    :vartype system_property_columns: dict[str, str]
    """

    _attribute_map = {
        'service_bus_namespace': {'key': 'serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'sharedAccessPolicyKey', 'type': 'str'},
        'authentication_mode': {'key': 'authenticationMode', 'type': 'str'},
        'topic_name': {'key': 'topicName', 'type': 'str'},
        'property_columns': {'key': 'propertyColumns', 'type': '[str]'},
        'system_property_columns': {'key': 'systemPropertyColumns', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword service_bus_namespace: The namespace that is associated with the desired Event Hub,
         Service Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype service_bus_namespace: str
        :keyword shared_access_policy_name: The shared access policy name for the Event Hub, Service
         Bus Queue, Service Bus Topic, etc. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_name: str
        :keyword shared_access_policy_key: The shared access policy key for the specified shared access
         policy. Required on PUT (CreateOrReplace) requests.
        :paramtype shared_access_policy_key: str
        :keyword authentication_mode: Authentication Mode. Possible values include: "Msi", "UserToken",
         "ConnectionString".
        :paramtype authentication_mode: str or
         ~stream_analytics_management_client.models.AuthenticationMode
        :keyword topic_name: The name of the Service Bus Topic. Required on PUT (CreateOrReplace)
         requests.
        :paramtype topic_name: str
        :keyword property_columns: A string array of the names of output columns to be attached to
         Service Bus messages as custom properties.
        :paramtype property_columns: list[str]
        :keyword system_property_columns: The system properties associated with the Service Bus Topic
         Output. The following system properties are supported: ReplyToSessionId, ContentType, To,
         Subject, CorrelationId, TimeToLive, PartitionKey, SessionId, ScheduledEnqueueTime, MessageId,
         ReplyTo, Label, ScheduledEnqueueTimeUtc.
        :paramtype system_property_columns: dict[str, str]
        """
        super(ServiceBusTopicOutputDataSourceProperties, self).__init__(**kwargs)
        self.topic_name = kwargs.get('topic_name', None)
        self.property_columns = kwargs.get('property_columns', None)
        self.system_property_columns = kwargs.get('system_property_columns', None)


class Sku(msrest.serialization.Model):
    """The properties that are associated with a SKU.

    :ivar name: The name of the SKU. Required on PUT (CreateOrReplace) requests. Possible values
     include: "Standard".
    :vartype name: str or ~stream_analytics_management_client.models.SkuName
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of the SKU. Required on PUT (CreateOrReplace) requests. Possible values
         include: "Standard".
        :paramtype name: str or ~stream_analytics_management_client.models.SkuName
        """
        super(Sku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class StartStreamingJobParameters(msrest.serialization.Model):
    """Parameters supplied to the Start Streaming Job operation.

    :ivar output_start_mode: Value may be JobStartTime, CustomTime, or LastOutputEventTime to
     indicate whether the starting point of the output event stream should start whenever the job is
     started, start at a custom user time stamp specified via the outputStartTime property, or start
     from the last event output time. Possible values include: "JobStartTime", "CustomTime",
     "LastOutputEventTime".
    :vartype output_start_mode: str or ~stream_analytics_management_client.models.OutputStartMode
    :ivar output_start_time: Value is either an ISO-8601 formatted time stamp that indicates the
     starting point of the output event stream, or null to indicate that the output event stream
     will start whenever the streaming job is started. This property must have a value if
     outputStartMode is set to CustomTime.
    :vartype output_start_time: ~datetime.datetime
    """

    _attribute_map = {
        'output_start_mode': {'key': 'outputStartMode', 'type': 'str'},
        'output_start_time': {'key': 'outputStartTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword output_start_mode: Value may be JobStartTime, CustomTime, or LastOutputEventTime to
         indicate whether the starting point of the output event stream should start whenever the job is
         started, start at a custom user time stamp specified via the outputStartTime property, or start
         from the last event output time. Possible values include: "JobStartTime", "CustomTime",
         "LastOutputEventTime".
        :paramtype output_start_mode: str or ~stream_analytics_management_client.models.OutputStartMode
        :keyword output_start_time: Value is either an ISO-8601 formatted time stamp that indicates the
         starting point of the output event stream, or null to indicate that the output event stream
         will start whenever the streaming job is started. This property must have a value if
         outputStartMode is set to CustomTime.
        :paramtype output_start_time: ~datetime.datetime
        """
        super(StartStreamingJobParameters, self).__init__(**kwargs)
        self.output_start_mode = kwargs.get('output_start_mode', None)
        self.output_start_time = kwargs.get('output_start_time', None)


class StreamingJob(TrackedResource):
    """A streaming job object, containing all information associated with the named streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    :ivar identity: Describes the system-assigned managed identity assigned to this job that can be
     used to authenticate with inputs and outputs.
    :vartype identity: ~stream_analytics_management_client.models.Identity
    :ivar sku: Describes the SKU of the streaming job. Required on PUT (CreateOrReplace) requests.
    :vartype sku: ~stream_analytics_management_client.models.Sku
    :ivar job_id: A GUID uniquely identifying the streaming job. This GUID is generated upon
     creation of the streaming job.
    :vartype job_id: str
    :ivar provisioning_state: Describes the provisioning status of the streaming job.
    :vartype provisioning_state: str
    :ivar job_state: Describes the state of the streaming job.
    :vartype job_state: str
    :ivar job_type: Describes the type of the job. Valid modes are ``Cloud`` and 'Edge'. Possible
     values include: "Cloud", "Edge".
    :vartype job_type: str or ~stream_analytics_management_client.models.JobType
    :ivar output_start_mode: This property should only be utilized when it is desired that the job
     be started immediately upon creation. Value may be JobStartTime, CustomTime, or
     LastOutputEventTime to indicate whether the starting point of the output event stream should
     start whenever the job is started, start at a custom user time stamp specified via the
     outputStartTime property, or start from the last event output time. Possible values include:
     "JobStartTime", "CustomTime", "LastOutputEventTime".
    :vartype output_start_mode: str or ~stream_analytics_management_client.models.OutputStartMode
    :ivar output_start_time: Value is either an ISO-8601 formatted time stamp that indicates the
     starting point of the output event stream, or null to indicate that the output event stream
     will start whenever the streaming job is started. This property must have a value if
     outputStartMode is set to CustomTime.
    :vartype output_start_time: ~datetime.datetime
    :ivar last_output_event_time: Value is either an ISO-8601 formatted timestamp indicating the
     last output event time of the streaming job or null indicating that output has not yet been
     produced. In case of multiple outputs or multiple streams, this shows the latest value in that
     set.
    :vartype last_output_event_time: ~datetime.datetime
    :ivar events_out_of_order_policy: Indicates the policy to apply to events that arrive out of
     order in the input event stream. Possible values include: "Adjust", "Drop".
    :vartype events_out_of_order_policy: str or
     ~stream_analytics_management_client.models.EventsOutOfOrderPolicy
    :ivar output_error_policy: Indicates the policy to apply to events that arrive at the output
     and cannot be written to the external storage due to being malformed (missing column values,
     column values of wrong type or size). Possible values include: "Stop", "Drop".
    :vartype output_error_policy: str or
     ~stream_analytics_management_client.models.OutputErrorPolicy
    :ivar events_out_of_order_max_delay_in_seconds: The maximum tolerable delay in seconds where
     out-of-order events can be adjusted to be back in order.
    :vartype events_out_of_order_max_delay_in_seconds: int
    :ivar events_late_arrival_max_delay_in_seconds: The maximum tolerable delay in seconds where
     events arriving late could be included.  Supported range is -1 to 1814399 (20.23:59:59 days)
     and -1 is used to specify wait indefinitely. If the property is absent, it is interpreted to
     have a value of -1.
    :vartype events_late_arrival_max_delay_in_seconds: int
    :ivar data_locale: The data locale of the stream analytics job. Value should be the name of a
     supported .NET Culture from the set
     https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx.
     Defaults to 'en-US' if none specified.
    :vartype data_locale: str
    :ivar compatibility_level: Controls certain runtime behaviors of the streaming job. Possible
     values include: "1.0", "1.2".
    :vartype compatibility_level: str or
     ~stream_analytics_management_client.models.CompatibilityLevel
    :ivar created_date: Value is an ISO-8601 formatted UTC timestamp indicating when the streaming
     job was created.
    :vartype created_date: ~datetime.datetime
    :ivar inputs: A list of one or more inputs to the streaming job. The name property for each
     input is required when specifying this property in a PUT request. This property cannot be
     modify via a PATCH operation. You must use the PATCH API available for the individual input.
    :vartype inputs: list[~stream_analytics_management_client.models.Input]
    :ivar transformation: Indicates the query and the number of streaming units to use for the
     streaming job. The name property of the transformation is required when specifying this
     property in a PUT request. This property cannot be modify via a PATCH operation. You must use
     the PATCH API available for the individual transformation.
    :vartype transformation: ~stream_analytics_management_client.models.Transformation
    :ivar outputs: A list of one or more outputs for the streaming job. The name property for each
     output is required when specifying this property in a PUT request. This property cannot be
     modify via a PATCH operation. You must use the PATCH API available for the individual output.
    :vartype outputs: list[~stream_analytics_management_client.models.Output]
    :ivar functions: A list of one or more functions for the streaming job. The name property for
     each function is required when specifying this property in a PUT request. This property cannot
     be modify via a PATCH operation. You must use the PATCH API available for the individual
     transformation.
    :vartype functions: list[~stream_analytics_management_client.models.Function]
    :ivar etag: The current entity tag for the streaming job. This is an opaque string. You can use
     it to detect whether the resource has changed between requests. You can also use it in the
     If-Match or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    :ivar job_storage_account: The properties that are associated with an Azure Storage account
     with MSI.
    :vartype job_storage_account: ~stream_analytics_management_client.models.JobStorageAccount
    :ivar content_storage_policy: Valid values are JobStorageAccount and SystemAccount. If set to
     JobStorageAccount, this requires the user to also specify jobStorageAccount property. .
     Possible values include: "SystemAccount", "JobStorageAccount".
    :vartype content_storage_policy: str or
     ~stream_analytics_management_client.models.ContentStoragePolicy
    :ivar cluster: The cluster which streaming jobs will run on.
    :vartype cluster: ~stream_analytics_management_client.models.ClusterInfo
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'job_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'job_state': {'readonly': True},
        'last_output_event_time': {'readonly': True},
        'created_date': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
        'job_id': {'key': 'properties.jobId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'job_state': {'key': 'properties.jobState', 'type': 'str'},
        'job_type': {'key': 'properties.jobType', 'type': 'str'},
        'output_start_mode': {'key': 'properties.outputStartMode', 'type': 'str'},
        'output_start_time': {'key': 'properties.outputStartTime', 'type': 'iso-8601'},
        'last_output_event_time': {'key': 'properties.lastOutputEventTime', 'type': 'iso-8601'},
        'events_out_of_order_policy': {'key': 'properties.eventsOutOfOrderPolicy', 'type': 'str'},
        'output_error_policy': {'key': 'properties.outputErrorPolicy', 'type': 'str'},
        'events_out_of_order_max_delay_in_seconds': {'key': 'properties.eventsOutOfOrderMaxDelayInSeconds', 'type': 'int'},
        'events_late_arrival_max_delay_in_seconds': {'key': 'properties.eventsLateArrivalMaxDelayInSeconds', 'type': 'int'},
        'data_locale': {'key': 'properties.dataLocale', 'type': 'str'},
        'compatibility_level': {'key': 'properties.compatibilityLevel', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'inputs': {'key': 'properties.inputs', 'type': '[Input]'},
        'transformation': {'key': 'properties.transformation', 'type': 'Transformation'},
        'outputs': {'key': 'properties.outputs', 'type': '[Output]'},
        'functions': {'key': 'properties.functions', 'type': '[Function]'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
        'job_storage_account': {'key': 'properties.jobStorageAccount', 'type': 'JobStorageAccount'},
        'content_storage_policy': {'key': 'properties.contentStoragePolicy', 'type': 'str'},
        'cluster': {'key': 'properties.cluster', 'type': 'ClusterInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives.
        :paramtype location: str
        :keyword identity: Describes the system-assigned managed identity assigned to this job that can
         be used to authenticate with inputs and outputs.
        :paramtype identity: ~stream_analytics_management_client.models.Identity
        :keyword sku: Describes the SKU of the streaming job. Required on PUT (CreateOrReplace)
         requests.
        :paramtype sku: ~stream_analytics_management_client.models.Sku
        :keyword job_type: Describes the type of the job. Valid modes are ``Cloud`` and 'Edge'.
         Possible values include: "Cloud", "Edge".
        :paramtype job_type: str or ~stream_analytics_management_client.models.JobType
        :keyword output_start_mode: This property should only be utilized when it is desired that the
         job be started immediately upon creation. Value may be JobStartTime, CustomTime, or
         LastOutputEventTime to indicate whether the starting point of the output event stream should
         start whenever the job is started, start at a custom user time stamp specified via the
         outputStartTime property, or start from the last event output time. Possible values include:
         "JobStartTime", "CustomTime", "LastOutputEventTime".
        :paramtype output_start_mode: str or ~stream_analytics_management_client.models.OutputStartMode
        :keyword output_start_time: Value is either an ISO-8601 formatted time stamp that indicates the
         starting point of the output event stream, or null to indicate that the output event stream
         will start whenever the streaming job is started. This property must have a value if
         outputStartMode is set to CustomTime.
        :paramtype output_start_time: ~datetime.datetime
        :keyword events_out_of_order_policy: Indicates the policy to apply to events that arrive out of
         order in the input event stream. Possible values include: "Adjust", "Drop".
        :paramtype events_out_of_order_policy: str or
         ~stream_analytics_management_client.models.EventsOutOfOrderPolicy
        :keyword output_error_policy: Indicates the policy to apply to events that arrive at the output
         and cannot be written to the external storage due to being malformed (missing column values,
         column values of wrong type or size). Possible values include: "Stop", "Drop".
        :paramtype output_error_policy: str or
         ~stream_analytics_management_client.models.OutputErrorPolicy
        :keyword events_out_of_order_max_delay_in_seconds: The maximum tolerable delay in seconds where
         out-of-order events can be adjusted to be back in order.
        :paramtype events_out_of_order_max_delay_in_seconds: int
        :keyword events_late_arrival_max_delay_in_seconds: The maximum tolerable delay in seconds where
         events arriving late could be included.  Supported range is -1 to 1814399 (20.23:59:59 days)
         and -1 is used to specify wait indefinitely. If the property is absent, it is interpreted to
         have a value of -1.
        :paramtype events_late_arrival_max_delay_in_seconds: int
        :keyword data_locale: The data locale of the stream analytics job. Value should be the name of
         a supported .NET Culture from the set
         https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx.
         Defaults to 'en-US' if none specified.
        :paramtype data_locale: str
        :keyword compatibility_level: Controls certain runtime behaviors of the streaming job. Possible
         values include: "1.0", "1.2".
        :paramtype compatibility_level: str or
         ~stream_analytics_management_client.models.CompatibilityLevel
        :keyword inputs: A list of one or more inputs to the streaming job. The name property for each
         input is required when specifying this property in a PUT request. This property cannot be
         modify via a PATCH operation. You must use the PATCH API available for the individual input.
        :paramtype inputs: list[~stream_analytics_management_client.models.Input]
        :keyword transformation: Indicates the query and the number of streaming units to use for the
         streaming job. The name property of the transformation is required when specifying this
         property in a PUT request. This property cannot be modify via a PATCH operation. You must use
         the PATCH API available for the individual transformation.
        :paramtype transformation: ~stream_analytics_management_client.models.Transformation
        :keyword outputs: A list of one or more outputs for the streaming job. The name property for
         each output is required when specifying this property in a PUT request. This property cannot be
         modify via a PATCH operation. You must use the PATCH API available for the individual output.
        :paramtype outputs: list[~stream_analytics_management_client.models.Output]
        :keyword functions: A list of one or more functions for the streaming job. The name property
         for each function is required when specifying this property in a PUT request. This property
         cannot be modify via a PATCH operation. You must use the PATCH API available for the individual
         transformation.
        :paramtype functions: list[~stream_analytics_management_client.models.Function]
        :keyword job_storage_account: The properties that are associated with an Azure Storage account
         with MSI.
        :paramtype job_storage_account: ~stream_analytics_management_client.models.JobStorageAccount
        :keyword content_storage_policy: Valid values are JobStorageAccount and SystemAccount. If set
         to JobStorageAccount, this requires the user to also specify jobStorageAccount property. .
         Possible values include: "SystemAccount", "JobStorageAccount".
        :paramtype content_storage_policy: str or
         ~stream_analytics_management_client.models.ContentStoragePolicy
        :keyword cluster: The cluster which streaming jobs will run on.
        :paramtype cluster: ~stream_analytics_management_client.models.ClusterInfo
        """
        super(StreamingJob, self).__init__(**kwargs)
        self.identity = kwargs.get('identity', None)
        self.sku = kwargs.get('sku', None)
        self.job_id = None
        self.provisioning_state = None
        self.job_state = None
        self.job_type = kwargs.get('job_type', None)
        self.output_start_mode = kwargs.get('output_start_mode', None)
        self.output_start_time = kwargs.get('output_start_time', None)
        self.last_output_event_time = None
        self.events_out_of_order_policy = kwargs.get('events_out_of_order_policy', None)
        self.output_error_policy = kwargs.get('output_error_policy', None)
        self.events_out_of_order_max_delay_in_seconds = kwargs.get('events_out_of_order_max_delay_in_seconds', None)
        self.events_late_arrival_max_delay_in_seconds = kwargs.get('events_late_arrival_max_delay_in_seconds', None)
        self.data_locale = kwargs.get('data_locale', None)
        self.compatibility_level = kwargs.get('compatibility_level', None)
        self.created_date = None
        self.inputs = kwargs.get('inputs', None)
        self.transformation = kwargs.get('transformation', None)
        self.outputs = kwargs.get('outputs', None)
        self.functions = kwargs.get('functions', None)
        self.etag = None
        self.job_storage_account = kwargs.get('job_storage_account', None)
        self.content_storage_policy = kwargs.get('content_storage_policy', None)
        self.cluster = kwargs.get('cluster', None)


class StreamingJobListResult(msrest.serialization.Model):
    """Object containing a list of streaming jobs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: A list of streaming jobs. Populated by a 'List' operation.
    :vartype value: list[~stream_analytics_management_client.models.StreamingJob]
    :ivar next_link: The link (url) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[StreamingJob]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(StreamingJobListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class StreamInputProperties(InputProperties):
    """The properties that are associated with an input containing stream data.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar type: Required. Indicates whether the input is a source of reference data or stream data.
     Required on PUT (CreateOrReplace) requests.Constant filled by server.
    :vartype type: str
    :ivar serialization: Describes how data from an input is serialized or how data is serialized
     when written to an output. Required on PUT (CreateOrReplace) requests.
    :vartype serialization: ~stream_analytics_management_client.models.Serialization
    :ivar diagnostics: Describes conditions applicable to the Input, Output, or the job overall,
     that warrant customer attention.
    :vartype diagnostics: ~stream_analytics_management_client.models.Diagnostics
    :ivar etag: The current entity tag for the input. This is an opaque string. You can use it to
     detect whether the resource has changed between requests. You can also use it in the If-Match
     or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    :ivar compression: Describes how input data is compressed.
    :vartype compression: ~stream_analytics_management_client.models.Compression
    :ivar partition_key: partitionKey Describes a key in the input data which is used for
     partitioning the input data.
    :vartype partition_key: str
    :ivar datasource: Describes an input data source that contains stream data. Required on PUT
     (CreateOrReplace) requests.
    :vartype datasource: ~stream_analytics_management_client.models.StreamInputDataSource
    """

    _validation = {
        'type': {'required': True},
        'diagnostics': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'serialization': {'key': 'serialization', 'type': 'Serialization'},
        'diagnostics': {'key': 'diagnostics', 'type': 'Diagnostics'},
        'etag': {'key': 'etag', 'type': 'str'},
        'compression': {'key': 'compression', 'type': 'Compression'},
        'partition_key': {'key': 'partitionKey', 'type': 'str'},
        'datasource': {'key': 'datasource', 'type': 'StreamInputDataSource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword serialization: Describes how data from an input is serialized or how data is
         serialized when written to an output. Required on PUT (CreateOrReplace) requests.
        :paramtype serialization: ~stream_analytics_management_client.models.Serialization
        :keyword compression: Describes how input data is compressed.
        :paramtype compression: ~stream_analytics_management_client.models.Compression
        :keyword partition_key: partitionKey Describes a key in the input data which is used for
         partitioning the input data.
        :paramtype partition_key: str
        :keyword datasource: Describes an input data source that contains stream data. Required on PUT
         (CreateOrReplace) requests.
        :paramtype datasource: ~stream_analytics_management_client.models.StreamInputDataSource
        """
        super(StreamInputProperties, self).__init__(**kwargs)
        self.type = 'Stream'  # type: str
        self.datasource = kwargs.get('datasource', None)


class SubscriptionQuota(SubResource):
    """Describes the current quota for the subscription.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar max_count: The max permitted usage of this resource.
    :vartype max_count: int
    :ivar current_count: The current usage of this resource.
    :vartype current_count: int
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'max_count': {'readonly': True},
        'current_count': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'max_count': {'key': 'properties.maxCount', 'type': 'int'},
        'current_count': {'key': 'properties.currentCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Resource name.
        :paramtype name: str
        """
        super(SubscriptionQuota, self).__init__(**kwargs)
        self.max_count = None
        self.current_count = None


class SubscriptionQuotasListResult(msrest.serialization.Model):
    """Result of the GetQuotas operation. It contains a list of quotas for the subscription in a particular region.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of quotas for the subscription in a particular region.
    :vartype value: list[~stream_analytics_management_client.models.SubscriptionQuota]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SubscriptionQuota]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(SubscriptionQuotasListResult, self).__init__(**kwargs)
        self.value = None


class Transformation(SubResource):
    """A transformation object, containing all information associated with the named transformation. All transformations are contained under a streaming job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar streaming_units: Specifies the number of streaming units that the streaming job uses.
    :vartype streaming_units: int
    :ivar valid_streaming_units: Specifies the valid streaming units a streaming job can scale to.
    :vartype valid_streaming_units: list[int]
    :ivar query: Specifies the query that will be run in the streaming job. You can learn more
     about the Stream Analytics Query Language (SAQL) here:
     https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
    :vartype query: str
    :ivar etag: The current entity tag for the transformation. This is an opaque string. You can
     use it to detect whether the resource has changed between requests. You can also use it in the
     If-Match or If-None-Match headers for write operations for optimistic concurrency.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'streaming_units': {'key': 'properties.streamingUnits', 'type': 'int'},
        'valid_streaming_units': {'key': 'properties.validStreamingUnits', 'type': '[int]'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Resource name.
        :paramtype name: str
        :keyword streaming_units: Specifies the number of streaming units that the streaming job uses.
        :paramtype streaming_units: int
        :keyword valid_streaming_units: Specifies the valid streaming units a streaming job can scale
         to.
        :paramtype valid_streaming_units: list[int]
        :keyword query: Specifies the query that will be run in the streaming job. You can learn more
         about the Stream Analytics Query Language (SAQL) here:
         https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.
        :paramtype query: str
        """
        super(Transformation, self).__init__(**kwargs)
        self.streaming_units = kwargs.get('streaming_units', None)
        self.valid_streaming_units = kwargs.get('valid_streaming_units', None)
        self.query = kwargs.get('query', None)
        self.etag = None
