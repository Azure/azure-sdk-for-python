# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, Optional, TypeVar

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._vendor import MixinABC, _format_url_section
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_liveness_check_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "text/plain")

    # Construct URL
    _url = "/api/legal/v1/_ah/liveness_check"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_readiness_check_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "text/plain")

    # Construct URL
    _url = "/api/legal/v1/_ah/readiness_check"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_info_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/legal/v1/info"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_legal_tags_using_get_request(
    *,
    data_partition_id: str,
    valid: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/legal/v1/legaltags"

    # Construct parameters
    if valid is not None:
        _params['valid'] = _SERIALIZER.query("valid", valid, 'bool')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_update_legal_tag_using_put_request(
    *,
    data_partition_id: str,
    json: Optional[JSON] = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/legal/v1/legaltags"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_create_legal_tag_using_post_request(
    *,
    data_partition_id: str,
    json: Optional[JSON] = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/legal/v1/legaltags"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_get_legal_tag_using_get_request(
    name: str,
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/legal/v1/legaltags/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_legal_tag_using_delete_request(
    name: str,
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "text/plain")

    # Construct URL
    _url = "/api/legal/v1/legaltags/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_legal_tags_using_post_request(
    *,
    data_partition_id: str,
    json: Optional[JSON] = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/legal/v1/legaltags:batchRetrieve"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_get_legal_tag_properties_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/legal/v1/legaltags:properties"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_validate_legal_tags_using_post_request(
    *,
    data_partition_id: str,
    json: Optional[JSON] = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/legal/v1/legaltags:validate"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_check_legal_tag_status_changes_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "text/plain")

    # Construct URL
    _url = "/api/legal/v1/jobs/updateLegalTagStatus"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )

class ApiDocumentationOperationsMixin(MixinABC):

    @distributed_trace
    def liveness_check_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[str]:
        """livenessCheckUsingGET.

        livenessCheck.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_liveness_check_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def readiness_check_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[str]:
        """readinessCheckUsingGET.

        readinessCheck.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_readiness_check_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def info_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """infoUsingGET.

        info.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "artifactId": "str",  # Optional.
                    "branch": "str",  # Optional.
                    "buildTime": "str",  # Optional.
                    "commitId": "str",  # Optional.
                    "commitMessage": "str",  # Optional.
                    "connectedOuterServices": [
                        {
                            "name": "str",  # Optional.
                            "version": "str"  # Optional.
                        }
                    ],
                    "groupId": "str",  # Optional.
                    "version": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_info_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def list_legal_tags_using_get(
        self,
        *,
        data_partition_id: str,
        valid: Optional[bool] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """listLegalTagsUsingGET.

        listLegalTags.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword valid: valid. Default value is None.
        :paramtype valid: bool
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "legalTags": [
                        {
                            "description": "str",  # Optional.
                            "name": "str",  # Optional.
                            "properties": {
                                "contractId": "str",  # Optional. Properties.
                                "countryOfOrigin": [
                                    "str"  # Optional. Properties.
                                ],
                                "dataType": "str",  # Optional. Properties.
                                "expirationDate": "str",  # Optional. Properties.
                                "exportClassification": "str",  # Optional.
                                  Properties.
                                "originator": "str",  # Optional. Properties.
                                "personalData": "str",  # Optional. Properties.
                                "securityClassification": "str"  # Optional.
                                  Properties.
                            }
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_list_legal_tags_using_get_request(
            data_partition_id=data_partition_id,
            valid=valid,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def update_legal_tag_using_put(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """updateLegalTagUsingPUT.

        updateLegalTag.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "contractId": "str",  # Optional.
                    "description": "str",  # Optional.
                    "expirationDate": "2020-02-20",  # Optional.
                    "name": "str"  # Optional.
                }

                # response body for status code(s): 200
                response.json() == {
                    "description": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "contractId": "str",  # Optional. Properties.
                        "countryOfOrigin": [
                            "str"  # Optional. Properties.
                        ],
                        "dataType": "str",  # Optional. Properties.
                        "expirationDate": "str",  # Optional. Properties.
                        "exportClassification": "str",  # Optional. Properties.
                        "originator": "str",  # Optional. Properties.
                        "personalData": "str",  # Optional. Properties.
                        "securityClassification": "str"  # Optional. Properties.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_update_legal_tag_using_put_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def create_legal_tag_using_post(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """createLegalTagUsingPOST.

        createLegalTag.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "description": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "contractId": "str",  # Optional. Properties.
                        "countryOfOrigin": [
                            "str"  # Optional. Properties.
                        ],
                        "dataType": "str",  # Optional. Properties.
                        "expirationDate": "str",  # Optional. Properties.
                        "exportClassification": "str",  # Optional. Properties.
                        "originator": "str",  # Optional. Properties.
                        "personalData": "str",  # Optional. Properties.
                        "securityClassification": "str"  # Optional. Properties.
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "description": "str",  # Optional.
                    "name": "str",  # Optional.
                    "properties": {
                        "contractId": "str",  # Optional. Properties.
                        "countryOfOrigin": [
                            "str"  # Optional. Properties.
                        ],
                        "dataType": "str",  # Optional. Properties.
                        "expirationDate": "str",  # Optional. Properties.
                        "exportClassification": "str",  # Optional. Properties.
                        "originator": "str",  # Optional. Properties.
                        "personalData": "str",  # Optional. Properties.
                        "securityClassification": "str"  # Optional. Properties.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_create_legal_tag_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def get_legal_tag_using_get(
        self,
        name: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getLegalTagUsingGET.

        getLegalTag.

        :param name: name.
        :type name: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "body": {},  # Optional. Any object.
                    "statusCode": "str",  # Optional. StatusCode. Known values are: "ACCEPTED",
                      "ALREADY_REPORTED", "BAD_GATEWAY", "BAD_REQUEST", "BANDWIDTH_LIMIT_EXCEEDED",
                      "CHECKPOINT", "CONFLICT", "CONTINUE", "CREATED", "DESTINATION_LOCKED",
                      "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN", "FOUND",
                      "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED",
                      "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE",
                      "INTERNAL_SERVER_ERROR", "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED",
                      "LOOP_DETECTED", "METHOD_FAILURE", "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY",
                      "MOVED_TEMPORARILY", "MULTIPLE_CHOICES", "MULTI_STATUS",
                      "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION",
                      "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED",
                      "NO_CONTENT", "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED",
                      "PERMANENT_REDIRECT", "PRECONDITION_FAILED", "PRECONDITION_REQUIRED",
                      "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED", "REQUESTED_RANGE_NOT_SATISFIABLE",
                      "REQUEST_ENTITY_TOO_LARGE", "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT",
                      "REQUEST_URI_TOO_LONG", "RESET_CONTENT", "SEE_OTHER", "SERVICE_UNAVAILABLE",
                      "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY", "TOO_MANY_REQUESTS",
                      "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY",
                      "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY",
                      "VARIANT_ALSO_NEGOTIATES".
                    "statusCodeValue": 0  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_legal_tag_using_get_request(
            name=name,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def delete_legal_tag_using_delete(
        self,
        name: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[str]:
        """deleteLegalTagUsingDELETE.

        deleteLegalTag.

        :param name: name.
        :type name: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: str. Known values are: "ACCEPTED", "ALREADY_REPORTED", "BAD_GATEWAY", "BAD_REQUEST",
         "BANDWIDTH_LIMIT_EXCEEDED", "CHECKPOINT", "CONFLICT", "CONTINUE", "CREATED",
         "DESTINATION_LOCKED", "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN", "FOUND",
         "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED",
         "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE", "INTERNAL_SERVER_ERROR",
         "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED", "LOOP_DETECTED", "METHOD_FAILURE",
         "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY", "MOVED_TEMPORARILY", "MULTIPLE_CHOICES",
         "MULTI_STATUS", "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION",
         "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED", "NO_CONTENT",
         "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED", "PERMANENT_REDIRECT",
         "PRECONDITION_FAILED", "PRECONDITION_REQUIRED", "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED",
         "REQUESTED_RANGE_NOT_SATISFIABLE", "REQUEST_ENTITY_TOO_LARGE",
         "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT", "REQUEST_URI_TOO_LONG", "RESET_CONTENT",
         "SEE_OTHER", "SERVICE_UNAVAILABLE", "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY",
         "TOO_MANY_REQUESTS", "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY",
         "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY", and
         "VARIANT_ALSO_NEGOTIATES".
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == "str"  # Optional.
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_delete_legal_tag_using_delete_request(
            name=name,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def get_legal_tags_using_post(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getLegalTagsUsingPOST.

        getLegalTags.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "names": [
                        "str"  # Required.
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "legalTags": [
                        {
                            "description": "str",  # Optional.
                            "name": "str",  # Optional.
                            "properties": {
                                "contractId": "str",  # Optional. Properties.
                                "countryOfOrigin": [
                                    "str"  # Optional. Properties.
                                ],
                                "dataType": "str",  # Optional. Properties.
                                "expirationDate": "str",  # Optional. Properties.
                                "exportClassification": "str",  # Optional.
                                  Properties.
                                "originator": "str",  # Optional. Properties.
                                "personalData": "str",  # Optional. Properties.
                                "securityClassification": "str"  # Optional.
                                  Properties.
                            }
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_get_legal_tags_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def get_legal_tag_properties_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getLegalTagPropertiesUsingGET.

        getLegalTagProperties.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "countriesOfOrigin": {
                        "str": "str"  # Optional. Dictionary of :code:`<string>`.
                    },
                    "dataTypes": [
                        "str"  # Optional.
                    ],
                    "exportClassificationControlNumbers": [
                        "str"  # Optional.
                    ],
                    "otherRelevantDataCountries": {
                        "str": "str"  # Optional. Dictionary of :code:`<string>`.
                    },
                    "personalDataTypes": [
                        "str"  # Optional.
                    ],
                    "securityClassifications": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_legal_tag_properties_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def validate_legal_tags_using_post(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """validateLegalTagsUsingPOST.

        validateLegalTags.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "names": [
                        "str"  # Required.
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "invalidLegalTags": [
                        {
                            "name": "str",  # Optional.
                            "reason": "str"  # Optional.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_validate_legal_tags_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def check_legal_tag_status_changes_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[str]:
        """checkLegalTagStatusChangesUsingGET.

        checkLegalTagStatusChanges.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: str. Known values are: "ACCEPTED", "ALREADY_REPORTED", "BAD_GATEWAY", "BAD_REQUEST",
         "BANDWIDTH_LIMIT_EXCEEDED", "CHECKPOINT", "CONFLICT", "CONTINUE", "CREATED",
         "DESTINATION_LOCKED", "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN", "FOUND",
         "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED",
         "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE", "INTERNAL_SERVER_ERROR",
         "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED", "LOOP_DETECTED", "METHOD_FAILURE",
         "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY", "MOVED_TEMPORARILY", "MULTIPLE_CHOICES",
         "MULTI_STATUS", "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION",
         "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED", "NO_CONTENT",
         "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED", "PERMANENT_REDIRECT",
         "PRECONDITION_FAILED", "PRECONDITION_REQUIRED", "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED",
         "REQUESTED_RANGE_NOT_SATISFIABLE", "REQUEST_ENTITY_TOO_LARGE",
         "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT", "REQUEST_URI_TOO_LONG", "RESET_CONTENT",
         "SEE_OTHER", "SERVICE_UNAVAILABLE", "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY",
         "TOO_MANY_REQUESTS", "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY",
         "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY", and
         "VARIANT_ALSO_NEGOTIATES".
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == "str"  # Optional.
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_check_legal_tag_status_changes_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


