# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, List, Optional, TypeVar

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._vendor import MixinABC, _format_url_section
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_add_member_using_post_request(
    group_email: str,
    *,
    data_partition_id: str,
    json: Any = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/entitlements/v2/groups/{group_email}/members"
    path_format_arguments = {
        "group_email": _SERIALIZER.url("group_email", group_email, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_list_group_members_using_get_request(
    group_email: str,
    *,
    data_partition_id: str,
    role: Optional[str] = None,
    include_type: Optional[bool] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/entitlements/v2/groups/{group_email}/members"
    path_format_arguments = {
        "group_email": _SERIALIZER.url("group_email", group_email, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if role is not None:
        _params['role'] = _SERIALIZER.query("role", role, 'str')
    if include_type is not None:
        _params['includeType'] = _SERIALIZER.query("include_type", include_type, 'bool')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_create_group_using_post_request(
    *,
    data_partition_id: str,
    json: Any = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/entitlements/v2/groups"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_list_groups_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/entitlements/v2/groups"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_group_using_delete_request(
    group_email: str,
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/api/entitlements/v2/groups/{group_email}"
    path_format_arguments = {
        "group_email": _SERIALIZER.url("group_email", group_email, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_group_using_patch_request(
    group_email: str,
    *,
    data_partition_id: str,
    json: Optional[List[Any]] = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/entitlements/v2/groups/{group_email}"
    path_format_arguments = {
        "group_email": _SERIALIZER.url("group_email", group_email, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=_url,
        headers=_headers,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_member_using_delete_request(
    member_email: str,
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/api/entitlements/v2/members/{member_email}"
    path_format_arguments = {
        "member_email": _SERIALIZER.url("member_email", member_email, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_liveness_check_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/api/entitlements/v2/_ah/liveness_check"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_readiness_check_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/api/entitlements/v2/_ah/readiness_check"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_info_using_get_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/entitlements/v2/info"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_initiate_tenant_using_post_request(
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/api/entitlements/v2/tenant-provisioning"

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_list_groups_on_behalf_of_using_get_request(
    member_email: str,
    *,
    data_partition_id: str,
    type: Optional[str] = None,
    appid: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/api/entitlements/v2/members/{member_email}/groups"
    path_format_arguments = {
        "member_email": _SERIALIZER.url("member_email", member_email, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if type is not None:
        _params['type'] = _SERIALIZER.query("type", type, 'str')
    if appid is not None:
        _params['appid'] = _SERIALIZER.query("appid", appid, 'str')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_delete_member_using_delete_one_request(
    group_email: str,
    member_email: str,
    *,
    data_partition_id: str,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "text/plain")

    # Construct URL
    _url = "/api/entitlements/v2/groups/{group_email}/members/{member_email}"
    path_format_arguments = {
        "group_email": _SERIALIZER.url("group_email", group_email, 'str'),
        "member_email": _SERIALIZER.url("member_email", member_email, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )

class ApiDocumentationOperationsMixin(MixinABC):

    @distributed_trace
    def add_member_using_post(
        self,
        group_email: str,
        body: Any = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[Any]:
        """addMemberUsingPOST.

        addMember.

        :param group_email: group_email.
        :type group_email: str
        :param body:  Default value is None.
        :type body: any
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: any
        :rtype: any or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_add_member_using_post_request(
            group_email=group_email,
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def list_group_members_using_get(
        self,
        group_email: str,
        *,
        data_partition_id: str,
        role: Optional[str] = None,
        include_type: Optional[bool] = None,
        **kwargs: Any
    ) -> Optional[Any]:
        """listGroupMembersUsingGET.

        listGroupMembers.

        :param group_email: group_email.
        :type group_email: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword role: role. Known values are: "MEMBER" or "OWNER". Default value is None.
        :paramtype role: str
        :keyword include_type: includeType. Default value is None.
        :paramtype include_type: bool
        :return: any
        :rtype: any or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]

        
        request = build_list_group_members_using_get_request(
            group_email=group_email,
            data_partition_id=data_partition_id,
            role=role,
            include_type=include_type,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def create_group_using_post(
        self,
        body: Any = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[Any]:
        """createGroupUsingPOST.

        createGroup.

        :param body:  Default value is None.
        :type body: any
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: any
        :rtype: any or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_create_group_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def list_groups_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[Any]:
        """listGroupsUsingGET.

        listGroups.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: any
        :rtype: any or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]

        
        request = build_list_groups_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def delete_group_using_delete(  # pylint: disable=inconsistent-return-statements
        self,
        group_email: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> None:
        """deleteGroupUsingDELETE.

        deleteGroup.

        :param group_email: group_email.
        :type group_email: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_group_using_delete_request(
            group_email=group_email,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def update_group_using_patch(
        self,
        group_email: str,
        body: Optional[List[Any]] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[Any]:
        """updateGroupUsingPATCH.

        updateGroup.

        :param group_email: group_email.
        :type group_email: str
        :param body:  Default value is None.
        :type body: list[any]
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: any
        :rtype: any or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    {}  # Optional.
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_update_group_using_patch_request(
            group_email=group_email,
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def delete_member_using_delete(  # pylint: disable=inconsistent-return-statements
        self,
        member_email: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> None:
        """deleteMemberUsingDELETE.

        deleteMember.

        :param member_email: member_email.
        :type member_email: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_member_using_delete_request(
            member_email=member_email,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def liveness_check_using_get(  # pylint: disable=inconsistent-return-statements
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> None:
        """livenessCheckUsingGET.

        livenessCheck.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_liveness_check_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def readiness_check_using_get(  # pylint: disable=inconsistent-return-statements
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> None:
        """readinessCheckUsingGET.

        readinessCheck.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_readiness_check_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def info_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """infoUsingGET.

        info.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "artifactId": "str",  # Optional. Maven artifact ID.
                    "branch": "str",  # Optional. Current git branch.
                    "buildTime": "str",  # Optional. Maven artifact build time.
                    "commitId": "str",  # Optional. Latest commit hash.
                    "commitMessage": "str",  # Optional. Latest commit message.
                    "connectedOuterServices": [
                        {
                            "name": "str",  # Optional. Connected outer service name.
                            "version": "str"  # Optional. Connected outer service
                              version.
                        }
                    ],
                    "groupId": "str",  # Optional. Maven artifact group ID.
                    "version": "str"  # Optional. Maven artifact version.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_info_using_get_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace
    def initiate_tenant_using_post(  # pylint: disable=inconsistent-return-statements
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> None:
        """initiateTenantUsingPOST.

        initiateTenant.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_initiate_tenant_using_post_request(
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace
    def list_groups_on_behalf_of_using_get(
        self,
        member_email: str,
        *,
        data_partition_id: str,
        type: Optional[str] = None,
        appid: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[Any]:
        """listGroupsOnBehalfOfUsingGET.

        listGroupsOnBehalfOf.

        :param member_email: member_email.
        :type member_email: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword type: type. Default value is None.
        :paramtype type: str
        :keyword appid: appid. Default value is None.
        :paramtype appid: str
        :return: any
        :rtype: any or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]

        
        request = build_list_groups_on_behalf_of_using_get_request(
            member_email=member_email,
            data_partition_id=data_partition_id,
            type=type,
            appid=appid,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


class DeleteMemberUsingDELETEOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.oep.oep.ApiDocumentation`'s
        :attr:`delete_member_using_delete` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def one(
        self,
        group_email: str,
        member_email: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[str]:
        """deleteMemberUsingDELETE_1.

        deleteMember.

        :param group_email: group_email.
        :type group_email: str
        :param member_email: member_email.
        :type member_email: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_delete_member_using_delete_one_request(
            group_email=group_email,
            member_email=member_email,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


