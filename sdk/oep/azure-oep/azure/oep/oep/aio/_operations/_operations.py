# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, List, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ..._operations._operations import build_bulk_delete_records_using_post_request, build_create_or_update_records_using_put_request, build_create_schema_using_post_request, build_delete_record_using_post_request, build_delete_schema_using_delete_request, build_fetch_records_using_post_request, build_get_all_records_using_get_request, build_get_kinds_using_get_request, build_get_latest_record_version_using_get_request, build_get_record_versions_using_get_request, build_get_records_using_post_request, build_get_schema_using_get_request, build_get_specific_record_version_using_get_request, build_health_message_using_get_request, build_info_using_get_request, build_legaltag_changed_using_post_request, build_purge_record_using_delete_request, build_update_records_metadata_using_patch_request
from .._vendor import MixinABC
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ApiDocumentationOperationsMixin(MixinABC):

    @distributed_trace_async
    async def health_message_using_get(
        self,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[str]:
        """healthMessageUsingGET.

        healthMessage.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_health_message_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def info_using_get(
        self,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """infoUsingGET.

        info.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "artifactId": "str",  # Optional.
                    "branch": "str",  # Optional.
                    "buildTime": "str",  # Optional.
                    "commitId": "str",  # Optional.
                    "commitMessage": "str",  # Optional.
                    "connectedOuterServices": [
                        {
                            "name": "str",  # Optional.
                            "version": "str"  # Optional.
                        }
                    ],
                    "groupId": "str",  # Optional.
                    "version": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_info_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def update_records_metadata_using_patch(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """updateRecordsMetadataUsingPATCH.

        updateRecordsMetadata.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "ops": [
                        {
                            "op": "str",  # Required. Bulk update record operation.
                            "path": "str",  # Required. Bulk update record path.
                            "value": [
                                "str"  # Required. Bulk update record path.
                            ]
                        }
                    ],
                    "query": {
                        "ids": [
                            "str"  # Required. List of record ids. Each record id must
                              follow the naming convention
                              {Data-Partition-Id}:{dataset-name}:{record-type}:{version}.
                        ]
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "lockedRecordIds": [
                        "str"  # Optional.
                    ],
                    "notFoundRecordIds": [
                        "str"  # Optional.
                    ],
                    "recordCount": 0,  # Optional.
                    "recordIds": [
                        "str"  # Optional.
                    ],
                    "unAuthorizedRecordIds": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_update_records_metadata_using_patch_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def create_or_update_records_using_put(
        self,
        body: Optional[List[JSON]] = None,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        skipdupes: Optional[bool] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """createOrUpdateRecordsUsingPUT.

        createOrUpdateRecords.

        :param body:  Default value is None.
        :type body: list[JSON]
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :keyword skipdupes: skipdupes. Default value is None.
        :paramtype skipdupes: bool
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    {
                        "acl": {
                            "owners": [
                                "str"  # Optional. Required. Acl.
                            ],
                            "viewers": [
                                "str"  # Optional. Required. Acl.
                            ]
                        },
                        "ancestry": {
                            "parents": [
                                "str"  # Optional. RecordAncestry.
                            ]
                        },
                        "data": {},  # Optional. Any object.
                        "id": "str",  # Required. Unique identifier in whole Data Ecosystem.
                          When not provided, Data Ecosystem will create and assign an id to the record.
                          Must follow the naming convention: {Data-Partition-Id}:{object-type}:{uuid}.
                        "kind": "str",  # Required. Record kind for which the schema
                          information is applied to.
                        "legal": {
                            "legaltags": [
                                "str"  # Optional. Legal.
                            ],
                            "otherRelevantDataCountries": [
                                "str"  # Optional. Legal.
                            ],
                            "status": "str"  # Optional. Status. Known values are:
                              "compliant", "incompliant".
                        },
                        "meta": [
                            {}  # Optional.
                        ],
                        "tags": {
                            "str": "str"  # Optional. A set of tags. Dictionary of
                              :code:`<string>`.
                        },
                        "version": 0.0  # Optional.
                    }
                ]

                # response body for status code(s): 201
                response.json() == {
                    "recordCount": 0,  # Optional.
                    "recordIdVersions": [
                        "str"  # Optional.
                    ],
                    "recordIds": [
                        "str"  # Optional.
                    ],
                    "skippedRecordIds": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_create_or_update_records_using_put_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            skipdupes=skipdupes,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def legaltag_changed_using_post(
        self,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """legaltagChangedUsingPOST.

        legaltagChanged.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "body": {},  # Optional. Any object.
                    "statusCode": "str",  # Optional. StatusCode. Known values are: "ACCEPTED",
                      "ALREADY_REPORTED", "BAD_GATEWAY", "BAD_REQUEST", "BANDWIDTH_LIMIT_EXCEEDED",
                      "CHECKPOINT", "CONFLICT", "CONTINUE", "CREATED", "DESTINATION_LOCKED",
                      "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN", "FOUND",
                      "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED",
                      "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE",
                      "INTERNAL_SERVER_ERROR", "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED",
                      "LOOP_DETECTED", "METHOD_FAILURE", "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY",
                      "MOVED_TEMPORARILY", "MULTIPLE_CHOICES", "MULTI_STATUS",
                      "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION",
                      "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED",
                      "NO_CONTENT", "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED",
                      "PERMANENT_REDIRECT", "PRECONDITION_FAILED", "PRECONDITION_REQUIRED",
                      "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED", "REQUESTED_RANGE_NOT_SATISFIABLE",
                      "REQUEST_ENTITY_TOO_LARGE", "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT",
                      "REQUEST_URI_TOO_LONG", "RESET_CONTENT", "SEE_OTHER", "SERVICE_UNAVAILABLE",
                      "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY", "TOO_MANY_REQUESTS",
                      "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY",
                      "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY",
                      "VARIANT_ALSO_NEGOTIATES".
                    "statusCodeValue": 0  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_legaltag_changed_using_post_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_kinds_using_get(
        self,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        cursor: Optional[str] = None,
        limit: Optional[int] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getKindsUsingGET.

        getKinds.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :keyword cursor: cursor. Default value is None.
        :paramtype cursor: str
        :keyword limit: limit. Default value is None.
        :paramtype limit: int
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "cursor": "str",  # Optional.
                    "results": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_kinds_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            cursor=cursor,
            limit=limit,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_all_records_using_get(
        self,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        kind: str,
        cursor: Optional[str] = None,
        limit: Optional[int] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getAllRecordsUsingGET.

        getAllRecords.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :keyword kind: kind.
        :paramtype kind: str
        :keyword cursor: cursor. Default value is None.
        :paramtype cursor: str
        :keyword limit: limit. Default value is None.
        :paramtype limit: int
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "cursor": "str",  # Optional.
                    "results": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_all_records_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            kind=kind,
            cursor=cursor,
            limit=limit,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_records_using_post(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getRecordsUsingPOST.

        getRecords.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "attributes": [
                        "str"  # Optional.
                    ],
                    "records": [
                        "str"  # Optional.
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "invalidRecords": [
                        "str"  # Optional.
                    ],
                    "records": [
                        {
                            "acl": {
                                "owners": [
                                    "str"  # Optional. Required. Acl.
                                ],
                                "viewers": [
                                    "str"  # Optional. Required. Acl.
                                ]
                            },
                            "ancestry": {
                                "parents": [
                                    "str"  # Optional. RecordAncestry.
                                ]
                            },
                            "data": {},  # Optional. Any object.
                            "id": "str",  # Required. Unique identifier in whole Data
                              Ecosystem. When not provided, Data Ecosystem will create and assign an id
                              to the record. Must follow the naming convention:
                              {Data-Partition-Id}:{object-type}:{uuid}.
                            "kind": "str",  # Required. Record kind for which the schema
                              information is applied to.
                            "legal": {
                                "legaltags": [
                                    "str"  # Optional. Legal.
                                ],
                                "otherRelevantDataCountries": [
                                    "str"  # Optional. Legal.
                                ],
                                "status": "str"  # Optional. Status. Known values
                                  are: "compliant", "incompliant".
                            },
                            "meta": [
                                {}  # Optional.
                            ],
                            "tags": {
                                "str": "str"  # Optional. A set of tags. Dictionary
                                  of :code:`<string>`.
                            },
                            "version": 0.0  # Optional.
                        }
                    ],
                    "retryRecords": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_get_records_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def fetch_records_using_post(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """fetchRecordsUsingPOST.

        fetchRecords.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "records": [
                        "str"  # Optional.
                    ]
                }

                # response body for status code(s): 200
                response.json() == {
                    "conversionStatuses": [
                        {
                            "errors": [
                                "str"  # Optional.
                            ],
                            "id": "str",  # Optional.
                            "status": "str"  # Optional.
                        }
                    ],
                    "notFound": [
                        "str"  # Optional.
                    ],
                    "records": [
                        "str"  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_fetch_records_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def bulk_delete_records_using_post(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[List[str]] = None,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> None:
        """bulkDeleteRecordsUsingPOST.

        bulkDeleteRecords.

        :param body:  Default value is None.
        :type body: list[str]
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_bulk_delete_records_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace_async
    async def get_record_versions_using_get(
        self,
        id: str,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getRecordVersionsUsingGET.

        getRecordVersions.

        :param id: id.
        :type id: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "recordId": "str",  # Optional.
                    "versions": [
                        0.0  # Optional.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_record_versions_using_get_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_latest_record_version_using_get(
        self,
        id: str,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        attribute: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[str]:
        """getLatestRecordVersionUsingGET.

        getLatestRecordVersion.

        :param id: id.
        :type id: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :keyword attribute: attribute. Default value is None.
        :paramtype attribute: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_get_latest_record_version_using_get_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            attribute=attribute,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def purge_record_using_delete(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> None:
        """purgeRecordUsingDELETE.

        purgeRecord.

        :param id: id.
        :type id: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_purge_record_using_delete_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace_async
    async def get_specific_record_version_using_get(
        self,
        id: str,
        version: int,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        attribute: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[str]:
        """getSpecificRecordVersionUsingGET.

        getSpecificRecordVersion.

        :param id: id.
        :type id: str
        :param version: version.
        :type version: long
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :keyword attribute: attribute. Default value is None.
        :paramtype attribute: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_get_specific_record_version_using_get_request(
            id=id,
            version=version,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            attribute=attribute,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def delete_record_using_post(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> None:
        """deleteRecordUsingPOST.

        deleteRecord.

        :param id: id.
        :type id: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_record_using_post_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace_async
    async def create_schema_using_post(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> None:
        """createSchemaUsingPOST.

        createSchema.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "ext": {},  # Optional. Any object.
                    "kind": "str",  # Required. Record kind for which the schema information is
                      applied to.
                    "schema": [
                        {
                            "ext": {},  # Optional. Any object.
                            "kind": "str",  # Optional.
                            "path": "str",  # Optional.
                            "properties": [
                                ...
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_create_schema_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace_async
    async def get_schema_using_get(
        self,
        kind: str,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getSchemaUsingGET.

        getSchema.

        :param kind: kind.
        :type kind: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "ext": {},  # Optional. Any object.
                    "kind": "str",  # Required. Record kind for which the schema information is
                      applied to.
                    "schema": [
                        {
                            "ext": {},  # Optional. Any object.
                            "kind": "str",  # Optional.
                            "path": "str",  # Optional.
                            "properties": [
                                ...
                            ]
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_schema_using_get_request(
            kind=kind,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def delete_schema_using_delete(  # pylint: disable=inconsistent-return-statements
        self,
        kind: str,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> None:
        """deleteSchemaUsingDELETE.

        deleteSchema.

        :param kind: kind.
        :type kind: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_schema_using_delete_request(
            kind=kind,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})


