# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ..._operations._operations import build_download_url_using_get_request, build_get_file_metadata_by_id_using_get_request, build_get_location_file_using_get_request, build_liveness_check_using_get_request, build_post_files_metadata_using_post_request
from .._vendor import MixinABC
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ApiDocumentationOperationsMixin(MixinABC):

    @distributed_trace_async
    async def download_url_using_get(
        self,
        id: str,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        expiry_time: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[JSON]:
        """downloadURLUsingGET.

        downloadURL.

        :param id: id.
        :type id: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :keyword expiry_time: expiryTime. Default value is None.
        :paramtype expiry_time: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "signedUrl": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_download_url_using_get_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            expiry_time=expiry_time,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_location_file_using_get(
        self,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getLocationFileUsingGET.

        getLocationFile.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "fileID": "str",  # Optional.
                    "location": {
                        "str": "str"  # Optional. Dictionary of :code:`<string>`.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_location_file_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def post_files_metadata_using_post(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """postFilesMetadataUsingPOST.

        postFilesMetadata.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "acl": {
                        "owners": [
                            "str"  # Optional. Required. Acl.
                        ],
                        "viewers": [
                            "str"  # Optional. Required. Acl.
                        ]
                    },
                    "ancestry": {
                        "parents": [
                            "str"  # Optional. Ancestry.
                        ]
                    },
                    "data": {
                        "checksum": "str",  # Optional. Required. FileData.
                        "datasetProperties": {
                            "fileSourceInfo": {
                                "checksum": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "checksumAlgorithm": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "encodingFormatTypeID": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "fileSize": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "fileSource": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "name": "str",  # Optional. Required. FileSourceInfo.
                                "preLoadFilePath": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "preloadFileCreateDate": "str",  # Optional.
                                  Required. FileSourceInfo.
                                "preloadFileCreateUser": "str",  # Optional.
                                  Required. FileSourceInfo.
                                "preloadFileModifyDate": "str",  # Optional.
                                  Required. FileSourceInfo.
                                "preloadFileModifyUser": "str"  # Optional. Required.
                                  FileSourceInfo.
                            }
                        },
                        "description": "str",  # Optional. Required. FileData.
                        "encodingFormatTypeID": "str",  # Optional. Required. FileData.
                        "endian": "str",  # Optional. Endian. Known values are: "BIG",
                          "LITTLE".
                        "existenceKind": "str",  # Optional. Required. FileData.
                        "extensionProperties": {},  # Optional. Any object.
                        "name": "str",  # Optional. Required. FileData.
                        "resourceCurationStatus": "str",  # Optional. Required. FileData.
                        "resourceHomeRegionID": "str",  # Optional. Required. FileData.
                        "resourceHostRegionIDs": [
                            "str"  # Optional. Required. FileData.
                        ],
                        "resourceLifecycleStatus": "str",  # Optional. Required. FileData.
                        "resourceSecurityClassification": "str",  # Optional. Required.
                          FileData.
                        "schemaFormatTypeID": "str",  # Optional. Required. FileData.
                        "source": "str",  # Optional. Required. FileData.
                        "totalSize": "str"  # Optional. Required. FileData.
                    },
                    "id": "str",  # Optional.
                    "kind": "str",  # Required.
                    "legal": {
                        "legaltags": [
                            "str"  # Optional. Required. Legal.
                        ],
                        "otherRelevantDataCountries": [
                            "str"  # Optional. Required. Legal.
                        ],
                        "status": "str"  # Optional. Status. Known values are: "compliant",
                          "incompliant".
                    },
                    "meta": [
                        {}  # Optional.
                    ],
                    "tags": {
                        "str": "str"  # Optional. A set of tags. Dictionary of
                          :code:`<string>`.
                    }
                }

                # response body for status code(s): 200
                response.json() == {
                    "id": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_post_files_metadata_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_file_metadata_by_id_using_get(
        self,
        id: str,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getFileMetadataByIdUsingGET.

        getFileMetadataById.

        :param id: id.
        :type id: str
        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "acl": {
                        "owners": [
                            "str"  # Optional. Required. Acl.
                        ],
                        "viewers": [
                            "str"  # Optional. Required. Acl.
                        ]
                    },
                    "ancestry": {
                        "parents": [
                            "str"  # Optional. Ancestry.
                        ]
                    },
                    "data": {
                        "checksum": "str",  # Optional. Required. FileData.
                        "datasetProperties": {
                            "fileSourceInfo": {
                                "checksum": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "checksumAlgorithm": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "encodingFormatTypeID": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "fileSize": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "fileSource": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "name": "str",  # Optional. Required. FileSourceInfo.
                                "preLoadFilePath": "str",  # Optional. Required.
                                  FileSourceInfo.
                                "preloadFileCreateDate": "str",  # Optional.
                                  Required. FileSourceInfo.
                                "preloadFileCreateUser": "str",  # Optional.
                                  Required. FileSourceInfo.
                                "preloadFileModifyDate": "str",  # Optional.
                                  Required. FileSourceInfo.
                                "preloadFileModifyUser": "str"  # Optional. Required.
                                  FileSourceInfo.
                            }
                        },
                        "description": "str",  # Optional. Required. FileData.
                        "encodingFormatTypeID": "str",  # Optional. Required. FileData.
                        "endian": "str",  # Optional. Endian. Known values are: "BIG",
                          "LITTLE".
                        "existenceKind": "str",  # Optional. Required. FileData.
                        "extensionProperties": {},  # Optional. Any object.
                        "name": "str",  # Optional. Required. FileData.
                        "resourceCurationStatus": "str",  # Optional. Required. FileData.
                        "resourceHomeRegionID": "str",  # Optional. Required. FileData.
                        "resourceHostRegionIDs": [
                            "str"  # Optional. Required. FileData.
                        ],
                        "resourceLifecycleStatus": "str",  # Optional. Required. FileData.
                        "resourceSecurityClassification": "str",  # Optional. Required.
                          FileData.
                        "schemaFormatTypeID": "str",  # Optional. Required. FileData.
                        "source": "str",  # Optional. Required. FileData.
                        "totalSize": "str"  # Optional. Required. FileData.
                    },
                    "id": "str",  # Optional.
                    "kind": "str",  # Required.
                    "legal": {
                        "legaltags": [
                            "str"  # Optional. Required. Legal.
                        ],
                        "otherRelevantDataCountries": [
                            "str"  # Optional. Required. Legal.
                        ],
                        "status": "str"  # Optional. Status. Known values are: "compliant",
                          "incompliant".
                    },
                    "meta": [
                        {}  # Optional.
                    ],
                    "tags": {
                        "str": "str"  # Optional. A set of tags. Dictionary of
                          :code:`<string>`.
                    },
                    "version": 0.0  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_file_metadata_by_id_using_get_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def liveness_check_using_get(
        self,
        *,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[str]:
        """livenessCheckUsingGET.

        livenessCheck.

        :keyword data_partition_id: tenant.
        :paramtype data_partition_id: str
        :keyword frame_of_reference: reference.
        :paramtype frame_of_reference: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_liveness_check_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


