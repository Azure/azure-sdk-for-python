# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, List, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ..._operations._operations import build_create_system_workflow_using_post_request, build_create_using_post_request, build_delete_system_workflow_by_id_using_delete_request, build_delete_workflow_by_id_using_delete_request, build_get_all_run_instances_using_get_request, build_get_all_workflows_for_tenant_using_get_request, build_get_workflow_by_name_using_get_request, build_get_workflow_run_by_id_using_get_request, build_info_using_get_request, build_liveness_check_using_get_request, build_readiness_check_using_get_request, build_trigger_workflow_using_post_request, build_update_workflow_run_using_put_request
from .._vendor import MixinABC
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any] # pylint: disable=unsubscriptable-object
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ApiDocumentationOperationsMixin(MixinABC):

    @distributed_trace_async
    async def liveness_check_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[str]:
        """livenessCheckUsingGET.

        livenessCheck.

        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_liveness_check_using_get_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def readiness_check_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[str]:
        """readinessCheckUsingGET.

        readinessCheck.

        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: str
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_readiness_check_using_get_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def info_using_get(
        self,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """infoUsingGET.

        info.

        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "artifactId": "str",  # Optional.
                    "branch": "str",  # Optional.
                    "buildTime": "str",  # Optional.
                    "commitId": "str",  # Optional.
                    "commitMessage": "str",  # Optional.
                    "connectedOuterServices": [
                        {
                            "name": "str",  # Optional.
                            "version": "str"  # Optional.
                        }
                    ],
                    "groupId": "str",  # Optional.
                    "version": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_info_using_get_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_all_workflows_for_tenant_using_get(
        self,
        *,
        data_partition_id: str,
        prefix: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[List[JSON]]:
        """getAllWorkflowsForTenantUsingGET.

        getAllWorkflowsForTenant.

        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :keyword prefix: prefix. Default value is None.
        :paramtype prefix: str
        :return: list of JSON object
        :rtype: list[JSON] or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "createdBy": "str",  # Optional.
                        "creationTimestamp": 0.0,  # Optional.
                        "description": "str",  # Optional.
                        "registrationInstructions": {},  # Optional. Any object.
                        "version": 0.0,  # Optional.
                        "workflowId": "str",  # Optional.
                        "workflowName": "str"  # Optional.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[List[JSON]]]

        
        request = build_get_all_workflows_for_tenant_using_get_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            prefix=prefix,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def create_using_post(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """createUsingPOST.

        create.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "description": "str",  # Optional.
                    "registrationInstructions": {},  # Optional. Any object.
                    "workflowName": "str"  # Optional.
                }

                # response body for status code(s): 200
                response.json() == {
                    "createdBy": "str",  # Optional.
                    "creationTimestamp": 0.0,  # Optional.
                    "description": "str",  # Optional.
                    "registrationInstructions": {},  # Optional. Any object.
                    "version": 0.0,  # Optional.
                    "workflowId": "str",  # Optional.
                    "workflowName": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_create_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_workflow_by_name_using_get(
        self,
        workflow_name: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getWorkflowByNameUsingGET.

        getWorkflowByName.

        :param workflow_name: workflow_name.
        :type workflow_name: str
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "createdBy": "str",  # Optional.
                    "creationTimestamp": 0.0,  # Optional.
                    "description": "str",  # Optional.
                    "registrationInstructions": {},  # Optional. Any object.
                    "version": 0.0,  # Optional.
                    "workflowId": "str",  # Optional.
                    "workflowName": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_workflow_by_name_using_get_request(
            content_type=content_type,
            workflow_name=workflow_name,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def delete_workflow_by_id_using_delete(  # pylint: disable=inconsistent-return-statements
        self,
        workflow_name: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> None:
        """deleteWorkflowByIdUsingDELETE.

        deleteWorkflowById.

        :param workflow_name: workflow_name.
        :type workflow_name: str
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_workflow_by_id_using_delete_request(
            content_type=content_type,
            workflow_name=workflow_name,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})



    @distributed_trace_async
    async def get_all_run_instances_using_get(
        self,
        workflow_name: str,
        *,
        data_partition_id: str,
        params: str,
        **kwargs: Any
    ) -> Optional[List[JSON]]:
        """getAllRunInstancesUsingGET.

        getAllRunInstances.

        :param workflow_name: workflow_name.
        :type workflow_name: str
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :keyword params: params.
        :paramtype params: str
        :return: list of JSON object
        :rtype: list[JSON] or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "endTimeStamp": 0.0,  # Optional.
                        "runId": "str",  # Optional.
                        "startTimeStamp": 0.0,  # Optional.
                        "status": "str",  # Optional. Status. Known values are: "FAILED",
                          "FINISHED", "RUNNING", "SUBMITTED", "SUCCESS".
                        "submittedBy": "str",  # Optional.
                        "workflowEngineExecutionDate": "str",  # Optional.
                        "workflowId": "str",  # Optional.
                        "workflowName": "str"  # Optional.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[List[JSON]]]

        
        request = build_get_all_run_instances_using_get_request(
            content_type=content_type,
            workflow_name=workflow_name,
            data_partition_id=data_partition_id,
            params=params,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def trigger_workflow_using_post(
        self,
        workflow_name: str,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """triggerWorkflowUsingPOST.

        triggerWorkflow.

        :param workflow_name: workflow_name.
        :type workflow_name: str
        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "executionContext": {},  # Optional. Any object.
                    "runId": "str"  # Optional.
                }

                # response body for status code(s): 200
                response.json() == {
                    "endTimeStamp": 0.0,  # Optional.
                    "runId": "str",  # Optional.
                    "startTimeStamp": 0.0,  # Optional.
                    "status": "str",  # Optional. Status. Known values are: "FAILED", "FINISHED",
                      "RUNNING", "SUBMITTED", "SUCCESS".
                    "submittedBy": "str",  # Optional.
                    "workflowId": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_trigger_workflow_using_post_request(
            workflow_name=workflow_name,
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def get_workflow_run_by_id_using_get(
        self,
        workflow_name: str,
        run_id: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """getWorkflowRunByIdUsingGET.

        getWorkflowRunById.

        :param workflow_name: workflow_name.
        :type workflow_name: str
        :param run_id: runId.
        :type run_id: str
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "endTimeStamp": 0.0,  # Optional.
                    "runId": "str",  # Optional.
                    "startTimeStamp": 0.0,  # Optional.
                    "status": "str",  # Optional. Status. Known values are: "FAILED", "FINISHED",
                      "RUNNING", "SUBMITTED", "SUCCESS".
                    "submittedBy": "str",  # Optional.
                    "workflowId": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        
        request = build_get_workflow_run_by_id_using_get_request(
            content_type=content_type,
            workflow_name=workflow_name,
            run_id=run_id,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def update_workflow_run_using_put(
        self,
        workflow_name: str,
        run_id: str,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """updateWorkflowRunUsingPUT.

        updateWorkflowRun.

        :param workflow_name: workflow_name.
        :type workflow_name: str
        :param run_id: runId.
        :type run_id: str
        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "status": "str"  # Optional. Status. Known values are: "FAILED", "FINISHED",
                      "RUNNING", "SUBMITTED", "SUCCESS".
                }

                # response body for status code(s): 200
                response.json() == {
                    "endTimeStamp": 0.0,  # Optional.
                    "runId": "str",  # Optional.
                    "startTimeStamp": 0.0,  # Optional.
                    "status": "str",  # Optional. Status. Known values are: "FAILED", "FINISHED",
                      "RUNNING", "SUBMITTED", "SUCCESS".
                    "submittedBy": "str",  # Optional.
                    "workflowId": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_update_workflow_run_using_put_request(
            workflow_name=workflow_name,
            run_id=run_id,
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def create_system_workflow_using_post(
        self,
        body: Optional[JSON] = None,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> Optional[JSON]:
        """createSystemWorkflowUsingPOST.

        createSystemWorkflow.

        :param body:  Default value is None.
        :type body: JSON
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: JSON object
        :rtype: JSON or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "description": "str",  # Optional.
                    "registrationInstructions": {},  # Optional. Any object.
                    "workflowName": "str"  # Optional.
                }

                # response body for status code(s): 200
                response.json() == {
                    "createdBy": "str",  # Optional.
                    "creationTimestamp": 0.0,  # Optional.
                    "description": "str",  # Optional.
                    "registrationInstructions": {},  # Optional. Any object.
                    "version": 0.0,  # Optional.
                    "workflowId": "str",  # Optional.
                    "workflowName": "str"  # Optional.
                }
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[JSON]]

        if body is not None:
            _json = body
        else:
            _json = None

        request = build_create_system_workflow_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized



    @distributed_trace_async
    async def delete_system_workflow_by_id_using_delete(  # pylint: disable=inconsistent-return-statements
        self,
        workflow_name: str,
        *,
        data_partition_id: str,
        **kwargs: Any
    ) -> None:
        """deleteSystemWorkflowByIdUsingDELETE.

        deleteSystemWorkflowById.

        :param workflow_name: workflow_name.
        :type workflow_name: str
        :keyword data_partition_id: Which tenant to use.
        :paramtype data_partition_id: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type')  # type: str
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_system_workflow_by_id_using_delete_request(
            content_type=content_type,
            workflow_name=workflow_name,
            data_partition_id=data_partition_id,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})


