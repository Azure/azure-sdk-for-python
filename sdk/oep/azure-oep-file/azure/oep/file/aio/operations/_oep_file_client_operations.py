# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._oep_file_client_operations import build_download_url_using_get_request, build_get_file_metadata_by_id_using_get_request, build_get_location_file_using_get_request, build_liveness_check_using_get_request, build_post_files_metadata_using_post_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class OepFileClientOperationsMixin:

    @distributed_trace_async
    async def download_url_using_get(
        self,
        data_partition_id: str,
        frame_of_reference: str,
        id: str,
        expiry_time: Optional[str] = None,
        **kwargs: Any
    ) -> Optional[_models.DownloadUrlResponse]:
        """downloadURLUsingGET.

        downloadURL.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param id: id.
        :type id: str
        :param expiry_time: expiryTime. Default value is None.
        :type expiry_time: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DownloadUrlResponse, or the result of cls(response)
        :rtype: ~azure.oep.file.models.DownloadUrlResponse or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.DownloadUrlResponse]]

        
        request = build_download_url_using_get_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            expiry_time=expiry_time,
            template_url=self.download_url_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('DownloadUrlResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    download_url_using_get.metadata = {'url': "/api/file/v2/files/{id}/downloadURL"}  # type: ignore


    @distributed_trace_async
    async def get_location_file_using_get(
        self,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[_models.LocationResponse]:
        """getLocationFileUsingGET.

        getLocationFile.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LocationResponse, or the result of cls(response)
        :rtype: ~azure.oep.file.models.LocationResponse or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.LocationResponse]]

        
        request = build_get_location_file_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.get_location_file_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('LocationResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_location_file_using_get.metadata = {'url': "/api/file/v2/files/uploadURL"}  # type: ignore


    @distributed_trace_async
    async def post_files_metadata_using_post(
        self,
        data_partition_id: str,
        frame_of_reference: str,
        body: Optional[_models.FileMetadata] = None,
        **kwargs: Any
    ) -> Optional[_models.FileMetadataResponse]:
        """postFilesMetadataUsingPOST.

        postFilesMetadata.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param body:  Default value is None.
        :type body: ~azure.oep.file.models.FileMetadata
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: FileMetadataResponse, or the result of cls(response)
        :rtype: ~azure.oep.file.models.FileMetadataResponse or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.FileMetadataResponse]]

        if body is not None:
            _json = self._serialize.body(body, 'FileMetadata')
        else:
            _json = None

        request = build_post_files_metadata_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            template_url=self.post_files_metadata_using_post.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('FileMetadataResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    post_files_metadata_using_post.metadata = {'url': "/api/file/v2/files/metadata"}  # type: ignore


    @distributed_trace_async
    async def get_file_metadata_by_id_using_get(
        self,
        data_partition_id: str,
        frame_of_reference: str,
        id: str,
        **kwargs: Any
    ) -> Optional[_models.RecordVersion]:
        """getFileMetadataByIdUsingGET.

        getFileMetadataById.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param id: id.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RecordVersion, or the result of cls(response)
        :rtype: ~azure.oep.file.models.RecordVersion or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.RecordVersion]]

        
        request = build_get_file_metadata_by_id_using_get_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.get_file_metadata_by_id_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('RecordVersion', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_file_metadata_by_id_using_get.metadata = {'url': "/api/file/v2/files/{id}/metadata"}  # type: ignore


    @distributed_trace_async
    async def liveness_check_using_get(
        self,
        data_partition_id: str,
        frame_of_reference: str,
        **kwargs: Any
    ) -> Optional[str]:
        """livenessCheckUsingGET.

        livenessCheck.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_liveness_check_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.liveness_check_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    liveness_check_using_get.metadata = {'url': "/api/file/v2/liveness_check"}  # type: ignore

