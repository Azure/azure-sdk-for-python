# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

try:
    from ._models_py3 import Acl
    from ._models_py3 import Ancestry
    from ._models_py3 import DatasetProperties
    from ._models_py3 import DownloadUrlResponse
    from ._models_py3 import FileData
    from ._models_py3 import FileMetadata
    from ._models_py3 import FileMetadataResponse
    from ._models_py3 import FileSourceInfo
    from ._models_py3 import Legal
    from ._models_py3 import LocationResponse
    from ._models_py3 import RecordVersion
except (SyntaxError, ImportError):
    from ._models import Acl  # type: ignore
    from ._models import Ancestry  # type: ignore
    from ._models import DatasetProperties  # type: ignore
    from ._models import DownloadUrlResponse  # type: ignore
    from ._models import FileData  # type: ignore
    from ._models import FileMetadata  # type: ignore
    from ._models import FileMetadataResponse  # type: ignore
    from ._models import FileSourceInfo  # type: ignore
    from ._models import Legal  # type: ignore
    from ._models import LocationResponse  # type: ignore
    from ._models import RecordVersion  # type: ignore

from ._oep_file_client_enums import (
    Endian,
    Status,
)
from ._patch import __all__ as _patch_all
from ._patch import *  # type: ignore # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk
__all__ = [
    'Acl',
    'Ancestry',
    'DatasetProperties',
    'DownloadUrlResponse',
    'FileData',
    'FileMetadata',
    'FileMetadataResponse',
    'FileSourceInfo',
    'Legal',
    'LocationResponse',
    'RecordVersion',
    'Endian',
    'Status',
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()