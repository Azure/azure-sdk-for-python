# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    import __init__ as _models


class Acl(msrest.serialization.Model):
    """Acl.

    :ivar owners:
    :vartype owners: list[str]
    :ivar viewers:
    :vartype viewers: list[str]
    """

    _attribute_map = {
        'owners': {'key': 'owners', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        owners: Optional[List[str]] = None,
        viewers: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword owners:
        :paramtype owners: list[str]
        :keyword viewers:
        :paramtype viewers: list[str]
        """
        super(Acl, self).__init__(**kwargs)
        self.owners = owners
        self.viewers = viewers


class Ancestry(msrest.serialization.Model):
    """Ancestry.

    :ivar parents:
    :vartype parents: list[str]
    """

    _attribute_map = {
        'parents': {'key': 'parents', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        parents: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword parents:
        :paramtype parents: list[str]
        """
        super(Ancestry, self).__init__(**kwargs)
        self.parents = parents


class DatasetProperties(msrest.serialization.Model):
    """DatasetProperties.

    All required parameters must be populated in order to send to Azure.

    :ivar file_source_info: Required. FileSourceInfo.
    :vartype file_source_info: ~azure.oep.file.models.FileSourceInfo
    """

    _validation = {
        'file_source_info': {'required': True},
    }

    _attribute_map = {
        'file_source_info': {'key': 'fileSourceInfo', 'type': 'FileSourceInfo'},
    }

    def __init__(
        self,
        *,
        file_source_info: "_models.FileSourceInfo",
        **kwargs
    ):
        """
        :keyword file_source_info: Required. FileSourceInfo.
        :paramtype file_source_info: ~azure.oep.file.models.FileSourceInfo
        """
        super(DatasetProperties, self).__init__(**kwargs)
        self.file_source_info = file_source_info


class DownloadUrlResponse(msrest.serialization.Model):
    """DownloadUrlResponse.

    :ivar signed_url:
    :vartype signed_url: str
    """

    _attribute_map = {
        'signed_url': {'key': 'signedUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        signed_url: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword signed_url:
        :paramtype signed_url: str
        """
        super(DownloadUrlResponse, self).__init__(**kwargs)
        self.signed_url = signed_url


class FileData(msrest.serialization.Model):
    """FileData.

    All required parameters must be populated in order to send to Azure.

    :ivar checksum:
    :vartype checksum: str
    :ivar dataset_properties: Required. DatasetProperties.
    :vartype dataset_properties: ~azure.oep.file.models.DatasetProperties
    :ivar description:
    :vartype description: str
    :ivar encoding_format_type_id:
    :vartype encoding_format_type_id: str
    :ivar endian: Endian. Known values are: "BIG", "LITTLE".
    :vartype endian: str or ~azure.oep.file.models.Endian
    :ivar existence_kind:
    :vartype existence_kind: str
    :ivar extension_properties: Any object.
    :vartype extension_properties: any
    :ivar name:
    :vartype name: str
    :ivar resource_curation_status:
    :vartype resource_curation_status: str
    :ivar resource_home_region_id:
    :vartype resource_home_region_id: str
    :ivar resource_host_region_i_ds:
    :vartype resource_host_region_i_ds: list[str]
    :ivar resource_lifecycle_status:
    :vartype resource_lifecycle_status: str
    :ivar resource_security_classification:
    :vartype resource_security_classification: str
    :ivar schema_format_type_id:
    :vartype schema_format_type_id: str
    :ivar source:
    :vartype source: str
    :ivar total_size:
    :vartype total_size: str
    """

    _validation = {
        'dataset_properties': {'required': True},
    }

    _attribute_map = {
        'checksum': {'key': 'checksum', 'type': 'str'},
        'dataset_properties': {'key': 'datasetProperties', 'type': 'DatasetProperties'},
        'description': {'key': 'description', 'type': 'str'},
        'encoding_format_type_id': {'key': 'encodingFormatTypeID', 'type': 'str'},
        'endian': {'key': 'endian', 'type': 'str'},
        'existence_kind': {'key': 'existenceKind', 'type': 'str'},
        'extension_properties': {'key': 'extensionProperties', 'type': 'object'},
        'name': {'key': 'name', 'type': 'str'},
        'resource_curation_status': {'key': 'resourceCurationStatus', 'type': 'str'},
        'resource_home_region_id': {'key': 'resourceHomeRegionID', 'type': 'str'},
        'resource_host_region_i_ds': {'key': 'resourceHostRegionIDs', 'type': '[str]'},
        'resource_lifecycle_status': {'key': 'resourceLifecycleStatus', 'type': 'str'},
        'resource_security_classification': {'key': 'resourceSecurityClassification', 'type': 'str'},
        'schema_format_type_id': {'key': 'schemaFormatTypeID', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'total_size': {'key': 'totalSize', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dataset_properties: "_models.DatasetProperties",
        checksum: Optional[str] = None,
        description: Optional[str] = None,
        encoding_format_type_id: Optional[str] = None,
        endian: Optional[Union[str, "_models.Endian"]] = None,
        existence_kind: Optional[str] = None,
        extension_properties: Optional[Any] = None,
        name: Optional[str] = None,
        resource_curation_status: Optional[str] = None,
        resource_home_region_id: Optional[str] = None,
        resource_host_region_i_ds: Optional[List[str]] = None,
        resource_lifecycle_status: Optional[str] = None,
        resource_security_classification: Optional[str] = None,
        schema_format_type_id: Optional[str] = None,
        source: Optional[str] = None,
        total_size: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword checksum:
        :paramtype checksum: str
        :keyword dataset_properties: Required. DatasetProperties.
        :paramtype dataset_properties: ~azure.oep.file.models.DatasetProperties
        :keyword description:
        :paramtype description: str
        :keyword encoding_format_type_id:
        :paramtype encoding_format_type_id: str
        :keyword endian: Endian. Known values are: "BIG", "LITTLE".
        :paramtype endian: str or ~azure.oep.file.models.Endian
        :keyword existence_kind:
        :paramtype existence_kind: str
        :keyword extension_properties: Any object.
        :paramtype extension_properties: any
        :keyword name:
        :paramtype name: str
        :keyword resource_curation_status:
        :paramtype resource_curation_status: str
        :keyword resource_home_region_id:
        :paramtype resource_home_region_id: str
        :keyword resource_host_region_i_ds:
        :paramtype resource_host_region_i_ds: list[str]
        :keyword resource_lifecycle_status:
        :paramtype resource_lifecycle_status: str
        :keyword resource_security_classification:
        :paramtype resource_security_classification: str
        :keyword schema_format_type_id:
        :paramtype schema_format_type_id: str
        :keyword source:
        :paramtype source: str
        :keyword total_size:
        :paramtype total_size: str
        """
        super(FileData, self).__init__(**kwargs)
        self.checksum = checksum
        self.dataset_properties = dataset_properties
        self.description = description
        self.encoding_format_type_id = encoding_format_type_id
        self.endian = endian
        self.existence_kind = existence_kind
        self.extension_properties = extension_properties
        self.name = name
        self.resource_curation_status = resource_curation_status
        self.resource_home_region_id = resource_home_region_id
        self.resource_host_region_i_ds = resource_host_region_i_ds
        self.resource_lifecycle_status = resource_lifecycle_status
        self.resource_security_classification = resource_security_classification
        self.schema_format_type_id = schema_format_type_id
        self.source = source
        self.total_size = total_size


class FileMetadata(msrest.serialization.Model):
    """FileMetadata.

    All required parameters must be populated in order to send to Azure.

    :ivar acl: Required. Acl.
    :vartype acl: ~azure.oep.file.models.Acl
    :ivar ancestry: Ancestry.
    :vartype ancestry: ~azure.oep.file.models.Ancestry
    :ivar data: Required. FileData.
    :vartype data: ~azure.oep.file.models.FileData
    :ivar id:
    :vartype id: str
    :ivar kind: Required.
    :vartype kind: str
    :ivar legal: Required. Legal.
    :vartype legal: ~azure.oep.file.models.Legal
    :ivar meta:
    :vartype meta: list[any]
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'acl': {'required': True},
        'data': {'required': True},
        'kind': {'required': True},
        'legal': {'required': True},
    }

    _attribute_map = {
        'acl': {'key': 'acl', 'type': 'Acl'},
        'ancestry': {'key': 'ancestry', 'type': 'Ancestry'},
        'data': {'key': 'data', 'type': 'FileData'},
        'id': {'key': 'id', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'legal': {'key': 'legal', 'type': 'Legal'},
        'meta': {'key': 'meta', 'type': '[object]'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        acl: "_models.Acl",
        data: "_models.FileData",
        kind: str,
        legal: "_models.Legal",
        ancestry: Optional["_models.Ancestry"] = None,
        id: Optional[str] = None,
        meta: Optional[List[Any]] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword acl: Required. Acl.
        :paramtype acl: ~azure.oep.file.models.Acl
        :keyword ancestry: Ancestry.
        :paramtype ancestry: ~azure.oep.file.models.Ancestry
        :keyword data: Required. FileData.
        :paramtype data: ~azure.oep.file.models.FileData
        :keyword id:
        :paramtype id: str
        :keyword kind: Required.
        :paramtype kind: str
        :keyword legal: Required. Legal.
        :paramtype legal: ~azure.oep.file.models.Legal
        :keyword meta:
        :paramtype meta: list[any]
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        """
        super(FileMetadata, self).__init__(**kwargs)
        self.acl = acl
        self.ancestry = ancestry
        self.data = data
        self.id = id
        self.kind = kind
        self.legal = legal
        self.meta = meta
        self.tags = tags


class FileMetadataResponse(msrest.serialization.Model):
    """FileMetadataResponse.

    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        """
        super(FileMetadataResponse, self).__init__(**kwargs)
        self.id = id


class FileSourceInfo(msrest.serialization.Model):
    """FileSourceInfo.

    :ivar checksum:
    :vartype checksum: str
    :ivar checksum_algorithm:
    :vartype checksum_algorithm: str
    :ivar encoding_format_type_id:
    :vartype encoding_format_type_id: str
    :ivar file_size:
    :vartype file_size: str
    :ivar file_source:
    :vartype file_source: str
    :ivar name:
    :vartype name: str
    :ivar pre_load_file_path:
    :vartype pre_load_file_path: str
    :ivar preload_file_create_date:
    :vartype preload_file_create_date: str
    :ivar preload_file_create_user:
    :vartype preload_file_create_user: str
    :ivar preload_file_modify_date:
    :vartype preload_file_modify_date: str
    :ivar preload_file_modify_user:
    :vartype preload_file_modify_user: str
    """

    _attribute_map = {
        'checksum': {'key': 'checksum', 'type': 'str'},
        'checksum_algorithm': {'key': 'checksumAlgorithm', 'type': 'str'},
        'encoding_format_type_id': {'key': 'encodingFormatTypeID', 'type': 'str'},
        'file_size': {'key': 'fileSize', 'type': 'str'},
        'file_source': {'key': 'fileSource', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'pre_load_file_path': {'key': 'preLoadFilePath', 'type': 'str'},
        'preload_file_create_date': {'key': 'preloadFileCreateDate', 'type': 'str'},
        'preload_file_create_user': {'key': 'preloadFileCreateUser', 'type': 'str'},
        'preload_file_modify_date': {'key': 'preloadFileModifyDate', 'type': 'str'},
        'preload_file_modify_user': {'key': 'preloadFileModifyUser', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        checksum: Optional[str] = None,
        checksum_algorithm: Optional[str] = None,
        encoding_format_type_id: Optional[str] = None,
        file_size: Optional[str] = None,
        file_source: Optional[str] = None,
        name: Optional[str] = None,
        pre_load_file_path: Optional[str] = None,
        preload_file_create_date: Optional[str] = None,
        preload_file_create_user: Optional[str] = None,
        preload_file_modify_date: Optional[str] = None,
        preload_file_modify_user: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword checksum:
        :paramtype checksum: str
        :keyword checksum_algorithm:
        :paramtype checksum_algorithm: str
        :keyword encoding_format_type_id:
        :paramtype encoding_format_type_id: str
        :keyword file_size:
        :paramtype file_size: str
        :keyword file_source:
        :paramtype file_source: str
        :keyword name:
        :paramtype name: str
        :keyword pre_load_file_path:
        :paramtype pre_load_file_path: str
        :keyword preload_file_create_date:
        :paramtype preload_file_create_date: str
        :keyword preload_file_create_user:
        :paramtype preload_file_create_user: str
        :keyword preload_file_modify_date:
        :paramtype preload_file_modify_date: str
        :keyword preload_file_modify_user:
        :paramtype preload_file_modify_user: str
        """
        super(FileSourceInfo, self).__init__(**kwargs)
        self.checksum = checksum
        self.checksum_algorithm = checksum_algorithm
        self.encoding_format_type_id = encoding_format_type_id
        self.file_size = file_size
        self.file_source = file_source
        self.name = name
        self.pre_load_file_path = pre_load_file_path
        self.preload_file_create_date = preload_file_create_date
        self.preload_file_create_user = preload_file_create_user
        self.preload_file_modify_date = preload_file_modify_date
        self.preload_file_modify_user = preload_file_modify_user


class Legal(msrest.serialization.Model):
    """Legal.

    :ivar legaltags:
    :vartype legaltags: list[str]
    :ivar other_relevant_data_countries:
    :vartype other_relevant_data_countries: list[str]
    :ivar status: Status. Known values are: "compliant", "incompliant".
    :vartype status: str or ~azure.oep.file.models.Status
    """

    _validation = {
        'legaltags': {'unique': True},
        'other_relevant_data_countries': {'unique': True},
    }

    _attribute_map = {
        'legaltags': {'key': 'legaltags', 'type': '[str]'},
        'other_relevant_data_countries': {'key': 'otherRelevantDataCountries', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        legaltags: Optional[List[str]] = None,
        other_relevant_data_countries: Optional[List[str]] = None,
        status: Optional[Union[str, "_models.Status"]] = None,
        **kwargs
    ):
        """
        :keyword legaltags:
        :paramtype legaltags: list[str]
        :keyword other_relevant_data_countries:
        :paramtype other_relevant_data_countries: list[str]
        :keyword status: Status. Known values are: "compliant", "incompliant".
        :paramtype status: str or ~azure.oep.file.models.Status
        """
        super(Legal, self).__init__(**kwargs)
        self.legaltags = legaltags
        self.other_relevant_data_countries = other_relevant_data_countries
        self.status = status


class LocationResponse(msrest.serialization.Model):
    """LocationResponse.

    :ivar file_id:
    :vartype file_id: str
    :ivar location: Dictionary of :code:`<string>`.
    :vartype location: dict[str, str]
    """

    _attribute_map = {
        'file_id': {'key': 'fileID', 'type': 'str'},
        'location': {'key': 'location', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        file_id: Optional[str] = None,
        location: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword file_id:
        :paramtype file_id: str
        :keyword location: Dictionary of :code:`<string>`.
        :paramtype location: dict[str, str]
        """
        super(LocationResponse, self).__init__(**kwargs)
        self.file_id = file_id
        self.location = location


class RecordVersion(msrest.serialization.Model):
    """RecordVersion.

    All required parameters must be populated in order to send to Azure.

    :ivar acl: Required. Acl.
    :vartype acl: ~azure.oep.file.models.Acl
    :ivar ancestry: Ancestry.
    :vartype ancestry: ~azure.oep.file.models.Ancestry
    :ivar data: Required. FileData.
    :vartype data: ~azure.oep.file.models.FileData
    :ivar id:
    :vartype id: str
    :ivar kind: Required.
    :vartype kind: str
    :ivar legal: Required. Legal.
    :vartype legal: ~azure.oep.file.models.Legal
    :ivar meta:
    :vartype meta: list[any]
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar version:
    :vartype version: long
    """

    _validation = {
        'acl': {'required': True},
        'data': {'required': True},
        'kind': {'required': True},
        'legal': {'required': True},
    }

    _attribute_map = {
        'acl': {'key': 'acl', 'type': 'Acl'},
        'ancestry': {'key': 'ancestry', 'type': 'Ancestry'},
        'data': {'key': 'data', 'type': 'FileData'},
        'id': {'key': 'id', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'legal': {'key': 'legal', 'type': 'Legal'},
        'meta': {'key': 'meta', 'type': '[object]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'version': {'key': 'version', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        acl: "_models.Acl",
        data: "_models.FileData",
        kind: str,
        legal: "_models.Legal",
        ancestry: Optional["_models.Ancestry"] = None,
        id: Optional[str] = None,
        meta: Optional[List[Any]] = None,
        tags: Optional[Dict[str, str]] = None,
        version: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword acl: Required. Acl.
        :paramtype acl: ~azure.oep.file.models.Acl
        :keyword ancestry: Ancestry.
        :paramtype ancestry: ~azure.oep.file.models.Ancestry
        :keyword data: Required. FileData.
        :paramtype data: ~azure.oep.file.models.FileData
        :keyword id:
        :paramtype id: str
        :keyword kind: Required.
        :paramtype kind: str
        :keyword legal: Required. Legal.
        :paramtype legal: ~azure.oep.file.models.Legal
        :keyword meta:
        :paramtype meta: list[any]
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword version:
        :paramtype version: long
        """
        super(RecordVersion, self).__init__(**kwargs)
        self.acl = acl
        self.ancestry = ancestry
        self.data = data
        self.id = id
        self.kind = kind
        self.legal = legal
        self.meta = meta
        self.tags = tags
        self.version = version
