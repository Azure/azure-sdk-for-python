# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class Acl(msrest.serialization.Model):
    """Acl.

    :ivar owners:
    :vartype owners: list[str]
    :ivar viewers:
    :vartype viewers: list[str]
    """

    _attribute_map = {
        'owners': {'key': 'owners', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword owners:
        :paramtype owners: list[str]
        :keyword viewers:
        :paramtype viewers: list[str]
        """
        super(Acl, self).__init__(**kwargs)
        self.owners = kwargs.get('owners', None)
        self.viewers = kwargs.get('viewers', None)


class CreateUpdateRecordsResponse(msrest.serialization.Model):
    """CreateUpdateRecordsResponse.

    :ivar record_count:
    :vartype record_count: int
    :ivar record_id_versions:
    :vartype record_id_versions: list[str]
    :ivar record_ids:
    :vartype record_ids: list[str]
    :ivar skipped_record_ids:
    :vartype skipped_record_ids: list[str]
    """

    _attribute_map = {
        'record_count': {'key': 'recordCount', 'type': 'int'},
        'record_id_versions': {'key': 'recordIdVersions', 'type': '[str]'},
        'record_ids': {'key': 'recordIds', 'type': '[str]'},
        'skipped_record_ids': {'key': 'skippedRecordIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword record_count:
        :paramtype record_count: int
        :keyword record_id_versions:
        :paramtype record_id_versions: list[str]
        :keyword record_ids:
        :paramtype record_ids: list[str]
        :keyword skipped_record_ids:
        :paramtype skipped_record_ids: list[str]
        """
        super(CreateUpdateRecordsResponse, self).__init__(**kwargs)
        self.record_count = kwargs.get('record_count', None)
        self.record_id_versions = kwargs.get('record_id_versions', None)
        self.record_ids = kwargs.get('record_ids', None)
        self.skipped_record_ids = kwargs.get('skipped_record_ids', None)


class DatastoreQueryResult(msrest.serialization.Model):
    """DatastoreQueryResult.

    :ivar cursor:
    :vartype cursor: str
    :ivar results:
    :vartype results: list[str]
    """

    _attribute_map = {
        'cursor': {'key': 'cursor', 'type': 'str'},
        'results': {'key': 'results', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword cursor:
        :paramtype cursor: str
        :keyword results:
        :paramtype results: list[str]
        """
        super(DatastoreQueryResult, self).__init__(**kwargs)
        self.cursor = kwargs.get('cursor', None)
        self.results = kwargs.get('results', None)


class Legal(msrest.serialization.Model):
    """Legal.

    :ivar legaltags:
    :vartype legaltags: list[str]
    :ivar other_relevant_data_countries:
    :vartype other_relevant_data_countries: list[str]
    :ivar status: Status. Known values are: "compliant", "incompliant".
    :vartype status: str or ~azure.oep.storage.models.Status
    """

    _validation = {
        'legaltags': {'unique': True},
        'other_relevant_data_countries': {'unique': True},
    }

    _attribute_map = {
        'legaltags': {'key': 'legaltags', 'type': '[str]'},
        'other_relevant_data_countries': {'key': 'otherRelevantDataCountries', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword legaltags:
        :paramtype legaltags: list[str]
        :keyword other_relevant_data_countries:
        :paramtype other_relevant_data_countries: list[str]
        :keyword status: Status. Known values are: "compliant", "incompliant".
        :paramtype status: str or ~azure.oep.storage.models.Status
        """
        super(Legal, self).__init__(**kwargs)
        self.legaltags = kwargs.get('legaltags', None)
        self.other_relevant_data_countries = kwargs.get('other_relevant_data_countries', None)
        self.status = kwargs.get('status', None)


class Record(msrest.serialization.Model):
    """Record.

    All required parameters must be populated in order to send to Azure.

    :ivar acl: Required. Acl.
    :vartype acl: ~azure.oep.storage.models.Acl
    :ivar ancestry: RecordAncestry.
    :vartype ancestry: ~azure.oep.storage.models.RecordAncestry
    :ivar data: Any object.
    :vartype data: any
    :ivar id: Required. Unique identifier in whole Data Ecosystem. When not provided, Data
     Ecosystem will create and assign an id to the record. Must follow the naming convention:
     {Data-Partition-Id}:{object-type}:{uuid}.
    :vartype id: str
    :ivar kind: Required. Record kind for which the schema information is applied to.
    :vartype kind: str
    :ivar legal: Legal.
    :vartype legal: ~azure.oep.storage.models.Legal
    :ivar meta:
    :vartype meta: list[any]
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar version:
    :vartype version: long
    """

    _validation = {
        'acl': {'required': True},
        'id': {'required': True, 'pattern': r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'},
        'kind': {'required': True},
    }

    _attribute_map = {
        'acl': {'key': 'acl', 'type': 'Acl'},
        'ancestry': {'key': 'ancestry', 'type': 'RecordAncestry'},
        'data': {'key': 'data', 'type': 'object'},
        'id': {'key': 'id', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'legal': {'key': 'legal', 'type': 'Legal'},
        'meta': {'key': 'meta', 'type': '[object]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'version': {'key': 'version', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword acl: Required. Acl.
        :paramtype acl: ~azure.oep.storage.models.Acl
        :keyword ancestry: RecordAncestry.
        :paramtype ancestry: ~azure.oep.storage.models.RecordAncestry
        :keyword data: Any object.
        :paramtype data: any
        :keyword id: Required. Unique identifier in whole Data Ecosystem. When not provided, Data
         Ecosystem will create and assign an id to the record. Must follow the naming convention:
         {Data-Partition-Id}:{object-type}:{uuid}.
        :paramtype id: str
        :keyword kind: Required. Record kind for which the schema information is applied to.
        :paramtype kind: str
        :keyword legal: Legal.
        :paramtype legal: ~azure.oep.storage.models.Legal
        :keyword meta:
        :paramtype meta: list[any]
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword version:
        :paramtype version: long
        """
        super(Record, self).__init__(**kwargs)
        self.acl = kwargs['acl']
        self.ancestry = kwargs.get('ancestry', None)
        self.data = kwargs.get('data', None)
        self.id = kwargs['id']
        self.kind = kwargs['kind']
        self.legal = kwargs.get('legal', None)
        self.meta = kwargs.get('meta', None)
        self.tags = kwargs.get('tags', None)
        self.version = kwargs.get('version', None)


class RecordAncestry(msrest.serialization.Model):
    """RecordAncestry.

    :ivar parents:
    :vartype parents: list[str]
    """

    _validation = {
        'parents': {'unique': True},
    }

    _attribute_map = {
        'parents': {'key': 'parents', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword parents:
        :paramtype parents: list[str]
        """
        super(RecordAncestry, self).__init__(**kwargs)
        self.parents = kwargs.get('parents', None)


class RecordVersions(msrest.serialization.Model):
    """RecordVersions.

    :ivar record_id:
    :vartype record_id: str
    :ivar versions:
    :vartype versions: list[long]
    """

    _attribute_map = {
        'record_id': {'key': 'recordId', 'type': 'str'},
        'versions': {'key': 'versions', 'type': '[long]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword record_id:
        :paramtype record_id: str
        :keyword versions:
        :paramtype versions: list[long]
        """
        super(RecordVersions, self).__init__(**kwargs)
        self.record_id = kwargs.get('record_id', None)
        self.versions = kwargs.get('versions', None)
