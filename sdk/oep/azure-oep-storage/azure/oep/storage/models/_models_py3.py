# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    import __init__ as _models


class Acl(msrest.serialization.Model):
    """Acl.

    :ivar owners:
    :vartype owners: list[str]
    :ivar viewers:
    :vartype viewers: list[str]
    """

    _attribute_map = {
        'owners': {'key': 'owners', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        owners: Optional[List[str]] = None,
        viewers: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword owners:
        :paramtype owners: list[str]
        :keyword viewers:
        :paramtype viewers: list[str]
        """
        super(Acl, self).__init__(**kwargs)
        self.owners = owners
        self.viewers = viewers


class BulkUpdateRecordsResponse(msrest.serialization.Model):
    """BulkUpdateRecordsResponse.

    :ivar locked_record_ids:
    :vartype locked_record_ids: list[str]
    :ivar not_found_record_ids:
    :vartype not_found_record_ids: list[str]
    :ivar record_count:
    :vartype record_count: int
    :ivar record_ids:
    :vartype record_ids: list[str]
    :ivar un_authorized_record_ids:
    :vartype un_authorized_record_ids: list[str]
    """

    _attribute_map = {
        'locked_record_ids': {'key': 'lockedRecordIds', 'type': '[str]'},
        'not_found_record_ids': {'key': 'notFoundRecordIds', 'type': '[str]'},
        'record_count': {'key': 'recordCount', 'type': 'int'},
        'record_ids': {'key': 'recordIds', 'type': '[str]'},
        'un_authorized_record_ids': {'key': 'unAuthorizedRecordIds', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        locked_record_ids: Optional[List[str]] = None,
        not_found_record_ids: Optional[List[str]] = None,
        record_count: Optional[int] = None,
        record_ids: Optional[List[str]] = None,
        un_authorized_record_ids: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword locked_record_ids:
        :paramtype locked_record_ids: list[str]
        :keyword not_found_record_ids:
        :paramtype not_found_record_ids: list[str]
        :keyword record_count:
        :paramtype record_count: int
        :keyword record_ids:
        :paramtype record_ids: list[str]
        :keyword un_authorized_record_ids:
        :paramtype un_authorized_record_ids: list[str]
        """
        super(BulkUpdateRecordsResponse, self).__init__(**kwargs)
        self.locked_record_ids = locked_record_ids
        self.not_found_record_ids = not_found_record_ids
        self.record_count = record_count
        self.record_ids = record_ids
        self.un_authorized_record_ids = un_authorized_record_ids


class ConnectedOuterService(msrest.serialization.Model):
    """ConnectedOuterService.

    :ivar name:
    :vartype name: str
    :ivar version:
    :vartype version: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword version:
        :paramtype version: str
        """
        super(ConnectedOuterService, self).__init__(**kwargs)
        self.name = name
        self.version = version


class ConversionStatus(msrest.serialization.Model):
    """ConversionStatus.

    :ivar errors:
    :vartype errors: list[str]
    :ivar id:
    :vartype id: str
    :ivar status:
    :vartype status: str
    """

    _attribute_map = {
        'errors': {'key': 'errors', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        errors: Optional[List[str]] = None,
        id: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword errors:
        :paramtype errors: list[str]
        :keyword id:
        :paramtype id: str
        :keyword status:
        :paramtype status: str
        """
        super(ConversionStatus, self).__init__(**kwargs)
        self.errors = errors
        self.id = id
        self.status = status


class CreateUpdateRecordsResponse(msrest.serialization.Model):
    """CreateUpdateRecordsResponse.

    :ivar record_count:
    :vartype record_count: int
    :ivar record_id_versions:
    :vartype record_id_versions: list[str]
    :ivar record_ids:
    :vartype record_ids: list[str]
    :ivar skipped_record_ids:
    :vartype skipped_record_ids: list[str]
    """

    _attribute_map = {
        'record_count': {'key': 'recordCount', 'type': 'int'},
        'record_id_versions': {'key': 'recordIdVersions', 'type': '[str]'},
        'record_ids': {'key': 'recordIds', 'type': '[str]'},
        'skipped_record_ids': {'key': 'skippedRecordIds', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        record_count: Optional[int] = None,
        record_id_versions: Optional[List[str]] = None,
        record_ids: Optional[List[str]] = None,
        skipped_record_ids: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword record_count:
        :paramtype record_count: int
        :keyword record_id_versions:
        :paramtype record_id_versions: list[str]
        :keyword record_ids:
        :paramtype record_ids: list[str]
        :keyword skipped_record_ids:
        :paramtype skipped_record_ids: list[str]
        """
        super(CreateUpdateRecordsResponse, self).__init__(**kwargs)
        self.record_count = record_count
        self.record_id_versions = record_id_versions
        self.record_ids = record_ids
        self.skipped_record_ids = skipped_record_ids


class DatastoreQueryResult(msrest.serialization.Model):
    """DatastoreQueryResult.

    :ivar cursor:
    :vartype cursor: str
    :ivar results:
    :vartype results: list[str]
    """

    _attribute_map = {
        'cursor': {'key': 'cursor', 'type': 'str'},
        'results': {'key': 'results', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        cursor: Optional[str] = None,
        results: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword cursor:
        :paramtype cursor: str
        :keyword results:
        :paramtype results: list[str]
        """
        super(DatastoreQueryResult, self).__init__(**kwargs)
        self.cursor = cursor
        self.results = results


class Legal(msrest.serialization.Model):
    """Legal.

    :ivar legaltags:
    :vartype legaltags: list[str]
    :ivar other_relevant_data_countries:
    :vartype other_relevant_data_countries: list[str]
    :ivar status: Status. Known values are: "compliant", "incompliant".
    :vartype status: str or ~azure.oep.storage.models.Status
    """

    _validation = {
        'legaltags': {'unique': True},
        'other_relevant_data_countries': {'unique': True},
    }

    _attribute_map = {
        'legaltags': {'key': 'legaltags', 'type': '[str]'},
        'other_relevant_data_countries': {'key': 'otherRelevantDataCountries', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        legaltags: Optional[List[str]] = None,
        other_relevant_data_countries: Optional[List[str]] = None,
        status: Optional[Union[str, "_models.Status"]] = None,
        **kwargs
    ):
        """
        :keyword legaltags:
        :paramtype legaltags: list[str]
        :keyword other_relevant_data_countries:
        :paramtype other_relevant_data_countries: list[str]
        :keyword status: Status. Known values are: "compliant", "incompliant".
        :paramtype status: str or ~azure.oep.storage.models.Status
        """
        super(Legal, self).__init__(**kwargs)
        self.legaltags = legaltags
        self.other_relevant_data_countries = other_relevant_data_countries
        self.status = status


class MultiRecordIds(msrest.serialization.Model):
    """MultiRecordIds.

    :ivar attributes:
    :vartype attributes: list[str]
    :ivar records:
    :vartype records: list[str]
    """

    _attribute_map = {
        'attributes': {'key': 'attributes', 'type': '[str]'},
        'records': {'key': 'records', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        attributes: Optional[List[str]] = None,
        records: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword attributes:
        :paramtype attributes: list[str]
        :keyword records:
        :paramtype records: list[str]
        """
        super(MultiRecordIds, self).__init__(**kwargs)
        self.attributes = attributes
        self.records = records


class MultiRecordInfo(msrest.serialization.Model):
    """MultiRecordInfo.

    :ivar invalid_records:
    :vartype invalid_records: list[str]
    :ivar records:
    :vartype records: list[~azure.oep.storage.models.Record]
    :ivar retry_records:
    :vartype retry_records: list[str]
    """

    _attribute_map = {
        'invalid_records': {'key': 'invalidRecords', 'type': '[str]'},
        'records': {'key': 'records', 'type': '[Record]'},
        'retry_records': {'key': 'retryRecords', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        invalid_records: Optional[List[str]] = None,
        records: Optional[List["_models.Record"]] = None,
        retry_records: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword invalid_records:
        :paramtype invalid_records: list[str]
        :keyword records:
        :paramtype records: list[~azure.oep.storage.models.Record]
        :keyword retry_records:
        :paramtype retry_records: list[str]
        """
        super(MultiRecordInfo, self).__init__(**kwargs)
        self.invalid_records = invalid_records
        self.records = records
        self.retry_records = retry_records


class MultiRecordRequest(msrest.serialization.Model):
    """MultiRecordRequest.

    :ivar records:
    :vartype records: list[str]
    """

    _attribute_map = {
        'records': {'key': 'records', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        records: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword records:
        :paramtype records: list[str]
        """
        super(MultiRecordRequest, self).__init__(**kwargs)
        self.records = records


class MultiRecordResponse(msrest.serialization.Model):
    """MultiRecordResponse.

    :ivar conversion_statuses:
    :vartype conversion_statuses: list[~azure.oep.storage.models.ConversionStatus]
    :ivar not_found:
    :vartype not_found: list[str]
    :ivar records:
    :vartype records: list[str]
    """

    _attribute_map = {
        'conversion_statuses': {'key': 'conversionStatuses', 'type': '[ConversionStatus]'},
        'not_found': {'key': 'notFound', 'type': '[str]'},
        'records': {'key': 'records', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        conversion_statuses: Optional[List["_models.ConversionStatus"]] = None,
        not_found: Optional[List[str]] = None,
        records: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword conversion_statuses:
        :paramtype conversion_statuses: list[~azure.oep.storage.models.ConversionStatus]
        :keyword not_found:
        :paramtype not_found: list[str]
        :keyword records:
        :paramtype records: list[str]
        """
        super(MultiRecordResponse, self).__init__(**kwargs)
        self.conversion_statuses = conversion_statuses
        self.not_found = not_found
        self.records = records


class PatchOperation(msrest.serialization.Model):
    """PatchOperation.

    All required parameters must be populated in order to send to Azure.

    :ivar op: Required. Bulk update record operation.
    :vartype op: str
    :ivar path: Required. Bulk update record path.
    :vartype path: str
    :ivar value: Required. Bulk update record path.
    :vartype value: list[str]
    """

    _validation = {
        'op': {'required': True},
        'path': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'op': {'key': 'op', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        op: str,
        path: str,
        value: List[str],
        **kwargs
    ):
        """
        :keyword op: Required. Bulk update record operation.
        :paramtype op: str
        :keyword path: Required. Bulk update record path.
        :paramtype path: str
        :keyword value: Required. Bulk update record path.
        :paramtype value: list[str]
        """
        super(PatchOperation, self).__init__(**kwargs)
        self.op = op
        self.path = path
        self.value = value


class Record(msrest.serialization.Model):
    """Record.

    All required parameters must be populated in order to send to Azure.

    :ivar acl: Required. Acl.
    :vartype acl: ~azure.oep.storage.models.Acl
    :ivar ancestry: RecordAncestry.
    :vartype ancestry: ~azure.oep.storage.models.RecordAncestry
    :ivar data: Any object.
    :vartype data: any
    :ivar id: Required. Unique identifier in whole Data Ecosystem. When not provided, Data
     Ecosystem will create and assign an id to the record. Must follow the naming convention:
     {Data-Partition-Id}:{object-type}:{uuid}.
    :vartype id: str
    :ivar kind: Required. Record kind for which the schema information is applied to.
    :vartype kind: str
    :ivar legal: Legal.
    :vartype legal: ~azure.oep.storage.models.Legal
    :ivar meta:
    :vartype meta: list[any]
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar version:
    :vartype version: long
    """

    _validation = {
        'acl': {'required': True},
        'id': {'required': True, 'pattern': r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'},
        'kind': {'required': True},
    }

    _attribute_map = {
        'acl': {'key': 'acl', 'type': 'Acl'},
        'ancestry': {'key': 'ancestry', 'type': 'RecordAncestry'},
        'data': {'key': 'data', 'type': 'object'},
        'id': {'key': 'id', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'legal': {'key': 'legal', 'type': 'Legal'},
        'meta': {'key': 'meta', 'type': '[object]'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'version': {'key': 'version', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        acl: "_models.Acl",
        id: str,
        kind: str,
        ancestry: Optional["_models.RecordAncestry"] = None,
        data: Optional[Any] = None,
        legal: Optional["_models.Legal"] = None,
        meta: Optional[List[Any]] = None,
        tags: Optional[Dict[str, str]] = None,
        version: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword acl: Required. Acl.
        :paramtype acl: ~azure.oep.storage.models.Acl
        :keyword ancestry: RecordAncestry.
        :paramtype ancestry: ~azure.oep.storage.models.RecordAncestry
        :keyword data: Any object.
        :paramtype data: any
        :keyword id: Required. Unique identifier in whole Data Ecosystem. When not provided, Data
         Ecosystem will create and assign an id to the record. Must follow the naming convention:
         {Data-Partition-Id}:{object-type}:{uuid}.
        :paramtype id: str
        :keyword kind: Required. Record kind for which the schema information is applied to.
        :paramtype kind: str
        :keyword legal: Legal.
        :paramtype legal: ~azure.oep.storage.models.Legal
        :keyword meta:
        :paramtype meta: list[any]
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword version:
        :paramtype version: long
        """
        super(Record, self).__init__(**kwargs)
        self.acl = acl
        self.ancestry = ancestry
        self.data = data
        self.id = id
        self.kind = kind
        self.legal = legal
        self.meta = meta
        self.tags = tags
        self.version = version


class RecordAncestry(msrest.serialization.Model):
    """RecordAncestry.

    :ivar parents:
    :vartype parents: list[str]
    """

    _validation = {
        'parents': {'unique': True},
    }

    _attribute_map = {
        'parents': {'key': 'parents', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        parents: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword parents:
        :paramtype parents: list[str]
        """
        super(RecordAncestry, self).__init__(**kwargs)
        self.parents = parents


class RecordBulkUpdateParam(msrest.serialization.Model):
    """RecordBulkUpdateParam.

    All required parameters must be populated in order to send to Azure.

    :ivar ops: Required. Record metadata operations.
    :vartype ops: list[~azure.oep.storage.models.PatchOperation]
    :ivar query: Required. RecordQuery.
    :vartype query: ~azure.oep.storage.models.RecordQuery
    """

    _validation = {
        'ops': {'required': True},
        'query': {'required': True},
    }

    _attribute_map = {
        'ops': {'key': 'ops', 'type': '[PatchOperation]'},
        'query': {'key': 'query', 'type': 'RecordQuery'},
    }

    def __init__(
        self,
        *,
        ops: List["_models.PatchOperation"],
        query: "_models.RecordQuery",
        **kwargs
    ):
        """
        :keyword ops: Required. Record metadata operations.
        :paramtype ops: list[~azure.oep.storage.models.PatchOperation]
        :keyword query: Required. RecordQuery.
        :paramtype query: ~azure.oep.storage.models.RecordQuery
        """
        super(RecordBulkUpdateParam, self).__init__(**kwargs)
        self.ops = ops
        self.query = query


class RecordQuery(msrest.serialization.Model):
    """RecordQuery.

    All required parameters must be populated in order to send to Azure.

    :ivar ids: Required. List of record ids. Each record id must follow the naming convention
     {Data-Partition-Id}:{dataset-name}:{record-type}:{version}.
    :vartype ids: list[str]
    """

    _validation = {
        'ids': {'required': True},
    }

    _attribute_map = {
        'ids': {'key': 'ids', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        ids: List[str],
        **kwargs
    ):
        """
        :keyword ids: Required. List of record ids. Each record id must follow the naming convention
         {Data-Partition-Id}:{dataset-name}:{record-type}:{version}.
        :paramtype ids: list[str]
        """
        super(RecordQuery, self).__init__(**kwargs)
        self.ids = ids


class RecordVersions(msrest.serialization.Model):
    """RecordVersions.

    :ivar record_id:
    :vartype record_id: str
    :ivar versions:
    :vartype versions: list[long]
    """

    _attribute_map = {
        'record_id': {'key': 'recordId', 'type': 'str'},
        'versions': {'key': 'versions', 'type': '[long]'},
    }

    def __init__(
        self,
        *,
        record_id: Optional[str] = None,
        versions: Optional[List[int]] = None,
        **kwargs
    ):
        """
        :keyword record_id:
        :paramtype record_id: str
        :keyword versions:
        :paramtype versions: list[long]
        """
        super(RecordVersions, self).__init__(**kwargs)
        self.record_id = record_id
        self.versions = versions


class ResponseEntity(msrest.serialization.Model):
    """ResponseEntity.

    :ivar body: Any object.
    :vartype body: any
    :ivar status_code: StatusCode. Known values are: "ACCEPTED", "ALREADY_REPORTED", "BAD_GATEWAY",
     "BAD_REQUEST", "BANDWIDTH_LIMIT_EXCEEDED", "CHECKPOINT", "CONFLICT", "CONTINUE", "CREATED",
     "DESTINATION_LOCKED", "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN", "FOUND",
     "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED",
     "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE", "INTERNAL_SERVER_ERROR",
     "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED", "LOOP_DETECTED", "METHOD_FAILURE",
     "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY", "MOVED_TEMPORARILY", "MULTIPLE_CHOICES",
     "MULTI_STATUS", "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION",
     "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED", "NO_CONTENT",
     "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED", "PERMANENT_REDIRECT",
     "PRECONDITION_FAILED", "PRECONDITION_REQUIRED", "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED",
     "REQUESTED_RANGE_NOT_SATISFIABLE", "REQUEST_ENTITY_TOO_LARGE",
     "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT", "REQUEST_URI_TOO_LONG", "RESET_CONTENT",
     "SEE_OTHER", "SERVICE_UNAVAILABLE", "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY",
     "TOO_MANY_REQUESTS", "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY",
     "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY",
     "VARIANT_ALSO_NEGOTIATES".
    :vartype status_code: str or ~azure.oep.storage.models.StatusCode
    :ivar status_code_value:
    :vartype status_code_value: int
    """

    _attribute_map = {
        'body': {'key': 'body', 'type': 'object'},
        'status_code': {'key': 'statusCode', 'type': 'str'},
        'status_code_value': {'key': 'statusCodeValue', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        body: Optional[Any] = None,
        status_code: Optional[Union[str, "_models.StatusCode"]] = None,
        status_code_value: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword body: Any object.
        :paramtype body: any
        :keyword status_code: StatusCode. Known values are: "ACCEPTED", "ALREADY_REPORTED",
         "BAD_GATEWAY", "BAD_REQUEST", "BANDWIDTH_LIMIT_EXCEEDED", "CHECKPOINT", "CONFLICT", "CONTINUE",
         "CREATED", "DESTINATION_LOCKED", "EXPECTATION_FAILED", "FAILED_DEPENDENCY", "FORBIDDEN",
         "FOUND", "GATEWAY_TIMEOUT", "GONE", "HTTP_VERSION_NOT_SUPPORTED", "IM_USED",
         "INSUFFICIENT_SPACE_ON_RESOURCE", "INSUFFICIENT_STORAGE", "INTERNAL_SERVER_ERROR",
         "I_AM_A_TEAPOT", "LENGTH_REQUIRED", "LOCKED", "LOOP_DETECTED", "METHOD_FAILURE",
         "METHOD_NOT_ALLOWED", "MOVED_PERMANENTLY", "MOVED_TEMPORARILY", "MULTIPLE_CHOICES",
         "MULTI_STATUS", "NETWORK_AUTHENTICATION_REQUIRED", "NON_AUTHORITATIVE_INFORMATION",
         "NOT_ACCEPTABLE", "NOT_EXTENDED", "NOT_FOUND", "NOT_IMPLEMENTED", "NOT_MODIFIED", "NO_CONTENT",
         "OK", "PARTIAL_CONTENT", "PAYLOAD_TOO_LARGE", "PAYMENT_REQUIRED", "PERMANENT_REDIRECT",
         "PRECONDITION_FAILED", "PRECONDITION_REQUIRED", "PROCESSING", "PROXY_AUTHENTICATION_REQUIRED",
         "REQUESTED_RANGE_NOT_SATISFIABLE", "REQUEST_ENTITY_TOO_LARGE",
         "REQUEST_HEADER_FIELDS_TOO_LARGE", "REQUEST_TIMEOUT", "REQUEST_URI_TOO_LONG", "RESET_CONTENT",
         "SEE_OTHER", "SERVICE_UNAVAILABLE", "SWITCHING_PROTOCOLS", "TEMPORARY_REDIRECT", "TOO_EARLY",
         "TOO_MANY_REQUESTS", "UNAUTHORIZED", "UNAVAILABLE_FOR_LEGAL_REASONS", "UNPROCESSABLE_ENTITY",
         "UNSUPPORTED_MEDIA_TYPE", "UPGRADE_REQUIRED", "URI_TOO_LONG", "USE_PROXY",
         "VARIANT_ALSO_NEGOTIATES".
        :paramtype status_code: str or ~azure.oep.storage.models.StatusCode
        :keyword status_code_value:
        :paramtype status_code_value: int
        """
        super(ResponseEntity, self).__init__(**kwargs)
        self.body = body
        self.status_code = status_code
        self.status_code_value = status_code_value


class Schema(msrest.serialization.Model):
    """Schema.

    All required parameters must be populated in order to send to Azure.

    :ivar ext: Any object.
    :vartype ext: any
    :ivar kind: Required. Record kind for which the schema information is applied to.
    :vartype kind: str
    :ivar schema:
    :vartype schema: list[~azure.oep.storage.models.SchemaItem]
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'ext': {'key': 'ext', 'type': 'object'},
        'kind': {'key': 'kind', 'type': 'str'},
        'schema': {'key': 'schema', 'type': '[SchemaItem]'},
    }

    def __init__(
        self,
        *,
        kind: str,
        ext: Optional[Any] = None,
        schema: Optional[List["_models.SchemaItem"]] = None,
        **kwargs
    ):
        """
        :keyword ext: Any object.
        :paramtype ext: any
        :keyword kind: Required. Record kind for which the schema information is applied to.
        :paramtype kind: str
        :keyword schema:
        :paramtype schema: list[~azure.oep.storage.models.SchemaItem]
        """
        super(Schema, self).__init__(**kwargs)
        self.ext = ext
        self.kind = kind
        self.schema = schema


class SchemaItem(msrest.serialization.Model):
    """SchemaItem.

    :ivar ext: Any object.
    :vartype ext: any
    :ivar kind:
    :vartype kind: str
    :ivar path:
    :vartype path: str
    :ivar properties:
    :vartype properties: list[~azure.oep.storage.models.SchemaItem]
    """

    _attribute_map = {
        'ext': {'key': 'ext', 'type': 'object'},
        'kind': {'key': 'kind', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '[SchemaItem]'},
    }

    def __init__(
        self,
        *,
        ext: Optional[Any] = None,
        kind: Optional[str] = None,
        path: Optional[str] = None,
        properties: Optional[List["_models.SchemaItem"]] = None,
        **kwargs
    ):
        """
        :keyword ext: Any object.
        :paramtype ext: any
        :keyword kind:
        :paramtype kind: str
        :keyword path:
        :paramtype path: str
        :keyword properties:
        :paramtype properties: list[~azure.oep.storage.models.SchemaItem]
        """
        super(SchemaItem, self).__init__(**kwargs)
        self.ext = ext
        self.kind = kind
        self.path = path
        self.properties = properties


class VersionInfo(msrest.serialization.Model):
    """VersionInfo.

    :ivar artifact_id:
    :vartype artifact_id: str
    :ivar branch:
    :vartype branch: str
    :ivar build_time:
    :vartype build_time: str
    :ivar commit_id:
    :vartype commit_id: str
    :ivar commit_message:
    :vartype commit_message: str
    :ivar connected_outer_services:
    :vartype connected_outer_services: list[~azure.oep.storage.models.ConnectedOuterService]
    :ivar group_id:
    :vartype group_id: str
    :ivar version:
    :vartype version: str
    """

    _attribute_map = {
        'artifact_id': {'key': 'artifactId', 'type': 'str'},
        'branch': {'key': 'branch', 'type': 'str'},
        'build_time': {'key': 'buildTime', 'type': 'str'},
        'commit_id': {'key': 'commitId', 'type': 'str'},
        'commit_message': {'key': 'commitMessage', 'type': 'str'},
        'connected_outer_services': {'key': 'connectedOuterServices', 'type': '[ConnectedOuterService]'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        artifact_id: Optional[str] = None,
        branch: Optional[str] = None,
        build_time: Optional[str] = None,
        commit_id: Optional[str] = None,
        commit_message: Optional[str] = None,
        connected_outer_services: Optional[List["_models.ConnectedOuterService"]] = None,
        group_id: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword artifact_id:
        :paramtype artifact_id: str
        :keyword branch:
        :paramtype branch: str
        :keyword build_time:
        :paramtype build_time: str
        :keyword commit_id:
        :paramtype commit_id: str
        :keyword commit_message:
        :paramtype commit_message: str
        :keyword connected_outer_services:
        :paramtype connected_outer_services: list[~azure.oep.storage.models.ConnectedOuterService]
        :keyword group_id:
        :paramtype group_id: str
        :keyword version:
        :paramtype version: str
        """
        super(VersionInfo, self).__init__(**kwargs)
        self.artifact_id = artifact_id
        self.branch = branch
        self.build_time = build_time
        self.commit_id = commit_id
        self.commit_message = commit_message
        self.connected_outer_services = connected_outer_services
        self.group_id = group_id
        self.version = version
