# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, List, Optional, TypeVar
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_create_or_update_record_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference', _headers.pop('frame-of-reference', None))  # type: Optional[str]
    skipdupes = kwargs.pop('skipdupes', _params.pop('skipdupes', None))  # type: Optional[bool]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records")

    # Construct parameters
    if skipdupes is not None:
        _params['skipdupes'] = _SERIALIZER.query("skipdupes", skipdupes, 'bool')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if frame_of_reference is not None:
        _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_list_record_versions_by_id_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference', _headers.pop('frame-of-reference', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/versions/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if frame_of_reference is not None:
        _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_latest_record_version_by_id_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference', _headers.pop('frame-of-reference', None))  # type: Optional[str]
    attribute = kwargs.pop('attribute', _params.pop('attribute', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attribute is not None:
        _params['attribute'] = _SERIALIZER.query("attribute", attribute, 'str')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if frame_of_reference is not None:
        _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_purge_record_by_id_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference', _headers.pop('frame-of-reference', None))  # type: Optional[str]
    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if frame_of_reference is not None:
        _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_specific_record_version_request(
    id,  # type: str
    version,  # type: int
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference', _headers.pop('frame-of-reference', None))  # type: Optional[str]
    attribute = kwargs.pop('attribute', _params.pop('attribute', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/{id}/{version}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
        "version": _SERIALIZER.url("version", version, 'long'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attribute is not None:
        _params['attribute'] = _SERIALIZER.query("attribute", attribute, 'str')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    if frame_of_reference is not None:
        _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )

# fmt: on
class RecordOperations(object):
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.oep.storage.OepStorageClient`'s
        :attr:`record` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")


    @distributed_trace
    def create_or_update_record(
        self,
        data_partition_id,  # type: str
        frame_of_reference=None,  # type: Optional[str]
        skipdupes=None,  # type: Optional[bool]
        body=None,  # type: Optional[List[_models.Record]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.CreateUpdateRecordsResponse]
        """createOrUpdateRecordsUsingPUT.

        createOrUpdateRecords.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference. Default value is None.
        :type frame_of_reference: str
        :param skipdupes: skipdupes. Default value is None.
        :type skipdupes: bool
        :param body:  Default value is None.
        :type body: list[~azure.oep.storage.models.Record]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CreateUpdateRecordsResponse, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.CreateUpdateRecordsResponse or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.CreateUpdateRecordsResponse]]

        if body is not None:
            _json = self._serialize.body(body, '[Record]')
        else:
            _json = None

        request = build_create_or_update_record_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            json=_json,
            frame_of_reference=frame_of_reference,
            skipdupes=skipdupes,
            template_url=self.create_or_update_record.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 201:
            deserialized = self._deserialize('CreateUpdateRecordsResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update_record.metadata = {'url': "/api/storage/v2/records"}  # type: ignore


    @distributed_trace
    def list_record_versions_by_id(
        self,
        data_partition_id,  # type: str
        id,  # type: str
        frame_of_reference=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.RecordVersions]
        """getRecordVersionsUsingGET.

        getRecordVersions.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param id: id.
        :type id: str
        :param frame_of_reference: reference. Default value is None.
        :type frame_of_reference: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RecordVersions, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.RecordVersions or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.RecordVersions]]

        
        request = build_list_record_versions_by_id_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.list_record_versions_by_id.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('RecordVersions', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_record_versions_by_id.metadata = {'url': "/api/storage/v2/records/versions/{id}"}  # type: ignore


    @distributed_trace
    def get_latest_record_version_by_id(
        self,
        data_partition_id,  # type: str
        id,  # type: str
        frame_of_reference=None,  # type: Optional[str]
        attribute=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[str]
        """getLatestRecordVersionUsingGET.

        getLatestRecordVersion.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param id: id.
        :type id: str
        :param frame_of_reference: reference. Default value is None.
        :type frame_of_reference: str
        :param attribute: attribute. Default value is None.
        :type attribute: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_get_latest_record_version_by_id_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            attribute=attribute,
            template_url=self.get_latest_record_version_by_id.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_latest_record_version_by_id.metadata = {'url': "/api/storage/v2/records/{id}"}  # type: ignore


    @distributed_trace
    def purge_record_by_id(  # pylint: disable=inconsistent-return-statements
        self,
        data_partition_id,  # type: str
        id,  # type: str
        frame_of_reference=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """purgeRecordUsingDELETE.

        purgeRecord.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param id: id.
        :type id: str
        :param frame_of_reference: reference. Default value is None.
        :type frame_of_reference: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_purge_record_by_id_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.purge_record_by_id.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    purge_record_by_id.metadata = {'url': "/api/storage/v2/records/{id}"}  # type: ignore


    @distributed_trace
    def get_specific_record_version(
        self,
        data_partition_id,  # type: str
        id,  # type: str
        version,  # type: int
        frame_of_reference=None,  # type: Optional[str]
        attribute=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[str]
        """getSpecificRecordVersionUsingGET.

        getSpecificRecordVersion.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param id: id.
        :type id: str
        :param version: version.
        :type version: long
        :param frame_of_reference: reference. Default value is None.
        :type frame_of_reference: str
        :param attribute: attribute. Default value is None.
        :type attribute: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_get_specific_record_version_request(
            id=id,
            version=version,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            attribute=attribute,
            template_url=self.get_specific_record_version.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_specific_record_version.metadata = {'url': "/api/storage/v2/records/{id}/{version}"}  # type: ignore

