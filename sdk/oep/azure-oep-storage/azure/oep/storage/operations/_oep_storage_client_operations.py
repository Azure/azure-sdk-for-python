# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, List, Optional, TypeVar
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_health_message_using_get_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    accept = _headers.pop('Accept', "text/plain")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/health")

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_info_using_get_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/info")

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_update_records_metadata_using_patch_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records")

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_or_update_records_using_put_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    skipdupes = kwargs.pop('skipdupes', _params.pop('skipdupes', None))  # type: Optional[bool]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records")

    # Construct parameters
    if skipdupes is not None:
        _params['skipdupes'] = _SERIALIZER.query("skipdupes", skipdupes, 'bool')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_legaltag_changed_using_post_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/push-handlers/legaltag-changed")

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_kinds_using_get_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    cursor = kwargs.pop('cursor', _params.pop('cursor', None))  # type: Optional[str]
    limit = kwargs.pop('limit', _params.pop('limit', None))  # type: Optional[int]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/query/kinds")

    # Construct parameters
    if cursor is not None:
        _params['cursor'] = _SERIALIZER.query("cursor", cursor, 'str')
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_get_all_records_using_get_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    kind = kwargs.pop('kind')  # type: str
    cursor = kwargs.pop('cursor', _params.pop('cursor', None))  # type: Optional[str]
    limit = kwargs.pop('limit', _params.pop('limit', None))  # type: Optional[int]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/query/records")

    # Construct parameters
    if cursor is not None:
        _params['cursor'] = _SERIALIZER.query("cursor", cursor, 'str')
    if limit is not None:
        _params['limit'] = _SERIALIZER.query("limit", limit, 'int')
    _params['kind'] = _SERIALIZER.query("kind", kind, 'str')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_get_records_using_post_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/query/records")

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_fetch_records_using_post_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/query/records:batch")

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_bulk_delete_records_using_post_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/delete")

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_record_versions_using_get_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/versions/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_latest_record_version_using_get_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    attribute = kwargs.pop('attribute', _params.pop('attribute', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attribute is not None:
        _params['attribute'] = _SERIALIZER.query("attribute", attribute, 'str')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_purge_record_using_delete_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/{id}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_specific_record_version_using_get_request(
    id,  # type: str
    version,  # type: int
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    attribute = kwargs.pop('attribute', _params.pop('attribute', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/{id}/{version}")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
        "version": _SERIALIZER.url("version", version, 'long'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if attribute is not None:
        _params['attribute'] = _SERIALIZER.query("attribute", attribute, 'str')

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_delete_record_using_post_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/records/{id}:delete")
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str', pattern=r'^[\w\-\.]+:[\w-\.]+:[\w\-\.\:\%]+$'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_create_schema_using_post_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/schemas")

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_schema_using_get_request(
    kind,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/schemas/{kind}")
    path_format_arguments = {
        "kind": _SERIALIZER.url("kind", kind, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_delete_schema_using_delete_request(
    kind,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    data_partition_id = kwargs.pop('data_partition_id')  # type: str
    frame_of_reference = kwargs.pop('frame_of_reference')  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/api/storage/v2/schemas/{kind}")
    path_format_arguments = {
        "kind": _SERIALIZER.url("kind", kind, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers['data-partition-id'] = _SERIALIZER.header("data_partition_id", data_partition_id, 'str')
    _headers['frame-of-reference'] = _SERIALIZER.header("frame_of_reference", frame_of_reference, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        headers=_headers,
        **kwargs
    )

# fmt: on
class OepStorageClientOperationsMixin(object):

    @distributed_trace
    def health_message_using_get(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[str]
        """healthMessageUsingGET.

        healthMessage.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_health_message_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.health_message_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    health_message_using_get.metadata = {'url': "/api/storage/v2/health"}  # type: ignore


    @distributed_trace
    def info_using_get(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.VersionInfo]
        """infoUsingGET.

        info.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: VersionInfo, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.VersionInfo or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.VersionInfo]]

        
        request = build_info_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.info_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('VersionInfo', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    info_using_get.metadata = {'url': "/api/storage/v2/info"}  # type: ignore


    @distributed_trace
    def update_records_metadata_using_patch(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        body=None,  # type: Optional[_models.RecordBulkUpdateParam]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.BulkUpdateRecordsResponse]
        """updateRecordsMetadataUsingPATCH.

        updateRecordsMetadata.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param body:  Default value is None.
        :type body: ~azure.oep.storage.models.RecordBulkUpdateParam
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BulkUpdateRecordsResponse, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.BulkUpdateRecordsResponse or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.BulkUpdateRecordsResponse]]

        if body is not None:
            _json = self._serialize.body(body, 'RecordBulkUpdateParam')
        else:
            _json = None

        request = build_update_records_metadata_using_patch_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            template_url=self.update_records_metadata_using_patch.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('BulkUpdateRecordsResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_records_metadata_using_patch.metadata = {'url': "/api/storage/v2/records"}  # type: ignore


    @distributed_trace
    def create_or_update_records_using_put(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        skipdupes=None,  # type: Optional[bool]
        body=None,  # type: Optional[List[_models.Record]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.CreateUpdateRecordsResponse]
        """createOrUpdateRecordsUsingPUT.

        createOrUpdateRecords.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param skipdupes: skipdupes. Default value is None.
        :type skipdupes: bool
        :param body:  Default value is None.
        :type body: list[~azure.oep.storage.models.Record]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CreateUpdateRecordsResponse, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.CreateUpdateRecordsResponse or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.CreateUpdateRecordsResponse]]

        if body is not None:
            _json = self._serialize.body(body, '[Record]')
        else:
            _json = None

        request = build_create_or_update_records_using_put_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            skipdupes=skipdupes,
            template_url=self.create_or_update_records_using_put.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 201:
            deserialized = self._deserialize('CreateUpdateRecordsResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update_records_using_put.metadata = {'url': "/api/storage/v2/records"}  # type: ignore


    @distributed_trace
    def legaltag_changed_using_post(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.ResponseEntity]
        """legaltagChangedUsingPOST.

        legaltagChanged.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ResponseEntity, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.ResponseEntity or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.ResponseEntity]]

        
        request = build_legaltag_changed_using_post_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.legaltag_changed_using_post.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('ResponseEntity', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    legaltag_changed_using_post.metadata = {'url': "/api/storage/v2/push-handlers/legaltag-changed"}  # type: ignore


    @distributed_trace
    def get_kinds_using_get(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        cursor=None,  # type: Optional[str]
        limit=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.DatastoreQueryResult]
        """getKindsUsingGET.

        getKinds.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param cursor: cursor. Default value is None.
        :type cursor: str
        :param limit: limit. Default value is None.
        :type limit: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DatastoreQueryResult, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.DatastoreQueryResult or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.DatastoreQueryResult]]

        
        request = build_get_kinds_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            cursor=cursor,
            limit=limit,
            template_url=self.get_kinds_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('DatastoreQueryResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_kinds_using_get.metadata = {'url': "/api/storage/v2/query/kinds"}  # type: ignore


    @distributed_trace
    def get_all_records_using_get(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        kind,  # type: str
        cursor=None,  # type: Optional[str]
        limit=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.DatastoreQueryResult]
        """getAllRecordsUsingGET.

        getAllRecords.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param kind: kind.
        :type kind: str
        :param cursor: cursor. Default value is None.
        :type cursor: str
        :param limit: limit. Default value is None.
        :type limit: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DatastoreQueryResult, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.DatastoreQueryResult or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.DatastoreQueryResult]]

        
        request = build_get_all_records_using_get_request(
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            kind=kind,
            cursor=cursor,
            limit=limit,
            template_url=self.get_all_records_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('DatastoreQueryResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_all_records_using_get.metadata = {'url': "/api/storage/v2/query/records"}  # type: ignore


    @distributed_trace
    def get_records_using_post(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        body=None,  # type: Optional[_models.MultiRecordIds]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.MultiRecordInfo]
        """getRecordsUsingPOST.

        getRecords.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param body:  Default value is None.
        :type body: ~azure.oep.storage.models.MultiRecordIds
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MultiRecordInfo, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.MultiRecordInfo or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.MultiRecordInfo]]

        if body is not None:
            _json = self._serialize.body(body, 'MultiRecordIds')
        else:
            _json = None

        request = build_get_records_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            template_url=self.get_records_using_post.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('MultiRecordInfo', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_records_using_post.metadata = {'url': "/api/storage/v2/query/records"}  # type: ignore


    @distributed_trace
    def fetch_records_using_post(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        body=None,  # type: Optional[_models.MultiRecordRequest]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.MultiRecordResponse]
        """fetchRecordsUsingPOST.

        fetchRecords.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param body:  Default value is None.
        :type body: ~azure.oep.storage.models.MultiRecordRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MultiRecordResponse, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.MultiRecordResponse or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.MultiRecordResponse]]

        if body is not None:
            _json = self._serialize.body(body, 'MultiRecordRequest')
        else:
            _json = None

        request = build_fetch_records_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            template_url=self.fetch_records_using_post.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('MultiRecordResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    fetch_records_using_post.metadata = {'url': "/api/storage/v2/query/records:batch"}  # type: ignore


    @distributed_trace
    def bulk_delete_records_using_post(  # pylint: disable=inconsistent-return-statements
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        body=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """bulkDeleteRecordsUsingPOST.

        bulkDeleteRecords.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param body:  Default value is None.
        :type body: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        if body is not None:
            _json = self._serialize.body(body, '[str]')
        else:
            _json = None

        request = build_bulk_delete_records_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            template_url=self.bulk_delete_records_using_post.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    bulk_delete_records_using_post.metadata = {'url': "/api/storage/v2/records/delete"}  # type: ignore


    @distributed_trace
    def get_record_versions_using_get(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.RecordVersions]
        """getRecordVersionsUsingGET.

        getRecordVersions.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param id: id.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RecordVersions, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.RecordVersions or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.RecordVersions]]

        
        request = build_get_record_versions_using_get_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.get_record_versions_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('RecordVersions', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_record_versions_using_get.metadata = {'url': "/api/storage/v2/records/versions/{id}"}  # type: ignore


    @distributed_trace
    def get_latest_record_version_using_get(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        id,  # type: str
        attribute=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[str]
        """getLatestRecordVersionUsingGET.

        getLatestRecordVersion.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param id: id.
        :type id: str
        :param attribute: attribute. Default value is None.
        :type attribute: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_get_latest_record_version_using_get_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            attribute=attribute,
            template_url=self.get_latest_record_version_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_latest_record_version_using_get.metadata = {'url': "/api/storage/v2/records/{id}"}  # type: ignore


    @distributed_trace
    def purge_record_using_delete(  # pylint: disable=inconsistent-return-statements
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """purgeRecordUsingDELETE.

        purgeRecord.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param id: id.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_purge_record_using_delete_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.purge_record_using_delete.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    purge_record_using_delete.metadata = {'url': "/api/storage/v2/records/{id}"}  # type: ignore


    @distributed_trace
    def get_specific_record_version_using_get(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        id,  # type: str
        version,  # type: int
        attribute=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[str]
        """getSpecificRecordVersionUsingGET.

        getSpecificRecordVersion.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param id: id.
        :type id: str
        :param version: version.
        :type version: long
        :param attribute: attribute. Default value is None.
        :type attribute: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[str]]

        
        request = build_get_specific_record_version_using_get_request(
            id=id,
            version=version,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            attribute=attribute,
            template_url=self.get_specific_record_version_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_specific_record_version_using_get.metadata = {'url': "/api/storage/v2/records/{id}/{version}"}  # type: ignore


    @distributed_trace
    def delete_record_using_post(  # pylint: disable=inconsistent-return-statements
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """deleteRecordUsingPOST.

        deleteRecord.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param id: id.
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_record_using_post_request(
            id=id,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.delete_record_using_post.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_record_using_post.metadata = {'url': "/api/storage/v2/records/{id}:delete"}  # type: ignore


    @distributed_trace
    def create_schema_using_post(  # pylint: disable=inconsistent-return-statements
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        body=None,  # type: Optional[_models.Schema]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """createSchemaUsingPOST.

        createSchema.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param body:  Default value is None.
        :type body: ~azure.oep.storage.models.Schema
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop('content_type', _headers.pop('Content-Type', "application/json"))  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        if body is not None:
            _json = self._serialize.body(body, 'Schema')
        else:
            _json = None

        request = build_create_schema_using_post_request(
            content_type=content_type,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            json=_json,
            template_url=self.create_schema_using_post.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    create_schema_using_post.metadata = {'url': "/api/storage/v2/schemas"}  # type: ignore


    @distributed_trace
    def get_schema_using_get(
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        kind,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[_models.Schema]
        """getSchemaUsingGET.

        getSchema.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param kind: kind.
        :type kind: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Schema, or the result of cls(response)
        :rtype: ~azure.oep.storage.models.Schema or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[_models.Schema]]

        
        request = build_get_schema_using_get_request(
            kind=kind,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.get_schema_using_get.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 401, 403, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Schema', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_schema_using_get.metadata = {'url': "/api/storage/v2/schemas/{kind}"}  # type: ignore


    @distributed_trace
    def delete_schema_using_delete(  # pylint: disable=inconsistent-return-statements
        self,
        data_partition_id,  # type: str
        frame_of_reference,  # type: str
        kind,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """deleteSchemaUsingDELETE.

        deleteSchema.

        :param data_partition_id: tenant.
        :type data_partition_id: str
        :param frame_of_reference: reference.
        :type frame_of_reference: str
        :param kind: kind.
        :type kind: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop('cls', None)  # type: ClsType[None]

        
        request = build_delete_schema_using_delete_request(
            kind=kind,
            data_partition_id=data_partition_id,
            frame_of_reference=frame_of_reference,
            template_url=self.delete_schema_using_delete.metadata['url'],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204, 401, 403]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_schema_using_delete.metadata = {'url': "/api/storage/v2/schemas/{kind}"}  # type: ignore

