# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Column(Model):
    """A table column.

    A column in a table.

    :param name: The name of this column.
    :type name: str
    :param type: The data type of this column.
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, type: str=None, **kwargs) -> None:
        super(Column, self).__init__(**kwargs)
        self.name = name
        self.type = type


class ErrorDetail(Model):
    """Error details.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The error's code.
    :type code: str
    :param message: Required. A human readable error message.
    :type message: str
    :param target: Indicates which property in the request is responsible for
     the error.
    :type target: str
    :param value: Indicates which value in 'target' is responsible for the
     error.
    :type value: str
    :param resources: Indicates resources which were responsible for the
     error.
    :type resources: list[str]
    :param additional_properties: Additional properties that can be provided
     on the error details object
    :type additional_properties: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'resources': {'key': 'resources', 'type': '[str]'},
        'additional_properties': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(self, *, code: str, message: str, target: str=None, value: str=None, resources=None, additional_properties=None, **kwargs) -> None:
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.value = value
        self.resources = resources
        self.additional_properties = additional_properties


class ErrorInfo(Model):
    """The code and message for an error.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. A machine readable error code.
    :type code: str
    :param message: Required. A human readable error message.
    :type message: str
    :param details: error details.
    :type details: list[~azure.loganalytics.models.ErrorDetail]
    :param innererror: Inner error details if they exist.
    :type innererror: ~azure.loganalytics.models.ErrorInfo
    :param additional_properties: Additional properties that can be provided
     on the error info object
    :type additional_properties: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'ErrorInfo'},
        'additional_properties': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(self, *, code: str, message: str, details=None, innererror=None, additional_properties=None, **kwargs) -> None:
        super(ErrorInfo, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details
        self.innererror = innererror
        self.additional_properties = additional_properties


class ErrorResponse(Model):
    """Error details.

    Contains details when the response code indicates an error.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The error details.
    :type error: ~azure.loganalytics.models.ErrorInfo
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorInfo'},
    }

    def __init__(self, *, error, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class MetadataApplication(Model):
    """An Application Insights application.

    Application Insights apps that were part of the metadata request and that
    the user has access to.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the Application Insights app.
    :type id: str
    :param resource_id: Required. The ARM resource ID of the Application
     Insights app.
    :type resource_id: str
    :param name: Required. The name of the Application Insights app.
    :type name: str
    :param region: Required. The Azure region of the Application Insights app.
    :type region: str
    :param related: The related metadata items for the Application Insights
     app.
    :type related: ~azure.loganalytics.models.MetadataApplicationRelated
    """

    _validation = {
        'id': {'required': True},
        'resource_id': {'required': True},
        'name': {'required': True},
        'region': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataApplicationRelated'},
    }

    def __init__(self, *, id: str, resource_id: str, name: str, region: str, related=None, **kwargs) -> None:
        super(MetadataApplication, self).__init__(**kwargs)
        self.id = id
        self.resource_id = resource_id
        self.name = name
        self.region = region
        self.related = related


class MetadataApplicationRelated(Model):
    """The related metadata items for the Application Insights app.

    :param tables: The related tables for the Application Insights app.
    :type tables: list[str]
    :param functions: The related functions for the Application Insights app.
    :type functions: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, functions=None, **kwargs) -> None:
        super(MetadataApplicationRelated, self).__init__(**kwargs)
        self.tables = tables
        self.functions = functions


class MetadataCategory(Model):
    """A metadata category.

    Categories are used to group other metadata entities.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the category
    :type id: str
    :param display_name: Required. The display name of the category
    :type display_name: str
    :param description: The description of the category
    :type description: str
    :param related: The related metadata items for the category
    :type related: ~azure.loganalytics.models.MetadataCategoryRelated
    """

    _validation = {
        'id': {'required': True},
        'display_name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataCategoryRelated'},
    }

    def __init__(self, *, id: str, display_name: str, description: str=None, related=None, **kwargs) -> None:
        super(MetadataCategory, self).__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.description = description
        self.related = related


class MetadataCategoryRelated(Model):
    """The related metadata items for the category.

    :param tables: The tables related to the category
    :type tables: list[str]
    :param functions: The functions related to the category
    :type functions: list[str]
    :param resource_types: The resource types related to the category
    :type resource_types: list[str]
    :param queries: The saved queries related to the category
    :type queries: list[str]
    :param solutions: The Log Analytics solutions related to the category
    :type solutions: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, functions=None, resource_types=None, queries=None, solutions=None, **kwargs) -> None:
        super(MetadataCategoryRelated, self).__init__(**kwargs)
        self.tables = tables
        self.functions = functions
        self.resource_types = resource_types
        self.queries = queries
        self.solutions = solutions


class MetadataFunction(Model):
    """A stored function.

    Functions are stored Kusto queries that can be specified as part of queries
    by using their name.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the function.
    :type id: str
    :param name: Required. The name of the function, to be used in queries.
    :type name: str
    :param parameters: The parameters/arguments of the function, if any.
    :type parameters: str
    :param display_name: The display name of the function.
    :type display_name: str
    :param description: The description of the function.
    :type description: str
    :param body: Required. The KQL body of the function.
    :type body: str
    :param tags: The tags associated with the function.
    :type tags: object
    :param properties: The properties of the function.
    :type properties: object
    :param related: The related metadata items for the function.
    :type related: ~azure.loganalytics.models.MetadataFunctionRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataFunctionRelated'},
    }

    def __init__(self, *, id: str, name: str, body: str, parameters: str=None, display_name: str=None, description: str=None, tags=None, properties=None, related=None, **kwargs) -> None:
        super(MetadataFunction, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.parameters = parameters
        self.display_name = display_name
        self.description = description
        self.body = body
        self.tags = tags
        self.properties = properties
        self.related = related


class MetadataFunctionRelated(Model):
    """The related metadata items for the function.

    :param tables: The related tables for the function.
    :type tables: list[str]
    :param solutions: The related Log Analytics solutions for the function.
    :type solutions: list[str]
    :param resource_types: The related resource types for the function.
    :type resource_types: list[str]
    :param categories: The related categories for the function.
    :type categories: list[str]
    :param workspaces: The related workspaces for the function.
    :type workspaces: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, solutions=None, resource_types=None, categories=None, workspaces=None, **kwargs) -> None:
        super(MetadataFunctionRelated, self).__init__(**kwargs)
        self.tables = tables
        self.solutions = solutions
        self.resource_types = resource_types
        self.categories = categories
        self.workspaces = workspaces


class MetadataPermissions(Model):
    """Permission information.

    Permission information for the metadata call, includes
    apps/workspaces/resource the user didn't have access to.

    All required parameters must be populated in order to send to Azure.

    :param workspaces: Required. The permission indication for the workspaces
     on the metadata request.
    :type workspaces:
     list[~azure.loganalytics.models.MetadataPermissionsWorkspacesItem]
    :param resources: The permission indication for the Azure resources on the
     metadata request.
    :type resources:
     list[~azure.loganalytics.models.MetadataPermissionsResourcesItem]
    :param applications: The permission indication for the Application
     Insights apps on the metadata request.
    :type applications:
     list[~azure.loganalytics.models.MetadataPermissionsApplicationsItem]
    """

    _validation = {
        'workspaces': {'required': True},
    }

    _attribute_map = {
        'workspaces': {'key': 'workspaces', 'type': '[MetadataPermissionsWorkspacesItem]'},
        'resources': {'key': 'resources', 'type': '[MetadataPermissionsResourcesItem]'},
        'applications': {'key': 'applications', 'type': '[MetadataPermissionsApplicationsItem]'},
    }

    def __init__(self, *, workspaces, resources=None, applications=None, **kwargs) -> None:
        super(MetadataPermissions, self).__init__(**kwargs)
        self.workspaces = workspaces
        self.resources = resources
        self.applications = applications


class MetadataPermissionsApplicationsItem(Model):
    """MetadataPermissionsApplicationsItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required. The resource ID on the permission
     indication.
    :type resource_id: str
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(self, *, resource_id: str, **kwargs) -> None:
        super(MetadataPermissionsApplicationsItem, self).__init__(**kwargs)
        self.resource_id = resource_id


class MetadataPermissionsResourcesItem(Model):
    """MetadataPermissionsResourcesItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required. The resource ID on the permission
     indication.
    :type resource_id: str
    :param deny_tables: The list of tables that were denied access for the
     resource ID.
    :type deny_tables: list[str]
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'deny_tables': {'key': 'denyTables', 'type': '[str]'},
    }

    def __init__(self, *, resource_id: str, deny_tables=None, **kwargs) -> None:
        super(MetadataPermissionsResourcesItem, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.deny_tables = deny_tables


class MetadataPermissionsWorkspacesItem(Model):
    """MetadataPermissionsWorkspacesItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required. The resource ID on the permission
     indication.
    :type resource_id: str
    :param deny_tables: The list of tables that were denied access for the
     resource ID.
    :type deny_tables: list[str]
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'deny_tables': {'key': 'denyTables', 'type': '[str]'},
    }

    def __init__(self, *, resource_id: str, deny_tables=None, **kwargs) -> None:
        super(MetadataPermissionsWorkspacesItem, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.deny_tables = deny_tables


class MetadataQuery(Model):
    """A stored query.

    Queries are stored pieces of KQL, along with a list of relevant metadata
    items.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the query.
    :type id: str
    :param display_name: The display name of the query.
    :type display_name: str
    :param description: The description of the query.
    :type description: str
    :param body: Required. The KQL body of the query.
    :type body: str
    :param labels: The user defined labels associated with the query.
    :type labels: list[str]
    :param tags: The tags associated with the query.
    :type tags: object
    :param properties: The properties of the query.
    :type properties: object
    :param related: The related metadata items for the query.
    :type related: ~azure.loganalytics.models.MetadataQueryRelated
    """

    _validation = {
        'id': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataQueryRelated'},
    }

    def __init__(self, *, id: str, body: str, display_name: str=None, description: str=None, labels=None, tags=None, properties=None, related=None, **kwargs) -> None:
        super(MetadataQuery, self).__init__(**kwargs)
        self.id = id
        self.display_name = display_name
        self.description = description
        self.body = body
        self.labels = labels
        self.tags = tags
        self.properties = properties
        self.related = related


class MetadataQueryRelated(Model):
    """The related metadata items for the query.

    :param categories: The related categories for the query.
    :type categories: list[str]
    :param solutions: The related Log Analytics solutions for the query.
    :type solutions: list[str]
    :param resource_types: The related resource types for the query.
    :type resource_types: list[str]
    :param tables: The related tables for the query.
    :type tables: list[str]
    """

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'tables': {'key': 'tables', 'type': '[str]'},
    }

    def __init__(self, *, categories=None, solutions=None, resource_types=None, tables=None, **kwargs) -> None:
        super(MetadataQueryRelated, self).__init__(**kwargs)
        self.categories = categories
        self.solutions = solutions
        self.resource_types = resource_types
        self.tables = tables


class MetadataResourceType(Model):
    """A type of resource in Azure.

    Metadata about types of Azure resources, containing relevant tables,
    functions, etc.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the resource-type
    :type id: str
    :param type: Required. The type of the resource-type
    :type type: str
    :param display_name: The display name of the resource-type
    :type display_name: str
    :param description: The description of the resource-type
    :type description: str
    :param labels: The user-defined labels of the resource-type
    :type labels: list[str]
    :param tags: The tags associated with the resource-type
    :type tags: object
    :param properties: The properties of the resource-type
    :type properties: object
    :param related: The related metadata items for the resource-type
    :type related: ~azure.loganalytics.models.MetadataResourceTypeRelated
    """

    _validation = {
        'id': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataResourceTypeRelated'},
    }

    def __init__(self, *, id: str, type: str, display_name: str=None, description: str=None, labels=None, tags=None, properties=None, related=None, **kwargs) -> None:
        super(MetadataResourceType, self).__init__(**kwargs)
        self.id = id
        self.type = type
        self.display_name = display_name
        self.description = description
        self.labels = labels
        self.tags = tags
        self.properties = properties
        self.related = related


class MetadataResourceTypeRelated(Model):
    """The related metadata items for the resource-type.

    :param tables: The tables related to the resource-type
    :type tables: list[str]
    :param functions: The functions related to the resource-type
    :type functions: list[str]
    :param categories: The categories related to the resource-type
    :type categories: list[str]
    :param queries: The queries related to the resource-type
    :type queries: list[str]
    :param workspaces: The Log Analytics workspaces related to the
     resource-type
    :type workspaces: list[str]
    :param resources: The Azure resources related to the resource-type
    :type resources: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
        'resources': {'key': 'resources', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, functions=None, categories=None, queries=None, workspaces=None, resources=None, **kwargs) -> None:
        super(MetadataResourceTypeRelated, self).__init__(**kwargs)
        self.tables = tables
        self.functions = functions
        self.categories = categories
        self.queries = queries
        self.workspaces = workspaces
        self.resources = resources


class MetadataResults(Model):
    """A metadata response.

    The metadata response for the app, including available tables, etc.

    :param categories: The list of categories that are referenced in this
     metadata response.
    :type categories: list[~azure.loganalytics.models.MetadataCategory]
    :param resource_types: The list of resource types that are referenced in
     this metadata response.
    :type resource_types:
     list[~azure.loganalytics.models.MetadataResourceType]
    :param solutions: The list of Log Analytics solutions installed on the
     workspace.
    :type solutions: list[~azure.loganalytics.models.MetadataSolution]
    :param tables: The list of tables and columns that comprise the schema of
     the workspace.
    :type tables: list[~azure.loganalytics.models.MetadataTable]
    :param functions: The list of functions stored on the workspace, or
     introduced by solutions etc.
    :type functions: list[~azure.loganalytics.models.MetadataFunction]
    :param queries: The list of saved queries stored on the workspace, or
     introduced by solutions, resource types, etc.
    :type queries: list[~azure.loganalytics.models.MetadataQuery]
    :param applications: The list of Application Insights apps that were
     referenced in the metadata request.
    :type applications: list[~azure.loganalytics.models.MetadataApplication]
    :param workspaces: The list of Log Analytics workspaces that were
     referenced in the metadata request.
    :type workspaces: list[~azure.loganalytics.models.MetadataWorkspace]
    :param resources: The list of Azure resources that were referenced in the
     metadata request.
    :type resources: list[object]
    :param permissions: The list of permission rules that affected the
     metadata request.
    :type permissions: list[~azure.loganalytics.models.MetadataPermissions]
    """

    _validation = {
        'categories': {'unique': True},
        'resource_types': {'unique': True},
        'solutions': {'unique': True},
        'tables': {'unique': True},
        'functions': {'unique': True},
        'queries': {'unique': True},
        'applications': {'unique': True},
        'workspaces': {'unique': True},
        'resources': {'unique': True},
        'permissions': {'unique': True},
    }

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[MetadataCategory]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[MetadataResourceType]'},
        'solutions': {'key': 'solutions', 'type': '[MetadataSolution]'},
        'tables': {'key': 'tables', 'type': '[MetadataTable]'},
        'functions': {'key': 'functions', 'type': '[MetadataFunction]'},
        'queries': {'key': 'queries', 'type': '[MetadataQuery]'},
        'applications': {'key': 'applications', 'type': '[MetadataApplication]'},
        'workspaces': {'key': 'workspaces', 'type': '[MetadataWorkspace]'},
        'resources': {'key': 'resources', 'type': '[object]'},
        'permissions': {'key': 'permissions', 'type': '[MetadataPermissions]'},
    }

    def __init__(self, *, categories=None, resource_types=None, solutions=None, tables=None, functions=None, queries=None, applications=None, workspaces=None, resources=None, permissions=None, **kwargs) -> None:
        super(MetadataResults, self).__init__(**kwargs)
        self.categories = categories
        self.resource_types = resource_types
        self.solutions = solutions
        self.tables = tables
        self.functions = functions
        self.queries = queries
        self.applications = applications
        self.workspaces = workspaces
        self.resources = resources
        self.permissions = permissions


class MetadataSolution(Model):
    """A Log Analytics solution.

    Solutions can group tables and functions that are associated with a certain
    Azure Log Analytics offering.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the Log Analytics solution
    :type id: str
    :param name: Required. The name of the Log Analytics solution
    :type name: str
    :param display_name: The display name of the Log Analytics solution
    :type display_name: str
    :param description: The description of the Log Analytics solution
    :type description: str
    :param tags: The tags that are associated with the Log Analytics solution
    :type tags: object
    :param properties: The properties of the Log Analytics solution
    :type properties: object
    :param related: Required. The related metadata items for the Log Analytics
     solution
    :type related: ~azure.loganalytics.models.MetadataSolutionRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'related': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataSolutionRelated'},
    }

    def __init__(self, *, id: str, name: str, related, display_name: str=None, description: str=None, tags=None, properties=None, **kwargs) -> None:
        super(MetadataSolution, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.display_name = display_name
        self.description = description
        self.tags = tags
        self.properties = properties
        self.related = related


class MetadataSolutionRelated(Model):
    """The related metadata items for the Log Analytics solution.

    All required parameters must be populated in order to send to Azure.

    :param tables: Required. The tables related to the Log Analytics solution
    :type tables: list[str]
    :param functions: The functions related to the Log Analytics solution
    :type functions: list[str]
    :param categories: The categories related to the Log Analytics solution
    :type categories: list[str]
    :param queries: The saved queries related to the Log Analytics solution
    :type queries: list[str]
    :param workspaces: The Workspaces referenced in the metadata request that
     are related to the Log Analytics solution
    :type workspaces: list[str]
    """

    _validation = {
        'tables': {'required': True},
    }

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(self, *, tables, functions=None, categories=None, queries=None, workspaces=None, **kwargs) -> None:
        super(MetadataSolutionRelated, self).__init__(**kwargs)
        self.tables = tables
        self.functions = functions
        self.categories = categories
        self.queries = queries
        self.workspaces = workspaces


class MetadataTable(Model):
    """A data table that takes part in a workspace schema.

    Tables are part of the workspace schema, and contain a list of columns and
    a reference to other relevant metadata items.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the table
    :type id: str
    :param name: Required. The name of the table
    :type name: str
    :param description: The description of the table
    :type description: str
    :param timespan_column: The column associated with the timespan query
     parameter for the table
    :type timespan_column: str
    :param labels: The user defined labels of the table
    :type labels: list[str]
    :param tags: The tags associated with the table
    :type tags: object
    :param properties: The properties of the table
    :type properties: object
    :param columns: The list of columns defined on the table
    :type columns: list[~azure.loganalytics.models.MetadataTableColumnsItem]
    :param related: The related metadata items for the table
    :type related: ~azure.loganalytics.models.MetadataTableRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'timespan_column': {'key': 'timespanColumn', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'columns': {'key': 'columns', 'type': '[MetadataTableColumnsItem]'},
        'related': {'key': 'related', 'type': 'MetadataTableRelated'},
    }

    def __init__(self, *, id: str, name: str, description: str=None, timespan_column: str=None, labels=None, tags=None, properties=None, columns=None, related=None, **kwargs) -> None:
        super(MetadataTable, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.description = description
        self.timespan_column = timespan_column
        self.labels = labels
        self.tags = tags
        self.properties = properties
        self.columns = columns
        self.related = related


class MetadataTableColumnsItem(Model):
    """MetadataTableColumnsItem.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the column
    :type name: str
    :param description: The description of the column
    :type description: str
    :param type: Required. The data type of the column. Possible values
     include: 'bool', 'datetime', 'dynamic', 'int', 'long', 'real', 'string'
    :type type: str or ~azure.loganalytics.models.MetadataColumnDataType
    :param is_preferred_facet: A flag indicating this column is a preferred
     facet
    :type is_preferred_facet: bool
    :param source: an indication of the source of the column, used only when
     multiple workspaces have conflicting definition for the column
    :type source: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'is_preferred_facet': {'key': 'isPreferredFacet', 'type': 'bool'},
        'source': {'key': 'source', 'type': 'object'},
    }

    def __init__(self, *, name: str, type, description: str=None, is_preferred_facet: bool=None, source=None, **kwargs) -> None:
        super(MetadataTableColumnsItem, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.type = type
        self.is_preferred_facet = is_preferred_facet
        self.source = source


class MetadataTableRelated(Model):
    """The related metadata items for the table.

    :param categories: The related categories for the table
    :type categories: list[str]
    :param solutions: The related Log Analytics solutions for the table
    :type solutions: list[str]
    :param resource_types: The related resource types for the table
    :type resource_types: list[str]
    :param workspaces: The related Log Analytics workspaces for the table
    :type workspaces: list[str]
    :param functions: The related functions for the table
    :type functions: list[str]
    :param queries: The related saved queries for the table
    :type queries: list[str]
    """

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
    }

    def __init__(self, *, categories=None, solutions=None, resource_types=None, workspaces=None, functions=None, queries=None, **kwargs) -> None:
        super(MetadataTableRelated, self).__init__(**kwargs)
        self.categories = categories
        self.solutions = solutions
        self.resource_types = resource_types
        self.workspaces = workspaces
        self.functions = functions
        self.queries = queries


class MetadataWorkspace(Model):
    """A Log Analytics workspace.

    Log Analytics workspaces that were part of the metadata request and that
    the user has access to.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the Log Analytics workspace.
    :type id: str
    :param resource_id: Required. The ARM resource ID of the Log Analytics
     workspace.
    :type resource_id: str
    :param name: Required. The name of the Log Analytics workspace.
    :type name: str
    :param region: Required. The Azure region of the Log Analytics workspace.
    :type region: str
    :param related: The related metadata items for the Log Analytics
     workspace.
    :type related: ~azure.loganalytics.models.MetadataWorkspaceRelated
    """

    _validation = {
        'id': {'required': True},
        'resource_id': {'required': True},
        'name': {'required': True},
        'region': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataWorkspaceRelated'},
    }

    def __init__(self, *, id: str, resource_id: str, name: str, region: str, related=None, **kwargs) -> None:
        super(MetadataWorkspace, self).__init__(**kwargs)
        self.id = id
        self.resource_id = resource_id
        self.name = name
        self.region = region
        self.related = related


class MetadataWorkspaceRelated(Model):
    """The related metadata items for the Log Analytics workspace.

    :param tables: The related tables for the Log Analytics workspace.
    :type tables: list[str]
    :param solutions: The related Log Analytics solutions for the Log
     Analytics workspace.
    :type solutions: list[str]
    :param resource_types: The related resource types for the Log Analytics
     workspace.
    :type resource_types: list[str]
    :param functions: The related functions for the Log Analytics workspace.
    :type functions: list[str]
    :param resources: The related Azure resources for the Log Analytics
     workspace.
    :type resources: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'resources': {'key': 'resources', 'type': '[str]'},
    }

    def __init__(self, *, tables=None, solutions=None, resource_types=None, functions=None, resources=None, **kwargs) -> None:
        super(MetadataWorkspaceRelated, self).__init__(**kwargs)
        self.tables = tables
        self.solutions = solutions
        self.resource_types = resource_types
        self.functions = functions
        self.resources = resources


class QueryBody(Model):
    """The Analytics query. Learn more about the [Analytics query
    syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/).

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The query to execute.
    :type query: str
    :param timespan: Optional. The timespan over which to query data. This is
     an ISO8601 time period value.  This timespan is applied in addition to any
     that are specified in the query expression.
    :type timespan: str
    :param workspaces: A list of workspaces that are included in the query.
    :type workspaces: list[str]
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'timespan': {'key': 'timespan', 'type': 'str'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(self, *, query: str, timespan: str=None, workspaces=None, **kwargs) -> None:
        super(QueryBody, self).__init__(**kwargs)
        self.query = query
        self.timespan = timespan
        self.workspaces = workspaces


class QueryResults(Model):
    """A query response.

    Contains the tables, columns & rows resulting from a query.

    All required parameters must be populated in order to send to Azure.

    :param tables: Required. The list of tables, columns and rows.
    :type tables: list[~azure.loganalytics.models.Table]
    """

    _validation = {
        'tables': {'required': True},
    }

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[Table]'},
    }

    def __init__(self, *, tables, **kwargs) -> None:
        super(QueryResults, self).__init__(**kwargs)
        self.tables = tables


class Table(Model):
    """A query response table.

    Contains the columns and rows for one table in a query response.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the table.
    :type name: str
    :param columns: Required. The list of columns in this table.
    :type columns: list[~azure.loganalytics.models.Column]
    :param rows: Required. The resulting rows from this query.
    :type rows: list[list[object]]
    """

    _validation = {
        'name': {'required': True},
        'columns': {'required': True},
        'rows': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'columns': {'key': 'columns', 'type': '[Column]'},
        'rows': {'key': 'rows', 'type': '[[object]]'},
    }

    def __init__(self, *, name: str, columns, rows, **kwargs) -> None:
        super(Table, self).__init__(**kwargs)
        self.name = name
        self.columns = columns
        self.rows = rows
