# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CustomPageWidget(_model_base.Model):
    """Paged collection of Widget items.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Widget items on this page. Required.
    :vartype value: list[~azure.contosowidgetmanager.models.Widget]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["_models.Widget"] = rest_field()
    """The Widget items on this page. Required. """
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items. """


class Error(_model_base.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
     Required.
    :vartype details: list[~azure.contosowidgetmanager.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.contosowidgetmanager.models.InnerError
    """

    code: str = rest_field()
    """One of a server-defined set of error codes. Required. """
    message: str = rest_field()
    """A human-readable representation of the error. Required. """
    target: Optional[str] = rest_field()
    """The target of the error. """
    details: List["_models.Error"] = rest_field()
    """An array of details about specific errors that led to this reported error. Required. """
    innererror: Optional["_models.InnerError"] = rest_field()
    """An object containing more specific information than the current object about the error. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        details: List["_models.Error"],
        target: Optional[str] = None,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FakedSharedModel(_model_base.Model):
    """Faked shared model.

    All required parameters must be populated in order to send to Azure.

    :ivar tag: The tag. Required.
    :vartype tag: str
    :ivar created_date: The created date. Required.
    :vartype created_date: ~datetime.datetime
    """

    tag: str = rest_field()
    """The tag. Required. """
    created_date: datetime.datetime = rest_field(name="createdDate")
    """The created date. Required. """

    @overload
    def __init__(
        self,
        *,
        tag: str,
        created_date: datetime.datetime,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InnerError(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API
    guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar innererror: Inner error.
    :vartype innererror: ~azure.contosowidgetmanager.models.InnerError
    """

    code: str = rest_field()
    """One of a server-defined set of error codes. Required. """
    innererror: Optional["_models.InnerError"] = rest_field()
    """Inner error. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationStatusError(_model_base.Model):
    """Provides status details for long running operations.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "InProgress",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.contosowidgetmanager.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.contosowidgetmanager.models.Error
    """

    id: str = rest_field(readonly=True)
    """The unique ID of the operation. Required. """
    status: Union[str, "_models.OperationState"] = rest_field()
    """The status of the operation. Required. Known values are: \"InProgress\", \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional["_models.Error"] = rest_field()
    """Error object that describes the error when status is \"Failed\". """

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.OperationState"],
        error: Optional["_models.Error"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Widget(_model_base.Model):
    """Widget.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The widget name. Required.
    :vartype name: str
    :ivar manufacturer_id: The ID of the widget's manufacturer. Required.
    :vartype manufacturer_id: str
    :ivar shared_model: The faked shared model.
    :vartype shared_model: ~azure.contosowidgetmanager.models.FakedSharedModel
    """

    name: str = rest_field(readonly=True)
    """The widget name. Required. """
    manufacturer_id: str = rest_field(name="manufacturerId")
    """The ID of the widget's manufacturer. Required. """
    shared_model: Optional["_models.FakedSharedModel"] = rest_field(name="sharedModel")
    """The faked shared model. """

    @overload
    def __init__(
        self,
        *,
        manufacturer_id: str,
        shared_model: Optional["_models.FakedSharedModel"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class WidgetWidgetError(_model_base.Model):
    """WidgetWidgetError.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "InProgress",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.contosowidgetmanager.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.contosowidgetmanager.models.Error
    :ivar result: The result of the operation.
    :vartype result: ~azure.contosowidgetmanager.models.Widget
    :ivar widget_name: The widget name. Required.
    :vartype widget_name: str
    """

    id: str = rest_field(readonly=True)
    """The unique ID of the operation. Required. """
    status: Union[str, "_models.OperationState"] = rest_field()
    """The status of the operation. Required. Known values are: \"InProgress\", \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional["_models.Error"] = rest_field()
    """Error object that describes the error when status is \"Failed\". """
    result: Optional["_models.Widget"] = rest_field()
    """The result of the operation. """
    widget_name: str = rest_field(name="widgetName", readonly=True)
    """The widget name. Required. """

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.OperationState"],
        error: Optional["_models.Error"] = None,
        result: Optional["_models.Widget"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
