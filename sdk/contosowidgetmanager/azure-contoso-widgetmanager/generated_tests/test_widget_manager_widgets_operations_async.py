# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import WidgetManagerPreparer
from testpreparer_async import WidgetManagerClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestWidgetManagerWidgetsOperationsAsync(WidgetManagerClientTestBaseAsync):
    @WidgetManagerPreparer()
    @recorded_by_proxy_async
    async def test_widgets_get_widget(self, widgetmanager_endpoint):
        client = self.create_async_client(endpoint=widgetmanager_endpoint)
        response = await client.widgets.get_widget(
            widget_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @WidgetManagerPreparer()
    @recorded_by_proxy_async
    async def test_widgets_get_widget_operation_status(self, widgetmanager_endpoint):
        client = self.create_async_client(endpoint=widgetmanager_endpoint)
        response = await client.widgets.get_widget_operation_status(
            widget_name="str",
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @WidgetManagerPreparer()
    @recorded_by_proxy_async
    async def test_widgets_begin_create_or_update_widget(self, widgetmanager_endpoint):
        client = self.create_async_client(endpoint=widgetmanager_endpoint)
        response = await (
            await client.widgets.begin_create_or_update_widget(
                widget_name="str",
                resource={
                    "manufacturerId": "str",
                    "name": "str",
                    "sharedModel": {"createdAt": "2020-02-20 00:00:00", "tag": "str"},
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @WidgetManagerPreparer()
    @recorded_by_proxy_async
    async def test_widgets_begin_delete_widget(self, widgetmanager_endpoint):
        client = self.create_async_client(endpoint=widgetmanager_endpoint)
        response = await (
            await client.widgets.begin_delete_widget(
                widget_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @WidgetManagerPreparer()
    @recorded_by_proxy_async
    async def test_widgets_list_widgets(self, widgetmanager_endpoint):
        client = self.create_async_client(endpoint=widgetmanager_endpoint)
        response = client.widgets.list_widgets()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
