# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Mapping, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ODataV4Format

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class FakedSharedModel(_Model):
    """Faked shared model.

    :ivar tag: The tag. Required.
    :vartype tag: str
    :ivar created_at: The created date. Required.
    :vartype created_at: ~datetime.datetime
    """

    tag: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tag. Required."""
    created_at: datetime.datetime = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The created date. Required."""

    @overload
    def __init__(
        self,
        *,
        tag: str,
        created_at: datetime.datetime,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceOperationStatusWidgetSuiteWidgetSuiteError(_Model):  # pylint: disable=name-too-long
    """Provides status details for long running operations.

    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "NotStarted", "Running",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.contoso.widgetmanager.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.core.ODataV4Format
    :ivar result: The result of the operation.
    :vartype result: ~azure.contoso.widgetmanager.models.WidgetSuite
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique ID of the operation. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the operation. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error object that describes the error when status is \"Failed\"."""
    result: Optional["_models.WidgetSuite"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The result of the operation."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationState"],
        error: Optional[ODataV4Format] = None,
        result: Optional["_models.WidgetSuite"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WidgetSuite(_Model):
    """A widget.

    :ivar name: The widget name. Required.
    :vartype name: str
    :ivar manufacturer_id: The ID of the widget's manufacturer. Required.
    :vartype manufacturer_id: str
    :ivar shared_model: The faked shared model.
    :vartype shared_model: ~azure.contoso.widgetmanager.models.FakedSharedModel
    """

    name: str = rest_field(visibility=["read"])
    """The widget name. Required."""
    manufacturer_id: str = rest_field(name="manufacturerId", visibility=["read", "create", "update", "delete", "query"])
    """The ID of the widget's manufacturer. Required."""
    shared_model: Optional["_models.FakedSharedModel"] = rest_field(
        name="sharedModel", visibility=["read", "create", "update", "delete", "query"]
    )
    """The faked shared model."""

    @overload
    def __init__(
        self,
        *,
        manufacturer_id: str,
        shared_model: Optional["_models.FakedSharedModel"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
