{
  "swagger": "2.0",
  "info": {
    "title": "Microsoft Cognitive Language Service",
    "description": "The language service API is a suite of natural language processing (NLP) skills built with best-in-class Microsoft machine learning algorithms.  The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction, language detection and question answering. Further documentation can be found in <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview\">https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview</a>.0",
    "version": "2022-04-01-preview"
  },
  "securityDefinitions": {
    "apim_key": {
      "type": "apiKey",
      "description": "A subscription key for a Language service resource.",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    }
  },
  "security": [
    {
      "apim_key": []
    }
  ],
  "x-ms-parameterized-host": {
    "hostTemplate": "{Endpoint}/language",
    "useSchemePrefix": false,
    "parameters": [
      {
        "$ref": "common.json#/parameters/Endpoint"
      }
    ]
  },
  "paths": {
    "/:analyze-text": {
      "post": {
        "summary": "Request text analysis over a collection of documents.",
        "description": "Submit a collection of text documents for analysis.  Specify a single unique task to be executed immediately.",
        "operationId": "AnalyzeText",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "common.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/ShowStats"
          },
          {
            "description": "Collection of documents to analyze and a single task to execute.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextTask"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful call result",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextTaskResult"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "common.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Entity Linking Request": {
            "$ref": "./examples/SuccessfulEntityLinkingRequest.json"
          },
          "Successful Entity Recognition Request": {
            "$ref": "./examples/SuccessfulEntityRecognitionRequest.json"
          },
          "Successful Key Phrase Extraction Request": {
            "$ref": "./examples/SuccessfulKeyPhraseExtractionRequest.json"
          },
          "Successful PII Entity Recognition Request": {
            "$ref": "./examples/SuccessfulPiiEntityRecognitionRequest.json"
          },
          "Successful Language Detection Request": {
            "$ref": "./examples/SuccessfulLanguageDetectionRequest.json"
          },
          "Successful Sentiment Analysis Request": {
            "$ref": "./examples/SuccessfulSentimentAnalysisRequest.json"
          }
        }
      }
    },
    "/analyze-text/jobs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "description": "Submit a collection of text documents for analysis. Specify one or more unique tasks to be executed as a long-running operation.",
        "operationId": "AnalyzeText_SubmitJob",
        "summary": "Submit text analysis job",
        "parameters": [
          {
            "$ref": "common.json#/parameters/ApiVersionParameter"
          },
          {
            "description": "Collection of documents to analyze and one or more tasks to execute.",
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextJobsInput"
            },
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "A successful call results with an Operation-Location header used to check the status of the analysis job.",
            "headers": {
              "Operation-Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": {
              "$ref": "common.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Submit Analysis Job Request": {
            "$ref": "./examples/SuccessfulAnalyzeTextJobsMultipleTaskSubmitRequest.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    },
    "/analyze-text/jobs/{jobId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "description": "Get the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task.",
        "operationId": "AnalyzeText_JobStatus",
        "summary": "Get analysis status and results",
        "parameters": [
          {
            "$ref": "common.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/JobId"
          },
          {
            "$ref": "#/parameters/ShowStats"
          },
          {
            "$ref": "common.json#/parameters/TopParameter"
          },
          {
            "$ref": "common.json#/parameters/SkipParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis job status and metadata.",
            "schema": {
              "$ref": "#/definitions/AnalyzeTextJobState"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "common.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Get Text Analysis Job Status Request": {
            "$ref": "./examples/SuccessfulAnalyzeTextJobsMultipleTaskStatusRequest.json"
          }
        }
      }
    },
    "/analyze-text/jobs/{jobId}:cancel": {
      "post": {
        "produces": [
          "application/json"
        ],
        "description": "Cancel a long-running Text Analysis job.",
        "operationId": "AnalyzeText_CancelJob",
        "summary": "Cancel a long-running Text Analysis job",
        "parameters": [
          {
            "$ref": "common.json#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/JobId"
          }
        ],
        "responses": {
          "202": {
            "description": "Cancel Job request has been received.",
            "headers": {
              "Operation-Location": {
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "common.json#/definitions/ErrorResponse"
            }
          }
        },
        "x-ms-examples": {
          "Successful Job Delete Request": {
            "$ref": ".//examples//SuccessfulAnalyzeTextJobsCancelRequest.json"
          }
        },
        "x-ms-long-running-operation": true
      }
    }
  },
  "definitions": {
    "AnalyzeTextTaskKind": {
      "type": "string",
      "description": "Enumeration of supported Text Analysis tasks.",
      "enum": [
        "SentimentAnalysis",
        "EntityRecognition",
        "PiiEntityRecognition",
        "KeyPhraseExtraction",
        "LanguageDetection",
        "EntityLinking"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextTaskKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextLROTaskKind": {
      "type": "string",
      "description": "Enumeration of supported long-running Text Analysis tasks.",
      "enum": [
        "SentimentAnalysis",
        "EntityRecognition",
        "PiiEntityRecognition",
        "KeyPhraseExtraction",
        "EntityLinking",
        "Healthcare",
        "ExtractiveSummarization",
        "CustomEntityRecognition",
        "CustomSingleLabelClassification",
        "CustomMultiLabelClassification"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextLROTaskKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextTaskResultsKind": {
      "type": "string",
      "description": "Enumeration of supported Text Analysis task results.",
      "enum": [
        "SentimentAnalysisResults",
        "EntityRecognitionResults",
        "PiiEntityRecognitionResults",
        "KeyPhraseExtractionResults",
        "LanguageDetectionResults",
        "EntityLinkingResults"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextTaskResultsKind",
        "modelAsString": true
      }
    },
    "AnalyzeTextLROResultsKind": {
      "type": "string",
      "description": "Enumeration of supported Text Analysis long-running operation task results.",
      "enum": [
        "SentimentAnalysisLROResults",
        "EntityRecognitionLROResults",
        "PiiEntityRecognitionLROResults",
        "KeyPhraseExtractionLROResults",
        "EntityLinkingLROResults",
        "HealthcareLROResults",
        "ExtractiveSummarizationLROResults",
        "CustomEntityRecognitionLROResults",
        "CustomSingleLabelClassificationLROResults",
        "CustomMultiLabelClassificationLROResults"
      ],
      "x-ms-enum": {
        "name": "AnalyzeTextLROResultsKind",
        "modelAsString": true
      }
    },
    "MultiLanguageAnalysisInput": {
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MultiLanguageInput"
          }
        }
      }
    },
    "LanguageDetectionAnalysisInput": {
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageInput"
          }
        }
      }
    },
    "AnalyzeTextTask": {
      "discriminator": "kind",
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextTaskKind"
        }
      }
    },
    "AnalyzeTextLROTask": {
      "discriminator": "kind",
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextLROTaskKind"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TaskIdentifier"
        }
      ]
    },
    "AnalyzeTextTaskResult": {
      "discriminator": "kind",
      "required": [
        "kind"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextTaskResultsKind"
        }
      }
    },
    "AnalyzeTextEntityLinkingInput": {
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/EntityLinkingTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "EntityLinking"
    },
    "AnalyzeTextEntityRecognitionInput": {
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/EntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "EntityRecognition"
    },
    "AnalyzeTextKeyPhraseExtractionInput": {
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/KeyPhraseTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "KeyPhraseExtraction"
    },
    "AnalyzeTextPiiEntitiesRecognitionInput": {
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/PiiTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "PiiEntityRecognition"
    },
    "AnalyzeTextLanguageDetectionInput": {
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/LanguageDetectionAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/LanguageDetectionTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "LanguageDetection"
    },
    "AnalyzeTextSentimentAnalysisInput": {
      "properties": {
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "parameters": {
          "$ref": "#/definitions/SentimentAnalysisTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTask"
        }
      ],
      "x-ms-discriminator-value": "SentimentAnalysis"
    },
    "AnalyzeTextJobsInput": {
      "properties": {
        "displayName": {
          "description": "Optional display name for the analysis job.",
          "type": "string"
        },
        "analysisInput": {
          "$ref": "#/definitions/MultiLanguageAnalysisInput"
        },
        "tasks": {
          "description": "The set of tasks to execute on the input documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnalyzeTextLROTask"
          }
        }
      },
      "required": [
        "analysisInput",
        "tasks"
      ]
    },
    "TaskIdentifier": {
      "type": "object",
      "description": "Base task object.",
      "properties": {
        "taskName": {
          "type": "string"
        }
      }
    },
    "TaskParameters": {
      "type": "object",
      "description": "Base parameters object for a text analysis task.",
      "properties": {
        "loggingOptOut": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "PreBuiltTaskParameters": {
      "type": "object",
      "description": "Parameters object for a text analysis task using pre-built models.",
      "properties": {
        "modelVersion": {
          "type": "string",
          "default": "latest"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TaskParameters"
        }
      ]
    },
    "PreBuiltResult": {
      "properties": {
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "modelVersion": {
          "type": "string",
          "description": "This field indicates which model is used for scoring."
        }
      },
      "required": [
        "errors",
        "modelVersion"
      ]
    },
    "CustomTaskParameters": {
      "type": "object",
      "description": "Parameters object for a text analysis task using custom models.",
      "properties": {
        "projectName": {
          "type": "string"
        },
        "deploymentName": {
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TaskParameters"
        }
      ],
      "required": [
        "projectName",
        "deploymentName"
      ]
    },
    "CustomResult": {
      "properties": {
        "errors": {
          "type": "array",
          "description": "Errors by document id.",
          "items": {
            "$ref": "#/definitions/DocumentError"
          }
        },
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        },
        "projectName": {
          "type": "string",
          "description": "This field indicates the project name for the model."
        },
        "deploymentName": {
          "type": "string",
          "description": "This field indicates the deployment name for the model."
        }
      },
      "required": [
        "errors",
        "projectName",
        "deploymentName"
      ]
    },
    "CustomEntitiesTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Entities task.",
      "properties": {
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomEntitiesLROTask": {
      "type": "object",
      "description": "Use custom models to ease the process of information extraction from unstructured documents like contracts or financial documents",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomEntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomEntityRecognition"
    },
    "CustomEntitiesResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/EntitiesDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "CustomSingleLabelClassificationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Single Classification task.",
      "allOf": [
        {
          "$ref": "#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomSingleLabelClassificationLROTask": {
      "type": "object",
      "description": "Use custom models to classify text into single label taxonomy",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomSingleLabelClassificationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomSingleLabelClassification"
    },
    "CustomSingleLabelClassificationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/SingleClassificationDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "SingleClassificationDocumentResult": {
      "type": "object",
      "properties": {
        "class": {
          "$ref": "#/definitions/ClassificationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "class"
      ]
    },
    "ClassificationResult": {
      "type": "object",
      "required": [
        "category",
        "confidenceScore"
      ],
      "properties": {
        "category": {
          "type": "string",
          "description": "Classification type."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the recognized class."
        }
      }
    },
    "CustomMultiLabelClassificationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Custom Multi Classification task.",
      "allOf": [
        {
          "$ref": "#/definitions/CustomTaskParameters"
        }
      ]
    },
    "CustomMultiLabelClassificationLROTask": {
      "type": "object",
      "description": "Use custom models to classify text into multi label taxonomy",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/CustomMultiLabelClassificationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "CustomMultiLabelClassification"
    },
    "CustomMultiLabelClassificationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/MultiClassificationDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/CustomResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "MultiClassificationDocumentResult": {
      "type": "object",
      "properties": {
        "class": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClassificationResult"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "class"
      ]
    },
    "HealthcareTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Healthcare task.",
      "properties": {
        "fhirVersion": {
          "type": "string",
          "description": "The FHIR Spec version that the result will use to format the fhirBundle. For additional information see https://www.hl7.org/fhir/overview.html.",
          "enum":[
            "4.0.1"
          ]
        },
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "HealthcareLROTask": {
      "type": "object",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/HealthcareTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "Healthcare"
    },
    "HealthcareResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/HealthcareEntitiesDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "HealthcareEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "description": "Healthcare entities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthcareEntity"
          }
        },
        "relations": {
          "type": "array",
          "description": "Healthcare entity relations.",
          "items": {
            "$ref": "#/definitions/HealthcareRelation"
          }
        },
        "fhirBundle": {
          "type": "object",
          "description": "JSON bundle containing a FHIR compatible object for consumption in other Healthcare tools. For additional information see https://www.hl7.org/fhir/overview.html.",
          "additionalProperties": {}
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "entities",
        "relations"
      ]
    },
    "HealthcareEntity": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "category": {
          "x-ms-enum": {
            "name": "healthcareEntityCategory",
            "modelAsString": true
          },
          "type": "string",
          "description": "Healthcare Entity Category.",
          "enum": [
            "BODY_STRUCTURE",
            "AGE",
            "GENDER",
            "EXAMINATION_NAME",
            "DATE",
            "DIRECTION",
            "FREQUENCY",
            "MEASUREMENT_VALUE",
            "MEASUREMENT_UNIT",
            "RELATIONAL_OPERATOR",
            "TIME",
            "GENE_OR_PROTEIN",
            "VARIANT",
            "ADMINISTRATIVE_EVENT",
            "CARE_ENVIRONMENT",
            "HEALTHCARE_PROFESSION",
            "DIAGNOSIS",
            "SYMPTOM_OR_SIGN",
            "CONDITION_QUALIFIER",
            "MEDICATION_CLASS",
            "MEDICATION_NAME",
            "DOSAGE",
            "MEDICATION_FORM",
            "MEDICATION_ROUTE",
            "FAMILY_RELATION",
            "TREATMENT_NAME"
          ]
        },
        "subcategory": {
          "type": "string",
          "description": "(Optional) Entity sub type."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity text. Use of different 'stringIndexType' values can affect the length returned."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted entity."
        },
        "assertion": {
          "type": "object",
          "$ref": "#/definitions/HealthcareAssertion"
        },
        "name": {
          "description": "Preferred name for the entity. Example: 'histologically' would have a 'name' of 'histologic'.",
          "type": "string"
        },
        "links": {
          "description": "Entity references in known data sources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthcareEntityLink"
          }
        }
      },
      "required": [
        "text",
        "category",
        "offset",
        "length",
        "confidenceScore"
      ]
    },
    "HealthcareRelation": {
      "type": "object",
      "description": "Every relation is an entity graph of a certain relationType, where all entities are connected and have specific roles within the relation context.",
      "required": [
        "relationType",
        "entities"
      ],
      "properties": {
        "relationType": {
          "description": "Type of relation. Examples include: `DosageOfMedication` or 'FrequencyOfMedication', etc.",
          "type": "string",
          "enum": [
            "Abbreviation",
            "DirectionOfBodyStructure",
            "DirectionOfCondition",
            "DirectionOfExamination",
            "DirectionOfTreatment",
            "DosageOfMedication",
            "FormOfMedication",
            "FrequencyOfMedication",
            "FrequencyOfTreatment",
            "QualifierOfCondition",
            "RelationOfExamination",
            "RouteOfMedication",
            "TimeOfCondition",
            "TimeOfEvent",
            "TimeOfExamination",
            "TimeOfMedication",
            "TimeOfTreatment",
            "UnitOfCondition",
            "UnitOfExamination",
            "ValueOfCondition",
            "ValueOfExamination"
          ],
          "x-ms-enum": {
            "name": "relationType",
            "modelAsString": true
          }
        },
        "entities": {
          "description": "The entities in the relation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HealthcareRelationEntity"
          }
        }
      }
    },
    "HealthcareAssertion": {
      "type": "object",
      "properties": {
        "conditionality": {
          "description": "Describes any conditionality on the entity.",
          "type": "string",
          "enum": [
            "hypothetical",
            "conditional"
          ],
          "x-ms-enum": {
            "name": "Conditionality",
            "modelAsString": false
          }
        },
        "certainty": {
          "description": "Describes the entities certainty and polarity.",
          "type": "string",
          "enum": [
            "positive",
            "positivePossible",
            "neutralPossible",
            "negativePossible",
            "negative"
          ],
          "x-ms-enum": {
            "name": "Certainty",
            "modelAsString": false
          }
        },
        "association": {
          "description": "Describes if the entity is the subject of the text or if it describes someone else.",
          "type": "string",
          "enum": [
            "subject",
            "other"
          ],
          "x-ms-enum": {
            "name": "Association",
            "modelAsString": false
          }
        }
      }
    },
    "HealthcareRelationEntity": {
      "type": "object",
      "required": [
        "ref",
        "role"
      ],
      "properties": {
        "ref": {
          "description": "Reference link object, using a JSON pointer RFC 6901 (URI Fragment Identifier Representation), pointing to the entity .",
          "type": "string"
        },
        "role": {
          "description": "Role of entity in the relationship. For example: 'CD20-positive diffuse large B-cell lymphoma' has the following entities with their roles in parenthesis:  CD20 (GeneOrProtein), Positive (Expression), diffuse large B-cell lymphoma (Diagnosis).",
          "type": "string"
        }
      }
    },
    "HealthcareEntityLink": {
      "type": "object",
      "required": [
        "dataSource",
        "id"
      ],
      "properties": {
        "dataSource": {
          "description": "Entity Catalog. Examples include: UMLS, CHV, MSH, etc.",
          "type": "string"
        },
        "id": {
          "description": "Entity id in the given source catalog.",
          "type": "string"
        }
      }
    },
    "SentimentAnalysisTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Sentiment Analysis task.",
      "properties": {
        "opinionMining": {
          "type": "boolean",
          "default": false
        },
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "SentimentAnalysisLROTask": {
      "type": "object",
      "description": "An object representing the task definition for a Sentiment Analysis task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/SentimentAnalysisTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "SentimentAnalysis"
    },
    "SentimentTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/SentimentResponse"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "SentimentAnalysisResults"
    },
    "SentimentResponse": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Sentiment analysis per document.",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/SentimentDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "SentimentDocumentResult": {
      "type": "object",
      "properties": {
        "sentiment": {
          "type": "string",
          "description": "Predicted sentiment for document (Negative, Neutral, Positive, or Mixed).",
          "enum": [
            "positive",
            "neutral",
            "negative",
            "mixed"
          ],
          "x-ms-enum": {
            "name": "DocumentSentimentValue",
            "modelAsString": false
          }
        },
        "confidenceScores": {
          "description": "Document level sentiment confidence scores between 0 and 1 for each sentiment class.",
          "$ref": "#/definitions/SentimentConfidenceScorePerLabel"
        },
        "sentences": {
          "type": "array",
          "description": "Sentence level sentiment analysis.",
          "items": {
            "$ref": "#/definitions/SentenceSentiment"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "sentiment",
        "confidenceScores",
        "sentences"
      ]
    },
    "SentimentConfidenceScorePerLabel": {
      "type": "object",
      "required": [
        "positive",
        "neutral",
        "negative"
      ],
      "properties": {
        "positive": {
          "type": "number",
          "format": "double"
        },
        "neutral": {
          "type": "number",
          "format": "double"
        },
        "negative": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative."
    },
    "SentenceSentiment": {
      "type": "object",
      "required": [
        "text",
        "sentiment",
        "confidenceScores",
        "offset",
        "length"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The sentence text."
        },
        "sentiment": {
          "type": "string",
          "description": "The predicted Sentiment for the sentence.",
          "enum": [
            "positive",
            "neutral",
            "negative"
          ],
          "x-ms-enum": {
            "name": "SentenceSentimentValue",
            "modelAsString": false
          }
        },
        "confidenceScores": {
          "description": "The sentiment confidence score between 0 and 1 for the sentence for all classes.",
          "$ref": "#/definitions/SentimentConfidenceScorePerLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The sentence offset from the start of the document."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the sentence."
        },
        "targets": {
          "type": "array",
          "description": "The array of sentence targets for the sentence.",
          "items": {
            "$ref": "#/definitions/SentenceTarget"
          }
        },
        "assessments": {
          "type": "array",
          "description": "The array of assessments for the sentence.",
          "items": {
            "$ref": "#/definitions/SentenceAssessment"
          }
        }
      }
    },
    "SentenceTarget": {
      "type": "object",
      "required": [
        "confidenceScores",
        "length",
        "offset",
        "relations",
        "sentiment",
        "text"
      ],
      "properties": {
        "sentiment": {
          "type": "string",
          "enum": [
            "positive",
            "mixed",
            "negative"
          ],
          "x-ms-enum": {
            "name": "TokenSentimentValue",
            "modelAsString": false
          },
          "description": "Targeted sentiment in the sentence."
        },
        "confidenceScores": {
          "description": "Target sentiment confidence scores for the target in the sentence.",
          "$ref": "#/definitions/TargetConfidenceScoreLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The target offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the target."
        },
        "text": {
          "type": "string",
          "description": "The target text detected."
        },
        "relations": {
          "type": "array",
          "description": "The array of either assessment or target objects which is related to the target.",
          "items": {
            "$ref": "#/definitions/TargetRelation"
          }
        }
      }
    },
    "SentenceAssessment": {
      "type": "object",
      "required": [
        "confidenceScores",
        "isNegated",
        "length",
        "offset",
        "sentiment",
        "text"
      ],
      "properties": {
        "sentiment": {
          "type": "string",
          "enum": [
            "positive",
            "mixed",
            "negative"
          ],
          "x-ms-enum": {
            "name": "TokenSentimentValue",
            "modelAsString": false
          },
          "description": "Assessment sentiment in the sentence."
        },
        "confidenceScores": {
          "description": "Assessment sentiment confidence scores in the sentence.",
          "$ref": "#/definitions/TargetConfidenceScoreLabel"
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The assessment offset from the start of the sentence."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the assessment."
        },
        "text": {
          "type": "string",
          "description": "The assessment text detected."
        },
        "isNegated": {
          "type": "boolean",
          "description": "The indicator representing if the assessment is negated."
        }
      }
    },
    "TargetRelation": {
      "type": "object",
      "required": [
        "ref",
        "relationType"
      ],
      "properties": {
        "relationType": {
          "type": "string",
          "enum": [
            "assessment",
            "target"
          ],
          "x-ms-enum": {
            "name": "TargetRelationType",
            "modelAsString": false
          },
          "description": "The type related to the target."
        },
        "ref": {
          "type": "string",
          "description": "The JSON pointer indicating the linked object."
        }
      }
    },
    "TargetConfidenceScoreLabel": {
      "type": "object",
      "required": [
        "negative",
        "positive"
      ],
      "properties": {
        "positive": {
          "type": "number",
          "format": "double"
        },
        "negative": {
          "type": "number",
          "format": "double"
        }
      },
      "description": "Represents the confidence scores across all sentiment classes: positive, neutral, negative."
    },
    "EntitiesTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Entity Recognition task.",
      "properties": {
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "EntitiesLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Entities Recognition task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/EntitiesTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "EntityRecognition"
    },
    "EntitiesTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntitiesResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "EntityRecognitionResults"
    },
    "EntitiesResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/EntitiesDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "EntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "entities"
      ]
    },
    "Entity": {
      "type": "object",
      "required": [
        "text",
        "category",
        "offset",
        "length",
        "confidenceScore"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "category": {
          "type": "string",
          "description": "Entity type."
        },
        "subcategory": {
          "type": "string",
          "description": "(Optional) Entity sub type."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity text. Use of different 'stringIndexType' values can affect the length returned."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "Confidence score between 0 and 1 of the extracted entity."
        }
      }
    },
    "EntityLinkingTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Entity Linking task.",
      "properties": {
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "EntityLinkingLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Entity Linking task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/EntityLinkingTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "EntityLinking"
    },
    "EntityLinkingTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntityLinkingResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "EntityLinkingResults"
    },
    "EntityLinkingResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/LinkedEntitiesDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "LinkedEntitiesDocumentResult": {
      "type": "object",
      "required": [
        "entities"
      ],
      "properties": {
        "entities": {
          "type": "array",
          "description": "Recognized well known entities in the document.",
          "items": {
            "$ref": "#/definitions/LinkedEntity"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ]
    },
    "LinkedEntity": {
      "type": "object",
      "required": [
        "name",
        "matches",
        "language",
        "url",
        "dataSource"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Entity Linking formal name."
        },
        "matches": {
          "type": "array",
          "description": "List of instances this entity appears in the text.",
          "items": {
            "$ref": "#/definitions/Match"
          }
        },
        "language": {
          "type": "string",
          "description": "Language used in the data source."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the recognized entity from the data source."
        },
        "url": {
          "type": "string",
          "description": "URL for the entity's page from the data source."
        },
        "dataSource": {
          "type": "string",
          "description": "Data source used to extract entity linking, such as Wiki/Bing etc."
        },
        "bingId": {
          "type": "string",
          "description": "Bing Entity Search API unique identifier of the recognized entity."
        }
      }
    },
    "Match": {
      "type": "object",
      "required": [
        "confidenceScore",
        "text",
        "offset",
        "length"
      ],
      "properties": {
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned."
        },
        "text": {
          "type": "string",
          "description": "Entity text as appears in the request."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "Start position for the entity match text."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "Length for the entity match text."
        }
      }
    },
    "PiiTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a PII Entities Recognition task.",
      "properties": {
        "domain": {
          "$ref": "#/definitions/PiiDomain"
        },
        "piiCategories": {
          "$ref": "#/definitions/PiiCategories"
        },
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "PiiLROTask": {
      "type": "object",
      "description": "An object representing the task definition for a PII Entities Recognition task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/PiiTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "PiiEntityRecognition"
    },
    "PiiTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/PiiResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "PiiEntityRecognitionResults"
    },
    "PiiResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/PiiEntitiesDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "PiiDomain": {
      "type": "string",
      "description": "The PII domain used for PII Entity Recognition.",
      "default": "none",
      "enum": [
        "phi",
        "none"
      ],
      "x-ms-enum": {
        "name": "PiiDomain",
        "modelAsString": true,
        "values": [
          {
            "name": "phi",
            "description": "Indicates that entities in the Personal Health Information domain should be redacted.",
            "value": "phi"
          },
          {
            "name": "none",
            "description": "Indicates that no domain is specified.",
            "value": "none"
          }
        ]
      }
    },
    "PiiEntitiesDocumentResult": {
      "type": "object",
      "properties": {
        "redactedText": {
          "type": "string",
          "description": "Returns redacted text."
        },
        "entities": {
          "type": "array",
          "description": "Recognized entities in the document.",
          "items": {
            "$ref": "#/definitions/Entity"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "redactedText",
        "entities"
      ]
    },
    "PiiCategories": {
      "description": "(Optional) describes the PII categories to return",
      "items": {
        "type": "string",
        "x-ms-enum": {
          "name": "PiiCategory",
          "modelAsString": true
        },
        "enum": [
          "ABARoutingNumber",
          "ARNationalIdentityNumber",
          "AUBankAccountNumber",
          "AUDriversLicenseNumber",
          "AUMedicalAccountNumber",
          "AUPassportNumber",
          "AUTaxFileNumber",
          "AUBusinessNumber",
          "AUCompanyNumber",
          "ATIdentityCard",
          "ATTaxIdentificationNumber",
          "ATValueAddedTaxNumber",
          "AzureDocumentDBAuthKey",
          "AzureIAASDatabaseConnectionAndSQLString",
          "AzureIoTConnectionString",
          "AzurePublishSettingPassword",
          "AzureRedisCacheString",
          "AzureSAS",
          "AzureServiceBusString",
          "AzureStorageAccountKey",
          "AzureStorageAccountGeneric",
          "BENationalNumber",
          "BENationalNumberV2",
          "BEValueAddedTaxNumber",
          "BRCPFNumber",
          "BRLegalEntityNumber",
          "BRNationalIDRG",
          "BGUniformCivilNumber",
          "CABankAccountNumber",
          "CADriversLicenseNumber",
          "CAHealthServiceNumber",
          "CAPassportNumber",
          "CAPersonalHealthIdentification",
          "CASocialInsuranceNumber",
          "CLIdentityCardNumber",
          "CNResidentIdentityCardNumber",
          "CreditCardNumber",
          "HRIdentityCardNumber",
          "HRNationalIDNumber",
          "HRPersonalIdentificationNumber",
          "HRPersonalIdentificationOIBNumberV2",
          "CYIdentityCard",
          "CYTaxIdentificationNumber",
          "CZPersonalIdentityNumber",
          "CZPersonalIdentityV2",
          "DKPersonalIdentificationNumber",
          "DKPersonalIdentificationV2",
          "DrugEnforcementAgencyNumber",
          "EEPersonalIdentificationCode",
          "EUDebitCardNumber",
          "EUDriversLicenseNumber",
          "EUGPSCoordinates",
          "EUNationalIdentificationNumber",
          "EUPassportNumber",
          "EUSocialSecurityNumber",
          "EUTaxIdentificationNumber",
          "FIEuropeanHealthNumber",
          "FINationalID",
          "FINationalIDV2",
          "FIPassportNumber",
          "FRDriversLicenseNumber",
          "FRHealthInsuranceNumber",
          "FRNationalID",
          "FRPassportNumber",
          "FRSocialSecurityNumber",
          "FRTaxIdentificationNumber",
          "FRValueAddedTaxNumber",
          "DEDriversLicenseNumber",
          "DEPassportNumber",
          "DEIdentityCardNumber",
          "DETaxIdentificationNumber",
          "DEValueAddedNumber",
          "GRNationalIDCard",
          "GRNationalIDV2",
          "GRTaxIdentificationNumber",
          "HKIdentityCardNumber",
          "HUValueAddedNumber",
          "HUPersonalIdentificationNumber",
          "HUTaxIdentificationNumber",
          "INPermanentAccount",
          "INUniqueIdentificationNumber",
          "IDIdentityCardNumber",
          "InternationalBankingAccountNumber",
          "IEPersonalPublicServiceNumber",
          "IEPersonalPublicServiceNumberV2",
          "ILBankAccountNumber",
          "ILNationalID",
          "ITDriversLicenseNumber",
          "ITFiscalCode",
          "ITValueAddedTaxNumber",
          "JPBankAccountNumber",
          "JPDriversLicenseNumber",
          "JPPassportNumber",
          "JPResidentRegistrationNumber",
          "JPSocialInsuranceNumber",
          "JPMyNumberCorporate",
          "JPMyNumberPersonal",
          "JPResidenceCardNumber",
          "LVPersonalCode",
          "LTPersonalCode",
          "LUNationalIdentificationNumberNatural",
          "LUNationalIdentificationNumberNonNatural",
          "MYIdentityCardNumber",
          "MTIdentityCardNumber",
          "MTTaxIDNumber",
          "NLCitizensServiceNumber",
          "NLCitizensServiceNumberV2",
          "NLTaxIdentificationNumber",
          "NLValueAddedTaxNumber",
          "NZBankAccountNumber",
          "NZDriversLicenseNumber",
          "NZInlandRevenueNumber",
          "NZMinistryOfHealthNumber",
          "NZSocialWelfareNumber",
          "NOIdentityNumber",
          "PHUnifiedMultiPurposeIDNumber",
          "PLIdentityCard",
          "PLNationalID",
          "PLNationalIDV2",
          "PLPassportNumber",
          "PLTaxIdentificationNumber",
          "PLREGONNumber",
          "PTCitizenCardNumber",
          "PTCitizenCardNumberV2",
          "PTTaxIdentificationNumber",
          "ROPersonalNumericalCode",
          "RUPassportNumberDomestic",
          "RUPassportNumberInternational",
          "SANationalID",
          "SGNationalRegistrationIdentityCardNumber",
          "SKPersonalNumber",
          "SITaxIdentificationNumber",
          "SIUniqueMasterCitizenNumber",
          "ZAIdentificationNumber",
          "KRResidentRegistrationNumber",
          "ESDNI",
          "ESSocialSecurityNumber",
          "ESTaxIdentificationNumber",
          "SQLServerConnectionString",
          "SENationalID",
          "SENationalIDV2",
          "SEPassportNumber",
          "SETaxIdentificationNumber",
          "SWIFTCode",
          "CHSocialSecurityNumber",
          "TWNationalID",
          "TWPassportNumber",
          "TWResidentCertificate",
          "THPopulationIdentificationCode",
          "TRNationalIdentificationNumber",
          "UKDriversLicenseNumber",
          "UKElectoralRollNumber",
          "UKNationalHealthNumber",
          "UKNationalInsuranceNumber",
          "UKUniqueTaxpayerNumber",
          "USUKPassportNumber",
          "USBankAccountNumber",
          "USDriversLicenseNumber",
          "USIndividualTaxpayerIdentification",
          "USSocialSecurityNumber",
          "UAPassportNumberDomestic",
          "UAPassportNumberInternational",
          "Organization",
          "Email",
          "URL",
          "Age",
          "PhoneNumber",
          "IPAddress",
          "Date",
          "Person",
          "Address",
          "All",
          "Default"
        ]
      },
      "type": "array",
      "uniqueItems": true
    },
    "ExtractiveSummarizationTaskParameters": {
      "type": "object",
      "description": "Supported parameters for an Extractive Summarization task.",
      "properties": {
        "sentenceCount": {
          "type": "integer",
          "default": 3
        },
        "sortBy": {
          "$ref": "#/definitions/ExtractiveSummarizationSortingCriteria"
        },
        "stringIndexType": {
          "$ref": "common.json#/definitions/StringIndexType"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "ExtractiveSummarizationLROTask": {
      "type": "object",
      "description": "An object representing the task definition for an Extractive Summarization task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/ExtractiveSummarizationTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "ExtractiveSummarization"
    },
    "ExtractiveSummarizationResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/ExtractedSummaryDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "ExtractiveSummarizationSortingCriteria": {
      "type": "string",
      "default": "Offset",
      "description": "The sorting criteria to use for the results of Extractive Summarization.",
      "enum": [
        "Offset",
        "Rank"
      ],
      "x-ms-enum": {
        "name": "ExtractiveSummarizationSortingCriteria",
        "modelAsString": true,
        "values": [
          {
            "name": "Offset",
            "description": "Indicates that results should be sorted in order of appearance in the text.",
            "value": "Offset"
          },
          {
            "name": "Rank",
            "description": "Indicates that results should be sorted in order of importance (i.e. rank score) according to the model.",
            "value": "Rank"
          }
        ]
      }
    },
    "ExtractedSummaryDocumentResult": {
      "type": "object",
      "properties": {
        "sentences": {
          "type": "array",
          "description": "A ranked list of sentences representing the extracted summary.",
          "items": {
            "$ref": "#/definitions/ExtractedSummarySentence"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "sentences"
      ]
    },
    "ExtractedSummarySentence": {
      "type": "object",
      "required": [
        "text",
        "rankScore",
        "offset",
        "length"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The extracted sentence text."
        },
        "rankScore": {
          "type": "number",
          "format": "double",
          "description": "A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance."
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The sentence offset from the start of the document, based on the value of the parameter StringIndexType."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The length of the sentence."
        }
      }
    },
    "KeyPhraseTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Key Phrase Extraction task.",
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "KeyPhraseLROTask": {
      "type": "object",
      "description": "An object representing the task definition for a Key Phrase Extraction task.",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/KeyPhraseTaskParameters"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROTask"
        }
      ],
      "x-ms-discriminator-value": "KeyPhraseExtraction"
    },
    "KeyPhraseTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/KeyPhraseResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "KeyPhraseExtractionResults"
    },
    "KeyPhraseResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/KeyPhrasesDocumentResult"
              }
            ]
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "KeyPhrasesDocumentResult": {
      "type": "object",
      "properties": {
        "keyPhrases": {
          "type": "array",
          "description": "A list of representative words or phrases. The number of key phrases returned is proportional to the number of words in the input document.",
          "items": {
            "type": "string"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "keyPhrases"
      ]
    },
    "LanguageDetectionTaskParameters": {
      "type": "object",
      "description": "Supported parameters for a Language Detection task.",
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltTaskParameters"
        }
      ]
    },
    "LanguageDetectionTaskResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/LanguageDetectionResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextTaskResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "LanguageDetectionResults"
    },
    "LanguageDetectionResult": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "description": "Response by document",
          "items": {
            "$ref": "#/definitions/LanguageDetectionDocumentResult"
          }
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/PreBuiltResult"
        }
      ],
      "required": [
        "documents"
      ]
    },
    "LanguageDetectionDocumentResult": {
      "type": "object",
      "properties": {
        "detectedLanguage": {
          "description": "Detected Language.",
          "$ref": "#/definitions/DetectedLanguage"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/DocumentResult"
        }
      ],
      "required": [
        "detectedLanguage"
      ]
    },
    "DetectedLanguage": {
      "type": "object",
      "required": [
        "name",
        "iso6391Name",
        "confidenceScore"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Long name of a detected language (e.g. English, French)."
        },
        "iso6391Name": {
          "type": "string",
          "description": "A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr)."
        },
        "confidenceScore": {
          "type": "number",
          "format": "double",
          "description": "A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true."
        }
      }
    },
    "AnalyzeTextJobState": {
      "allOf": [
        {
          "$ref": "#/definitions/JobState"
        },
        {
          "$ref": "#/definitions/TasksState"
        },
        {
          "$ref": "#/definitions/AnalyzeTextJobStatistics"
        }
      ]
    },
    "Pagination": {
      "properties": {
        "nextLink": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "JobMetadata": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "expirationDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "jobId": {
          "format": "uuid",
          "type": "string"
        },
        "lastUpdateDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "notStarted",
            "running",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "cancelled",
            "cancelling"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "State"
          }
        }
      },
      "required": [
        "jobId",
        "lastUpdateDateTime",
        "createdDateTime",
        "status"
      ],
      "type": "object"
    },
    "JobState": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "createdDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "expirationDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "jobId": {
          "format": "uuid",
          "type": "string"
        },
        "lastUpdateDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "notStarted",
            "running",
            "succeeded",
            "partiallySucceeded",
            "failed",
            "cancelled",
            "cancelling"
          ],
          "type": "string",
          "x-ms-enum": {
            "modelAsString": false,
            "name": "State"
          }
        },
        "errors": {
          "items": {
            "$ref": "common.json#/definitions/Error"
          },
          "type": "array"
        },
        "nextLink": {
          "type": "string"
        }
      },
      "required": [
        "jobId",
        "lastUpdateDateTime",
        "createdDateTime",
        "status"
      ]
    },
    "JobErrors": {
      "properties": {
        "errors": {
          "items": {
            "$ref": "common.json#/definitions/Error"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AnalyzeTextJobStatistics": {
      "properties": {
        "statistics": {
          "$ref": "#/definitions/RequestStatistics"
        }
      },
      "type": "object"
    },
    "TasksState": {
      "properties": {
        "tasks": {
          "properties": {
            "completed": {
              "type": "integer"
            },
            "failed": {
              "type": "integer"
            },
            "inProgress": {
              "type": "integer"
            },
            "total": {
              "type": "integer"
            },
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AnalyzeTextLROResult"
              }
            }
          },
          "required": [
            "total",
            "completed",
            "failed",
            "inProgress"
          ],
          "type": "object"
        }
      },
      "required": [
        "tasks"
      ],
      "type": "object"
    },
    "TaskState": {
      "properties": {
        "lastUpdateDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "enum": [
            "notStarted",
            "running",
            "succeeded",
            "failed",
            "cancelled",
            "cancelling"
          ],
          "x-ms-enum": {
            "modelAsString": false,
            "name": "State"
          }
        }
      },
      "required": [
        "status",
        "lastUpdateDateTime"
      ],
      "type": "object"
    },
    "AnalyzeTextLROResult": {
      "type": "object",
      "discriminator": "kind",
      "properties": {
        "kind": {
          "$ref": "#/definitions/AnalyzeTextLROResultsKind"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TaskState"
        },
        {
          "$ref": "#/definitions/TaskIdentifier"
        }
      ],
      "required": [
        "kind"
      ]
    },
    "EntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntitiesResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "EntityRecognitionLROResults"
    },
    "CustomEntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomEntitiesResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomEntityRecognitionLROResults"
    },
    "CustomSingleLabelClassificationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomSingleLabelClassificationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomSingleLabelClassificationLROResults"
    },
    "CustomMultiLabelClassificationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/CustomMultiLabelClassificationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "CustomMultiLabelClassificationLROResults"
    },
    "EntityLinkingLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/EntityLinkingResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "EntityLinkingLROResults"
    },
    "PiiEntityRecognitionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/PiiResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "PiiEntityRecognitionLROResults"
    },
    "ExtractiveSummarizationLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/ExtractiveSummarizationResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "ExtractiveSummarizationLROResults"
    },
    "HealthcareLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/HealthcareResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "HealthcareLROResults"
    },
    "SentimentLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/SentimentResponse"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "SentimentAnalysisLROResults"
    },
    "KeyPhraseExtractionLROResult": {
      "type": "object",
      "properties": {
        "results": {
          "$ref": "#/definitions/KeyPhraseResult"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/AnalyzeTextLROResult"
        }
      ],
      "required": [
        "results"
      ],
      "x-ms-discriminator-value": "KeyPhraseExtractionLROResults"
    },
    "DocumentResponse": {
      "type": "object",
      "properties": {}
    },
    "DocumentResult": {
      "type": "object",
      "required": [
        "id",
        "warnings"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "warnings": {
          "type": "array",
          "description": "Warnings encountered while processing document.",
          "items": {
            "$ref": "#/definitions/DocumentWarning"
          }
        },
        "statistics": {
          "description": "if showStats=true was specified in the request this field will contain information about the document payload.",
          "$ref": "#/definitions/DocumentStatistics"
        }
      }
    },
    "DocumentError": {
      "type": "object",
      "required": [
        "id",
        "error"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Document Id."
        },
        "error": {
          "type": "object",
          "description": "Document Error.",
          "$ref": "common.json#/definitions/Error"
        }
      }
    },
    "DocumentWarning": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "enum": [
            "LongWordsInDocument",
            "DocumentTruncated"
          ],
          "x-ms-enum": {
            "name": "WarningCodeValue",
            "modelAsString": true
          },
          "description": "Error code."
        },
        "message": {
          "type": "string",
          "description": "Warning message."
        },
        "targetRef": {
          "type": "string",
          "description": "A JSON pointer reference indicating the target object."
        }
      }
    },
    "DocumentStatistics": {
      "type": "object",
      "required": [
        "charactersCount",
        "transactionsCount"
      ],
      "properties": {
        "charactersCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of text elements recognized in the document."
        },
        "transactionsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of transactions for the document."
        }
      },
      "description": "if showStats=true was specified in the request this field will contain information about the document payload."
    },
    "RequestStatistics": {
      "type": "object",
      "required": [
        "documentsCount",
        "validDocumentsCount",
        "erroneousDocumentsCount",
        "transactionsCount"
      ],
      "properties": {
        "documentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of documents submitted in the request."
        },
        "validDocumentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of valid documents. This excludes empty, over-size limit or non-supported languages documents."
        },
        "erroneousDocumentsCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of invalid documents. This includes empty, over-size limit or non-supported languages documents."
        },
        "transactionsCount": {
          "type": "integer",
          "format": "int64",
          "description": "Number of transactions for the request."
        }
      },
      "description": "if showStats=true was specified in the request this field will contain information about the request payload."
    },
    "MultiLanguageInput": {
      "type": "object",
      "description": "Contains an input document to be analyzed by the service.",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "A unique, non-empty document identifier."
        },
        "text": {
          "type": "string",
          "description": "The input text to process."
        },
        "language": {
          "type": "string",
          "description": "(Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\" for English; \"es\" for Spanish etc. If not set, use \"en\" for English as default."
        }
      }
    },
    "LanguageInput": {
      "type": "object",
      "required": [
        "id",
        "text"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique, non-empty document identifier."
        },
        "text": {
          "type": "string"
        },
        "countryHint": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "ShowStats": {
      "name": "showStats",
      "in": "query",
      "description": "(Optional) if set to true, response will contain request and document level statistics.",
      "type": "boolean",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "JobId": {
      "description": "Job ID",
      "format": "uuid",
      "in": "path",
      "name": "jobId",
      "required": true,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}