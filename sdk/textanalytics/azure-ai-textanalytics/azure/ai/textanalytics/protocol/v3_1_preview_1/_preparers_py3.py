# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from msrest import Serializer
from typing import Any, Dict, Literal, Optional
from azure.core.pipeline.transport import HttpRequest

StringIndexTypes = Literal["TextElements_v8", "UnicodeCodePoint", "Utf16CodeUnit"]

class TextAnalyticsPreparers:

    @staticmethod
    def prepare_entities_recognition_general(
        *,
        body: Any,
        model_version: Optional[str] = None,
        show_stats: Optional[bool] = None,
        string_index_type: Optional[StringIndexTypes] = "TextElements_v8",
        **kwargs: Any
    ) -> HttpRequest:
        """Named Entity Recognition.

        The API returns a list of general named entities in a given document. For the list of supported
        entity types, check :code:`<a href="https://aka.ms/taner">Supported Entity Types in Text
        Analytics API</a>`. See the :code:`<a href="https://aka.ms/talangs">Supported languages in Text
        Analytics API</a>` for the list of enabled languages.

        :param body: JSON body containing the set of documents to process as part of this batch.
        :param model_version: (Optional) This value indicates which model will be used for scoring. If
         a model-version is not specified, the API should default to the latest, non-preview version.
        :type model_version: str
        :param show_stats: (Optional) if set to true, response will contain request and document level
         statistics.
        :type show_stats: bool
        :param string_index_type: (Optional) Specifies the method used to interpret string offsets.
         Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information
         see https://aka.ms/text-analytics-offsets.
        :type string_index_type: str or ~azure.ai.textanalytics.v3_1_preview_1.models.StringIndexType
        :return: HTTPRequest that can be passed to the client's `send_request` caller.
        :rtype: ~azure.core.pipeline.transport.HttpRequest
        """
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json, text/json"

        # Construct URL
        url = kwargs.pop("template_url", '/text/analytics/v3.1-preview.1/entities/recognition/general')

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        if model_version is not None:
            query_parameters['model-version'] = Serializer().query("model_version", model_version, 'str')
        if show_stats is not None:
            query_parameters['showStats'] = Serializer().query("show_stats", show_stats, 'bool')
        if string_index_type is not None:
            query_parameters['stringIndexType'] = Serializer().query("string_index_type", string_index_type, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = Serializer().header("content_type", content_type, 'str')
        header_parameters['Accept'] = Serializer().header("accept", accept, 'str')

        body_content_kwargs: Dict[str, Any] = {}
        body_content_kwargs['content'] = body
        request = HttpRequest(
            method="POST",
            url=url,
            headers=header_parameters,
            json=body
        )
        request.format_parameters(query_parameters)
        return request

    @staticmethod
    def prepare_entities_recognition_pii(
        *,
        body: Any,
        model_version: Optional[str] = None,
        show_stats: Optional[bool] = None,
        domain: Optional[str] = None,
        string_index_type: Optional[StringIndexTypes] = "TextElements_v8",
        **kwargs: Any
    ) -> HttpRequest:
        """Entities containing personal information.

        The API returns a list of entities with personal information (\"SSN\", \"Bank Account\" etc) in
        the document. For the list of supported entity types, check :code:`<a
        href="https://aka.ms/tanerpii">Supported Entity Types in Text Analytics API</a>`. See the
        :code:`<a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a>` for the
        list of enabled languages.

        :param body: JSON body containing the set of documents to process as part of this batch.
        :param model_version: (Optional) This value indicates which model will be used for scoring. If
         a model-version is not specified, the API should default to the latest, non-preview version.
        :type model_version: str
        :param show_stats: (Optional) if set to true, response will contain request and document level
         statistics.
        :type show_stats: bool
        :param domain: (Optional) if set to 'PHI', response will contain only PHI entities.
        :type domain: str
        :param string_index_type: (Optional) Specifies the method used to interpret string offsets.
         Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information
         see https://aka.ms/text-analytics-offsets.
        :type string_index_type: str or ~azure.ai.textanalytics.v3_1_preview_1.models.StringIndexType
        :return: HTTPRequest that can be passed to the client's `send_request` caller.
        :rtype: ~azure.core.pipeline.transport.HttpRequest
        """
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json, text/json"

        # Construct URL
        url = kwargs.pop("template_url", '/text/analytics/v3.1-preview.1/entities/recognition/pii')

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        if model_version is not None:
            query_parameters['model-version'] = Serializer().query("model_version", model_version, 'str')
        if show_stats is not None:
            query_parameters['showStats'] = Serializer().query("show_stats", show_stats, 'bool')
        if domain is not None:
            query_parameters['domain'] = Serializer().query("domain", domain, 'str')
        if string_index_type is not None:
            query_parameters['stringIndexType'] = Serializer().query("string_index_type", string_index_type, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = Serializer().header("content_type", content_type, 'str')
        header_parameters['Accept'] = Serializer().header("accept", accept, 'str')

        body_content_kwargs: Dict[str, Any] = {}
        body_content_kwargs['content'] = body
        request = HttpRequest(
            method="POST",
            url=url,
            headers=header_parameters,
            json=body
        )
        request.format_parameters(query_parameters)
        return request

    @staticmethod
    def prepare_entities_linking(
        *,
        body: Any,
        model_version: Optional[str] = None,
        show_stats: Optional[bool] = None,
        string_index_type: Optional[StringIndexTypes] = "TextElements_v8",
        **kwargs: Any
    ) -> HttpRequest:
        """Linked entities from a well-known knowledge base.

        The API returns a list of recognized entities with links to a well-known knowledge base. See
        the :code:`<a href="https://aka.ms/talangs">Supported languages in Text Analytics API</a>` for
        the list of enabled languages.

        :param body: JSON body containing the set of documents to process as part of this batch.
        :param model_version: (Optional) This value indicates which model will be used for scoring. If
         a model-version is not specified, the API should default to the latest, non-preview version.
        :type model_version: str
        :param show_stats: (Optional) if set to true, response will contain request and document level
         statistics.
        :type show_stats: bool
        :param string_index_type: (Optional) Specifies the method used to interpret string offsets.
         Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information
         see https://aka.ms/text-analytics-offsets.
        :type string_index_type: str or ~azure.ai.textanalytics.v3_1_preview_1.models.StringIndexType
        :return: HTTPRequest that can be passed to the client's `send_request` caller.
        :rtype: ~azure.core.pipeline.transport.HttpRequest
        """
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json, text/json"

        # Construct URL
        url = kwargs.pop("template_url", '/text/analytics/v3.1-preview.1/entities/linking')

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        if model_version is not None:
            query_parameters['model-version'] = Serializer().query("model_version", model_version, 'str')
        if show_stats is not None:
            query_parameters['showStats'] = Serializer().query("show_stats", show_stats, 'bool')
        if string_index_type is not None:
            query_parameters['stringIndexType'] = Serializer().query("string_index_type", string_index_type, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = Serializer().header("content_type", content_type, 'str')
        header_parameters['Accept'] = Serializer().header("accept", accept, 'str')

        body_content_kwargs: Dict[str, Any] = {}
        body_content_kwargs['content'] = body
        request = HttpRequest(
            method="POST",
            url=url,
            headers=header_parameters,
            json=body
        )
        request.format_parameters(query_parameters)
        return request

    @staticmethod
    def prepare_key_phrases(
        *,
        body: Any,
        model_version: Optional[str] = None,
        show_stats: Optional[bool] = None,
        **kwargs: Any
    ) -> HttpRequest:
        """Key Phrases.

        The API returns a list of strings denoting the key phrases in the input text. See the :code:`<a
        href="https://aka.ms/talangs">Supported languages in Text Analytics API</a>` for the list of
        enabled languages.

        :param body: JSON body containing the set of documents to process as part of this batch.
        :param model_version: (Optional) This value indicates which model will be used for scoring. If
         a model-version is not specified, the API should default to the latest, non-preview version.
        :type model_version: str
        :param show_stats: (Optional) if set to true, response will contain request and document level
         statistics.
        :type show_stats: bool
        :return: HTTPRequest that can be passed to the client's `send_request` caller.
        :rtype: ~azure.core.pipeline.transport.HttpRequest
        """
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json, text/json"

        # Construct URL
        url = kwargs.pop("template_url", '/text/analytics/v3.1-preview.1/keyPhrases')

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        if model_version is not None:
            query_parameters['model-version'] = Serializer().query("model_version", model_version, 'str')
        if show_stats is not None:
            query_parameters['showStats'] = Serializer().query("show_stats", show_stats, 'bool')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = Serializer().header("content_type", content_type, 'str')
        header_parameters['Accept'] = Serializer().header("accept", accept, 'str')

        body_content_kwargs: Dict[str, Any] = {}
        body_content_kwargs['content'] = body
        request = HttpRequest(
            method="POST",
            url=url,
            headers=header_parameters,
            json=body
        )
        request.format_parameters(query_parameters)
        return request

    @staticmethod
    def prepare_languages(
        *,
        body: Any,
        model_version: Optional[str] = None,
        show_stats: Optional[bool] = None,
        **kwargs: Any
    ) -> HttpRequest:
        """Detect Language.

        The API returns the detected language and a numeric score between 0 and 1. Scores close to 1
        indicate 100% certainty that the identified language is true. See the :code:`<a
        href="https://aka.ms/talangs">Supported languages in Text Analytics API</a>` for the list of
        enabled languages.

        :param body: JSON body containing the set of documents to process as part of this batch.
        :param model_version: (Optional) This value indicates which model will be used for scoring. If
         a model-version is not specified, the API should default to the latest, non-preview version.
        :type model_version: str
        :param show_stats: (Optional) if set to true, response will contain request and document level
         statistics.
        :type show_stats: bool
        :return: HTTPRequest that can be passed to the client's `send_request` caller.
        :rtype: ~azure.core.pipeline.transport.HttpRequest
        """
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json, text/json"

        # Construct URL
        url = kwargs.pop("template_url", '/text/analytics/v3.1-preview.1/languages')

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        if model_version is not None:
            query_parameters['model-version'] = Serializer().query("model_version", model_version, 'str')
        if show_stats is not None:
            query_parameters['showStats'] = Serializer().query("show_stats", show_stats, 'bool')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = Serializer().header("content_type", content_type, 'str')
        header_parameters['Accept'] = Serializer().header("accept", accept, 'str')

        body_content_kwargs: Dict[str, Any] = {}
        body_content_kwargs['content'] = body
        request = HttpRequest(
            method="POST",
            url=url,
            headers=header_parameters,
            json=body
        )
        request.format_parameters(query_parameters)
        return request

    @staticmethod
    def prepare_sentiment(
        *,
        body: Any,
        model_version: Optional[str] = None,
        show_stats: Optional[bool] = None,
        opinion_mining: Optional[bool] = None,
        string_index_type: Optional[StringIndexTypes] = "TextElements_v8",
        **kwargs: Any
    ) -> HttpRequest:
        """Sentiment.

        The API returns a detailed sentiment analysis for the input text. The analysis is done in
        multiple levels of granularity, start from the a document level, down to sentence and key terms
        (aspects) and opinions.

        :param body: JSON body containing the set of documents to process as part of this batch.
        :param model_version: (Optional) This value indicates which model will be used for scoring. If
         a model-version is not specified, the API should default to the latest, non-preview version.
        :type model_version: str
        :param show_stats: (Optional) if set to true, response will contain request and document level
         statistics.
        :type show_stats: bool
        :param opinion_mining: (Optional) if set to true, response will contain input and document
         level statistics including aspect-based sentiment analysis results.
        :type opinion_mining: bool
        :param string_index_type: (Optional) Specifies the method used to interpret string offsets.
         Defaults to Text Elements (Graphemes) according to Unicode v8.0.0. For additional information
         see https://aka.ms/text-analytics-offsets.
        :type string_index_type: str or ~azure.ai.textanalytics.v3_1_preview_1.models.StringIndexType
        :return: HTTPRequest that can be passed to the client's `send_request` caller.
        :rtype: ~azure.core.pipeline.transport.HttpRequest
        """
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json, text/json"

        # Construct URL
        url = kwargs.pop("template_url", '/text/analytics/v3.1-preview.1/sentiment')

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        if model_version is not None:
            query_parameters['model-version'] = Serializer().query("model_version", model_version, 'str')
        if show_stats is not None:
            query_parameters['showStats'] = Serializer().query("show_stats", show_stats, 'bool')
        if opinion_mining is not None:
            query_parameters['opinionMining'] = Serializer().query("opinion_mining", opinion_mining, 'bool')
        if string_index_type is not None:
            query_parameters['stringIndexType'] = Serializer().query("string_index_type", string_index_type, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = Serializer().header("content_type", content_type, 'str')
        header_parameters['Accept'] = Serializer().header("accept", accept, 'str')

        body_content_kwargs: Dict[str, Any] = {}
        body_content_kwargs['content'] = body
        request = HttpRequest(
            method="POST",
            url=url,
            headers=header_parameters,
            json=body
        )
        request.format_parameters(query_parameters)
        return request
