{
    "chosen_version": "2022-05-01",
    "total_api_version_list": ["2022-05-01"],
    "client": {
        "name": "TextAnalyticsClient",
        "filename": "_text_analytics_client",
        "description": "The language service API is a suite of natural language processing (NLP) skills built with best-in-class Microsoft machine learning algorithms.  The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction, language detection and question answering. Further documentation can be found in :code:`\u003ca href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview\"\u003ehttps://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview\u003c/a\u003e`.0.",
        "host_value": null,
        "parameterized_host_template": "\u0027{Endpoint}/language\u0027",
        "azure_arm": false,
        "has_lro_operations": true,
        "client_side_validation": false,
        "sync_imports": "{\"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Optional\"]}}, \"regular\": {\"azurecore\": {\"azure.core\": [\"PipelineClient\"], \"azure.profiles\": [\"KnownProfiles\", \"ProfileDefinition\"], \"azure.profiles.multiapiclient\": [\"MultiApiClientMixin\"]}, \"local\": {\"._configuration\": [\"TextAnalyticsClientConfiguration\"], \".._serialization\": [\"Deserializer\", \"Serializer\"], \"._operations_mixin\": [\"TextAnalyticsClientOperationsMixin\"]}}, \"typing\": {\"azurecore\": {\"azure.core.credentials\": [\"TokenCredential\"]}}}",
        "async_imports": "{\"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Optional\"]}}, \"regular\": {\"azurecore\": {\"azure.core\": [\"AsyncPipelineClient\"], \"azure.profiles\": [\"KnownProfiles\", \"ProfileDefinition\"], \"azure.profiles.multiapiclient\": [\"MultiApiClientMixin\"]}, \"local\": {\"._configuration\": [\"TextAnalyticsClientConfiguration\"], \"..._serialization\": [\"Deserializer\", \"Serializer\"], \"._operations_mixin\": [\"TextAnalyticsClientOperationsMixin\"]}}, \"typing\": {\"azurecore\": {\"azure.core.credentials_async\": [\"AsyncTokenCredential\"]}}}"
    },
    "global_parameters": {
        "sync": {
            "credential": {
                "signature": "credential,  # type: \"TokenCredential\"",
                "description": "Credential needed for the client to connect to Azure. Required.",
                "docstring_type": "~azure.core.credentials.TokenCredential",
                "required": true
            },
            "endpoint": {
                "signature": "endpoint,  # type: str",
                "description": "Supported Cognitive Services endpoint (e.g., https://:code:`\u003cresource-name\u003e`.api.cognitiveservices.azure.com). Required.",
                "docstring_type": "str",
                "required": true
            }
        },
        "async": {
            "credential": {
                "signature": "credential: \"AsyncTokenCredential\",",
                "description": "Credential needed for the client to connect to Azure. Required.",
                "docstring_type": "~azure.core.credentials_async.AsyncTokenCredential",
                "required": true
            },
            "endpoint": {
                "signature": "endpoint: str,",
                "description": "Supported Cognitive Services endpoint (e.g., https://:code:`\u003cresource-name\u003e`.api.cognitiveservices.azure.com). Required.",
                "docstring_type": "str",
                "required": true
            }
        },
        "constant": {
        },
        "call": "credential, endpoint",
        "service_client_specific": {
            "sync": {
                "api_version": {
                    "signature": "api_version=None, # type: Optional[str]",
                    "description": "API version to use if no profile is provided, or if missing in profile.",
                    "docstring_type": "str",
                    "required": false
                },
                "profile": {
                    "signature": "profile=KnownProfiles.default, # type: KnownProfiles",
                    "description": "A profile definition, from KnownProfiles to dict.",
                    "docstring_type": "azure.profiles.KnownProfiles",
                    "required": false
                }
            },
            "async": {
                "api_version": {
                    "signature": "api_version: Optional[str] = None,",
                    "description": "API version to use if no profile is provided, or if missing in profile.",
                    "docstring_type": "str",
                    "required": false
                },
                "profile": {
                    "signature": "profile: KnownProfiles = KnownProfiles.default,",
                    "description": "A profile definition, from KnownProfiles to dict.",
                    "docstring_type": "azure.profiles.KnownProfiles",
                    "required": false
                }
            }
        }
    },
    "config": {
        "credential": true,
        "credential_scopes": ["https://cognitiveservices.azure.com/.default"],
        "credential_call_sync": "policies.BearerTokenCredentialPolicy(self.credential, *self.credential_scopes, **kwargs)",
        "credential_call_async": "policies.AsyncBearerTokenCredentialPolicy(self.credential, *self.credential_scopes, **kwargs)",
        "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.configuration\": [\"Configuration\"], \"azure.core.pipeline\": [\"policies\"]}, \"local\": {\"._version\": [\"VERSION\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}, \"typing\": {\"azurecore\": {\"azure.core.credentials\": [\"TokenCredential\"]}}}",
        "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.configuration\": [\"Configuration\"], \"azure.core.pipeline\": [\"policies\"]}, \"local\": {\".._version\": [\"VERSION\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}, \"typing\": {\"azurecore\": {\"azure.core.credentials_async\": [\"AsyncTokenCredential\"]}}}"
    },
    "operation_groups": {
    },
    "operation_mixins": {
        "sync_imports": "{\"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}, \"regular\": {\"local\": {\".\": [[\"models\", \"_models\"]]}, \"stdlib\": {\"typing\": [\"IO\", \"Optional\", \"Union\"]}, \"azurecore\": {\"...._lro\": [\"AnalyzeActionsLROPoller\"], \"azure.core.polling\": [\"LROPoller\"]}}}",
        "async_imports": "{\"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}, \"regular\": {\"local\": {\"..\": [[\"models\", \"_models\"]]}, \"stdlib\": {\"typing\": [\"IO\", \"Optional\", \"Union\"]}, \"azurecore\": {\".....aio._lro_async\": [\"AsyncAnalyzeActionsLROPoller\"], \"azure.core.polling\": [\"AsyncLROPoller\"]}}}",
        "operations": {
            "analyze_text" : {
                "sync": {
                    "signature": "def analyze_text(\n    self,\n    body,  # type: Union[_models.AnalyzeTextTask, IO]\n    show_stats=None,  # type: Optional[bool]\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e _models.AnalyzeTextTaskResult\n",
                    "doc": "\"\"\"Request text analysis over a collection of documents.\n\nSubmit a collection of text documents for analysis.  Specify a single unique task to be\nexecuted immediately.\n\n:param body: Collection of documents to analyze and a single task to execute. Is either a model\n type or a IO type. Required.\n:type body: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextTask or IO\n:param show_stats: (Optional) if set to true, response will contain request and document level\n statistics. Default value is None.\n:type show_stats: bool\n:keyword content_type: Body Parameter content-type. Known values are: \u0027application/json\u0027.\n Default value is None.\n:paramtype content_type: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: AnalyzeTextTaskResult or the result of cls(response)\n:rtype: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextTaskResult\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "body, show_stats, **kwargs"
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def analyze_text(\n    self,\n    body: Union[_models.AnalyzeTextTask, IO],\n    show_stats: Optional[bool] = None,\n    **kwargs: Any\n) -\u003e _models.AnalyzeTextTaskResult:\n",
                    "doc": "\"\"\"Request text analysis over a collection of documents.\n\nSubmit a collection of text documents for analysis.  Specify a single unique task to be\nexecuted immediately.\n\n:param body: Collection of documents to analyze and a single task to execute. Is either a model\n type or a IO type. Required.\n:type body: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextTask or IO\n:param show_stats: (Optional) if set to true, response will contain request and document level\n statistics. Default value is None.\n:type show_stats: bool\n:keyword content_type: Body Parameter content-type. Known values are: \u0027application/json\u0027.\n Default value is None.\n:paramtype content_type: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: AnalyzeTextTaskResult or the result of cls(response)\n:rtype: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextTaskResult\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "body, show_stats, **kwargs"
                }
            },
            "_analyze_text_submit_job_initial" : {
                "sync": {
                    "signature": "def _analyze_text_submit_job_initial(\n    self,\n    body,  # type: Union[_models.AnalyzeTextJobsInput, IO]\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e Optional[_models.AnalyzeTextJobState]\n",
                    "doc": "\"\"\"Submit text analysis job.\n\nSubmit a collection of text documents for analysis. Specify one or more unique tasks to be\nexecuted as a long-running operation.\n\n:param body: Collection of documents to analyze and one or more tasks to execute. Is either a\n model type or a IO type. Required.\n:type body: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobsInput or IO\n:keyword content_type: Body Parameter content-type. Known values are: \u0027application/json\u0027.\n Default value is None.\n:paramtype content_type: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: AnalyzeTextJobState or None or the result of cls(response)\n:rtype: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobState or None\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "body, **kwargs"
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def _analyze_text_submit_job_initial(\n    self,\n    body: Union[_models.AnalyzeTextJobsInput, IO],\n    **kwargs: Any\n) -\u003e Optional[_models.AnalyzeTextJobState]:\n",
                    "doc": "\"\"\"Submit text analysis job.\n\nSubmit a collection of text documents for analysis. Specify one or more unique tasks to be\nexecuted as a long-running operation.\n\n:param body: Collection of documents to analyze and one or more tasks to execute. Is either a\n model type or a IO type. Required.\n:type body: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobsInput or IO\n:keyword content_type: Body Parameter content-type. Known values are: \u0027application/json\u0027.\n Default value is None.\n:paramtype content_type: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: AnalyzeTextJobState or None or the result of cls(response)\n:rtype: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobState or None\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "body, **kwargs"
                }
            },
            "begin_analyze_text_submit_job" : {
                "sync": {
                    "signature": "def begin_analyze_text_submit_job(\n    self,\n    body,  # type: Union[_models.AnalyzeTextJobsInput, IO]\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e AnalyzeActionsLROPoller[_models.AnalyzeTextJobState]\n",
                    "doc": "\"\"\"Submit text analysis job.\n\nSubmit a collection of text documents for analysis. Specify one or more unique tasks to be\nexecuted as a long-running operation.\n\n:param body: Collection of documents to analyze and one or more tasks to execute. Is either a\n model type or a IO type. Required.\n:type body: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobsInput or IO\n:keyword content_type: Body Parameter content-type. Known values are: \u0027application/json\u0027.\n Default value is None.\n:paramtype content_type: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: By default, your polling method will be AnalyzeActionsLROPollingMethod. Pass\n in False for this operation to not poll, or pass in your own initialized polling object for a\n personal polling strategy.\n:paramtype polling: bool or ~azure.core.polling.PollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no\n Retry-After header is present.\n:return: An instance of AnalyzeActionsLROPoller that returns either AnalyzeTextJobState or the\n result of cls(response)\n:rtype:\n ~...._lro.AnalyzeActionsLROPoller[~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobState]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "body, **kwargs"
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def begin_analyze_text_submit_job(\n    self,\n    body: Union[_models.AnalyzeTextJobsInput, IO],\n    **kwargs: Any\n) -\u003e AsyncAnalyzeActionsLROPoller[_models.AnalyzeTextJobState]:\n",
                    "doc": "\"\"\"Submit text analysis job.\n\nSubmit a collection of text documents for analysis. Specify one or more unique tasks to be\nexecuted as a long-running operation.\n\n:param body: Collection of documents to analyze and one or more tasks to execute. Is either a\n model type or a IO type. Required.\n:type body: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobsInput or IO\n:keyword content_type: Body Parameter content-type. Known values are: \u0027application/json\u0027.\n Default value is None.\n:paramtype content_type: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: By default, your polling method will be AsyncAnalyzeActionsLROPollingMethod.\n Pass in False for this operation to not poll, or pass in your own initialized polling object\n for a personal polling strategy.\n:paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no\n Retry-After header is present.\n:return: An instance of AsyncAnalyzeActionsLROPoller that returns either AnalyzeTextJobState or\n the result of cls(response)\n:rtype:\n ~.....aio._lro_async.AsyncAnalyzeActionsLROPoller[~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobState]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "body, **kwargs"
                }
            },
            "analyze_text_job_status" : {
                "sync": {
                    "signature": "def analyze_text_job_status(\n    self,\n    job_id,  # type: str\n    show_stats=None,  # type: Optional[bool]\n    top=None,  # type: Optional[int]\n    skip=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e _models.AnalyzeTextJobState\n",
                    "doc": "\"\"\"Get analysis status and results.\n\nGet the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are\nsucceeded, the job will transition to the succeeded state and results will be available for\neach task.\n\n:param job_id: Job ID. Required.\n:type job_id: str\n:param show_stats: (Optional) if set to true, response will contain request and document level\n statistics. Default value is None.\n:type show_stats: bool\n:param top: The maximum number of resources to return from the collection. Default value is\n None.\n:type top: int\n:param skip: An offset into the collection of the first resource to be returned. Default value\n is None.\n:type skip: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: AnalyzeTextJobState or the result of cls(response)\n:rtype: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobState\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "job_id, show_stats, top, skip, **kwargs"
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def analyze_text_job_status(\n    self,\n    job_id: str,\n    show_stats: Optional[bool] = None,\n    top: Optional[int] = None,\n    skip: Optional[int] = None,\n    **kwargs: Any\n) -\u003e _models.AnalyzeTextJobState:\n",
                    "doc": "\"\"\"Get analysis status and results.\n\nGet the status of an analysis job.  A job may consist of one or more tasks.  Once all tasks are\nsucceeded, the job will transition to the succeeded state and results will be available for\neach task.\n\n:param job_id: Job ID. Required.\n:type job_id: str\n:param show_stats: (Optional) if set to true, response will contain request and document level\n statistics. Default value is None.\n:type show_stats: bool\n:param top: The maximum number of resources to return from the collection. Default value is\n None.\n:type top: int\n:param skip: An offset into the collection of the first resource to be returned. Default value\n is None.\n:type skip: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: AnalyzeTextJobState or the result of cls(response)\n:rtype: ~azure.ai.textanalytics.v2022_05_01.models.AnalyzeTextJobState\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "job_id, show_stats, top, skip, **kwargs"
                }
            },
            "_analyze_text_cancel_job_initial" : {
                "sync": {
                    "signature": "def _analyze_text_cancel_job_initial(  # pylint: disable=inconsistent-return-statements\n    self,\n    job_id,  # type: str\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e None\n",
                    "doc": "\"\"\"Cancel a long-running Text Analysis job.\n\nCancel a long-running Text Analysis job.\n\n:param job_id: Job ID. Required.\n:type job_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None or the result of cls(response)\n:rtype: None\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "job_id, **kwargs"
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def _analyze_text_cancel_job_initial(  # pylint: disable=inconsistent-return-statements\n    self,\n    job_id: str,\n    **kwargs: Any\n) -\u003e None:\n",
                    "doc": "\"\"\"Cancel a long-running Text Analysis job.\n\nCancel a long-running Text Analysis job.\n\n:param job_id: Job ID. Required.\n:type job_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None or the result of cls(response)\n:rtype: None\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "job_id, **kwargs"
                }
            },
            "begin_analyze_text_cancel_job" : {
                "sync": {
                    "signature": "def begin_analyze_text_cancel_job(\n    self,\n    job_id,  # type: str\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e LROPoller[None]\n",
                    "doc": "\"\"\"Cancel a long-running Text Analysis job.\n\nCancel a long-running Text Analysis job.\n\n:param job_id: Job ID. Required.\n:type job_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: By default, your polling method will be LROBasePolling. Pass in False for\n this operation to not poll, or pass in your own initialized polling object for a personal\n polling strategy.\n:paramtype polling: bool or ~azure.core.polling.PollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no\n Retry-After header is present.\n:return: An instance of LROPoller that returns either None or the result of cls(response)\n:rtype: ~azure.core.polling.LROPoller[None]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "job_id, **kwargs"
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def begin_analyze_text_cancel_job(\n    self,\n    job_id: str,\n    **kwargs: Any\n) -\u003e AsyncLROPoller[None]:\n",
                    "doc": "\"\"\"Cancel a long-running Text Analysis job.\n\nCancel a long-running Text Analysis job.\n\n:param job_id: Job ID. Required.\n:type job_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False\n for this operation to not poll, or pass in your own initialized polling object for a personal\n polling strategy.\n:paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no\n Retry-After header is present.\n:return: An instance of AsyncLROPoller that returns either None or the result of cls(response)\n:rtype: ~azure.core.polling.AsyncLROPoller[None]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\"",
                    "call": "job_id, **kwargs"
                }
            }
        }
    }
}