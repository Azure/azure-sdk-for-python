# Stubs for azure.ai.textanalytics._models (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._generated.models._models import LanguageInput, MultiLanguageInput
from typing import Any, Optional, List

class DictMixin:
    def __setitem__(self, key: Any, item: Any) -> None: ...
    def __getitem__(self, key: Any): ...
    def __len__(self): ...
    def __delitem__(self, key: Any) -> None: ...
    def __eq__(self, other: Any): ...
    def __ne__(self, other: Any): ...
    def has_key(self, k: Any): ...
    def update(self, *args: Any, **kwargs: Any): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def get(self, key: Any, default: Optional[Any] = ...): ...

class DetectedLanguage(DictMixin):
    name: str = ...
    iso6391_name: str = ...
    score: float = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RecognizeEntitiesResult(DictMixin):
    id: str = ...
    entities: List[CategorizedEntity] = ...
    statistics: TextDocumentStatistics = ...
    is_error: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RecognizePiiEntitiesResult(DictMixin):
    id: str = ...
    entities: List[PiiEntity] = ...
    statistics: TextDocumentStatistics = ...
    is_error: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DetectLanguageResult(DictMixin):
    id: str = ...
    primary_language: DetectedLanguage = ...
    statistics: TextDocumentStatistics = ...
    is_error: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...

class CategorizedEntity(DictMixin):
    text: str = ...
    category: str = ...
    subcategory: str = ...
    offset: int = ...
    length: int = ...
    score: float = ...
    def __init__(self, **kwargs: Any) -> None: ...

class PiiEntity(DictMixin):
    text: str = ...
    category: str = ...
    subcategory: str = ...
    offset: int = ...
    length: int = ...
    score: float = ...
    def __init__(self, **kwargs: Any) -> None: ...

class TextAnalyticsError(DictMixin):
    code: str = ...
    message: str = ...
    target: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class ExtractKeyPhrasesResult(DictMixin):
    id: str = ...
    key_phrases: List[str] = ...
    statistics: TextDocumentStatistics = ...
    is_error: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RecognizeLinkedEntitiesResult(DictMixin):
    id: str = ...
    entities: List[LinkedEntity] = ...
    statistics: TextDocumentStatistics = ...
    is_error: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...

class AnalyzeSentimentResult(DictMixin):
    id: str = ...
    sentiment: str = ...
    statistics: TextDocumentStatistics = ...
    confidence_scores: SentimentConfidenceScorePerLabel = ...
    sentences: List[SentenceSentiment] = ...
    is_error: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...

class TextDocumentStatistics(DictMixin):
    character_count: int = ...
    transaction_count: int = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DocumentError(DictMixin):
    id: str = ...
    error: TextAnalyticsError = ...
    is_error: bool = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def __getattr__(self, attr: Any) -> None: ...

class DetectLanguageInput(LanguageInput):
    id: str = ...
    text: str = ...
    country_hint: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class LinkedEntity(DictMixin):
    name: str = ...
    matches: List[LinkedEntityMatch] = ...
    language: str = ...
    data_source_entity_id: str = ...
    url: str = ...
    data_source: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class LinkedEntityMatch(DictMixin):
    score: float = ...
    text: str = ...
    offset: int = ...
    length: int = ...
    def __init__(self, **kwargs: Any) -> None: ...

class TextDocumentInput(MultiLanguageInput):
    id: str = ...
    text: str = ...
    language: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class TextDocumentBatchStatistics(DictMixin):
    document_count: int = ...
    valid_document_count: int = ...
    erroneous_document_count: int = ...
    transaction_count: int = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SentenceSentiment(DictMixin):
    sentiment: str = ...
    confidence_scores: SentimentConfidenceScorePerLabel = ...
    offset: int = ...
    length: int = ...
    warnings: List[str] = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SentimentConfidenceScorePerLabel(DictMixin):
    positive: float = ...
    neutral: float = ...
    negative: float = ...
    def __init__(self, **kwargs: Any) -> None: ...
