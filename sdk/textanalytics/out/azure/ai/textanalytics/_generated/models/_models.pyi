# Stubs for azure.ai.textanalytics._generated.models._models (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from azure.core.exceptions import HttpResponseError
from msrest.serialization import Model
from typing import Any

class DetectedLanguage(Model):
    name: Any = ...
    iso6391_name: Any = ...
    score: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DocumentEntities(Model):
    id: Any = ...
    entities: Any = ...
    statistics: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DocumentError(Model):
    id: Any = ...
    error: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DocumentKeyPhrases(Model):
    id: Any = ...
    key_phrases: Any = ...
    statistics: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DocumentLanguage(Model):
    id: Any = ...
    detected_languages: Any = ...
    statistics: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DocumentLinkedEntities(Model):
    id: Any = ...
    entities: Any = ...
    statistics: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DocumentSentiment(Model):
    id: Any = ...
    sentiment: Any = ...
    statistics: Any = ...
    document_scores: Any = ...
    sentences: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DocumentStatistics(Model):
    characters_count: Any = ...
    transactions_count: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class EntitiesResult(Model):
    documents: Any = ...
    errors: Any = ...
    statistics: Any = ...
    model_version: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Entity(Model):
    text: Any = ...
    type: Any = ...
    subtype: Any = ...
    offset: Any = ...
    length: Any = ...
    score: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class EntityLinkingResult(Model):
    documents: Any = ...
    errors: Any = ...
    statistics: Any = ...
    model_version: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class InnerError(Model):
    code: Any = ...
    message: Any = ...
    details: Any = ...
    target: Any = ...
    inner_error: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class KeyPhraseResult(Model):
    documents: Any = ...
    errors: Any = ...
    statistics: Any = ...
    model_version: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class LanguageBatchInput(Model):
    documents: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class LanguageInput(Model):
    id: Any = ...
    text: Any = ...
    country_hint: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class LanguageResult(Model):
    documents: Any = ...
    errors: Any = ...
    statistics: Any = ...
    model_version: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class LinkedEntity(Model):
    name: Any = ...
    matches: Any = ...
    language: Any = ...
    id: Any = ...
    url: Any = ...
    data_source: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Match(Model):
    score: Any = ...
    text: Any = ...
    offset: Any = ...
    length: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class MultiLanguageBatchInput(Model):
    documents: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class MultiLanguageInput(Model):
    id: Any = ...
    text: Any = ...
    language: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RequestStatistics(Model):
    documents_count: Any = ...
    valid_documents_count: Any = ...
    erroneous_documents_count: Any = ...
    transactions_count: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SentenceSentiment(Model):
    sentiment: Any = ...
    sentence_scores: Any = ...
    offset: Any = ...
    length: Any = ...
    warnings: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SentimentConfidenceScorePerLabel(Model):
    positive: Any = ...
    neutral: Any = ...
    negative: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SentimentResponse(Model):
    documents: Any = ...
    errors: Any = ...
    statistics: Any = ...
    model_version: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class TextAnalyticsError(Model):
    code: Any = ...
    message: Any = ...
    target: Any = ...
    inner_error: Any = ...
    details: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class TextAnalyticsErrorException(HttpResponseError):
    error: Any = ...
    def __init__(self, response: Any, deserialize: Any, *args: Any) -> None: ...
