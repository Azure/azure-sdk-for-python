# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CheckNameRequest(msrest.serialization.Model):
    """The result returned from a database check name availability request.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Resource name.
    :type name: str
    :ivar type: Required. The type of resource, for instance
     Microsoft.DigitalTwins/digitalTwinsInstances. Default value:
     "Microsoft.DigitalTwins/digitalTwinsInstances".
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "Microsoft.DigitalTwins/digitalTwinsInstances"

    def __init__(
        self,
        **kwargs
    ):
        super(CheckNameRequest, self).__init__(**kwargs)
        self.name = kwargs['name']


class CheckNameResult(msrest.serialization.Model):
    """The result returned from a check name availability request.

    :param name_available: Specifies a Boolean value that indicates if the name is available.
    :type name_available: bool
    :param message: Message indicating an unavailable name due to a conflict, or a description of
     the naming rules that are violated.
    :type message: str
    :param reason: Message providing the reason why the given name is invalid. Possible values
     include: "Invalid", "AlreadyExists".
    :type reason: str or ~azure.mgmt.digitaltwins.v2020_12_01.models.Reason
    """

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'message': {'key': 'message', 'type': 'str'},
        'reason': {'key': 'reason', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CheckNameResult, self).__init__(**kwargs)
        self.name_available = kwargs.get('name_available', None)
        self.message = kwargs.get('message', None)
        self.reason = kwargs.get('reason', None)


class ConnectionProperties(msrest.serialization.Model):
    """The properties of a private endpoint connection.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The provisioning state. Possible values include: "Pending",
     "Approved", "Rejected", "Disconnected".
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.ConnectionPropertiesProvisioningState
    :param private_endpoint:
    :type private_endpoint:
     ~azure.mgmt.digitaltwins.v2020_12_01.models.ConnectionPropertiesPrivateEndpoint
    :param group_ids: The list of group ids for the private endpoint connection.
    :type group_ids: list[str]
    :param private_link_service_connection_state:
    :type private_link_service_connection_state:
     ~azure.mgmt.digitaltwins.v2020_12_01.models.ConnectionPropertiesPrivateLinkServiceConnectionState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'private_endpoint': {'key': 'privateEndpoint', 'type': 'ConnectionPropertiesPrivateEndpoint'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
        'private_link_service_connection_state': {'key': 'privateLinkServiceConnectionState', 'type': 'ConnectionPropertiesPrivateLinkServiceConnectionState'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConnectionProperties, self).__init__(**kwargs)
        self.provisioning_state = None
        self.private_endpoint = kwargs.get('private_endpoint', None)
        self.group_ids = kwargs.get('group_ids', None)
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)


class PrivateEndpoint(msrest.serialization.Model):
    """The private endpoint property of a private endpoint connection.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.id = None


class ConnectionPropertiesPrivateEndpoint(PrivateEndpoint):
    """ConnectionPropertiesPrivateEndpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConnectionPropertiesPrivateEndpoint, self).__init__(**kwargs)


class ConnectionState(msrest.serialization.Model):
    """The current state of a private endpoint connection.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. The status of a private endpoint connection. Possible values include:
     "Pending", "Approved", "Rejected", "Disconnected".
    :type status: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.PrivateLinkServiceConnectionStatus
    :param description: Required. The description for the current state of a private endpoint
     connection.
    :type description: str
    :param actions_required: Actions required for a private endpoint connection.
    :type actions_required: str
    """

    _validation = {
        'status': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConnectionState, self).__init__(**kwargs)
        self.status = kwargs['status']
        self.description = kwargs['description']
        self.actions_required = kwargs.get('actions_required', None)


class ConnectionPropertiesPrivateLinkServiceConnectionState(ConnectionState):
    """ConnectionPropertiesPrivateLinkServiceConnectionState.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. The status of a private endpoint connection. Possible values include:
     "Pending", "Approved", "Rejected", "Disconnected".
    :type status: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.PrivateLinkServiceConnectionStatus
    :param description: Required. The description for the current state of a private endpoint
     connection.
    :type description: str
    :param actions_required: Actions required for a private endpoint connection.
    :type actions_required: str
    """

    _validation = {
        'status': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ConnectionPropertiesPrivateLinkServiceConnectionState, self).__init__(**kwargs)


class DigitalTwinsResource(msrest.serialization.Model):
    """The common properties of a DigitalTwinsInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :param location: Required. The resource location.
    :type location: str
    :param tags: A set of tags. The resource tags.
    :type tags: dict[str, str]
    :param identity: The managed identity for the DigitalTwinsInstance.
    :type identity: ~azure.mgmt.digitaltwins.v2020_12_01.models.DigitalTwinsIdentity
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?!-)[A-Za-z0-9-]{3,63}(?<!-)$'},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'DigitalTwinsIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs['location']
        self.tags = kwargs.get('tags', None)
        self.identity = kwargs.get('identity', None)


class DigitalTwinsDescription(DigitalTwinsResource):
    """The description of the DigitalTwins service.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :param location: Required. The resource location.
    :type location: str
    :param tags: A set of tags. The resource tags.
    :type tags: dict[str, str]
    :param identity: The managed identity for the DigitalTwinsInstance.
    :type identity: ~azure.mgmt.digitaltwins.v2020_12_01.models.DigitalTwinsIdentity
    :ivar created_time: Time when DigitalTwinsInstance was created.
    :vartype created_time: ~datetime.datetime
    :ivar last_updated_time: Time when DigitalTwinsInstance was updated.
    :vartype last_updated_time: ~datetime.datetime
    :ivar provisioning_state: The provisioning state. Possible values include: "Provisioning",
     "Deleting", "Updating", "Succeeded", "Failed", "Canceled", "Deleted", "Warning", "Suspending",
     "Restoring", "Moving".
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.ProvisioningState
    :ivar host_name: Api endpoint to work with DigitalTwinsInstance.
    :vartype host_name: str
    :param private_endpoint_connections:
    :type private_endpoint_connections:
     list[~azure.mgmt.digitaltwins.v2020_12_01.models.PrivateEndpointConnection]
    :param public_network_access: Public network access for the DigitalTwinsInstance. Possible
     values include: "Enabled", "Disabled".
    :type public_network_access: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.PublicNetworkAccess
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?!-)[A-Za-z0-9-]{3,63}(?<!-)$'},
        'type': {'readonly': True},
        'location': {'required': True},
        'created_time': {'readonly': True},
        'last_updated_time': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'host_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'DigitalTwinsIdentity'},
        'created_time': {'key': 'properties.createdTime', 'type': 'iso-8601'},
        'last_updated_time': {'key': 'properties.lastUpdatedTime', 'type': 'iso-8601'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'host_name': {'key': 'properties.hostName', 'type': 'str'},
        'private_endpoint_connections': {'key': 'properties.privateEndpointConnections', 'type': '[PrivateEndpointConnection]'},
        'public_network_access': {'key': 'properties.publicNetworkAccess', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsDescription, self).__init__(**kwargs)
        self.created_time = None
        self.last_updated_time = None
        self.provisioning_state = None
        self.host_name = None
        self.private_endpoint_connections = kwargs.get('private_endpoint_connections', None)
        self.public_network_access = kwargs.get('public_network_access', None)


class DigitalTwinsDescriptionListResult(msrest.serialization.Model):
    """A list of DigitalTwins description objects with a next link.

    :param next_link: The link used to get the next page of DigitalTwins description objects.
    :type next_link: str
    :param value: A list of DigitalTwins description objects.
    :type value: list[~azure.mgmt.digitaltwins.v2020_12_01.models.DigitalTwinsDescription]
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DigitalTwinsDescription]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsDescriptionListResult, self).__init__(**kwargs)
        self.next_link = kwargs.get('next_link', None)
        self.value = kwargs.get('value', None)


class ExternalResource(msrest.serialization.Model):
    """Definition of a resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: Extension resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$'},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExternalResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class DigitalTwinsEndpointResource(ExternalResource):
    """DigitalTwinsInstance endpoint resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: Extension resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :param properties: Required. DigitalTwinsInstance endpoint resource properties.
    :type properties:
     ~azure.mgmt.digitaltwins.v2020_12_01.models.DigitalTwinsEndpointResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$'},
        'type': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DigitalTwinsEndpointResourceProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsEndpointResource, self).__init__(**kwargs)
        self.properties = kwargs['properties']


class DigitalTwinsEndpointResourceListResult(msrest.serialization.Model):
    """A list of DigitalTwinsInstance Endpoints with a next link.

    :param next_link: The link used to get the next page of DigitalTwinsInstance Endpoints.
    :type next_link: str
    :param value: A list of DigitalTwinsInstance Endpoints.
    :type value: list[~azure.mgmt.digitaltwins.v2020_12_01.models.DigitalTwinsEndpointResource]
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DigitalTwinsEndpointResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsEndpointResourceListResult, self).__init__(**kwargs)
        self.next_link = kwargs.get('next_link', None)
        self.value = kwargs.get('value', None)


class DigitalTwinsEndpointResourceProperties(msrest.serialization.Model):
    """Properties related to Digital Twins Endpoint.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: EventGrid, EventHub, ServiceBus.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param endpoint_type: Required. The type of Digital Twins endpoint.Constant filled by server.
     Possible values include: "EventHub", "EventGrid", "ServiceBus".
    :type endpoint_type: str or ~azure.mgmt.digitaltwins.v2020_12_01.models.EndpointType
    :ivar provisioning_state: The provisioning state. Possible values include: "Provisioning",
     "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", "Warning", "Suspending", "Restoring",
     "Moving", "Disabled".
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.EndpointProvisioningState
    :ivar created_time: Time when the Endpoint was added to DigitalTwinsInstance.
    :vartype created_time: ~datetime.datetime
    :param authentication_type: Specifies the authentication type being used for connecting to the
     endpoint. Possible values include: "KeyBased", "IdentityBased".
    :type authentication_type: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.AuthenticationType
    :param dead_letter_secret: Dead letter storage secret for key-based authentication. Will be
     obfuscated during read.
    :type dead_letter_secret: str
    :param dead_letter_uri: Dead letter storage URL for identity-based authentication.
    :type dead_letter_uri: str
    """

    _validation = {
        'endpoint_type': {'required': True},
        'provisioning_state': {'readonly': True},
        'created_time': {'readonly': True},
    }

    _attribute_map = {
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'dead_letter_secret': {'key': 'deadLetterSecret', 'type': 'str'},
        'dead_letter_uri': {'key': 'deadLetterUri', 'type': 'str'},
    }

    _subtype_map = {
        'endpoint_type': {'EventGrid': 'EventGrid', 'EventHub': 'EventHub', 'ServiceBus': 'ServiceBus'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsEndpointResourceProperties, self).__init__(**kwargs)
        self.endpoint_type = None  # type: Optional[str]
        self.provisioning_state = None
        self.created_time = None
        self.authentication_type = kwargs.get('authentication_type', None)
        self.dead_letter_secret = kwargs.get('dead_letter_secret', None)
        self.dead_letter_uri = kwargs.get('dead_letter_uri', None)


class DigitalTwinsIdentity(msrest.serialization.Model):
    """The managed identity for the DigitalTwinsInstance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param type: The type of Managed Identity used by the DigitalTwinsInstance. Only SystemAssigned
     is supported. Possible values include: "None", "SystemAssigned".
    :type type: str or ~azure.mgmt.digitaltwins.v2020_12_01.models.DigitalTwinsIdentityType
    :ivar principal_id: The object id of the Managed Identity Resource. This will be sent to the RP
     from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a
     systemAssigned(implicit) identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id of the Managed Identity Resource. This will be sent to the RP
     from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a
     systemAssigned(implicit) identity.
    :vartype tenant_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsIdentity, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.principal_id = None
        self.tenant_id = None


class DigitalTwinsPatchDescription(msrest.serialization.Model):
    """The description of the DigitalTwins service.

    :param tags: A set of tags. Instance patch properties.
    :type tags: dict[str, str]
    :param identity: The managed identity for the DigitalTwinsInstance.
    :type identity: ~azure.mgmt.digitaltwins.v2020_12_01.models.DigitalTwinsIdentity
    :param properties: Properties for the DigitalTwinsInstance.
    :type properties: ~azure.mgmt.digitaltwins.v2020_12_01.models.DigitalTwinsPatchProperties
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'DigitalTwinsIdentity'},
        'properties': {'key': 'properties', 'type': 'DigitalTwinsPatchProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsPatchDescription, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.identity = kwargs.get('identity', None)
        self.properties = kwargs.get('properties', None)


class DigitalTwinsPatchProperties(msrest.serialization.Model):
    """The properties of a DigitalTwinsInstance.

    :param public_network_access: Public network access for the DigitalTwinsInstance. Possible
     values include: "Enabled", "Disabled".
    :type public_network_access: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.PublicNetworkAccess
    """

    _attribute_map = {
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DigitalTwinsPatchProperties, self).__init__(**kwargs)
        self.public_network_access = kwargs.get('public_network_access', None)


class ErrorDefinition(msrest.serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.digitaltwins.v2020_12_01.models.ErrorDefinition]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDefinition, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    :param error: Error description.
    :type error: ~azure.mgmt.digitaltwins.v2020_12_01.models.ErrorDefinition
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDefinition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class EventGrid(DigitalTwinsEndpointResourceProperties):
    """Properties related to EventGrid.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param endpoint_type: Required. The type of Digital Twins endpoint.Constant filled by server.
     Possible values include: "EventHub", "EventGrid", "ServiceBus".
    :type endpoint_type: str or ~azure.mgmt.digitaltwins.v2020_12_01.models.EndpointType
    :ivar provisioning_state: The provisioning state. Possible values include: "Provisioning",
     "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", "Warning", "Suspending", "Restoring",
     "Moving", "Disabled".
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.EndpointProvisioningState
    :ivar created_time: Time when the Endpoint was added to DigitalTwinsInstance.
    :vartype created_time: ~datetime.datetime
    :param authentication_type: Specifies the authentication type being used for connecting to the
     endpoint. Possible values include: "KeyBased", "IdentityBased".
    :type authentication_type: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.AuthenticationType
    :param dead_letter_secret: Dead letter storage secret for key-based authentication. Will be
     obfuscated during read.
    :type dead_letter_secret: str
    :param dead_letter_uri: Dead letter storage URL for identity-based authentication.
    :type dead_letter_uri: str
    :param topic_endpoint: Required. EventGrid Topic Endpoint.
    :type topic_endpoint: str
    :param access_key1: Required. EventGrid secondary accesskey. Will be obfuscated during read.
    :type access_key1: str
    :param access_key2: EventGrid secondary accesskey. Will be obfuscated during read.
    :type access_key2: str
    """

    _validation = {
        'endpoint_type': {'required': True},
        'provisioning_state': {'readonly': True},
        'created_time': {'readonly': True},
        'topic_endpoint': {'required': True},
        'access_key1': {'required': True},
    }

    _attribute_map = {
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'dead_letter_secret': {'key': 'deadLetterSecret', 'type': 'str'},
        'dead_letter_uri': {'key': 'deadLetterUri', 'type': 'str'},
        'topic_endpoint': {'key': 'TopicEndpoint', 'type': 'str'},
        'access_key1': {'key': 'accessKey1', 'type': 'str'},
        'access_key2': {'key': 'accessKey2', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EventGrid, self).__init__(**kwargs)
        self.endpoint_type = 'EventGrid'  # type: str
        self.topic_endpoint = kwargs['topic_endpoint']
        self.access_key1 = kwargs['access_key1']
        self.access_key2 = kwargs.get('access_key2', None)


class EventHub(DigitalTwinsEndpointResourceProperties):
    """Properties related to EventHub.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param endpoint_type: Required. The type of Digital Twins endpoint.Constant filled by server.
     Possible values include: "EventHub", "EventGrid", "ServiceBus".
    :type endpoint_type: str or ~azure.mgmt.digitaltwins.v2020_12_01.models.EndpointType
    :ivar provisioning_state: The provisioning state. Possible values include: "Provisioning",
     "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", "Warning", "Suspending", "Restoring",
     "Moving", "Disabled".
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.EndpointProvisioningState
    :ivar created_time: Time when the Endpoint was added to DigitalTwinsInstance.
    :vartype created_time: ~datetime.datetime
    :param authentication_type: Specifies the authentication type being used for connecting to the
     endpoint. Possible values include: "KeyBased", "IdentityBased".
    :type authentication_type: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.AuthenticationType
    :param dead_letter_secret: Dead letter storage secret for key-based authentication. Will be
     obfuscated during read.
    :type dead_letter_secret: str
    :param dead_letter_uri: Dead letter storage URL for identity-based authentication.
    :type dead_letter_uri: str
    :param connection_string_primary_key: PrimaryConnectionString of the endpoint for key-based
     authentication. Will be obfuscated during read.
    :type connection_string_primary_key: str
    :param connection_string_secondary_key: SecondaryConnectionString of the endpoint for key-based
     authentication. Will be obfuscated during read.
    :type connection_string_secondary_key: str
    :param endpoint_uri: The URL of the EventHub namespace for identity-based authentication. It
     must include the protocol sb://.
    :type endpoint_uri: str
    :param entity_path: The EventHub name in the EventHub namespace for identity-based
     authentication.
    :type entity_path: str
    """

    _validation = {
        'endpoint_type': {'required': True},
        'provisioning_state': {'readonly': True},
        'created_time': {'readonly': True},
    }

    _attribute_map = {
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'dead_letter_secret': {'key': 'deadLetterSecret', 'type': 'str'},
        'dead_letter_uri': {'key': 'deadLetterUri', 'type': 'str'},
        'connection_string_primary_key': {'key': 'connectionStringPrimaryKey', 'type': 'str'},
        'connection_string_secondary_key': {'key': 'connectionStringSecondaryKey', 'type': 'str'},
        'endpoint_uri': {'key': 'endpointUri', 'type': 'str'},
        'entity_path': {'key': 'entityPath', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EventHub, self).__init__(**kwargs)
        self.endpoint_type = 'EventHub'  # type: str
        self.connection_string_primary_key = kwargs.get('connection_string_primary_key', None)
        self.connection_string_secondary_key = kwargs.get('connection_string_secondary_key', None)
        self.endpoint_uri = kwargs.get('endpoint_uri', None)
        self.entity_path = kwargs.get('entity_path', None)


class GroupIdInformation(msrest.serialization.Model):
    """The group information for creating a private endpoint on Digital Twin.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties: Required.
    :type properties:
     ~azure.mgmt.digitaltwins.v2020_12_01.models.GroupIdInformationPropertiesAutoGenerated
    :param id: The resource identifier.
    :type id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    _validation = {
        'properties': {'required': True},
        'name': {'readonly': True, 'pattern': r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$'},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'GroupIdInformationPropertiesAutoGenerated'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GroupIdInformation, self).__init__(**kwargs)
        self.properties = kwargs['properties']
        self.id = kwargs.get('id', None)
        self.name = None
        self.type = None


class GroupIdInformationProperties(msrest.serialization.Model):
    """The properties for a group information object.

    :param group_id: The group id.
    :type group_id: str
    :param required_members: The required members for a specific group id.
    :type required_members: list[str]
    :param required_zone_names: The required DNS zones for a specific group id.
    :type required_zone_names: list[str]
    """

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'required_members': {'key': 'requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'requiredZoneNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GroupIdInformationProperties, self).__init__(**kwargs)
        self.group_id = kwargs.get('group_id', None)
        self.required_members = kwargs.get('required_members', None)
        self.required_zone_names = kwargs.get('required_zone_names', None)


class GroupIdInformationPropertiesAutoGenerated(GroupIdInformationProperties):
    """GroupIdInformationPropertiesAutoGenerated.

    :param group_id: The group id.
    :type group_id: str
    :param required_members: The required members for a specific group id.
    :type required_members: list[str]
    :param required_zone_names: The required DNS zones for a specific group id.
    :type required_zone_names: list[str]
    """

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'required_members': {'key': 'requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'requiredZoneNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GroupIdInformationPropertiesAutoGenerated, self).__init__(**kwargs)


class GroupIdInformationResponse(msrest.serialization.Model):
    """The available private link resources for a Digital Twin.

    :param value: The list of available private link resources for a Digital Twin.
    :type value: list[~azure.mgmt.digitaltwins.v2020_12_01.models.GroupIdInformation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[GroupIdInformation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GroupIdInformationResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class Operation(msrest.serialization.Model):
    """DigitalTwins service REST API operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Operation name: {provider}/{resource}/{read | write | action | delete}.
    :vartype name: str
    :param display: Operation properties display.
    :type display: ~azure.mgmt.digitaltwins.v2020_12_01.models.OperationDisplay
    :ivar origin: The intended executor of the operation.
    :vartype origin: str
    :ivar is_data_action: If the operation is a data action (for data plane rbac).
    :vartype is_data_action: bool
    """

    _validation = {
        'name': {'readonly': True},
        'origin': {'readonly': True},
        'is_data_action': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = kwargs.get('display', None)
        self.origin = None
        self.is_data_action = None


class OperationDisplay(msrest.serialization.Model):
    """The object that represents the operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: Service provider: Microsoft DigitalTwins.
    :vartype provider: str
    :ivar resource: Resource Type: DigitalTwinsInstances.
    :vartype resource: str
    :ivar operation: Name of the operation.
    :vartype operation: str
    :ivar description: Friendly description for the operation,.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """A list of DigitalTwins service operations. It contains a list of operations and a URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param next_link: The link used to get the next page of DigitalTwins description objects.
    :type next_link: str
    :ivar value: A list of DigitalTwins operations supported by the Microsoft.DigitalTwins resource
     provider.
    :vartype value: list[~azure.mgmt.digitaltwins.v2020_12_01.models.Operation]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationListResult, self).__init__(**kwargs)
        self.next_link = kwargs.get('next_link', None)
        self.value = None


class PrivateEndpointConnection(msrest.serialization.Model):
    """The private endpoint connection of a Digital Twin.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :param properties: Required.
    :type properties:
     ~azure.mgmt.digitaltwins.v2020_12_01.models.PrivateEndpointConnectionProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$'},
        'type': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'PrivateEndpointConnectionProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PrivateEndpointConnection, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = kwargs['properties']


class PrivateEndpointConnectionProperties(ConnectionProperties):
    """PrivateEndpointConnectionProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The provisioning state. Possible values include: "Pending",
     "Approved", "Rejected", "Disconnected".
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.ConnectionPropertiesProvisioningState
    :param private_endpoint:
    :type private_endpoint:
     ~azure.mgmt.digitaltwins.v2020_12_01.models.ConnectionPropertiesPrivateEndpoint
    :param group_ids: The list of group ids for the private endpoint connection.
    :type group_ids: list[str]
    :param private_link_service_connection_state:
    :type private_link_service_connection_state:
     ~azure.mgmt.digitaltwins.v2020_12_01.models.ConnectionPropertiesPrivateLinkServiceConnectionState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'private_endpoint': {'key': 'privateEndpoint', 'type': 'ConnectionPropertiesPrivateEndpoint'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
        'private_link_service_connection_state': {'key': 'privateLinkServiceConnectionState', 'type': 'ConnectionPropertiesPrivateLinkServiceConnectionState'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PrivateEndpointConnectionProperties, self).__init__(**kwargs)


class PrivateEndpointConnectionsResponse(msrest.serialization.Model):
    """The available private link connections for a Digital Twin.

    :param value: The list of available private link connections for a Digital Twin.
    :type value: list[~azure.mgmt.digitaltwins.v2020_12_01.models.PrivateEndpointConnection]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateEndpointConnection]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PrivateEndpointConnectionsResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ServiceBus(DigitalTwinsEndpointResourceProperties):
    """Properties related to ServiceBus.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param endpoint_type: Required. The type of Digital Twins endpoint.Constant filled by server.
     Possible values include: "EventHub", "EventGrid", "ServiceBus".
    :type endpoint_type: str or ~azure.mgmt.digitaltwins.v2020_12_01.models.EndpointType
    :ivar provisioning_state: The provisioning state. Possible values include: "Provisioning",
     "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", "Warning", "Suspending", "Restoring",
     "Moving", "Disabled".
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.EndpointProvisioningState
    :ivar created_time: Time when the Endpoint was added to DigitalTwinsInstance.
    :vartype created_time: ~datetime.datetime
    :param authentication_type: Specifies the authentication type being used for connecting to the
     endpoint. Possible values include: "KeyBased", "IdentityBased".
    :type authentication_type: str or
     ~azure.mgmt.digitaltwins.v2020_12_01.models.AuthenticationType
    :param dead_letter_secret: Dead letter storage secret for key-based authentication. Will be
     obfuscated during read.
    :type dead_letter_secret: str
    :param dead_letter_uri: Dead letter storage URL for identity-based authentication.
    :type dead_letter_uri: str
    :param primary_connection_string: PrimaryConnectionString of the endpoint for key-based
     authentication. Will be obfuscated during read.
    :type primary_connection_string: str
    :param secondary_connection_string: SecondaryConnectionString of the endpoint for key-based
     authentication. Will be obfuscated during read.
    :type secondary_connection_string: str
    :param endpoint_uri: The URL of the ServiceBus namespace for identity-based authentication. It
     must include the protocol sb://.
    :type endpoint_uri: str
    :param entity_path: The ServiceBus Topic name for identity-based authentication.
    :type entity_path: str
    """

    _validation = {
        'endpoint_type': {'required': True},
        'provisioning_state': {'readonly': True},
        'created_time': {'readonly': True},
    }

    _attribute_map = {
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'dead_letter_secret': {'key': 'deadLetterSecret', 'type': 'str'},
        'dead_letter_uri': {'key': 'deadLetterUri', 'type': 'str'},
        'primary_connection_string': {'key': 'primaryConnectionString', 'type': 'str'},
        'secondary_connection_string': {'key': 'secondaryConnectionString', 'type': 'str'},
        'endpoint_uri': {'key': 'endpointUri', 'type': 'str'},
        'entity_path': {'key': 'entityPath', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ServiceBus, self).__init__(**kwargs)
        self.endpoint_type = 'ServiceBus'  # type: str
        self.primary_connection_string = kwargs.get('primary_connection_string', None)
        self.secondary_connection_string = kwargs.get('secondary_connection_string', None)
        self.endpoint_uri = kwargs.get('endpoint_uri', None)
        self.entity_path = kwargs.get('entity_path', None)
