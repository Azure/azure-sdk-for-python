# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class CheckNameRequest(Model):
    """The result returned from a database check name availability request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Resource name.
    :type name: str
    :ivar type: Required. The type of resource, for instance
     Microsoft.DigitalTwins/digitalTwinsInstances. Default value:
     "Microsoft.DigitalTwins/digitalTwinsInstances" .
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "Microsoft.DigitalTwins/digitalTwinsInstances"

    def __init__(self, *, name: str, **kwargs) -> None:
        super(CheckNameRequest, self).__init__(**kwargs)
        self.name = name


class CheckNameResult(Model):
    """The result returned from a check name availability request.

    :param name_available: Specifies a Boolean value that indicates if the
     name is available.
    :type name_available: bool
    :param message: Message indicating an unavailable name due to a conflict,
     or a description of the naming rules that are violated.
    :type message: str
    :param reason: Message providing the reason why the given name is invalid.
     Possible values include: 'Invalid', 'AlreadyExists'
    :type reason: str or ~azure.mgmt.digitaltwins.models.Reason
    """

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'message': {'key': 'message', 'type': 'str'},
        'reason': {'key': 'reason', 'type': 'str'},
    }

    def __init__(self, *, name_available: bool=None, message: str=None, reason=None, **kwargs) -> None:
        super(CheckNameResult, self).__init__(**kwargs)
        self.name_available = name_available
        self.message = message
        self.reason = reason


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class ConnectionProperties(Model):
    """The properties of a private endpoint connection.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: The provisioning state. Possible values include:
     'Pending', 'Approved', 'Rejected', 'Disconnected'
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.models.ConnectionPropertiesProvisioningState
    :param private_endpoint:
    :type private_endpoint:
     ~azure.mgmt.digitaltwins.models.ConnectionPropertiesPrivateEndpoint
    :param group_ids: The list of group ids for the private endpoint
     connection.
    :type group_ids: list[str]
    :param private_link_service_connection_state:
    :type private_link_service_connection_state:
     ~azure.mgmt.digitaltwins.models.ConnectionPropertiesPrivateLinkServiceConnectionState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'private_endpoint': {'key': 'privateEndpoint', 'type': 'ConnectionPropertiesPrivateEndpoint'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
        'private_link_service_connection_state': {'key': 'privateLinkServiceConnectionState', 'type': 'ConnectionPropertiesPrivateLinkServiceConnectionState'},
    }

    def __init__(self, *, private_endpoint=None, group_ids=None, private_link_service_connection_state=None, **kwargs) -> None:
        super(ConnectionProperties, self).__init__(**kwargs)
        self.provisioning_state = None
        self.private_endpoint = private_endpoint
        self.group_ids = group_ids
        self.private_link_service_connection_state = private_link_service_connection_state


class PrivateEndpoint(Model):
    """The private endpoint property of a private endpoint connection.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.id = None


class ConnectionPropertiesPrivateEndpoint(PrivateEndpoint):
    """ConnectionPropertiesPrivateEndpoint.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ConnectionPropertiesPrivateEndpoint, self).__init__(**kwargs)


class ConnectionState(Model):
    """The current state of a private endpoint connection.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. The status of a private endpoint connection.
     Possible values include: 'Pending', 'Approved', 'Rejected', 'Disconnected'
    :type status: str or
     ~azure.mgmt.digitaltwins.models.PrivateLinkServiceConnectionStatus
    :param description: Required. The description for the current state of a
     private endpoint connection.
    :type description: str
    :param actions_required: Actions required for a private endpoint
     connection.
    :type actions_required: str
    """

    _validation = {
        'status': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(self, *, status, description: str, actions_required: str=None, **kwargs) -> None:
        super(ConnectionState, self).__init__(**kwargs)
        self.status = status
        self.description = description
        self.actions_required = actions_required


class ConnectionPropertiesPrivateLinkServiceConnectionState(ConnectionState):
    """ConnectionPropertiesPrivateLinkServiceConnectionState.

    All required parameters must be populated in order to send to Azure.

    :param status: Required. The status of a private endpoint connection.
     Possible values include: 'Pending', 'Approved', 'Rejected', 'Disconnected'
    :type status: str or
     ~azure.mgmt.digitaltwins.models.PrivateLinkServiceConnectionStatus
    :param description: Required. The description for the current state of a
     private endpoint connection.
    :type description: str
    :param actions_required: Actions required for a private endpoint
     connection.
    :type actions_required: str
    """

    _validation = {
        'status': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(self, *, status, description: str, actions_required: str=None, **kwargs) -> None:
        super(ConnectionPropertiesPrivateLinkServiceConnectionState, self).__init__(status=status, description=description, actions_required=actions_required, **kwargs)


class DigitalTwinsResource(Model):
    """The common properties of a DigitalTwinsInstance.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :param location: Required. The resource location.
    :type location: str
    :param tags: The resource tags.
    :type tags: dict[str, str]
    :param identity: The managed identity for the DigitalTwinsInstance.
    :type identity: ~azure.mgmt.digitaltwins.models.DigitalTwinsIdentity
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?!-)[A-Za-z0-9-]{3,63}(?<!-)$'},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'DigitalTwinsIdentity'},
    }

    def __init__(self, *, location: str, tags=None, identity=None, **kwargs) -> None:
        super(DigitalTwinsResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags
        self.identity = identity


class DigitalTwinsDescription(DigitalTwinsResource):
    """The description of the DigitalTwins service.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :param location: Required. The resource location.
    :type location: str
    :param tags: The resource tags.
    :type tags: dict[str, str]
    :param identity: The managed identity for the DigitalTwinsInstance.
    :type identity: ~azure.mgmt.digitaltwins.models.DigitalTwinsIdentity
    :ivar created_time: Time when DigitalTwinsInstance was created.
    :vartype created_time: datetime
    :ivar last_updated_time: Time when DigitalTwinsInstance was updated.
    :vartype last_updated_time: datetime
    :ivar provisioning_state: The provisioning state. Possible values include:
     'Provisioning', 'Deleting', 'Updating', 'Succeeded', 'Failed', 'Canceled',
     'Deleted', 'Warning', 'Suspending', 'Restoring', 'Moving'
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.models.ProvisioningState
    :ivar host_name: Api endpoint to work with DigitalTwinsInstance.
    :vartype host_name: str
    :param private_endpoint_connections:
    :type private_endpoint_connections:
     list[~azure.mgmt.digitaltwins.models.PrivateEndpointConnection]
    :param public_network_access: Public network access for the
     DigitalTwinsInstance. Possible values include: 'Enabled', 'Disabled'
    :type public_network_access: str or
     ~azure.mgmt.digitaltwins.models.PublicNetworkAccess
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?!-)[A-Za-z0-9-]{3,63}(?<!-)$'},
        'type': {'readonly': True},
        'location': {'required': True},
        'created_time': {'readonly': True},
        'last_updated_time': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'host_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'DigitalTwinsIdentity'},
        'created_time': {'key': 'properties.createdTime', 'type': 'iso-8601'},
        'last_updated_time': {'key': 'properties.lastUpdatedTime', 'type': 'iso-8601'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'host_name': {'key': 'properties.hostName', 'type': 'str'},
        'private_endpoint_connections': {'key': 'properties.privateEndpointConnections', 'type': '[PrivateEndpointConnection]'},
        'public_network_access': {'key': 'properties.publicNetworkAccess', 'type': 'str'},
    }

    def __init__(self, *, location: str, tags=None, identity=None, private_endpoint_connections=None, public_network_access=None, **kwargs) -> None:
        super(DigitalTwinsDescription, self).__init__(location=location, tags=tags, identity=identity, **kwargs)
        self.created_time = None
        self.last_updated_time = None
        self.provisioning_state = None
        self.host_name = None
        self.private_endpoint_connections = private_endpoint_connections
        self.public_network_access = public_network_access


class ExternalResource(Model):
    """Definition of a resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: Extension resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$'},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ExternalResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class DigitalTwinsEndpointResource(ExternalResource):
    """DigitalTwinsInstance endpoint resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: Extension resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :param properties: Required. DigitalTwinsInstance endpoint resource
     properties.
    :type properties:
     ~azure.mgmt.digitaltwins.models.DigitalTwinsEndpointResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$'},
        'type': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DigitalTwinsEndpointResourceProperties'},
    }

    def __init__(self, *, properties, **kwargs) -> None:
        super(DigitalTwinsEndpointResource, self).__init__(**kwargs)
        self.properties = properties


class DigitalTwinsEndpointResourceProperties(Model):
    """Properties related to Digital Twins Endpoint.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ServiceBus, EventHub, EventGrid

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: The provisioning state. Possible values include:
     'Provisioning', 'Deleting', 'Succeeded', 'Failed', 'Canceled', 'Deleted',
     'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.models.EndpointProvisioningState
    :ivar created_time: Time when the Endpoint was added to
     DigitalTwinsInstance.
    :vartype created_time: datetime
    :param authentication_type: Specifies the authentication type being used
     for connecting to the endpoint. Possible values include: 'KeyBased',
     'IdentityBased'
    :type authentication_type: str or
     ~azure.mgmt.digitaltwins.models.AuthenticationType
    :param dead_letter_secret: Dead letter storage secret for key-based
     authentication. Will be obfuscated during read.
    :type dead_letter_secret: str
    :param dead_letter_uri: Dead letter storage URL for identity-based
     authentication.
    :type dead_letter_uri: str
    :param endpoint_type: Required. Constant filled by server.
    :type endpoint_type: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'created_time': {'readonly': True},
        'endpoint_type': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'dead_letter_secret': {'key': 'deadLetterSecret', 'type': 'str'},
        'dead_letter_uri': {'key': 'deadLetterUri', 'type': 'str'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
    }

    _subtype_map = {
        'endpoint_type': {'ServiceBus': 'ServiceBus', 'EventHub': 'EventHub', 'EventGrid': 'EventGrid'}
    }

    def __init__(self, *, authentication_type=None, dead_letter_secret: str=None, dead_letter_uri: str=None, **kwargs) -> None:
        super(DigitalTwinsEndpointResourceProperties, self).__init__(**kwargs)
        self.provisioning_state = None
        self.created_time = None
        self.authentication_type = authentication_type
        self.dead_letter_secret = dead_letter_secret
        self.dead_letter_uri = dead_letter_uri
        self.endpoint_type = None


class DigitalTwinsIdentity(Model):
    """The managed identity for the DigitalTwinsInstance.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param type: The type of Managed Identity used by the
     DigitalTwinsInstance. Only SystemAssigned is supported. Possible values
     include: 'None', 'SystemAssigned'
    :type type: str or
     ~azure.mgmt.digitaltwins.models.DigitalTwinsIdentityType
    :ivar principal_id: The object id of the Managed Identity Resource. This
     will be sent to the RP from ARM via the x-ms-identity-principal-id header
     in the PUT request if the resource has a systemAssigned(implicit) identity
    :vartype principal_id: str
    :ivar tenant_id: The tenant id of the Managed Identity Resource. This will
     be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT
     request if the resource has a systemAssigned(implicit) identity
    :vartype tenant_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(self, *, type=None, **kwargs) -> None:
        super(DigitalTwinsIdentity, self).__init__(**kwargs)
        self.type = type
        self.principal_id = None
        self.tenant_id = None


class DigitalTwinsPatchDescription(Model):
    """The description of the DigitalTwins service.

    :param tags: Instance patch properties
    :type tags: dict[str, str]
    :param identity: The managed identity for the DigitalTwinsInstance.
    :type identity: ~azure.mgmt.digitaltwins.models.DigitalTwinsIdentity
    :param properties: Properties for the DigitalTwinsInstance.
    :type properties:
     ~azure.mgmt.digitaltwins.models.DigitalTwinsPatchProperties
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'DigitalTwinsIdentity'},
        'properties': {'key': 'properties', 'type': 'DigitalTwinsPatchProperties'},
    }

    def __init__(self, *, tags=None, identity=None, properties=None, **kwargs) -> None:
        super(DigitalTwinsPatchDescription, self).__init__(**kwargs)
        self.tags = tags
        self.identity = identity
        self.properties = properties


class DigitalTwinsPatchProperties(Model):
    """The properties of a DigitalTwinsInstance.

    :param public_network_access: Public network access for the
     DigitalTwinsInstance. Possible values include: 'Enabled', 'Disabled'
    :type public_network_access: str or
     ~azure.mgmt.digitaltwins.models.PublicNetworkAccess
    """

    _attribute_map = {
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
    }

    def __init__(self, *, public_network_access=None, **kwargs) -> None:
        super(DigitalTwinsPatchProperties, self).__init__(**kwargs)
        self.public_network_access = public_network_access


class ErrorDefinition(Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Service specific error code which serves as the substatus for
     the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.digitaltwins.models.ErrorDefinition]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDefinition]'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorDefinition, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ErrorResponse(Model):
    """Error response.

    :param error: Error description
    :type error: ~azure.mgmt.digitaltwins.models.ErrorDefinition
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDefinition'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class EventGrid(DigitalTwinsEndpointResourceProperties):
    """Properties related to EventGrid.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: The provisioning state. Possible values include:
     'Provisioning', 'Deleting', 'Succeeded', 'Failed', 'Canceled', 'Deleted',
     'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.models.EndpointProvisioningState
    :ivar created_time: Time when the Endpoint was added to
     DigitalTwinsInstance.
    :vartype created_time: datetime
    :param authentication_type: Specifies the authentication type being used
     for connecting to the endpoint. Possible values include: 'KeyBased',
     'IdentityBased'
    :type authentication_type: str or
     ~azure.mgmt.digitaltwins.models.AuthenticationType
    :param dead_letter_secret: Dead letter storage secret for key-based
     authentication. Will be obfuscated during read.
    :type dead_letter_secret: str
    :param dead_letter_uri: Dead letter storage URL for identity-based
     authentication.
    :type dead_letter_uri: str
    :param endpoint_type: Required. Constant filled by server.
    :type endpoint_type: str
    :param topic_endpoint: Required. EventGrid Topic Endpoint
    :type topic_endpoint: str
    :param access_key1: Required. EventGrid secondary accesskey. Will be
     obfuscated during read.
    :type access_key1: str
    :param access_key2: EventGrid secondary accesskey. Will be obfuscated
     during read.
    :type access_key2: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'created_time': {'readonly': True},
        'endpoint_type': {'required': True},
        'topic_endpoint': {'required': True},
        'access_key1': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'dead_letter_secret': {'key': 'deadLetterSecret', 'type': 'str'},
        'dead_letter_uri': {'key': 'deadLetterUri', 'type': 'str'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'topic_endpoint': {'key': 'TopicEndpoint', 'type': 'str'},
        'access_key1': {'key': 'accessKey1', 'type': 'str'},
        'access_key2': {'key': 'accessKey2', 'type': 'str'},
    }

    def __init__(self, *, topic_endpoint: str, access_key1: str, authentication_type=None, dead_letter_secret: str=None, dead_letter_uri: str=None, access_key2: str=None, **kwargs) -> None:
        super(EventGrid, self).__init__(authentication_type=authentication_type, dead_letter_secret=dead_letter_secret, dead_letter_uri=dead_letter_uri, **kwargs)
        self.topic_endpoint = topic_endpoint
        self.access_key1 = access_key1
        self.access_key2 = access_key2
        self.endpoint_type = 'EventGrid'


class EventHub(DigitalTwinsEndpointResourceProperties):
    """Properties related to EventHub.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: The provisioning state. Possible values include:
     'Provisioning', 'Deleting', 'Succeeded', 'Failed', 'Canceled', 'Deleted',
     'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.models.EndpointProvisioningState
    :ivar created_time: Time when the Endpoint was added to
     DigitalTwinsInstance.
    :vartype created_time: datetime
    :param authentication_type: Specifies the authentication type being used
     for connecting to the endpoint. Possible values include: 'KeyBased',
     'IdentityBased'
    :type authentication_type: str or
     ~azure.mgmt.digitaltwins.models.AuthenticationType
    :param dead_letter_secret: Dead letter storage secret for key-based
     authentication. Will be obfuscated during read.
    :type dead_letter_secret: str
    :param dead_letter_uri: Dead letter storage URL for identity-based
     authentication.
    :type dead_letter_uri: str
    :param endpoint_type: Required. Constant filled by server.
    :type endpoint_type: str
    :param connection_string_primary_key: PrimaryConnectionString of the
     endpoint for key-based authentication. Will be obfuscated during read.
    :type connection_string_primary_key: str
    :param connection_string_secondary_key: SecondaryConnectionString of the
     endpoint for key-based authentication. Will be obfuscated during read.
    :type connection_string_secondary_key: str
    :param endpoint_uri: The URL of the EventHub namespace for identity-based
     authentication. It must include the protocol sb://
    :type endpoint_uri: str
    :param entity_path: The EventHub name in the EventHub namespace for
     identity-based authentication.
    :type entity_path: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'created_time': {'readonly': True},
        'endpoint_type': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'dead_letter_secret': {'key': 'deadLetterSecret', 'type': 'str'},
        'dead_letter_uri': {'key': 'deadLetterUri', 'type': 'str'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'connection_string_primary_key': {'key': 'connectionStringPrimaryKey', 'type': 'str'},
        'connection_string_secondary_key': {'key': 'connectionStringSecondaryKey', 'type': 'str'},
        'endpoint_uri': {'key': 'endpointUri', 'type': 'str'},
        'entity_path': {'key': 'entityPath', 'type': 'str'},
    }

    def __init__(self, *, authentication_type=None, dead_letter_secret: str=None, dead_letter_uri: str=None, connection_string_primary_key: str=None, connection_string_secondary_key: str=None, endpoint_uri: str=None, entity_path: str=None, **kwargs) -> None:
        super(EventHub, self).__init__(authentication_type=authentication_type, dead_letter_secret=dead_letter_secret, dead_letter_uri=dead_letter_uri, **kwargs)
        self.connection_string_primary_key = connection_string_primary_key
        self.connection_string_secondary_key = connection_string_secondary_key
        self.endpoint_uri = endpoint_uri
        self.entity_path = entity_path
        self.endpoint_type = 'EventHub'


class GroupIdInformation(Model):
    """The group information for creating a private endpoint on Digital Twin.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties: Required.
    :type properties:
     ~azure.mgmt.digitaltwins.models.GroupIdInformationPropertiesModel
    :param id: The resource identifier.
    :type id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    _validation = {
        'properties': {'required': True},
        'name': {'readonly': True, 'pattern': r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$'},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'GroupIdInformationPropertiesModel'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, properties, id: str=None, **kwargs) -> None:
        super(GroupIdInformation, self).__init__(**kwargs)
        self.properties = properties
        self.id = id
        self.name = None
        self.type = None


class GroupIdInformationProperties(Model):
    """The properties for a group information object.

    :param group_id: The group id
    :type group_id: str
    :param required_members: The required members for a specific group id.
    :type required_members: list[str]
    :param required_zone_names: The required DNS zones for a specific group
     id.
    :type required_zone_names: list[str]
    """

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'required_members': {'key': 'requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'requiredZoneNames', 'type': '[str]'},
    }

    def __init__(self, *, group_id: str=None, required_members=None, required_zone_names=None, **kwargs) -> None:
        super(GroupIdInformationProperties, self).__init__(**kwargs)
        self.group_id = group_id
        self.required_members = required_members
        self.required_zone_names = required_zone_names


class GroupIdInformationPropertiesModel(GroupIdInformationProperties):
    """GroupIdInformationPropertiesModel.

    :param group_id: The group id
    :type group_id: str
    :param required_members: The required members for a specific group id.
    :type required_members: list[str]
    :param required_zone_names: The required DNS zones for a specific group
     id.
    :type required_zone_names: list[str]
    """

    _attribute_map = {
        'group_id': {'key': 'groupId', 'type': 'str'},
        'required_members': {'key': 'requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'requiredZoneNames', 'type': '[str]'},
    }

    def __init__(self, *, group_id: str=None, required_members=None, required_zone_names=None, **kwargs) -> None:
        super(GroupIdInformationPropertiesModel, self).__init__(group_id=group_id, required_members=required_members, required_zone_names=required_zone_names, **kwargs)


class GroupIdInformationResponse(Model):
    """The available private link resources for a Digital Twin.

    :param value: The list of available private link resources for a Digital
     Twin.
    :type value: list[~azure.mgmt.digitaltwins.models.GroupIdInformation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[GroupIdInformation]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(GroupIdInformationResponse, self).__init__(**kwargs)
        self.value = value


class Operation(Model):
    """DigitalTwins service REST API operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Operation name: {provider}/{resource}/{read | write | action |
     delete}
    :vartype name: str
    :param display: Operation properties display
    :type display: ~azure.mgmt.digitaltwins.models.OperationDisplay
    :ivar origin: The intended executor of the operation.
    :vartype origin: str
    :ivar is_data_action: If the operation is a data action (for data plane
     rbac).
    :vartype is_data_action: bool
    """

    _validation = {
        'name': {'readonly': True},
        'origin': {'readonly': True},
        'is_data_action': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
    }

    def __init__(self, *, display=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = display
        self.origin = None
        self.is_data_action = None


class OperationDisplay(Model):
    """The object that represents the operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provider: Service provider: Microsoft DigitalTwins
    :vartype provider: str
    :ivar resource: Resource Type: DigitalTwinsInstances
    :vartype resource: str
    :ivar operation: Name of the operation
    :vartype operation: str
    :ivar description: Friendly description for the operation,
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class PrivateEndpointConnection(Model):
    """The private endpoint connection of a Digital Twin.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :param properties: Required.
    :type properties:
     ~azure.mgmt.digitaltwins.models.PrivateEndpointConnectionProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True, 'pattern': r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$'},
        'type': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'PrivateEndpointConnectionProperties'},
    }

    def __init__(self, *, properties, **kwargs) -> None:
        super(PrivateEndpointConnection, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = properties


class PrivateEndpointConnectionProperties(ConnectionProperties):
    """PrivateEndpointConnectionProperties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: The provisioning state. Possible values include:
     'Pending', 'Approved', 'Rejected', 'Disconnected'
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.models.ConnectionPropertiesProvisioningState
    :param private_endpoint:
    :type private_endpoint:
     ~azure.mgmt.digitaltwins.models.ConnectionPropertiesPrivateEndpoint
    :param group_ids: The list of group ids for the private endpoint
     connection.
    :type group_ids: list[str]
    :param private_link_service_connection_state:
    :type private_link_service_connection_state:
     ~azure.mgmt.digitaltwins.models.ConnectionPropertiesPrivateLinkServiceConnectionState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'private_endpoint': {'key': 'privateEndpoint', 'type': 'ConnectionPropertiesPrivateEndpoint'},
        'group_ids': {'key': 'groupIds', 'type': '[str]'},
        'private_link_service_connection_state': {'key': 'privateLinkServiceConnectionState', 'type': 'ConnectionPropertiesPrivateLinkServiceConnectionState'},
    }

    def __init__(self, *, private_endpoint=None, group_ids=None, private_link_service_connection_state=None, **kwargs) -> None:
        super(PrivateEndpointConnectionProperties, self).__init__(private_endpoint=private_endpoint, group_ids=group_ids, private_link_service_connection_state=private_link_service_connection_state, **kwargs)


class PrivateEndpointConnectionsResponse(Model):
    """The available private link connections for a Digital Twin.

    :param value: The list of available private link connections for a Digital
     Twin.
    :type value:
     list[~azure.mgmt.digitaltwins.models.PrivateEndpointConnection]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateEndpointConnection]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(PrivateEndpointConnectionsResponse, self).__init__(**kwargs)
        self.value = value


class ServiceBus(DigitalTwinsEndpointResourceProperties):
    """Properties related to ServiceBus.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: The provisioning state. Possible values include:
     'Provisioning', 'Deleting', 'Succeeded', 'Failed', 'Canceled', 'Deleted',
     'Warning', 'Suspending', 'Restoring', 'Moving', 'Disabled'
    :vartype provisioning_state: str or
     ~azure.mgmt.digitaltwins.models.EndpointProvisioningState
    :ivar created_time: Time when the Endpoint was added to
     DigitalTwinsInstance.
    :vartype created_time: datetime
    :param authentication_type: Specifies the authentication type being used
     for connecting to the endpoint. Possible values include: 'KeyBased',
     'IdentityBased'
    :type authentication_type: str or
     ~azure.mgmt.digitaltwins.models.AuthenticationType
    :param dead_letter_secret: Dead letter storage secret for key-based
     authentication. Will be obfuscated during read.
    :type dead_letter_secret: str
    :param dead_letter_uri: Dead letter storage URL for identity-based
     authentication.
    :type dead_letter_uri: str
    :param endpoint_type: Required. Constant filled by server.
    :type endpoint_type: str
    :param primary_connection_string: PrimaryConnectionString of the endpoint
     for key-based authentication. Will be obfuscated during read.
    :type primary_connection_string: str
    :param secondary_connection_string: SecondaryConnectionString of the
     endpoint for key-based authentication. Will be obfuscated during read.
    :type secondary_connection_string: str
    :param endpoint_uri: The URL of the ServiceBus namespace for
     identity-based authentication. It must include the protocol sb://
    :type endpoint_uri: str
    :param entity_path: The ServiceBus Topic name for identity-based
     authentication
    :type entity_path: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'created_time': {'readonly': True},
        'endpoint_type': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'dead_letter_secret': {'key': 'deadLetterSecret', 'type': 'str'},
        'dead_letter_uri': {'key': 'deadLetterUri', 'type': 'str'},
        'endpoint_type': {'key': 'endpointType', 'type': 'str'},
        'primary_connection_string': {'key': 'primaryConnectionString', 'type': 'str'},
        'secondary_connection_string': {'key': 'secondaryConnectionString', 'type': 'str'},
        'endpoint_uri': {'key': 'endpointUri', 'type': 'str'},
        'entity_path': {'key': 'entityPath', 'type': 'str'},
    }

    def __init__(self, *, authentication_type=None, dead_letter_secret: str=None, dead_letter_uri: str=None, primary_connection_string: str=None, secondary_connection_string: str=None, endpoint_uri: str=None, entity_path: str=None, **kwargs) -> None:
        super(ServiceBus, self).__init__(authentication_type=authentication_type, dead_letter_secret=dead_letter_secret, dead_letter_uri=dead_letter_uri, **kwargs)
        self.primary_connection_string = primary_connection_string
        self.secondary_connection_string = secondary_connection_string
        self.endpoint_uri = endpoint_uri
        self.entity_path = entity_path
        self.endpoint_type = 'ServiceBus'
