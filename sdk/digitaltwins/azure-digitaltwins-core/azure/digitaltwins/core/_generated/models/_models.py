# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class DigitalTwinModelsAddOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinModelsAddOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinModelsDeleteOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinModelsDeleteOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinModelsGetByIdOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinModelsGetByIdOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinModelsListOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar max_items_per_page: The maximum number of items to retrieve per request. The server may
     choose to return less than the requested number.
    :vartype max_items_per_page: int
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'max_items_per_page': {'key': 'MaxItemsPerPage', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword max_items_per_page: The maximum number of items to retrieve per request. The server
         may choose to return less than the requested number.
        :paramtype max_items_per_page: int
        """
        super(DigitalTwinModelsListOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.max_items_per_page = kwargs.get('max_items_per_page', None)


class DigitalTwinModelsUpdateOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinModelsUpdateOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinsAddOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar if_none_match: Only perform the operation if the entity does not already exist.
    :vartype if_none_match: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'if_none_match': {'key': 'If-None-Match', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword if_none_match: Only perform the operation if the entity does not already exist.
        :paramtype if_none_match: str
        """
        super(DigitalTwinsAddOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.if_none_match = kwargs.get('if_none_match', None)


class DigitalTwinsAddRelationshipOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar if_none_match: Only perform the operation if the entity does not already exist.
    :vartype if_none_match: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'if_none_match': {'key': 'If-None-Match', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword if_none_match: Only perform the operation if the entity does not already exist.
        :paramtype if_none_match: str
        """
        super(DigitalTwinsAddRelationshipOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.if_none_match = kwargs.get('if_none_match', None)


class DigitalTwinsDeleteOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar if_match: Only perform the operation if the entity's etag matches one of the etags
     provided or * is provided.
    :vartype if_match: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'if_match': {'key': 'If-Match', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword if_match: Only perform the operation if the entity's etag matches one of the etags
         provided or * is provided.
        :paramtype if_match: str
        """
        super(DigitalTwinsDeleteOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.if_match = kwargs.get('if_match', None)


class DigitalTwinsDeleteRelationshipOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar if_match: Only perform the operation if the entity's etag matches one of the etags
     provided or * is provided.
    :vartype if_match: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'if_match': {'key': 'If-Match', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword if_match: Only perform the operation if the entity's etag matches one of the etags
         provided or * is provided.
        :paramtype if_match: str
        """
        super(DigitalTwinsDeleteRelationshipOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.if_match = kwargs.get('if_match', None)


class DigitalTwinsEventRoute(msrest.serialization.Model):
    """A route which directs notification and telemetry events to an endpoint. Endpoints are a destination outside of Azure Digital Twins such as an EventHub.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The id of the event route.
    :vartype id: str
    :ivar endpoint_name: Required. The name of the endpoint this event route is bound to.
    :vartype endpoint_name: str
    :ivar filter: Required. An expression which describes the events which are routed to the
     endpoint.
    :vartype filter: str
    """

    _validation = {
        'id': {'readonly': True},
        'endpoint_name': {'required': True},
        'filter': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
        'filter': {'key': 'filter', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword endpoint_name: Required. The name of the endpoint this event route is bound to.
        :paramtype endpoint_name: str
        :keyword filter: Required. An expression which describes the events which are routed to the
         endpoint.
        :paramtype filter: str
        """
        super(DigitalTwinsEventRoute, self).__init__(**kwargs)
        self.id = None
        self.endpoint_name = kwargs['endpoint_name']
        self.filter = kwargs['filter']


class DigitalTwinsGetByIdOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinsGetByIdOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinsGetComponentOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinsGetComponentOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinsGetRelationshipByIdOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinsGetRelationshipByIdOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinsListIncomingRelationshipsOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinsListIncomingRelationshipsOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinsListRelationshipsOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinsListRelationshipsOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinsModelData(msrest.serialization.Model):
    """A model definition and metadata for that model.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: A language map that contains the localized display names as specified in
     the model definition.
    :vartype display_name: dict[str, str]
    :ivar description: A language map that contains the localized descriptions as specified in the
     model definition.
    :vartype description: dict[str, str]
    :ivar id: Required. The id of the model as specified in the model definition.
    :vartype id: str
    :ivar upload_time: The time the model was uploaded to the service.
    :vartype upload_time: ~datetime.datetime
    :ivar decommissioned: Indicates if the model is decommissioned. Decommissioned models cannot be
     referenced by newly created digital twins.
    :vartype decommissioned: bool
    :ivar model: The model definition.
    :vartype model: any
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': '{str}'},
        'description': {'key': 'description', 'type': '{str}'},
        'id': {'key': 'id', 'type': 'str'},
        'upload_time': {'key': 'uploadTime', 'type': 'iso-8601'},
        'decommissioned': {'key': 'decommissioned', 'type': 'bool'},
        'model': {'key': 'model', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display_name: A language map that contains the localized display names as specified in
         the model definition.
        :paramtype display_name: dict[str, str]
        :keyword description: A language map that contains the localized descriptions as specified in
         the model definition.
        :paramtype description: dict[str, str]
        :keyword id: Required. The id of the model as specified in the model definition.
        :paramtype id: str
        :keyword upload_time: The time the model was uploaded to the service.
        :paramtype upload_time: ~datetime.datetime
        :keyword decommissioned: Indicates if the model is decommissioned. Decommissioned models cannot
         be referenced by newly created digital twins.
        :paramtype decommissioned: bool
        :keyword model: The model definition.
        :paramtype model: any
        """
        super(DigitalTwinsModelData, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.id = kwargs['id']
        self.upload_time = kwargs.get('upload_time', None)
        self.decommissioned = kwargs.get('decommissioned', False)
        self.model = kwargs.get('model', None)


class DigitalTwinsSendComponentTelemetryOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinsSendComponentTelemetryOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinsSendTelemetryOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(DigitalTwinsSendTelemetryOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class DigitalTwinsUpdateComponentOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar if_match: Only perform the operation if the entity's etag matches one of the etags
     provided or * is provided.
    :vartype if_match: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'if_match': {'key': 'If-Match', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword if_match: Only perform the operation if the entity's etag matches one of the etags
         provided or * is provided.
        :paramtype if_match: str
        """
        super(DigitalTwinsUpdateComponentOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.if_match = kwargs.get('if_match', None)


class DigitalTwinsUpdateOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar if_match: Only perform the operation if the entity's etag matches one of the etags
     provided or * is provided.
    :vartype if_match: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'if_match': {'key': 'If-Match', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword if_match: Only perform the operation if the entity's etag matches one of the etags
         provided or * is provided.
        :paramtype if_match: str
        """
        super(DigitalTwinsUpdateOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.if_match = kwargs.get('if_match', None)


class DigitalTwinsUpdateRelationshipOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar if_match: Only perform the operation if the entity's etag matches one of the etags
     provided or * is provided.
    :vartype if_match: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'if_match': {'key': 'If-Match', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword if_match: Only perform the operation if the entity's etag matches one of the etags
         provided or * is provided.
        :paramtype if_match: str
        """
        super(DigitalTwinsUpdateRelationshipOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.if_match = kwargs.get('if_match', None)


class Error(msrest.serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: A human-readable representation of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.digitaltwins.core.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.digitaltwins.core.models.InnerError
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.digitaltwins.core.models.InnerError
        """
        super(Error, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None
        self.innererror = kwargs.get('innererror', None)


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required. The error details.
    :vartype error: ~azure.digitaltwins.core.models.Error
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: Required. The error details.
        :paramtype error: ~azure.digitaltwins.core.models.Error
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs['error']


class EventRouteCollection(msrest.serialization.Model):
    """A collection of EventRoute objects.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The EventRoute objects.
    :vartype value: list[~azure.digitaltwins.core.models.DigitalTwinsEventRoute]
    :ivar next_link: A URI to retrieve the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DigitalTwinsEventRoute]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. The EventRoute objects.
        :paramtype value: list[~azure.digitaltwins.core.models.DigitalTwinsEventRoute]
        :keyword next_link: A URI to retrieve the next page of results.
        :paramtype next_link: str
        """
        super(EventRouteCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class EventRoutesAddOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(EventRoutesAddOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class EventRoutesDeleteOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(EventRoutesDeleteOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class EventRoutesGetByIdOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(EventRoutesGetByIdOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class EventRoutesListOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar max_items_per_page: The maximum number of items to retrieve per request. The server may
     choose to return less than the requested number.
    :vartype max_items_per_page: int
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'max_items_per_page': {'key': 'MaxItemsPerPage', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword max_items_per_page: The maximum number of items to retrieve per request. The server
         may choose to return less than the requested number.
        :paramtype max_items_per_page: int
        """
        super(EventRoutesListOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.max_items_per_page = kwargs.get('max_items_per_page', None)


class ImportJob(msrest.serialization.Model):
    """A job which contains a reference to the operations to perform, results, and execution metadata.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The identifier of the import job.
    :vartype id: str
    :ivar input_blob_uri: Required. The path to the input Azure storage blob that contains file(s)
     describing the operations to perform in the job.
    :vartype input_blob_uri: str
    :ivar output_blob_uri: Required. The path to the output Azure storage blob that will contain
     the errors and progress logs of import job.
    :vartype output_blob_uri: str
    :ivar status: Status of the job. Known values are: "notstarted", "running", "failed",
     "succeeded", "cancelling", "cancelled".
    :vartype status: str or ~azure.digitaltwins.core.models.Status
    :ivar created_date_time: Start time of the job. The timestamp is in RFC3339 format:
     ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Last time service performed any action from the job. The timestamp
     is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar finished_date_time: End time of the job. The timestamp is in RFC3339 format:
     ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype finished_date_time: ~datetime.datetime
    :ivar purge_date_time: Time at which job will be purged by the service from the system. The
     timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
    :vartype purge_date_time: ~datetime.datetime
    :ivar error: Details of the error(s) that occurred executing the import job.
    :vartype error: ~azure.digitaltwins.core.models.Error
    """

    _validation = {
        'id': {'readonly': True},
        'input_blob_uri': {'required': True},
        'output_blob_uri': {'required': True},
        'status': {'readonly': True},
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'finished_date_time': {'readonly': True},
        'purge_date_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'input_blob_uri': {'key': 'inputBlobUri', 'type': 'str'},
        'output_blob_uri': {'key': 'outputBlobUri', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'finished_date_time': {'key': 'finishedDateTime', 'type': 'iso-8601'},
        'purge_date_time': {'key': 'purgeDateTime', 'type': 'iso-8601'},
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword input_blob_uri: Required. The path to the input Azure storage blob that contains
         file(s) describing the operations to perform in the job.
        :paramtype input_blob_uri: str
        :keyword output_blob_uri: Required. The path to the output Azure storage blob that will contain
         the errors and progress logs of import job.
        :paramtype output_blob_uri: str
        :keyword error: Details of the error(s) that occurred executing the import job.
        :paramtype error: ~azure.digitaltwins.core.models.Error
        """
        super(ImportJob, self).__init__(**kwargs)
        self.id = None
        self.input_blob_uri = kwargs['input_blob_uri']
        self.output_blob_uri = kwargs['output_blob_uri']
        self.status = None
        self.created_date_time = None
        self.last_action_date_time = None
        self.finished_date_time = None
        self.purge_date_time = None
        self.error = kwargs.get('error', None)


class ImportJobCollection(msrest.serialization.Model):
    """A collection of import job objects.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The list of import job objects.
    :vartype value: list[~azure.digitaltwins.core.models.ImportJob]
    :ivar next_link: A URI to retrieve the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ImportJob]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. The list of import job objects.
        :paramtype value: list[~azure.digitaltwins.core.models.ImportJob]
        :keyword next_link: A URI to retrieve the next page of results.
        :paramtype next_link: str
        """
        super(ImportJobCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class ImportJobsAddOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(ImportJobsAddOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class ImportJobsCancelOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(ImportJobsCancelOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class ImportJobsDeleteOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(ImportJobsDeleteOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class ImportJobsGetByIdOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        """
        super(ImportJobsGetByIdOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)


class ImportJobsListOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar max_items_per_page: The maximum number of items to retrieve per request. The server may
     choose to return less than the requested number.
    :vartype max_items_per_page: int
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'max_items_per_page': {'key': 'MaxItemsPerPage', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword max_items_per_page: The maximum number of items to retrieve per request. The server
         may choose to return less than the requested number.
        :paramtype max_items_per_page: int
        """
        super(ImportJobsListOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.max_items_per_page = kwargs.get('max_items_per_page', None)


class IncomingRelationship(msrest.serialization.Model):
    """An incoming relationship.

    :ivar relationship_id: A user-provided string representing the id of this relationship, unique
     in the context of the source digital twin, i.e. sourceId + relationshipId is unique in the
     context of the service.
    :vartype relationship_id: str
    :ivar source_id: The id of the source digital twin.
    :vartype source_id: str
    :ivar relationship_name: The name of the relationship.
    :vartype relationship_name: str
    :ivar relationship_link: Link to the relationship, to be used for deletion.
    :vartype relationship_link: str
    """

    _attribute_map = {
        'relationship_id': {'key': '$relationshipId', 'type': 'str'},
        'source_id': {'key': '$sourceId', 'type': 'str'},
        'relationship_name': {'key': '$relationshipName', 'type': 'str'},
        'relationship_link': {'key': '$relationshipLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword relationship_id: A user-provided string representing the id of this relationship,
         unique in the context of the source digital twin, i.e. sourceId + relationshipId is unique in
         the context of the service.
        :paramtype relationship_id: str
        :keyword source_id: The id of the source digital twin.
        :paramtype source_id: str
        :keyword relationship_name: The name of the relationship.
        :paramtype relationship_name: str
        :keyword relationship_link: Link to the relationship, to be used for deletion.
        :paramtype relationship_link: str
        """
        super(IncomingRelationship, self).__init__(**kwargs)
        self.relationship_id = kwargs.get('relationship_id', None)
        self.source_id = kwargs.get('source_id', None)
        self.relationship_name = kwargs.get('relationship_name', None)
        self.relationship_link = kwargs.get('relationship_link', None)


class IncomingRelationshipCollection(msrest.serialization.Model):
    """A collection of incoming relationships which relate digital twins together.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.digitaltwins.core.models.IncomingRelationship]
    :ivar next_link: A URI to retrieve the next page of objects.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[IncomingRelationship]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.digitaltwins.core.models.IncomingRelationship]
        :keyword next_link: A URI to retrieve the next page of objects.
        :paramtype next_link: str
        """
        super(IncomingRelationshipCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class InnerError(msrest.serialization.Model):
    """A more specific error description than was provided by the containing error.

    :ivar code: A more specific error code than was provided by the containing error.
    :vartype code: str
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.digitaltwins.core.models.InnerError
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: A more specific error code than was provided by the containing error.
        :paramtype code: str
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.digitaltwins.core.models.InnerError
        """
        super(InnerError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.innererror = kwargs.get('innererror', None)


class PagedDigitalTwinsModelDataCollection(msrest.serialization.Model):
    """A collection of DigitalTwinsModelData objects.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The DigitalTwinsModelData objects.
    :vartype value: list[~azure.digitaltwins.core.models.DigitalTwinsModelData]
    :ivar next_link: A URI to retrieve the next page of objects.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DigitalTwinsModelData]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. The DigitalTwinsModelData objects.
        :paramtype value: list[~azure.digitaltwins.core.models.DigitalTwinsModelData]
        :keyword next_link: A URI to retrieve the next page of objects.
        :paramtype next_link: str
        """
        super(PagedDigitalTwinsModelDataCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)


class QueryResult(msrest.serialization.Model):
    """The results of a query operation and an optional continuation token.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The query results.
    :vartype value: list[any]
    :ivar continuation_token: A token which can be used to construct a new QuerySpecification to
     retrieve the next set of results.
    :vartype continuation_token: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[object]'},
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. The query results.
        :paramtype value: list[any]
        :keyword continuation_token: A token which can be used to construct a new QuerySpecification to
         retrieve the next set of results.
        :paramtype continuation_token: str
        """
        super(QueryResult, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.continuation_token = kwargs.get('continuation_token', None)


class QuerySpecification(msrest.serialization.Model):
    """A query specification containing either a query statement or a continuation token from a previous query result.

    :ivar query: The query to execute. This value is ignored if a continuation token is provided.
    :vartype query: str
    :ivar continuation_token: A token which is used to retrieve the next set of results from a
     previous query.
    :vartype continuation_token: str
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'continuation_token': {'key': 'continuationToken', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword query: The query to execute. This value is ignored if a continuation token is
         provided.
        :paramtype query: str
        :keyword continuation_token: A token which is used to retrieve the next set of results from a
         previous query.
        :paramtype continuation_token: str
        """
        super(QuerySpecification, self).__init__(**kwargs)
        self.query = kwargs.get('query', None)
        self.continuation_token = kwargs.get('continuation_token', None)


class QueryTwinsOptions(msrest.serialization.Model):
    """Parameter group.

    :ivar traceparent: Identifies the request in a distributed tracing system.
    :vartype traceparent: str
    :ivar tracestate: Provides vendor-specific trace identification information and is a companion
     to traceparent.
    :vartype tracestate: str
    :ivar max_items_per_page: The maximum number of items to retrieve per request. The server may
     choose to return less than the requested number.
    :vartype max_items_per_page: int
    """

    _attribute_map = {
        'traceparent': {'key': 'traceparent', 'type': 'str'},
        'tracestate': {'key': 'tracestate', 'type': 'str'},
        'max_items_per_page': {'key': 'MaxItemsPerPage', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword traceparent: Identifies the request in a distributed tracing system.
        :paramtype traceparent: str
        :keyword tracestate: Provides vendor-specific trace identification information and is a
         companion to traceparent.
        :paramtype tracestate: str
        :keyword max_items_per_page: The maximum number of items to retrieve per request. The server
         may choose to return less than the requested number.
        :paramtype max_items_per_page: int
        """
        super(QueryTwinsOptions, self).__init__(**kwargs)
        self.traceparent = kwargs.get('traceparent', None)
        self.tracestate = kwargs.get('tracestate', None)
        self.max_items_per_page = kwargs.get('max_items_per_page', None)


class RelationshipCollection(msrest.serialization.Model):
    """A collection of relationships which relate digital twins together.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The relationship objects.
    :vartype value: list[any]
    :ivar next_link: A URI to retrieve the next page of objects.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[object]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. The relationship objects.
        :paramtype value: list[any]
        :keyword next_link: A URI to retrieve the next page of objects.
        :paramtype next_link: str
        """
        super(RelationshipCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = kwargs.get('next_link', None)
