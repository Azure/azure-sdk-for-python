# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
# fmt: off

def build_add_request_initial(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = kwargs.pop('api_version', "2022-05-31")  # type: str
    traceparent = kwargs.pop('traceparent', None)  # type: Optional[str]
    tracestate = kwargs.pop('tracestate', None)  # type: Optional[str]
    operation_id = kwargs.pop('operation_id', None)  # type: Optional[str]
    timeout_in_minutes = kwargs.pop('timeout_in_minutes', None)  # type: Optional[int]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/jobs/deletions')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')
    if timeout_in_minutes is not None:
        query_parameters['timeoutInMinutes'] = _SERIALIZER.query("timeout_in_minutes", timeout_in_minutes, 'int')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if traceparent is not None:
        header_parameters['traceparent'] = _SERIALIZER.header("traceparent", traceparent, 'str')
    if tracestate is not None:
        header_parameters['tracestate'] = _SERIALIZER.header("tracestate", tracestate, 'str')
    if operation_id is not None:
        header_parameters['operation-id'] = _SERIALIZER.header("operation_id", operation_id, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = kwargs.pop('api_version', "2022-05-31")  # type: str
    traceparent = kwargs.pop('traceparent', None)  # type: Optional[str]
    tracestate = kwargs.pop('tracestate', None)  # type: Optional[str]
    max_items_per_page = kwargs.pop('max_items_per_page', None)  # type: Optional[int]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/jobs/deletions')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if traceparent is not None:
        header_parameters['traceparent'] = _SERIALIZER.header("traceparent", traceparent, 'str')
    if tracestate is not None:
        header_parameters['tracestate'] = _SERIALIZER.header("tracestate", tracestate, 'str')
    if max_items_per_page is not None:
        header_parameters['max-items-per-page'] = _SERIALIZER.header("max_items_per_page", max_items_per_page, 'int')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_by_id_request(
    id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = kwargs.pop('api_version', "2022-05-31")  # type: str
    traceparent = kwargs.pop('traceparent', None)  # type: Optional[str]
    tracestate = kwargs.pop('tracestate', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/jobs/deletions/{id}')
    path_format_arguments = {
        "id": _SERIALIZER.url("id", id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if traceparent is not None:
        header_parameters['traceparent'] = _SERIALIZER.header("traceparent", traceparent, 'str')
    if tracestate is not None:
        header_parameters['tracestate'] = _SERIALIZER.header("tracestate", tracestate, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class DeleteJobsOperations(object):
    """DeleteJobsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.digitaltwins.core.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def _add_initial(
        self,
        delete_jobs_add_options=None,  # type: Optional["_models.DeleteJobsAddOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.DeleteJob"
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeleteJob"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2022-05-31")  # type: str

        _traceparent = None
        _tracestate = None
        if delete_jobs_add_options is not None:
            _traceparent = delete_jobs_add_options.traceparent
            _tracestate = delete_jobs_add_options.tracestate

        request = build_add_request_initial(
            api_version=api_version,
            traceparent=_traceparent,
            tracestate=_tracestate,
            operation_id=self._config.operation_id,
            timeout_in_minutes=self._config.timeout_in_minutes,
            template_url=self._add_initial.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['Operation-Location']=self._deserialize('str', response.headers.get('Operation-Location'))

        deserialized = self._deserialize('DeleteJob', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    _add_initial.metadata = {'url': '/jobs/deletions'}  # type: ignore


    @distributed_trace
    def begin_add(
        self,
        delete_jobs_add_options=None,  # type: Optional["_models.DeleteJobsAddOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["_models.DeleteJob"]
        """Initiates a job which deletes all models, twins, and relationships on the instance. Does not
        delete any other types of entities.
        Status codes:


        * 202 Created
        * 400 Bad Request

          * JobLimitReached - The maximum number of delete jobs allowed has been reached.
          * ValidationFailed - Operation-Id already exists.

        :param delete_jobs_add_options: Parameter group.
        :type delete_jobs_add_options: ~azure.digitaltwins.core.models.DeleteJobsAddOptions
        :keyword api_version: Api Version. The default value is "2022-05-31". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns either DeleteJob or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~azure.digitaltwins.core.models.DeleteJob]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2022-05-31")  # type: str
        polling = kwargs.pop('polling', True)  # type: Union[bool, azure.core.polling.PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeleteJob"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._add_initial(
                delete_jobs_add_options=delete_jobs_add_options,
                api_version=api_version,
                cls=lambda x,y,z: x,
                **kwargs
            )
        kwargs.pop('error_map', None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers['Operation-Location']=self._deserialize('str', response.headers.get('Operation-Location'))
            
            deserialized = self._deserialize('DeleteJob', pipeline_response)
            if cls:
                return cls(pipeline_response, deserialized, response_headers)
            return deserialized


        if polling is True: polling_method = LROBasePolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)

    begin_add.metadata = {'url': '/jobs/deletions'}  # type: ignore

    @distributed_trace
    def list(
        self,
        delete_jobs_list_options=None,  # type: Optional["_models.DeleteJobsListOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["_models.DeleteJobCollection"]
        """Retrieves all deletion jobs. This may be useful to find a delete job that was previously
        requested, or to view a history of delete jobs that have run or are currently running on the
        instance.
        Status codes:


        * 200 OK.

        :param delete_jobs_list_options: Parameter group.
        :type delete_jobs_list_options: ~azure.digitaltwins.core.models.DeleteJobsListOptions
        :keyword api_version: Api Version. The default value is "2022-05-31". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either DeleteJobCollection or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.digitaltwins.core.models.DeleteJobCollection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2022-05-31")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeleteJobCollection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                _traceparent = None
                _tracestate = None
                _max_items_per_page = None
                if delete_jobs_list_options is not None:
                    _traceparent = delete_jobs_list_options.traceparent
                    _tracestate = delete_jobs_list_options.tracestate
                    _max_items_per_page = delete_jobs_list_options.max_items_per_page
                
                request = build_list_request(
                    api_version=api_version,
                    traceparent=_traceparent,
                    tracestate=_tracestate,
                    max_items_per_page=_max_items_per_page,
                    template_url=self.list.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                _traceparent = None
                _tracestate = None
                _max_items_per_page = None
                if delete_jobs_list_options is not None:
                    _traceparent = delete_jobs_list_options.traceparent
                    _tracestate = delete_jobs_list_options.tracestate
                    _max_items_per_page = delete_jobs_list_options.max_items_per_page
                
                request = build_list_request(
                    api_version=api_version,
                    traceparent=_traceparent,
                    tracestate=_tracestate,
                    max_items_per_page=_max_items_per_page,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("DeleteJobCollection", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/jobs/deletions'}  # type: ignore

    @distributed_trace
    def get_by_id(
        self,
        id,  # type: str
        delete_jobs_get_by_id_options=None,  # type: Optional["_models.DeleteJobsGetByIdOptions"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.DeleteJob"
        """Retrieves a delete job.
        Status codes:


        * 200 OK
        * 404 Not Found

          * DeleteJobNotFound - The delete job was not found.

        :param id: The id for the delete job. The id is unique within the service and case sensitive.
        :type id: str
        :param delete_jobs_get_by_id_options: Parameter group.
        :type delete_jobs_get_by_id_options: ~azure.digitaltwins.core.models.DeleteJobsGetByIdOptions
        :keyword api_version: Api Version. The default value is "2022-05-31". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype api_version: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DeleteJob, or the result of cls(response)
        :rtype: ~azure.digitaltwins.core.models.DeleteJob
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DeleteJob"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2022-05-31")  # type: str

        _traceparent = None
        _tracestate = None
        if delete_jobs_get_by_id_options is not None:
            _traceparent = delete_jobs_get_by_id_options.traceparent
            _tracestate = delete_jobs_get_by_id_options.tracestate

        request = build_get_by_id_request(
            id=id,
            api_version=api_version,
            traceparent=_traceparent,
            tracestate=_tracestate,
            template_url=self.get_by_id.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('DeleteJob', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_by_id.metadata = {'url': '/jobs/deletions/{id}'}  # type: ignore

