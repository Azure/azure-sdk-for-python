# Stubs for azure.keyvault.certificates.aio.client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._shared import AsyncKeyVaultClientBase
from ._polling_async import CreateCertificatePollerAsync
from azure.keyvault.certificates.models import AdministratorDetails, Certificate, CertificateOperation, CertificatePolicy, CertificateProperties, Contact, DeletedCertificate, Issuer, IssuerProperties
from typing import AsyncIterable, Iterable, List, Optional, Union

class CertificateClient(AsyncKeyVaultClientBase):
    async def create_certificate(self, name: str, policy: Optional[CertificatePolicy]=..., **kwargs: '**Any') -> Union[Certificate, CertificateOperation]: ...
    async def get_certificate_with_policy(self, name: str, **kwargs: '**Any') -> Certificate: ...
    async def get_certificate(self, name: str, version: str, **kwargs: '**Any') -> Certificate: ...
    async def delete_certificate(self, name: str, **kwargs: '**Any') -> DeletedCertificate: ...
    async def get_deleted_certificate(self, name: str, **kwargs: '**Any') -> DeletedCertificate: ...
    async def purge_deleted_certificate(self, name: str, **kwargs: '**Any') -> None: ...
    async def recover_deleted_certificate(self, name: str, **kwargs: '**Any') -> Certificate: ...
    async def import_certificate(self, name: str, certificate_bytes: bytes, password: Optional[str]=..., policy: Optional[CertificatePolicy]=..., **kwargs: '**Any') -> Certificate: ...
    async def get_policy(self, certificate_name: str, **kwargs: '**Any') -> CertificatePolicy: ...
    async def update_policy(self, certificate_name: str, policy: CertificatePolicy, **kwargs: '**Any') -> CertificatePolicy: ...
    async def update_certificate_properties(self, name: str, version: Optional[str]=..., **kwargs: '**Any') -> Certificate: ...
    async def backup_certificate(self, name: str, **kwargs: '**Any') -> bytes: ...
    async def restore_certificate(self, backup: bytes, **kwargs: '**Any') -> Certificate: ...
    def list_deleted_certificates(self, include_pending: Optional[bool]=..., **kwargs: '**Any') -> AsyncIterable[DeletedCertificate]: ...
    def list_certificates(self, include_pending: Optional[bool]=..., **kwargs: '**Any') -> AsyncIterable[CertificateProperties]: ...
    def list_certificate_versions(self, name: str, **kwargs: '**Any') -> AsyncIterable[CertificateProperties]: ...
    async def create_contacts(self, contacts: Iterable[Contact], **kwargs: '**Any') -> List[Contact]: ...
    async def get_contacts(self, **kwargs: '**Any') -> List[Contact]: ...
    async def delete_contacts(self, **kwargs: '**Any') -> List[Contact]: ...
    async def get_certificate_operation(self, name: str, **kwargs: '**Any') -> CertificateOperation: ...
    async def delete_certificate_operation(self, name: str, **kwargs: '**Any') -> CertificateOperation: ...
    async def cancel_certificate_operation(self, name: str, **kwargs: '**Any') -> CertificateOperation: ...
    async def merge_certificate(self, name: str, x509_certificates: List[bytearray], **kwargs: '**Any') -> Certificate: ...
    async def get_issuer(self, name: str, **kwargs: '**Any') -> Issuer: ...
    async def create_issuer(self, name: str, provider: str, account_id: Optional[str]=..., password: Optional[str]=..., organization_id: Optional[str]=..., admin_details: Optional[List[AdministratorDetails]]=..., **kwargs: '**Any') -> Issuer: ...
    async def update_issuer(self, name: str, provider: Optional[str]=..., account_id: Optional[str]=..., password: Optional[str]=..., organization_id: Optional[str]=..., admin_details: Optional[List[AdministratorDetails]]=..., **kwargs: '**Any') -> Issuer: ...
    async def delete_issuer(self, name: str, **kwargs: '**Any') -> Issuer: ...
    def list_issuers(self, **kwargs: '**Any') -> AsyncIterable[IssuerProperties]: ...
