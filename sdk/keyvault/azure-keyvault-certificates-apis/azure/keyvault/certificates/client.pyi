# Stubs for azure.keyvault.certificates.client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._polling import CreateCertificatePoller
from ._shared import KeyVaultClientBase
from .models import Certificate, CertificateOperation, CertificatePolicy, CertificateProperties, Contact, DeletedCertificate, Issuer, IssuerProperties
from azure.core.polling import LROPoller
from typing import Any, Iterable, List, Optional

class CertificateClient(KeyVaultClientBase):
    def begin_create_certificate(self, name: str, policy: Optional[CertificatePolicy]=..., **kwargs: Any) -> LROPoller: ...
    def get_certificate_with_policy(self, name: str, **kwargs: Any) -> Certificate: ...
    def get_certificate(self, name: str, version: str, **kwargs: Any) -> Certificate: ...
    def delete_certificate(self, name: str, **kwargs: Any) -> DeletedCertificate: ...
    def get_deleted_certificate(self, name: str, **kwargs: Any) -> DeletedCertificate: ...
    def purge_deleted_certificate(self, name: str, **kwargs: Any) -> None: ...
    def recover_deleted_certificate(self, name: str, **kwargs: Any) -> Certificate: ...
    def import_certificate(self, name: str, certificate_bytes: bytes, password: Optional[str]=..., policy: Optional[CertificatePolicy]=..., **kwargs: Any) -> Certificate: ...
    def get_policy(self, certificate_name: str, **kwargs: Any) -> CertificatePolicy: ...
    def update_policy(self, certificate_name: str, policy: CertificatePolicy, **kwargs: Any) -> CertificatePolicy: ...
    def update_certificate_properties(self, name: str, version: Optional[str]=..., **kwargs: Any) -> Certificate: ...
    def backup_certificate(self, name: str, **kwargs: Any) -> bytes: ...
    def restore_certificate(self, backup: bytes, **kwargs: Any) -> Certificate: ...
    def list_deleted_certificates(self, include_pending: Optional[bool]=..., **kwargs: Any) -> Iterable[DeletedCertificate]: ...
    def list_certificates(self, include_pending: Optional[bool]=..., **kwargs: Any) -> Iterable[CertificateProperties]: ...
    def list_certificate_versions(self, name: str, **kwargs: Any) -> Iterable[CertificateProperties]: ...
    def create_contacts(self, contacts: Iterable[Contact], **kwargs: Any) -> List[Contact]: ...
    def get_contacts(self, **kwargs: Any) -> List[Contact]: ...
    def delete_contacts(self, **kwargs: Any) -> List[Contact]: ...
    def get_certificate_operation(self, name: str, **kwargs: Any) -> CertificateOperation: ...
    def delete_certificate_operation(self, name: str, **kwargs: Any) -> CertificateOperation: ...
    def cancel_certificate_operation(self, name: str, **kwargs: Any) -> CertificateOperation: ...
    def merge_certificate(self, name: str, x509_certificates: List[bytearray], **kwargs: Any) -> Certificate: ...
    def get_issuer(self, name: str, **kwargs: Any) -> Issuer: ...
    def create_issuer(self, name: Tuple[str], provider: Tuple[str], account_id: Optional[str]=..., password: Optional[str]=..., organization_id: Optional[str]=..., admin_details: Optional[List[AdministratorDetails]]=..., **kwargs: Any) -> Issuer: ...
    def update_issuer(self, name: Tuple[str], provider: Tuple[Optional[str]]=..., account_id: Optional[str]=..., password: Optional[str]=..., organization_id: Optional[str]=..., admin_details: Optional[List[AdministratorDetails]]=..., **kwargs: Any) -> Issuer: ...
    def delete_issuer(self, name: str, **kwargs: Any) -> Issuer: ...
    def list_issuers(self, **kwargs: Any) -> Iterable[IssuerProperties]: ...
