# Stubs for azure.keyvault.keys.aio.client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ..crypto.aio import CryptographyClient
from azure.keyvault.keys._shared import AsyncKeyVaultClientBase
from azure.keyvault.keys.models import DeletedKey, JsonWebKey, Key, KeyProperties
from datetime import datetime
from typing import Any, AsyncIterable, List, Optional, Union

class KeyClient(AsyncKeyVaultClientBase):
    def get_cryptography_client(self, key: Union[Key, str], **kwargs: Any) -> CryptographyClient: ...
    async def create_key(self, name: str, key_type: str, size: Optional[int]=..., curve: Optional[str]=..., key_operations: Optional[List[str]]=..., expires: Optional[datetime]=..., not_before: Optional[datetime]=..., **kwargs: '**Any') -> Key: ...
    async def create_rsa_key(self, name: str, hsm: bool, size: Optional[int]=..., key_operations: Optional[List[str]]=..., expires: Optional[datetime]=..., not_before: Optional[datetime]=..., **kwargs: '**Any') -> Key: ...
    async def create_ec_key(self, name: str, hsm: bool, curve: Optional[str]=..., key_operations: Optional[List[str]]=..., expires: Optional[datetime]=..., not_before: Optional[datetime]=..., **kwargs: '**Any') -> Key: ...
    async def delete_key(self, name: str, **kwargs: '**Any') -> DeletedKey: ...
    async def get_key(self, name: str, version: Optional[str]=..., **kwargs: '**Any') -> Key: ...
    async def get_deleted_key(self, name: str, **kwargs: '**Any') -> DeletedKey: ...
    def list_deleted_keys(self, **kwargs: '**Any') -> AsyncIterable[DeletedKey]: ...
    def list_keys(self, **kwargs: '**Any') -> AsyncIterable[KeyProperties]: ...
    def list_key_versions(self, name: str, **kwargs: '**Any') -> AsyncIterable[KeyProperties]: ...
    async def purge_deleted_key(self, name: str, **kwargs: '**Any') -> None: ...
    async def recover_deleted_key(self, name: str, **kwargs: '**Any') -> Key: ...
    async def update_key_properties(self, name: str, version: Optional[str]=..., key_operations: Optional[List[str]]=..., not_before: Optional[datetime]=..., expires: Optional[datetime]=..., **kwargs: '**Any') -> Key: ...
    async def backup_key(self, name: str, **kwargs: '**Any') -> bytes: ...
    async def restore_key(self, backup: bytes, **kwargs: '**Any') -> Key: ...
    async def import_key(self, name: str, key: JsonWebKey, hsm: Optional[bool]=..., not_before: Optional[datetime]=..., expires: Optional[datetime]=..., **kwargs: '**Any') -> Key: ...
