# Stubs for azure.keyvault.keys.client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._shared import KeyVaultClientBase
from .crypto import CryptographyClient
from .models import DeletedKey, JsonWebKey, Key, KeyProperties
from azure.core.paging import ItemPaged
from datetime import datetime
from typing import Any, List, Optional, Union

class KeyClient(KeyVaultClientBase):
    def get_cryptography_client(self, key: Union[Key, str], **kwargs: Any) -> CryptographyClient: ...
    def create_key(self, name: str, key_type: str, size: Optional[int]=..., key_operations: Optional[List[str]]=..., expires: Optional[datetime]=..., not_before: Optional[datetime]=..., curve: Optional[str]=..., **kwargs: Any) -> Key: ...
    def create_rsa_key(self, name: str, hsm: bool, size: Optional[int]=..., key_operations: Optional[List[str]]=..., expires: Optional[datetime]=..., not_before: Optional[datetime]=..., **kwargs: Any) -> Key: ...
    def create_ec_key(self, name: str, hsm: bool, curve: Optional[str]=..., key_operations: Optional[List[str]]=..., expires: Optional[datetime]=..., not_before: Optional[datetime]=..., **kwargs: Any) -> Key: ...
    def delete_key(self, name: str, **kwargs: Any) -> DeletedKey: ...
    def get_key(self, name: str, version: Optional[str]=..., **kwargs: Any) -> Key: ...
    def get_deleted_key(self, name: str, **kwargs: Any) -> DeletedKey: ...
    def list_deleted_keys(self, **kwargs: Any) -> ItemPaged[DeletedKey]: ...
    def list_keys(self, **kwargs: Any) -> ItemPaged[KeyProperties]: ...
    def list_key_versions(self, name: str, **kwargs: Any) -> ItemPaged[KeyProperties]: ...
    def purge_deleted_key(self, name: str, **kwargs: Any) -> None: ...
    def recover_deleted_key(self, name: str, **kwargs: Any) -> Key: ...
    def update_key_properties(self, name: str, version: Optional[str]=..., key_operations: Optional[List[str]]=..., expires: Optional[datetime]=..., not_before: Optional[datetime]=..., **kwargs: Any) -> Key: ...
    def backup_key(self, name: str, **kwargs: Any) -> bytes: ...
    def restore_key(self, backup: bytes, **kwargs: Any) -> Key: ...
    def import_key(self, name: str, key: JsonWebKey, hsm: Optional[bool]=..., not_before: Optional[datetime]=..., expires: Optional[datetime]=..., **kwargs: Any) -> Key: ...
