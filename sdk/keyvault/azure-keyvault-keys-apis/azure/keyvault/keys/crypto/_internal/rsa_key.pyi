# Stubs for azure.keyvault.keys.crypto._internal.rsa_key (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._internal import _bytes_to_int, _int_to_bytes
from .algorithms import Ps256, Ps384, Ps512, Rs256, Rs384, Rs512, Rsa1_5, RsaOaep, RsaOaep256
from .key import Key
from typing import Any, Optional

class RsaKey(Key):
    PUBLIC_KEY_DEFAULT_OPS: Any = ...
    PRIVATE_KEY_DEFAULT_OPS: Any = ...
    kty: Any = ...
    key_ops: Any = ...
    def __init__(self, kid: Optional[Any] = ...) -> None: ...
    @property
    def n(self): ...
    @property
    def e(self): ...
    @property
    def p(self): ...
    @property
    def q(self): ...
    @property
    def b(self): ...
    @property
    def d(self): ...
    @property
    def dq(self): ...
    @property
    def dp(self): ...
    @property
    def qi(self): ...
    @property
    def private_key(self): ...
    @property
    def public_key(self): ...
    @staticmethod
    def generate(kid: Optional[Any] = ..., kty: str = ..., size: int = ..., e: int = ...): ...
    @classmethod
    def from_jwk(cls, jwk: Any): ...
    def to_jwk(self, include_private: bool = ...): ...
    @property
    def default_encryption_algorithm(self): ...
    @property
    def default_key_wrap_algorithm(self): ...
    @property
    def default_signature_algorithm(self): ...
    def encrypt(self, plain_text: Any, **kwargs: Any): ...
    def decrypt(self, cipher_text: Any, **kwargs: Any): ...
    def sign(self, digest: Any, **kwargs: Any): ...
    def verify(self, digest: Any, signature: Any, **kwargs: Any): ...
    def wrap_key(self, key: Any, **kwargs: Any): ...
    def unwrap_key(self, encrypted_key: Any, **kwargs: Any): ...
    def is_private_key(self): ...
