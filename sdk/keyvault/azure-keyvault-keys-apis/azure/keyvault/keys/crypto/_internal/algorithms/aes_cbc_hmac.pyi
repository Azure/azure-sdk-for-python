# Stubs for azure.keyvault.keys.crypto._internal.algorithms.aes_cbc_hmac (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import abc
from .._internal import _int_to_bigendian_8_bytes
from ..algorithm import AuthenticatedSymmetricEncryptionAlgorithm
from ..transform import AuthenticatedCryptoTransform
from abc import abstractmethod
from typing import Any, Optional

class _AesCbcHmacCryptoTransform(AuthenticatedCryptoTransform, metaclass=abc.ABCMeta):
    def __init__(self, key: Any, iv: Any, auth_data: Any, auth_tag: Any) -> None: ...
    def tag(self): ...
    def block_size(self) -> None: ...
    @abstractmethod
    def update(self, data: Any) -> Any: ...
    @abstractmethod
    def finalize(self) -> Any: ...
    def transform(self, data: Any): ...

class _AesCbcHmacEncryptor(_AesCbcHmacCryptoTransform):
    def __init__(self, key: Any, iv: Any, auth_data: Any, auth_tag: Any) -> None: ...
    def update(self, data: Any): ...
    def finalize(self): ...
    def block_size(self) -> None: ...

class _AesCbcHmacDecryptor(_AesCbcHmacCryptoTransform):
    def __init__(self, key: Any, iv: Any, auth_data: Any, auth_tag: Any) -> None: ...
    def update(self, data: Any): ...
    def finalize(self): ...
    def transform(self, data: Any): ...
    def block_size(self) -> None: ...

class _AesCbcHmac(AuthenticatedSymmetricEncryptionAlgorithm):
    @property
    def block_size(self): ...
    @property
    def block_size_in_bytes(self): ...
    @property
    def key_size(self): ...
    @property
    def key_size_in_bytes(self): ...
    def create_encryptor(self, key: Any, iv: Any, auth_data: Any, auth_tag: Optional[Any] = ...): ...
    def create_decryptor(self, key: Any, iv: Any, auth_data: Any, auth_tag: Any): ...

class Aes128CbcHmacSha256(_AesCbcHmac): ...
class Aes192CbcHmacSha384(_AesCbcHmac): ...
class Aes256CbcHmacSha512(_AesCbcHmac): ...
