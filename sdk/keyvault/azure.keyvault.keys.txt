**** Package/Module azure.keyvault.keys****
class KeyClient(KeyVaultClientBase, object):
	vault_url:str
	credential

	vault_url

	def __init__(self, vault_url: str, credential, transport=None, api_version=None, **kwargs): ...
	def backup_key(self, name: str, **kwargs) -> bytes: ...
	def create_ec_key(self, name: str, hsm: bool, curve: curve=None, key_operations: key_operations=None, enabled: bool=None, expires: datetime.datetime=None, not_before: datetime.datetime=None, tags: dict=None, **kwargs) -> ~azure.keyvault.keys.models.Key: ...
	def create_key(self, name: str, key_type: key_type, size: int=None, key_operations: key_operations=None, enabled: bool=None, expires=None, not_before: datetime.datetime=None, tags: dict=None, curve: curve=None, **kwargs) -> ~azure.keyvault.keys.models.Key: ...
	def create_rsa_key(self, name: str, hsm: bool, size: int=None, key_operations: key_operations=None, enabled: bool=None, expires=None, not_before: datetime.datetime=None, tags: dict=None, **kwargs) -> ~azure.keyvault.keys.models.Key: ...
	def delete_key(self, name: str, **kwargs) -> ~azure.keyvault.keys.models.DeletedKey: ...
	def get_cryptography_client(self, key: key, **kwargs) -> :class:`~azure.keyvault.keys.crypto.CryptographyClient`: ...
	def get_deleted_key(self, name: str, **kwargs) -> ~azure.keyvault.keys.models.DeletedKey: ...
	def get_key(self, name: str, version: str=None, **kwargs) -> ~azure.keyvault.keys.models.Key: ...
	def import_key(self, name: str, key: key, hsm: bool=None, enabled: bool=None, not_before: datetime.datetime=None, expires=None, tags: dict=None, **kwargs) -> ~azure.keyvault.keys.models.Key: ...
	def list_deleted_keys(self, **kwargs) -> ~azure.core.paging.ItemPaged[~azure.keyvault.keys.models.DeletedKey]: ...
	def list_key_versions(self, name: str, **kwargs) -> ~azure.core.paging.ItemPaged[~azure.keyvault.keys.models.KeyProperties]: ...
	def list_keys(self, **kwargs) -> ~azure.core.paging.ItemPaged[~azure.keyvault.keys.models.KeyProperties]: ...
	def purge_deleted_key(self, name: str, **kwargs): ...
	def recover_deleted_key(self, name: str, **kwargs) -> ~azure.keyvault.keys.models.Key: ...
	def restore_key(self, backup: bytes, **kwargs) -> ~azure.keyvault.keys.models.Key: ...
	def update_key_properties(self, name: str, version: str=None, key_operations: key_operations=None, enabled: bool=None, expires: datetime.datetime=None, not_before: datetime.datetime=None, tags: dict=None, **kwargs) -> ~azure.keyvault.keys.models.Key: ...

class KeyCurveName(str, Enum, object):
	...

class KeyOperation(str, Enum, object):
	...

class KeyType(str, Enum, object):
	...

**** Package/Module azure.keyvault.keys.models****
class DeletedKey(Key, object):
	deleted_date
	id
	key_material
	name
	properties
	recovery_id
	scheduled_purge_date

	def __init__(self, properties, key_material=None, deleted_date=None, recovery_id=None, scheduled_purge_date=None): ...

class JsonWebKey(object):
	kid:str
	kty:kty
	key_ops:key_ops
	n:bytes
	e:bytes
	d:bytes
	dp:bytes
	dq:bytes
	qi:bytes
	p:bytes
	q:bytes
	k:bytes
	t:bytes
	crv:crv
	x:bytes
	y:bytes

	def __init__(self, *, kid, kty, key_ops, n, e, d, dp, dq, qi, p, q, k, t, crv, x, y, **kwargs): ...

class Key(object):
	id
	key_material
	name
	properties

	def __init__(self, properties, key_material): ...

Warning - couldn't get source for __new__
class KeyOperationResult(tuple, object):
	id
	value

	def __getnewargs__(self): ...
	def __new__(_cls, id, value): ...
	def __repr__(self): ...

class KeyProperties(object):
	created
	enabled
	expires
	id
	managed
	name
	not_before
	recovery_level
	tags
	updated
	vault_url
	version

	def __init__(self, attributes, vault_id, **kwargs): ...

**** Package/Module azure.keyvault.keys.crypto****
class CryptographyClient(KeyVaultClientBase, object):
	key:key
	credential

	key_id
	vault_url

	def __init__(self, key: key, credential, **kwargs): ...
	def decrypt(self, algorithm: algorithm, ciphertext: bytes, **kwargs) -> :class:`~azure.keyvault.keys.crypto.DecryptResult`: ...
	def encrypt(self, algorithm: algorithm, plaintext: bytes, **kwargs) -> :class:`~azure.keyvault.keys.crypto.EncryptResult`: ...
	def get_key(self, **kwargs) -> :class:`~azure.keyvault.keys.models.Key` or ``None``: ...
	def sign(self, algorithm: algorithm, digest: bytes, **kwargs) -> :class:`~azure.keyvault.keys.crypto.SignResult`: ...
	def unwrap_key(self, algorithm: algorithm, encrypted_key: bytes, **kwargs) -> :class:`~azure.keyvault.keys.crypto.UnwrapKeyResult`: ...
	def verify(self, algorithm: algorithm, digest: bytes, signature: bytes, **kwargs) -> :class:`~azure.keyvault.keys.crypto.VerifyResult`: ...
	def wrap_key(self, algorithm: algorithm, key: bytes, **kwargs) -> :class:`~azure.keyvault.keys.crypto.WrapKeyResult`: ...

Warning - couldn't get source for __new__
class DecryptResult(tuple, object):
	decrypted_bytes

	def __getnewargs__(self): ...
	def __new__(_cls, decrypted_bytes): ...
	def __repr__(self): ...

Warning - couldn't get source for __new__
class EncryptResult(tuple, object):
	algorithm
	authentication_tag
	ciphertext
	key_id

	def __getnewargs__(self): ...
	def __new__(_cls, key_id, algorithm, ciphertext, authentication_tag): ...
	def __repr__(self): ...

class EncryptionAlgorithm(str, Enum, object):
	...

class KeyWrapAlgorithm(str, Enum, object):
	...

Warning - couldn't get source for __new__
class SignResult(tuple, object):
	algorithm
	key_id
	signature

	def __getnewargs__(self): ...
	def __new__(_cls, key_id, algorithm, signature): ...
	def __repr__(self): ...

class SignatureAlgorithm(str, Enum, object):
	...

Warning - couldn't get source for __new__
class UnwrapKeyResult(tuple, object):
	unwrapped_bytes

	def __getnewargs__(self): ...
	def __new__(_cls, unwrapped_bytes): ...
	def __repr__(self): ...

Warning - couldn't get source for __new__
class VerifyResult(tuple, object):
	result

	def __getnewargs__(self): ...
	def __new__(_cls, result): ...
	def __repr__(self): ...

Warning - couldn't get source for __new__
class WrapKeyResult(tuple, object):
	algorithm
	encrypted_key
	key_id

	def __getnewargs__(self): ...
	def __new__(_cls, key_id, algorithm, encrypted_key): ...
	def __repr__(self): ...

