{
    "chosen_version": "7.2-preview",
    "total_api_version_list": ["7.2-preview"],
    "client": {
        "name": "KeyVaultClient",
        "filename": "_key_vault_client",
        "description": "The key vault client performs cryptographic key operations and vault operations against the Key Vault service.",
        "base_url": null,
        "custom_base_url": "\u0027{vaultBaseUrl}\u0027",
        "azure_arm": false
    },
    "global_parameters": {
        "sync_method": {
        },
        "async_method": {
        },
        "constant": {
        },
        "call": ""
    },
    "config": {
        "credential": false,
        "credential_scopes": null,
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true
    },
    "operation_groups": {
    },
    "operation_mixins": {
        "set_secret" : {
            "sync": {
                "signature": "def set_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    value,  # type: str\n    tags=None,  # type: Optional[Dict[str, str]]\n    content_type_parameter=None,  # type: Optional[str]\n    secret_attributes=None,  # type: Optional[\"models.SecretAttributes\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Sets a secret in a specified key vault.\n\nThe SET operation adds a secret to the Azure Key Vault. If the named secret already exists,\nAzure Key Vault creates a new version of that secret. This operation requires the secrets/set\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param value: The value of the secret.\n:type value: str\n:param tags: Application specific metadata in the form of key-value pairs.\n:type tags: dict[str, str]\n:param content_type_parameter: Type of the secret value such as a password.\n:type content_type_parameter: str\n:param secret_attributes: The secret management attributes.\n:type secret_attributes: ~azure.keyvault.v7_2.models.SecretAttributes\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def set_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    value: str,\n    tags: Optional[Dict[str, str]] = None,\n    content_type_parameter: Optional[str] = None,\n    secret_attributes: Optional[\"models.SecretAttributes\"] = None,\n    **kwargs\n) -\u003e \"models.SecretBundle\":\n",
                "doc": "\"\"\"Sets a secret in a specified key vault.\n\nThe SET operation adds a secret to the Azure Key Vault. If the named secret already exists,\nAzure Key Vault creates a new version of that secret. This operation requires the secrets/set\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param value: The value of the secret.\n:type value: str\n:param tags: Application specific metadata in the form of key-value pairs.\n:type tags: dict[str, str]\n:param content_type_parameter: Type of the secret value such as a password.\n:type content_type_parameter: str\n:param secret_attributes: The secret management attributes.\n:type secret_attributes: ~azure.keyvault.v7_2.models.SecretAttributes\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name, value, tags, content_type_parameter, secret_attributes"
        },
        "delete_secret" : {
            "sync": {
                "signature": "def delete_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Deletes a secret from a specified key vault.\n\nThe DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied\nto an individual version of a secret. This operation requires the secrets/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedSecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.DeletedSecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def delete_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e \"models.DeletedSecretBundle\":\n",
                "doc": "\"\"\"Deletes a secret from a specified key vault.\n\nThe DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied\nto an individual version of a secret. This operation requires the secrets/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedSecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.DeletedSecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name"
        },
        "update_secret" : {
            "sync": {
                "signature": "def update_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    secret_version,  # type: str\n    content_type_parameter=None,  # type: Optional[str]\n    secret_attributes=None,  # type: Optional[\"models.SecretAttributes\"]\n    tags=None,  # type: Optional[Dict[str, str]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Updates the attributes associated with a specified secret in a given key vault.\n\nThe UPDATE operation changes specified attributes of an existing stored secret. Attributes that\nare not specified in the request are left unchanged. The value of a secret itself cannot be\nchanged. This operation requires the secrets/set permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param secret_version: The version of the secret.\n:type secret_version: str\n:param content_type_parameter: Type of the secret value such as a password.\n:type content_type_parameter: str\n:param secret_attributes: The secret management attributes.\n:type secret_attributes: ~azure.keyvault.v7_2.models.SecretAttributes\n:param tags: Application specific metadata in the form of key-value pairs.\n:type tags: dict[str, str]\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def update_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    secret_version: str,\n    content_type_parameter: Optional[str] = None,\n    secret_attributes: Optional[\"models.SecretAttributes\"] = None,\n    tags: Optional[Dict[str, str]] = None,\n    **kwargs\n) -\u003e \"models.SecretBundle\":\n",
                "doc": "\"\"\"Updates the attributes associated with a specified secret in a given key vault.\n\nThe UPDATE operation changes specified attributes of an existing stored secret. Attributes that\nare not specified in the request are left unchanged. The value of a secret itself cannot be\nchanged. This operation requires the secrets/set permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param secret_version: The version of the secret.\n:type secret_version: str\n:param content_type_parameter: Type of the secret value such as a password.\n:type content_type_parameter: str\n:param secret_attributes: The secret management attributes.\n:type secret_attributes: ~azure.keyvault.v7_2.models.SecretAttributes\n:param tags: Application specific metadata in the form of key-value pairs.\n:type tags: dict[str, str]\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name, secret_version, content_type_parameter, secret_attributes, tags"
        },
        "get_secret" : {
            "sync": {
                "signature": "def get_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    secret_version,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Get a specified secret from a given key vault.\n\nThe GET operation is applicable to any secret stored in Azure Key Vault. This operation\nrequires the secrets/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param secret_version: The version of the secret. Though listed as required following OpenAPI\n guidelines for path parameters, actually optional on the server, which assumes \u0027latest\u0027 if not\n provided.\n:type secret_version: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    secret_version: str,\n    **kwargs\n) -\u003e \"models.SecretBundle\":\n",
                "doc": "\"\"\"Get a specified secret from a given key vault.\n\nThe GET operation is applicable to any secret stored in Azure Key Vault. This operation\nrequires the secrets/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param secret_version: The version of the secret. Though listed as required following OpenAPI\n guidelines for path parameters, actually optional on the server, which assumes \u0027latest\u0027 if not\n provided.\n:type secret_version: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name, secret_version"
        },
        "get_secrets" : {
            "sync": {
                "signature": "def get_secrets(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"List secrets in a specified key vault.\n\nThe Get Secrets operation is applicable to the entire vault. However, only the base secret\nidentifier and its attributes are provided in the response. Individual secret versions are not\nlisted in the response. This operation requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified, the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SecretListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v7_2.models.SecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": false,
                "signature": "def get_secrets(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"models.SecretListResult\"]:\n",
                "doc": "\"\"\"List secrets in a specified key vault.\n\nThe Get Secrets operation is applicable to the entire vault. However, only the base secret\nidentifier and its attributes are provided in the response. Individual secret versions are not\nlisted in the response. This operation requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified, the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SecretListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v7_2.models.SecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, maxresults"
        },
        "get_secret_versions" : {
            "sync": {
                "signature": "def get_secret_versions(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"List all versions of the specified secret.\n\nThe full secret identifier and attributes are provided in the response. No values are returned\nfor the secrets. This operations requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified, the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SecretListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v7_2.models.SecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": false,
                "signature": "def get_secret_versions(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"models.SecretListResult\"]:\n",
                "doc": "\"\"\"List all versions of the specified secret.\n\nThe full secret identifier and attributes are provided in the response. No values are returned\nfor the secrets. This operations requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified, the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SecretListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v7_2.models.SecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name, maxresults"
        },
        "get_deleted_secrets" : {
            "sync": {
                "signature": "def get_deleted_secrets(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Lists deleted secrets for the specified vault.\n\nThe Get Deleted Secrets operation returns the secrets that have been deleted for a vault\nenabled for soft-delete. This operation requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either DeletedSecretListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v7_2.models.DeletedSecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": false,
                "signature": "def get_deleted_secrets(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"models.DeletedSecretListResult\"]:\n",
                "doc": "\"\"\"Lists deleted secrets for the specified vault.\n\nThe Get Deleted Secrets operation returns the secrets that have been deleted for a vault\nenabled for soft-delete. This operation requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either DeletedSecretListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v7_2.models.DeletedSecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, maxresults"
        },
        "get_deleted_secret" : {
            "sync": {
                "signature": "def get_deleted_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Gets the specified deleted secret.\n\nThe Get Deleted Secret operation returns the specified deleted secret along with its\nattributes. This operation requires the secrets/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedSecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.DeletedSecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_deleted_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e \"models.DeletedSecretBundle\":\n",
                "doc": "\"\"\"Gets the specified deleted secret.\n\nThe Get Deleted Secret operation returns the specified deleted secret along with its\nattributes. This operation requires the secrets/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedSecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.DeletedSecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name"
        },
        "purge_deleted_secret" : {
            "sync": {
                "signature": "def purge_deleted_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Permanently deletes the specified secret.\n\nThe purge deleted secret operation removes the secret permanently, without the possibility of\nrecovery. This operation can only be enabled on a soft-delete enabled vault. This operation\nrequires the secrets/purge permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def purge_deleted_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e None:\n",
                "doc": "\"\"\"Permanently deletes the specified secret.\n\nThe purge deleted secret operation removes the secret permanently, without the possibility of\nrecovery. This operation can only be enabled on a soft-delete enabled vault. This operation\nrequires the secrets/purge permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name"
        },
        "recover_deleted_secret" : {
            "sync": {
                "signature": "def recover_deleted_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Recovers the deleted secret to the latest version.\n\nRecovers the deleted secret in the specified vault. This operation can only be performed on a\nsoft-delete enabled vault. This operation requires the secrets/recover permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the deleted secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def recover_deleted_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e \"models.SecretBundle\":\n",
                "doc": "\"\"\"Recovers the deleted secret to the latest version.\n\nRecovers the deleted secret in the specified vault. This operation can only be performed on a\nsoft-delete enabled vault. This operation requires the secrets/recover permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the deleted secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name"
        },
        "backup_secret" : {
            "sync": {
                "signature": "def backup_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Backs up the specified secret.\n\nRequests that a backup of the specified secret be downloaded to the client. All versions of the\nsecret will be downloaded. This operation requires the secrets/backup permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: BackupSecretResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.BackupSecretResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def backup_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e \"models.BackupSecretResult\":\n",
                "doc": "\"\"\"Backs up the specified secret.\n\nRequests that a backup of the specified secret be downloaded to the client. All versions of the\nsecret will be downloaded. This operation requires the secrets/backup permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: BackupSecretResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.BackupSecretResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_name"
        },
        "restore_secret" : {
            "sync": {
                "signature": "def restore_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_bundle_backup,  # type: bytes\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Restores a backed up secret to a vault.\n\nRestores a backed up secret, and all its versions, to a vault. This operation requires the\nsecrets/restore permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_bundle_backup: The backup blob associated with a secret bundle.\n:type secret_bundle_backup: bytes\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def restore_secret(\n    self,\n    vault_base_url: str,\n    secret_bundle_backup: bytes,\n    **kwargs\n) -\u003e \"models.SecretBundle\":\n",
                "doc": "\"\"\"Restores a backed up secret to a vault.\n\nRestores a backed up secret, and all its versions, to a vault. This operation requires the\nsecrets/restore permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_bundle_backup: The backup blob associated with a secret bundle.\n:type secret_bundle_backup: bytes\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v7_2.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "vault_base_url, secret_bundle_backup"
        }
    },
    "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"], \"azure.core.paging\": [\"ItemPaged\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"Iterable\", \"Optional\", \"TypeVar\"]}}}",
    "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"], \"azure.core.async_paging\": [\"AsyncItemPaged\", \"AsyncList\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"AsyncIterable\", \"Callable\", \"Dict\", \"Generic\", \"Optional\", \"TypeVar\"]}}}"
}