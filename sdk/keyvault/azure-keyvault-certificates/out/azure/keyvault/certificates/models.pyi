# Stubs for azure.keyvault.certificates.models (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._shared import parse_vault_id
from ._shared._generated.v7_0 import models
from .enums import CertificatePolicyAction, KeyCurveName, KeyType, KeyUsageType, SecretContentType, WellKnownIssuerNames
from typing import Any, Dict, Optional

class AdministratorContact:
    def __init__(self, first_name: Optional[str]=..., last_name: Optional[str]=..., email: Optional[str]=..., phone: Optional[str]=...) -> None: ...
    @property
    def email(self) -> str: ...
    @property
    def first_name(self) -> str: ...
    @property
    def last_name(self) -> str: ...
    @property
    def phone(self) -> str: ...

class CertificateOperationError:
    def __init__(self, code: str, message: models.Error, inner_error: Any) -> None: ...
    @property
    def code(self) -> str: ...
    @property
    def message(self) -> str: ...
    @property
    def inner_error(self) -> models.Error: ...

class CertificateProperties:
    def __init__(self, **kwargs: Any) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def not_before(self) -> datetime: ...
    @property
    def expires_on(self) -> datetime: ...
    @property
    def created_on(self) -> datetime: ...
    @property
    def updated_on(self) -> datetime: ...
    @property
    def recovery_level(self) -> models.DeletionRecoveryLevel: ...
    @property
    def vault_url(self) -> str: ...
    @property
    def thumbprint(self) -> bytes: ...
    @property
    def tags(self) -> Dict[str, str]: ...
    @property
    def version(self) -> str: ...

class KeyVaultCertificate:
    def __init__(self, policy: CertificatePolicy, properties: Optional[CertificateProperties]=..., cer: Optional[bytes]=..., **kwargs: Any) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def properties(self) -> CertificateProperties: ...
    @property
    def key_id(self) -> str: ...
    @property
    def secret_id(self) -> str: ...
    @property
    def policy(self) -> CertificatePolicy: ...
    @property
    def cer(self) -> bytes: ...

class CertificateOperation:
    def __init__(self, cert_operation_id: Optional[str]=..., issuer_name: Optional[str]=..., certificate_type: Optional[str]=..., certificate_transparency: Optional[bool]=..., csr: Optional[bytes]=..., cancellation_requested: Optional[bool]=..., status: Optional[str]=..., status_details: Optional[str]=..., error: Optional[models.Error]=..., target: Optional[str]=..., request_id: Optional[str]=...) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def issuer_name(self) -> str: ...
    @property
    def certificate_type(self) -> str: ...
    @property
    def certificate_transparency(self) -> bool: ...
    @property
    def csr(self) -> bytes: ...
    @property
    def cancellation_requested(self) -> bool: ...
    @property
    def status(self) -> str: ...
    @property
    def status_details(self) -> str: ...
    @property
    def error(self) -> models.Error: ...
    @property
    def target(self) -> str: ...
    @property
    def request_id(self) -> str: ...

class CertificatePolicy:
    def __init__(self, issuer_name: str, subject_name: str, exportable: Optional[bool]=..., key_type: Optional[KeyType]=..., key_size: Optional[str]=..., reuse_key: Optional[bool]=..., curve: Optional[KeyCurveName]=..., ekus: Optional[list[str]]=..., key_usage: Optional[list[Union[KeyUsageType, str]]]=..., content_type: Optional[Union[SecretContentType, str]]=..., validity_in_months: Optional[int]=..., lifetime_actions: Optional[list[LifetimeAction]]=..., certificate_type: Optional[str]=..., certificate_transparency: Optional[bool]=..., **kwargs: Any) -> None: ...
    @classmethod
    def get_default(cls): ...
    @property
    def id(self) -> str: ...
    @property
    def exportable(self) -> bool: ...
    @property
    def key_type(self) -> KeyType: ...
    @property
    def key_size(self) -> int: ...
    @property
    def reuse_key(self) -> bool: ...
    @property
    def curve(self) -> KeyCurveName: ...
    @property
    def ekus(self) -> list[str]: ...
    @property
    def key_usage(self) -> list[KeyUsageType]: ...
    @property
    def content_type(self) -> SecretContentType: ...
    @property
    def subject_name(self) -> str: ...
    @property
    def san_emails(self) -> list[str]: ...
    @property
    def san_dns_names(self) -> list[str]: ...
    @property
    def san_upns(self) -> list[str]: ...
    @property
    def validity_in_months(self) -> int: ...
    @property
    def lifetime_actions(self) -> list[LifetimeAction]: ...
    @property
    def issuer_name(self) -> str: ...
    @property
    def certificate_type(self) -> str: ...
    @property
    def certificate_transparency(self) -> bool: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def not_before(self) -> datetime: ...
    @property
    def expires_on(self) -> datetime: ...
    @property
    def created_on(self) -> datetime: ...
    @property
    def updated_on(self) -> datetime: ...
    @property
    def recovery_level(self) -> models.DeletionRecoveryLevel: ...

class CertificateContact:
    def __init__(self, email: Optional[str]=..., name: Optional[str]=..., phone: Optional[str]=...) -> None: ...
    @property
    def email(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def phone(self) -> str: ...

class IssuerProperties:
    def __init__(self, provider: Optional[str]=..., **kwargs: Any) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def provider(self) -> str: ...
    @property
    def vault_url(self) -> str: ...

class CertificateIssuer:
    def __init__(self, properties: Optional[IssuerProperties]=..., attributes: Optional[models.IssuerAttributes]=..., account_id: Optional[str]=..., password: Optional[str]=..., organization_id: Optional[str]=..., admin_details: Optional[List[AdministratorContact]]=...) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def properties(self) -> IssuerProperties: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def created_on(self) -> datetime: ...
    @property
    def updated_on(self) -> datetime: ...
    @property
    def account_id(self) -> str: ...
    @property
    def password(self) -> str: ...
    @property
    def organization_id(self) -> str: ...
    @property
    def admin_details(self) -> List[AdministratorContact]: ...

class LifetimeAction:
    def __init__(self, action: CertificatePolicyAction, lifetime_percentage: Optional[int]=..., days_before_expiry: Optional[int]=...) -> None: ...
    @property
    def lifetime_percentage(self) -> int: ...
    @property
    def days_before_expiry(self) -> int: ...
    @property
    def action(self) -> str: ...

class DeletedCertificate(KeyVaultCertificate):
    def __init__(self, properties: Optional[CertificateProperties]=..., policy: Optional[CertificatePolicy]=..., cer: Optional[bytes]=..., **kwargs: Any) -> None: ...
    @property
    def deleted_date(self) -> datetime: ...
    @property
    def recovery_id(self) -> str: ...
    @property
    def scheduled_purge_date(self) -> datetime: ...
