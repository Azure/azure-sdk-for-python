# Stubs for azure.keyvault.certificates.aio.client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._shared import AsyncKeyVaultClientBase
from .._shared._polling_async import DeleteAsyncPollingMethod, RecoverDeletedAsyncPollingMethod
from ._polling_async import CreateCertificatePollerAsync
from azure.keyvault.certificates.models import CertificateContact, CertificateIssuer, CertificateOperation, CertificatePolicy, CertificateProperties, DeletedCertificate, IssuerProperties, KeyVaultCertificate
from typing import Any, AsyncIterable, Iterable, List, Optional, Union

class CertificateClient(AsyncKeyVaultClientBase):
    async def create_certificate(self, certificate_name: str, policy: CertificatePolicy, **kwargs: Any) -> Union[KeyVaultCertificate, CertificateOperation]: ...
    async def get_certificate(self, certificate_name: str, **kwargs: Any) -> KeyVaultCertificate: ...
    async def get_certificate_version(self, certificate_name: str, version: str, **kwargs: Any) -> KeyVaultCertificate: ...
    async def delete_certificate(self, certificate_name: str, **kwargs: Any) -> DeletedCertificate: ...
    async def get_deleted_certificate(self, certificate_name: str, **kwargs: Any) -> DeletedCertificate: ...
    async def purge_deleted_certificate(self, certificate_name: str, **kwargs: Any) -> None: ...
    async def recover_deleted_certificate(self, certificate_name: str, **kwargs: Any) -> KeyVaultCertificate: ...
    async def import_certificate(self, certificate_name: str, certificate_bytes: bytes, **kwargs: Any) -> KeyVaultCertificate: ...
    async def get_policy(self, certificate_name: str, **kwargs: Any) -> CertificatePolicy: ...
    async def update_policy(self, certificate_name: str, policy: CertificatePolicy, **kwargs: Any) -> CertificatePolicy: ...
    async def update_certificate_properties(self, certificate_name: str, version: Optional[str]=..., **kwargs: Any) -> KeyVaultCertificate: ...
    async def backup_certificate(self, certificate_name: str, **kwargs: Any) -> bytes: ...
    async def restore_certificate_backup(self, backup: bytes, **kwargs: Any) -> KeyVaultCertificate: ...
    def list_deleted_certificates(self, **kwargs: Any) -> AsyncIterable[DeletedCertificate]: ...
    def list_properties_of_certificates(self, **kwargs: Any) -> AsyncIterable[CertificateProperties]: ...
    def list_properties_of_certificate_versions(self, certificate_name: str, **kwargs: Any) -> AsyncIterable[CertificateProperties]: ...
    async def create_contacts(self, contacts: Iterable[CertificateContact], **kwargs: Any) -> List[CertificateContact]: ...
    async def get_contacts(self, **kwargs: Any) -> List[CertificateContact]: ...
    async def delete_contacts(self, **kwargs: Any) -> List[CertificateContact]: ...
    async def get_certificate_operation(self, certificate_name: str, **kwargs: Any) -> CertificateOperation: ...
    async def delete_certificate_operation(self, certificate_name: str, **kwargs: Any) -> CertificateOperation: ...
    async def cancel_certificate_operation(self, certificate_name: str, **kwargs: Any) -> CertificateOperation: ...
    async def merge_certificate(self, certificate_name: str, x509_certificates: List[bytearray], **kwargs: Any) -> KeyVaultCertificate: ...
    async def get_issuer(self, issuer_name: str, **kwargs: Any) -> CertificateIssuer: ...
    async def create_issuer(self, issuer_name: str, provider: str, **kwargs: Any) -> CertificateIssuer: ...
    async def update_issuer(self, issuer_name: str, **kwargs: Any) -> CertificateIssuer: ...
    async def delete_issuer(self, issuer_name: str, **kwargs: Any) -> CertificateIssuer: ...
    def list_properties_of_issuers(self, **kwargs: Any) -> AsyncIterable[IssuerProperties]: ...
