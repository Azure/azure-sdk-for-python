# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

class Action(Model):
    """The action that will be executed.

    :param action_type: The type of the action. Possible values include:
     'EmailContacts', 'AutoRenew'
    :type action_type: str or ~azure.keyvault.v7_0.models.ActionType
    """

    _attribute_map = {
        'action_type': {'key': 'action_type', 'type': 'ActionType'},
    }

    def __init__(self, **kwargs):
        super(Action, self).__init__(**kwargs)
        self.action_type = kwargs.get('action_type', None)


class AdministratorDetails(Model):
    """Details of the organization administrator of the certificate issuer.

    :param first_name: First name.
    :type first_name: str
    :param last_name: Last name.
    :type last_name: str
    :param email_address: Email address.
    :type email_address: str
    :param phone: Phone number.
    :type phone: str
    """

    _attribute_map = {
        'first_name': {'key': 'first_name', 'type': 'str'},
        'last_name': {'key': 'last_name', 'type': 'str'},
        'email_address': {'key': 'email', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AdministratorDetails, self).__init__(**kwargs)
        self.first_name = kwargs.get('first_name', None)
        self.last_name = kwargs.get('last_name', None)
        self.email_address = kwargs.get('email_address', None)
        self.phone = kwargs.get('phone', None)


class CertificateBase(Model):
    def __init__(self, attributes, cert_id, thumbprint=None, **kwargs):
        # type: (models.CertificateAttributes, Optional[str], Any) -> None
        self._attributes = attributes
        self._id = cert_id
        self._thumbprint = thumbprint
        self._tags = kwargs.get("tags", None)

    @property
    def id(self):
        return self._id

    @property
    def name(self):
        pass

    @property
    def thumbprint(self):
        return self._thumbprint

    @property
    def enabled(self):
        # type: () -> bool
        return self._attributes.enabled

    @property
    def not_before(self):
        # type: () -> datetime
        return self._attributes.not_before

    @property
    def expires(self):
        # type: () -> datetime
        return self._attributes.expires

    @property
    def created(self):
        # type: () -> datetime
        return self._attributes.created

    @property
    def updated(self):
        # type: () -> datetime
        return self._attributes.updated
    
    @property
    def recovery_level(self):
        # type: () -> datetime
        return self._attributes.recovery_level
    
    @property
    def vault_url(self):
        pass

    @property
    def tags(self):
        pass

class Certificate(CertificateBase):
    # x509_thumbprint cannot be none on this?
    def __init__(self, attributes, id, thumbprint, kid, sid, policy, x509_certificate, **kwargs):
        # type: (models.CertificateAttributes, str, str, str, models.CertificatePolicy, Any) -> None
        super(CertificateBase, self).__init__(attributes, id, thumbprint, **kwargs)
        self._kid = kid
        self._sid = sid
        self._policy = policy
        self._x509_certificate = x509_certificate

    @classmethod
    def _from_certificate_bundle(cls, certificate_bundle):
        # type: (models.CertificateBundle) -> Certificate
        """Construct a key from an autorest-generated KeyBundle"""
        return cls(
            attributes=certificate_bundle.attributes, id=certificate_bundle.id, thumbprint=certificate_bundle.x509_thumbprint, kid=certificate_bundle.kid, sid=certificate_bundle.sid, policy=certificate_bundle.policy, x509_certificate=certificate_bundle.cer,
            tags=certificate_bundle.tags
        )

    @property
    def kid(self):
        pass

    @property
    def sid(self):
        return self.sid

    @property
    def policy(self):
        return self._policy

    @property
    def x509_certificate(self):
        return self._x509_certificate
        pass

class CertificateOperation(Model):
    """A certificate operation is returned in case of asynchronous requests. """

    def __init__(self, id, issuer_name, certificate_type, certificate_transparency, csr, cancellation_requested, status, status_details, error, target, request_id, **kwargs):
        self._id = id
        self._issuer_name = issuer_name
        self._certificate_type = certificate_type
        self._certificate_transparency = certificate_transparency
        self._csr = csr
        self._cancellation_requested = cancellation_requested
        self._status = status
        self._status_details = status_details
        self._error = error
        self._target = target
        self._request_id = request_id

    @property
    def id(self):
        return self._id

    @property
    def issuer_name(self):
        return self._issuer_name

    @property
    def certificate_type(self):
        return self._certificate_type

    @property
    def certificate_transparency(self):
        return self._certificate_transparency

    @property
    def csr(self):
        # type: () -> bool
        return self._csr

    @property
    def cancellation_requested(self):
        # type: () -> datetime
        return self._cancellation_requested

    @property
    def status(self):
        # type: () -> datetime
        return self._status

    @property
    def status_details(self):
        # type: () -> datetime
        return self._status_details

    @property
    def error(self):
        # type: () -> datetime
        return self._error
    
    @property
    def target(self):
        # type: () -> datetime
        return self._target
    
    @property
    def request_id(self):
        return self._request_id

class CertificatePolicy(Model):
    """Management policy for a certificate.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The certificate id.
    :vartype id: str
    :param key_properties: Properties of the key backing a certificate.
    :type key_properties: ~azure.keyvault.v7_0.models.KeyProperties
    :param secret_properties: Properties of the secret backing a certificate.
    :type secret_properties: ~azure.keyvault.v7_0.models.SecretProperties
    :param x509_certificate_properties: Properties of the X509 component of a
     certificate.
    :type x509_certificate_properties:
     ~azure.keyvault.v7_0.models.X509CertificateProperties
    :param lifetime_actions: Actions that will be performed by Key Vault over
     the lifetime of a certificate.
    :type lifetime_actions: list[~azure.keyvault.v7_0.models.LifetimeAction]
    :param issuer_parameters: Parameters for the issuer of the X509 component
     of a certificate.
    :type issuer_parameters: ~azure.keyvault.v7_0.models.IssuerParameters
    :param attributes: The certificate attributes.
    :type attributes: ~azure.keyvault.v7_0.models.CertificateAttributes
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'key_properties': {'key': 'key_props', 'type': 'KeyProperties'},
        'secret_properties': {'key': 'secret_props', 'type': 'SecretProperties'},
        'x509_certificate_properties': {'key': 'x509_props', 'type': 'X509CertificateProperties'},
        'lifetime_actions': {'key': 'lifetime_actions', 'type': '[LifetimeAction]'},
        'issuer_parameters': {'key': 'issuer', 'type': 'IssuerParameters'},
        'attributes': {'key': 'attributes', 'type': 'CertificateAttributes'},
    }

    def __init__(self, attributes, **kwargs):
        super(CertificatePolicy, self).__init__(**kwargs)
        self._id = None
        self._key_properties = kwargs.get('key_properties', None)
        self._secret_content_type = kwargs.get('secret_properties', None)
        self._subject_alternative_names = subject_alternative_names
        self._subject_alternative_dns_names = subject_alternative_dns_names
        self._subject_alternative_upns = subject_alternative_upns
        self._validity_in_months = kwargs.get('lifetime_actions', None)
        self._lifetime_actions = kwargs.get('lifetime_actions', None)
        self._issuer_name = kwargs.get('issuer_parameters', None)
        self._certificate_type = certificate_type
        self._certificate_transparency = certificate_transparency

    @property
    def id(self):
        pass

    @property
    def key_properties(self):
        return self._key_properties

    @property
    def secret_content_type (self):
        return self._secret_content_type 

    @property
    def subject_name(self):
        return self._subject_name

    @property
    def subject_alternative_names(self):
        return self._subject_alternative_names

    @property
    def subject_alternative_dns_names(self):
        return self._subject_alternative_dns_names

    @property
    def subject_alternative_upns(self):
        return self._subject_alternative_upns

    @property
    def validity_in_months(self):
        return self._validity_in_months
        pass

    @property
    def lifetime_actions(self):
        return self._lifetime_actions  # need to spread this out?
        pass

    @property
    def issuer_name(self):
        return self._issuer_name

    @property
    def certificate_type(self):
        return self._certificate_type
        pass

    @property
    def certificate_transparency(self):
        return self._certificate_transparency
        pass

# we are not inheriting this from CertificateAttributes why?

class Contact(Model):
    """The contact information for the vault certificates.

    :param email_address: Email address.
    :type email_address: str
    :param name: Name.
    :type name: str
    :param phone: Phone number.
    :type phone: str
    """

    _attribute_map = {
        'email_address': {'key': 'email', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'phone': {'key': 'phone', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Contact, self).__init__(**kwargs)
        self.email_address = kwargs.get('email_address', None)
        self.name = kwargs.get('name', None)
        self.phone = kwargs.get('phone', None)

class Contact:
    def __init__(self, email, name, phone):
        self._email = email
        self._name = name
        self._phone = phone

    @property
    def email(self):
        return self._email

    @property
    def name(self):
        return self._name

    @property
    def phone(self):
        return self._phone
# what would be Contacts?

class IssuerBase(Model):

    def __init__(self, attributes, issuer_id, name, provider, **kwargs):
        # type: (models.IssuerAttributes, Optional[str], Any) -> None
        self._attributes = attributes
        self._id = issuer_id
        self._name = name
        self._provider = provider

    @property
    def enabled(self):
        # type: () -> bool
        return self._attributes.enabled

    @property
    def created(self):
        # type: () -> datetime
        return self._attributes.created

    @property
    def updated(self):
        # type: () -> datetime
        return self._attributes.updated

    @property
    def id(self):
        # type: () -> bool
        return self._id

    @property
    def name(self):
        # type: () -> datetime
        return self._name

    @property
    def provider(self):
        # type: () -> datetime
        return self._provider

class Issuer(IssuerBase):
    def __init__(self, attributes, id, provider, _account_id, passowrd, organization_id, **kwargs):
        super(IssuerBase, self).__init__(attributes, id, provider, **kwargs)
        self._account_id = account_id
        self._password = password
        self._organization_id = organization_id
        self._admin_details = kwargs.get('attributes', None) # spread out?

    @property
    def account_id(self):
        # type: () -> datetime
        return self._account_id

    @property
    def password(self):
        # type: () -> bool
        return self._password

    @property
    def organization_id(self):
        # type: () -> datetime
        return self._organization_id

    @property
    def admin_details(self):
        # type: () -> datetime
        return self._admin_details

class KeyProperties(Model):
    def __init__(self, exportable, key_type, key_size, reuse_key, curve, ekus, key_usage, **kwargs):
        self._exportable = kwargs.get('exportable', None)
        self._key_type = kwargs.get('key_type', None)
        self._key_size = kwargs.get('key_size', None)
        self._reuse_key = kwargs.get('reuse_key', None)
        self._curve = kwargs.get('curve', None)
        self._ekus = kwargs.get('ekus', None)
        self._key_usage = kwargs.get('key_usage', None)

    @property
    def exportable(self):
        return self._exportable

    @property
    def key_type(self):
        return self._key_type

    @property
    def key_size(self):
        return self._key_size
    
    @property
    def curve(self):
        return self._curve

    @property
    def ekus(self):
        return self._ekus

    @property
    def key_usage(self):
        return self._key_usage

class LifetimeAction(Model):
    """Action and its trigger that will be performed by Key Vault over the
    lifetime of a certificate.

    :param trigger: The condition that will execute the action.
    :type trigger: ~azure.keyvault.v7_0.models.Trigger
    :param action: The action that will be executed.
    :type action: ~azure.keyvault.v7_0.models.Action
    """

    _attribute_map = {
        'trigger': {'key': 'trigger', 'type': 'Trigger'},
        'action': {'key': 'action', 'type': 'Action'},
    }

    def __init__(self, **kwargs):
        super(LifetimeAction, self).__init__(**kwargs)
        self.trigger = kwargs.get('trigger', None)
        self.action = kwargs.get('action', None)

class OrganizationDetails(Model):
    """Details of the organization of the certificate issuer.

    :param id: Id of the organization.
    :type id: str
    :param admin_details: Details of the organization administrator.
    :type admin_details:
     list[~azure.keyvault.v7_0.models.AdministratorDetails]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'admin_details': {'key': 'admin_details', 'type': '[c]'},
    }

    def __init__(self, **kwargs):
        super(OrganizationDetails, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.admin_details = kwargs.get('admin_details', None)

class PendingCertificateSigningRequestResult(Model):
    """The pending certificate signing request result.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar value: The pending certificate signing request as Base64 encoded
     string.
    :vartype value: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(PendingCertificateSigningRequestResult, self).__init__(**kwargs)
        self.value = None

class Trigger(Model):
    """A condition to be satisfied for an action to be executed.

    :param lifetime_percentage: Percentage of lifetime at which to trigger.
     Value should be between 1 and 99.
    :type lifetime_percentage: int
    :param days_before_expiry: Days before expiry to attempt renewal. Value
     should be between 1 and validity_in_months multiplied by 27. If
     validity_in_months is 36, then value should be between 1 and 972 (36 *
     27).
    :type days_before_expiry: int
    """

    _validation = {
        'lifetime_percentage': {'maximum': 99, 'minimum': 1},
    }

    _attribute_map = {
        'lifetime_percentage': {'key': 'lifetime_percentage', 'type': 'int'},
        'days_before_expiry': {'key': 'days_before_expiry', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(Trigger, self).__init__(**kwargs)
        self.lifetime_percentage = kwargs.get('lifetime_percentage', None)
        self.days_before_expiry = kwargs.get('days_before_expiry', None)

class DeletedCertificateBundle(CertificateBundle):
    """A Deleted Certificate consisting of its previous id, attributes and its
    tags, as well as information on when it will be purged.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The certificate id.
    :vartype id: str
    :ivar kid: The key id.
    :vartype kid: str
    :ivar sid: The secret id.
    :vartype sid: str
    :ivar x509_thumbprint: Thumbprint of the certificate.
    :vartype x509_thumbprint: bytes
    :ivar policy: The management policy.
    :vartype policy: ~azure.keyvault.v7_0.models.CertificatePolicy
    :param cer: CER contents of x509 certificate.
    :type cer: bytearray
    :param content_type: The content type of the secret.
    :type content_type: str
    :param attributes: The certificate attributes.
    :type attributes: ~azure.keyvault.v7_0.models.CertificateAttributes
    :param tags: Application specific metadata in the form of key-value pairs
    :type tags: dict[str, str]
    :param recovery_id: The url of the recovery object, used to identify and
     recover the deleted certificate.
    :type recovery_id: str
    :ivar scheduled_purge_date: The time when the certificate is scheduled to
     be purged, in UTC
    :vartype scheduled_purge_date: datetime
    :ivar deleted_date: The time when the certificate was deleted, in UTC
    :vartype deleted_date: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'kid': {'readonly': True},
        'sid': {'readonly': True},
        'x509_thumbprint': {'readonly': True},
        'policy': {'readonly': True},
        'scheduled_purge_date': {'readonly': True},
        'deleted_date': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'kid': {'key': 'kid', 'type': 'str'},
        'sid': {'key': 'sid', 'type': 'str'},
        'x509_thumbprint': {'key': 'x5t', 'type': 'base64'},
        'policy': {'key': 'policy', 'type': 'CertificatePolicy'},
        'cer': {'key': 'cer', 'type': 'bytearray'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'attributes': {'key': 'attributes', 'type': 'CertificateAttributes'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'recovery_id': {'key': 'recoveryId', 'type': 'str'},
        'scheduled_purge_date': {'key': 'scheduledPurgeDate', 'type': 'unix-time'},
        'deleted_date': {'key': 'deletedDate', 'type': 'unix-time'},
    }

    def __init__(self, **kwargs):
        super(DeletedCertificateBundle, self).__init__(**kwargs)
        self.recovery_id = kwargs.get('recovery_id', None)
        self.scheduled_purge_date = None
        self.deleted_date = None


