# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Attributes(msrest.serialization.Model):
    """The object attributes managed by the KeyVault service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar enabled: Determines whether the object is enabled.
    :vartype enabled: bool
    :ivar not_before: Not before date in UTC.
    :vartype not_before: ~datetime.datetime
    :ivar expires: Expiry date in UTC.
    :vartype expires: ~datetime.datetime
    :ivar created: Creation time in UTC.
    :vartype created: ~datetime.datetime
    :ivar updated: Last updated time in UTC.
    :vartype updated: ~datetime.datetime
    """

    _validation = {
        'created': {'readonly': True},
        'updated': {'readonly': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'not_before': {'key': 'nbf', 'type': 'unix-time'},
        'expires': {'key': 'exp', 'type': 'unix-time'},
        'created': {'key': 'created', 'type': 'unix-time'},
        'updated': {'key': 'updated', 'type': 'unix-time'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Determines whether the object is enabled.
        :paramtype enabled: bool
        :keyword not_before: Not before date in UTC.
        :paramtype not_before: ~datetime.datetime
        :keyword expires: Expiry date in UTC.
        :paramtype expires: ~datetime.datetime
        """
        super(Attributes, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.not_before = kwargs.get('not_before', None)
        self.expires = kwargs.get('expires', None)
        self.created = None
        self.updated = None


class Error(msrest.serialization.Model):
    """The key vault server error.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar inner_error: The key vault server error.
    :vartype inner_error: ~azure.keyvault.v7_3.models.Error
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'inner_error': {'key': 'innererror', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Error, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.inner_error = None


class FullBackupOperation(msrest.serialization.Model):
    """Full backup operation.

    :ivar status: Status of the backup operation.
    :vartype status: str
    :ivar status_details: The status details of backup operation.
    :vartype status_details: str
    :ivar error: Error encountered, if any, during the full backup operation.
    :vartype error: ~azure.keyvault.v7_3.models.Error
    :ivar start_time: The start time of the backup operation in UTC.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the backup operation in UTC.
    :vartype end_time: ~datetime.datetime
    :ivar job_id: Identifier for the full backup operation.
    :vartype job_id: str
    :ivar azure_storage_blob_container_uri: The Azure blob storage container Uri which contains the
     full backup.
    :vartype azure_storage_blob_container_uri: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
        'start_time': {'key': 'startTime', 'type': 'unix-time'},
        'end_time': {'key': 'endTime', 'type': 'unix-time'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'azure_storage_blob_container_uri': {'key': 'azureStorageBlobContainerUri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Status of the backup operation.
        :paramtype status: str
        :keyword status_details: The status details of backup operation.
        :paramtype status_details: str
        :keyword error: Error encountered, if any, during the full backup operation.
        :paramtype error: ~azure.keyvault.v7_3.models.Error
        :keyword start_time: The start time of the backup operation in UTC.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time of the backup operation in UTC.
        :paramtype end_time: ~datetime.datetime
        :keyword job_id: Identifier for the full backup operation.
        :paramtype job_id: str
        :keyword azure_storage_blob_container_uri: The Azure blob storage container Uri which contains
         the full backup.
        :paramtype azure_storage_blob_container_uri: str
        """
        super(FullBackupOperation, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.status_details = kwargs.get('status_details', None)
        self.error = kwargs.get('error', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.job_id = kwargs.get('job_id', None)
        self.azure_storage_blob_container_uri = kwargs.get('azure_storage_blob_container_uri', None)


class KeyVaultError(msrest.serialization.Model):
    """The key vault error exception.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar error: The key vault server error.
    :vartype error: ~azure.keyvault.v7_3.models.Error
    """

    _validation = {
        'error': {'readonly': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(KeyVaultError, self).__init__(**kwargs)
        self.error = None


class Permission(msrest.serialization.Model):
    """Role definition permissions.

    :ivar actions: Action permissions that are granted.
    :vartype actions: list[str]
    :ivar not_actions: Action permissions that are excluded but not denied. They may be granted by
     other role definitions assigned to a principal.
    :vartype not_actions: list[str]
    :ivar data_actions: Data action permissions that are granted.
    :vartype data_actions: list[str or ~azure.keyvault.v7_3.models.DataAction]
    :ivar not_data_actions: Data action permissions that are excluded but not denied. They may be
     granted by other role definitions assigned to a principal.
    :vartype not_data_actions: list[str or ~azure.keyvault.v7_3.models.DataAction]
    """

    _attribute_map = {
        'actions': {'key': 'actions', 'type': '[str]'},
        'not_actions': {'key': 'notActions', 'type': '[str]'},
        'data_actions': {'key': 'dataActions', 'type': '[str]'},
        'not_data_actions': {'key': 'notDataActions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword actions: Action permissions that are granted.
        :paramtype actions: list[str]
        :keyword not_actions: Action permissions that are excluded but not denied. They may be granted
         by other role definitions assigned to a principal.
        :paramtype not_actions: list[str]
        :keyword data_actions: Data action permissions that are granted.
        :paramtype data_actions: list[str or ~azure.keyvault.v7_3.models.DataAction]
        :keyword not_data_actions: Data action permissions that are excluded but not denied. They may
         be granted by other role definitions assigned to a principal.
        :paramtype not_data_actions: list[str or ~azure.keyvault.v7_3.models.DataAction]
        """
        super(Permission, self).__init__(**kwargs)
        self.actions = kwargs.get('actions', None)
        self.not_actions = kwargs.get('not_actions', None)
        self.data_actions = kwargs.get('data_actions', None)
        self.not_data_actions = kwargs.get('not_data_actions', None)


class RestoreOperation(msrest.serialization.Model):
    """Restore operation.

    :ivar status: Status of the restore operation.
    :vartype status: str
    :ivar status_details: The status details of restore operation.
    :vartype status_details: str
    :ivar error: Error encountered, if any, during the restore operation.
    :vartype error: ~azure.keyvault.v7_3.models.Error
    :ivar job_id: Identifier for the restore operation.
    :vartype job_id: str
    :ivar start_time: The start time of the restore operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the restore operation.
    :vartype end_time: ~datetime.datetime
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'unix-time'},
        'end_time': {'key': 'endTime', 'type': 'unix-time'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Status of the restore operation.
        :paramtype status: str
        :keyword status_details: The status details of restore operation.
        :paramtype status_details: str
        :keyword error: Error encountered, if any, during the restore operation.
        :paramtype error: ~azure.keyvault.v7_3.models.Error
        :keyword job_id: Identifier for the restore operation.
        :paramtype job_id: str
        :keyword start_time: The start time of the restore operation.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time of the restore operation.
        :paramtype end_time: ~datetime.datetime
        """
        super(RestoreOperation, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.status_details = kwargs.get('status_details', None)
        self.error = kwargs.get('error', None)
        self.job_id = kwargs.get('job_id', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)


class RestoreOperationParameters(msrest.serialization.Model):
    """RestoreOperationParameters.

    All required parameters must be populated in order to send to Azure.

    :ivar sas_token_parameters: Required.
    :vartype sas_token_parameters: ~azure.keyvault.v7_3.models.SASTokenParameter
    :ivar folder_to_restore: Required. The Folder name of the blob where the previous successful
     full backup was stored.
    :vartype folder_to_restore: str
    """

    _validation = {
        'sas_token_parameters': {'required': True},
        'folder_to_restore': {'required': True},
    }

    _attribute_map = {
        'sas_token_parameters': {'key': 'sasTokenParameters', 'type': 'SASTokenParameter'},
        'folder_to_restore': {'key': 'folderToRestore', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sas_token_parameters: Required.
        :paramtype sas_token_parameters: ~azure.keyvault.v7_3.models.SASTokenParameter
        :keyword folder_to_restore: Required. The Folder name of the blob where the previous successful
         full backup was stored.
        :paramtype folder_to_restore: str
        """
        super(RestoreOperationParameters, self).__init__(**kwargs)
        self.sas_token_parameters = kwargs['sas_token_parameters']
        self.folder_to_restore = kwargs['folder_to_restore']


class RoleAssignment(msrest.serialization.Model):
    """Role Assignments.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The role assignment ID.
    :vartype id: str
    :ivar name: The role assignment name.
    :vartype name: str
    :ivar type: The role assignment type.
    :vartype type: str
    :ivar properties: Role assignment properties.
    :vartype properties: ~azure.keyvault.v7_3.models.RoleAssignmentPropertiesWithScope
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'RoleAssignmentPropertiesWithScope'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: Role assignment properties.
        :paramtype properties: ~azure.keyvault.v7_3.models.RoleAssignmentPropertiesWithScope
        """
        super(RoleAssignment, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = kwargs.get('properties', None)


class RoleAssignmentCreateParameters(msrest.serialization.Model):
    """Role assignment create parameters.

    All required parameters must be populated in order to send to Azure.

    :ivar properties: Required. Role assignment properties.
    :vartype properties: ~azure.keyvault.v7_3.models.RoleAssignmentProperties
    """

    _validation = {
        'properties': {'required': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'RoleAssignmentProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: Required. Role assignment properties.
        :paramtype properties: ~azure.keyvault.v7_3.models.RoleAssignmentProperties
        """
        super(RoleAssignmentCreateParameters, self).__init__(**kwargs)
        self.properties = kwargs['properties']


class RoleAssignmentFilter(msrest.serialization.Model):
    """Role Assignments filter.

    :ivar principal_id: Returns role assignment of the specific principal.
    :vartype principal_id: str
    """

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword principal_id: Returns role assignment of the specific principal.
        :paramtype principal_id: str
        """
        super(RoleAssignmentFilter, self).__init__(**kwargs)
        self.principal_id = kwargs.get('principal_id', None)


class RoleAssignmentListResult(msrest.serialization.Model):
    """Role assignment list operation result.

    :ivar value: Role assignment list.
    :vartype value: list[~azure.keyvault.v7_3.models.RoleAssignment]
    :ivar next_link: The URL to use for getting the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RoleAssignment]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Role assignment list.
        :paramtype value: list[~azure.keyvault.v7_3.models.RoleAssignment]
        :keyword next_link: The URL to use for getting the next set of results.
        :paramtype next_link: str
        """
        super(RoleAssignmentListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RoleAssignmentProperties(msrest.serialization.Model):
    """Role assignment properties.

    All required parameters must be populated in order to send to Azure.

    :ivar role_definition_id: Required. The role definition ID used in the role assignment.
    :vartype role_definition_id: str
    :ivar principal_id: Required. The principal ID assigned to the role. This maps to the ID inside
     the Active Directory. It can point to a user, service principal, or security group.
    :vartype principal_id: str
    """

    _validation = {
        'role_definition_id': {'required': True},
        'principal_id': {'required': True},
    }

    _attribute_map = {
        'role_definition_id': {'key': 'roleDefinitionId', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword role_definition_id: Required. The role definition ID used in the role assignment.
        :paramtype role_definition_id: str
        :keyword principal_id: Required. The principal ID assigned to the role. This maps to the ID
         inside the Active Directory. It can point to a user, service principal, or security group.
        :paramtype principal_id: str
        """
        super(RoleAssignmentProperties, self).__init__(**kwargs)
        self.role_definition_id = kwargs['role_definition_id']
        self.principal_id = kwargs['principal_id']


class RoleAssignmentPropertiesWithScope(msrest.serialization.Model):
    """Role assignment properties with scope.

    :ivar scope: The role scope. Possible values include: "/", "/keys".
    :vartype scope: str or ~azure.keyvault.v7_3.models.RoleScope
    :ivar role_definition_id: The role definition ID.
    :vartype role_definition_id: str
    :ivar principal_id: The principal ID.
    :vartype principal_id: str
    """

    _attribute_map = {
        'scope': {'key': 'scope', 'type': 'str'},
        'role_definition_id': {'key': 'roleDefinitionId', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword scope: The role scope. Possible values include: "/", "/keys".
        :paramtype scope: str or ~azure.keyvault.v7_3.models.RoleScope
        :keyword role_definition_id: The role definition ID.
        :paramtype role_definition_id: str
        :keyword principal_id: The principal ID.
        :paramtype principal_id: str
        """
        super(RoleAssignmentPropertiesWithScope, self).__init__(**kwargs)
        self.scope = kwargs.get('scope', None)
        self.role_definition_id = kwargs.get('role_definition_id', None)
        self.principal_id = kwargs.get('principal_id', None)


class RoleDefinition(msrest.serialization.Model):
    """Role definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The role definition ID.
    :vartype id: str
    :ivar name: The role definition name.
    :vartype name: str
    :ivar type: The role definition type. Possible values include:
     "Microsoft.Authorization/roleDefinitions".
    :vartype type: str or ~azure.keyvault.v7_3.models.RoleDefinitionType
    :ivar role_name: The role name.
    :vartype role_name: str
    :ivar description: The role definition description.
    :vartype description: str
    :ivar role_type: The role type. Possible values include: "AKVBuiltInRole", "CustomRole".
    :vartype role_type: str or ~azure.keyvault.v7_3.models.RoleType
    :ivar permissions: Role definition permissions.
    :vartype permissions: list[~azure.keyvault.v7_3.models.Permission]
    :ivar assignable_scopes: Role definition assignable scopes.
    :vartype assignable_scopes: list[str or ~azure.keyvault.v7_3.models.RoleScope]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'role_name': {'key': 'properties.roleName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'role_type': {'key': 'properties.type', 'type': 'str'},
        'permissions': {'key': 'properties.permissions', 'type': '[Permission]'},
        'assignable_scopes': {'key': 'properties.assignableScopes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword role_name: The role name.
        :paramtype role_name: str
        :keyword description: The role definition description.
        :paramtype description: str
        :keyword role_type: The role type. Possible values include: "AKVBuiltInRole", "CustomRole".
        :paramtype role_type: str or ~azure.keyvault.v7_3.models.RoleType
        :keyword permissions: Role definition permissions.
        :paramtype permissions: list[~azure.keyvault.v7_3.models.Permission]
        :keyword assignable_scopes: Role definition assignable scopes.
        :paramtype assignable_scopes: list[str or ~azure.keyvault.v7_3.models.RoleScope]
        """
        super(RoleDefinition, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.role_name = kwargs.get('role_name', None)
        self.description = kwargs.get('description', None)
        self.role_type = kwargs.get('role_type', None)
        self.permissions = kwargs.get('permissions', None)
        self.assignable_scopes = kwargs.get('assignable_scopes', None)


class RoleDefinitionCreateParameters(msrest.serialization.Model):
    """Role definition create parameters.

    All required parameters must be populated in order to send to Azure.

    :ivar properties: Required. Role definition properties.
    :vartype properties: ~azure.keyvault.v7_3.models.RoleDefinitionProperties
    """

    _validation = {
        'properties': {'required': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'RoleDefinitionProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: Required. Role definition properties.
        :paramtype properties: ~azure.keyvault.v7_3.models.RoleDefinitionProperties
        """
        super(RoleDefinitionCreateParameters, self).__init__(**kwargs)
        self.properties = kwargs['properties']


class RoleDefinitionFilter(msrest.serialization.Model):
    """Role Definitions filter.

    :ivar role_name: Returns role definition with the specific name.
    :vartype role_name: str
    """

    _attribute_map = {
        'role_name': {'key': 'roleName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword role_name: Returns role definition with the specific name.
        :paramtype role_name: str
        """
        super(RoleDefinitionFilter, self).__init__(**kwargs)
        self.role_name = kwargs.get('role_name', None)


class RoleDefinitionListResult(msrest.serialization.Model):
    """Role definition list operation result.

    :ivar value: Role definition list.
    :vartype value: list[~azure.keyvault.v7_3.models.RoleDefinition]
    :ivar next_link: The URL to use for getting the next set of results.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RoleDefinition]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Role definition list.
        :paramtype value: list[~azure.keyvault.v7_3.models.RoleDefinition]
        :keyword next_link: The URL to use for getting the next set of results.
        :paramtype next_link: str
        """
        super(RoleDefinitionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RoleDefinitionProperties(msrest.serialization.Model):
    """Role definition properties.

    :ivar role_name: The role name.
    :vartype role_name: str
    :ivar description: The role definition description.
    :vartype description: str
    :ivar role_type: The role type. Possible values include: "AKVBuiltInRole", "CustomRole".
    :vartype role_type: str or ~azure.keyvault.v7_3.models.RoleType
    :ivar permissions: Role definition permissions.
    :vartype permissions: list[~azure.keyvault.v7_3.models.Permission]
    :ivar assignable_scopes: Role definition assignable scopes.
    :vartype assignable_scopes: list[str or ~azure.keyvault.v7_3.models.RoleScope]
    """

    _attribute_map = {
        'role_name': {'key': 'roleName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'role_type': {'key': 'type', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': '[Permission]'},
        'assignable_scopes': {'key': 'assignableScopes', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword role_name: The role name.
        :paramtype role_name: str
        :keyword description: The role definition description.
        :paramtype description: str
        :keyword role_type: The role type. Possible values include: "AKVBuiltInRole", "CustomRole".
        :paramtype role_type: str or ~azure.keyvault.v7_3.models.RoleType
        :keyword permissions: Role definition permissions.
        :paramtype permissions: list[~azure.keyvault.v7_3.models.Permission]
        :keyword assignable_scopes: Role definition assignable scopes.
        :paramtype assignable_scopes: list[str or ~azure.keyvault.v7_3.models.RoleScope]
        """
        super(RoleDefinitionProperties, self).__init__(**kwargs)
        self.role_name = kwargs.get('role_name', None)
        self.description = kwargs.get('description', None)
        self.role_type = kwargs.get('role_type', None)
        self.permissions = kwargs.get('permissions', None)
        self.assignable_scopes = kwargs.get('assignable_scopes', None)


class SASTokenParameter(msrest.serialization.Model):
    """SASTokenParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar storage_resource_uri: Required. Azure Blob storage container Uri.
    :vartype storage_resource_uri: str
    :ivar token: Required. The SAS token pointing to an Azure Blob storage container.
    :vartype token: str
    """

    _validation = {
        'storage_resource_uri': {'required': True},
        'token': {'required': True},
    }

    _attribute_map = {
        'storage_resource_uri': {'key': 'storageResourceUri', 'type': 'str'},
        'token': {'key': 'token', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword storage_resource_uri: Required. Azure Blob storage container Uri.
        :paramtype storage_resource_uri: str
        :keyword token: Required. The SAS token pointing to an Azure Blob storage container.
        :paramtype token: str
        """
        super(SASTokenParameter, self).__init__(**kwargs)
        self.storage_resource_uri = kwargs['storage_resource_uri']
        self.token = kwargs['token']


class SelectiveKeyRestoreOperation(msrest.serialization.Model):
    """Selective Key Restore operation.

    :ivar status: Status of the restore operation.
    :vartype status: str
    :ivar status_details: The status details of restore operation.
    :vartype status_details: str
    :ivar error: Error encountered, if any, during the selective key restore operation.
    :vartype error: ~azure.keyvault.v7_3.models.Error
    :ivar job_id: Identifier for the selective key restore operation.
    :vartype job_id: str
    :ivar start_time: The start time of the restore operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the restore operation.
    :vartype end_time: ~datetime.datetime
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'unix-time'},
        'end_time': {'key': 'endTime', 'type': 'unix-time'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Status of the restore operation.
        :paramtype status: str
        :keyword status_details: The status details of restore operation.
        :paramtype status_details: str
        :keyword error: Error encountered, if any, during the selective key restore operation.
        :paramtype error: ~azure.keyvault.v7_3.models.Error
        :keyword job_id: Identifier for the selective key restore operation.
        :paramtype job_id: str
        :keyword start_time: The start time of the restore operation.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time of the restore operation.
        :paramtype end_time: ~datetime.datetime
        """
        super(SelectiveKeyRestoreOperation, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.status_details = kwargs.get('status_details', None)
        self.error = kwargs.get('error', None)
        self.job_id = kwargs.get('job_id', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)


class SelectiveKeyRestoreOperationParameters(msrest.serialization.Model):
    """SelectiveKeyRestoreOperationParameters.

    All required parameters must be populated in order to send to Azure.

    :ivar sas_token_parameters: Required.
    :vartype sas_token_parameters: ~azure.keyvault.v7_3.models.SASTokenParameter
    :ivar folder: Required. The Folder name of the blob where the previous successful full backup
     was stored.
    :vartype folder: str
    """

    _validation = {
        'sas_token_parameters': {'required': True},
        'folder': {'required': True},
    }

    _attribute_map = {
        'sas_token_parameters': {'key': 'sasTokenParameters', 'type': 'SASTokenParameter'},
        'folder': {'key': 'folder', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sas_token_parameters: Required.
        :paramtype sas_token_parameters: ~azure.keyvault.v7_3.models.SASTokenParameter
        :keyword folder: Required. The Folder name of the blob where the previous successful full
         backup was stored.
        :paramtype folder: str
        """
        super(SelectiveKeyRestoreOperationParameters, self).__init__(**kwargs)
        self.sas_token_parameters = kwargs['sas_token_parameters']
        self.folder = kwargs['folder']
