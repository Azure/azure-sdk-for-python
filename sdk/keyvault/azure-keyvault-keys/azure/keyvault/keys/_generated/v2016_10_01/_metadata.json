{
    "chosen_version": "2016-10-01",
    "total_api_version_list": ["2016-10-01"],
    "client": {
        "name": "KeyVaultClient",
        "filename": "_key_vault_client",
        "description": "The key vault client performs cryptographic key operations and vault operations against the Key Vault service.",
        "base_url": null,
        "custom_base_url": "\u0027{vaultBaseUrl}\u0027",
        "azure_arm": false,
        "has_lro_operations": false,
        "client_side_validation": true,
        "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.profiles\": [\"KnownProfiles\", \"ProfileDefinition\"], \"azure.profiles.multiapiclient\": [\"MultiApiClientMixin\"], \"msrest\": [\"Deserializer\", \"Serializer\"], \"azure.core\": [\"PipelineClient\"]}, \"local\": {\"._configuration\": [\"KeyVaultClientConfiguration\"], \"._operations_mixin\": [\"KeyVaultClientOperationsMixin\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Optional\"]}}}",
        "async_imports": "{\"regular\": {\"azurecore\": {\"azure.profiles\": [\"KnownProfiles\", \"ProfileDefinition\"], \"azure.profiles.multiapiclient\": [\"MultiApiClientMixin\"], \"msrest\": [\"Deserializer\", \"Serializer\"], \"azure.core\": [\"AsyncPipelineClient\"]}, \"local\": {\"._configuration\": [\"KeyVaultClientConfiguration\"], \"._operations_mixin\": [\"KeyVaultClientOperationsMixin\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Optional\"]}}}"
    },
    "global_parameters": {
        "sync": {
        },
        "async": {
        },
        "constant": {
        },
        "call": "",
        "service_client_specific": {
            "sync": {
                "api_version": {
                    "signature": "api_version=None, # type: Optional[str]",
                    "description": "API version to use if no profile is provided, or if missing in profile.",
                    "docstring_type": "str",
                    "required": false
                },
                "profile": {
                    "signature": "profile=KnownProfiles.default, # type: KnownProfiles",
                    "description": "A profile definition, from KnownProfiles to dict.",
                    "docstring_type": "azure.profiles.KnownProfiles",
                    "required": false
                }
            },
            "async": {
                "api_version": {
                    "signature": "api_version: Optional[str] = None,",
                    "description": "API version to use if no profile is provided, or if missing in profile.",
                    "docstring_type": "str",
                    "required": false
                },
                "profile": {
                    "signature": "profile: KnownProfiles = KnownProfiles.default,",
                    "description": "A profile definition, from KnownProfiles to dict.",
                    "docstring_type": "azure.profiles.KnownProfiles",
                    "required": false
                }
            }
        }
    },
    "config": {
        "credential": false,
        "credential_scopes": null,
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true,
        "credential_key_header_name": null,
        "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.configuration\": [\"Configuration\"], \"azure.core.pipeline\": [\"policies\"]}, \"local\": {\"._version\": [\"VERSION\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}}",
        "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.configuration\": [\"Configuration\"], \"azure.core.pipeline\": [\"policies\"]}, \"local\": {\".._version\": [\"VERSION\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}}"
    },
    "operation_groups": {
    },
    "operation_mixins": {
        "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"], \"azure.core.paging\": [\"ItemPaged\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"Iterable\", \"Optional\", \"TypeVar\"]}}}",
        "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"], \"azure.core.async_paging\": [\"AsyncItemPaged\", \"AsyncList\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"AsyncIterable\", \"Callable\", \"Dict\", \"Generic\", \"Optional\", \"TypeVar\"]}}}",
        "operations": {
            "create_key" : {
                "sync": {
                    "signature": "def create_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    parameters,  # type: \"_models.KeyCreateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Creates a new key, stores it, then returns key parameters and attributes to the client.\n\nThe create key operation can be used to create any key type in Azure Key Vault. If the named\nkey already exists, Azure Key Vault creates a new version of the key. It requires the\nkeys/create permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name for the new key. The system will generate the version name for the\n new key.\n:type key_name: str\n:param parameters: The parameters to create a key.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyCreateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def create_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    parameters: \"_models.KeyCreateParameters\",\n    **kwargs\n) -\u003e \"_models.KeyBundle\":\n",
                    "doc": "\"\"\"Creates a new key, stores it, then returns key parameters and attributes to the client.\n\nThe create key operation can be used to create any key type in Azure Key Vault. If the named\nkey already exists, Azure Key Vault creates a new version of the key. It requires the\nkeys/create permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name for the new key. The system will generate the version name for the\n new key.\n:type key_name: str\n:param parameters: The parameters to create a key.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyCreateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, parameters"
            },
            "import_key" : {
                "sync": {
                    "signature": "def import_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    parameters,  # type: \"_models.KeyImportParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Imports an externally created key, stores it, and returns key parameters and attributes to the client.\n\nThe import key operation may be used to import any key type into an Azure Key Vault. If the\nnamed key already exists, Azure Key Vault creates a new version of the key. This operation\nrequires the keys/import permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: Name for the imported key.\n:type key_name: str\n:param parameters: The parameters to import a key.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyImportParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def import_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    parameters: \"_models.KeyImportParameters\",\n    **kwargs\n) -\u003e \"_models.KeyBundle\":\n",
                    "doc": "\"\"\"Imports an externally created key, stores it, and returns key parameters and attributes to the client.\n\nThe import key operation may be used to import any key type into an Azure Key Vault. If the\nnamed key already exists, Azure Key Vault creates a new version of the key. This operation\nrequires the keys/import permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: Name for the imported key.\n:type key_name: str\n:param parameters: The parameters to import a key.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyImportParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, parameters"
            },
            "delete_key" : {
                "sync": {
                    "signature": "def delete_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes a key of any type from storage in Azure Key Vault.\n\nThe delete key operation cannot be used to remove individual versions of a key. This operation\nremoves the cryptographic material associated with the key, which means the key is not usable\nfor Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the\nkeys/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key to delete.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedKeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedKeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    **kwargs\n) -\u003e \"_models.DeletedKeyBundle\":\n",
                    "doc": "\"\"\"Deletes a key of any type from storage in Azure Key Vault.\n\nThe delete key operation cannot be used to remove individual versions of a key. This operation\nremoves the cryptographic material associated with the key, which means the key is not usable\nfor Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the\nkeys/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key to delete.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedKeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedKeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name"
            },
            "update_key" : {
                "sync": {
                    "signature": "def update_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    key_version,  # type: str\n    parameters,  # type: \"_models.KeyUpdateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.\n\nIn order to perform this operation, the key must already exist in the Key Vault. Note: The\ncryptographic material of a key itself cannot be changed. This operation requires the\nkeys/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of key to update.\n:type key_name: str\n:param key_version: The version of the key to update.\n:type key_version: str\n:param parameters: The parameters of the key to update.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def update_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    key_version: str,\n    parameters: \"_models.KeyUpdateParameters\",\n    **kwargs\n) -\u003e \"_models.KeyBundle\":\n",
                    "doc": "\"\"\"The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault.\n\nIn order to perform this operation, the key must already exist in the Key Vault. Note: The\ncryptographic material of a key itself cannot be changed. This operation requires the\nkeys/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of key to update.\n:type key_name: str\n:param key_version: The version of the key to update.\n:type key_version: str\n:param parameters: The parameters of the key to update.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, key_version, parameters"
            },
            "get_key" : {
                "sync": {
                    "signature": "def get_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    key_version,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the public part of a stored key.\n\nThe get key operation is applicable to all key types. If the requested key is symmetric, then\nno key material is released in the response. This operation requires the keys/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key to get.\n:type key_name: str\n:param key_version: Adding the version parameter retrieves a specific version of a key.\n:type key_version: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    key_version: str,\n    **kwargs\n) -\u003e \"_models.KeyBundle\":\n",
                    "doc": "\"\"\"Gets the public part of a stored key.\n\nThe get key operation is applicable to all key types. If the requested key is symmetric, then\nno key material is released in the response. This operation requires the keys/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key to get.\n:type key_name: str\n:param key_version: Adding the version parameter retrieves a specific version of a key.\n:type key_version: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, key_version"
            },
            "get_key_versions" : {
                "sync": {
                    "signature": "def get_key_versions(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Retrieves a list of individual key versions with the same key name.\n\nThe full key identifier, attributes, and tags are provided in the response. This operation\nrequires the keys/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either KeyListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.KeyListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_key_versions(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.KeyListResult\"]:\n",
                    "doc": "\"\"\"Retrieves a list of individual key versions with the same key name.\n\nThe full key identifier, attributes, and tags are provided in the response. This operation\nrequires the keys/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either KeyListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.KeyListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, maxresults"
            },
            "get_keys" : {
                "sync": {
                    "signature": "def get_keys(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"List keys in the specified vault.\n\nRetrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the\npublic part of a stored key. The LIST operation is applicable to all key types, however only\nthe base key identifier, attributes, and tags are provided in the response. Individual versions\nof a key are not listed in the response. This operation requires the keys/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either KeyListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.KeyListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_keys(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.KeyListResult\"]:\n",
                    "doc": "\"\"\"List keys in the specified vault.\n\nRetrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the\npublic part of a stored key. The LIST operation is applicable to all key types, however only\nthe base key identifier, attributes, and tags are provided in the response. Individual versions\nof a key are not listed in the response. This operation requires the keys/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either KeyListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.KeyListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, maxresults"
            },
            "backup_key" : {
                "sync": {
                    "signature": "def backup_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Requests that a backup of the specified key be downloaded to the client.\n\nThe Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this\noperation does NOT return key material in a form that can be used outside the Azure Key Vault\nsystem, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key\nVault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure\nKey Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance.\nThe BACKUP operation may be used to export, in protected form, any key type from Azure Key\nVault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed\nwithin geographical boundaries only; meaning that a BACKUP from one geographical area cannot be\nrestored to another geographical area. For example, a backup from the US geographical area\ncannot be restored in an EU geographical area. This operation requires the key/backup\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: BackupKeyResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.BackupKeyResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def backup_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    **kwargs\n) -\u003e \"_models.BackupKeyResult\":\n",
                    "doc": "\"\"\"Requests that a backup of the specified key be downloaded to the client.\n\nThe Key Backup operation exports a key from Azure Key Vault in a protected form. Note that this\noperation does NOT return key material in a form that can be used outside the Azure Key Vault\nsystem, the returned key material is either protected to a Azure Key Vault HSM or to Azure Key\nVault itself. The intent of this operation is to allow a client to GENERATE a key in one Azure\nKey Vault instance, BACKUP the key, and then RESTORE it into another Azure Key Vault instance.\nThe BACKUP operation may be used to export, in protected form, any key type from Azure Key\nVault. Individual versions of a key cannot be backed up. BACKUP / RESTORE can be performed\nwithin geographical boundaries only; meaning that a BACKUP from one geographical area cannot be\nrestored to another geographical area. For example, a backup from the US geographical area\ncannot be restored in an EU geographical area. This operation requires the key/backup\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: BackupKeyResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.BackupKeyResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name"
            },
            "restore_key" : {
                "sync": {
                    "signature": "def restore_key(\n    self,\n    vault_base_url,  # type: str\n    parameters,  # type: \"_models.KeyRestoreParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Restores a backed up key to a vault.\n\nImports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,\nattributes and access control policies. The RESTORE operation may be used to import a\npreviously backed up key. Individual versions of a key cannot be restored. The key is restored\nin its entirety with the same key name as it had when it was backed up. If the key name is not\navailable in the target Key Vault, the RESTORE operation will be rejected. While the key name\nis retained during restore, the final key identifier will change if the key is restored to a\ndifferent vault. Restore will restore all versions and preserve version identifiers. The\nRESTORE operation is subject to security constraints: The target Key Vault must be owned by the\nsame Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission\nin the target Key Vault. This operation requires the keys/restore permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param parameters: The parameters to restore the key.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyRestoreParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def restore_key(\n    self,\n    vault_base_url: str,\n    parameters: \"_models.KeyRestoreParameters\",\n    **kwargs\n) -\u003e \"_models.KeyBundle\":\n",
                    "doc": "\"\"\"Restores a backed up key to a vault.\n\nImports a previously backed up key into Azure Key Vault, restoring the key, its key identifier,\nattributes and access control policies. The RESTORE operation may be used to import a\npreviously backed up key. Individual versions of a key cannot be restored. The key is restored\nin its entirety with the same key name as it had when it was backed up. If the key name is not\navailable in the target Key Vault, the RESTORE operation will be rejected. While the key name\nis retained during restore, the final key identifier will change if the key is restored to a\ndifferent vault. Restore will restore all versions and preserve version identifiers. The\nRESTORE operation is subject to security constraints: The target Key Vault must be owned by the\nsame Microsoft Azure Subscription as the source Key Vault The user must have RESTORE permission\nin the target Key Vault. This operation requires the keys/restore permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param parameters: The parameters to restore the key.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyRestoreParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, parameters"
            },
            "encrypt" : {
                "sync": {
                    "signature": "def encrypt(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    key_version,  # type: str\n    parameters,  # type: \"_models.KeyOperationsParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.\n\nThe ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is\nstored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of\ndata, the size of which is dependent on the target key and the encryption algorithm to be used.\nThe ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault\nsince protection with an asymmetric key can be performed using public portion of the key. This\noperation is supported for asymmetric keys as a convenience for callers that have a key-\nreference but do not have access to the public key material. This operation requires the\nkeys/encrypt permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for the encryption operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyOperationsParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def encrypt(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    key_version: str,\n    parameters: \"_models.KeyOperationsParameters\",\n    **kwargs\n) -\u003e \"_models.KeyOperationResult\":\n",
                    "doc": "\"\"\"Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.\n\nThe ENCRYPT operation encrypts an arbitrary sequence of bytes using an encryption key that is\nstored in Azure Key Vault. Note that the ENCRYPT operation only supports a single block of\ndata, the size of which is dependent on the target key and the encryption algorithm to be used.\nThe ENCRYPT operation is only strictly necessary for symmetric keys stored in Azure Key Vault\nsince protection with an asymmetric key can be performed using public portion of the key. This\noperation is supported for asymmetric keys as a convenience for callers that have a key-\nreference but do not have access to the public key material. This operation requires the\nkeys/encrypt permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for the encryption operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyOperationsParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, key_version, parameters"
            },
            "decrypt" : {
                "sync": {
                    "signature": "def decrypt(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    key_version,  # type: str\n    parameters,  # type: \"_models.KeyOperationsParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Decrypts a single block of encrypted data.\n\nThe DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption\nkey and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a\nsingle block of data may be decrypted, the size of this block is dependent on the target key\nand the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys\nstored in Azure Key Vault since it uses the private portion of the key. This operation requires\nthe keys/decrypt permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for the decryption operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyOperationsParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def decrypt(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    key_version: str,\n    parameters: \"_models.KeyOperationsParameters\",\n    **kwargs\n) -\u003e \"_models.KeyOperationResult\":\n",
                    "doc": "\"\"\"Decrypts a single block of encrypted data.\n\nThe DECRYPT operation decrypts a well-formed block of ciphertext using the target encryption\nkey and specified algorithm. This operation is the reverse of the ENCRYPT operation; only a\nsingle block of data may be decrypted, the size of this block is dependent on the target key\nand the algorithm to be used. The DECRYPT operation applies to asymmetric and symmetric keys\nstored in Azure Key Vault since it uses the private portion of the key. This operation requires\nthe keys/decrypt permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for the decryption operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyOperationsParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, key_version, parameters"
            },
            "sign" : {
                "sync": {
                    "signature": "def sign(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    key_version,  # type: str\n    parameters,  # type: \"_models.KeySignParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Creates a signature from a digest using the specified key.\n\nThe SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault\nsince this operation uses the private portion of the key. This operation requires the keys/sign\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for the signing operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeySignParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def sign(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    key_version: str,\n    parameters: \"_models.KeySignParameters\",\n    **kwargs\n) -\u003e \"_models.KeyOperationResult\":\n",
                    "doc": "\"\"\"Creates a signature from a digest using the specified key.\n\nThe SIGN operation is applicable to asymmetric and symmetric keys stored in Azure Key Vault\nsince this operation uses the private portion of the key. This operation requires the keys/sign\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for the signing operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeySignParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, key_version, parameters"
            },
            "verify" : {
                "sync": {
                    "signature": "def verify(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    key_version,  # type: str\n    parameters,  # type: \"_models.KeyVerifyParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Verifies a signature using a specified key.\n\nThe VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not\nstrictly necessary for asymmetric keys stored in Azure Key Vault since signature verification\ncan be performed using the public portion of the key but this operation is supported as a\nconvenience for callers that only have a key-reference and not the public portion of the key.\nThis operation requires the keys/verify permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for verify operations.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyVerifyParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyVerifyResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyVerifyResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def verify(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    key_version: str,\n    parameters: \"_models.KeyVerifyParameters\",\n    **kwargs\n) -\u003e \"_models.KeyVerifyResult\":\n",
                    "doc": "\"\"\"Verifies a signature using a specified key.\n\nThe VERIFY operation is applicable to symmetric keys stored in Azure Key Vault. VERIFY is not\nstrictly necessary for asymmetric keys stored in Azure Key Vault since signature verification\ncan be performed using the public portion of the key but this operation is supported as a\nconvenience for callers that only have a key-reference and not the public portion of the key.\nThis operation requires the keys/verify permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for verify operations.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyVerifyParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyVerifyResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyVerifyResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, key_version, parameters"
            },
            "wrap_key" : {
                "sync": {
                    "signature": "def wrap_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    key_version,  # type: str\n    parameters,  # type: \"_models.KeyOperationsParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Wraps a symmetric key using a specified key.\n\nThe WRAP operation supports encryption of a symmetric key using a key encryption key that has\npreviously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for\nsymmetric keys stored in Azure Key Vault since protection with an asymmetric key can be\nperformed using the public portion of the key. This operation is supported for asymmetric keys\nas a convenience for callers that have a key-reference but do not have access to the public key\nmaterial. This operation requires the keys/wrapKey permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for wrap operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyOperationsParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def wrap_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    key_version: str,\n    parameters: \"_models.KeyOperationsParameters\",\n    **kwargs\n) -\u003e \"_models.KeyOperationResult\":\n",
                    "doc": "\"\"\"Wraps a symmetric key using a specified key.\n\nThe WRAP operation supports encryption of a symmetric key using a key encryption key that has\npreviously been stored in an Azure Key Vault. The WRAP operation is only strictly necessary for\nsymmetric keys stored in Azure Key Vault since protection with an asymmetric key can be\nperformed using the public portion of the key. This operation is supported for asymmetric keys\nas a convenience for callers that have a key-reference but do not have access to the public key\nmaterial. This operation requires the keys/wrapKey permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for wrap operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyOperationsParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, key_version, parameters"
            },
            "unwrap_key" : {
                "sync": {
                    "signature": "def unwrap_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    key_version,  # type: str\n    parameters,  # type: \"_models.KeyOperationsParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Unwraps a symmetric key using the specified key that was initially used for wrapping that key.\n\nThe UNWRAP operation supports decryption of a symmetric key using the target key encryption\nkey. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to\nasymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of\nthe key. This operation requires the keys/unwrapKey permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for the key operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyOperationsParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def unwrap_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    key_version: str,\n    parameters: \"_models.KeyOperationsParameters\",\n    **kwargs\n) -\u003e \"_models.KeyOperationResult\":\n",
                    "doc": "\"\"\"Unwraps a symmetric key using the specified key that was initially used for wrapping that key.\n\nThe UNWRAP operation supports decryption of a symmetric key using the target key encryption\nkey. This operation is the reverse of the WRAP operation. The UNWRAP operation applies to\nasymmetric and symmetric keys stored in Azure Key Vault since it uses the private portion of\nthe key. This operation requires the keys/unwrapKey permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:param key_version: The version of the key.\n:type key_version: str\n:param parameters: The parameters for the key operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.KeyOperationsParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyOperationResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyOperationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name, key_version, parameters"
            },
            "get_deleted_keys" : {
                "sync": {
                    "signature": "def get_deleted_keys(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Lists the deleted keys in the specified vault.\n\nRetrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the\npublic part of a deleted key. This operation includes deletion-specific information. The Get\nDeleted Keys operation is applicable for vaults enabled for soft-delete. While the operation\ncan be invoked on any vault, it will return an error if invoked on a non soft-delete enabled\nvault. This operation requires the keys/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either DeletedKeyListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.DeletedKeyListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_deleted_keys(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.DeletedKeyListResult\"]:\n",
                    "doc": "\"\"\"Lists the deleted keys in the specified vault.\n\nRetrieves a list of the keys in the Key Vault as JSON Web Key structures that contain the\npublic part of a deleted key. This operation includes deletion-specific information. The Get\nDeleted Keys operation is applicable for vaults enabled for soft-delete. While the operation\ncan be invoked on any vault, it will return an error if invoked on a non soft-delete enabled\nvault. This operation requires the keys/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either DeletedKeyListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.DeletedKeyListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, maxresults"
            },
            "get_deleted_key" : {
                "sync": {
                    "signature": "def get_deleted_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the public part of a deleted key.\n\nThe Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation\ncan be invoked on any vault, it will return an error if invoked on a non soft-delete enabled\nvault. This operation requires the keys/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedKeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedKeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_deleted_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    **kwargs\n) -\u003e \"_models.DeletedKeyBundle\":\n",
                    "doc": "\"\"\"Gets the public part of a deleted key.\n\nThe Get Deleted Key operation is applicable for soft-delete enabled vaults. While the operation\ncan be invoked on any vault, it will return an error if invoked on a non soft-delete enabled\nvault. This operation requires the keys/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedKeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedKeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name"
            },
            "purge_deleted_key" : {
                "sync": {
                    "signature": "def purge_deleted_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Permanently deletes the specified key.\n\nThe Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the\noperation can be invoked on any vault, it will return an error if invoked on a non soft-delete\nenabled vault. This operation requires the keys/purge permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def purge_deleted_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    **kwargs\n) -\u003e None:\n",
                    "doc": "\"\"\"Permanently deletes the specified key.\n\nThe Purge Deleted Key operation is applicable for soft-delete enabled vaults. While the\noperation can be invoked on any vault, it will return an error if invoked on a non soft-delete\nenabled vault. This operation requires the keys/purge permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the key.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name"
            },
            "recover_deleted_key" : {
                "sync": {
                    "signature": "def recover_deleted_key(\n    self,\n    vault_base_url,  # type: str\n    key_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Recovers the deleted key to its latest version.\n\nThe Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults.\nIt recovers the deleted key back to its latest version under /keys. An attempt to recover an\nnon-deleted key will return an error. Consider this the inverse of the delete operation on\nsoft-delete enabled vaults. This operation requires the keys/recover permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the deleted key.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def recover_deleted_key(\n    self,\n    vault_base_url: str,\n    key_name: str,\n    **kwargs\n) -\u003e \"_models.KeyBundle\":\n",
                    "doc": "\"\"\"Recovers the deleted key to its latest version.\n\nThe Recover Deleted Key operation is applicable for deleted keys in soft-delete enabled vaults.\nIt recovers the deleted key back to its latest version under /keys. An attempt to recover an\nnon-deleted key will return an error. Consider this the inverse of the delete operation on\nsoft-delete enabled vaults. This operation requires the keys/recover permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param key_name: The name of the deleted key.\n:type key_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: KeyBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.KeyBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, key_name"
            },
            "set_secret" : {
                "sync": {
                    "signature": "def set_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    parameters,  # type: \"_models.SecretSetParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Sets a secret in a specified key vault.\n\nThe SET operation adds a secret to the Azure Key Vault. If the named secret already exists,\nAzure Key Vault creates a new version of that secret. This operation requires the secrets/set\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param parameters: The parameters for setting the secret.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SecretSetParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def set_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    parameters: \"_models.SecretSetParameters\",\n    **kwargs\n) -\u003e \"_models.SecretBundle\":\n",
                    "doc": "\"\"\"Sets a secret in a specified key vault.\n\nThe SET operation adds a secret to the Azure Key Vault. If the named secret already exists,\nAzure Key Vault creates a new version of that secret. This operation requires the secrets/set\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param parameters: The parameters for setting the secret.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SecretSetParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name, parameters"
            },
            "delete_secret" : {
                "sync": {
                    "signature": "def delete_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes a secret from a specified key vault.\n\nThe DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied\nto an individual version of a secret. This operation requires the secrets/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedSecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedSecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e \"_models.DeletedSecretBundle\":\n",
                    "doc": "\"\"\"Deletes a secret from a specified key vault.\n\nThe DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied\nto an individual version of a secret. This operation requires the secrets/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedSecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedSecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name"
            },
            "update_secret" : {
                "sync": {
                    "signature": "def update_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    secret_version,  # type: str\n    parameters,  # type: \"_models.SecretUpdateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Updates the attributes associated with a specified secret in a given key vault.\n\nThe UPDATE operation changes specified attributes of an existing stored secret. Attributes that\nare not specified in the request are left unchanged. The value of a secret itself cannot be\nchanged. This operation requires the secrets/set permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param secret_version: The version of the secret.\n:type secret_version: str\n:param parameters: The parameters for update secret operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SecretUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def update_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    secret_version: str,\n    parameters: \"_models.SecretUpdateParameters\",\n    **kwargs\n) -\u003e \"_models.SecretBundle\":\n",
                    "doc": "\"\"\"Updates the attributes associated with a specified secret in a given key vault.\n\nThe UPDATE operation changes specified attributes of an existing stored secret. Attributes that\nare not specified in the request are left unchanged. The value of a secret itself cannot be\nchanged. This operation requires the secrets/set permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param secret_version: The version of the secret.\n:type secret_version: str\n:param parameters: The parameters for update secret operation.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SecretUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name, secret_version, parameters"
            },
            "get_secret" : {
                "sync": {
                    "signature": "def get_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    secret_version,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Get a specified secret from a given key vault.\n\nThe GET operation is applicable to any secret stored in Azure Key Vault. This operation\nrequires the secrets/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param secret_version: The version of the secret.\n:type secret_version: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    secret_version: str,\n    **kwargs\n) -\u003e \"_models.SecretBundle\":\n",
                    "doc": "\"\"\"Get a specified secret from a given key vault.\n\nThe GET operation is applicable to any secret stored in Azure Key Vault. This operation\nrequires the secrets/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param secret_version: The version of the secret.\n:type secret_version: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name, secret_version"
            },
            "get_secrets" : {
                "sync": {
                    "signature": "def get_secrets(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"List secrets in a specified key vault.\n\nThe Get Secrets operation is applicable to the entire vault. However, only the base secret\nidentifier and its attributes are provided in the response. Individual secret versions are not\nlisted in the response. This operation requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified, the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SecretListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.SecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_secrets(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.SecretListResult\"]:\n",
                    "doc": "\"\"\"List secrets in a specified key vault.\n\nThe Get Secrets operation is applicable to the entire vault. However, only the base secret\nidentifier and its attributes are provided in the response. Individual secret versions are not\nlisted in the response. This operation requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified, the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SecretListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.SecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, maxresults"
            },
            "get_secret_versions" : {
                "sync": {
                    "signature": "def get_secret_versions(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"List all versions of the specified secret.\n\nThe full secret identifier and attributes are provided in the response. No values are returned\nfor the secrets. This operations requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified, the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SecretListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.SecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_secret_versions(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.SecretListResult\"]:\n",
                    "doc": "\"\"\"List all versions of the specified secret.\n\nThe full secret identifier and attributes are provided in the response. No values are returned\nfor the secrets. This operations requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified, the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SecretListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.SecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name, maxresults"
            },
            "get_deleted_secrets" : {
                "sync": {
                    "signature": "def get_deleted_secrets(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Lists deleted secrets for the specified vault.\n\nThe Get Deleted Secrets operation returns the secrets that have been deleted for a vault\nenabled for soft-delete. This operation requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either DeletedSecretListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.DeletedSecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_deleted_secrets(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.DeletedSecretListResult\"]:\n",
                    "doc": "\"\"\"Lists deleted secrets for the specified vault.\n\nThe Get Deleted Secrets operation returns the secrets that have been deleted for a vault\nenabled for soft-delete. This operation requires the secrets/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either DeletedSecretListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.DeletedSecretListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, maxresults"
            },
            "get_deleted_secret" : {
                "sync": {
                    "signature": "def get_deleted_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the specified deleted secret.\n\nThe Get Deleted Secret operation returns the specified deleted secret along with its\nattributes. This operation requires the secrets/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedSecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedSecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_deleted_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e \"_models.DeletedSecretBundle\":\n",
                    "doc": "\"\"\"Gets the specified deleted secret.\n\nThe Get Deleted Secret operation returns the specified deleted secret along with its\nattributes. This operation requires the secrets/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedSecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedSecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name"
            },
            "purge_deleted_secret" : {
                "sync": {
                    "signature": "def purge_deleted_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Permanently deletes the specified secret.\n\nThe purge deleted secret operation removes the secret permanently, without the possibility of\nrecovery. This operation can only be enabled on a soft-delete enabled vault. This operation\nrequires the secrets/purge permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def purge_deleted_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e None:\n",
                    "doc": "\"\"\"Permanently deletes the specified secret.\n\nThe purge deleted secret operation removes the secret permanently, without the possibility of\nrecovery. This operation can only be enabled on a soft-delete enabled vault. This operation\nrequires the secrets/purge permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name"
            },
            "recover_deleted_secret" : {
                "sync": {
                    "signature": "def recover_deleted_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Recovers the deleted secret to the latest version.\n\nRecovers the deleted secret in the specified vault. This operation can only be performed on a\nsoft-delete enabled vault. This operation requires the secrets/recover permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the deleted secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def recover_deleted_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e \"_models.SecretBundle\":\n",
                    "doc": "\"\"\"Recovers the deleted secret to the latest version.\n\nRecovers the deleted secret in the specified vault. This operation can only be performed on a\nsoft-delete enabled vault. This operation requires the secrets/recover permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the deleted secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name"
            },
            "backup_secret" : {
                "sync": {
                    "signature": "def backup_secret(\n    self,\n    vault_base_url,  # type: str\n    secret_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Backs up the specified secret.\n\nRequests that a backup of the specified secret be downloaded to the client. All versions of the\nsecret will be downloaded. This operation requires the secrets/backup permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: BackupSecretResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.BackupSecretResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def backup_secret(\n    self,\n    vault_base_url: str,\n    secret_name: str,\n    **kwargs\n) -\u003e \"_models.BackupSecretResult\":\n",
                    "doc": "\"\"\"Backs up the specified secret.\n\nRequests that a backup of the specified secret be downloaded to the client. All versions of the\nsecret will be downloaded. This operation requires the secrets/backup permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param secret_name: The name of the secret.\n:type secret_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: BackupSecretResult, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.BackupSecretResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, secret_name"
            },
            "restore_secret" : {
                "sync": {
                    "signature": "def restore_secret(\n    self,\n    vault_base_url,  # type: str\n    parameters,  # type: \"_models.SecretRestoreParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Restores a backed up secret to a vault.\n\nRestores a backed up secret, and all its versions, to a vault. This operation requires the\nsecrets/restore permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param parameters: The parameters to restore the secret.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SecretRestoreParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def restore_secret(\n    self,\n    vault_base_url: str,\n    parameters: \"_models.SecretRestoreParameters\",\n    **kwargs\n) -\u003e \"_models.SecretBundle\":\n",
                    "doc": "\"\"\"Restores a backed up secret to a vault.\n\nRestores a backed up secret, and all its versions, to a vault. This operation requires the\nsecrets/restore permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param parameters: The parameters to restore the secret.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SecretRestoreParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SecretBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SecretBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, parameters"
            },
            "get_certificates" : {
                "sync": {
                    "signature": "def get_certificates(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"List certificates in a specified key vault.\n\nThe GetCertificates operation returns the set of certificates resources in the specified key\nvault. This operation requires the certificates/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either CertificateListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.CertificateListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_certificates(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.CertificateListResult\"]:\n",
                    "doc": "\"\"\"List certificates in a specified key vault.\n\nThe GetCertificates operation returns the set of certificates resources in the specified key\nvault. This operation requires the certificates/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either CertificateListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.CertificateListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, maxresults"
            },
            "delete_certificate" : {
                "sync": {
                    "signature": "def delete_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes a certificate from a specified key vault.\n\nDeletes all versions of a certificate object along with its associated policy. Delete\ncertificate cannot be used to remove individual versions of a certificate object. This\noperation requires the certificates/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedCertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedCertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    **kwargs\n) -\u003e \"_models.DeletedCertificateBundle\":\n",
                    "doc": "\"\"\"Deletes a certificate from a specified key vault.\n\nDeletes all versions of a certificate object along with its associated policy. Delete\ncertificate cannot be used to remove individual versions of a certificate object. This\noperation requires the certificates/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedCertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedCertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name"
            },
            "set_certificate_contacts" : {
                "sync": {
                    "signature": "def set_certificate_contacts(\n    self,\n    vault_base_url,  # type: str\n    contacts,  # type: \"_models.Contacts\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Sets the certificate contacts for the specified key vault.\n\nSets the certificate contacts for the specified key vault. This operation requires the\ncertificates/managecontacts permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param contacts: The contacts for the key vault certificate.\n:type contacts: ~azure.keyvault.v2016_10_01.models.Contacts\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Contacts, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.Contacts\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def set_certificate_contacts(\n    self,\n    vault_base_url: str,\n    contacts: \"_models.Contacts\",\n    **kwargs\n) -\u003e \"_models.Contacts\":\n",
                    "doc": "\"\"\"Sets the certificate contacts for the specified key vault.\n\nSets the certificate contacts for the specified key vault. This operation requires the\ncertificates/managecontacts permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param contacts: The contacts for the key vault certificate.\n:type contacts: ~azure.keyvault.v2016_10_01.models.Contacts\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Contacts, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.Contacts\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, contacts"
            },
            "get_certificate_contacts" : {
                "sync": {
                    "signature": "def get_certificate_contacts(\n    self,\n    vault_base_url,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Lists the certificate contacts for a specified key vault.\n\nThe GetCertificateContacts operation returns the set of certificate contact resources in the\nspecified key vault. This operation requires the certificates/managecontacts permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Contacts, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.Contacts\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_certificate_contacts(\n    self,\n    vault_base_url: str,\n    **kwargs\n) -\u003e \"_models.Contacts\":\n",
                    "doc": "\"\"\"Lists the certificate contacts for a specified key vault.\n\nThe GetCertificateContacts operation returns the set of certificate contact resources in the\nspecified key vault. This operation requires the certificates/managecontacts permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Contacts, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.Contacts\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url"
            },
            "delete_certificate_contacts" : {
                "sync": {
                    "signature": "def delete_certificate_contacts(\n    self,\n    vault_base_url,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes the certificate contacts for a specified key vault.\n\nDeletes the certificate contacts for a specified key vault certificate. This operation requires\nthe certificates/managecontacts permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Contacts, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.Contacts\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_certificate_contacts(\n    self,\n    vault_base_url: str,\n    **kwargs\n) -\u003e \"_models.Contacts\":\n",
                    "doc": "\"\"\"Deletes the certificate contacts for a specified key vault.\n\nDeletes the certificate contacts for a specified key vault certificate. This operation requires\nthe certificates/managecontacts permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Contacts, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.Contacts\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url"
            },
            "get_certificate_issuers" : {
                "sync": {
                    "signature": "def get_certificate_issuers(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"List certificate issuers for a specified key vault.\n\nThe GetCertificateIssuers operation returns the set of certificate issuer resources in the\nspecified key vault. This operation requires the certificates/manageissuers/getissuers\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either CertificateIssuerListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.CertificateIssuerListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_certificate_issuers(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.CertificateIssuerListResult\"]:\n",
                    "doc": "\"\"\"List certificate issuers for a specified key vault.\n\nThe GetCertificateIssuers operation returns the set of certificate issuer resources in the\nspecified key vault. This operation requires the certificates/manageissuers/getissuers\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either CertificateIssuerListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.CertificateIssuerListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, maxresults"
            },
            "set_certificate_issuer" : {
                "sync": {
                    "signature": "def set_certificate_issuer(\n    self,\n    vault_base_url,  # type: str\n    issuer_name,  # type: str\n    parameter,  # type: \"_models.CertificateIssuerSetParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Sets the specified certificate issuer.\n\nThe SetCertificateIssuer operation adds or updates the specified certificate issuer. This\noperation requires the certificates/setissuers permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param issuer_name: The name of the issuer.\n:type issuer_name: str\n:param parameter: Certificate issuer set parameter.\n:type parameter: ~azure.keyvault.v2016_10_01.models.CertificateIssuerSetParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IssuerBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.IssuerBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def set_certificate_issuer(\n    self,\n    vault_base_url: str,\n    issuer_name: str,\n    parameter: \"_models.CertificateIssuerSetParameters\",\n    **kwargs\n) -\u003e \"_models.IssuerBundle\":\n",
                    "doc": "\"\"\"Sets the specified certificate issuer.\n\nThe SetCertificateIssuer operation adds or updates the specified certificate issuer. This\noperation requires the certificates/setissuers permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param issuer_name: The name of the issuer.\n:type issuer_name: str\n:param parameter: Certificate issuer set parameter.\n:type parameter: ~azure.keyvault.v2016_10_01.models.CertificateIssuerSetParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IssuerBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.IssuerBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, issuer_name, parameter"
            },
            "update_certificate_issuer" : {
                "sync": {
                    "signature": "def update_certificate_issuer(\n    self,\n    vault_base_url,  # type: str\n    issuer_name,  # type: str\n    parameter,  # type: \"_models.CertificateIssuerUpdateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Updates the specified certificate issuer.\n\nThe UpdateCertificateIssuer operation performs an update on the specified certificate issuer\nentity. This operation requires the certificates/setissuers permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param issuer_name: The name of the issuer.\n:type issuer_name: str\n:param parameter: Certificate issuer update parameter.\n:type parameter: ~azure.keyvault.v2016_10_01.models.CertificateIssuerUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IssuerBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.IssuerBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def update_certificate_issuer(\n    self,\n    vault_base_url: str,\n    issuer_name: str,\n    parameter: \"_models.CertificateIssuerUpdateParameters\",\n    **kwargs\n) -\u003e \"_models.IssuerBundle\":\n",
                    "doc": "\"\"\"Updates the specified certificate issuer.\n\nThe UpdateCertificateIssuer operation performs an update on the specified certificate issuer\nentity. This operation requires the certificates/setissuers permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param issuer_name: The name of the issuer.\n:type issuer_name: str\n:param parameter: Certificate issuer update parameter.\n:type parameter: ~azure.keyvault.v2016_10_01.models.CertificateIssuerUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IssuerBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.IssuerBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, issuer_name, parameter"
            },
            "get_certificate_issuer" : {
                "sync": {
                    "signature": "def get_certificate_issuer(\n    self,\n    vault_base_url,  # type: str\n    issuer_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Lists the specified certificate issuer.\n\nThe GetCertificateIssuer operation returns the specified certificate issuer resources in the\nspecified key vault. This operation requires the certificates/manageissuers/getissuers\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param issuer_name: The name of the issuer.\n:type issuer_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IssuerBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.IssuerBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_certificate_issuer(\n    self,\n    vault_base_url: str,\n    issuer_name: str,\n    **kwargs\n) -\u003e \"_models.IssuerBundle\":\n",
                    "doc": "\"\"\"Lists the specified certificate issuer.\n\nThe GetCertificateIssuer operation returns the specified certificate issuer resources in the\nspecified key vault. This operation requires the certificates/manageissuers/getissuers\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param issuer_name: The name of the issuer.\n:type issuer_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IssuerBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.IssuerBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, issuer_name"
            },
            "delete_certificate_issuer" : {
                "sync": {
                    "signature": "def delete_certificate_issuer(\n    self,\n    vault_base_url,  # type: str\n    issuer_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes the specified certificate issuer.\n\nThe DeleteCertificateIssuer operation permanently removes the specified certificate issuer from\nthe vault. This operation requires the certificates/manageissuers/deleteissuers permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param issuer_name: The name of the issuer.\n:type issuer_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IssuerBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.IssuerBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_certificate_issuer(\n    self,\n    vault_base_url: str,\n    issuer_name: str,\n    **kwargs\n) -\u003e \"_models.IssuerBundle\":\n",
                    "doc": "\"\"\"Deletes the specified certificate issuer.\n\nThe DeleteCertificateIssuer operation permanently removes the specified certificate issuer from\nthe vault. This operation requires the certificates/manageissuers/deleteissuers permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param issuer_name: The name of the issuer.\n:type issuer_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IssuerBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.IssuerBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, issuer_name"
            },
            "create_certificate" : {
                "sync": {
                    "signature": "def create_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    parameters,  # type: \"_models.CertificateCreateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Creates a new certificate.\n\nIf this is the first version, the certificate resource is created. This operation requires the\ncertificates/create permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param parameters: The parameters to create a certificate.\n:type parameters: ~azure.keyvault.v2016_10_01.models.CertificateCreateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateOperation, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateOperation\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def create_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    parameters: \"_models.CertificateCreateParameters\",\n    **kwargs\n) -\u003e \"_models.CertificateOperation\":\n",
                    "doc": "\"\"\"Creates a new certificate.\n\nIf this is the first version, the certificate resource is created. This operation requires the\ncertificates/create permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param parameters: The parameters to create a certificate.\n:type parameters: ~azure.keyvault.v2016_10_01.models.CertificateCreateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateOperation, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateOperation\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name, parameters"
            },
            "import_certificate" : {
                "sync": {
                    "signature": "def import_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    parameters,  # type: \"_models.CertificateImportParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Imports a certificate into a specified key vault.\n\nImports an existing valid certificate, containing a private key, into Azure Key Vault. The\ncertificate to be imported can be in either PFX or PEM format. If the certificate is in PEM\nformat the PEM file must contain the key as well as x509 certificates. This operation requires\nthe certificates/import permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param parameters: The parameters to import the certificate.\n:type parameters: ~azure.keyvault.v2016_10_01.models.CertificateImportParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def import_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    parameters: \"_models.CertificateImportParameters\",\n    **kwargs\n) -\u003e \"_models.CertificateBundle\":\n",
                    "doc": "\"\"\"Imports a certificate into a specified key vault.\n\nImports an existing valid certificate, containing a private key, into Azure Key Vault. The\ncertificate to be imported can be in either PFX or PEM format. If the certificate is in PEM\nformat the PEM file must contain the key as well as x509 certificates. This operation requires\nthe certificates/import permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param parameters: The parameters to import the certificate.\n:type parameters: ~azure.keyvault.v2016_10_01.models.CertificateImportParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name, parameters"
            },
            "get_certificate_versions" : {
                "sync": {
                    "signature": "def get_certificate_versions(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"List the versions of a certificate.\n\nThe GetCertificateVersions operation returns the versions of a certificate in the specified key\nvault. This operation requires the certificates/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either CertificateListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.CertificateListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_certificate_versions(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.CertificateListResult\"]:\n",
                    "doc": "\"\"\"List the versions of a certificate.\n\nThe GetCertificateVersions operation returns the versions of a certificate in the specified key\nvault. This operation requires the certificates/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either CertificateListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.CertificateListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name, maxresults"
            },
            "get_certificate_policy" : {
                "sync": {
                    "signature": "def get_certificate_policy(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Lists the policy for a certificate.\n\nThe GetCertificatePolicy operation returns the specified certificate policy resources in the\nspecified key vault. This operation requires the certificates/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate in a given key vault.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificatePolicy, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificatePolicy\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_certificate_policy(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    **kwargs\n) -\u003e \"_models.CertificatePolicy\":\n",
                    "doc": "\"\"\"Lists the policy for a certificate.\n\nThe GetCertificatePolicy operation returns the specified certificate policy resources in the\nspecified key vault. This operation requires the certificates/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate in a given key vault.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificatePolicy, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificatePolicy\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name"
            },
            "update_certificate_policy" : {
                "sync": {
                    "signature": "def update_certificate_policy(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    certificate_policy,  # type: \"_models.CertificatePolicy\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Updates the policy for a certificate.\n\nSet specified members in the certificate policy. Leave others as null. This operation requires\nthe certificates/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate in the given vault.\n:type certificate_name: str\n:param certificate_policy: The policy for the certificate.\n:type certificate_policy: ~azure.keyvault.v2016_10_01.models.CertificatePolicy\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificatePolicy, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificatePolicy\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def update_certificate_policy(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    certificate_policy: \"_models.CertificatePolicy\",\n    **kwargs\n) -\u003e \"_models.CertificatePolicy\":\n",
                    "doc": "\"\"\"Updates the policy for a certificate.\n\nSet specified members in the certificate policy. Leave others as null. This operation requires\nthe certificates/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate in the given vault.\n:type certificate_name: str\n:param certificate_policy: The policy for the certificate.\n:type certificate_policy: ~azure.keyvault.v2016_10_01.models.CertificatePolicy\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificatePolicy, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificatePolicy\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name, certificate_policy"
            },
            "update_certificate" : {
                "sync": {
                    "signature": "def update_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    certificate_version,  # type: str\n    parameters,  # type: \"_models.CertificateUpdateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Updates the specified attributes associated with the given certificate.\n\nThe UpdateCertificate operation applies the specified update on the given certificate; the only\nelements updated are the certificate\u0027s attributes. This operation requires the\ncertificates/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate in the given key vault.\n:type certificate_name: str\n:param certificate_version: The version of the certificate.\n:type certificate_version: str\n:param parameters: The parameters for certificate update.\n:type parameters: ~azure.keyvault.v2016_10_01.models.CertificateUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def update_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    certificate_version: str,\n    parameters: \"_models.CertificateUpdateParameters\",\n    **kwargs\n) -\u003e \"_models.CertificateBundle\":\n",
                    "doc": "\"\"\"Updates the specified attributes associated with the given certificate.\n\nThe UpdateCertificate operation applies the specified update on the given certificate; the only\nelements updated are the certificate\u0027s attributes. This operation requires the\ncertificates/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate in the given key vault.\n:type certificate_name: str\n:param certificate_version: The version of the certificate.\n:type certificate_version: str\n:param parameters: The parameters for certificate update.\n:type parameters: ~azure.keyvault.v2016_10_01.models.CertificateUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name, certificate_version, parameters"
            },
            "get_certificate" : {
                "sync": {
                    "signature": "def get_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    certificate_version,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets information about a certificate.\n\nGets information about a specific certificate. This operation requires the certificates/get\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate in the given vault.\n:type certificate_name: str\n:param certificate_version: The version of the certificate.\n:type certificate_version: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    certificate_version: str,\n    **kwargs\n) -\u003e \"_models.CertificateBundle\":\n",
                    "doc": "\"\"\"Gets information about a certificate.\n\nGets information about a specific certificate. This operation requires the certificates/get\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate in the given vault.\n:type certificate_name: str\n:param certificate_version: The version of the certificate.\n:type certificate_version: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name, certificate_version"
            },
            "update_certificate_operation" : {
                "sync": {
                    "signature": "def update_certificate_operation(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    certificate_operation,  # type: \"_models.CertificateOperationUpdateParameter\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Updates a certificate operation.\n\nUpdates a certificate creation operation that is already in progress. This operation requires\nthe certificates/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param certificate_operation: The certificate operation response.\n:type certificate_operation: ~azure.keyvault.v2016_10_01.models.CertificateOperationUpdateParameter\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateOperation, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateOperation\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def update_certificate_operation(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    certificate_operation: \"_models.CertificateOperationUpdateParameter\",\n    **kwargs\n) -\u003e \"_models.CertificateOperation\":\n",
                    "doc": "\"\"\"Updates a certificate operation.\n\nUpdates a certificate creation operation that is already in progress. This operation requires\nthe certificates/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param certificate_operation: The certificate operation response.\n:type certificate_operation: ~azure.keyvault.v2016_10_01.models.CertificateOperationUpdateParameter\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateOperation, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateOperation\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name, certificate_operation"
            },
            "get_certificate_operation" : {
                "sync": {
                    "signature": "def get_certificate_operation(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the creation operation of a certificate.\n\nGets the creation operation associated with a specified certificate. This operation requires\nthe certificates/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateOperation, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateOperation\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_certificate_operation(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    **kwargs\n) -\u003e \"_models.CertificateOperation\":\n",
                    "doc": "\"\"\"Gets the creation operation of a certificate.\n\nGets the creation operation associated with a specified certificate. This operation requires\nthe certificates/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateOperation, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateOperation\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name"
            },
            "delete_certificate_operation" : {
                "sync": {
                    "signature": "def delete_certificate_operation(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes the creation operation for a specific certificate.\n\nDeletes the creation operation for a specified certificate that is in the process of being\ncreated. The certificate is no longer created. This operation requires the certificates/update\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateOperation, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateOperation\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_certificate_operation(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    **kwargs\n) -\u003e \"_models.CertificateOperation\":\n",
                    "doc": "\"\"\"Deletes the creation operation for a specific certificate.\n\nDeletes the creation operation for a specified certificate that is in the process of being\ncreated. The certificate is no longer created. This operation requires the certificates/update\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateOperation, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateOperation\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name"
            },
            "merge_certificate" : {
                "sync": {
                    "signature": "def merge_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    parameters,  # type: \"_models.CertificateMergeParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Merges a certificate or a certificate chain with a key pair existing on the server.\n\nThe MergeCertificate operation performs the merging of a certificate or certificate chain with\na key pair currently available in the service. This operation requires the certificates/create\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param parameters: The parameters to merge certificate.\n:type parameters: ~azure.keyvault.v2016_10_01.models.CertificateMergeParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def merge_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    parameters: \"_models.CertificateMergeParameters\",\n    **kwargs\n) -\u003e \"_models.CertificateBundle\":\n",
                    "doc": "\"\"\"Merges a certificate or a certificate chain with a key pair existing on the server.\n\nThe MergeCertificate operation performs the merging of a certificate or certificate chain with\na key pair currently available in the service. This operation requires the certificates/create\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:param parameters: The parameters to merge certificate.\n:type parameters: ~azure.keyvault.v2016_10_01.models.CertificateMergeParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name, parameters"
            },
            "get_deleted_certificates" : {
                "sync": {
                    "signature": "def get_deleted_certificates(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Lists the deleted certificates in the specified vault currently available for recovery.\n\nThe GetDeletedCertificates operation retrieves the certificates in the current vault which are\nin a deleted state and ready for recovery or purging. This operation includes deletion-specific\ninformation. This operation requires the certificates/get/list permission. This operation can\nonly be enabled on soft-delete enabled vaults.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either DeletedCertificateListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.DeletedCertificateListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_deleted_certificates(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.DeletedCertificateListResult\"]:\n",
                    "doc": "\"\"\"Lists the deleted certificates in the specified vault currently available for recovery.\n\nThe GetDeletedCertificates operation retrieves the certificates in the current vault which are\nin a deleted state and ready for recovery or purging. This operation includes deletion-specific\ninformation. This operation requires the certificates/get/list permission. This operation can\nonly be enabled on soft-delete enabled vaults.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either DeletedCertificateListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.DeletedCertificateListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, maxresults"
            },
            "get_deleted_certificate" : {
                "sync": {
                    "signature": "def get_deleted_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Retrieves information about the specified deleted certificate.\n\nThe GetDeletedCertificate operation retrieves the deleted certificate information plus its\nattributes, such as retention interval, scheduled permanent deletion and the current deletion\nrecovery level. This operation requires the certificates/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedCertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedCertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_deleted_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    **kwargs\n) -\u003e \"_models.DeletedCertificateBundle\":\n",
                    "doc": "\"\"\"Retrieves information about the specified deleted certificate.\n\nThe GetDeletedCertificate operation retrieves the deleted certificate information plus its\nattributes, such as retention interval, scheduled permanent deletion and the current deletion\nrecovery level. This operation requires the certificates/get permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DeletedCertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.DeletedCertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name"
            },
            "purge_deleted_certificate" : {
                "sync": {
                    "signature": "def purge_deleted_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Permanently deletes the specified deleted certificate.\n\nThe PurgeDeletedCertificate operation performs an irreversible deletion of the specified\ncertificate, without possibility for recovery. The operation is not available if the recovery\nlevel does not specify \u0027Purgeable\u0027. This operation requires the certificate/purge permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def purge_deleted_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    **kwargs\n) -\u003e None:\n",
                    "doc": "\"\"\"Permanently deletes the specified deleted certificate.\n\nThe PurgeDeletedCertificate operation performs an irreversible deletion of the specified\ncertificate, without possibility for recovery. The operation is not available if the recovery\nlevel does not specify \u0027Purgeable\u0027. This operation requires the certificate/purge permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name"
            },
            "recover_deleted_certificate" : {
                "sync": {
                    "signature": "def recover_deleted_certificate(\n    self,\n    vault_base_url,  # type: str\n    certificate_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Recovers the deleted certificate back to its current version under /certificates.\n\nThe RecoverDeletedCertificate operation performs the reversal of the Delete operation. The\noperation is applicable in vaults enabled for soft-delete, and must be issued during the\nretention interval (available in the deleted certificate\u0027s attributes). This operation requires\nthe certificates/recover permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the deleted certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def recover_deleted_certificate(\n    self,\n    vault_base_url: str,\n    certificate_name: str,\n    **kwargs\n) -\u003e \"_models.CertificateBundle\":\n",
                    "doc": "\"\"\"Recovers the deleted certificate back to its current version under /certificates.\n\nThe RecoverDeletedCertificate operation performs the reversal of the Delete operation. The\noperation is applicable in vaults enabled for soft-delete, and must be issued during the\nretention interval (available in the deleted certificate\u0027s attributes). This operation requires\nthe certificates/recover permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param certificate_name: The name of the deleted certificate.\n:type certificate_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CertificateBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.CertificateBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, certificate_name"
            },
            "get_storage_accounts" : {
                "sync": {
                    "signature": "def get_storage_accounts(\n    self,\n    vault_base_url,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"List storage accounts managed by the specified key vault. This operation requires the\nstorage/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either StorageListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.StorageListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_storage_accounts(\n    self,\n    vault_base_url: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.StorageListResult\"]:\n",
                    "doc": "\"\"\"List storage accounts managed by the specified key vault. This operation requires the\nstorage/list permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either StorageListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.StorageListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, maxresults"
            },
            "delete_storage_account" : {
                "sync": {
                    "signature": "def delete_storage_account(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes a storage account. This operation requires the storage/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_storage_account(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    **kwargs\n) -\u003e \"_models.StorageBundle\":\n",
                    "doc": "\"\"\"Deletes a storage account. This operation requires the storage/delete permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name"
            },
            "get_storage_account" : {
                "sync": {
                    "signature": "def get_storage_account(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets information about a specified storage account. This operation requires the storage/get\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_storage_account(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    **kwargs\n) -\u003e \"_models.StorageBundle\":\n",
                    "doc": "\"\"\"Gets information about a specified storage account. This operation requires the storage/get\npermission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name"
            },
            "set_storage_account" : {
                "sync": {
                    "signature": "def set_storage_account(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    parameters,  # type: \"_models.StorageAccountCreateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Creates or updates a new storage account. This operation requires the storage/set permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param parameters: The parameters to create a storage account.\n:type parameters: ~azure.keyvault.v2016_10_01.models.StorageAccountCreateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def set_storage_account(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    parameters: \"_models.StorageAccountCreateParameters\",\n    **kwargs\n) -\u003e \"_models.StorageBundle\":\n",
                    "doc": "\"\"\"Creates or updates a new storage account. This operation requires the storage/set permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param parameters: The parameters to create a storage account.\n:type parameters: ~azure.keyvault.v2016_10_01.models.StorageAccountCreateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name, parameters"
            },
            "update_storage_account" : {
                "sync": {
                    "signature": "def update_storage_account(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    parameters,  # type: \"_models.StorageAccountUpdateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Updates the specified attributes associated with the given storage account. This operation\nrequires the storage/set/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param parameters: The parameters to update a storage account.\n:type parameters: ~azure.keyvault.v2016_10_01.models.StorageAccountUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def update_storage_account(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    parameters: \"_models.StorageAccountUpdateParameters\",\n    **kwargs\n) -\u003e \"_models.StorageBundle\":\n",
                    "doc": "\"\"\"Updates the specified attributes associated with the given storage account. This operation\nrequires the storage/set/update permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param parameters: The parameters to update a storage account.\n:type parameters: ~azure.keyvault.v2016_10_01.models.StorageAccountUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name, parameters"
            },
            "regenerate_storage_account_key" : {
                "sync": {
                    "signature": "def regenerate_storage_account_key(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    parameters,  # type: \"_models.StorageAccountRegenerteKeyParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Regenerates the specified key value for the given storage account. This operation requires the\nstorage/regeneratekey permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param parameters: The parameters to regenerate storage account key.\n:type parameters: ~azure.keyvault.v2016_10_01.models.StorageAccountRegenerteKeyParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def regenerate_storage_account_key(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    parameters: \"_models.StorageAccountRegenerteKeyParameters\",\n    **kwargs\n) -\u003e \"_models.StorageBundle\":\n",
                    "doc": "\"\"\"Regenerates the specified key value for the given storage account. This operation requires the\nstorage/regeneratekey permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param parameters: The parameters to regenerate storage account key.\n:type parameters: ~azure.keyvault.v2016_10_01.models.StorageAccountRegenerteKeyParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: StorageBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.StorageBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name, parameters"
            },
            "get_sas_definitions" : {
                "sync": {
                    "signature": "def get_sas_definitions(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    maxresults=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"List storage SAS definitions for the given storage account. This operation requires the\nstorage/listsas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SasDefinitionListResult or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.keyvault.v2016_10_01.models.SasDefinitionListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_sas_definitions(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    maxresults: Optional[int] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.SasDefinitionListResult\"]:\n",
                    "doc": "\"\"\"List storage SAS definitions for the given storage account. This operation requires the\nstorage/listsas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param maxresults: Maximum number of results to return in a page. If not specified the service\n will return up to 25 results.\n:type maxresults: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either SasDefinitionListResult or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.keyvault.v2016_10_01.models.SasDefinitionListResult]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name, maxresults"
            },
            "delete_sas_definition" : {
                "sync": {
                    "signature": "def delete_sas_definition(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    sas_definition_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes a SAS definition from a specified storage account. This operation requires the\nstorage/deletesas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param sas_definition_name: The name of the SAS definition.\n:type sas_definition_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SasDefinitionBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SasDefinitionBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_sas_definition(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    sas_definition_name: str,\n    **kwargs\n) -\u003e \"_models.SasDefinitionBundle\":\n",
                    "doc": "\"\"\"Deletes a SAS definition from a specified storage account. This operation requires the\nstorage/deletesas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param sas_definition_name: The name of the SAS definition.\n:type sas_definition_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SasDefinitionBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SasDefinitionBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name, sas_definition_name"
            },
            "get_sas_definition" : {
                "sync": {
                    "signature": "def get_sas_definition(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    sas_definition_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets information about a SAS definition for the specified storage account. This operation\nrequires the storage/getsas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param sas_definition_name: The name of the SAS definition.\n:type sas_definition_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SasDefinitionBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SasDefinitionBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_sas_definition(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    sas_definition_name: str,\n    **kwargs\n) -\u003e \"_models.SasDefinitionBundle\":\n",
                    "doc": "\"\"\"Gets information about a SAS definition for the specified storage account. This operation\nrequires the storage/getsas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param sas_definition_name: The name of the SAS definition.\n:type sas_definition_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SasDefinitionBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SasDefinitionBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name, sas_definition_name"
            },
            "set_sas_definition" : {
                "sync": {
                    "signature": "def set_sas_definition(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    sas_definition_name,  # type: str\n    parameters,  # type: \"_models.SasDefinitionCreateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Creates or updates a new SAS definition for the specified storage account. This operation\nrequires the storage/setsas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param sas_definition_name: The name of the SAS definition.\n:type sas_definition_name: str\n:param parameters: The parameters to create a SAS definition.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SasDefinitionCreateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SasDefinitionBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SasDefinitionBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def set_sas_definition(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    sas_definition_name: str,\n    parameters: \"_models.SasDefinitionCreateParameters\",\n    **kwargs\n) -\u003e \"_models.SasDefinitionBundle\":\n",
                    "doc": "\"\"\"Creates or updates a new SAS definition for the specified storage account. This operation\nrequires the storage/setsas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param sas_definition_name: The name of the SAS definition.\n:type sas_definition_name: str\n:param parameters: The parameters to create a SAS definition.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SasDefinitionCreateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SasDefinitionBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SasDefinitionBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name, sas_definition_name, parameters"
            },
            "update_sas_definition" : {
                "sync": {
                    "signature": "def update_sas_definition(\n    self,\n    vault_base_url,  # type: str\n    storage_account_name,  # type: str\n    sas_definition_name,  # type: str\n    parameters,  # type: \"_models.SasDefinitionUpdateParameters\"\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Updates the specified attributes associated with the given SAS definition. This operation\nrequires the storage/setsas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param sas_definition_name: The name of the SAS definition.\n:type sas_definition_name: str\n:param parameters: The parameters to update a SAS definition.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SasDefinitionUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SasDefinitionBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SasDefinitionBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def update_sas_definition(\n    self,\n    vault_base_url: str,\n    storage_account_name: str,\n    sas_definition_name: str,\n    parameters: \"_models.SasDefinitionUpdateParameters\",\n    **kwargs\n) -\u003e \"_models.SasDefinitionBundle\":\n",
                    "doc": "\"\"\"Updates the specified attributes associated with the given SAS definition. This operation\nrequires the storage/setsas permission.\n\n:param vault_base_url: The vault name, for example https://myvault.vault.azure.net.\n:type vault_base_url: str\n:param storage_account_name: The name of the storage account.\n:type storage_account_name: str\n:param sas_definition_name: The name of the SAS definition.\n:type sas_definition_name: str\n:param parameters: The parameters to update a SAS definition.\n:type parameters: ~azure.keyvault.v2016_10_01.models.SasDefinitionUpdateParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SasDefinitionBundle, or the result of cls(response)\n:rtype: ~azure.keyvault.v2016_10_01.models.SasDefinitionBundle\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "vault_base_url, storage_account_name, sas_definition_name, parameters"
            }
        }
    }
}