# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.storagemover.aio import StorageMoverMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestStorageMoverMgmtJobDefinitionsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(StorageMoverMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_job_definitions_get(self, resource_group):
        response = await self.client.job_definitions.get(
            resource_group_name=resource_group.name,
            storage_mover_name="str",
            project_name="str",
            job_definition_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_job_definitions_create_or_update(self, resource_group):
        response = await self.client.job_definitions.create_or_update(
            resource_group_name=resource_group.name,
            storage_mover_name="str",
            project_name="str",
            job_definition_name="str",
            job_definition={
                "properties": {
                    "copyMode": "str",
                    "sourceName": "str",
                    "targetName": "str",
                    "agentName": "str",
                    "agentResourceId": "str",
                    "description": "str",
                    "jobType": "str",
                    "latestJobRunName": "str",
                    "latestJobRunResourceId": "str",
                    "latestJobRunStatus": "str",
                    "provisioningState": "str",
                    "sourceResourceId": "str",
                    "sourceSubpath": "str",
                    "sourceTargetMap": {
                        "value": [
                            {
                                "sourceEndpoint": {
                                    "properties": {
                                        "awsS3BucketId": "str",
                                        "name": "str",
                                        "sourceEndpointResourceId": "str",
                                    }
                                },
                                "targetEndpoint": {
                                    "properties": {
                                        "azureStorageAccountResourceId": "str",
                                        "azureStorageBlobContainerName": "str",
                                        "name": "str",
                                        "targetEndpointResourceId": "str",
                                    }
                                },
                            }
                        ]
                    },
                    "targetResourceId": "str",
                    "targetSubpath": "str",
                },
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_job_definitions_update(self, resource_group):
        response = await self.client.job_definitions.update(
            resource_group_name=resource_group.name,
            storage_mover_name="str",
            project_name="str",
            job_definition_name="str",
            job_definition={"properties": {"agentName": "str", "copyMode": "str", "description": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_job_definitions_begin_delete(self, resource_group):
        response = await (
            await self.client.job_definitions.begin_delete(
                resource_group_name=resource_group.name,
                storage_mover_name="str",
                project_name="str",
                job_definition_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_job_definitions_list(self, resource_group):
        response = self.client.job_definitions.list(
            resource_group_name=resource_group.name,
            storage_mover_name="str",
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_job_definitions_start_job(self, resource_group):
        response = await self.client.job_definitions.start_job(
            resource_group_name=resource_group.name,
            storage_mover_name="str",
            project_name="str",
            job_definition_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_job_definitions_stop_job(self, resource_group):
        response = await self.client.job_definitions.stop_job(
            resource_group_name=resource_group.name,
            storage_mover_name="str",
            project_name="str",
            job_definition_name="str",
        )

        # please add some check logic here by yourself
        # ...
