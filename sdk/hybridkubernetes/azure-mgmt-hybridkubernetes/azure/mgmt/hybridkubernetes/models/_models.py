# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AadProfile(_Model):
    """AAD Profile specifies attributes for Azure Active Directory integration.

    :ivar enable_azure_rbac: Whether to enable Azure RBAC for Kubernetes authorization.
    :vartype enable_azure_rbac: bool
    :ivar admin_group_object_i_ds: The list of AAD group object IDs that will have admin role of
     the cluster.
    :vartype admin_group_object_i_ds: list[str]
    :ivar tenant_id: The AAD tenant ID to use for authentication. If not specified, will use the
     tenant of the deployment subscription.
    :vartype tenant_id: str
    """

    enable_azure_rbac: Optional[bool] = rest_field(
        name="enableAzureRBAC", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether to enable Azure RBAC for Kubernetes authorization."""
    admin_group_object_i_ds: Optional[List[str]] = rest_field(
        name="adminGroupObjectIDs", visibility=["read", "create", "update", "delete", "query"]
    )
    """The list of AAD group object IDs that will have admin role of the cluster."""
    tenant_id: Optional[str] = rest_field(name="tenantID", visibility=["read", "create", "update", "delete", "query"])
    """The AAD tenant ID to use for authentication. If not specified, will use the tenant of the
     deployment subscription."""

    @overload
    def __init__(
        self,
        *,
        enable_azure_rbac: Optional[bool] = None,
        admin_group_object_i_ds: Optional[List[str]] = None,
        tenant_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AgentError(_Model):
    """Agent Errors if any during agent or system component upgrade.

    :ivar message: Agent error message.
    :vartype message: str
    :ivar severity: Severity of the error message.
    :vartype severity: str
    :ivar component: Agent component where error message occured.
    :vartype component: str
    :ivar time: The timestamp of error occured (UTC).
    :vartype time: ~datetime.datetime
    """

    message: Optional[str] = rest_field(visibility=["read"])
    """Agent error message."""
    severity: Optional[str] = rest_field(visibility=["read"])
    """Severity of the error message."""
    component: Optional[str] = rest_field(visibility=["read"])
    """Agent component where error message occured."""
    time: Optional[datetime.datetime] = rest_field(visibility=["read"], format="rfc3339")
    """The timestamp of error occured (UTC)."""


class ArcAgentProfile(_Model):
    """Defines the Arc Agent properties for the clusters.

    :ivar desired_agent_version: Version of the Arc agents to be installed on the cluster resource.
    :vartype desired_agent_version: str
    :ivar agent_auto_upgrade: Indicates whether the Arc agents on the be upgraded automatically to
     the latest version. Defaults to Enabled. Known values are: "Enabled" and "Disabled".
    :vartype agent_auto_upgrade: str or ~azure.mgmt.hybridkubernetes.models.AutoUpgradeOptions
    :ivar system_components: List of system extensions that are installed on the cluster resource.
    :vartype system_components: list[~azure.mgmt.hybridkubernetes.models.SystemComponent]
    :ivar agent_errors: List of arc agentry and system components errors on the cluster resource.
    :vartype agent_errors: list[~azure.mgmt.hybridkubernetes.models.AgentError]
    :ivar agent_state: Represents the current state of the Arc agentry and its dependent
     components.
    :vartype agent_state: str
    """

    desired_agent_version: Optional[str] = rest_field(
        name="desiredAgentVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Version of the Arc agents to be installed on the cluster resource."""
    agent_auto_upgrade: Optional[Union[str, "_models.AutoUpgradeOptions"]] = rest_field(
        name="agentAutoUpgrade", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the Arc agents on the be upgraded automatically to the latest version.
     Defaults to Enabled. Known values are: \"Enabled\" and \"Disabled\"."""
    system_components: Optional[List["_models.SystemComponent"]] = rest_field(
        name="systemComponents", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of system extensions that are installed on the cluster resource."""
    agent_errors: Optional[List["_models.AgentError"]] = rest_field(
        name="agentErrors", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of arc agentry and system components errors on the cluster resource."""
    agent_state: Optional[str] = rest_field(name="agentState", visibility=["read"])
    """Represents the current state of the Arc agentry and its dependent components."""

    @overload
    def __init__(
        self,
        *,
        desired_agent_version: Optional[str] = None,
        agent_auto_upgrade: Optional[Union[str, "_models.AutoUpgradeOptions"]] = None,
        system_components: Optional[List["_models.SystemComponent"]] = None,
        agent_errors: Optional[List["_models.AgentError"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArcAgentryConfigurations(_Model):
    """ArcAgentryConfigurations.

    :ivar feature: Specifies the name of the feature for the configuration setting.
    :vartype feature: str
    :ivar settings: The configuration settings for the feature that do not contain any sensitive or
     secret information.
    :vartype settings: dict[str, str]
    :ivar protected_settings: The configuration settings for the feature that contain any sensitive
     or secret information.
    :vartype protected_settings: dict[str, str]
    """

    feature: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Specifies the name of the feature for the configuration setting."""
    settings: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The configuration settings for the feature that do not contain any sensitive or secret
     information."""
    protected_settings: Optional[Dict[str, str]] = rest_field(
        name="protectedSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The configuration settings for the feature that contain any sensitive or secret information."""

    @overload
    def __init__(
        self,
        *,
        feature: Optional[str] = None,
        settings: Optional[Dict[str, str]] = None,
        protected_settings: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridkubernetes.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridkubernetes.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConnectedCluster(TrackedResource):
    """Represents a connected cluster.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridkubernetes.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar identity: The identity of the connected cluster. Required.
    :vartype identity: ~azure.mgmt.hybridkubernetes.models.ConnectedClusterIdentity
    :ivar kind: The kind of connected cluster. Known values are: "ProvisionedCluster" and "AWS".
    :vartype kind: str or ~azure.mgmt.hybridkubernetes.models.ConnectedClusterKind
    :ivar properties: Describes the connected cluster resource properties. Required.
    :vartype properties: ~azure.mgmt.hybridkubernetes.models.ConnectedClusterProperties
    """

    identity: "_models.ConnectedClusterIdentity" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity of the connected cluster. Required."""
    kind: Optional[Union[str, "_models.ConnectedClusterKind"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The kind of connected cluster. Known values are: \"ProvisionedCluster\" and \"AWS\"."""
    properties: "_models.ConnectedClusterProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Describes the connected cluster resource properties. Required."""

    __flattened_items = [
        "agent_public_key_certificate",
        "kubernetes_version",
        "total_node_count",
        "total_core_count",
        "agent_version",
        "provisioning_state",
        "distribution",
        "distribution_version",
        "infrastructure",
        "offering",
        "managed_identity_certificate_expiration_time",
        "last_connectivity_time",
        "connectivity_status",
        "private_link_state",
        "private_link_scope_resource_id",
        "azure_hybrid_benefit",
        "aad_profile",
        "arc_agent_profile",
        "security_profile",
        "oidc_issuer_profile",
        "gateway",
        "arc_agentry_configurations",
        "miscellaneous_properties",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        identity: "_models.ConnectedClusterIdentity",
        properties: "_models.ConnectedClusterProperties",
        tags: Optional[Dict[str, str]] = None,
        kind: Optional[Union[str, "_models.ConnectedClusterKind"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ConnectedClusterIdentity(_Model):
    """Identity for the connected cluster.

    :ivar principal_id: The principal id of connected cluster identity. This property will only be
     provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id associated with the connected cluster. This property will only
     be provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of identity used for the connected cluster. The type 'SystemAssigned,
     includes a system created identity. The type 'None' means no identity is assigned to the
     connected cluster. Required. Known values are: "None" and "SystemAssigned".
    :vartype type: str or ~azure.mgmt.hybridkubernetes.models.ResourceIdentityType
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal id of connected cluster identity. This property will only be provided for a
     system assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant id associated with the connected cluster. This property will only be provided for a
     system assigned identity."""
    type: Union[str, "_models.ResourceIdentityType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity used for the connected cluster. The type 'SystemAssigned, includes a
     system created identity. The type 'None' means no identity is assigned to the connected
     cluster. Required. Known values are: \"None\" and \"SystemAssigned\"."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ResourceIdentityType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConnectedClusterPatch(_Model):
    """Object containing updates for patch operations.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the connected cluster resource properties that can be updated
     during PATCH operation.
    :vartype properties: ~azure.mgmt.hybridkubernetes.models.ConnectedClusterPatchProperties
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    properties: Optional["_models.ConnectedClusterPatchProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Describes the connected cluster resource properties that can be updated during PATCH operation."""

    __flattened_items = ["distribution", "distribution_version", "azure_hybrid_benefit"]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ConnectedClusterPatchProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ConnectedClusterPatchProperties(_Model):
    """Properties which can be patched on the connected cluster resource.

    :ivar distribution: Represents the distribution of the connected cluster.
    :vartype distribution: str
    :ivar distribution_version: Represents the Kubernetes distribution version on this connected
     cluster.
    :vartype distribution_version: str
    :ivar azure_hybrid_benefit: Indicates whether Azure Hybrid Benefit is opted in. Known values
     are: "True", "False", and "NotApplicable".
    :vartype azure_hybrid_benefit: str or ~azure.mgmt.hybridkubernetes.models.AzureHybridBenefit
    """

    distribution: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Represents the distribution of the connected cluster."""
    distribution_version: Optional[str] = rest_field(
        name="distributionVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the Kubernetes distribution version on this connected cluster."""
    azure_hybrid_benefit: Optional[Union[str, "_models.AzureHybridBenefit"]] = rest_field(
        name="azureHybridBenefit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether Azure Hybrid Benefit is opted in. Known values are: \"True\", \"False\", and
     \"NotApplicable\"."""

    @overload
    def __init__(
        self,
        *,
        distribution: Optional[str] = None,
        distribution_version: Optional[str] = None,
        azure_hybrid_benefit: Optional[Union[str, "_models.AzureHybridBenefit"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConnectedClusterProperties(_Model):
    """Properties of the connected cluster.

    :ivar agent_public_key_certificate: Base64 encoded public certificate used by the agent to do
     the initial handshake to the backend services in Azure. Required.
    :vartype agent_public_key_certificate: str
    :ivar kubernetes_version: The Kubernetes version of the connected cluster resource.
    :vartype kubernetes_version: str
    :ivar total_node_count: Number of nodes present in the connected cluster resource.
    :vartype total_node_count: int
    :ivar total_core_count: Number of CPU cores present in the connected cluster resource.
    :vartype total_core_count: int
    :ivar agent_version: Version of the agent running on the connected cluster resource.
    :vartype agent_version: str
    :ivar provisioning_state: Provisioning state of the connected cluster resource. Known values
     are: "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.hybridkubernetes.models.ProvisioningState
    :ivar distribution: The Kubernetes distribution running on this connected cluster.
    :vartype distribution: str
    :ivar distribution_version: The Kubernetes distribution version on this connected cluster.
    :vartype distribution_version: str
    :ivar infrastructure: The infrastructure on which the Kubernetes cluster represented by this
     connected cluster is running on.
    :vartype infrastructure: str
    :ivar offering: Connected cluster offering.
    :vartype offering: str
    :ivar managed_identity_certificate_expiration_time: Expiration time of the managed identity
     certificate.
    :vartype managed_identity_certificate_expiration_time: ~datetime.datetime
    :ivar last_connectivity_time: Time representing the last instance when heart beat was received
     from the cluster.
    :vartype last_connectivity_time: ~datetime.datetime
    :ivar connectivity_status: Represents the connectivity status of the connected cluster. Known
     values are: "Connecting", "Connected", "Offline", "Expired", and "AgentNotInstalled".
    :vartype connectivity_status: str or ~azure.mgmt.hybridkubernetes.models.ConnectivityStatus
    :ivar private_link_state: Property which describes the state of private link on a connected
     cluster resource. Known values are: "Enabled" and "Disabled".
    :vartype private_link_state: str or ~azure.mgmt.hybridkubernetes.models.PrivateLinkState
    :ivar private_link_scope_resource_id: This is populated only if privateLinkState is enabled.
     The resource id of the private link scope this connected cluster is assigned to, if any.
    :vartype private_link_scope_resource_id: str
    :ivar azure_hybrid_benefit: Indicates whether Azure Hybrid Benefit is opted in. Known values
     are: "True", "False", and "NotApplicable".
    :vartype azure_hybrid_benefit: str or ~azure.mgmt.hybridkubernetes.models.AzureHybridBenefit
    :ivar aad_profile: AAD profile for the connected cluster.
    :vartype aad_profile: ~azure.mgmt.hybridkubernetes.models.AadProfile
    :ivar arc_agent_profile: Arc agentry configuration for the provisioned cluster.
    :vartype arc_agent_profile: ~azure.mgmt.hybridkubernetes.models.ArcAgentProfile
    :ivar security_profile: Security profile for the connected cluster.
    :vartype security_profile: ~azure.mgmt.hybridkubernetes.models.SecurityProfile
    :ivar oidc_issuer_profile: Open ID Connect (OIDC) Issuer Profile for the connected cluster.
    :vartype oidc_issuer_profile: ~azure.mgmt.hybridkubernetes.models.OidcIssuerProfile
    :ivar gateway: Details of the gateway used by the Arc router for connectivity.
    :vartype gateway: ~azure.mgmt.hybridkubernetes.models.Gateway
    :ivar arc_agentry_configurations: Configuration settings for customizing the behavior of the
     connected cluster.
    :vartype arc_agentry_configurations:
     list[~azure.mgmt.hybridkubernetes.models.ArcAgentryConfigurations]
    :ivar miscellaneous_properties: More properties related to the Connected Cluster.
    :vartype miscellaneous_properties: dict[str, str]
    """

    agent_public_key_certificate: str = rest_field(
        name="agentPublicKeyCertificate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Base64 encoded public certificate used by the agent to do the initial handshake to the backend
     services in Azure. Required."""
    kubernetes_version: Optional[str] = rest_field(name="kubernetesVersion", visibility=["read"])
    """The Kubernetes version of the connected cluster resource."""
    total_node_count: Optional[int] = rest_field(name="totalNodeCount", visibility=["read"])
    """Number of nodes present in the connected cluster resource."""
    total_core_count: Optional[int] = rest_field(name="totalCoreCount", visibility=["read"])
    """Number of CPU cores present in the connected cluster resource."""
    agent_version: Optional[str] = rest_field(name="agentVersion", visibility=["read"])
    """Version of the agent running on the connected cluster resource."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read", "create", "update", "delete", "query"]
    )
    """Provisioning state of the connected cluster resource. Known values are: \"Succeeded\",
     \"Failed\", \"Canceled\", \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""
    distribution: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Kubernetes distribution running on this connected cluster."""
    distribution_version: Optional[str] = rest_field(
        name="distributionVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Kubernetes distribution version on this connected cluster."""
    infrastructure: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The infrastructure on which the Kubernetes cluster represented by this connected cluster is
     running on."""
    offering: Optional[str] = rest_field(visibility=["read"])
    """Connected cluster offering."""
    managed_identity_certificate_expiration_time: Optional[datetime.datetime] = rest_field(
        name="managedIdentityCertificateExpirationTime", visibility=["read"], format="rfc3339"
    )
    """Expiration time of the managed identity certificate."""
    last_connectivity_time: Optional[datetime.datetime] = rest_field(
        name="lastConnectivityTime", visibility=["read"], format="rfc3339"
    )
    """Time representing the last instance when heart beat was received from the cluster."""
    connectivity_status: Optional[Union[str, "_models.ConnectivityStatus"]] = rest_field(
        name="connectivityStatus", visibility=["read"]
    )
    """Represents the connectivity status of the connected cluster. Known values are: \"Connecting\",
     \"Connected\", \"Offline\", \"Expired\", and \"AgentNotInstalled\"."""
    private_link_state: Optional[Union[str, "_models.PrivateLinkState"]] = rest_field(
        name="privateLinkState", visibility=["read", "create", "update", "delete", "query"]
    )
    """Property which describes the state of private link on a connected cluster resource. Known
     values are: \"Enabled\" and \"Disabled\"."""
    private_link_scope_resource_id: Optional[str] = rest_field(
        name="privateLinkScopeResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """This is populated only if privateLinkState is enabled. The resource id of the private link
     scope this connected cluster is assigned to, if any."""
    azure_hybrid_benefit: Optional[Union[str, "_models.AzureHybridBenefit"]] = rest_field(
        name="azureHybridBenefit", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether Azure Hybrid Benefit is opted in. Known values are: \"True\", \"False\", and
     \"NotApplicable\"."""
    aad_profile: Optional["_models.AadProfile"] = rest_field(
        name="aadProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """AAD profile for the connected cluster."""
    arc_agent_profile: Optional["_models.ArcAgentProfile"] = rest_field(
        name="arcAgentProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Arc agentry configuration for the provisioned cluster."""
    security_profile: Optional["_models.SecurityProfile"] = rest_field(
        name="securityProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Security profile for the connected cluster."""
    oidc_issuer_profile: Optional["_models.OidcIssuerProfile"] = rest_field(
        name="oidcIssuerProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Open ID Connect (OIDC) Issuer Profile for the connected cluster."""
    gateway: Optional["_models.Gateway"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Details of the gateway used by the Arc router for connectivity."""
    arc_agentry_configurations: Optional[List["_models.ArcAgentryConfigurations"]] = rest_field(
        name="arcAgentryConfigurations", visibility=["read", "create", "update", "delete", "query"]
    )
    """Configuration settings for customizing the behavior of the connected cluster."""
    miscellaneous_properties: Optional[Dict[str, str]] = rest_field(name="miscellaneousProperties", visibility=["read"])
    """More properties related to the Connected Cluster."""

    @overload
    def __init__(
        self,
        *,
        agent_public_key_certificate: str,
        provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = None,
        distribution: Optional[str] = None,
        distribution_version: Optional[str] = None,
        infrastructure: Optional[str] = None,
        private_link_state: Optional[Union[str, "_models.PrivateLinkState"]] = None,
        private_link_scope_resource_id: Optional[str] = None,
        azure_hybrid_benefit: Optional[Union[str, "_models.AzureHybridBenefit"]] = None,
        aad_profile: Optional["_models.AadProfile"] = None,
        arc_agent_profile: Optional["_models.ArcAgentProfile"] = None,
        security_profile: Optional["_models.SecurityProfile"] = None,
        oidc_issuer_profile: Optional["_models.OidcIssuerProfile"] = None,
        gateway: Optional["_models.Gateway"] = None,
        arc_agentry_configurations: Optional[List["_models.ArcAgentryConfigurations"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CredentialResult(_Model):
    """The credential result response.

    :ivar name: The name of the credential.
    :vartype name: str
    :ivar value: Base64-encoded Kubernetes configuration file.
    :vartype value: bytes
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the credential."""
    value: Optional[bytes] = rest_field(visibility=["read"], format="base64")
    """Base64-encoded Kubernetes configuration file."""


class CredentialResults(_Model):
    """The list of credential result response.

    :ivar hybrid_connection_config: Contains the REP (rendezvous endpoint) and “Sender” access
     token.
    :vartype hybrid_connection_config: ~azure.mgmt.hybridkubernetes.models.HybridConnectionConfig
    :ivar kubeconfigs: Base64-encoded Kubernetes configuration file.
    :vartype kubeconfigs: list[~azure.mgmt.hybridkubernetes.models.CredentialResult]
    """

    hybrid_connection_config: Optional["_models.HybridConnectionConfig"] = rest_field(
        name="hybridConnectionConfig", visibility=["read"]
    )
    """Contains the REP (rendezvous endpoint) and “Sender” access token."""
    kubeconfigs: Optional[List["_models.CredentialResult"]] = rest_field(visibility=["read"])
    """Base64-encoded Kubernetes configuration file."""


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.hybridkubernetes.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.hybridkubernetes.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.hybridkubernetes.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Gateway(_Model):
    """Gateway.

    :ivar enabled: Indicates whether the gateway for arc router connectivity is enabled.
    :vartype enabled: bool
    """

    enabled: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Indicates whether the gateway for arc router connectivity is enabled."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HybridConnectionConfig(_Model):
    """Contains the REP (rendezvous endpoint) and “Sender” access token.

    :ivar expiration_time: Timestamp when this token will be expired.
    :vartype expiration_time: int
    :ivar hybrid_connection_name: Name of the connection.
    :vartype hybrid_connection_name: str
    :ivar relay: Name of the relay.
    :vartype relay: str
    :ivar token: Sender access token.
    :vartype token: str
    :ivar relay_tid: TenantID of the relay.
    :vartype relay_tid: str
    :ivar relay_type: Type of relay.
    :vartype relay_type: str
    """

    expiration_time: Optional[int] = rest_field(name="expirationTime", visibility=["read"])
    """Timestamp when this token will be expired."""
    hybrid_connection_name: Optional[str] = rest_field(name="hybridConnectionName", visibility=["read"])
    """Name of the connection."""
    relay: Optional[str] = rest_field(visibility=["read"])
    """Name of the relay."""
    token: Optional[str] = rest_field(visibility=["read"])
    """Sender access token."""
    relay_tid: Optional[str] = rest_field(name="relayTid", visibility=["read"])
    """TenantID of the relay."""
    relay_type: Optional[str] = rest_field(name="relayType", visibility=["read"])
    """Type of relay."""


class ListClusterUserCredentialProperties(_Model):
    """ListClusterUserCredentialProperties.

    :ivar authentication_method: The mode of client authentication. Required. Known values are:
     "Token" and "AAD".
    :vartype authentication_method: str or ~azure.mgmt.hybridkubernetes.models.AuthenticationMethod
    :ivar client_proxy: Boolean value to indicate whether the request is for client side proxy or
     not. Required.
    :vartype client_proxy: bool
    """

    authentication_method: Union[str, "_models.AuthenticationMethod"] = rest_field(
        name="authenticationMethod", visibility=["read", "create", "update", "delete", "query"]
    )
    """The mode of client authentication. Required. Known values are: \"Token\" and \"AAD\"."""
    client_proxy: bool = rest_field(name="clientProxy", visibility=["read", "create", "update", "delete", "query"])
    """Boolean value to indicate whether the request is for client side proxy or not. Required."""

    @overload
    def __init__(
        self,
        *,
        authentication_method: Union[str, "_models.AuthenticationMethod"],
        client_proxy: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OidcIssuerProfile(_Model):
    """OIDC Issuer Profile specifies attributes for workload identity integration.

    :ivar enabled: Whether to enable oidc issuer for workload identity integration.
    :vartype enabled: bool
    :ivar issuer_url: The issuer url for hybrid clusters connected to Arc used for the workload
     identity feature.
    :vartype issuer_url: str
    :ivar self_hosted_issuer_url: The issuer url for public cloud clusters - AKS, EKS, GKE - used
     for the workload identity feature.
    :vartype self_hosted_issuer_url: str
    """

    enabled: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Whether to enable oidc issuer for workload identity integration."""
    issuer_url: Optional[str] = rest_field(name="issuerUrl", visibility=["read"])
    """The issuer url for hybrid clusters connected to Arc used for the workload identity feature."""
    self_hosted_issuer_url: Optional[str] = rest_field(
        name="selfHostedIssuerUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """The issuer url for public cloud clusters - AKS, EKS, GKE - used for the workload identity
     feature."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        self_hosted_issuer_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.hybridkubernetes.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.hybridkubernetes.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.hybridkubernetes.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class SecurityProfile(_Model):
    """Security Profile specifies attributes for cluster security features.

    :ivar workload_identity: The workload identity feature webhook.
    :vartype workload_identity: ~azure.mgmt.hybridkubernetes.models.SecurityProfileWorkloadIdentity
    """

    workload_identity: Optional["_models.SecurityProfileWorkloadIdentity"] = rest_field(
        name="workloadIdentity", visibility=["read", "create", "update", "delete", "query"]
    )
    """The workload identity feature webhook."""

    @overload
    def __init__(
        self,
        *,
        workload_identity: Optional["_models.SecurityProfileWorkloadIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecurityProfileWorkloadIdentity(_Model):
    """The workload identity feature webhook.

    :ivar enabled: Whether to enable or disable the workload identity Webhook.
    :vartype enabled: bool
    """

    enabled: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Whether to enable or disable the workload identity Webhook."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemComponent(_Model):
    """System extensions and its current versions installed on the cluster resource.

    :ivar type: Type of the system extension.
    :vartype type: str
    :ivar user_specified_version: Version of the system extension to be installed on the cluster
     resource.
    :vartype user_specified_version: str
    :ivar major_version: Major Version of the system extension that is currently installed on the
     cluster resource.
    :vartype major_version: int
    :ivar current_version: Version of the system extension that is currently installed on the
     cluster resource.
    :vartype current_version: str
    """

    type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the system extension."""
    user_specified_version: Optional[str] = rest_field(
        name="userSpecifiedVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Version of the system extension to be installed on the cluster resource."""
    major_version: Optional[int] = rest_field(
        name="majorVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Major Version of the system extension that is currently installed on the cluster resource."""
    current_version: Optional[str] = rest_field(name="currentVersion", visibility=["read"])
    """Version of the system extension that is currently installed on the cluster resource."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        user_specified_version: Optional[str] = None,
        major_version: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.hybridkubernetes.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.hybridkubernetes.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
