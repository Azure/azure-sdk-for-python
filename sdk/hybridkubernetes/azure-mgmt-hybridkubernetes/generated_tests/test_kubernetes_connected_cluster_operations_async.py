# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.hybridkubernetes.aio import KubernetesClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestKubernetesConnectedClusterOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(KubernetesClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_connected_cluster_get(self, resource_group):
        response = await self.client.connected_cluster.get(
            resource_group_name=resource_group.name,
            cluster_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_connected_cluster_begin_create_or_replace(self, resource_group):
        response = await (
            await self.client.connected_cluster.begin_create_or_replace(
                resource_group_name=resource_group.name,
                cluster_name="str",
                connected_cluster={
                    "identity": {"type": "str", "principalId": "str", "tenantId": "str"},
                    "location": "str",
                    "properties": {
                        "agentPublicKeyCertificate": "str",
                        "aadProfile": {"adminGroupObjectIDs": ["str"], "enableAzureRBAC": bool, "tenantID": "str"},
                        "agentVersion": "str",
                        "arcAgentProfile": {
                            "agentAutoUpgrade": "str",
                            "agentErrors": [
                                {"component": "str", "message": "str", "severity": "str", "time": "2020-02-20 00:00:00"}
                            ],
                            "agentState": "str",
                            "desiredAgentVersion": "str",
                            "systemComponents": [
                                {
                                    "currentVersion": "str",
                                    "majorVersion": 0,
                                    "type": "str",
                                    "userSpecifiedVersion": "str",
                                }
                            ],
                        },
                        "arcAgentryConfigurations": [
                            {"feature": "str", "protectedSettings": {"str": "str"}, "settings": {"str": "str"}}
                        ],
                        "azureHybridBenefit": "str",
                        "connectivityStatus": "str",
                        "distribution": "str",
                        "distributionVersion": "str",
                        "gateway": {"enabled": bool},
                        "infrastructure": "str",
                        "kubernetesVersion": "str",
                        "lastConnectivityTime": "2020-02-20 00:00:00",
                        "managedIdentityCertificateExpirationTime": "2020-02-20 00:00:00",
                        "miscellaneousProperties": {"str": "str"},
                        "offering": "str",
                        "oidcIssuerProfile": {"enabled": bool, "issuerUrl": "str", "selfHostedIssuerUrl": "str"},
                        "privateLinkScopeResourceId": "str",
                        "privateLinkState": "str",
                        "provisioningState": "str",
                        "securityProfile": {"workloadIdentity": {"enabled": bool}},
                        "totalCoreCount": 0,
                        "totalNodeCount": 0,
                    },
                    "id": "str",
                    "kind": "str",
                    "name": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_connected_cluster_update(self, resource_group):
        response = await self.client.connected_cluster.update(
            resource_group_name=resource_group.name,
            cluster_name="str",
            connected_cluster_patch={
                "properties": {"azureHybridBenefit": "str", "distribution": "str", "distributionVersion": "str"},
                "tags": {"str": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_connected_cluster_begin_delete(self, resource_group):
        response = await (
            await self.client.connected_cluster.begin_delete(
                resource_group_name=resource_group.name,
                cluster_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_connected_cluster_list_by_resource_group(self, resource_group):
        response = self.client.connected_cluster.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_connected_cluster_list_by_subscription(self, resource_group):
        response = self.client.connected_cluster.list_by_subscription()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_connected_cluster_list_cluster_user_credential(self, resource_group):
        response = await self.client.connected_cluster.list_cluster_user_credential(
            resource_group_name=resource_group.name,
            cluster_name="str",
            properties={"authenticationMethod": "str", "clientProxy": bool},
        )

        # please add some check logic here by yourself
        # ...
