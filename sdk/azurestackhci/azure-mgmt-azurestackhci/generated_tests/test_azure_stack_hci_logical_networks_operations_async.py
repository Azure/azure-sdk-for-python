# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.azurestackhci.aio import AzureStackHCIClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureStackHCILogicalNetworksOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(AzureStackHCIClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_logical_networks_get(self, resource_group):
        response = await self.client.logical_networks.get(
            resource_group_name=resource_group.name,
            logical_network_name="str",
            api_version="2024-01-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_logical_networks_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.logical_networks.begin_create_or_update(
                resource_group_name=resource_group.name,
                logical_network_name="str",
                logical_networks={
                    "location": "str",
                    "dhcpOptions": {"dnsServers": ["str"]},
                    "extendedLocation": {"name": "str", "type": "str"},
                    "id": "str",
                    "name": "str",
                    "provisioningState": "str",
                    "status": {
                        "errorCode": "str",
                        "errorMessage": "str",
                        "provisioningStatus": {"operationId": "str", "status": "str"},
                    },
                    "subnets": [
                        {
                            "addressPrefix": "str",
                            "addressPrefixes": ["str"],
                            "ipAllocationMethod": "str",
                            "ipConfigurationReferences": [{"ID": "str"}],
                            "ipPools": [
                                {
                                    "end": "str",
                                    "info": {"available": "str", "used": "str"},
                                    "ipPoolType": "str",
                                    "name": "str",
                                    "start": "str",
                                }
                            ],
                            "name": "str",
                            "routeTable": {
                                "etag": "str",
                                "name": "str",
                                "routes": [{"addressPrefix": "str", "name": "str", "nextHopIpAddress": "str"}],
                                "type": "str",
                            },
                            "vlan": 0,
                        }
                    ],
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                    "vmSwitchName": "str",
                },
                api_version="2024-01-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_logical_networks_begin_delete(self, resource_group):
        response = await (
            await self.client.logical_networks.begin_delete(
                resource_group_name=resource_group.name,
                logical_network_name="str",
                api_version="2024-01-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_logical_networks_begin_update(self, resource_group):
        response = await (
            await self.client.logical_networks.begin_update(
                resource_group_name=resource_group.name,
                logical_network_name="str",
                logical_networks={"tags": {"str": "str"}},
                api_version="2024-01-01",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_logical_networks_list(self, resource_group):
        response = self.client.logical_networks.list(
            resource_group_name=resource_group.name,
            api_version="2024-01-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_logical_networks_list_all(self, resource_group):
        response = self.client.logical_networks.list_all(
            api_version="2024-01-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
