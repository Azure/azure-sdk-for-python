# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, List, Optional, TypeVar
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ...models import _models
from ..._model_base import _deserialize
from ..._operations._operations import (
    build_schema_registry_get_schema_by_id_request,
    build_schema_registry_get_schema_by_version_request,
    build_schema_registry_list_schema_groups_request,
    build_schema_registry_list_schema_versions_request
)
from .._vendor import SchemaRegistryClientMixinABC, raise_if_not_implemented
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SchemaRegistryClientOperationsMixin(   # pylint: disable=abstract-class-instantiated
    SchemaRegistryClientMixinABC
):

    def __init__(self) -> None:
        raise_if_not_implemented(self.__class__, [
            'get_schema_id_by_content',
            'register_schema',
        ])


    @distributed_trace
    def list_schema_groups(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.SchemaGroup"]:
        """Get list of schema groups.

        Gets the list of schema groups user is authorized to access.

        :return: An iterator like instance of SchemaGroup
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.schemaregistry.models.SchemaGroup]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.SchemaGroup]] = kwargs.pop(  # pylint: disable=protected-access
            'cls', None
        )

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:

                request = build_schema_registry_list_schema_groups_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, 'str', skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {key: [urllib.parse.quote(v) for v in value] for key, value in
                     urllib.parse.parse_qs(_parsed_next_link.query).items()}
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET",
                    urllib.parse.urljoin(next_link, _parsed_next_link.path),
                    params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, 'str', skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.SchemaGroup], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem) # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=_stream,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await  response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return AsyncItemPaged(
            get_next, extract_data
        )


    @distributed_trace_async
    async def get_schema_by_id(
        self,
        id: str,
        **kwargs: Any
    ) -> bytes:
        """Get a registered schema by its unique ID reference.

        Gets a registered schema by its unique ID.  Azure Schema Registry guarantees that ID is unique
        within a namespace. Operation response type is based on serialization of schema requested.

        :param id: Schema ID that uniquely identifies a schema in the registry namespace. Required.
        :type id: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: bytes
        :rtype: bytes
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[bytes] = kwargs.pop(
            'cls', None
        )


        request = build_schema_registry_get_schema_by_id_request(
            id=id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=_stream,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await  response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['Location']=self._deserialize('str', response.headers.get('Location'))
        response_headers['Schema-Id']=self._deserialize('str', response.headers.get('Schema-Id'))
        response_headers['Schema-Id-Location']=self._deserialize('str', response.headers.get('Schema-Id-Location'))
        response_headers['Schema-Group-Name']=self._deserialize('str', response.headers.get('Schema-Group-Name'))
        response_headers['Schema-Name']=self._deserialize('str', response.headers.get('Schema-Name'))
        response_headers['Schema-Version']=self._deserialize('int', response.headers.get('Schema-Version'))
        response_headers['Content-Type']=self._deserialize('str', response.headers.get('Content-Type'))

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(
                bytes,
                response.json()
            )

        if cls:
            return cls(pipeline_response, deserialized, response_headers) # type: ignore

        return deserialized # type: ignore



    @distributed_trace
    def list_schema_versions(
        self,
        group_name: str,
        name: str,
        **kwargs: Any
    ) -> AsyncIterable["_models.Version"]:
        """List schema versions.

        Gets the list of all versions of one schema.

        :param group_name: Name of schema group. Required.
        :type group_name: str
        :param name: Name of schema. Required.
        :type name: str
        :return: An iterator like instance of Version
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.schemaregistry.models.Version]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.Version]] = kwargs.pop(  # pylint: disable=protected-access
            'cls', None
        )

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})
        def prepare_request(next_link=None):
            if not next_link:

                request = build_schema_registry_list_schema_versions_request(
                    group_name=group_name,
                    name=name,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, 'str', skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict({
                    key: [urllib.parse.quote(v) for v in value] for key, value in
                        urllib.parse.parse_qs(_parsed_next_link.query).items()})
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET",
                    urllib.parse.urljoin(next_link, _parsed_next_link.path),
                    params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, 'str', skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.Version], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem) # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request,
                stream=_stream,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await  response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response


        return AsyncItemPaged(
            get_next, extract_data
        )


    @distributed_trace_async
    async def get_schema_by_version(
        self,
        group_name: str,
        name: str,
        schema_version: int,
        **kwargs: Any
    ) -> bytes:
        """Get specific schema versions.

        Gets one specific version of one schema.

        :param group_name: Name of schema group. Required.
        :type group_name: str
        :param name: Name of schema. Required.
        :type name: str
        :param schema_version: Version number of specific schema. Required.
        :type schema_version: int
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: bytes
        :rtype: bytes
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError
        }
        error_map.update(kwargs.pop('error_map', {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[bytes] = kwargs.pop(
            'cls', None
        )


        request = build_schema_registry_get_schema_by_version_request(
            group_name=group_name,
            name=name,
            schema_version=schema_version,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request,
            stream=_stream,
            **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await  response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['Location']=self._deserialize('str', response.headers.get('Location'))
        response_headers['Schema-Id']=self._deserialize('str', response.headers.get('Schema-Id'))
        response_headers['Schema-Id-Location']=self._deserialize('str', response.headers.get('Schema-Id-Location'))
        response_headers['Schema-Group-Name']=self._deserialize('str', response.headers.get('Schema-Group-Name'))
        response_headers['Schema-Name']=self._deserialize('str', response.headers.get('Schema-Name'))
        response_headers['Schema-Version']=self._deserialize('int', response.headers.get('Schema-Version'))
        response_headers['Content-Type']=self._deserialize('str', response.headers.get('Content-Type'))

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(
                bytes,
                response.json()
            )

        if cls:
            return cls(pipeline_response, deserialized, response_headers) # type: ignore

        return deserialized # type: ignore
