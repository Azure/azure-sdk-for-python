# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class SchemaGroup(msrest.serialization.Model):
    """SchemaGroup.

    :param name:
    :type name: str
    :param created_time_utc:
    :type created_time_utc: ~datetime.datetime
    :param updated_time_utc:
    :type updated_time_utc: ~datetime.datetime
    :param schema_type:
    :type schema_type: str
    :param etag: Define an read-only identifier that uniquely describe an instance of the group.
     This is returned from get call for update purposes. Setting this on create or update has no
     effect.
    :type etag: str
    :param schema_compatibility: schema compatibility mode enum, defined by supported schema type.
    :type schema_compatibility: int
    :param group_properties: Dictionary of :code:`<string>`.
    :type group_properties: dict[str, str]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'created_time_utc': {'key': 'createdTimeUtc', 'type': 'iso-8601'},
        'updated_time_utc': {'key': 'updatedTimeUtc', 'type': 'iso-8601'},
        'schema_type': {'key': 'schemaType', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'schema_compatibility': {'key': 'schemaCompatibility', 'type': 'int'},
        'group_properties': {'key': 'groupProperties', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SchemaGroup, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.created_time_utc = kwargs.get('created_time_utc', None)
        self.updated_time_utc = kwargs.get('updated_time_utc', None)
        self.schema_type = kwargs.get('schema_type', None)
        self.etag = kwargs.get('etag', None)
        self.schema_compatibility = kwargs.get('schema_compatibility', None)
        self.group_properties = kwargs.get('group_properties', None)


class SchemaId(msrest.serialization.Model):
    """SchemaId.

    :param id:
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SchemaId, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
