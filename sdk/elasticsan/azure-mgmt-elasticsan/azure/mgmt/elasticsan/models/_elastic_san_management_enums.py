# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from six import with_metaclass
from azure.core import CaseInsensitiveEnumMeta


class CreatedByType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class EncryptionType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The type of key used to encrypt the data of the disk.
    """

    #: Volume is encrypted at rest with Platform managed key. It is the default encryption type. This
    #: is not a valid encryption type for disk encryption sets.
    ENCRYPTION_AT_REST_WITH_PLATFORM_KEY = "EncryptionAtRestWithPlatformKey"
    #: Volume is encrypted at rest with Customer managed key that can be changed and revoked by a
    #: customer.
    ENCRYPTION_AT_REST_WITH_CUSTOMER_KEY = "EncryptionAtRestWithCustomerKey"
    #: Volume is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed
    #: and the other key is Platform managed.
    ENCRYPTION_AT_REST_WITH_PLATFORM_AND_CUSTOMER_KEYS = "EncryptionAtRestWithPlatformAndCustomerKeys"

class Name(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The sku name.
    """

    #: Standard locally redundant storage.
    STANDARD_LRS = "Standard_LRS"
    #: Premium locally redundant storage.
    PREMIUM_LRS = "Premium_LRS"
    #: Standard zone redundant storage.
    STANDARD_ZRS = "Standard_ZRS"

class OperationalStatus(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Operational status of the resource.
    """

    INVALID = "Invalid"
    UNKNOWN = "Unknown"
    HEALTHY = "Healthy"
    UNHEALTHY = "Unhealthy"
    UPDATING = "Updating"
    RUNNING = "Running"
    STOPPED = "Stopped"
    STOPPED_DEALLOCATED_ = "Stopped (deallocated)"

class ProvisioningStates(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Provisioning state of the iSCSI Target.
    """

    INVALID = "Invalid"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    PENDING = "Pending"
    CREATING = "Creating"
    UPDATING = "Updating"
    DELETING = "Deleting"

class State(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Gets the state of virtual network rule.
    """

    PROVISIONING = "provisioning"
    DEPROVISIONING = "deprovisioning"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
    NETWORK_SOURCE_DELETED = "networkSourceDeleted"

class StorageTargetType(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """Storage Target type.
    """

    ISCSI = "Iscsi"
    NONE = "None"

class Tier(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """The sku tier.
    """

    #: Hero.
    HERO = "Hero"
    #: Satellite.
    SATELLITE = "Satellite"
    #: Hub.
    HUB = "Hub"

class VolumeCreateOption(with_metaclass(CaseInsensitiveEnumMeta, str, Enum)):
    """This enumerates the possible sources of a volume creation.
    """

    NONE = "None"
    FROM_VOLUME = "FromVolume"
    FROM_DISK_SNAPSHOT = "FromDiskSnapshot"
    EXPORT = "Export"
