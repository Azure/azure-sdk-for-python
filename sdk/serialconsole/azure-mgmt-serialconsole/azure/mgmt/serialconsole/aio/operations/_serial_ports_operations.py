# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._serial_ports_operations import build_connect_request, build_create_request, build_delete_request, build_get_request, build_list_by_subscriptions_request, build_list_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SerialPortsOperations:
    """SerialPortsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.serialconsole.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def list(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        **kwargs: Any
    ) -> "_models.SerialPortListResult":
        """Lists all of the configured serial ports for a parent resource.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine.
        :type parent_resource: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPortListResult, or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPortListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SerialPortListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            subscription_id=self._config.subscription_id,
            template_url=self.list.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SerialPortListResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts'}  # type: ignore


    @distributed_trace_async
    async def get(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        **kwargs: Any
    ) -> "_models.SerialPort":
        """Gets the configured settings for a serial port.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine.
        :type parent_resource: str
        :param serial_port: The name of the serial port to connect to.
        :type serial_port: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPort, or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPort
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SerialPort"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            serial_port=serial_port,
            subscription_id=self._config.subscription_id,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SerialPort', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}'}  # type: ignore


    @distributed_trace_async
    async def create(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        parameters: "_models.SerialPort",
        **kwargs: Any
    ) -> "_models.SerialPort":
        """Creates or updates a serial port.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine.
        :type parent_resource: str
        :param serial_port: The name of the serial port to create.
        :type serial_port: str
        :param parameters: Parameters supplied to create the serial port.
        :type parameters: ~azure.mgmt.serialconsole.models.SerialPort
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPort, or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPort
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SerialPort"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(parameters, 'SerialPort')

        request = build_create_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            serial_port=serial_port,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            json=_json,
            template_url=self.create.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SerialPort', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}'}  # type: ignore


    @distributed_trace_async
    async def delete(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        **kwargs: Any
    ) -> None:
        """Deletes a serial port.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine.
        :type parent_resource: str
        :param serial_port: The name of the serial port to delete.
        :type serial_port: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            serial_port=serial_port,
            subscription_id=self._config.subscription_id,
            template_url=self.delete.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}'}  # type: ignore


    @distributed_trace_async
    async def list_by_subscriptions(
        self,
        **kwargs: Any
    ) -> "_models.SerialPortListResult":
        """Handles requests to list all SerialPort resources in a subscription.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPortListResult, or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPortListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SerialPortListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_by_subscriptions_request(
            subscription_id=self._config.subscription_id,
            template_url=self.list_by_subscriptions.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SerialPortListResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_by_subscriptions.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/serialPorts'}  # type: ignore


    @distributed_trace_async
    async def connect(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        **kwargs: Any
    ) -> "_models.SerialPortConnectResult":
        """Connect to serial port of the target resource.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine.
        :type parent_resource: str
        :param serial_port: The name of the serial port to connect to.
        :type serial_port: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPortConnectResult, or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPortConnectResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SerialPortConnectResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_connect_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            serial_port=serial_port,
            subscription_id=self._config.subscription_id,
            template_url=self.connect.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SerialPortConnectResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    connect.metadata = {'url': '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}/connect'}  # type: ignore

