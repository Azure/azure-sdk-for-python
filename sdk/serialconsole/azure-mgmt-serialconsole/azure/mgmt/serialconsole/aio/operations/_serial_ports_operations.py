# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._serial_ports_operations import (
    build_connect_request,
    build_create_request,
    build_delete_request,
    build_get_request,
    build_list_by_subscriptions_request,
    build_list_request,
)
from .._vendor import MicrosoftSerialConsoleClientMixinABC

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class SerialPortsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.serialconsole.aio.MicrosoftSerialConsoleClient`'s
        :attr:`serial_ports` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def list(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        **kwargs: Any
    ) -> _models.SerialPortListResult:
        """Lists all of the configured serial ports for a parent resource.

        :param resource_group_name: The name of the resource group. Required.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider. Required.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'. Required.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine. Required.
        :type parent_resource: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPortListResult or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPortListResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2018-05-01"]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.SerialPortListResult]

        request = build_list_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.list.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SerialPortListResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list.metadata = {"url": "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts"}  # type: ignore

    @distributed_trace_async
    async def get(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        **kwargs: Any
    ) -> _models.SerialPort:
        """Gets the configured settings for a serial port.

        :param resource_group_name: The name of the resource group. Required.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider. Required.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'. Required.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine. Required.
        :type parent_resource: str
        :param serial_port: The name of the serial port to connect to. Required.
        :type serial_port: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPort or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPort
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2018-05-01"]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.SerialPort]

        request = build_get_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            serial_port=serial_port,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.get.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SerialPort", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {"url": "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}"}  # type: ignore

    @overload
    async def create(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        parameters: _models.SerialPort,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SerialPort:
        """Creates or updates a serial port.

        :param resource_group_name: The name of the resource group. Required.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider. Required.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'. Required.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine. Required.
        :type parent_resource: str
        :param serial_port: The name of the serial port to create. Required.
        :type serial_port: str
        :param parameters: Parameters supplied to create the serial port. Required.
        :type parameters: ~azure.mgmt.serialconsole.models.SerialPort
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPort or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPort
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SerialPort:
        """Creates or updates a serial port.

        :param resource_group_name: The name of the resource group. Required.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider. Required.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'. Required.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine. Required.
        :type parent_resource: str
        :param serial_port: The name of the serial port to create. Required.
        :type serial_port: str
        :param parameters: Parameters supplied to create the serial port. Required.
        :type parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPort or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPort
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        parameters: Union[_models.SerialPort, IO],
        **kwargs: Any
    ) -> _models.SerialPort:
        """Creates or updates a serial port.

        :param resource_group_name: The name of the resource group. Required.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider. Required.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'. Required.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine. Required.
        :type parent_resource: str
        :param serial_port: The name of the serial port to create. Required.
        :type serial_port: str
        :param parameters: Parameters supplied to create the serial port. Is either a model type or a
         IO type. Required.
        :type parameters: ~azure.mgmt.serialconsole.models.SerialPort or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPort or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPort
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2018-05-01"]
        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.SerialPort]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IO, bytes)):
            _content = parameters
        else:
            _json = self._serialize.body(parameters, "SerialPort")

        request = build_create_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            serial_port=serial_port,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SerialPort", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create.metadata = {"url": "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}"}  # type: ignore

    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        **kwargs: Any
    ) -> None:
        """Deletes a serial port.

        :param resource_group_name: The name of the resource group. Required.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider. Required.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'. Required.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine. Required.
        :type parent_resource: str
        :param serial_port: The name of the serial port to delete. Required.
        :type serial_port: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2018-05-01"]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_delete_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            serial_port=serial_port,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.delete.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {"url": "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}"}  # type: ignore

    @distributed_trace_async
    async def list_by_subscriptions(self, **kwargs: Any) -> _models.SerialPortListResult:
        """Handles requests to list all SerialPort resources in a subscription.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPortListResult or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPortListResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.SerialPortListResult]

        request = build_list_by_subscriptions_request(
            subscription_id=self._config.subscription_id,
            template_url=self.list_by_subscriptions.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SerialPortListResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_by_subscriptions.metadata = {"url": "/subscriptions/{subscriptionId}/providers/Microsoft.SerialConsole/serialPorts"}  # type: ignore

    @distributed_trace_async
    async def connect(
        self,
        resource_group_name: str,
        resource_provider_namespace: str,
        parent_resource_type: str,
        parent_resource: str,
        serial_port: str,
        **kwargs: Any
    ) -> _models.SerialPortConnectResult:
        """Connect to serial port of the target resource.

        :param resource_group_name: The name of the resource group. Required.
        :type resource_group_name: str
        :param resource_provider_namespace: The namespace of the resource provider. Required.
        :type resource_provider_namespace: str
        :param parent_resource_type: The resource type of the parent resource.  For example:
         'virtualMachines' or 'virtualMachineScaleSets'. Required.
        :type parent_resource_type: str
        :param parent_resource: The resource name, or subordinate path, for the parent of the serial
         port. For example: the name of the virtual machine. Required.
        :type parent_resource: str
        :param serial_port: The name of the serial port to connect to. Required.
        :type serial_port: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SerialPortConnectResult or the result of cls(response)
        :rtype: ~azure.mgmt.serialconsole.models.SerialPortConnectResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )  # type: Literal["2018-05-01"]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.SerialPortConnectResult]

        request = build_connect_request(
            resource_group_name=resource_group_name,
            resource_provider_namespace=resource_provider_namespace,
            parent_resource_type=parent_resource_type,
            parent_resource=parent_resource,
            serial_port=serial_port,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.connect.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("SerialPortConnectResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    connect.metadata = {"url": "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourceType}/{parentResource}/providers/Microsoft.SerialConsole/serialPorts/{serialPort}/connect"}  # type: ignore
