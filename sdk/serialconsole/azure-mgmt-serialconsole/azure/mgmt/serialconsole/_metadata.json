{
    "chosen_version": "2018-05-01",
    "total_api_version_list": ["2018-05-01"],
    "client": {
        "name": "MicrosoftSerialConsoleClient",
        "filename": "_microsoft_serial_console_client",
        "description": "The Azure Serial Console allows you to access the serial console of a Virtual Machine or VM scale set instance.",
        "host_value": "\"https://management.azure.com\"",
        "parameterized_host_template": null,
        "azure_arm": true,
        "has_lro_operations": false,
        "client_side_validation": false,
        "sync_imports": "{\"typing\": {\"azurecore\": {\"azure.core.credentials\": [\"TokenCredential\"]}}, \"regular\": {\"azurecore\": {\"azure.profiles\": [\"KnownProfiles\", \"ProfileDefinition\"], \"azure.profiles.multiapiclient\": [\"MultiApiClientMixin\"], \"msrest\": [\"Deserializer\", \"Serializer\"], \"azure.mgmt.core\": [\"ARMPipelineClient\"]}, \"local\": {\"._configuration\": [\"MicrosoftSerialConsoleClientConfiguration\"], \"._operations_mixin\": [\"MicrosoftSerialConsoleClientOperationsMixin\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Optional\"]}}}",
        "async_imports": "{\"typing\": {\"azurecore\": {\"azure.core.credentials_async\": [\"AsyncTokenCredential\"], \"azure.core.credentials\": [\"TokenCredential\"]}}, \"regular\": {\"azurecore\": {\"azure.profiles\": [\"KnownProfiles\", \"ProfileDefinition\"], \"azure.profiles.multiapiclient\": [\"MultiApiClientMixin\"], \"msrest\": [\"Deserializer\", \"Serializer\"], \"azure.mgmt.core\": [\"AsyncARMPipelineClient\"]}, \"local\": {\"._configuration\": [\"MicrosoftSerialConsoleClientConfiguration\"], \"._operations_mixin\": [\"MicrosoftSerialConsoleClientOperationsMixin\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Optional\"]}}}"
    },
    "global_parameters": {
        "sync": {
            "credential": {
                "signature": "credential,  # type: \"TokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials.TokenCredential",
                "required": true
            },
            "subscription_id": {
                "signature": "subscription_id,  # type: str",
                "description": "Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it.",
                "docstring_type": "str",
                "required": true
            }
        },
        "async": {
            "credential": {
                "signature": "credential: \"AsyncTokenCredential\",",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials_async.AsyncTokenCredential",
                "required": true
            },
            "subscription_id": {
                "signature": "subscription_id: str,",
                "description": "Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it.",
                "docstring_type": "str",
                "required": true
            }
        },
        "constant": {
        },
        "call": "credential, subscription_id",
        "service_client_specific": {
            "sync": {
                "api_version": {
                    "signature": "api_version=None, # type: Optional[str]",
                    "description": "API version to use if no profile is provided, or if missing in profile.",
                    "docstring_type": "str",
                    "required": false
                },
                "base_url": {
                    "signature": "base_url=\"https://management.azure.com\",  # type: str",
                    "description": "Service URL",
                    "docstring_type": "str",
                    "required": false
                },
                "profile": {
                    "signature": "profile=KnownProfiles.default, # type: KnownProfiles",
                    "description": "A profile definition, from KnownProfiles to dict.",
                    "docstring_type": "azure.profiles.KnownProfiles",
                    "required": false
                }
            },
            "async": {
                "api_version": {
                    "signature": "api_version: Optional[str] = None,",
                    "description": "API version to use if no profile is provided, or if missing in profile.",
                    "docstring_type": "str",
                    "required": false
                },
                "base_url": {
                    "signature": "base_url: str = \"https://management.azure.com\",",
                    "description": "Service URL",
                    "docstring_type": "str",
                    "required": false
                },
                "profile": {
                    "signature": "profile: KnownProfiles = KnownProfiles.default,",
                    "description": "A profile definition, from KnownProfiles to dict.",
                    "docstring_type": "azure.profiles.KnownProfiles",
                    "required": false
                }
            }
        }
    },
    "config": {
        "credential": true,
        "credential_scopes": ["https://management.azure.com/.default"],
        "credential_call_sync": "ARMChallengeAuthenticationPolicy(self.credential, *self.credential_scopes, **kwargs)",
        "credential_call_async": "AsyncARMChallengeAuthenticationPolicy(self.credential, *self.credential_scopes, **kwargs)",
        "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.configuration\": [\"Configuration\"], \"azure.core.pipeline\": [\"policies\"], \"azure.mgmt.core.policies\": [\"ARMChallengeAuthenticationPolicy\", \"ARMHttpLoggingPolicy\"]}, \"local\": {\"._version\": [\"VERSION\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}, \"typing\": {\"azurecore\": {\"azure.core.credentials\": [\"TokenCredential\"]}}}",
        "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.configuration\": [\"Configuration\"], \"azure.core.pipeline\": [\"policies\"], \"azure.mgmt.core.policies\": [\"ARMHttpLoggingPolicy\", \"AsyncARMChallengeAuthenticationPolicy\"]}, \"local\": {\".._version\": [\"VERSION\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}, \"typing\": {\"azurecore\": {\"azure.core.credentials_async\": [\"AsyncTokenCredential\"]}}}"
    },
    "operation_groups": {
        "serial_ports": "SerialPortsOperations"
    },
    "operation_mixins": {
        "sync_imports": "{\"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Union\"]}}}",
        "async_imports": "{\"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Union\"]}}}",
        "operations": {
            "list_operations" : {
                "sync": {
                    "signature": "def list_operations(\n    self,\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e \"_models.SerialConsoleOperations\"\n",
                    "doc": "\"\"\"Gets a list of Serial Console API operations.\n\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SerialConsoleOperations, or the result of cls(response)\n:rtype: ~azure.mgmt.serialconsole.models.SerialConsoleOperations\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def list_operations(\n    self,\n    **kwargs: Any\n) -\u003e \"_models.SerialConsoleOperations\":\n",
                    "doc": "\"\"\"Gets a list of Serial Console API operations.\n\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SerialConsoleOperations, or the result of cls(response)\n:rtype: ~azure.mgmt.serialconsole.models.SerialConsoleOperations\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": ""
            },
            "get_console_status" : {
                "sync": {
                    "signature": "def get_console_status(\n    self,\n    default,  # type: str\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e Union[\"_models.SerialConsoleStatus\", \"_models.GetSerialConsoleSubscriptionNotFound\"]\n",
                    "doc": "\"\"\"Get the disabled status for a subscription.\n\nGets whether or not Serial Console is disabled for a given subscription.\n\n:param default: Default parameter. Leave the value as \"default\".\n:type default: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SerialConsoleStatus or GetSerialConsoleSubscriptionNotFound, or the result of\n cls(response)\n:rtype: ~azure.mgmt.serialconsole.models.SerialConsoleStatus or\n ~azure.mgmt.serialconsole.models.GetSerialConsoleSubscriptionNotFound\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_console_status(\n    self,\n    default: str,\n    **kwargs: Any\n) -\u003e Union[\"_models.SerialConsoleStatus\", \"_models.GetSerialConsoleSubscriptionNotFound\"]:\n",
                    "doc": "\"\"\"Get the disabled status for a subscription.\n\nGets whether or not Serial Console is disabled for a given subscription.\n\n:param default: Default parameter. Leave the value as \"default\".\n:type default: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SerialConsoleStatus or GetSerialConsoleSubscriptionNotFound, or the result of\n cls(response)\n:rtype: ~azure.mgmt.serialconsole.models.SerialConsoleStatus or\n ~azure.mgmt.serialconsole.models.GetSerialConsoleSubscriptionNotFound\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "default"
            },
            "disable_console" : {
                "sync": {
                    "signature": "def disable_console(\n    self,\n    default,  # type: str\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e Union[\"_models.DisableSerialConsoleResult\", \"_models.GetSerialConsoleSubscriptionNotFound\"]\n",
                    "doc": "\"\"\"Disable Serial Console for a subscription.\n\nDisables the Serial Console service for all VMs and VM scale sets in the provided subscription.\n\n:param default: Default parameter. Leave the value as \"default\".\n:type default: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DisableSerialConsoleResult or GetSerialConsoleSubscriptionNotFound, or the result of\n cls(response)\n:rtype: ~azure.mgmt.serialconsole.models.DisableSerialConsoleResult or\n ~azure.mgmt.serialconsole.models.GetSerialConsoleSubscriptionNotFound\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def disable_console(\n    self,\n    default: str,\n    **kwargs: Any\n) -\u003e Union[\"_models.DisableSerialConsoleResult\", \"_models.GetSerialConsoleSubscriptionNotFound\"]:\n",
                    "doc": "\"\"\"Disable Serial Console for a subscription.\n\nDisables the Serial Console service for all VMs and VM scale sets in the provided subscription.\n\n:param default: Default parameter. Leave the value as \"default\".\n:type default: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DisableSerialConsoleResult or GetSerialConsoleSubscriptionNotFound, or the result of\n cls(response)\n:rtype: ~azure.mgmt.serialconsole.models.DisableSerialConsoleResult or\n ~azure.mgmt.serialconsole.models.GetSerialConsoleSubscriptionNotFound\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "default"
            },
            "enable_console" : {
                "sync": {
                    "signature": "def enable_console(\n    self,\n    default,  # type: str\n    **kwargs  # type: Any\n):\n    # type: (...) -\u003e Union[\"_models.EnableSerialConsoleResult\", \"_models.GetSerialConsoleSubscriptionNotFound\"]\n",
                    "doc": "\"\"\"Enable Serial Console for a subscription.\n\nEnables the Serial Console service for all VMs and VM scale sets in the provided subscription.\n\n:param default: Default parameter. Leave the value as \"default\".\n:type default: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: EnableSerialConsoleResult or GetSerialConsoleSubscriptionNotFound, or the result of\n cls(response)\n:rtype: ~azure.mgmt.serialconsole.models.EnableSerialConsoleResult or\n ~azure.mgmt.serialconsole.models.GetSerialConsoleSubscriptionNotFound\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def enable_console(\n    self,\n    default: str,\n    **kwargs: Any\n) -\u003e Union[\"_models.EnableSerialConsoleResult\", \"_models.GetSerialConsoleSubscriptionNotFound\"]:\n",
                    "doc": "\"\"\"Enable Serial Console for a subscription.\n\nEnables the Serial Console service for all VMs and VM scale sets in the provided subscription.\n\n:param default: Default parameter. Leave the value as \"default\".\n:type default: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: EnableSerialConsoleResult or GetSerialConsoleSubscriptionNotFound, or the result of\n cls(response)\n:rtype: ~azure.mgmt.serialconsole.models.EnableSerialConsoleResult or\n ~azure.mgmt.serialconsole.models.GetSerialConsoleSubscriptionNotFound\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "default"
            }
        }
    }
}