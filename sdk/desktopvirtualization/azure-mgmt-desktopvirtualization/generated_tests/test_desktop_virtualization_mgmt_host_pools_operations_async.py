# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.desktopvirtualization.aio import DesktopVirtualizationMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDesktopVirtualizationMgmtHostPoolsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DesktopVirtualizationMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.host_pools.get(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.host_pools.create_or_update(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            host_pool={
                "hostPoolType": "str",
                "loadBalancerType": "str",
                "location": "str",
                "preferredAppGroupType": "str",
                "agentUpdate": {
                    "maintenanceWindowTimeZone": "str",
                    "maintenanceWindows": [{"dayOfWeek": "str", "hour": 0}],
                    "type": "str",
                    "useSessionHostLocalTime": bool,
                },
                "appAttachPackageReferences": ["str"],
                "applicationGroupReferences": ["str"],
                "cloudPcResource": bool,
                "customRdpProperty": "str",
                "description": "str",
                "etag": "str",
                "friendlyName": "str",
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "SystemAssigned"},
                "kind": "str",
                "managedBy": "str",
                "maxSessionLimit": 0,
                "name": "str",
                "objectId": "str",
                "personalDesktopAssignmentType": "str",
                "plan": {"name": "str", "product": "str", "publisher": "str", "promotionCode": "str", "version": "str"},
                "privateEndpointConnections": [
                    {
                        "groupIds": ["str"],
                        "id": "str",
                        "name": "str",
                        "privateEndpoint": {"id": "str"},
                        "privateLinkServiceConnectionState": {
                            "actionsRequired": "str",
                            "description": "str",
                            "status": "str",
                        },
                        "provisioningState": "str",
                        "systemData": {
                            "createdAt": "2020-02-20 00:00:00",
                            "createdBy": "str",
                            "createdByType": "str",
                            "lastModifiedAt": "2020-02-20 00:00:00",
                            "lastModifiedBy": "str",
                            "lastModifiedByType": "str",
                        },
                        "type": "str",
                    }
                ],
                "publicNetworkAccess": "str",
                "registrationInfo": {
                    "expirationTime": "2020-02-20 00:00:00",
                    "registrationTokenOperation": "str",
                    "token": "str",
                },
                "ring": 0,
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "ssoClientId": "str",
                "ssoClientSecretKeyVaultPath": "str",
                "ssoSecretType": "str",
                "ssoadfsAuthority": "str",
                "startVMOnConnect": bool,
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
                "validationEnvironment": bool,
                "vmTemplate": "str",
            },
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.host_pools.delete(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.host_pools.update(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_by_resource_group(self, resource_group):
        response = self.client.host_pools.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2024-04-03",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.host_pools.list(
            api_version="2024-04-03",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_retrieve_registration_token(self, resource_group):
        response = await self.client.host_pools.retrieve_registration_token(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list_registration_tokens(self, resource_group):
        response = await self.client.host_pools.list_registration_tokens(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...
