# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.desktopvirtualization.aio import DesktopVirtualizationMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDesktopVirtualizationMgmtMSIXPackagesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DesktopVirtualizationMgmtClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_get(self, resource_group):
        response = await self.client.msix_packages.get(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            msix_package_full_name="str",
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_create_or_update(self, resource_group):
        response = await self.client.msix_packages.create_or_update(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            msix_package_full_name="str",
            msix_package={
                "displayName": "str",
                "id": "str",
                "imagePath": "str",
                "isActive": bool,
                "isRegularRegistration": bool,
                "lastUpdated": "2020-02-20 00:00:00",
                "name": "str",
                "packageApplications": [
                    {
                        "appId": "str",
                        "appUserModelID": "str",
                        "description": "str",
                        "friendlyName": "str",
                        "iconImageName": "str",
                        "rawIcon": bytes("bytes", encoding="utf-8"),
                        "rawPng": bytes("bytes", encoding="utf-8"),
                    }
                ],
                "packageDependencies": [{"dependencyName": "str", "minVersion": "str", "publisher": "str"}],
                "packageFamilyName": "str",
                "packageName": "str",
                "packageRelativePath": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
                "version": "str",
            },
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_delete(self, resource_group):
        response = await self.client.msix_packages.delete(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            msix_package_full_name="str",
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_update(self, resource_group):
        response = await self.client.msix_packages.update(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            msix_package_full_name="str",
            api_version="2024-04-03",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_list(self, resource_group):
        response = self.client.msix_packages.list(
            resource_group_name=resource_group.name,
            host_pool_name="str",
            api_version="2024-04-03",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
