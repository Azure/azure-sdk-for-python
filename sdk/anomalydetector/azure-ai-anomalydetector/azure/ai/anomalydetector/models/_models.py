# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AlignPolicy(_model_base.Model):
    """Manner of aligning multiple variables.

    :ivar align_mode: Field that indicates how to align different variables to the same
     time range. Known values are: "Inner" and "Outer".
    :vartype align_mode: str or ~azure.ai.anomalydetector.models.AlignMode
    :ivar fill_n_a_method: Field that indicates how missing values will be filled. Known values
     are: "Previous", "Subsequent", "Linear", "Zero", and "Fixed".
    :vartype fill_n_a_method: str or ~azure.ai.anomalydetector.models.FillNAMethod
    :ivar padding_value: Field that's required when fillNAMethod is Fixed.
    :vartype padding_value: float
    """

    align_mode: Optional[Union[str, "_models.AlignMode"]] = rest_field(name="alignMode")
    """Field that indicates how to align different variables to the same
     time range. Known values are: \"Inner\" and \"Outer\"."""
    fill_n_a_method: Optional[Union[str, "_models.FillNAMethod"]] = rest_field(name="fillNAMethod")
    """Field that indicates how missing values will be filled. Known values are: \"Previous\",
     \"Subsequent\", \"Linear\", \"Zero\", and \"Fixed\"."""
    padding_value: Optional[float] = rest_field(name="paddingValue")
    """Field that's required when fillNAMethod is Fixed."""

    @overload
    def __init__(
        self,
        *,
        align_mode: Optional[Union[str, "_models.AlignMode"]] = None,
        fill_n_a_method: Optional[Union[str, "_models.FillNAMethod"]] = None,
        padding_value: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnomalyDetectionModel(_model_base.Model):
    """Response of getting a model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar model_id: Model identifier. Required.
    :vartype model_id: str
    :ivar created_time: Date and time (UTC) when the model was created. Required.
    :vartype created_time: ~datetime.datetime
    :ivar last_updated_time: Date and time (UTC) when the model was last updated. Required.
    :vartype last_updated_time: ~datetime.datetime
    :ivar model_info: Training result of a model, including its status, errors, and diagnostics
     information.
    :vartype model_info: ~azure.ai.anomalydetector.models.ModelInfo
    """

    model_id: str = rest_field(name="modelId", readonly=True)
    """Model identifier. Required."""
    created_time: datetime.datetime = rest_field(name="createdTime")
    """Date and time (UTC) when the model was created. Required."""
    last_updated_time: datetime.datetime = rest_field(name="lastUpdatedTime")
    """Date and time (UTC) when the model was last updated. Required."""
    model_info: Optional["_models.ModelInfo"] = rest_field(name="modelInfo")
    """Training result of a model, including its status, errors, and diagnostics
     information."""

    @overload
    def __init__(
        self,
        *,
        created_time: datetime.datetime,
        last_updated_time: datetime.datetime,
        model_info: Optional["_models.ModelInfo"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnomalyDetectorError(_model_base.Model):
    """Error information that the API returned.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Error code. Required. Known values are: "InvalidCustomInterval", "BadArgument",
     "InvalidGranularity", "InvalidPeriod", "InvalidModelArgument", "InvalidSeries",
     "InvalidJsonFormat", "RequiredGranularity", "RequiredSeries", "InvalidImputeMode", and
     "InvalidImputeFixedValue".
    :vartype code: str or ~azure.ai.anomalydetector.models.AnomalyDetectorErrorCodes
    :ivar message: Message that explains the error that the service reported. Required.
    :vartype message: str
    """

    code: Union[str, "_models.AnomalyDetectorErrorCodes"] = rest_field()
    """Error code. Required. Known values are: \"InvalidCustomInterval\", \"BadArgument\",
     \"InvalidGranularity\", \"InvalidPeriod\", \"InvalidModelArgument\", \"InvalidSeries\",
     \"InvalidJsonFormat\", \"RequiredGranularity\", \"RequiredSeries\", \"InvalidImputeMode\", and
     \"InvalidImputeFixedValue\"."""
    message: str = rest_field()
    """Message that explains the error that the service reported. Required."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.AnomalyDetectorErrorCodes"],
        message: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnomalyInterpretation(_model_base.Model):
    """Interpretation of the anomalous time stamp.

    :ivar variable: Variable.
    :vartype variable: str
    :ivar contribution_score: This score shows the percentage that contributes to the anomalous
     time stamp. It's a
     number between 0 and 1.
    :vartype contribution_score: float
    :ivar correlation_changes: Correlation changes among the anomalous variables.
    :vartype correlation_changes: ~azure.ai.anomalydetector.models.CorrelationChanges
    """

    variable: Optional[str] = rest_field()
    """Variable."""
    contribution_score: Optional[float] = rest_field(name="contributionScore")
    """This score shows the percentage that contributes to the anomalous time stamp. It's a
     number between 0 and 1."""
    correlation_changes: Optional["_models.CorrelationChanges"] = rest_field(name="correlationChanges")
    """Correlation changes among the anomalous variables."""

    @overload
    def __init__(
        self,
        *,
        variable: Optional[str] = None,
        contribution_score: Optional[float] = None,
        correlation_changes: Optional["_models.CorrelationChanges"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnomalyState(_model_base.Model):
    """Anomaly status and information.

    All required parameters must be populated in order to send to Azure.

    :ivar timestamp: Time stamp for this anomaly. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar value: Detailed value of this anomalous time stamp.
    :vartype value: ~azure.ai.anomalydetector.models.AnomalyValue
    :ivar errors: Error message for the current time stamp.
    :vartype errors: list[~azure.ai.anomalydetector.models.ErrorResponse]
    """

    timestamp: datetime.datetime = rest_field()
    """Time stamp for this anomaly. Required."""
    value: Optional["_models.AnomalyValue"] = rest_field()
    """Detailed value of this anomalous time stamp."""
    errors: Optional[List["_models.ErrorResponse"]] = rest_field()
    """Error message for the current time stamp."""

    @overload
    def __init__(
        self,
        *,
        timestamp: datetime.datetime,
        value: Optional["_models.AnomalyValue"] = None,
        errors: Optional[List["_models.ErrorResponse"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AnomalyValue(_model_base.Model):
    """Detailed information of the anomalous time stamp.

    All required parameters must be populated in order to send to Azure.

    :ivar is_anomaly: True if an anomaly is detected at the current time stamp. Required.
    :vartype is_anomaly: bool
    :ivar severity: Indicates the significance of the anomaly. The higher the severity, the more
     significant the anomaly is. Required.
    :vartype severity: float
    :ivar score: Raw anomaly score of severity, to help indicate the degree of abnormality.
     Required.
    :vartype score: float
    :ivar interpretation: Interpretation of this anomalous time stamp.
    :vartype interpretation: list[~azure.ai.anomalydetector.models.AnomalyInterpretation]
    """

    is_anomaly: bool = rest_field(name="isAnomaly")
    """True if an anomaly is detected at the current time stamp. Required."""
    severity: float = rest_field()
    """Indicates the significance of the anomaly. The higher the severity, the more
     significant the anomaly is. Required."""
    score: float = rest_field()
    """Raw anomaly score of severity, to help indicate the degree of abnormality. Required."""
    interpretation: Optional[List["_models.AnomalyInterpretation"]] = rest_field()
    """Interpretation of this anomalous time stamp."""

    @overload
    def __init__(
        self,
        *,
        is_anomaly: bool,
        severity: float,
        score: float,
        interpretation: Optional[List["_models.AnomalyInterpretation"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CorrelationChanges(_model_base.Model):
    """Correlation changes among the anomalous variables.

    :ivar changed_variables: Correlated variables that have correlation changes under an anomaly.
    :vartype changed_variables: list[str]
    """

    changed_variables: Optional[List[str]] = rest_field(name="changedVariables")
    """Correlated variables that have correlation changes under an anomaly."""

    @overload
    def __init__(
        self,
        *,
        changed_variables: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DiagnosticsInfo(_model_base.Model):
    """Diagnostics information to help inspect the states of a model or variable.

    :ivar model_state: Model status.
    :vartype model_state: ~azure.ai.anomalydetector.models.ModelState
    :ivar variable_states: Variable status.
    :vartype variable_states: list[~azure.ai.anomalydetector.models.VariableState]
    """

    model_state: Optional["_models.ModelState"] = rest_field(name="modelState")
    """Model status."""
    variable_states: Optional[List["_models.VariableState"]] = rest_field(name="variableStates")
    """Variable status."""

    @overload
    def __init__(
        self,
        *,
        model_state: Optional["_models.ModelState"] = None,
        variable_states: Optional[List["_models.VariableState"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """Error information that the API returned.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Error code. Required.
    :vartype code: str
    :ivar message: Message that explains the error that the service reported. Required.
    :vartype message: str
    """

    code: str = rest_field()
    """Error code. Required."""
    message: str = rest_field()
    """Message that explains the error that the service reported. Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ModelInfo(_model_base.Model):
    """Training result of a model, including its status, errors, and diagnostics
    information.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source: Source link to the input data to indicate an accessible Azure Storage URI.
     It either points to an Azure Blob Storage folder or points to a CSV file in
     Azure Blob Storage, based on your data schema selection. Required.
    :vartype data_source: str
    :ivar data_schema: Data schema of the input data source. The default
     is OneTable. Known values are: "OneTable" and "MultiTable".
    :vartype data_schema: str or ~azure.ai.anomalydetector.models.DataSchema
    :ivar start_time: Start date/time of training data, which should be
     in ISO 8601 format. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: End date/time of training data, which should be
     in ISO 8601 format. Required.
    :vartype end_time: ~datetime.datetime
    :ivar display_name: Display name of the model. Maximum length is 24
     characters.
    :vartype display_name: str
    :ivar sliding_window: Number of previous time stamps that will be used to
     detect whether the time stamp is an anomaly or not.
    :vartype sliding_window: int
    :ivar align_policy: Manner of aligning multiple variables.
    :vartype align_policy: ~azure.ai.anomalydetector.models.AlignPolicy
    :ivar status: Model status. Known values are: "CREATED", "RUNNING", "READY", and "FAILED".
    :vartype status: str or ~azure.ai.anomalydetector.models.ModelStatus
    :ivar errors: Error messages after failure to create a model.
    :vartype errors: list[~azure.ai.anomalydetector.models.ErrorResponse]
    :ivar diagnostics_info: Diagnostics information to help inspect the states of a model or
     variable.
    :vartype diagnostics_info: ~azure.ai.anomalydetector.models.DiagnosticsInfo
    """

    data_source: str = rest_field(name="dataSource")
    """Source link to the input data to indicate an accessible Azure Storage URI.
     It either points to an Azure Blob Storage folder or points to a CSV file in
     Azure Blob Storage, based on your data schema selection. Required."""
    data_schema: Optional[Union[str, "_models.DataSchema"]] = rest_field(name="dataSchema")
    """Data schema of the input data source. The default
     is OneTable. Known values are: \"OneTable\" and \"MultiTable\"."""
    start_time: datetime.datetime = rest_field(name="startTime")
    """Start date/time of training data, which should be
     in ISO 8601 format. Required."""
    end_time: datetime.datetime = rest_field(name="endTime")
    """End date/time of training data, which should be
     in ISO 8601 format. Required."""
    display_name: Optional[str] = rest_field(name="displayName")
    """Display name of the model. Maximum length is 24
     characters."""
    sliding_window: Optional[int] = rest_field(name="slidingWindow")
    """Number of previous time stamps that will be used to
     detect whether the time stamp is an anomaly or not."""
    align_policy: Optional["_models.AlignPolicy"] = rest_field(name="alignPolicy")
    """Manner of aligning multiple variables."""
    status: Optional[Union[str, "_models.ModelStatus"]] = rest_field(readonly=True)
    """Model status. Known values are: \"CREATED\", \"RUNNING\", \"READY\", and \"FAILED\"."""
    errors: Optional[List["_models.ErrorResponse"]] = rest_field(readonly=True)
    """Error messages after failure to create a model."""
    diagnostics_info: Optional["_models.DiagnosticsInfo"] = rest_field(name="diagnosticsInfo", readonly=True)
    """Diagnostics information to help inspect the states of a model or variable."""

    @overload
    def __init__(
        self,
        *,
        data_source: str,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
        data_schema: Optional[Union[str, "_models.DataSchema"]] = None,
        display_name: Optional[str] = None,
        sliding_window: Optional[int] = None,
        align_policy: Optional["_models.AlignPolicy"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ModelList(_model_base.Model):
    """Response of listing models.

    All required parameters must be populated in order to send to Azure.

    :ivar models: List of models. Required.
    :vartype models: list[~azure.ai.anomalydetector.models.AnomalyDetectionModel]
    :ivar current_count: Number of trained multivariate models. Required.
    :vartype current_count: int
    :ivar max_count: Maximum number of models that can be trained for this Anomaly Detector
     resource. Required.
    :vartype max_count: int
    :ivar next_link: Link to fetch more models.
    :vartype next_link: str
    """

    models: List["_models.AnomalyDetectionModel"] = rest_field()
    """List of models. Required."""
    current_count: int = rest_field(name="currentCount")
    """Number of trained multivariate models. Required."""
    max_count: int = rest_field(name="maxCount")
    """Maximum number of models that can be trained for this Anomaly Detector resource. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """Link to fetch more models."""

    @overload
    def __init__(
        self,
        *,
        models: List["_models.AnomalyDetectionModel"],
        current_count: int,
        max_count: int,
        next_link: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ModelState(_model_base.Model):
    """Model status.

    :ivar epoch_ids: Number of passes of the entire training dataset that the
     algorithm has completed.
    :vartype epoch_ids: list[int]
    :ivar train_losses: List of metrics used to assess how the model fits the training data for
     each
     epoch.
    :vartype train_losses: list[float]
    :ivar validation_losses: List of metrics used to assess how the model fits the validation set
     for each
     epoch.
    :vartype validation_losses: list[float]
    :ivar latencies_in_seconds: Latency for each epoch.
    :vartype latencies_in_seconds: list[float]
    """

    epoch_ids: Optional[List[int]] = rest_field(name="epochIds")
    """Number of passes of the entire training dataset that the
     algorithm has completed."""
    train_losses: Optional[List[float]] = rest_field(name="trainLosses")
    """List of metrics used to assess how the model fits the training data for each
     epoch."""
    validation_losses: Optional[List[float]] = rest_field(name="validationLosses")
    """List of metrics used to assess how the model fits the validation set for each
     epoch."""
    latencies_in_seconds: Optional[List[float]] = rest_field(name="latenciesInSeconds")
    """Latency for each epoch."""

    @overload
    def __init__(
        self,
        *,
        epoch_ids: Optional[List[int]] = None,
        train_losses: Optional[List[float]] = None,
        validation_losses: Optional[List[float]] = None,
        latencies_in_seconds: Optional[List[float]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MultivariateBatchDetectionOptions(_model_base.Model):
    """Detection request for batch inference. This is an asynchronous inference that
    will need another API to get detection results.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source: Source link to the input data to indicate an accessible Azure Storage URI.
     It either points to an Azure Blob Storage folder or points to a CSV file in
     Azure Blob Storage, based on your data schema selection. The data schema should
     be exactly the same as those used in the training phase. Required.
    :vartype data_source: str
    :ivar top_contributor_count: Number of top contributed
     variables for one anomalous time stamp in the response. The default is
     10. Required.
    :vartype top_contributor_count: int
    :ivar start_time: Start date/time of data for detection, which should
     be in ISO 8601 format. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: End date/time of data for detection, which should
     be in ISO 8601 format. Required.
    :vartype end_time: ~datetime.datetime
    """

    data_source: str = rest_field(name="dataSource")
    """Source link to the input data to indicate an accessible Azure Storage URI.
     It either points to an Azure Blob Storage folder or points to a CSV file in
     Azure Blob Storage, based on your data schema selection. The data schema should
     be exactly the same as those used in the training phase. Required."""
    top_contributor_count: int = rest_field(name="topContributorCount")
    """Number of top contributed
     variables for one anomalous time stamp in the response. The default is
     10. Required."""
    start_time: datetime.datetime = rest_field(name="startTime")
    """Start date/time of data for detection, which should
     be in ISO 8601 format. Required."""
    end_time: datetime.datetime = rest_field(name="endTime")
    """End date/time of data for detection, which should
     be in ISO 8601 format. Required."""

    @overload
    def __init__(
        self,
        *,
        data_source: str,
        top_contributor_count: int,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MultivariateBatchDetectionResultSummary(_model_base.Model):
    """Multivariate anomaly detection status.

    All required parameters must be populated in order to send to Azure.

    :ivar status: Status of detection results. Required. Known values are: "CREATED", "RUNNING",
     "READY", and "FAILED".
    :vartype status: str or ~azure.ai.anomalydetector.models.MultivariateBatchDetectionStatus
    :ivar errors: Error message when detection fails.
    :vartype errors: list[~azure.ai.anomalydetector.models.ErrorResponse]
    :ivar variable_states: Variable status.
    :vartype variable_states: list[~azure.ai.anomalydetector.models.VariableState]
    :ivar setup_info: Detection request for batch inference. This is an asynchronous inference that
     will need another API to get detection results. Required.
    :vartype setup_info: ~azure.ai.anomalydetector.models.MultivariateBatchDetectionOptions
    """

    status: Union[str, "_models.MultivariateBatchDetectionStatus"] = rest_field()
    """Status of detection results. Required. Known values are: \"CREATED\", \"RUNNING\", \"READY\",
     and \"FAILED\"."""
    errors: Optional[List["_models.ErrorResponse"]] = rest_field()
    """Error message when detection fails."""
    variable_states: Optional[List["_models.VariableState"]] = rest_field(name="variableStates")
    """Variable status."""
    setup_info: "_models.MultivariateBatchDetectionOptions" = rest_field(name="setupInfo")
    """Detection request for batch inference. This is an asynchronous inference that
     will need another API to get detection results. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.MultivariateBatchDetectionStatus"],
        setup_info: "_models.MultivariateBatchDetectionOptions",
        errors: Optional[List["_models.ErrorResponse"]] = None,
        variable_states: Optional[List["_models.VariableState"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MultivariateDetectionResult(_model_base.Model):
    """Detection results for the resultId value.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar result_id: Result identifier that's used to fetch the results of an inference call.
     Required.
    :vartype result_id: str
    :ivar summary: Multivariate anomaly detection status. Required.
    :vartype summary: ~azure.ai.anomalydetector.models.MultivariateBatchDetectionResultSummary
    :ivar results: Detection result for each time stamp. Required.
    :vartype results: list[~azure.ai.anomalydetector.models.AnomalyState]
    """

    result_id: str = rest_field(name="resultId", readonly=True)
    """Result identifier that's used to fetch the results of an inference call. Required."""
    summary: "_models.MultivariateBatchDetectionResultSummary" = rest_field()
    """Multivariate anomaly detection status. Required."""
    results: List["_models.AnomalyState"] = rest_field()
    """Detection result for each time stamp. Required."""

    @overload
    def __init__(
        self,
        *,
        summary: "_models.MultivariateBatchDetectionResultSummary",
        results: List["_models.AnomalyState"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MultivariateLastDetectionOptions(_model_base.Model):
    """Request of the last detection.

    All required parameters must be populated in order to send to Azure.

    :ivar variables: Contains the inference data, including the name, time stamps (ISO 8601), and
     values of variables. Required.
    :vartype variables: list[~azure.ai.anomalydetector.models.VariableValues]
    :ivar top_contributor_count: Number of top contributed
     variables for one anomalous time stamp in the response. The default is
     10.
    :vartype top_contributor_count: int
    """

    variables: List["_models.VariableValues"] = rest_field()
    """Contains the inference data, including the name, time stamps (ISO 8601), and
     values of variables. Required."""
    top_contributor_count: int = rest_field(name="topContributorCount", default=10)
    """Number of top contributed
     variables for one anomalous time stamp in the response. The default is
     10."""

    @overload
    def __init__(
        self,
        *,
        variables: List["_models.VariableValues"],
        top_contributor_count: int = 10,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MultivariateLastDetectionResult(_model_base.Model):
    """Results of the last detection.

    :ivar variable_states: Variable status.
    :vartype variable_states: list[~azure.ai.anomalydetector.models.VariableState]
    :ivar results: Anomaly status and information.
    :vartype results: list[~azure.ai.anomalydetector.models.AnomalyState]
    """

    variable_states: Optional[List["_models.VariableState"]] = rest_field(name="variableStates")
    """Variable status."""
    results: Optional[List["_models.AnomalyState"]] = rest_field()
    """Anomaly status and information."""

    @overload
    def __init__(
        self,
        *,
        variable_states: Optional[List["_models.VariableState"]] = None,
        results: Optional[List["_models.AnomalyState"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TimeSeriesPoint(_model_base.Model):
    """Definition of input time series points.

    All required parameters must be populated in order to send to Azure.

    :ivar timestamp: Argument that indicates the time stamp of a data point (ISO8601 format).
    :vartype timestamp: ~datetime.datetime
    :ivar value: Measurement of that point. Required.
    :vartype value: float
    """

    timestamp: Optional[datetime.datetime] = rest_field()
    """Argument that indicates the time stamp of a data point (ISO8601 format)."""
    value: float = rest_field()
    """Measurement of that point. Required."""

    @overload
    def __init__(
        self,
        *,
        value: float,
        timestamp: Optional[datetime.datetime] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UnivariateChangePointDetectionOptions(_model_base.Model):
    """Request of change point detection.

    All required parameters must be populated in order to send to Azure.

    :ivar series: Time series data points. Points should be sorted by time stamp in ascending
     order to match the change point detection result. Required.
    :vartype series: list[~azure.ai.anomalydetector.models.TimeSeriesPoint]
    :ivar granularity: Granularity is used to verify whether the input series is valid. Required.
     Known values are: "yearly", "monthly", "weekly", "daily", "hourly", "minutely", "secondly",
     "microsecond", and "none".
    :vartype granularity: str or ~azure.ai.anomalydetector.models.TimeGranularity
    :ivar custom_interval: A custom interval is used to set a nonstandard time interval. For
     example, if the
     series is 5 minutes, the request can be set as {"granularity":"minutely",
     "customInterval":5}.
    :vartype custom_interval: int
    :ivar period: Argument that indicates the periodic value of a time series. If the value is null
     or
     not present, the API will determine the period automatically.
    :vartype period: int
    :ivar stable_trend_window: Argument that indicates an advanced model parameter. A default
     stableTrendWindow value will
     be used in detection.
    :vartype stable_trend_window: int
    :ivar threshold: Argument that indicates an advanced model parameter between 0.0 and 1.0. The
     lower the
     value is, the larger the trend error is, which means less change point will
     be accepted.
    :vartype threshold: float
    """

    series: List["_models.TimeSeriesPoint"] = rest_field()
    """Time series data points. Points should be sorted by time stamp in ascending
     order to match the change point detection result. Required."""
    granularity: Union[str, "_models.TimeGranularity"] = rest_field()
    """Granularity is used to verify whether the input series is valid. Required. Known values are:
     \"yearly\", \"monthly\", \"weekly\", \"daily\", \"hourly\", \"minutely\", \"secondly\",
     \"microsecond\", and \"none\"."""
    custom_interval: Optional[int] = rest_field(name="customInterval")
    """A custom interval is used to set a nonstandard time interval. For example, if the
     series is 5 minutes, the request can be set as {\"granularity\":\"minutely\",
     \"customInterval\":5}."""
    period: Optional[int] = rest_field()
    """Argument that indicates the periodic value of a time series. If the value is null or
     not present, the API will determine the period automatically."""
    stable_trend_window: Optional[int] = rest_field(name="stableTrendWindow")
    """Argument that indicates an advanced model parameter. A default stableTrendWindow value will
     be used in detection."""
    threshold: Optional[float] = rest_field()
    """Argument that indicates an advanced model parameter between 0.0 and 1.0. The lower the
     value is, the larger the trend error is, which means less change point will
     be accepted."""

    @overload
    def __init__(
        self,
        *,
        series: List["_models.TimeSeriesPoint"],
        granularity: Union[str, "_models.TimeGranularity"],
        custom_interval: Optional[int] = None,
        period: Optional[int] = None,
        stable_trend_window: Optional[int] = None,
        threshold: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UnivariateChangePointDetectionResult(_model_base.Model):
    """Response of change point detection.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar period: Frequency extracted from the series. Zero means no recurrent pattern has been
     found.
    :vartype period: int
    :ivar is_change_point: Change point properties for each input point. True means
     an anomaly (either negative or positive) has been detected. The index of the
     array is consistent with the input series.
    :vartype is_change_point: list[bool]
    :ivar confidence_scores: Change point confidence of each point.
    :vartype confidence_scores: list[float]
    """

    period: Optional[int] = rest_field(readonly=True)
    """Frequency extracted from the series. Zero means no recurrent pattern has been
     found."""
    is_change_point: Optional[List[bool]] = rest_field(name="isChangePoint")
    """Change point properties for each input point. True means
     an anomaly (either negative or positive) has been detected. The index of the
     array is consistent with the input series."""
    confidence_scores: Optional[List[float]] = rest_field(name="confidenceScores")
    """Change point confidence of each point."""

    @overload
    def __init__(
        self,
        *,
        is_change_point: Optional[List[bool]] = None,
        confidence_scores: Optional[List[float]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UnivariateDetectionOptions(_model_base.Model):
    """Request of the entire or last anomaly detection.

    All required parameters must be populated in order to send to Azure.

    :ivar series: Time series data points. Points should be sorted by time stamp in ascending
     order to match the anomaly detection result. If the data is not sorted
     correctly or there's a duplicated time stamp, the API won't work. In such
     a case, an error message is returned. Required.
    :vartype series: list[~azure.ai.anomalydetector.models.TimeSeriesPoint]
    :ivar granularity: Argument that indicates time granularity. If granularity is not present, the
     value
     is none by default. If granularity is none, the time stamp property in the time
     series point can be absent. Known values are: "yearly", "monthly", "weekly", "daily",
     "hourly", "minutely", "secondly", "microsecond", and "none".
    :vartype granularity: str or ~azure.ai.anomalydetector.models.TimeGranularity
    :ivar custom_interval: A custom interval is used to set a nonstandard time interval. For
     example, if the
     series is 5 minutes, the request can be set as {"granularity":"minutely",
     "customInterval":5}.
    :vartype custom_interval: int
    :ivar period: Argument that indicates the periodic value of a time series. If the value is null
     or
     is not present, the API determines the period automatically.
    :vartype period: int
    :ivar max_anomaly_ratio: Argument that indicates an advanced model parameter. It's the maximum
     anomaly ratio in a time series.
    :vartype max_anomaly_ratio: float
    :ivar sensitivity: Argument that indicates an advanced model parameter between 0 and 99. The
     lower the value
     is, the larger the margin value is, which means fewer anomalies will be
     accepted.
    :vartype sensitivity: int
    :ivar impute_mode: Specifies how to deal with missing values in the input series. It's used
     when granularity is not "none". Known values are: "auto", "previous", "linear", "fixed",
     "zero", and "notFill".
    :vartype impute_mode: str or ~azure.ai.anomalydetector.models.ImputeMode
    :ivar impute_fixed_value: Specifies the value to fill. It's used when granularity is not "none"
     and imputeMode is "fixed".
    :vartype impute_fixed_value: float
    """

    series: List["_models.TimeSeriesPoint"] = rest_field()
    """Time series data points. Points should be sorted by time stamp in ascending
     order to match the anomaly detection result. If the data is not sorted
     correctly or there's a duplicated time stamp, the API won't work. In such
     a case, an error message is returned. Required."""
    granularity: Optional[Union[str, "_models.TimeGranularity"]] = rest_field()
    """Argument that indicates time granularity. If granularity is not present, the value
     is none by default. If granularity is none, the time stamp property in the time
     series point can be absent. Known values are: \"yearly\", \"monthly\", \"weekly\", \"daily\",
     \"hourly\", \"minutely\", \"secondly\", \"microsecond\", and \"none\"."""
    custom_interval: Optional[int] = rest_field(name="customInterval")
    """A custom interval is used to set a nonstandard time interval. For example, if the
     series is 5 minutes, the request can be set as {\"granularity\":\"minutely\",
     \"customInterval\":5}."""
    period: Optional[int] = rest_field()
    """Argument that indicates the periodic value of a time series. If the value is null or
     is not present, the API determines the period automatically."""
    max_anomaly_ratio: Optional[float] = rest_field(name="maxAnomalyRatio")
    """Argument that indicates an advanced model parameter. It's the maximum anomaly ratio in a time
     series."""
    sensitivity: Optional[int] = rest_field()
    """Argument that indicates an advanced model parameter between 0 and 99. The lower the value
     is, the larger the margin value is, which means fewer anomalies will be
     accepted."""
    impute_mode: Optional[Union[str, "_models.ImputeMode"]] = rest_field(name="imputeMode")
    """Specifies how to deal with missing values in the input series. It's used
     when granularity is not \"none\". Known values are: \"auto\", \"previous\", \"linear\",
     \"fixed\", \"zero\", and \"notFill\"."""
    impute_fixed_value: Optional[float] = rest_field(name="imputeFixedValue")
    """Specifies the value to fill. It's used when granularity is not \"none\"
     and imputeMode is \"fixed\"."""

    @overload
    def __init__(
        self,
        *,
        series: List["_models.TimeSeriesPoint"],
        granularity: Optional[Union[str, "_models.TimeGranularity"]] = None,
        custom_interval: Optional[int] = None,
        period: Optional[int] = None,
        max_anomaly_ratio: Optional[float] = None,
        sensitivity: Optional[int] = None,
        impute_mode: Optional[Union[str, "_models.ImputeMode"]] = None,
        impute_fixed_value: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UnivariateEntireDetectionResult(_model_base.Model):
    """Response of the entire anomaly detection.

    All required parameters must be populated in order to send to Azure.

    :ivar period: Frequency extracted from the series. Zero means no recurrent pattern has been
     found. Required.
    :vartype period: int
    :ivar expected_values: Expected value for each input point. The index of the
     array is consistent with the input series. Required.
    :vartype expected_values: list[float]
    :ivar upper_margins: Upper margin of each input point. UpperMargin is used to
     calculate upperBoundary, which is equal to expectedValue + (100 -
     marginScale)*upperMargin. Anomalies in the response can be filtered by
     upperBoundary and lowerBoundary. Adjusting the marginScale value can help filter less
     significant anomalies on the client side. The index of the array is
     consistent with the input series. Required.
    :vartype upper_margins: list[float]
    :ivar lower_margins: Lower margin of each input point. LowerMargin is used to
     calculate lowerBoundary, which is equal to expectedValue - (100 -
     marginScale)*lowerMargin. Points between the boundary can be marked as normal
     ones on the client side. The index of the array is consistent with the input
     series. Required.
    :vartype lower_margins: list[float]
    :ivar is_anomaly: Anomaly properties for each input point. True means an
     anomaly (either negative or positive) has been detected. The index of the array
     is consistent with the input series. Required.
    :vartype is_anomaly: list[bool]
    :ivar is_negative_anomaly: Anomaly status in a negative direction for each input
     point. True means a negative anomaly has been detected. A negative anomaly
     means the point is detected as an anomaly and its real value is smaller than
     the expected one. The index of the array is consistent with the input series. Required.
    :vartype is_negative_anomaly: list[bool]
    :ivar is_positive_anomaly: Anomaly status in a positive direction for each input
     point. True means a positive anomaly has been detected. A positive anomaly
     means the point is detected as an anomaly and its real value is larger than the
     expected one. The index of the array is consistent with the input series. Required.
    :vartype is_positive_anomaly: list[bool]
    :ivar severity: Severity score for each input point. The larger the value is, the more
     severe the anomaly is. For normal points, the severity is always 0.
    :vartype severity: list[float]
    """

    period: int = rest_field()
    """Frequency extracted from the series. Zero means no recurrent pattern has been
     found. Required."""
    expected_values: List[float] = rest_field(name="expectedValues")
    """Expected value for each input point. The index of the
     array is consistent with the input series. Required."""
    upper_margins: List[float] = rest_field(name="upperMargins")
    """Upper margin of each input point. UpperMargin is used to
     calculate upperBoundary, which is equal to expectedValue + (100 -
     marginScale)*upperMargin. Anomalies in the response can be filtered by
     upperBoundary and lowerBoundary. Adjusting the marginScale value can help filter less
     significant anomalies on the client side. The index of the array is
     consistent with the input series. Required."""
    lower_margins: List[float] = rest_field(name="lowerMargins")
    """Lower margin of each input point. LowerMargin is used to
     calculate lowerBoundary, which is equal to expectedValue - (100 -
     marginScale)*lowerMargin. Points between the boundary can be marked as normal
     ones on the client side. The index of the array is consistent with the input
     series. Required."""
    is_anomaly: List[bool] = rest_field(name="isAnomaly")
    """Anomaly properties for each input point. True means an
     anomaly (either negative or positive) has been detected. The index of the array
     is consistent with the input series. Required."""
    is_negative_anomaly: List[bool] = rest_field(name="isNegativeAnomaly")
    """Anomaly status in a negative direction for each input
     point. True means a negative anomaly has been detected. A negative anomaly
     means the point is detected as an anomaly and its real value is smaller than
     the expected one. The index of the array is consistent with the input series. Required."""
    is_positive_anomaly: List[bool] = rest_field(name="isPositiveAnomaly")
    """Anomaly status in a positive direction for each input
     point. True means a positive anomaly has been detected. A positive anomaly
     means the point is detected as an anomaly and its real value is larger than the
     expected one. The index of the array is consistent with the input series. Required."""
    severity: Optional[List[float]] = rest_field()
    """Severity score for each input point. The larger the value is, the more
     severe the anomaly is. For normal points, the severity is always 0."""

    @overload
    def __init__(
        self,
        *,
        period: int,
        expected_values: List[float],
        upper_margins: List[float],
        lower_margins: List[float],
        is_anomaly: List[bool],
        is_negative_anomaly: List[bool],
        is_positive_anomaly: List[bool],
        severity: Optional[List[float]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UnivariateLastDetectionResult(_model_base.Model):
    """Response of the last anomaly detection.

    All required parameters must be populated in order to send to Azure.

    :ivar period: Frequency extracted from the series. Zero means no recurrent pattern has been
     found. Required.
    :vartype period: int
    :ivar suggested_window: Suggested input series points needed for detecting the latest point.
     Required.
    :vartype suggested_window: int
    :ivar expected_value: Expected value of the latest point. Required.
    :vartype expected_value: float
    :ivar upper_margin: Upper margin of the latest point. UpperMargin is used to calculate
     upperBoundary, which is equal to expectedValue + (100 - marginScale)*upperMargin.
     If the value of latest point is between upperBoundary and lowerBoundary, it
     should be treated as a normal value. Adjusting the marginScale value enables the anomaly
     status of the latest point to be changed. Required.
    :vartype upper_margin: float
    :ivar lower_margin: Lower margin of the latest point. LowerMargin is used to calculate
     lowerBoundary, which is equal to expectedValue - (100 - marginScale)*lowerMargin. Required.
    :vartype lower_margin: float
    :ivar is_anomaly: Anomaly status of the latest point. True means the latest point is an
     anomaly,
     either in the negative direction or in the positive direction. Required.
    :vartype is_anomaly: bool
    :ivar is_negative_anomaly: Anomaly status of the latest point in a negative direction. True
     means the latest
     point is an anomaly and its real value is smaller than the expected one. Required.
    :vartype is_negative_anomaly: bool
    :ivar is_positive_anomaly: Anomaly status of the latest point in a positive direction. True
     means the latest
     point is an anomaly and its real value is larger than the expected one. Required.
    :vartype is_positive_anomaly: bool
    :ivar severity: Severity score for the last input point. The larger the value is, the more
     severe the anomaly is. For normal points, the severity is always 0.
    :vartype severity: float
    """

    period: int = rest_field()
    """Frequency extracted from the series. Zero means no recurrent pattern has been
     found. Required."""
    suggested_window: int = rest_field(name="suggestedWindow")
    """Suggested input series points needed for detecting the latest point. Required."""
    expected_value: float = rest_field(name="expectedValue")
    """Expected value of the latest point. Required."""
    upper_margin: float = rest_field(name="upperMargin")
    """Upper margin of the latest point. UpperMargin is used to calculate
     upperBoundary, which is equal to expectedValue + (100 - marginScale)*upperMargin.
     If the value of latest point is between upperBoundary and lowerBoundary, it
     should be treated as a normal value. Adjusting the marginScale value enables the anomaly
     status of the latest point to be changed. Required."""
    lower_margin: float = rest_field(name="lowerMargin")
    """Lower margin of the latest point. LowerMargin is used to calculate
     lowerBoundary, which is equal to expectedValue - (100 - marginScale)*lowerMargin. Required."""
    is_anomaly: bool = rest_field(name="isAnomaly")
    """Anomaly status of the latest point. True means the latest point is an anomaly,
     either in the negative direction or in the positive direction. Required."""
    is_negative_anomaly: bool = rest_field(name="isNegativeAnomaly")
    """Anomaly status of the latest point in a negative direction. True means the latest
     point is an anomaly and its real value is smaller than the expected one. Required."""
    is_positive_anomaly: bool = rest_field(name="isPositiveAnomaly")
    """Anomaly status of the latest point in a positive direction. True means the latest
     point is an anomaly and its real value is larger than the expected one. Required."""
    severity: Optional[float] = rest_field()
    """Severity score for the last input point. The larger the value is, the more
     severe the anomaly is. For normal points, the severity is always 0."""

    @overload
    def __init__(
        self,
        *,
        period: int,
        suggested_window: int,
        expected_value: float,
        upper_margin: float,
        lower_margin: float,
        is_anomaly: bool,
        is_negative_anomaly: bool,
        is_positive_anomaly: bool,
        severity: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VariableState(_model_base.Model):
    """Variable status.

    :ivar variable: Variable name in variable states.
    :vartype variable: str
    :ivar filled_n_a_ratio: Proportion of missing values that need to be filled by fillNAMethod.
    :vartype filled_n_a_ratio: float
    :ivar effective_count: Number of effective data points before fillNAMethod is applied.
    :vartype effective_count: int
    :ivar first_timestamp: First valid time stamp with a value of input data.
    :vartype first_timestamp: ~datetime.datetime
    :ivar last_timestamp: Last valid time stamp with a value of input data.
    :vartype last_timestamp: ~datetime.datetime
    """

    variable: Optional[str] = rest_field()
    """Variable name in variable states."""
    filled_n_a_ratio: Optional[float] = rest_field(name="filledNARatio")
    """Proportion of missing values that need to be filled by fillNAMethod."""
    effective_count: Optional[int] = rest_field(name="effectiveCount")
    """Number of effective data points before fillNAMethod is applied."""
    first_timestamp: Optional[datetime.datetime] = rest_field(name="firstTimestamp")
    """First valid time stamp with a value of input data."""
    last_timestamp: Optional[datetime.datetime] = rest_field(name="lastTimestamp")
    """Last valid time stamp with a value of input data."""

    @overload
    def __init__(
        self,
        *,
        variable: Optional[str] = None,
        filled_n_a_ratio: Optional[float] = None,
        effective_count: Optional[int] = None,
        first_timestamp: Optional[datetime.datetime] = None,
        last_timestamp: Optional[datetime.datetime] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VariableValues(_model_base.Model):
    """Variable values.

    All required parameters must be populated in order to send to Azure.

    :ivar variable: Variable name of the last detection request. Required.
    :vartype variable: str
    :ivar timestamps: Time stamps of the last detection request. Required.
    :vartype timestamps: list[str]
    :ivar values: Values of variables. Required.
    :vartype values: list[float]
    """

    variable: str = rest_field()
    """Variable name of the last detection request. Required."""
    timestamps: List[str] = rest_field()
    """Time stamps of the last detection request. Required."""
    values: List[float] = rest_field()
    """Values of variables. Required."""

    @overload
    def __init__(
        self,
        *,
        variable: str,
        timestamps: List[str],
        values: List[float],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
