# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Resource(Model):
    """Resource.

    Common fields that are returned in the response for all Azure Resource
    Manager resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class Application(Resource):
    """Schema for Application properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param description: Description of Application.
    :type description: str
    :param friendly_name: Friendly name of Application.
    :type friendly_name: str
    :param file_path: Specifies a path for the executable file for the
     application.
    :type file_path: str
    :param msix_package_family_name: Specifies the package family name for
     MSIX applications
    :type msix_package_family_name: str
    :param msix_package_application_id: Specifies the package application Id
     for MSIX applications
    :type msix_package_application_id: str
    :param application_type: Resource Type of Application. Possible values
     include: 'InBuilt', 'MsixApplication'
    :type application_type: str or
     ~azure.mgmt.desktopvirtualization.models.RemoteApplicationType
    :param command_line_setting: Required. Specifies whether this published
     application can be launched with command line arguments provided by the
     client, command line arguments specified at publish time, or no command
     line arguments at all. Possible values include: 'DoNotAllow', 'Allow',
     'Require'
    :type command_line_setting: str or
     ~azure.mgmt.desktopvirtualization.models.CommandLineSetting
    :param command_line_arguments: Command Line Arguments for Application.
    :type command_line_arguments: str
    :param show_in_portal: Specifies whether to show the RemoteApp program in
     the RD Web Access server.
    :type show_in_portal: bool
    :param icon_path: Path to icon.
    :type icon_path: str
    :param icon_index: Index of the icon.
    :type icon_index: int
    :ivar icon_hash: Hash of the icon.
    :vartype icon_hash: str
    :ivar icon_content: the icon a 64 bit string as a byte array.
    :vartype icon_content: bytearray
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'command_line_setting': {'required': True},
        'icon_hash': {'readonly': True},
        'icon_content': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'file_path': {'key': 'properties.filePath', 'type': 'str'},
        'msix_package_family_name': {'key': 'properties.msixPackageFamilyName', 'type': 'str'},
        'msix_package_application_id': {'key': 'properties.msixPackageApplicationId', 'type': 'str'},
        'application_type': {'key': 'properties.applicationType', 'type': 'str'},
        'command_line_setting': {'key': 'properties.commandLineSetting', 'type': 'str'},
        'command_line_arguments': {'key': 'properties.commandLineArguments', 'type': 'str'},
        'show_in_portal': {'key': 'properties.showInPortal', 'type': 'bool'},
        'icon_path': {'key': 'properties.iconPath', 'type': 'str'},
        'icon_index': {'key': 'properties.iconIndex', 'type': 'int'},
        'icon_hash': {'key': 'properties.iconHash', 'type': 'str'},
        'icon_content': {'key': 'properties.iconContent', 'type': 'bytearray'},
    }

    def __init__(self, *, command_line_setting, description: str=None, friendly_name: str=None, file_path: str=None, msix_package_family_name: str=None, msix_package_application_id: str=None, application_type=None, command_line_arguments: str=None, show_in_portal: bool=None, icon_path: str=None, icon_index: int=None, **kwargs) -> None:
        super(Application, self).__init__(**kwargs)
        self.description = description
        self.friendly_name = friendly_name
        self.file_path = file_path
        self.msix_package_family_name = msix_package_family_name
        self.msix_package_application_id = msix_package_application_id
        self.application_type = application_type
        self.command_line_setting = command_line_setting
        self.command_line_arguments = command_line_arguments
        self.show_in_portal = show_in_portal
        self.icon_path = icon_path
        self.icon_index = icon_index
        self.icon_hash = None
        self.icon_content = None


class TrackedResource(Resource):
    """Tracked Resource.

    The resource model definition for an Azure Resource Manager tracked top
    level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, *, location: str, tags=None, **kwargs) -> None:
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class ApplicationGroup(TrackedResource):
    """Represents a ApplicationGroup definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :param description: Description of ApplicationGroup.
    :type description: str
    :param friendly_name: Friendly name of ApplicationGroup.
    :type friendly_name: str
    :param host_pool_arm_path: Required. HostPool arm path of
     ApplicationGroup.
    :type host_pool_arm_path: str
    :ivar workspace_arm_path: Workspace arm path of ApplicationGroup.
    :vartype workspace_arm_path: str
    :param application_group_type: Required. Resource Type of
     ApplicationGroup. Possible values include: 'RemoteApp', 'Desktop'
    :type application_group_type: str or
     ~azure.mgmt.desktopvirtualization.models.ApplicationGroupType
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'host_pool_arm_path': {'required': True},
        'workspace_arm_path': {'readonly': True},
        'application_group_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'host_pool_arm_path': {'key': 'properties.hostPoolArmPath', 'type': 'str'},
        'workspace_arm_path': {'key': 'properties.workspaceArmPath', 'type': 'str'},
        'application_group_type': {'key': 'properties.applicationGroupType', 'type': 'str'},
    }

    def __init__(self, *, location: str, host_pool_arm_path: str, application_group_type, tags=None, description: str=None, friendly_name: str=None, **kwargs) -> None:
        super(ApplicationGroup, self).__init__(tags=tags, location=location, **kwargs)
        self.description = description
        self.friendly_name = friendly_name
        self.host_pool_arm_path = host_pool_arm_path
        self.workspace_arm_path = None
        self.application_group_type = application_group_type


class ApplicationGroupPatch(Resource):
    """ApplicationGroup properties that can be patched.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: tags to be updated
    :type tags: dict[str, str]
    :param description: Description of ApplicationGroup.
    :type description: str
    :param friendly_name: Friendly name of ApplicationGroup.
    :type friendly_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
    }

    def __init__(self, *, tags=None, description: str=None, friendly_name: str=None, **kwargs) -> None:
        super(ApplicationGroupPatch, self).__init__(**kwargs)
        self.tags = tags
        self.description = description
        self.friendly_name = friendly_name


class ApplicationPatch(Model):
    """Application properties that can be patched.

    :param tags: tags to be updated
    :type tags: dict[str, str]
    :param description: Description of Application.
    :type description: str
    :param friendly_name: Friendly name of Application.
    :type friendly_name: str
    :param file_path: Specifies a path for the executable file for the
     application.
    :type file_path: str
    :param command_line_setting: Specifies whether this published application
     can be launched with command line arguments provided by the client,
     command line arguments specified at publish time, or no command line
     arguments at all. Possible values include: 'DoNotAllow', 'Allow',
     'Require'
    :type command_line_setting: str or
     ~azure.mgmt.desktopvirtualization.models.CommandLineSetting
    :param command_line_arguments: Command Line Arguments for Application.
    :type command_line_arguments: str
    :param show_in_portal: Specifies whether to show the RemoteApp program in
     the RD Web Access server.
    :type show_in_portal: bool
    :param icon_path: Path to icon.
    :type icon_path: str
    :param icon_index: Index of the icon.
    :type icon_index: int
    :param msix_package_family_name: Specifies the package family name for
     MSIX applications
    :type msix_package_family_name: str
    :param msix_package_application_id: Specifies the package application Id
     for MSIX applications
    :type msix_package_application_id: str
    :param application_type: Resource Type of Application. Possible values
     include: 'InBuilt', 'MsixApplication'
    :type application_type: str or
     ~azure.mgmt.desktopvirtualization.models.RemoteApplicationType
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'file_path': {'key': 'properties.filePath', 'type': 'str'},
        'command_line_setting': {'key': 'properties.commandLineSetting', 'type': 'str'},
        'command_line_arguments': {'key': 'properties.commandLineArguments', 'type': 'str'},
        'show_in_portal': {'key': 'properties.showInPortal', 'type': 'bool'},
        'icon_path': {'key': 'properties.iconPath', 'type': 'str'},
        'icon_index': {'key': 'properties.iconIndex', 'type': 'int'},
        'msix_package_family_name': {'key': 'properties.msixPackageFamilyName', 'type': 'str'},
        'msix_package_application_id': {'key': 'properties.msixPackageApplicationId', 'type': 'str'},
        'application_type': {'key': 'properties.applicationType', 'type': 'str'},
    }

    def __init__(self, *, tags=None, description: str=None, friendly_name: str=None, file_path: str=None, command_line_setting=None, command_line_arguments: str=None, show_in_portal: bool=None, icon_path: str=None, icon_index: int=None, msix_package_family_name: str=None, msix_package_application_id: str=None, application_type=None, **kwargs) -> None:
        super(ApplicationPatch, self).__init__(**kwargs)
        self.tags = tags
        self.description = description
        self.friendly_name = friendly_name
        self.file_path = file_path
        self.command_line_setting = command_line_setting
        self.command_line_arguments = command_line_arguments
        self.show_in_portal = show_in_portal
        self.icon_path = icon_path
        self.icon_index = icon_index
        self.msix_package_family_name = msix_package_family_name
        self.msix_package_application_id = msix_package_application_id
        self.application_type = application_type


class AzureEntityResource(Resource):
    """Entity Resource.

    The resource model definition for an Azure Resource Manager resource with
    an etag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(AzureEntityResource, self).__init__(**kwargs)
        self.etag = None


class CloudError(Model):
    """CloudError.

    :param error:
    :type error: ~azure.mgmt.desktopvirtualization.models.CloudErrorProperties
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorProperties'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(CloudError, self).__init__(**kwargs)
        self.error = error


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorProperties(Model):
    """CloudErrorProperties.

    :param code: Error code
    :type code: str
    :param message: Error message indicating why the operation failed.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, *, code: str=None, message: str=None, **kwargs) -> None:
        super(CloudErrorProperties, self).__init__(**kwargs)
        self.code = code
        self.message = message


class Desktop(Resource):
    """Schema for Desktop properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param description: Description of Desktop.
    :type description: str
    :param friendly_name: Friendly name of Desktop.
    :type friendly_name: str
    :ivar icon_hash: Hash of the icon.
    :vartype icon_hash: str
    :ivar icon_content: The icon a 64 bit string as a byte array.
    :vartype icon_content: bytearray
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'icon_hash': {'readonly': True},
        'icon_content': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'icon_hash': {'key': 'properties.iconHash', 'type': 'str'},
        'icon_content': {'key': 'properties.iconContent', 'type': 'bytearray'},
    }

    def __init__(self, *, description: str=None, friendly_name: str=None, **kwargs) -> None:
        super(Desktop, self).__init__(**kwargs)
        self.description = description
        self.friendly_name = friendly_name
        self.icon_hash = None
        self.icon_content = None


class DesktopList(Model):
    """DesktopList.

    List of Desktop definitions.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param value: List of Desktop definitions.
    :type value: list[~azure.mgmt.desktopvirtualization.models.Desktop]
    :ivar next_link: Link to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Desktop]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(DesktopList, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class DesktopPatch(Model):
    """Desktop properties that can be patched.

    :param tags: tags to be updated
    :type tags: dict[str, str]
    :param description: Description of Desktop.
    :type description: str
    :param friendly_name: Friendly name of Desktop.
    :type friendly_name: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
    }

    def __init__(self, *, tags=None, description: str=None, friendly_name: str=None, **kwargs) -> None:
        super(DesktopPatch, self).__init__(**kwargs)
        self.tags = tags
        self.description = description
        self.friendly_name = friendly_name


class ExpandMsixImage(Resource):
    """Represents the definition of contents retrieved after expanding the MSIX
    Image. .

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param package_alias: Alias of MSIX Package.
    :type package_alias: str
    :param image_path: VHD/CIM image path on Network Share.
    :type image_path: str
    :param package_name: Package Name from appxmanifest.xml.
    :type package_name: str
    :param package_family_name: Package Family Name from appxmanifest.xml.
     Contains Package Name and Publisher name.
    :type package_family_name: str
    :param package_full_name: Package Full Name from appxmanifest.xml.
    :type package_full_name: str
    :param display_name: User friendly Name to be displayed in the portal.
    :type display_name: str
    :param package_relative_path: Relative Path to the package inside the
     image.
    :type package_relative_path: str
    :param is_regular_registration: Specifies how to register Package in feed.
    :type is_regular_registration: bool
    :param is_active: Make this version of the package the active one across
     the hostpool.
    :type is_active: bool
    :param package_dependencies: List of package dependencies.
    :type package_dependencies:
     list[~azure.mgmt.desktopvirtualization.models.MsixPackageDependencies]
    :param version: Package Version found in the appxmanifest.xml.
    :type version: str
    :param last_updated: Date Package was last updated, found in the
     appxmanifest.xml.
    :type last_updated: datetime
    :param package_applications: List of package applications.
    :type package_applications:
     list[~azure.mgmt.desktopvirtualization.models.MsixPackageApplications]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'package_alias': {'key': 'properties.packageAlias', 'type': 'str'},
        'image_path': {'key': 'properties.imagePath', 'type': 'str'},
        'package_name': {'key': 'properties.packageName', 'type': 'str'},
        'package_family_name': {'key': 'properties.packageFamilyName', 'type': 'str'},
        'package_full_name': {'key': 'properties.packageFullName', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'package_relative_path': {'key': 'properties.packageRelativePath', 'type': 'str'},
        'is_regular_registration': {'key': 'properties.isRegularRegistration', 'type': 'bool'},
        'is_active': {'key': 'properties.isActive', 'type': 'bool'},
        'package_dependencies': {'key': 'properties.packageDependencies', 'type': '[MsixPackageDependencies]'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'last_updated': {'key': 'properties.lastUpdated', 'type': 'iso-8601'},
        'package_applications': {'key': 'properties.packageApplications', 'type': '[MsixPackageApplications]'},
    }

    def __init__(self, *, package_alias: str=None, image_path: str=None, package_name: str=None, package_family_name: str=None, package_full_name: str=None, display_name: str=None, package_relative_path: str=None, is_regular_registration: bool=None, is_active: bool=None, package_dependencies=None, version: str=None, last_updated=None, package_applications=None, **kwargs) -> None:
        super(ExpandMsixImage, self).__init__(**kwargs)
        self.package_alias = package_alias
        self.image_path = image_path
        self.package_name = package_name
        self.package_family_name = package_family_name
        self.package_full_name = package_full_name
        self.display_name = display_name
        self.package_relative_path = package_relative_path
        self.is_regular_registration = is_regular_registration
        self.is_active = is_active
        self.package_dependencies = package_dependencies
        self.version = version
        self.last_updated = last_updated
        self.package_applications = package_applications


class HostPool(TrackedResource):
    """Represents a HostPool definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :param friendly_name: Friendly name of HostPool.
    :type friendly_name: str
    :param description: Description of HostPool.
    :type description: str
    :param host_pool_type: Required. HostPool type for desktop. Possible
     values include: 'Personal', 'Pooled'
    :type host_pool_type: str or
     ~azure.mgmt.desktopvirtualization.models.HostPoolType
    :param personal_desktop_assignment_type: PersonalDesktopAssignment type
     for HostPool. Possible values include: 'Automatic', 'Direct'
    :type personal_desktop_assignment_type: str or
     ~azure.mgmt.desktopvirtualization.models.PersonalDesktopAssignmentType
    :param custom_rdp_property: Custom rdp property of HostPool.
    :type custom_rdp_property: str
    :param max_session_limit: The max session limit of HostPool.
    :type max_session_limit: int
    :param load_balancer_type: Required. The type of the load balancer.
     Possible values include: 'BreadthFirst', 'DepthFirst', 'Persistent'
    :type load_balancer_type: str or
     ~azure.mgmt.desktopvirtualization.models.LoadBalancerType
    :param ring: The ring number of HostPool.
    :type ring: int
    :param validation_environment: Is validation environment.
    :type validation_environment: bool
    :param registration_info: The registration info of HostPool.
    :type registration_info:
     ~azure.mgmt.desktopvirtualization.models.RegistrationInfo
    :param vm_template: VM template for sessionhosts configuration within
     hostpool.
    :type vm_template: str
    :ivar application_group_references: List of applicationGroup links.
    :vartype application_group_references: list[str]
    :param sso_context: Path to keyvault containing ssoContext secret.
    :type sso_context: str
    :param ssoadfs_authority: URL to customer ADFS server for signing WVD SSO
     certificates.
    :type ssoadfs_authority: str
    :param sso_client_id: ClientId for the registered Relying Party used to
     issue WVD SSO certificates.
    :type sso_client_id: str
    :param sso_client_secret_key_vault_path: Path to Azure KeyVault storing
     the secret used for communication to ADFS.
    :type sso_client_secret_key_vault_path: str
    :param sso_secret_type: The type of single sign on Secret Type. Possible
     values include: 'SharedKey', 'Certificate', 'SharedKeyInKeyVault',
     'CertificateInKeyVault'
    :type sso_secret_type: str or
     ~azure.mgmt.desktopvirtualization.models.SSOSecretType
    :param preferred_app_group_type: Required. The type of preferred
     application group type, default to Desktop Application Group. Possible
     values include: 'None', 'Desktop', 'RailApplications'
    :type preferred_app_group_type: str or
     ~azure.mgmt.desktopvirtualization.models.PreferredAppGroupType
    :param start_vm_on_connect: The flag to turn on/off StartVMOnConnect
     feature.
    :type start_vm_on_connect: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'host_pool_type': {'required': True},
        'load_balancer_type': {'required': True},
        'application_group_references': {'readonly': True},
        'preferred_app_group_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'host_pool_type': {'key': 'properties.hostPoolType', 'type': 'str'},
        'personal_desktop_assignment_type': {'key': 'properties.personalDesktopAssignmentType', 'type': 'str'},
        'custom_rdp_property': {'key': 'properties.customRdpProperty', 'type': 'str'},
        'max_session_limit': {'key': 'properties.maxSessionLimit', 'type': 'int'},
        'load_balancer_type': {'key': 'properties.loadBalancerType', 'type': 'str'},
        'ring': {'key': 'properties.ring', 'type': 'int'},
        'validation_environment': {'key': 'properties.validationEnvironment', 'type': 'bool'},
        'registration_info': {'key': 'properties.registrationInfo', 'type': 'RegistrationInfo'},
        'vm_template': {'key': 'properties.vmTemplate', 'type': 'str'},
        'application_group_references': {'key': 'properties.applicationGroupReferences', 'type': '[str]'},
        'sso_context': {'key': 'properties.ssoContext', 'type': 'str'},
        'ssoadfs_authority': {'key': 'properties.ssoadfsAuthority', 'type': 'str'},
        'sso_client_id': {'key': 'properties.ssoClientId', 'type': 'str'},
        'sso_client_secret_key_vault_path': {'key': 'properties.ssoClientSecretKeyVaultPath', 'type': 'str'},
        'sso_secret_type': {'key': 'properties.ssoSecretType', 'type': 'str'},
        'preferred_app_group_type': {'key': 'properties.preferredAppGroupType', 'type': 'str'},
        'start_vm_on_connect': {'key': 'properties.startVMOnConnect', 'type': 'bool'},
    }

    def __init__(self, *, location: str, host_pool_type, load_balancer_type, preferred_app_group_type, tags=None, friendly_name: str=None, description: str=None, personal_desktop_assignment_type=None, custom_rdp_property: str=None, max_session_limit: int=None, ring: int=None, validation_environment: bool=None, registration_info=None, vm_template: str=None, sso_context: str=None, ssoadfs_authority: str=None, sso_client_id: str=None, sso_client_secret_key_vault_path: str=None, sso_secret_type=None, start_vm_on_connect: bool=None, **kwargs) -> None:
        super(HostPool, self).__init__(tags=tags, location=location, **kwargs)
        self.friendly_name = friendly_name
        self.description = description
        self.host_pool_type = host_pool_type
        self.personal_desktop_assignment_type = personal_desktop_assignment_type
        self.custom_rdp_property = custom_rdp_property
        self.max_session_limit = max_session_limit
        self.load_balancer_type = load_balancer_type
        self.ring = ring
        self.validation_environment = validation_environment
        self.registration_info = registration_info
        self.vm_template = vm_template
        self.application_group_references = None
        self.sso_context = sso_context
        self.ssoadfs_authority = ssoadfs_authority
        self.sso_client_id = sso_client_id
        self.sso_client_secret_key_vault_path = sso_client_secret_key_vault_path
        self.sso_secret_type = sso_secret_type
        self.preferred_app_group_type = preferred_app_group_type
        self.start_vm_on_connect = start_vm_on_connect


class HostPoolPatch(Resource):
    """HostPool properties that can be patched.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: tags to be updated
    :type tags: dict[str, str]
    :param friendly_name: Friendly name of HostPool.
    :type friendly_name: str
    :param description: Description of HostPool.
    :type description: str
    :param custom_rdp_property: Custom rdp property of HostPool.
    :type custom_rdp_property: str
    :param max_session_limit: The max session limit of HostPool.
    :type max_session_limit: int
    :param personal_desktop_assignment_type: PersonalDesktopAssignment type
     for HostPool. Possible values include: 'Automatic', 'Direct'
    :type personal_desktop_assignment_type: str or
     ~azure.mgmt.desktopvirtualization.models.PersonalDesktopAssignmentType
    :param load_balancer_type: The type of the load balancer. Possible values
     include: 'BreadthFirst', 'DepthFirst', 'Persistent'
    :type load_balancer_type: str or
     ~azure.mgmt.desktopvirtualization.models.LoadBalancerType
    :param ring: The ring number of HostPool.
    :type ring: int
    :param validation_environment: Is validation environment.
    :type validation_environment: bool
    :param registration_info: The registration info of HostPool.
    :type registration_info:
     ~azure.mgmt.desktopvirtualization.models.RegistrationInfoPatch
    :param vm_template: VM template for sessionhosts configuration within
     hostpool.
    :type vm_template: str
    :param sso_context: Path to keyvault containing ssoContext secret.
    :type sso_context: str
    :param ssoadfs_authority: URL to customer ADFS server for signing WVD SSO
     certificates.
    :type ssoadfs_authority: str
    :param sso_client_id: ClientId for the registered Relying Party used to
     issue WVD SSO certificates.
    :type sso_client_id: str
    :param sso_client_secret_key_vault_path: Path to Azure KeyVault storing
     the secret used for communication to ADFS.
    :type sso_client_secret_key_vault_path: str
    :param sso_secret_type: The type of single sign on Secret Type. Possible
     values include: 'SharedKey', 'Certificate', 'SharedKeyInKeyVault',
     'CertificateInKeyVault'
    :type sso_secret_type: str or
     ~azure.mgmt.desktopvirtualization.models.SSOSecretType
    :param preferred_app_group_type: The type of preferred application group
     type, default to Desktop Application Group. Possible values include:
     'None', 'Desktop', 'RailApplications'
    :type preferred_app_group_type: str or
     ~azure.mgmt.desktopvirtualization.models.PreferredAppGroupType
    :param start_vm_on_connect: The flag to turn on/off StartVMOnConnect
     feature.
    :type start_vm_on_connect: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'custom_rdp_property': {'key': 'properties.customRdpProperty', 'type': 'str'},
        'max_session_limit': {'key': 'properties.maxSessionLimit', 'type': 'int'},
        'personal_desktop_assignment_type': {'key': 'properties.personalDesktopAssignmentType', 'type': 'str'},
        'load_balancer_type': {'key': 'properties.loadBalancerType', 'type': 'str'},
        'ring': {'key': 'properties.ring', 'type': 'int'},
        'validation_environment': {'key': 'properties.validationEnvironment', 'type': 'bool'},
        'registration_info': {'key': 'properties.registrationInfo', 'type': 'RegistrationInfoPatch'},
        'vm_template': {'key': 'properties.vmTemplate', 'type': 'str'},
        'sso_context': {'key': 'properties.ssoContext', 'type': 'str'},
        'ssoadfs_authority': {'key': 'properties.ssoadfsAuthority', 'type': 'str'},
        'sso_client_id': {'key': 'properties.ssoClientId', 'type': 'str'},
        'sso_client_secret_key_vault_path': {'key': 'properties.ssoClientSecretKeyVaultPath', 'type': 'str'},
        'sso_secret_type': {'key': 'properties.ssoSecretType', 'type': 'str'},
        'preferred_app_group_type': {'key': 'properties.preferredAppGroupType', 'type': 'str'},
        'start_vm_on_connect': {'key': 'properties.startVMOnConnect', 'type': 'bool'},
    }

    def __init__(self, *, tags=None, friendly_name: str=None, description: str=None, custom_rdp_property: str=None, max_session_limit: int=None, personal_desktop_assignment_type=None, load_balancer_type=None, ring: int=None, validation_environment: bool=None, registration_info=None, vm_template: str=None, sso_context: str=None, ssoadfs_authority: str=None, sso_client_id: str=None, sso_client_secret_key_vault_path: str=None, sso_secret_type=None, preferred_app_group_type=None, start_vm_on_connect: bool=None, **kwargs) -> None:
        super(HostPoolPatch, self).__init__(**kwargs)
        self.tags = tags
        self.friendly_name = friendly_name
        self.description = description
        self.custom_rdp_property = custom_rdp_property
        self.max_session_limit = max_session_limit
        self.personal_desktop_assignment_type = personal_desktop_assignment_type
        self.load_balancer_type = load_balancer_type
        self.ring = ring
        self.validation_environment = validation_environment
        self.registration_info = registration_info
        self.vm_template = vm_template
        self.sso_context = sso_context
        self.ssoadfs_authority = ssoadfs_authority
        self.sso_client_id = sso_client_id
        self.sso_client_secret_key_vault_path = sso_client_secret_key_vault_path
        self.sso_secret_type = sso_secret_type
        self.preferred_app_group_type = preferred_app_group_type
        self.start_vm_on_connect = start_vm_on_connect


class MSIXImageURI(Model):
    """Represents URI referring to MSIX Image.

    :param uri: URI to Image
    :type uri: str
    """

    _attribute_map = {
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(self, *, uri: str=None, **kwargs) -> None:
        super(MSIXImageURI, self).__init__(**kwargs)
        self.uri = uri


class MSIXPackage(Resource):
    """Schema for MSIX Package properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param image_path: VHD/CIM image path on Network Share.
    :type image_path: str
    :param package_name: Package Name from appxmanifest.xml.
    :type package_name: str
    :param package_family_name: Package Family Name from appxmanifest.xml.
     Contains Package Name and Publisher name.
    :type package_family_name: str
    :param display_name: User friendly Name to be displayed in the portal.
    :type display_name: str
    :param package_relative_path: Relative Path to the package inside the
     image.
    :type package_relative_path: str
    :param is_regular_registration: Specifies how to register Package in feed.
    :type is_regular_registration: bool
    :param is_active: Make this version of the package the active one across
     the hostpool.
    :type is_active: bool
    :param package_dependencies: List of package dependencies.
    :type package_dependencies:
     list[~azure.mgmt.desktopvirtualization.models.MsixPackageDependencies]
    :param version: Package Version found in the appxmanifest.xml.
    :type version: str
    :param last_updated: Date Package was last updated, found in the
     appxmanifest.xml.
    :type last_updated: datetime
    :param package_applications: List of package applications.
    :type package_applications:
     list[~azure.mgmt.desktopvirtualization.models.MsixPackageApplications]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'image_path': {'key': 'properties.imagePath', 'type': 'str'},
        'package_name': {'key': 'properties.packageName', 'type': 'str'},
        'package_family_name': {'key': 'properties.packageFamilyName', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'package_relative_path': {'key': 'properties.packageRelativePath', 'type': 'str'},
        'is_regular_registration': {'key': 'properties.isRegularRegistration', 'type': 'bool'},
        'is_active': {'key': 'properties.isActive', 'type': 'bool'},
        'package_dependencies': {'key': 'properties.packageDependencies', 'type': '[MsixPackageDependencies]'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'last_updated': {'key': 'properties.lastUpdated', 'type': 'iso-8601'},
        'package_applications': {'key': 'properties.packageApplications', 'type': '[MsixPackageApplications]'},
    }

    def __init__(self, *, image_path: str=None, package_name: str=None, package_family_name: str=None, display_name: str=None, package_relative_path: str=None, is_regular_registration: bool=None, is_active: bool=None, package_dependencies=None, version: str=None, last_updated=None, package_applications=None, **kwargs) -> None:
        super(MSIXPackage, self).__init__(**kwargs)
        self.image_path = image_path
        self.package_name = package_name
        self.package_family_name = package_family_name
        self.display_name = display_name
        self.package_relative_path = package_relative_path
        self.is_regular_registration = is_regular_registration
        self.is_active = is_active
        self.package_dependencies = package_dependencies
        self.version = version
        self.last_updated = last_updated
        self.package_applications = package_applications


class MsixPackageApplications(Model):
    """Schema for MSIX Package Application properties.

    :param app_id: Package Application Id, found in appxmanifest.xml.
    :type app_id: str
    :param description: Description of Package Application.
    :type description: str
    :param app_user_model_id: Used to activate Package Application. Consists
     of Package Name and ApplicationID. Found in appxmanifest.xml.
    :type app_user_model_id: str
    :param friendly_name: User friendly name.
    :type friendly_name: str
    :param icon_image_name: User friendly name.
    :type icon_image_name: str
    :param raw_icon: the icon a 64 bit string as a byte array.
    :type raw_icon: bytearray
    :param raw_png: the icon a 64 bit string as a byte array.
    :type raw_png: bytearray
    """

    _attribute_map = {
        'app_id': {'key': 'appId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'app_user_model_id': {'key': 'appUserModelID', 'type': 'str'},
        'friendly_name': {'key': 'friendlyName', 'type': 'str'},
        'icon_image_name': {'key': 'iconImageName', 'type': 'str'},
        'raw_icon': {'key': 'rawIcon', 'type': 'bytearray'},
        'raw_png': {'key': 'rawPng', 'type': 'bytearray'},
    }

    def __init__(self, *, app_id: str=None, description: str=None, app_user_model_id: str=None, friendly_name: str=None, icon_image_name: str=None, raw_icon: bytearray=None, raw_png: bytearray=None, **kwargs) -> None:
        super(MsixPackageApplications, self).__init__(**kwargs)
        self.app_id = app_id
        self.description = description
        self.app_user_model_id = app_user_model_id
        self.friendly_name = friendly_name
        self.icon_image_name = icon_image_name
        self.raw_icon = raw_icon
        self.raw_png = raw_png


class MsixPackageDependencies(Model):
    """Schema for MSIX Package Dependencies properties.

    :param dependency_name: Name of package dependency.
    :type dependency_name: str
    :param publisher: Name of dependency publisher.
    :type publisher: str
    :param min_version: Dependency version required.
    :type min_version: str
    """

    _attribute_map = {
        'dependency_name': {'key': 'dependencyName', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'min_version': {'key': 'minVersion', 'type': 'str'},
    }

    def __init__(self, *, dependency_name: str=None, publisher: str=None, min_version: str=None, **kwargs) -> None:
        super(MsixPackageDependencies, self).__init__(**kwargs)
        self.dependency_name = dependency_name
        self.publisher = publisher
        self.min_version = min_version


class MSIXPackagePatch(Resource):
    """MSIX Package properties that can be patched.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param is_active: Set a version of the package to be active across
     hostpool.
    :type is_active: bool
    :param is_regular_registration: Set Registration mode. Regular or Delayed.
    :type is_regular_registration: bool
    :param display_name: Display name for MSIX Package.
    :type display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'is_active': {'key': 'properties.isActive', 'type': 'bool'},
        'is_regular_registration': {'key': 'properties.isRegularRegistration', 'type': 'bool'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(self, *, is_active: bool=None, is_regular_registration: bool=None, display_name: str=None, **kwargs) -> None:
        super(MSIXPackagePatch, self).__init__(**kwargs)
        self.is_active = is_active
        self.is_regular_registration = is_regular_registration
        self.display_name = display_name


class ProxyResource(Resource):
    """Proxy Resource.

    The resource model definition for a Azure Resource Manager proxy resource.
    It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ProxyResource, self).__init__(**kwargs)


class RegistrationInfo(Model):
    """Represents a RegistrationInfo definition.

    :param expiration_time: Expiration time of registration token.
    :type expiration_time: datetime
    :param token: The registration token base64 encoded string.
    :type token: str
    :param registration_token_operation: The type of resetting the token.
     Possible values include: 'Delete', 'None', 'Update'
    :type registration_token_operation: str or
     ~azure.mgmt.desktopvirtualization.models.RegistrationTokenOperation
    """

    _attribute_map = {
        'expiration_time': {'key': 'expirationTime', 'type': 'iso-8601'},
        'token': {'key': 'token', 'type': 'str'},
        'registration_token_operation': {'key': 'registrationTokenOperation', 'type': 'str'},
    }

    def __init__(self, *, expiration_time=None, token: str=None, registration_token_operation=None, **kwargs) -> None:
        super(RegistrationInfo, self).__init__(**kwargs)
        self.expiration_time = expiration_time
        self.token = token
        self.registration_token_operation = registration_token_operation


class RegistrationInfoPatch(Model):
    """Represents a RegistrationInfo definition.

    :param expiration_time: Expiration time of registration token.
    :type expiration_time: datetime
    :param registration_token_operation: The type of resetting the token.
     Possible values include: 'Delete', 'None', 'Update'
    :type registration_token_operation: str or
     ~azure.mgmt.desktopvirtualization.models.RegistrationTokenOperation
    """

    _attribute_map = {
        'expiration_time': {'key': 'expirationTime', 'type': 'iso-8601'},
        'registration_token_operation': {'key': 'registrationTokenOperation', 'type': 'str'},
    }

    def __init__(self, *, expiration_time=None, registration_token_operation=None, **kwargs) -> None:
        super(RegistrationInfoPatch, self).__init__(**kwargs)
        self.expiration_time = expiration_time
        self.registration_token_operation = registration_token_operation


class ResourceProviderOperation(Model):
    """Supported operation of this resource provider.

    :param name: Operation name, in format of
     {provider}/{resource}/{operation}
    :type name: str
    :param display: Display metadata associated with the operation.
    :type display:
     ~azure.mgmt.desktopvirtualization.models.ResourceProviderOperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'ResourceProviderOperationDisplay'},
    }

    def __init__(self, *, name: str=None, display=None, **kwargs) -> None:
        super(ResourceProviderOperation, self).__init__(**kwargs)
        self.name = name
        self.display = display


class ResourceProviderOperationDisplay(Model):
    """Display metadata associated with the operation.

    :param provider: Resource provider: Microsoft Desktop Virtualization.
    :type provider: str
    :param resource: Resource on which the operation is performed.
    :type resource: str
    :param operation: Type of operation: get, read, delete, etc.
    :type operation: str
    :param description: Description of this operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, resource: str=None, operation: str=None, description: str=None, **kwargs) -> None:
        super(ResourceProviderOperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class ResourceProviderOperationList(Model):
    """Result of the request to list operations.

    :param value: List of operations supported by this resource provider.
    :type value:
     list[~azure.mgmt.desktopvirtualization.models.ResourceProviderOperation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ResourceProviderOperation]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(ResourceProviderOperationList, self).__init__(**kwargs)
        self.value = value


class ScalingHostPoolReference(Model):
    """Scaling plan reference to hostpool.

    :param host_pool_arm_path: Arm path of referenced hostpool.
    :type host_pool_arm_path: str
    :param scaling_plan_enabled: Is the scaling plan enabled for this
     hostpool.
    :type scaling_plan_enabled: bool
    """

    _attribute_map = {
        'host_pool_arm_path': {'key': 'hostPoolArmPath', 'type': 'str'},
        'scaling_plan_enabled': {'key': 'scalingPlanEnabled', 'type': 'bool'},
    }

    def __init__(self, *, host_pool_arm_path: str=None, scaling_plan_enabled: bool=None, **kwargs) -> None:
        super(ScalingHostPoolReference, self).__init__(**kwargs)
        self.host_pool_arm_path = host_pool_arm_path
        self.scaling_plan_enabled = scaling_plan_enabled


class ScalingPlan(TrackedResource):
    """ScalingPlan.

    Represents a scaling plan definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :param description: Description of scaling plan.
    :type description: str
    :param friendly_name: User friendly name of scaling plan.
    :type friendly_name: str
    :param time_zone: Timezone of the scaling plan.
    :type time_zone: str
    :param host_pool_type: HostPool type for scaling plan. Possible values
     include: 'Personal', 'Pooled'
    :type host_pool_type: str or
     ~azure.mgmt.desktopvirtualization.models.HostPoolType
    :param exclusion_tag: Exclusion tag for scaling plan.
    :type exclusion_tag: str
    :param schedules: List of ScalingSchedule definitions.
    :type schedules:
     list[~azure.mgmt.desktopvirtualization.models.ScalingSchedule]
    :param host_pool_references: List of ScalingHostPoolReference definitions.
    :type host_pool_references:
     list[~azure.mgmt.desktopvirtualization.models.ScalingHostPoolReference]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'time_zone': {'key': 'properties.timeZone', 'type': 'str'},
        'host_pool_type': {'key': 'properties.hostPoolType', 'type': 'str'},
        'exclusion_tag': {'key': 'properties.exclusionTag', 'type': 'str'},
        'schedules': {'key': 'properties.schedules', 'type': '[ScalingSchedule]'},
        'host_pool_references': {'key': 'properties.hostPoolReferences', 'type': '[ScalingHostPoolReference]'},
    }

    def __init__(self, *, location: str, tags=None, description: str=None, friendly_name: str=None, time_zone: str=None, host_pool_type=None, exclusion_tag: str=None, schedules=None, host_pool_references=None, **kwargs) -> None:
        super(ScalingPlan, self).__init__(tags=tags, location=location, **kwargs)
        self.description = description
        self.friendly_name = friendly_name
        self.time_zone = time_zone
        self.host_pool_type = host_pool_type
        self.exclusion_tag = exclusion_tag
        self.schedules = schedules
        self.host_pool_references = host_pool_references


class ScalingPlanPatch(Model):
    """Scaling plan properties that can be patched.

    :param tags: tags to be updated
    :type tags: dict[str, str]
    :param description: Description of scaling plan.
    :type description: str
    :param friendly_name: User friendly name of scaling plan.
    :type friendly_name: str
    :param time_zone: Timezone of the scaling plan.
    :type time_zone: str
    :param host_pool_type: HostPool type for scaling plan. Possible values
     include: 'Personal', 'Pooled'
    :type host_pool_type: str or
     ~azure.mgmt.desktopvirtualization.models.HostPoolType
    :param exclusion_tag: Exclusion tag for scaling plan.
    :type exclusion_tag: str
    :param schedules: List of ScalingSchedule definitions.
    :type schedules:
     list[~azure.mgmt.desktopvirtualization.models.ScalingSchedule]
    :param host_pool_references: List of ScalingHostPoolReference definitions.
    :type host_pool_references:
     list[~azure.mgmt.desktopvirtualization.models.ScalingHostPoolReference]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'time_zone': {'key': 'properties.timeZone', 'type': 'str'},
        'host_pool_type': {'key': 'properties.hostPoolType', 'type': 'str'},
        'exclusion_tag': {'key': 'properties.exclusionTag', 'type': 'str'},
        'schedules': {'key': 'properties.schedules', 'type': '[ScalingSchedule]'},
        'host_pool_references': {'key': 'properties.hostPoolReferences', 'type': '[ScalingHostPoolReference]'},
    }

    def __init__(self, *, tags=None, description: str=None, friendly_name: str=None, time_zone: str=None, host_pool_type=None, exclusion_tag: str=None, schedules=None, host_pool_references=None, **kwargs) -> None:
        super(ScalingPlanPatch, self).__init__(**kwargs)
        self.tags = tags
        self.description = description
        self.friendly_name = friendly_name
        self.time_zone = time_zone
        self.host_pool_type = host_pool_type
        self.exclusion_tag = exclusion_tag
        self.schedules = schedules
        self.host_pool_references = host_pool_references


class ScalingSchedule(Model):
    """Scaling plan schedule.

    :param name: Name of the scaling schedule.
    :type name: str
    :param days_of_week: Set of days of the week on which this schedule is
     active.
    :type days_of_week: list[str]
    :param ramp_up_start_time: Starting time for ramp up period.
    :type ramp_up_start_time: datetime
    :param ramp_up_algorithm: Load balancing algorithm for ramp up period.
     Possible values include: 'BreadthFirst', 'DepthFirst'
    :type ramp_up_algorithm: str or
     ~azure.mgmt.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm
    :param ramp_up_minimum_host_pct: Minimum host percentage for ramp up
     period.
    :type ramp_up_minimum_host_pct: int
    :param ramp_up_capacity_threshold_pct: Capacity threshold for ramp up
     period.
    :type ramp_up_capacity_threshold_pct: int
    :param peak_start_time: Starting time for peak period.
    :type peak_start_time: datetime
    :param peak_load_balancing_algorithm: Load balancing algorithm for peak
     period. Possible values include: 'BreadthFirst', 'DepthFirst'
    :type peak_load_balancing_algorithm: str or
     ~azure.mgmt.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm
    :param ramp_down_start_time: Starting time for ramp down period.
    :type ramp_down_start_time: datetime
    :param ramp_down_load_balancing_algorithm: Load balancing algorithm for
     ramp down period. Possible values include: 'BreadthFirst', 'DepthFirst'
    :type ramp_down_load_balancing_algorithm: str or
     ~azure.mgmt.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm
    :param ramp_down_minimum_hosts_pct: Minimum host percentage for ramp down
     period.
    :type ramp_down_minimum_hosts_pct: int
    :param ramp_down_capacity_threshold_pct: Capacity threshold for ramp down
     period.
    :type ramp_down_capacity_threshold_pct: int
    :param ramp_down_force_logoff_users: Should users be logged off forcefully
     from hosts.
    :type ramp_down_force_logoff_users: bool
    :param ramp_down_stop_hosts_when: Specifies when to stop hosts during ramp
     down period. Possible values include: 'ZeroSessions', 'ZeroActiveSessions'
    :type ramp_down_stop_hosts_when: str or
     ~azure.mgmt.desktopvirtualization.models.StopHostsWhen
    :param ramp_down_notification_minutes: Number of minutes to wait to stop
     hosts during ramp down period.
    :type ramp_down_notification_minutes: int
    :param ramp_down_notification_message: Notification message for users
     during ramp down period.
    :type ramp_down_notification_message: str
    :param off_peak_start_time: Starting time for off-peak period.
    :type off_peak_start_time: datetime
    :param off_peak_load_balancing_algorithm: Load balancing algorithm for
     off-peak period. Possible values include: 'BreadthFirst', 'DepthFirst'
    :type off_peak_load_balancing_algorithm: str or
     ~azure.mgmt.desktopvirtualization.models.SessionHostLoadBalancingAlgorithm
    """

    _validation = {
        'ramp_up_minimum_host_pct': {'maximum': 100, 'minimum': 0},
        'ramp_up_capacity_threshold_pct': {'maximum': 100, 'minimum': 0},
        'ramp_down_minimum_hosts_pct': {'maximum': 100, 'minimum': 0},
        'ramp_down_capacity_threshold_pct': {'maximum': 100, 'minimum': 0},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
        'ramp_up_start_time': {'key': 'rampUpStartTime', 'type': 'iso-8601'},
        'ramp_up_algorithm': {'key': 'rampUpAlgorithm', 'type': 'str'},
        'ramp_up_minimum_host_pct': {'key': 'rampUpMinimumHostPct', 'type': 'int'},
        'ramp_up_capacity_threshold_pct': {'key': 'rampUpCapacityThresholdPct', 'type': 'int'},
        'peak_start_time': {'key': 'peakStartTime', 'type': 'iso-8601'},
        'peak_load_balancing_algorithm': {'key': 'peakLoadBalancingAlgorithm', 'type': 'str'},
        'ramp_down_start_time': {'key': 'rampDownStartTime', 'type': 'iso-8601'},
        'ramp_down_load_balancing_algorithm': {'key': 'rampDownLoadBalancingAlgorithm', 'type': 'str'},
        'ramp_down_minimum_hosts_pct': {'key': 'rampDownMinimumHostsPct', 'type': 'int'},
        'ramp_down_capacity_threshold_pct': {'key': 'rampDownCapacityThresholdPct', 'type': 'int'},
        'ramp_down_force_logoff_users': {'key': 'rampDownForceLogoffUsers', 'type': 'bool'},
        'ramp_down_stop_hosts_when': {'key': 'rampDownStopHostsWhen', 'type': 'str'},
        'ramp_down_notification_minutes': {'key': 'rampDownNotificationMinutes', 'type': 'int'},
        'ramp_down_notification_message': {'key': 'rampDownNotificationMessage', 'type': 'str'},
        'off_peak_start_time': {'key': 'offPeakStartTime', 'type': 'iso-8601'},
        'off_peak_load_balancing_algorithm': {'key': 'offPeakLoadBalancingAlgorithm', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, days_of_week=None, ramp_up_start_time=None, ramp_up_algorithm=None, ramp_up_minimum_host_pct: int=None, ramp_up_capacity_threshold_pct: int=None, peak_start_time=None, peak_load_balancing_algorithm=None, ramp_down_start_time=None, ramp_down_load_balancing_algorithm=None, ramp_down_minimum_hosts_pct: int=None, ramp_down_capacity_threshold_pct: int=None, ramp_down_force_logoff_users: bool=None, ramp_down_stop_hosts_when=None, ramp_down_notification_minutes: int=None, ramp_down_notification_message: str=None, off_peak_start_time=None, off_peak_load_balancing_algorithm=None, **kwargs) -> None:
        super(ScalingSchedule, self).__init__(**kwargs)
        self.name = name
        self.days_of_week = days_of_week
        self.ramp_up_start_time = ramp_up_start_time
        self.ramp_up_algorithm = ramp_up_algorithm
        self.ramp_up_minimum_host_pct = ramp_up_minimum_host_pct
        self.ramp_up_capacity_threshold_pct = ramp_up_capacity_threshold_pct
        self.peak_start_time = peak_start_time
        self.peak_load_balancing_algorithm = peak_load_balancing_algorithm
        self.ramp_down_start_time = ramp_down_start_time
        self.ramp_down_load_balancing_algorithm = ramp_down_load_balancing_algorithm
        self.ramp_down_minimum_hosts_pct = ramp_down_minimum_hosts_pct
        self.ramp_down_capacity_threshold_pct = ramp_down_capacity_threshold_pct
        self.ramp_down_force_logoff_users = ramp_down_force_logoff_users
        self.ramp_down_stop_hosts_when = ramp_down_stop_hosts_when
        self.ramp_down_notification_minutes = ramp_down_notification_minutes
        self.ramp_down_notification_message = ramp_down_notification_message
        self.off_peak_start_time = off_peak_start_time
        self.off_peak_load_balancing_algorithm = off_peak_load_balancing_algorithm


class SendMessage(Model):
    """Represents message sent to a UserSession.

    :param message_title: Title of message.
    :type message_title: str
    :param message_body: Body of message.
    :type message_body: str
    """

    _attribute_map = {
        'message_title': {'key': 'messageTitle', 'type': 'str'},
        'message_body': {'key': 'messageBody', 'type': 'str'},
    }

    def __init__(self, *, message_title: str=None, message_body: str=None, **kwargs) -> None:
        super(SendMessage, self).__init__(**kwargs)
        self.message_title = message_title
        self.message_body = message_body


class SessionHost(Resource):
    """Represents a SessionHost definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param last_heart_beat: Last heart beat from SessionHost.
    :type last_heart_beat: datetime
    :param sessions: Number of sessions on SessionHost.
    :type sessions: int
    :param agent_version: Version of agent on SessionHost.
    :type agent_version: str
    :param allow_new_session: Allow a new session.
    :type allow_new_session: bool
    :ivar virtual_machine_id: Virtual Machine Id of SessionHost's underlying
     virtual machine.
    :vartype virtual_machine_id: str
    :ivar resource_id: Resource Id of SessionHost's underlying virtual
     machine.
    :vartype resource_id: str
    :param assigned_user: User assigned to SessionHost.
    :type assigned_user: str
    :param status: Status for a SessionHost. Possible values include:
     'Available', 'Unavailable', 'Shutdown', 'Disconnected', 'Upgrading',
     'UpgradeFailed'
    :type status: str or ~azure.mgmt.desktopvirtualization.models.Status
    :ivar status_timestamp: The timestamp of the status.
    :vartype status_timestamp: datetime
    :param os_version: The version of the OS on the session host.
    :type os_version: str
    :param sx_sstack_version: The version of the side by side stack on the
     session host.
    :type sx_sstack_version: str
    :param update_state: Update state of a SessionHost. Possible values
     include: 'Initial', 'Pending', 'Started', 'Succeeded', 'Failed'
    :type update_state: str or
     ~azure.mgmt.desktopvirtualization.models.UpdateState
    :ivar last_update_time: The timestamp of the last update.
    :vartype last_update_time: datetime
    :param update_error_message: The error message.
    :type update_error_message: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'virtual_machine_id': {'readonly': True},
        'resource_id': {'readonly': True},
        'status_timestamp': {'readonly': True},
        'last_update_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'last_heart_beat': {'key': 'properties.lastHeartBeat', 'type': 'iso-8601'},
        'sessions': {'key': 'properties.sessions', 'type': 'int'},
        'agent_version': {'key': 'properties.agentVersion', 'type': 'str'},
        'allow_new_session': {'key': 'properties.allowNewSession', 'type': 'bool'},
        'virtual_machine_id': {'key': 'properties.virtualMachineId', 'type': 'str'},
        'resource_id': {'key': 'properties.resourceId', 'type': 'str'},
        'assigned_user': {'key': 'properties.assignedUser', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_timestamp': {'key': 'properties.statusTimestamp', 'type': 'iso-8601'},
        'os_version': {'key': 'properties.osVersion', 'type': 'str'},
        'sx_sstack_version': {'key': 'properties.sxSStackVersion', 'type': 'str'},
        'update_state': {'key': 'properties.updateState', 'type': 'str'},
        'last_update_time': {'key': 'properties.lastUpdateTime', 'type': 'iso-8601'},
        'update_error_message': {'key': 'properties.updateErrorMessage', 'type': 'str'},
    }

    def __init__(self, *, last_heart_beat=None, sessions: int=None, agent_version: str=None, allow_new_session: bool=None, assigned_user: str=None, status=None, os_version: str=None, sx_sstack_version: str=None, update_state=None, update_error_message: str=None, **kwargs) -> None:
        super(SessionHost, self).__init__(**kwargs)
        self.last_heart_beat = last_heart_beat
        self.sessions = sessions
        self.agent_version = agent_version
        self.allow_new_session = allow_new_session
        self.virtual_machine_id = None
        self.resource_id = None
        self.assigned_user = assigned_user
        self.status = status
        self.status_timestamp = None
        self.os_version = os_version
        self.sx_sstack_version = sx_sstack_version
        self.update_state = update_state
        self.last_update_time = None
        self.update_error_message = update_error_message


class SessionHostPatch(Resource):
    """SessionHost properties that can be patched.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param allow_new_session: Allow a new session.
    :type allow_new_session: bool
    :param assigned_user: User assigned to SessionHost.
    :type assigned_user: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'allow_new_session': {'key': 'properties.allowNewSession', 'type': 'bool'},
        'assigned_user': {'key': 'properties.assignedUser', 'type': 'str'},
    }

    def __init__(self, *, allow_new_session: bool=None, assigned_user: str=None, **kwargs) -> None:
        super(SessionHostPatch, self).__init__(**kwargs)
        self.allow_new_session = allow_new_session
        self.assigned_user = assigned_user


class StartMenuItem(Resource):
    """Represents a StartMenuItem definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param app_alias: Alias of StartMenuItem.
    :type app_alias: str
    :param friendly_name: Friendly name of StartMenuItem.
    :type friendly_name: str
    :param file_path: Path to the file of StartMenuItem.
    :type file_path: str
    :param command_line_arguments: Command line arguments for StartMenuItem.
    :type command_line_arguments: str
    :param icon_path: Path to the icon.
    :type icon_path: str
    :param icon_index: Index of the icon.
    :type icon_index: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'app_alias': {'key': 'properties.appAlias', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'file_path': {'key': 'properties.filePath', 'type': 'str'},
        'command_line_arguments': {'key': 'properties.commandLineArguments', 'type': 'str'},
        'icon_path': {'key': 'properties.iconPath', 'type': 'str'},
        'icon_index': {'key': 'properties.iconIndex', 'type': 'int'},
    }

    def __init__(self, *, app_alias: str=None, friendly_name: str=None, file_path: str=None, command_line_arguments: str=None, icon_path: str=None, icon_index: int=None, **kwargs) -> None:
        super(StartMenuItem, self).__init__(**kwargs)
        self.app_alias = app_alias
        self.friendly_name = friendly_name
        self.file_path = file_path
        self.command_line_arguments = command_line_arguments
        self.icon_path = icon_path
        self.icon_index = icon_index


class UserSession(Resource):
    """Represents a UserSession definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param user_principal_name: The user principal name.
    :type user_principal_name: str
    :param application_type: Application type of application. Possible values
     include: 'RemoteApp', 'Desktop'
    :type application_type: str or
     ~azure.mgmt.desktopvirtualization.models.ApplicationType
    :param session_state: State of user session. Possible values include:
     'Unknown', 'Active', 'Disconnected', 'Pending', 'LogOff',
     'UserProfileDiskMounted'
    :type session_state: str or
     ~azure.mgmt.desktopvirtualization.models.SessionState
    :param active_directory_user_name: The active directory user name.
    :type active_directory_user_name: str
    :param create_time: The timestamp of the user session create.
    :type create_time: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_principal_name': {'key': 'properties.userPrincipalName', 'type': 'str'},
        'application_type': {'key': 'properties.applicationType', 'type': 'str'},
        'session_state': {'key': 'properties.sessionState', 'type': 'str'},
        'active_directory_user_name': {'key': 'properties.activeDirectoryUserName', 'type': 'str'},
        'create_time': {'key': 'properties.createTime', 'type': 'iso-8601'},
    }

    def __init__(self, *, user_principal_name: str=None, application_type=None, session_state=None, active_directory_user_name: str=None, create_time=None, **kwargs) -> None:
        super(UserSession, self).__init__(**kwargs)
        self.user_principal_name = user_principal_name
        self.application_type = application_type
        self.session_state = session_state
        self.active_directory_user_name = active_directory_user_name
        self.create_time = create_time


class Workspace(TrackedResource):
    """Represents a Workspace definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :param description: Description of Workspace.
    :type description: str
    :param friendly_name: Friendly name of Workspace.
    :type friendly_name: str
    :param application_group_references: List of applicationGroup resource
     Ids.
    :type application_group_references: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'application_group_references': {'key': 'properties.applicationGroupReferences', 'type': '[str]'},
    }

    def __init__(self, *, location: str, tags=None, description: str=None, friendly_name: str=None, application_group_references=None, **kwargs) -> None:
        super(Workspace, self).__init__(tags=tags, location=location, **kwargs)
        self.description = description
        self.friendly_name = friendly_name
        self.application_group_references = application_group_references


class WorkspacePatch(Model):
    """Workspace properties that can be patched.

    :param tags: tags to be updated
    :type tags: dict[str, str]
    :param description: Description of Workspace.
    :type description: str
    :param friendly_name: Friendly name of Workspace.
    :type friendly_name: str
    :param application_group_references: List of applicationGroup links.
    :type application_group_references: list[str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'application_group_references': {'key': 'properties.applicationGroupReferences', 'type': '[str]'},
    }

    def __init__(self, *, tags=None, description: str=None, friendly_name: str=None, application_group_references=None, **kwargs) -> None:
        super(WorkspacePatch, self).__init__(**kwargs)
        self.tags = tags
        self.description = description
        self.friendly_name = friendly_name
        self.application_group_references = application_group_references
