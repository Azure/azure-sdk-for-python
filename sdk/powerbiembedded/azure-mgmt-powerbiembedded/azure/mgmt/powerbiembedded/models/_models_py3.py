# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AzureSku(Model):
    """AzureSku.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. SKU name. Default value: "S1" .
    :vartype name: str
    :ivar tier: Required. SKU tier. Default value: "Standard" .
    :vartype tier: str
    """

    _validation = {
        'name': {'required': True, 'constant': True},
        'tier': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    name = "S1"

    tier = "Standard"


class CheckNameRequest(Model):
    """CheckNameRequest.

    :param name: Workspace collection name
    :type name: str
    :param type: Resource type. Default value:
     "Microsoft.PowerBI/workspaceCollections" .
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, type: str="Microsoft.PowerBI/workspaceCollections", **kwargs) -> None:
        super(CheckNameRequest, self).__init__(**kwargs)
        self.name = name
        self.type = type


class CheckNameResponse(Model):
    """CheckNameResponse.

    :param name_available: Specifies a Boolean value that indicates whether
     the specified Power BI Workspace Collection name is available to use.
    :type name_available: bool
    :param reason: Reason why the workspace collection name cannot be used.
     Possible values include: 'Unavailable', 'Invalid'
    :type reason: str or ~azure.mgmt.powerbiembedded.models.CheckNameReason
    :param message: Message indicating an unavailable name due to a conflict,
     or a description of the naming rules that are violated.
    :type message: str
    """

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, *, name_available: bool=None, reason=None, message: str=None, **kwargs) -> None:
        super(CheckNameResponse, self).__init__(**kwargs)
        self.name_available = name_available
        self.reason = reason
        self.message = message


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class CreateWorkspaceCollectionRequest(Model):
    """CreateWorkspaceCollectionRequest.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param location: Azure location
    :type location: str
    :param tags:
    :type tags: dict[str, str]
    :ivar sku:
    :vartype sku: ~azure.mgmt.powerbiembedded.models.AzureSku
    """

    _validation = {
        'sku': {'constant': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'AzureSku'},
    }

    sku = AzureSku()

    def __init__(self, *, location: str=None, tags=None, **kwargs) -> None:
        super(CreateWorkspaceCollectionRequest, self).__init__(**kwargs)
        self.location = location
        self.tags = tags


class Display(Model):
    """Display.

    :param provider: The localized friendly form of the resource provider
     name. This form is also expected to include the publisher/company
     responsible. Use Title Casing. Begin with "Microsoft" for 1st party
     services.
    :type provider: str
    :param resource: The localized friendly form of the resource type related
     to this action/operation. This form should match the public documentation
     for the resource provider. Use Title Casing. For examples, refer to the
     "name" section.
    :type resource: str
    :param operation: The localized friendly name for the operation as shown
     to the user. This name should be concise (to fit in drop downs), but clear
     (self-documenting). Use Title Casing and include the entity/resource to
     which it applies.
    :type operation: str
    :param description: The localized friendly description for the operation
     as shown to the user. This description should be thorough, yet concise. It
     will be used in tool-tips and detailed views.
    :type description: str
    :param origin: The intended executor of the operation; governs the display
     of the operation in the RBAC UX and the audit logs UX. Default value is
     'user,system'
    :type origin: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, resource: str=None, operation: str=None, description: str=None, origin: str=None, **kwargs) -> None:
        super(Display, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description
        self.origin = origin


class Error(Model):
    """Error.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~azure.mgmt.powerbiembedded.models.ErrorDetail]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, details=None, **kwargs) -> None:
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class ErrorException(HttpOperationError):
    """Server responsed with exception of type: 'Error'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorException, self).__init__(deserialize, response, 'Error', *args)


class ErrorDetail(Model):
    """ErrorDetail.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param target:
    :type target: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, **kwargs) -> None:
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target


class MigrateWorkspaceCollectionRequest(Model):
    """MigrateWorkspaceCollectionRequest.

    :param target_resource_group: Name of the resource group the Power BI
     workspace collections will be migrated to.
    :type target_resource_group: str
    :param resources:
    :type resources: list[str]
    """

    _attribute_map = {
        'target_resource_group': {'key': 'targetResourceGroup', 'type': 'str'},
        'resources': {'key': 'resources', 'type': '[str]'},
    }

    def __init__(self, *, target_resource_group: str=None, resources=None, **kwargs) -> None:
        super(MigrateWorkspaceCollectionRequest, self).__init__(**kwargs)
        self.target_resource_group = target_resource_group
        self.resources = resources


class Operation(Model):
    """Operation.

    :param name: The name of the operation being performed on this particular
     object. This name should match the action name that appears in RBAC / the
     event service.
    :type name: str
    :param display:
    :type display: ~azure.mgmt.powerbiembedded.models.Display
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'Display'},
    }

    def __init__(self, *, name: str=None, display=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = name
        self.display = display


class OperationList(Model):
    """OperationList.

    :param value:
    :type value: list[~azure.mgmt.powerbiembedded.models.Operation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(OperationList, self).__init__(**kwargs)
        self.value = value


class UpdateWorkspaceCollectionRequest(Model):
    """UpdateWorkspaceCollectionRequest.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param tags:
    :type tags: dict[str, str]
    :ivar sku:
    :vartype sku: ~azure.mgmt.powerbiembedded.models.AzureSku
    """

    _validation = {
        'sku': {'constant': True},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'AzureSku'},
    }

    sku = AzureSku()

    def __init__(self, *, tags=None, **kwargs) -> None:
        super(UpdateWorkspaceCollectionRequest, self).__init__(**kwargs)
        self.tags = tags


class Workspace(Model):
    """Workspace.

    :param id: Workspace id
    :type id: str
    :param name: Workspace name
    :type name: str
    :param type: Resource type
    :type type: str
    :param properties: Property bag
    :type properties: object
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, properties=None, **kwargs) -> None:
        super(Workspace, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.type = type
        self.properties = properties


class WorkspaceCollection(Model):
    """WorkspaceCollection.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param id: Resource id
    :type id: str
    :param name: Workspace collection name
    :type name: str
    :param type: Resource type
    :type type: str
    :param location: Azure location
    :type location: str
    :param tags:
    :type tags: dict[str, str]
    :ivar sku:
    :vartype sku: ~azure.mgmt.powerbiembedded.models.AzureSku
    :param properties: Properties
    :type properties: object
    """

    _validation = {
        'sku': {'constant': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'AzureSku'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    sku = AzureSku()

    def __init__(self, *, id: str=None, name: str=None, type: str=None, location: str=None, tags=None, properties=None, **kwargs) -> None:
        super(WorkspaceCollection, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.type = type
        self.location = location
        self.tags = tags
        self.properties = properties


class WorkspaceCollectionAccessKey(Model):
    """WorkspaceCollectionAccessKey.

    :param key_name: Key name. Possible values include: 'key1', 'key2'
    :type key_name: str or ~azure.mgmt.powerbiembedded.models.AccessKeyName
    """

    _attribute_map = {
        'key_name': {'key': 'keyName', 'type': 'AccessKeyName'},
    }

    def __init__(self, *, key_name=None, **kwargs) -> None:
        super(WorkspaceCollectionAccessKey, self).__init__(**kwargs)
        self.key_name = key_name


class WorkspaceCollectionAccessKeys(Model):
    """WorkspaceCollectionAccessKeys.

    :param key1: Access key 1
    :type key1: str
    :param key2: Access key 2
    :type key2: str
    """

    _attribute_map = {
        'key1': {'key': 'key1', 'type': 'str'},
        'key2': {'key': 'key2', 'type': 'str'},
    }

    def __init__(self, *, key1: str=None, key2: str=None, **kwargs) -> None:
        super(WorkspaceCollectionAccessKeys, self).__init__(**kwargs)
        self.key1 = key1
        self.key2 = key2
