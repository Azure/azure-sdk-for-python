# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import AuthoringClientTestBase, AuthoringPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAuthoringTextAuthoringProjectOperations(AuthoringClientTestBase):
    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_import_status(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_import_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_export_status(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_export_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_project(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_project(
            project_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_create_project(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.create_project(
            project_name="str",
            body={
                "language": "str",
                "projectKind": "str",
                "projectName": "str",
                "storageInputContainerName": "str",
                "description": "str",
                "multilingual": bool,
                "settings": {
                    "amlProjectPath": "str",
                    "confidenceThreshold": 0.0,
                    "gptPredictiveLookahead": 0,
                    "isLabelingLocked": bool,
                    "runGptPredictions": bool,
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_delete_project(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_delete_project(
            project_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_copy_project_authorization(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.copy_project_authorization(
            project_name="str",
            body={"projectKind": "str", "allowOverwrite": bool, "storageInputContainerName": "str"},
            project_kind="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_copy_project(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_copy_project(
            project_name="str",
            body={
                "accessToken": "str",
                "expiresAt": "2020-02-20 00:00:00",
                "projectKind": "str",
                "targetProjectName": "str",
                "targetResourceId": "str",
                "targetResourceRegion": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_export(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_export(
            project_name="str",
            string_index_type="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_import_method(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_import_method(
            project_name="str",
            body={
                "metadata": {
                    "language": "str",
                    "projectKind": "str",
                    "projectName": "str",
                    "storageInputContainerName": "str",
                    "description": "str",
                    "multilingual": bool,
                    "settings": {
                        "amlProjectPath": "str",
                        "confidenceThreshold": 0.0,
                        "gptPredictiveLookahead": 0,
                        "isLabelingLocked": bool,
                        "runGptPredictions": bool,
                    },
                },
                "projectFileVersion": "str",
                "stringIndexType": "str",
                "assets": "text_analysis_authoring_exported_project_assets",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_train(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_train(
            project_name="str",
            body={
                "modelLabel": "str",
                "trainingConfigVersion": "str",
                "dataGenerationSettings": {
                    "dataGenerationConnectionInfo": {
                        "deploymentName": "str",
                        "kind": "AzureOpenAI",
                        "resourceId": "str",
                    },
                    "enableDataGeneration": bool,
                },
                "evaluationOptions": {"kind": "str", "testingSplitPercentage": 0, "trainingSplitPercentage": 0},
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_copy_project_status(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_copy_project_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_training_status(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_training_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_cancel_training_job(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_cancel_training_job(
            project_name="str",
            job_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_project_deletion_status(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_project_deletion_status(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_unassign_deployment_resources(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_unassign_deployment_resources(
            project_name="str",
            body={"assignedResourceIds": ["str"]},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_unassign_deployment_resources_status(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_unassign_deployment_resources_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_assign_deployment_resources(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_assign_deployment_resources(
            project_name="str",
            body={"resourcesMetadata": [{"azureResourceId": "str", "customDomain": "str", "region": "str"}]},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_assign_deployment_resources_status(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_assign_deployment_resources_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_begin_swap_deployments(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.begin_swap_deployments(
            project_name="str",
            body={"firstDeploymentName": "str", "secondDeploymentName": "str"},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy
    def test_text_authoring_project_get_swap_deployments_status(self, authoring_endpoint):
        client = self.create_client(endpoint=authoring_endpoint)
        response = client.text_authoring_project.get_swap_deployments_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...
