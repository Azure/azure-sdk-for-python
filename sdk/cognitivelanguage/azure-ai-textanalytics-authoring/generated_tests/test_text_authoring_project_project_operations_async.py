# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import TextAuthoringProjectPreparer
from testpreparer_async import TextAuthoringProjectClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestTextAuthoringProjectProjectOperationsAsync(TextAuthoringProjectClientTestBaseAsync):
    @TextAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_project_list_trained_models(self, textauthoringproject_endpoint):
        client = self.create_async_client(endpoint=textauthoringproject_endpoint)
        response = client.project.list_trained_models()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @TextAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_project_list_training_jobs(self, textauthoringproject_endpoint):
        client = self.create_async_client(endpoint=textauthoringproject_endpoint)
        response = client.project.list_training_jobs()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @TextAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_project_list_deployment_resources(self, textauthoringproject_endpoint):
        client = self.create_async_client(endpoint=textauthoringproject_endpoint)
        response = client.project.list_deployment_resources()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @TextAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_project_list_deployments(self, textauthoringproject_endpoint):
        client = self.create_async_client(endpoint=textauthoringproject_endpoint)
        response = client.project.list_deployments()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @TextAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_project_list_exported_models(self, textauthoringproject_endpoint):
        client = self.create_async_client(endpoint=textauthoringproject_endpoint)
        response = client.project.list_exported_models()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @TextAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_project_begin_cancel_training_job(self, textauthoringproject_endpoint):
        client = self.create_async_client(endpoint=textauthoringproject_endpoint)
        response = await (
            await client.project.begin_cancel_training_job(
                job_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
