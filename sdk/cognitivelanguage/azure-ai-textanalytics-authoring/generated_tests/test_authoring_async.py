# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AuthoringPreparer
from testpreparer_async import AuthoringClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAuthoringAsync(AuthoringClientTestBaseAsync):
    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_list_projects(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_list_projects()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_list_deployments(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_list_deployments(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_list_exported_models(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_list_exported_models(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_list_trained_models(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_list_trained_models(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_list_deployment_resources(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_list_deployment_resources(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_list_training_jobs(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_list_training_jobs(
            project_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_list_assigned_resource_deployments(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_list_assigned_resource_deployments()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_get_supported_languages(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_get_supported_languages()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_get_supported_prebuilt_entities(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_get_supported_prebuilt_entities()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AuthoringPreparer()
    @recorded_by_proxy_async
    async def test_text_analysis_authoring_list_training_config_versions(self, authoring_endpoint):
        client = self.create_async_client(endpoint=authoring_endpoint)
        response = client.text_analysis_authoring_list_training_config_versions()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
