# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.2.1, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._microsoft_cognitive_language_service_enums import *


class AnalyzeParameters(msrest.serialization.Model):
    """This is the parameter set of either the conversation application itself or one of the target projects.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DeepstackParameters, LUISV2Parameters, LUISV3Parameters, QuestionAnsweringParameters.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. The type of the project. It could be one of the following
     values.Constant filled by server.  Possible values include: "luis_v2", "luis_v3",
     "luis_deepstack", "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version to use when call a specific target project.
    :type api_version: str
    """

    _validation = {
        'project_type': {'required': True},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
    }

    _subtype_map = {
        'project_type': {'luis_deepstack': 'DeepstackParameters', 'luis_v2': 'LUISV2Parameters', 'luis_v3': 'LUISV3Parameters', 'question_answering': 'QuestionAnsweringParameters'}
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        **kwargs
    ):
        super(AnalyzeParameters, self).__init__(**kwargs)
        self.project_type = None  # type: Optional[str]
        self.api_version = api_version


class AnalyzePrediction(msrest.serialization.Model):
    """Represents the prediction section in the response body.

    All required parameters must be populated in order to send to Azure.

    :param top_intent: Required. The name of the top scoring intent.
    :type top_intent: str
    :param intents: Required. A dictionary that contains all intents. Each key is an intent name
     and the value is its confidence score and project type. The top intent's value also contains
     the actual response from the target project.
    :type intents: dict[str, ~microsoft_cognitive_language_service.models.BaseIntent]
    """

    _validation = {
        'top_intent': {'required': True},
        'intents': {'required': True},
    }

    _attribute_map = {
        'top_intent': {'key': 'topIntent', 'type': 'str'},
        'intents': {'key': 'intents', 'type': '{BaseIntent}'},
    }

    def __init__(
        self,
        *,
        top_intent: str,
        intents: Dict[str, "BaseIntent"],
        **kwargs
    ):
        super(AnalyzePrediction, self).__init__(**kwargs)
        self.top_intent = top_intent
        self.intents = intents


class AnswerSpan(msrest.serialization.Model):
    """Answer span object of QnA.

    :param text: Predicted text of answer span.
    :type text: str
    :param confidence_score: Predicted score of answer span, value ranges from 0 to 1.
    :type confidence_score: float
    :param offset: The answer span offset from the start of answer.
    :type offset: int
    :param length: The length of the answer span.
    :type length: int
    """

    _validation = {
        'confidence_score': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        text: Optional[str] = None,
        confidence_score: Optional[float] = None,
        offset: Optional[int] = None,
        length: Optional[int] = None,
        **kwargs
    ):
        super(AnswerSpan, self).__init__(**kwargs)
        self.text = text
        self.confidence_score = confidence_score
        self.offset = offset
        self.length = length


class AnswerSpanRequest(msrest.serialization.Model):
    """To configure Answer span prediction feature.

    :param enable: Enable or disable Answer Span prediction.
    :type enable: bool
    :param confidence_score_threshold: Minimum threshold score required to include an answer span,
     value ranges from 0 to 1.
    :type confidence_score_threshold: float
    :param top_answers_with_span: Number of Top answers to be considered for span prediction from 1
     to 10.
    :type top_answers_with_span: int
    """

    _validation = {
        'confidence_score_threshold': {'maximum': 1, 'minimum': 0},
        'top_answers_with_span': {'maximum': 10, 'minimum': 1},
    }

    _attribute_map = {
        'enable': {'key': 'enable', 'type': 'bool'},
        'confidence_score_threshold': {'key': 'confidenceScoreThreshold', 'type': 'float'},
        'top_answers_with_span': {'key': 'topAnswersWithSpan', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        enable: Optional[bool] = None,
        confidence_score_threshold: Optional[float] = None,
        top_answers_with_span: Optional[int] = None,
        **kwargs
    ):
        super(AnswerSpanRequest, self).__init__(**kwargs)
        self.enable = enable
        self.confidence_score_threshold = confidence_score_threshold
        self.top_answers_with_span = top_answers_with_span


class BaseIntent(msrest.serialization.Model):
    """This is the base class of an intent prediction.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DeepstackIntent, LUISIntentV2, LUISIntentV3, QuestionAnsweringIntent.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server.  Possible values include: "luis_v2", "luis_v3", "luis_deepstack",
     "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version used to call a target project.
    :type api_version: str
    :param confidence_score: Required. The prediction score and it ranges from 0.0 to 1.0.
    :type confidence_score: float
    """

    _validation = {
        'project_type': {'required': True},
        'confidence_score': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
    }

    _subtype_map = {
        'project_type': {'luis_deepstack': 'DeepstackIntent', 'luis_v2': 'LUISIntentV2', 'luis_v3': 'LUISIntentV3', 'question_answering': 'QuestionAnsweringIntent'}
    }

    def __init__(
        self,
        *,
        confidence_score: float,
        api_version: Optional[str] = None,
        **kwargs
    ):
        super(BaseIntent, self).__init__(**kwargs)
        self.project_type = None  # type: Optional[str]
        self.api_version = api_version
        self.confidence_score = confidence_score


class CompositeChildModel(msrest.serialization.Model):
    """Child entity in a LUIS Composite Entity.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Type of child entity.
    :type type: str
    :param value: Required. Value extracted by LUIS.
    :type value: str
    """

    _validation = {
        'type': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: str,
        value: str,
        **kwargs
    ):
        super(CompositeChildModel, self).__init__(**kwargs)
        self.type = type
        self.value = value


class CompositeEntityModel(msrest.serialization.Model):
    """LUIS Composite Entity.

    All required parameters must be populated in order to send to Azure.

    :param parent_type: Required. Type/name of parent entity.
    :type parent_type: str
    :param value: Required. Value for composite entity extracted by LUIS.
    :type value: str
    :param children: Required. Child entities.
    :type children: list[~microsoft_cognitive_language_service.models.CompositeChildModel]
    """

    _validation = {
        'parent_type': {'required': True},
        'value': {'required': True},
        'children': {'required': True},
    }

    _attribute_map = {
        'parent_type': {'key': 'parentType', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'children': {'key': 'children', 'type': '[CompositeChildModel]'},
    }

    def __init__(
        self,
        *,
        parent_type: str,
        value: str,
        children: List["CompositeChildModel"],
        **kwargs
    ):
        super(CompositeEntityModel, self).__init__(**kwargs)
        self.parent_type = parent_type
        self.value = value
        self.children = children


class ConversationAnalysisInput(msrest.serialization.Model):
    """The request body.

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The conversation utterance to be analyzed.
    :type query: str
    :param direct_target: The name of the target project this request is sending to directly.
    :type direct_target: str
    :param language: The language to use in this request. This will be the language setting when
     communicating all target projects.
    :type language: str
    :param verbose: If true, the service will return more detailed information in the response.
    :type verbose: bool
    :param is_logging_enabled: If true, the query will be kept by the service for customers to
     further review, to improve the model quality.
    :type is_logging_enabled: bool
    :param parameters: A dictionary representing the input for each target project.
    :type parameters: dict[str, ~microsoft_cognitive_language_service.models.AnalyzeParameters]
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'direct_target': {'key': 'directTarget', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'verbose': {'key': 'verbose', 'type': 'bool'},
        'is_logging_enabled': {'key': 'isLoggingEnabled', 'type': 'bool'},
        'parameters': {'key': 'parameters', 'type': '{AnalyzeParameters}'},
    }

    def __init__(
        self,
        *,
        query: str,
        direct_target: Optional[str] = None,
        language: Optional[str] = None,
        verbose: Optional[bool] = None,
        is_logging_enabled: Optional[bool] = None,
        parameters: Optional[Dict[str, "AnalyzeParameters"]] = None,
        **kwargs
    ):
        super(ConversationAnalysisInput, self).__init__(**kwargs)
        self.query = query
        self.direct_target = direct_target
        self.language = language
        self.verbose = verbose
        self.is_logging_enabled = is_logging_enabled
        self.parameters = parameters


class ConversationAnalysisResult(msrest.serialization.Model):
    """Represents a conversation analysis response.

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The conversation utterance given by the caller.
    :type query: str
    :param prediction: Required. The prediction result of a conversation project.
    :type prediction: ~microsoft_cognitive_language_service.models.AnalyzePrediction
    """

    _validation = {
        'query': {'required': True},
        'prediction': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'prediction': {'key': 'prediction', 'type': 'AnalyzePrediction'},
    }

    def __init__(
        self,
        *,
        query: str,
        prediction: "AnalyzePrediction",
        **kwargs
    ):
        super(ConversationAnalysisResult, self).__init__(**kwargs)
        self.query = query
        self.prediction = prediction


class DeepstackClassification(msrest.serialization.Model):
    """DeepstackClassification.

    All required parameters must be populated in order to send to Azure.

    :param category: Required. A predicted class.
    :type category: str
    :param confidence_score: Required. The confidence score of the class from 0.0 to 1.0.
    :type confidence_score: float
    """

    _validation = {
        'category': {'required': True},
        'confidence_score': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        category: str,
        confidence_score: float,
        **kwargs
    ):
        super(DeepstackClassification, self).__init__(**kwargs)
        self.category = category
        self.confidence_score = confidence_score


class DeepstackEntity(msrest.serialization.Model):
    """DeepstackEntity.

    All required parameters must be populated in order to send to Azure.

    :param category: Required. The entity category.
    :type category: str
    :param text: Required. The predicted entity text.
    :type text: str
    :param offset: Required. The starting index of this entity in the query.
    :type offset: int
    :param length: Required. The length of the text.
    :type length: int
    :param confidence_score: Required. The entity confidence score.
    :type confidence_score: float
    """

    _validation = {
        'category': {'required': True},
        'text': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
        'confidence_score': {'required': True},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        category: str,
        text: str,
        offset: int,
        length: int,
        confidence_score: float,
        **kwargs
    ):
        super(DeepstackEntity, self).__init__(**kwargs)
        self.category = category
        self.text = text
        self.offset = offset
        self.length = length
        self.confidence_score = confidence_score


class DeepstackIntent(BaseIntent):
    """A wrap up of LUIS Deepstack response.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server.  Possible values include: "luis_v2", "luis_v3", "luis_deepstack",
     "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version used to call a target project.
    :type api_version: str
    :param confidence_score: Required. The prediction score and it ranges from 0.0 to 1.0.
    :type confidence_score: float
    :param result: The actual response from a LUIS Deepstack application.
    :type result: ~microsoft_cognitive_language_service.models.DeepstackResult
    """

    _validation = {
        'project_type': {'required': True},
        'confidence_score': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'result': {'key': 'result', 'type': 'DeepstackResult'},
    }

    def __init__(
        self,
        *,
        confidence_score: float,
        api_version: Optional[str] = None,
        result: Optional["DeepstackResult"] = None,
        **kwargs
    ):
        super(DeepstackIntent, self).__init__(api_version=api_version, confidence_score=confidence_score, **kwargs)
        self.project_type = 'luis_deepstack'  # type: str
        self.result = result


class DeepstackParameters(AnalyzeParameters):
    """This is a set of request parameters for LUIS Deepstack projects.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. The type of the project. It could be one of the following
     values.Constant filled by server.  Possible values include: "luis_v2", "luis_v3",
     "luis_deepstack", "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version to use when call a specific target project.
    :type api_version: str
    :param language: The detected language of the input query.
    :type language: str
    :param verbose: If true, the service will return more detailed information.
    :type verbose: bool
    :param is_logging_enabled: If true, the query will be saved for customers to further review in
     authoring, to improve the model quality.
    :type is_logging_enabled: bool
    """

    _validation = {
        'project_type': {'required': True},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'verbose': {'key': 'verbose', 'type': 'bool'},
        'is_logging_enabled': {'key': 'isLoggingEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        language: Optional[str] = None,
        verbose: Optional[bool] = None,
        is_logging_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(DeepstackParameters, self).__init__(api_version=api_version, **kwargs)
        self.project_type = 'luis_deepstack'  # type: str
        self.language = language
        self.verbose = verbose
        self.is_logging_enabled = is_logging_enabled


class DeepstackPrediction(msrest.serialization.Model):
    """DeepstackPrediction.

    All required parameters must be populated in order to send to Azure.

    :param classifications: Required. The classification results.
    :type classifications:
     list[~microsoft_cognitive_language_service.models.DeepstackClassification]
    :param entities: Required. The entity extraction results.
    :type entities: list[~microsoft_cognitive_language_service.models.DeepstackEntity]
    """

    _validation = {
        'classifications': {'required': True},
        'entities': {'required': True},
    }

    _attribute_map = {
        'classifications': {'key': 'classifications', 'type': '[DeepstackClassification]'},
        'entities': {'key': 'entities', 'type': '[DeepstackEntity]'},
    }

    def __init__(
        self,
        *,
        classifications: List["DeepstackClassification"],
        entities: List["DeepstackEntity"],
        **kwargs
    ):
        super(DeepstackPrediction, self).__init__(**kwargs)
        self.classifications = classifications
        self.entities = entities


class DeepstackResult(msrest.serialization.Model):
    """DeepstackResult.

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The same query given in request.
    :type query: str
    :param detected_language: The detected language from the query.
    :type detected_language: str
    :param prediction: Required. The predicted result for the query.
    :type prediction: ~microsoft_cognitive_language_service.models.DeepstackPrediction
    """

    _validation = {
        'query': {'required': True},
        'prediction': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'detected_language': {'key': 'detectedLanguage', 'type': 'str'},
        'prediction': {'key': 'prediction', 'type': 'DeepstackPrediction'},
    }

    def __init__(
        self,
        *,
        query: str,
        prediction: "DeepstackPrediction",
        detected_language: Optional[str] = None,
        **kwargs
    ):
        super(DeepstackResult, self).__init__(**kwargs)
        self.query = query
        self.detected_language = detected_language
        self.prediction = prediction


class DynamicList(msrest.serialization.Model):
    """Defines an extension for a list entity.

    All required parameters must be populated in order to send to Azure.

    :param list_entity_name: Required. The name of the list entity to extend.
    :type list_entity_name: str
    :param request_lists: Required. The lists to append on the extended list entity.
    :type request_lists: list[~microsoft_cognitive_language_service.models.RequestList]
    """

    _validation = {
        'list_entity_name': {'required': True},
        'request_lists': {'required': True},
    }

    _attribute_map = {
        'list_entity_name': {'key': 'listEntityName', 'type': 'str'},
        'request_lists': {'key': 'requestLists', 'type': '[RequestList]'},
    }

    def __init__(
        self,
        *,
        list_entity_name: str,
        request_lists: List["RequestList"],
        **kwargs
    ):
        super(DynamicList, self).__init__(**kwargs)
        self.list_entity_name = list_entity_name
        self.request_lists = request_lists


class EntityModel(msrest.serialization.Model):
    """An entity extracted from the utterance.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param entity: Required. Name of the entity, as defined in LUIS.
    :type entity: str
    :param type: Required. Type of the entity, as defined in LUIS.
    :type type: str
    :param start_index: Required. The position of the first character of the matched entity within
     the utterance.
    :type start_index: int
    :param end_index: Required. The position of the last character of the matched entity within the
     utterance.
    :type end_index: int
    """

    _validation = {
        'entity': {'required': True},
        'type': {'required': True},
        'start_index': {'required': True},
        'end_index': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'entity': {'key': 'entity', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'start_index': {'key': 'startIndex', 'type': 'int'},
        'end_index': {'key': 'endIndex', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        entity: str,
        type: str,
        start_index: int,
        end_index: int,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(EntityModel, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.entity = entity
        self.type = type
        self.start_index = start_index
        self.end_index = end_index


class Error(msrest.serialization.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. One of a server-defined set of error codes. Possible values include:
     "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
     "TooManyRequests", "InternalServerError", "ServiceUnavailable".
    :type code: str or ~microsoft_cognitive_language_service.models.ErrorCode
    :param message: Required. A human-readable representation of the error.
    :type message: str
    :param target: The target of the error.
    :type target: str
    :param details: An array of details about specific errors that led to this reported error.
    :type details: list[~microsoft_cognitive_language_service.models.Error]
    :param innererror: An object containing more specific information than the current object about
     the error.
    :type innererror: ~microsoft_cognitive_language_service.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerErrorModel'},
    }

    def __init__(
        self,
        *,
        code: Union[str, "ErrorCode"],
        message: str,
        target: Optional[str] = None,
        details: Optional[List["Error"]] = None,
        innererror: Optional["InnerErrorModel"] = None,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    :param error: The error object.
    :type error: ~microsoft_cognitive_language_service.models.Error
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        error: Optional["Error"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ExternalEntity(msrest.serialization.Model):
    """Defines a user predicted entity that extends an already existing one.

    All required parameters must be populated in order to send to Azure.

    :param entity_name: Required. The name of the entity to extend.
    :type entity_name: str
    :param start_index: Required. The start character index of the predicted entity.
    :type start_index: int
    :param entity_length: Required. The length of the predicted entity.
    :type entity_length: int
    :param resolution: A user supplied custom resolution to return as the entity's prediction.
    :type resolution: object
    :param score: A user supplied score to return as the entity's prediction score.
    :type score: float
    """

    _validation = {
        'entity_name': {'required': True},
        'start_index': {'required': True},
        'entity_length': {'required': True},
    }

    _attribute_map = {
        'entity_name': {'key': 'entityName', 'type': 'str'},
        'start_index': {'key': 'startIndex', 'type': 'int'},
        'entity_length': {'key': 'entityLength', 'type': 'int'},
        'resolution': {'key': 'resolution', 'type': 'object'},
        'score': {'key': 'score', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        entity_name: str,
        start_index: int,
        entity_length: int,
        resolution: Optional[object] = None,
        score: Optional[float] = None,
        **kwargs
    ):
        super(ExternalEntity, self).__init__(**kwargs)
        self.entity_name = entity_name
        self.start_index = start_index
        self.entity_length = entity_length
        self.resolution = resolution
        self.score = score


class InnerErrorModel(msrest.serialization.Model):
    """An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. One of a server-defined set of error codes. Possible values include:
     "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
     "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure".
    :type code: str or ~microsoft_cognitive_language_service.models.InnerErrorCode
    :param message: Required. Error message.
    :type message: str
    :param details: Error details.
    :type details: dict[str, str]
    :param target: Error target.
    :type target: str
    :param innererror: An object containing more specific information than the current object about
     the error.
    :type innererror: ~microsoft_cognitive_language_service.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '{str}'},
        'target': {'key': 'target', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerErrorModel'},
    }

    def __init__(
        self,
        *,
        code: Union[str, "InnerErrorCode"],
        message: str,
        details: Optional[Dict[str, str]] = None,
        target: Optional[str] = None,
        innererror: Optional["InnerErrorModel"] = None,
        **kwargs
    ):
        super(InnerErrorModel, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details
        self.target = target
        self.innererror = innererror


class Intent(msrest.serialization.Model):
    """Represents an intent prediction.

    :param score: The score of the fired intent.
    :type score: float
    :param child_app: The prediction of the dispatched application.
    :type child_app: ~microsoft_cognitive_language_service.models.Prediction
    """

    _attribute_map = {
        'score': {'key': 'score', 'type': 'float'},
        'child_app': {'key': 'childApp', 'type': 'Prediction'},
    }

    def __init__(
        self,
        *,
        score: Optional[float] = None,
        child_app: Optional["Prediction"] = None,
        **kwargs
    ):
        super(Intent, self).__init__(**kwargs)
        self.score = score
        self.child_app = child_app


class IntentModel(msrest.serialization.Model):
    """An intent detected from the utterance.

    :param intent: Name of the intent, as defined in LUIS.
    :type intent: str
    :param score: Associated prediction score for the intent (float).
    :type score: float
    """

    _validation = {
        'score': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'intent': {'key': 'intent', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        intent: Optional[str] = None,
        score: Optional[float] = None,
        **kwargs
    ):
        super(IntentModel, self).__init__(**kwargs)
        self.intent = intent
        self.score = score


class KnowledgebaseAnswer(msrest.serialization.Model):
    """Represents Knowledgebase Answer.

    :param questions: List of questions.
    :type questions: list[str]
    :param answer: The Answer.
    :type answer: str
    :param confidence_score: Answer confidence score, value ranges from 0 to 1.
    :type confidence_score: float
    :param id: ID of the QnA result.
    :type id: int
    :param source: Source of QnA result.
    :type source: str
    :param metadata: Metadata associated with the answer, useful to categorize or filter question
     answers.
    :type metadata: dict[str, str]
    :param dialog: Dialog associated with Answer.
    :type dialog: ~microsoft_cognitive_language_service.models.KnowledgebaseAnswerDialog
    :param answer_span: Answer span object of QnA with respect to user's question.
    :type answer_span: ~microsoft_cognitive_language_service.models.AnswerSpan
    """

    _validation = {
        'confidence_score': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'questions': {'key': 'questions', 'type': '[str]'},
        'answer': {'key': 'answer', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'id': {'key': 'id', 'type': 'int'},
        'source': {'key': 'source', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': '{str}'},
        'dialog': {'key': 'dialog', 'type': 'KnowledgebaseAnswerDialog'},
        'answer_span': {'key': 'answerSpan', 'type': 'AnswerSpan'},
    }

    def __init__(
        self,
        *,
        questions: Optional[List[str]] = None,
        answer: Optional[str] = None,
        confidence_score: Optional[float] = None,
        id: Optional[int] = None,
        source: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
        dialog: Optional["KnowledgebaseAnswerDialog"] = None,
        answer_span: Optional["AnswerSpan"] = None,
        **kwargs
    ):
        super(KnowledgebaseAnswer, self).__init__(**kwargs)
        self.questions = questions
        self.answer = answer
        self.confidence_score = confidence_score
        self.id = id
        self.source = source
        self.metadata = metadata
        self.dialog = dialog
        self.answer_span = answer_span


class KnowledgebaseAnswerDialog(msrest.serialization.Model):
    """Dialog associated with Answer.

    :param is_context_only: To mark if a prompt is relevant only with a previous question or not.
     If true, do not include this QnA as search result for queries without context; otherwise, if
     false, ignores context and includes this QnA in search result.
    :type is_context_only: bool
    :param prompts: List of 0 to 20 prompts associated with the answer.
    :type prompts: list[~microsoft_cognitive_language_service.models.KnowledgebaseAnswerPrompt]
    """

    _validation = {
        'prompts': {'max_items': 20, 'min_items': 0},
    }

    _attribute_map = {
        'is_context_only': {'key': 'isContextOnly', 'type': 'bool'},
        'prompts': {'key': 'prompts', 'type': '[KnowledgebaseAnswerPrompt]'},
    }

    def __init__(
        self,
        *,
        is_context_only: Optional[bool] = None,
        prompts: Optional[List["KnowledgebaseAnswerPrompt"]] = None,
        **kwargs
    ):
        super(KnowledgebaseAnswerDialog, self).__init__(**kwargs)
        self.is_context_only = is_context_only
        self.prompts = prompts


class KnowledgebaseAnswerPrompt(msrest.serialization.Model):
    """Prompt for an answer.

    :param display_order: Index of the prompt - used in ordering of the prompts.
    :type display_order: int
    :param qna_id: QnA ID corresponding to the prompt.
    :type qna_id: int
    :param display_text: Text displayed to represent a follow up question prompt.
    :type display_text: str
    """

    _validation = {
        'display_text': {'max_length': 200, 'min_length': 0},
    }

    _attribute_map = {
        'display_order': {'key': 'displayOrder', 'type': 'int'},
        'qna_id': {'key': 'qnaId', 'type': 'int'},
        'display_text': {'key': 'displayText', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_order: Optional[int] = None,
        qna_id: Optional[int] = None,
        display_text: Optional[str] = None,
        **kwargs
    ):
        super(KnowledgebaseAnswerPrompt, self).__init__(**kwargs)
        self.display_order = display_order
        self.qna_id = qna_id
        self.display_text = display_text


class KnowledgebaseAnswerRequestContext(msrest.serialization.Model):
    """Context object with previous QnA's information.

    All required parameters must be populated in order to send to Azure.

    :param previous_qna_id: Required. Previous turn top answer result QnA ID.
    :type previous_qna_id: int
    :param previous_user_query: Previous user query.
    :type previous_user_query: str
    """

    _validation = {
        'previous_qna_id': {'required': True},
    }

    _attribute_map = {
        'previous_qna_id': {'key': 'previousQnaId', 'type': 'int'},
        'previous_user_query': {'key': 'previousUserQuery', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        previous_qna_id: int,
        previous_user_query: Optional[str] = None,
        **kwargs
    ):
        super(KnowledgebaseAnswerRequestContext, self).__init__(**kwargs)
        self.previous_qna_id = previous_qna_id
        self.previous_user_query = previous_user_query


class KnowledgebaseAnswers(msrest.serialization.Model):
    """Represents List of Question Answers.

    :param answers: Represents Answer Result list.
    :type answers: list[~microsoft_cognitive_language_service.models.KnowledgebaseAnswer]
    """

    _attribute_map = {
        'answers': {'key': 'answers', 'type': '[KnowledgebaseAnswer]'},
    }

    def __init__(
        self,
        *,
        answers: Optional[List["KnowledgebaseAnswer"]] = None,
        **kwargs
    ):
        super(KnowledgebaseAnswers, self).__init__(**kwargs)
        self.answers = answers


class KnowledgebaseQueryParameters(msrest.serialization.Model):
    """The question parameters to answer using a knowledgebase.

    :param qna_id: Exact QnA ID to fetch from the knowledgebase, this field takes priority over
     question.
    :type qna_id: int
    :param question: User question to query against the knowledge base.
    :type question: str
    :param top: Max number of answers to be returned for the question.
    :type top: int
    :param user_id: Unique identifier for the user.
    :type user_id: str
    :param confidence_score_threshold: Minimum threshold score for answers, value ranges from 0 to
     1.
    :type confidence_score_threshold: float
    :param context: Context object with previous QnA's information.
    :type context: ~microsoft_cognitive_language_service.models.KnowledgebaseAnswerRequestContext
    :param ranker_type: (Optional) Set to 'QuestionOnly' for using a question only Ranker. Possible
     values include: "Default", "QuestionOnly".
    :type ranker_type: str or ~microsoft_cognitive_language_service.models.RankerType
    :param strict_filters: Filter QnAs based on give metadata list and knowledgebase source names.
    :type strict_filters: ~microsoft_cognitive_language_service.models.StrictFilters
    :param answer_span_request: To configure Answer span prediction feature.
    :type answer_span_request: ~microsoft_cognitive_language_service.models.AnswerSpanRequest
    :param include_unstructured_sources: (Optional) Flag to enable Query over Unstructured Sources.
    :type include_unstructured_sources: bool
    """

    _validation = {
        'confidence_score_threshold': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'qna_id': {'key': 'qnaId', 'type': 'int'},
        'question': {'key': 'question', 'type': 'str'},
        'top': {'key': 'top', 'type': 'int'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'confidence_score_threshold': {'key': 'confidenceScoreThreshold', 'type': 'float'},
        'context': {'key': 'context', 'type': 'KnowledgebaseAnswerRequestContext'},
        'ranker_type': {'key': 'rankerType', 'type': 'str'},
        'strict_filters': {'key': 'strictFilters', 'type': 'StrictFilters'},
        'answer_span_request': {'key': 'answerSpanRequest', 'type': 'AnswerSpanRequest'},
        'include_unstructured_sources': {'key': 'includeUnstructuredSources', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        qna_id: Optional[int] = None,
        question: Optional[str] = None,
        top: Optional[int] = None,
        user_id: Optional[str] = None,
        confidence_score_threshold: Optional[float] = None,
        context: Optional["KnowledgebaseAnswerRequestContext"] = None,
        ranker_type: Optional[Union[str, "RankerType"]] = None,
        strict_filters: Optional["StrictFilters"] = None,
        answer_span_request: Optional["AnswerSpanRequest"] = None,
        include_unstructured_sources: Optional[bool] = None,
        **kwargs
    ):
        super(KnowledgebaseQueryParameters, self).__init__(**kwargs)
        self.qna_id = qna_id
        self.question = question
        self.top = top
        self.user_id = user_id
        self.confidence_score_threshold = confidence_score_threshold
        self.context = context
        self.ranker_type = ranker_type
        self.strict_filters = strict_filters
        self.answer_span_request = answer_span_request
        self.include_unstructured_sources = include_unstructured_sources


class LUISIntentV2(BaseIntent):
    """It is a wrap up of LUIS Generally Available v2.0 response.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server.  Possible values include: "luis_v2", "luis_v3", "luis_deepstack",
     "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version used to call a target project.
    :type api_version: str
    :param confidence_score: Required. The prediction score and it ranges from 0.0 to 1.0.
    :type confidence_score: float
    :param result: The actual response from a LUIS Generally Available application and API version
     v2.0.
    :type result: ~microsoft_cognitive_language_service.models.LuisResult
    """

    _validation = {
        'project_type': {'required': True},
        'confidence_score': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'result': {'key': 'result', 'type': 'LuisResult'},
    }

    def __init__(
        self,
        *,
        confidence_score: float,
        api_version: Optional[str] = None,
        result: Optional["LuisResult"] = None,
        **kwargs
    ):
        super(LUISIntentV2, self).__init__(api_version=api_version, confidence_score=confidence_score, **kwargs)
        self.project_type = 'luis_v2'  # type: str
        self.result = result


class LUISIntentV3(BaseIntent):
    """It is a wrap up a LUIS Generally Available v3.0 response.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server.  Possible values include: "luis_v2", "luis_v3", "luis_deepstack",
     "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version used to call a target project.
    :type api_version: str
    :param confidence_score: Required. The prediction score and it ranges from 0.0 to 1.0.
    :type confidence_score: float
    :param result: The actual response from a LUIS Generally Available application and API version
     v3.0.
    :type result: ~microsoft_cognitive_language_service.models.PredictionResponse
    """

    _validation = {
        'project_type': {'required': True},
        'confidence_score': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'result': {'key': 'result', 'type': 'PredictionResponse'},
    }

    def __init__(
        self,
        *,
        confidence_score: float,
        api_version: Optional[str] = None,
        result: Optional["PredictionResponse"] = None,
        **kwargs
    ):
        super(LUISIntentV3, self).__init__(api_version=api_version, confidence_score=confidence_score, **kwargs)
        self.project_type = 'luis_v3'  # type: str
        self.result = result


class LuisResult(msrest.serialization.Model):
    """Prediction, based on the input query, containing intent(s) and entities.

    :param query: The input utterance that was analyzed.
    :type query: str
    :param altered_query: The corrected utterance (when spell checking was enabled).
    :type altered_query: str
    :param top_scoring_intent: An intent detected from the utterance.
    :type top_scoring_intent: ~microsoft_cognitive_language_service.models.IntentModel
    :param intents: All the intents (and their score) that were detected from utterance.
    :type intents: list[~microsoft_cognitive_language_service.models.IntentModel]
    :param entities: The entities extracted from the utterance.
    :type entities: list[~microsoft_cognitive_language_service.models.EntityModel]
    :param composite_entities: The composite entities extracted from the utterance.
    :type composite_entities:
     list[~microsoft_cognitive_language_service.models.CompositeEntityModel]
    :param sentiment_analysis: Sentiment of the input utterance.
    :type sentiment_analysis: ~microsoft_cognitive_language_service.models.Sentiment
    :param connected_service_result: Prediction, based on the input query, containing intent(s) and
     entities.
    :type connected_service_result: ~microsoft_cognitive_language_service.models.LuisResult
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'altered_query': {'key': 'alteredQuery', 'type': 'str'},
        'top_scoring_intent': {'key': 'topScoringIntent', 'type': 'IntentModel'},
        'intents': {'key': 'intents', 'type': '[IntentModel]'},
        'entities': {'key': 'entities', 'type': '[EntityModel]'},
        'composite_entities': {'key': 'compositeEntities', 'type': '[CompositeEntityModel]'},
        'sentiment_analysis': {'key': 'sentimentAnalysis', 'type': 'Sentiment'},
        'connected_service_result': {'key': 'connectedServiceResult', 'type': 'LuisResult'},
    }

    def __init__(
        self,
        *,
        query: Optional[str] = None,
        altered_query: Optional[str] = None,
        top_scoring_intent: Optional["IntentModel"] = None,
        intents: Optional[List["IntentModel"]] = None,
        entities: Optional[List["EntityModel"]] = None,
        composite_entities: Optional[List["CompositeEntityModel"]] = None,
        sentiment_analysis: Optional["Sentiment"] = None,
        connected_service_result: Optional["LuisResult"] = None,
        **kwargs
    ):
        super(LuisResult, self).__init__(**kwargs)
        self.query = query
        self.altered_query = altered_query
        self.top_scoring_intent = top_scoring_intent
        self.intents = intents
        self.entities = entities
        self.composite_entities = composite_entities
        self.sentiment_analysis = sentiment_analysis
        self.connected_service_result = connected_service_result


class LUISV2Parameters(AnalyzeParameters):
    """This is a set of request parameters for LUIS Generally Available projects and API version v2.0.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. The type of the project. It could be one of the following
     values.Constant filled by server.  Possible values include: "luis_v2", "luis_v3",
     "luis_deepstack", "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version to use when call a specific target project.
    :type api_version: str
    :param project_parameters: The utterance to predict.
    :type project_parameters: str
    """

    _validation = {
        'project_type': {'required': True},
        'project_parameters': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'project_parameters': {'key': 'projectParameters', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        project_parameters: Optional[str] = None,
        **kwargs
    ):
        super(LUISV2Parameters, self).__init__(api_version=api_version, **kwargs)
        self.project_type = 'luis_v2'  # type: str
        self.project_parameters = project_parameters


class LUISV3Parameters(AnalyzeParameters):
    """This is a set of request parameters for LUIS Generally Available projects and API version v3.0.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. The type of the project. It could be one of the following
     values.Constant filled by server.  Possible values include: "luis_v2", "luis_v3",
     "luis_deepstack", "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version to use when call a specific target project.
    :type api_version: str
    :param project_parameters: Represents the prediction request parameters.
    :type project_parameters: ~microsoft_cognitive_language_service.models.PredictionRequest
    """

    _validation = {
        'project_type': {'required': True},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'project_parameters': {'key': 'projectParameters', 'type': 'PredictionRequest'},
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        project_parameters: Optional["PredictionRequest"] = None,
        **kwargs
    ):
        super(LUISV3Parameters, self).__init__(api_version=api_version, **kwargs)
        self.project_type = 'luis_v3'  # type: str
        self.project_parameters = project_parameters


class MetadataFilter(msrest.serialization.Model):
    """Find QnAs that are associated with the given list of metadata.

    :param metadata: Dictionary of :code:`<string>`.
    :type metadata: dict[str, str]
    :param compound_operation: (Optional) Set to 'OR' for joining metadata using 'OR' operation.
     Possible values include: "AND", "OR".
    :type compound_operation: str or
     ~microsoft_cognitive_language_service.models.CompoundOperationType
    """

    _attribute_map = {
        'metadata': {'key': 'metadata', 'type': '{str}'},
        'compound_operation': {'key': 'compoundOperation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        metadata: Optional[Dict[str, str]] = None,
        compound_operation: Optional[Union[str, "CompoundOperationType"]] = None,
        **kwargs
    ):
        super(MetadataFilter, self).__init__(**kwargs)
        self.metadata = metadata
        self.compound_operation = compound_operation


class Prediction(msrest.serialization.Model):
    """Represents the prediction of a query.

    All required parameters must be populated in order to send to Azure.

    :param altered_query: The query after spell checking. Only set if spell check was enabled and a
     spelling mistake was found.
    :type altered_query: str
    :param top_intent: Required. The name of the top scoring intent.
    :type top_intent: str
    :param intents: Required. A dictionary representing the intents that fired.
    :type intents: dict[str, ~microsoft_cognitive_language_service.models.Intent]
    :param entities: Required. A dictionary representing the entities that fired.
    :type entities: dict[str, object]
    :param sentiment: The result of the sentiment analysis.
    :type sentiment: ~microsoft_cognitive_language_service.models.SentimentAutoGenerated
    """

    _validation = {
        'top_intent': {'required': True},
        'intents': {'required': True},
        'entities': {'required': True},
    }

    _attribute_map = {
        'altered_query': {'key': 'alteredQuery', 'type': 'str'},
        'top_intent': {'key': 'topIntent', 'type': 'str'},
        'intents': {'key': 'intents', 'type': '{Intent}'},
        'entities': {'key': 'entities', 'type': '{object}'},
        'sentiment': {'key': 'sentiment', 'type': 'SentimentAutoGenerated'},
    }

    def __init__(
        self,
        *,
        top_intent: str,
        intents: Dict[str, "Intent"],
        entities: Dict[str, object],
        altered_query: Optional[str] = None,
        sentiment: Optional["SentimentAutoGenerated"] = None,
        **kwargs
    ):
        super(Prediction, self).__init__(**kwargs)
        self.altered_query = altered_query
        self.top_intent = top_intent
        self.intents = intents
        self.entities = entities
        self.sentiment = sentiment


class PredictionRequest(msrest.serialization.Model):
    """Represents the prediction request parameters.

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The query to predict.
    :type query: str
    :param options: The custom options defined for this request.
    :type options: ~microsoft_cognitive_language_service.models.PredictionRequestOptions
    :param external_entities: The externally predicted entities for this request.
    :type external_entities: list[~microsoft_cognitive_language_service.models.ExternalEntity]
    :param dynamic_lists: The dynamically created list entities for this request.
    :type dynamic_lists: list[~microsoft_cognitive_language_service.models.DynamicList]
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'options': {'key': 'options', 'type': 'PredictionRequestOptions'},
        'external_entities': {'key': 'externalEntities', 'type': '[ExternalEntity]'},
        'dynamic_lists': {'key': 'dynamicLists', 'type': '[DynamicList]'},
    }

    def __init__(
        self,
        *,
        query: str,
        options: Optional["PredictionRequestOptions"] = None,
        external_entities: Optional[List["ExternalEntity"]] = None,
        dynamic_lists: Optional[List["DynamicList"]] = None,
        **kwargs
    ):
        super(PredictionRequest, self).__init__(**kwargs)
        self.query = query
        self.options = options
        self.external_entities = external_entities
        self.dynamic_lists = dynamic_lists


class PredictionRequestOptions(msrest.serialization.Model):
    """The custom options for the prediction request.

    :param datetime_reference: The reference DateTime used for predicting datetime entities.
    :type datetime_reference: ~datetime.datetime
    :param prefer_external_entities: Whether to make the external entities resolution override the
     predictions if an overlap occurs.
    :type prefer_external_entities: bool
    """

    _attribute_map = {
        'datetime_reference': {'key': 'datetimeReference', 'type': 'iso-8601'},
        'prefer_external_entities': {'key': 'preferExternalEntities', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        datetime_reference: Optional[datetime.datetime] = None,
        prefer_external_entities: Optional[bool] = None,
        **kwargs
    ):
        super(PredictionRequestOptions, self).__init__(**kwargs)
        self.datetime_reference = datetime_reference
        self.prefer_external_entities = prefer_external_entities


class PredictionResponse(msrest.serialization.Model):
    """Represents the prediction response.

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The query used in the prediction.
    :type query: str
    :param prediction: Required. The prediction of the requested query.
    :type prediction: ~microsoft_cognitive_language_service.models.Prediction
    """

    _validation = {
        'query': {'required': True},
        'prediction': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'prediction': {'key': 'prediction', 'type': 'Prediction'},
    }

    def __init__(
        self,
        *,
        query: str,
        prediction: "Prediction",
        **kwargs
    ):
        super(PredictionResponse, self).__init__(**kwargs)
        self.query = query
        self.prediction = prediction


class QuestionAnsweringIntent(BaseIntent):
    """It is a wrap up a Question Answering KB response.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server.  Possible values include: "luis_v2", "luis_v3", "luis_deepstack",
     "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version used to call a target project.
    :type api_version: str
    :param confidence_score: Required. The prediction score and it ranges from 0.0 to 1.0.
    :type confidence_score: float
    :param result: The generated answer by a Question Answering KB.
    :type result: ~microsoft_cognitive_language_service.models.KnowledgebaseAnswers
    """

    _validation = {
        'project_type': {'required': True},
        'confidence_score': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'result': {'key': 'result', 'type': 'KnowledgebaseAnswers'},
    }

    def __init__(
        self,
        *,
        confidence_score: float,
        api_version: Optional[str] = None,
        result: Optional["KnowledgebaseAnswers"] = None,
        **kwargs
    ):
        super(QuestionAnsweringIntent, self).__init__(api_version=api_version, confidence_score=confidence_score, **kwargs)
        self.project_type = 'question_answering'  # type: str
        self.result = result


class QuestionAnsweringParameters(AnalyzeParameters):
    """This is a set of request parameters for Question Answering knowledge bases.

    All required parameters must be populated in order to send to Azure.

    :param project_type: Required. The type of the project. It could be one of the following
     values.Constant filled by server.  Possible values include: "luis_v2", "luis_v3",
     "luis_deepstack", "question_answering".
    :type project_type: str or ~microsoft_cognitive_language_service.models.ProjectType
    :param api_version: The API version to use when call a specific target project.
    :type api_version: str
    :param project_parameters: The question parameters to answer using a knowledgebase.
    :type project_parameters:
     ~microsoft_cognitive_language_service.models.KnowledgebaseQueryParameters
    """

    _validation = {
        'project_type': {'required': True},
    }

    _attribute_map = {
        'project_type': {'key': 'projectType', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'project_parameters': {'key': 'projectParameters', 'type': 'KnowledgebaseQueryParameters'},
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        project_parameters: Optional["KnowledgebaseQueryParameters"] = None,
        **kwargs
    ):
        super(QuestionAnsweringParameters, self).__init__(api_version=api_version, **kwargs)
        self.project_type = 'question_answering'  # type: str
        self.project_parameters = project_parameters


class RequestList(msrest.serialization.Model):
    """Defines a sub-list to append to an existing list entity.

    All required parameters must be populated in order to send to Azure.

    :param name: The name of the sub-list.
    :type name: str
    :param canonical_form: Required. The canonical form of the sub-list.
    :type canonical_form: str
    :param synonyms: The synonyms of the canonical form.
    :type synonyms: list[str]
    """

    _validation = {
        'canonical_form': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'canonical_form': {'key': 'canonicalForm', 'type': 'str'},
        'synonyms': {'key': 'synonyms', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        canonical_form: str,
        name: Optional[str] = None,
        synonyms: Optional[List[str]] = None,
        **kwargs
    ):
        super(RequestList, self).__init__(**kwargs)
        self.name = name
        self.canonical_form = canonical_form
        self.synonyms = synonyms


class Sentiment(msrest.serialization.Model):
    """Sentiment of the input utterance.

    :param label: The polarity of the sentiment, can be positive, neutral or negative.
    :type label: str
    :param score: Score of the sentiment, ranges from 0 (most negative) to 1 (most positive).
    :type score: float
    """

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        label: Optional[str] = None,
        score: Optional[float] = None,
        **kwargs
    ):
        super(Sentiment, self).__init__(**kwargs)
        self.label = label
        self.score = score


class SentimentAutoGenerated(msrest.serialization.Model):
    """The result of the sentiment analysis.

    All required parameters must be populated in order to send to Azure.

    :param label: The label of the sentiment analysis result.
    :type label: str
    :param score: Required. The sentiment score of the query.
    :type score: float
    """

    _validation = {
        'score': {'required': True},
    }

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'score': {'key': 'score', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        score: float,
        label: Optional[str] = None,
        **kwargs
    ):
        super(SentimentAutoGenerated, self).__init__(**kwargs)
        self.label = label
        self.score = score


class StrictFilters(msrest.serialization.Model):
    """filters over knowledgebase.

    :param metadata_filter: Find QnAs that are associated with the given list of metadata.
    :type metadata_filter: ~microsoft_cognitive_language_service.models.MetadataFilter
    :param source_filter: Find QnAs that are associated with the given list of sources in
     knowledgebase.
    :type source_filter: list[str]
    :param compound_operation: (Optional) Set to 'OR' for joining metadata using 'OR' operation.
     Possible values include: "AND", "OR".
    :type compound_operation: str or
     ~microsoft_cognitive_language_service.models.CompoundOperationType
    """

    _attribute_map = {
        'metadata_filter': {'key': 'metadataFilter', 'type': 'MetadataFilter'},
        'source_filter': {'key': 'sourceFilter', 'type': '[str]'},
        'compound_operation': {'key': 'compoundOperation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        metadata_filter: Optional["MetadataFilter"] = None,
        source_filter: Optional[List[str]] = None,
        compound_operation: Optional[Union[str, "CompoundOperationType"]] = None,
        **kwargs
    ):
        super(StrictFilters, self).__init__(**kwargs)
        self.metadata_filter = metadata_filter
        self.source_filter = source_filter
        self.compound_operation = compound_operation
