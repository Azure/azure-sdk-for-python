# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    import __init__ as _models


class QuantityResolution(msrest.serialization.Model):
    """Represents resolutions for quantities.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        value: float,
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        """
        super(QuantityResolution, self).__init__(**kwargs)
        self.value = value


class BaseResolution(msrest.serialization.Model):
    """The abstract base class for entity resolutions.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AgeResolution, AreaResolution, BooleanResolution, CurrencyResolution, DateTimeResolution, InformationResolution, LengthResolution, NumberResolution, NumericRangeResolution, OrdinalResolution, SpeedResolution, TemperatureResolution, TemporalSpanResolution, VolumeResolution, WeightResolution.

    All required parameters must be populated in order to send to Azure.

    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    """

    _validation = {
        'resolution_kind': {'required': True},
    }

    _attribute_map = {
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
    }

    _subtype_map = {
        'resolution_kind': {'Age': 'AgeResolution', 'Area': 'AreaResolution', 'Boolean': 'BooleanResolution', 'Currency': 'CurrencyResolution', 'DateTime': 'DateTimeResolution', 'Information': 'InformationResolution', 'Length': 'LengthResolution', 'Number': 'NumberResolution', 'NumericRange': 'NumericRangeResolution', 'Ordinal': 'OrdinalResolution', 'Speed': 'SpeedResolution', 'Temperature': 'TemperatureResolution', 'TemporalSpan': 'TemporalSpanResolution', 'Volume': 'VolumeResolution', 'Weight': 'WeightResolution'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(BaseResolution, self).__init__(**kwargs)
        self.resolution_kind = None  # type: Optional[str]


class AgeResolution(BaseResolution, QuantityResolution):
    """Represents the Age entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar unit: Required. The Age Unit of measurement. Known values are: "Unspecified", "Year",
     "Month", "Week", "Day".
    :vartype unit: str or ~azure.ai.language.conversations.models.AgeUnit
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: Union[str, "_models.AgeUnit"],
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword unit: Required. The Age Unit of measurement. Known values are: "Unspecified", "Year",
         "Month", "Week", "Day".
        :paramtype unit: str or ~azure.ai.language.conversations.models.AgeUnit
        """
        super(AgeResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Age'  # type: str
        self.unit = unit


class AnalysisParameters(msrest.serialization.Model):
    """This is the parameter set of either the Orchestration project itself or one of the target services.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ConversationParameters, LuisParameters, QuestionAnsweringParameters.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. The type of a target service.Constant filled by server.
     Known values are: "Luis", "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version to use when call a specific target service.
    :vartype api_version: str
    """

    _validation = {
        'target_project_kind': {'required': True},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
    }

    _subtype_map = {
        'target_project_kind': {'Conversation': 'ConversationParameters', 'Luis': 'LuisParameters', 'QuestionAnswering': 'QuestionAnsweringParameters'}
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version to use when call a specific target service.
        :paramtype api_version: str
        """
        super(AnalysisParameters, self).__init__(**kwargs)
        self.target_project_kind = None  # type: Optional[str]
        self.api_version = api_version


class TaskState(msrest.serialization.Model):
    """Returns the current state of the task.

    All required parameters must be populated in order to send to Azure.

    :ivar last_update_date_time: Required. The last updated time in UTC for the task.
    :vartype last_update_date_time: ~datetime.datetime
    :ivar status: Required. The status of the task at the mentioned last update time. Known values
     are: "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling".
    :vartype status: str or ~azure.ai.language.conversations.models.TaskStateEnum
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        last_update_date_time: datetime.datetime,
        status: Union[str, "_models.TaskStateEnum"],
        **kwargs
    ):
        """
        :keyword last_update_date_time: Required. The last updated time in UTC for the task.
        :paramtype last_update_date_time: ~datetime.datetime
        :keyword status: Required. The status of the task at the mentioned last update time. Known
         values are: "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling".
        :paramtype status: str or ~azure.ai.language.conversations.models.TaskStateEnum
        """
        super(TaskState, self).__init__(**kwargs)
        self.last_update_date_time = last_update_date_time
        self.status = status


class TaskIdentifier(msrest.serialization.Model):
    """Base task object.

    :ivar task_name:
    :vartype task_name: str
    """

    _attribute_map = {
        'task_name': {'key': 'taskName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        task_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword task_name:
        :paramtype task_name: str
        """
        super(TaskIdentifier, self).__init__(**kwargs)
        self.task_name = task_name


class AnalyzeConversationJobResult(TaskIdentifier, TaskState):
    """Container for results for all tasks in the conversation job.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AnalyzeConversationPIIResult, AnalyzeConversationSummarizationResult.

    All required parameters must be populated in order to send to Azure.

    :ivar last_update_date_time: Required. The last updated time in UTC for the task.
    :vartype last_update_date_time: ~datetime.datetime
    :ivar status: Required. The status of the task at the mentioned last update time. Known values
     are: "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling".
    :vartype status: str or ~azure.ai.language.conversations.models.TaskStateEnum
    :ivar task_name:
    :vartype task_name: str
    :ivar kind: Required. Enumeration of supported Conversation Analysis task results.Constant
     filled by server. Known values are: "issueResolutionSummaryResults", "conversationPIIResults".
    :vartype kind: str or ~azure.ai.language.conversations.models.AnalyzeConversationResultsKind
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'task_name': {'key': 'taskName', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'conversationPIIResults': 'AnalyzeConversationPIIResult', 'issueResolutionSummaryResults': 'AnalyzeConversationSummarizationResult'}
    }

    def __init__(
        self,
        *,
        last_update_date_time: datetime.datetime,
        status: Union[str, "_models.TaskStateEnum"],
        task_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword last_update_date_time: Required. The last updated time in UTC for the task.
        :paramtype last_update_date_time: ~datetime.datetime
        :keyword status: Required. The status of the task at the mentioned last update time. Known
         values are: "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling".
        :paramtype status: str or ~azure.ai.language.conversations.models.TaskStateEnum
        :keyword task_name:
        :paramtype task_name: str
        """
        super(AnalyzeConversationJobResult, self).__init__(task_name=task_name, last_update_date_time=last_update_date_time, status=status, **kwargs)
        self.last_update_date_time = last_update_date_time
        self.status = status
        self.kind = 'AnalyzeConversationJobResult'  # type: str
        self.task_name = task_name


class AnalyzeConversationJobsInput(msrest.serialization.Model):
    """AnalyzeConversationJobsInput.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: Optional display name for the analysis job.
    :vartype display_name: str
    :ivar analysis_input: Required.
    :vartype analysis_input:
     ~azure.ai.language.conversations.models.MultiLanguageConversationAnalysisInput
    :ivar tasks: Required. The set of tasks to execute on the input conversation.
    :vartype tasks: list[~azure.ai.language.conversations.models.AnalyzeConversationLROTask]
    """

    _validation = {
        'analysis_input': {'required': True},
        'tasks': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'analysis_input': {'key': 'analysisInput', 'type': 'MultiLanguageConversationAnalysisInput'},
        'tasks': {'key': 'tasks', 'type': '[AnalyzeConversationLROTask]'},
    }

    def __init__(
        self,
        *,
        analysis_input: "_models.MultiLanguageConversationAnalysisInput",
        tasks: List["_models.AnalyzeConversationLROTask"],
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name: Optional display name for the analysis job.
        :paramtype display_name: str
        :keyword analysis_input: Required.
        :paramtype analysis_input:
         ~azure.ai.language.conversations.models.MultiLanguageConversationAnalysisInput
        :keyword tasks: Required. The set of tasks to execute on the input conversation.
        :paramtype tasks: list[~azure.ai.language.conversations.models.AnalyzeConversationLROTask]
        """
        super(AnalyzeConversationJobsInput, self).__init__(**kwargs)
        self.display_name = display_name
        self.analysis_input = analysis_input
        self.tasks = tasks


class AnalyzeConversationJobStatistics(msrest.serialization.Model):
    """Contains the statistics for the job submitted.

    :ivar statistics: if showStats=true was specified in the request this field will contain
     information about the request payload.
    :vartype statistics: ~azure.ai.language.conversations.models.ConversationRequestStatistics
    """

    _attribute_map = {
        'statistics': {'key': 'statistics', 'type': 'ConversationRequestStatistics'},
    }

    def __init__(
        self,
        *,
        statistics: Optional["_models.ConversationRequestStatistics"] = None,
        **kwargs
    ):
        """
        :keyword statistics: if showStats=true was specified in the request this field will contain
         information about the request payload.
        :paramtype statistics: ~azure.ai.language.conversations.models.ConversationRequestStatistics
        """
        super(AnalyzeConversationJobStatistics, self).__init__(**kwargs)
        self.statistics = statistics


class ConversationTasksState(msrest.serialization.Model):
    """Contains the state for the tasks being executed as part of the analyze conversation job submitted.

    All required parameters must be populated in order to send to Azure.

    :ivar tasks: Required.
    :vartype tasks: ~azure.ai.language.conversations.models.ConversationTasksStateTasks
    """

    _validation = {
        'tasks': {'required': True},
    }

    _attribute_map = {
        'tasks': {'key': 'tasks', 'type': 'ConversationTasksStateTasks'},
    }

    def __init__(
        self,
        *,
        tasks: "_models.ConversationTasksStateTasks",
        **kwargs
    ):
        """
        :keyword tasks: Required.
        :paramtype tasks: ~azure.ai.language.conversations.models.ConversationTasksStateTasks
        """
        super(ConversationTasksState, self).__init__(**kwargs)
        self.tasks = tasks


class JobState(msrest.serialization.Model):
    """JobState.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name:
    :vartype display_name: str
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar expiration_date_time:
    :vartype expiration_date_time: ~datetime.datetime
    :ivar job_id: Required.
    :vartype job_id: str
    :ivar last_updated_date_time: Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar status: Required. Known values are: "notStarted", "running", "succeeded",
     "partiallyCompleted", "failed", "cancelled", "cancelling".
    :vartype status: str or ~azure.ai.language.conversations.models.JobStateEnum
    :ivar errors:
    :vartype errors: list[~azure.ai.language.conversations.models.Error]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'created_date_time': {'required': True},
        'job_id': {'required': True},
        'last_updated_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[Error]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStateEnum"],
        display_name: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        errors: Optional[List["_models.Error"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_name:
        :paramtype display_name: str
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword expiration_date_time:
        :paramtype expiration_date_time: ~datetime.datetime
        :keyword job_id: Required.
        :paramtype job_id: str
        :keyword last_updated_date_time: Required.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword status: Required. Known values are: "notStarted", "running", "succeeded",
         "partiallyCompleted", "failed", "cancelled", "cancelling".
        :paramtype status: str or ~azure.ai.language.conversations.models.JobStateEnum
        :keyword errors:
        :paramtype errors: list[~azure.ai.language.conversations.models.Error]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(JobState, self).__init__(**kwargs)
        self.display_name = display_name
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_updated_date_time = last_updated_date_time
        self.status = status
        self.errors = errors
        self.next_link = next_link


class AnalyzeConversationJobState(JobState, ConversationTasksState, AnalyzeConversationJobStatistics):
    """Contains the status of the analyze conversations job submitted along with related statistics.

    All required parameters must be populated in order to send to Azure.

    :ivar statistics: if showStats=true was specified in the request this field will contain
     information about the request payload.
    :vartype statistics: ~azure.ai.language.conversations.models.ConversationRequestStatistics
    :ivar tasks: Required.
    :vartype tasks: ~azure.ai.language.conversations.models.ConversationTasksStateTasks
    :ivar display_name:
    :vartype display_name: str
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar expiration_date_time:
    :vartype expiration_date_time: ~datetime.datetime
    :ivar job_id: Required.
    :vartype job_id: str
    :ivar last_updated_date_time: Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar status: Required. Known values are: "notStarted", "running", "succeeded",
     "partiallyCompleted", "failed", "cancelled", "cancelling".
    :vartype status: str or ~azure.ai.language.conversations.models.JobStateEnum
    :ivar errors:
    :vartype errors: list[~azure.ai.language.conversations.models.Error]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'tasks': {'required': True},
        'created_date_time': {'required': True},
        'job_id': {'required': True},
        'last_updated_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'statistics': {'key': 'statistics', 'type': 'ConversationRequestStatistics'},
        'tasks': {'key': 'tasks', 'type': 'ConversationTasksStateTasks'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[Error]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tasks: "_models.ConversationTasksStateTasks",
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStateEnum"],
        statistics: Optional["_models.ConversationRequestStatistics"] = None,
        display_name: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        errors: Optional[List["_models.Error"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword statistics: if showStats=true was specified in the request this field will contain
         information about the request payload.
        :paramtype statistics: ~azure.ai.language.conversations.models.ConversationRequestStatistics
        :keyword tasks: Required.
        :paramtype tasks: ~azure.ai.language.conversations.models.ConversationTasksStateTasks
        :keyword display_name:
        :paramtype display_name: str
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword expiration_date_time:
        :paramtype expiration_date_time: ~datetime.datetime
        :keyword job_id: Required.
        :paramtype job_id: str
        :keyword last_updated_date_time: Required.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword status: Required. Known values are: "notStarted", "running", "succeeded",
         "partiallyCompleted", "failed", "cancelled", "cancelling".
        :paramtype status: str or ~azure.ai.language.conversations.models.JobStateEnum
        :keyword errors:
        :paramtype errors: list[~azure.ai.language.conversations.models.Error]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(AnalyzeConversationJobState, self).__init__(display_name=display_name, created_date_time=created_date_time, expiration_date_time=expiration_date_time, job_id=job_id, last_updated_date_time=last_updated_date_time, status=status, errors=errors, next_link=next_link, tasks=tasks, statistics=statistics, **kwargs)
        self.statistics = statistics
        self.tasks = tasks
        self.display_name = display_name
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_updated_date_time = last_updated_date_time
        self.status = status
        self.errors = errors
        self.next_link = next_link


class AnalyzeConversationLROTask(TaskIdentifier):
    """The base class for an long running conversation input task.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AnalyzeConversationPIITask, AnalyzeConversationSummarizationTask.

    All required parameters must be populated in order to send to Azure.

    :ivar task_name:
    :vartype task_name: str
    :ivar kind: Required. Enumeration of supported analysis tasks on a collection of
     conversations.Constant filled by server. Known values are: "ConversationalPIITask",
     "ConversationalSummarizationTask".
    :vartype kind: str or ~azure.ai.language.conversations.models.AnalyzeConversationLROTaskKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'task_name': {'key': 'taskName', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'ConversationPII': 'AnalyzeConversationPIITask', 'IssueResolutionSummarization': 'AnalyzeConversationSummarizationTask'}
    }

    def __init__(
        self,
        *,
        task_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword task_name:
        :paramtype task_name: str
        """
        super(AnalyzeConversationLROTask, self).__init__(task_name=task_name, **kwargs)
        self.kind = 'AnalyzeConversationLROTask'  # type: str


class AnalyzeConversationPIIResult(AnalyzeConversationJobResult):
    """Result from the personally identifiable information detection and redaction operation performed on a list of conversations.

    All required parameters must be populated in order to send to Azure.

    :ivar last_update_date_time: Required. The last updated time in UTC for the task.
    :vartype last_update_date_time: ~datetime.datetime
    :ivar status: Required. The status of the task at the mentioned last update time. Known values
     are: "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling".
    :vartype status: str or ~azure.ai.language.conversations.models.TaskStateEnum
    :ivar task_name:
    :vartype task_name: str
    :ivar kind: Required. Enumeration of supported Conversation Analysis task results.Constant
     filled by server. Known values are: "issueResolutionSummaryResults", "conversationPIIResults".
    :vartype kind: str or ~azure.ai.language.conversations.models.AnalyzeConversationResultsKind
    :ivar results: Required. The result from PII detection and redaction operation for each
     conversation.
    :vartype results: ~azure.ai.language.conversations.models.ConversationPIIResults
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
        'kind': {'required': True},
        'results': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'task_name': {'key': 'taskName', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'results': {'key': 'results', 'type': 'ConversationPIIResults'},
    }

    def __init__(
        self,
        *,
        last_update_date_time: datetime.datetime,
        status: Union[str, "_models.TaskStateEnum"],
        results: "_models.ConversationPIIResults",
        task_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword last_update_date_time: Required. The last updated time in UTC for the task.
        :paramtype last_update_date_time: ~datetime.datetime
        :keyword status: Required. The status of the task at the mentioned last update time. Known
         values are: "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling".
        :paramtype status: str or ~azure.ai.language.conversations.models.TaskStateEnum
        :keyword task_name:
        :paramtype task_name: str
        :keyword results: Required. The result from PII detection and redaction operation for each
         conversation.
        :paramtype results: ~azure.ai.language.conversations.models.ConversationPIIResults
        """
        super(AnalyzeConversationPIIResult, self).__init__(last_update_date_time=last_update_date_time, status=status, task_name=task_name, **kwargs)
        self.kind = 'conversationPIIResults'  # type: str
        self.results = results


class AnalyzeConversationPIITask(AnalyzeConversationLROTask):
    """Task definition for a PII redaction in conversations.

    All required parameters must be populated in order to send to Azure.

    :ivar task_name:
    :vartype task_name: str
    :ivar kind: Required. Enumeration of supported analysis tasks on a collection of
     conversations.Constant filled by server. Known values are: "ConversationalPIITask",
     "ConversationalSummarizationTask".
    :vartype kind: str or ~azure.ai.language.conversations.models.AnalyzeConversationLROTaskKind
    :ivar parameters: Supported parameters for a Conversational PII detection and redaction task.
    :vartype parameters: ~azure.ai.language.conversations.models.ConversationPIITaskParameters
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'task_name': {'key': 'taskName', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'ConversationPIITaskParameters'},
    }

    def __init__(
        self,
        *,
        task_name: Optional[str] = None,
        parameters: Optional["_models.ConversationPIITaskParameters"] = None,
        **kwargs
    ):
        """
        :keyword task_name:
        :paramtype task_name: str
        :keyword parameters: Supported parameters for a Conversational PII detection and redaction
         task.
        :paramtype parameters: ~azure.ai.language.conversations.models.ConversationPIITaskParameters
        """
        super(AnalyzeConversationPIITask, self).__init__(task_name=task_name, **kwargs)
        self.kind = 'ConversationPII'  # type: str
        self.parameters = parameters


class AnalyzeConversationResult(msrest.serialization.Model):
    """Represents a conversation analysis response.

    All required parameters must be populated in order to send to Azure.

    :ivar query: Required. The conversation utterance given by the caller.
    :vartype query: str
    :ivar detected_language: The system detected language for the query in BCP 47 language
     representation..
    :vartype detected_language: str
    :ivar prediction: Required. The prediction result of a conversation project.
    :vartype prediction: ~azure.ai.language.conversations.models.BasePrediction
    """

    _validation = {
        'query': {'required': True},
        'prediction': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'detected_language': {'key': 'detectedLanguage', 'type': 'str'},
        'prediction': {'key': 'prediction', 'type': 'BasePrediction'},
    }

    def __init__(
        self,
        *,
        query: str,
        prediction: "_models.BasePrediction",
        detected_language: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword query: Required. The conversation utterance given by the caller.
        :paramtype query: str
        :keyword detected_language: The system detected language for the query in BCP 47 language
         representation..
        :paramtype detected_language: str
        :keyword prediction: Required. The prediction result of a conversation project.
        :paramtype prediction: ~azure.ai.language.conversations.models.BasePrediction
        """
        super(AnalyzeConversationResult, self).__init__(**kwargs)
        self.query = query
        self.detected_language = detected_language
        self.prediction = prediction


class AnalyzeConversationSummarizationResult(AnalyzeConversationJobResult):
    """Result for the summarization task on the conversation.

    All required parameters must be populated in order to send to Azure.

    :ivar last_update_date_time: Required. The last updated time in UTC for the task.
    :vartype last_update_date_time: ~datetime.datetime
    :ivar status: Required. The status of the task at the mentioned last update time. Known values
     are: "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling".
    :vartype status: str or ~azure.ai.language.conversations.models.TaskStateEnum
    :ivar task_name:
    :vartype task_name: str
    :ivar kind: Required. Enumeration of supported Conversation Analysis task results.Constant
     filled by server. Known values are: "issueResolutionSummaryResults", "conversationPIIResults".
    :vartype kind: str or ~azure.ai.language.conversations.models.AnalyzeConversationResultsKind
    :ivar results: Required.
    :vartype results: ~azure.ai.language.conversations.models.SummaryResult
    """

    _validation = {
        'last_update_date_time': {'required': True},
        'status': {'required': True},
        'kind': {'required': True},
        'results': {'required': True},
    }

    _attribute_map = {
        'last_update_date_time': {'key': 'lastUpdateDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'task_name': {'key': 'taskName', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'results': {'key': 'results', 'type': 'SummaryResult'},
    }

    def __init__(
        self,
        *,
        last_update_date_time: datetime.datetime,
        status: Union[str, "_models.TaskStateEnum"],
        results: "_models.SummaryResult",
        task_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword last_update_date_time: Required. The last updated time in UTC for the task.
        :paramtype last_update_date_time: ~datetime.datetime
        :keyword status: Required. The status of the task at the mentioned last update time. Known
         values are: "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling".
        :paramtype status: str or ~azure.ai.language.conversations.models.TaskStateEnum
        :keyword task_name:
        :paramtype task_name: str
        :keyword results: Required.
        :paramtype results: ~azure.ai.language.conversations.models.SummaryResult
        """
        super(AnalyzeConversationSummarizationResult, self).__init__(last_update_date_time=last_update_date_time, status=status, task_name=task_name, **kwargs)
        self.kind = 'issueResolutionSummaryResults'  # type: str
        self.results = results


class AnalyzeConversationSummarizationTask(AnalyzeConversationLROTask):
    """Task definition for conversational summarization.

    All required parameters must be populated in order to send to Azure.

    :ivar task_name:
    :vartype task_name: str
    :ivar kind: Required. Enumeration of supported analysis tasks on a collection of
     conversations.Constant filled by server. Known values are: "ConversationalPIITask",
     "ConversationalSummarizationTask".
    :vartype kind: str or ~azure.ai.language.conversations.models.AnalyzeConversationLROTaskKind
    :ivar parameters: Supported parameters for an conversational summarization task.
    :vartype parameters:
     ~azure.ai.language.conversations.models.ConversationSummarizationTaskParameters
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'task_name': {'key': 'taskName', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'ConversationSummarizationTaskParameters'},
    }

    def __init__(
        self,
        *,
        task_name: Optional[str] = None,
        parameters: Optional["_models.ConversationSummarizationTaskParameters"] = None,
        **kwargs
    ):
        """
        :keyword task_name:
        :paramtype task_name: str
        :keyword parameters: Supported parameters for an conversational summarization task.
        :paramtype parameters:
         ~azure.ai.language.conversations.models.ConversationSummarizationTaskParameters
        """
        super(AnalyzeConversationSummarizationTask, self).__init__(task_name=task_name, **kwargs)
        self.kind = 'IssueResolutionSummarization'  # type: str
        self.parameters = parameters


class AnalyzeConversationTask(msrest.serialization.Model):
    """The base class of a conversation input task.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ConversationalTask.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Enumeration of supported Conversation tasks.Constant filled by server.
     Known values are: "Conversation".
    :vartype kind: str or ~azure.ai.language.conversations.models.AnalyzeConversationTaskKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Conversation': 'ConversationalTask'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(AnalyzeConversationTask, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class AnalyzeConversationTaskResult(msrest.serialization.Model):
    """The base class of a conversation task result.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ConversationalTaskResult.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Enumeration of supported conversational task results.Constant filled by
     server. Known values are: "ConversationResult".
    :vartype kind: str or
     ~azure.ai.language.conversations.models.AnalyzeConversationTaskResultsKind
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'ConversationResult': 'ConversationalTaskResult'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(AnalyzeConversationTaskResult, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class AnswersOptions(msrest.serialization.Model):
    """Parameters to query a knowledge base.

    :ivar qna_id: Exact QnA ID to fetch from the knowledge base, this field takes priority over
     question.
    :vartype qna_id: int
    :ivar question: User question to query against the knowledge base.
    :vartype question: str
    :ivar top: Max number of answers to be returned for the question.
    :vartype top: int
    :ivar user_id: Unique identifier for the user.
    :vartype user_id: str
    :ivar confidence_threshold: Minimum threshold score for answers, value ranges from 0 to 1.
    :vartype confidence_threshold: float
    :ivar answer_context: Context object with previous QnA's information.
    :vartype answer_context: ~azure.ai.language.conversations.models.KnowledgeBaseAnswerContext
    :ivar ranker_kind: Type of ranker to be used. Known values are: "QuestionOnly", "Default".
    :vartype ranker_kind: str or ~azure.ai.language.conversations.models.RankerKind
    :ivar filters: Filter QnAs based on given metadata list and knowledge base sources.
    :vartype filters: ~azure.ai.language.conversations.models.QueryFilters
    :ivar short_answer_options: To configure Answer span prediction feature.
    :vartype short_answer_options: ~azure.ai.language.conversations.models.ShortAnswerOptions
    :ivar include_unstructured_sources: (Optional) Flag to enable Query over Unstructured Sources.
    :vartype include_unstructured_sources: bool
    """

    _validation = {
        'confidence_threshold': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'qna_id': {'key': 'qnaId', 'type': 'int'},
        'question': {'key': 'question', 'type': 'str'},
        'top': {'key': 'top', 'type': 'int'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'confidence_threshold': {'key': 'confidenceScoreThreshold', 'type': 'float'},
        'answer_context': {'key': 'context', 'type': 'KnowledgeBaseAnswerContext'},
        'ranker_kind': {'key': 'rankerType', 'type': 'str'},
        'filters': {'key': 'filters', 'type': 'QueryFilters'},
        'short_answer_options': {'key': 'answerSpanRequest', 'type': 'ShortAnswerOptions'},
        'include_unstructured_sources': {'key': 'includeUnstructuredSources', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        qna_id: Optional[int] = None,
        question: Optional[str] = None,
        top: Optional[int] = None,
        user_id: Optional[str] = None,
        confidence_threshold: Optional[float] = None,
        answer_context: Optional["_models.KnowledgeBaseAnswerContext"] = None,
        ranker_kind: Optional[Union[str, "_models.RankerKind"]] = None,
        filters: Optional["_models.QueryFilters"] = None,
        short_answer_options: Optional["_models.ShortAnswerOptions"] = None,
        include_unstructured_sources: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword qna_id: Exact QnA ID to fetch from the knowledge base, this field takes priority over
         question.
        :paramtype qna_id: int
        :keyword question: User question to query against the knowledge base.
        :paramtype question: str
        :keyword top: Max number of answers to be returned for the question.
        :paramtype top: int
        :keyword user_id: Unique identifier for the user.
        :paramtype user_id: str
        :keyword confidence_threshold: Minimum threshold score for answers, value ranges from 0 to 1.
        :paramtype confidence_threshold: float
        :keyword answer_context: Context object with previous QnA's information.
        :paramtype answer_context: ~azure.ai.language.conversations.models.KnowledgeBaseAnswerContext
        :keyword ranker_kind: Type of ranker to be used. Known values are: "QuestionOnly", "Default".
        :paramtype ranker_kind: str or ~azure.ai.language.conversations.models.RankerKind
        :keyword filters: Filter QnAs based on given metadata list and knowledge base sources.
        :paramtype filters: ~azure.ai.language.conversations.models.QueryFilters
        :keyword short_answer_options: To configure Answer span prediction feature.
        :paramtype short_answer_options: ~azure.ai.language.conversations.models.ShortAnswerOptions
        :keyword include_unstructured_sources: (Optional) Flag to enable Query over Unstructured
         Sources.
        :paramtype include_unstructured_sources: bool
        """
        super(AnswersOptions, self).__init__(**kwargs)
        self.qna_id = qna_id
        self.question = question
        self.top = top
        self.user_id = user_id
        self.confidence_threshold = confidence_threshold
        self.answer_context = answer_context
        self.ranker_kind = ranker_kind
        self.filters = filters
        self.short_answer_options = short_answer_options
        self.include_unstructured_sources = include_unstructured_sources


class AnswerSpan(msrest.serialization.Model):
    """Answer span object of QnA.

    :ivar text: Predicted text of answer span.
    :vartype text: str
    :ivar confidence: Predicted score of answer span, value ranges from 0 to 1.
    :vartype confidence: float
    :ivar offset: The answer span offset from the start of answer.
    :vartype offset: int
    :ivar length: The length of the answer span.
    :vartype length: int
    """

    _validation = {
        'confidence': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        text: Optional[str] = None,
        confidence: Optional[float] = None,
        offset: Optional[int] = None,
        length: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword text: Predicted text of answer span.
        :paramtype text: str
        :keyword confidence: Predicted score of answer span, value ranges from 0 to 1.
        :paramtype confidence: float
        :keyword offset: The answer span offset from the start of answer.
        :paramtype offset: int
        :keyword length: The length of the answer span.
        :paramtype length: int
        """
        super(AnswerSpan, self).__init__(**kwargs)
        self.text = text
        self.confidence = confidence
        self.offset = offset
        self.length = length


class AnswersResult(msrest.serialization.Model):
    """Represents List of Question Answers.

    :ivar answers: Represents Answer Result list.
    :vartype answers: list[~azure.ai.language.conversations.models.KnowledgeBaseAnswer]
    """

    _attribute_map = {
        'answers': {'key': 'answers', 'type': '[KnowledgeBaseAnswer]'},
    }

    def __init__(
        self,
        *,
        answers: Optional[List["_models.KnowledgeBaseAnswer"]] = None,
        **kwargs
    ):
        """
        :keyword answers: Represents Answer Result list.
        :paramtype answers: list[~azure.ai.language.conversations.models.KnowledgeBaseAnswer]
        """
        super(AnswersResult, self).__init__(**kwargs)
        self.answers = answers


class AreaResolution(BaseResolution, QuantityResolution):
    """Represents the area entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar unit: Required. The area Unit of measurement. Known values are: "Unspecified",
     "SquareKilometer", "SquareHectometer", "SquareDecameter", "SquareDecimeter", "SquareMeter",
     "SquareCentimeter", "SquareMillimeter", "SquareInch", "SquareFoot", "SquareMile", "SquareYard",
     "Acre".
    :vartype unit: str or ~azure.ai.language.conversations.models.AreaUnit
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: Union[str, "_models.AreaUnit"],
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword unit: Required. The area Unit of measurement. Known values are: "Unspecified",
         "SquareKilometer", "SquareHectometer", "SquareDecameter", "SquareDecimeter", "SquareMeter",
         "SquareCentimeter", "SquareMillimeter", "SquareInch", "SquareFoot", "SquareMile", "SquareYard",
         "Acre".
        :paramtype unit: str or ~azure.ai.language.conversations.models.AreaUnit
        """
        super(AreaResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Area'  # type: str
        self.unit = unit


class AudioTiming(msrest.serialization.Model):
    """The audio timing information.

    :ivar offset: Offset from start of speech audio, in ticks. 1 tick = 100 ns.
    :vartype offset: long
    :ivar duration: Duration of word articulation, in ticks. 1 tick = 100 ns.
    :vartype duration: long
    """

    _attribute_map = {
        'offset': {'key': 'offset', 'type': 'long'},
        'duration': {'key': 'duration', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        offset: Optional[int] = None,
        duration: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword offset: Offset from start of speech audio, in ticks. 1 tick = 100 ns.
        :paramtype offset: long
        :keyword duration: Duration of word articulation, in ticks. 1 tick = 100 ns.
        :paramtype duration: long
        """
        super(AudioTiming, self).__init__(**kwargs)
        self.offset = offset
        self.duration = duration


class BaseExtraInformation(msrest.serialization.Model):
    """The abstract base object for entity extra information.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: EntitySubtype, ListKey.

    All required parameters must be populated in order to send to Azure.

    :ivar extra_information_kind: Required. The extra information object kind.Constant filled by
     server. Known values are: "EntitySubtype", "ListKey".
    :vartype extra_information_kind: str or
     ~azure.ai.language.conversations.models.ExtraInformationKind
    """

    _validation = {
        'extra_information_kind': {'required': True},
    }

    _attribute_map = {
        'extra_information_kind': {'key': 'extraInformationKind', 'type': 'str'},
    }

    _subtype_map = {
        'extra_information_kind': {'EntitySubtype': 'EntitySubtype', 'ListKey': 'ListKey'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(BaseExtraInformation, self).__init__(**kwargs)
        self.extra_information_kind = None  # type: Optional[str]


class BasePrediction(msrest.serialization.Model):
    """This is the base class of prediction.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ConversationPrediction, OrchestrationPrediction.

    All required parameters must be populated in order to send to Azure.

    :ivar project_kind: Required. The type of the project.Constant filled by server. Known values
     are: "Conversation", "Orchestration".
    :vartype project_kind: str or ~azure.ai.language.conversations.models.ProjectKind
    :ivar top_intent: The intent with the highest score.
    :vartype top_intent: str
    """

    _validation = {
        'project_kind': {'required': True},
    }

    _attribute_map = {
        'project_kind': {'key': 'projectKind', 'type': 'str'},
        'top_intent': {'key': 'topIntent', 'type': 'str'},
    }

    _subtype_map = {
        'project_kind': {'Conversation': 'ConversationPrediction', 'Orchestration': 'OrchestrationPrediction'}
    }

    def __init__(
        self,
        *,
        top_intent: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword top_intent: The intent with the highest score.
        :paramtype top_intent: str
        """
        super(BasePrediction, self).__init__(**kwargs)
        self.project_kind = None  # type: Optional[str]
        self.top_intent = top_intent


class BooleanResolution(BaseResolution):
    """A resolution for boolean expressions.

    All required parameters must be populated in order to send to Azure.

    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar value: Required.
    :vartype value: bool
    """

    _validation = {
        'resolution_kind': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'value': {'key': 'value', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        value: bool,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: bool
        """
        super(BooleanResolution, self).__init__(**kwargs)
        self.resolution_kind = 'Boolean'  # type: str
        self.value = value


class Conversation(msrest.serialization.Model):
    """A complete ordered set of utterances (spoken or written), by one or more speakers to be used for analysis.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: TextConversation, TranscriptConversation.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. Unique identifier for the conversation.
    :vartype id: str
    :ivar language: Required. The language of the conversation item in BCP-47 format.
    :vartype language: str
    :ivar modality: Required. Enumeration of supported conversational modalities.Constant filled by
     server. Known values are: "transcript", "text".
    :vartype modality: str or ~azure.ai.language.conversations.models.InputModality
    :ivar domain: Enumeration of supported conversational domains. Known values are: "finance",
     "healthcare", "generic".
    :vartype domain: str or ~azure.ai.language.conversations.models.ConversationDomain
    """

    _validation = {
        'id': {'required': True},
        'language': {'required': True},
        'modality': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'modality': {'key': 'modality', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
    }

    _subtype_map = {
        'modality': {'text': 'TextConversation', 'transcript': 'TranscriptConversation'}
    }

    def __init__(
        self,
        *,
        id: str,
        language: str,
        domain: Optional[Union[str, "_models.ConversationDomain"]] = None,
        **kwargs
    ):
        """
        :keyword id: Required. Unique identifier for the conversation.
        :paramtype id: str
        :keyword language: Required. The language of the conversation item in BCP-47 format.
        :paramtype language: str
        :keyword domain: Enumeration of supported conversational domains. Known values are: "finance",
         "healthcare", "generic".
        :paramtype domain: str or ~azure.ai.language.conversations.models.ConversationDomain
        """
        super(Conversation, self).__init__(**kwargs)
        self.id = id
        self.language = language
        self.modality = None  # type: Optional[str]
        self.domain = domain


class ConversationalTask(AnalyzeConversationTask):
    """The input for a custom conversation task.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Enumeration of supported Conversation tasks.Constant filled by server.
     Known values are: "Conversation".
    :vartype kind: str or ~azure.ai.language.conversations.models.AnalyzeConversationTaskKind
    :ivar analysis_input: Required. The input ConversationItem and its optional parameters.
    :vartype analysis_input: ~azure.ai.language.conversations.models.ConversationAnalysisOptions
    :ivar parameters: Required. Input parameters necessary for a Conversation task.
    :vartype parameters: ~azure.ai.language.conversations.models.ConversationTaskParameters
    """

    _validation = {
        'kind': {'required': True},
        'analysis_input': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'analysis_input': {'key': 'analysisInput', 'type': 'ConversationAnalysisOptions'},
        'parameters': {'key': 'parameters', 'type': 'ConversationTaskParameters'},
    }

    def __init__(
        self,
        *,
        analysis_input: "_models.ConversationAnalysisOptions",
        parameters: "_models.ConversationTaskParameters",
        **kwargs
    ):
        """
        :keyword analysis_input: Required. The input ConversationItem and its optional parameters.
        :paramtype analysis_input: ~azure.ai.language.conversations.models.ConversationAnalysisOptions
        :keyword parameters: Required. Input parameters necessary for a Conversation task.
        :paramtype parameters: ~azure.ai.language.conversations.models.ConversationTaskParameters
        """
        super(ConversationalTask, self).__init__(**kwargs)
        self.kind = 'Conversation'  # type: str
        self.analysis_input = analysis_input
        self.parameters = parameters


class ConversationalTaskResult(AnalyzeConversationTaskResult):
    """The results of a Conversation task.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Enumeration of supported conversational task results.Constant filled by
     server. Known values are: "ConversationResult".
    :vartype kind: str or
     ~azure.ai.language.conversations.models.AnalyzeConversationTaskResultsKind
    :ivar result: Required. Represents a conversation analysis response.
    :vartype result: ~azure.ai.language.conversations.models.AnalyzeConversationResult
    """

    _validation = {
        'kind': {'required': True},
        'result': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'result': {'key': 'result', 'type': 'AnalyzeConversationResult'},
    }

    def __init__(
        self,
        *,
        result: "_models.AnalyzeConversationResult",
        **kwargs
    ):
        """
        :keyword result: Required. Represents a conversation analysis response.
        :paramtype result: ~azure.ai.language.conversations.models.AnalyzeConversationResult
        """
        super(ConversationalTaskResult, self).__init__(**kwargs)
        self.kind = 'ConversationResult'  # type: str
        self.result = result


class ConversationAnalysisOptions(msrest.serialization.Model):
    """The input ConversationItem and its optional parameters.

    All required parameters must be populated in order to send to Azure.

    :ivar conversation_item: Required. The abstract base for a user input formatted conversation
     (e.g., Text, Transcript).
    :vartype conversation_item: ~azure.ai.language.conversations.models.ConversationItemBase
    """

    _validation = {
        'conversation_item': {'required': True},
    }

    _attribute_map = {
        'conversation_item': {'key': 'conversationItem', 'type': 'ConversationItemBase'},
    }

    def __init__(
        self,
        *,
        conversation_item: "_models.ConversationItemBase",
        **kwargs
    ):
        """
        :keyword conversation_item: Required. The abstract base for a user input formatted conversation
         (e.g., Text, Transcript).
        :paramtype conversation_item: ~azure.ai.language.conversations.models.ConversationItemBase
        """
        super(ConversationAnalysisOptions, self).__init__(**kwargs)
        self.conversation_item = conversation_item


class ConversationCallingOptions(msrest.serialization.Model):
    """The option to set to call a Conversation project.

    :ivar language: The language of the query in BCP 47 language representation..
    :vartype language: str
    :ivar verbose: If true, the service will return more detailed information.
    :vartype verbose: bool
    :ivar is_logging_enabled: If true, the query will be saved for customers to further review in
     authoring, to improve the model quality.
    :vartype is_logging_enabled: bool
    """

    _attribute_map = {
        'language': {'key': 'language', 'type': 'str'},
        'verbose': {'key': 'verbose', 'type': 'bool'},
        'is_logging_enabled': {'key': 'isLoggingEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        language: Optional[str] = None,
        verbose: Optional[bool] = None,
        is_logging_enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword language: The language of the query in BCP 47 language representation..
        :paramtype language: str
        :keyword verbose: If true, the service will return more detailed information.
        :paramtype verbose: bool
        :keyword is_logging_enabled: If true, the query will be saved for customers to further review
         in authoring, to improve the model quality.
        :paramtype is_logging_enabled: bool
        """
        super(ConversationCallingOptions, self).__init__(**kwargs)
        self.language = language
        self.verbose = verbose
        self.is_logging_enabled = is_logging_enabled


class ConversationEntity(msrest.serialization.Model):
    """The entity extraction result of a Conversation project.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Required. The entity category.
    :vartype category: str
    :ivar text: Required. The predicted entity text.
    :vartype text: str
    :ivar offset: Required. The starting index of this entity in the query.
    :vartype offset: int
    :ivar length: Required. The length of the text.
    :vartype length: int
    :ivar confidence: Required. The entity confidence score.
    :vartype confidence: float
    :ivar resolutions: The collection of entity resolution objects.
    :vartype resolutions: list[~azure.ai.language.conversations.models.BaseResolution]
    :ivar extra_information: The collection of entity extra information objects.
    :vartype extra_information: list[~azure.ai.language.conversations.models.BaseExtraInformation]
    """

    _validation = {
        'category': {'required': True},
        'text': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
        'confidence': {'required': True},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
        'resolutions': {'key': 'resolutions', 'type': '[BaseResolution]'},
        'extra_information': {'key': 'extraInformation', 'type': '[BaseExtraInformation]'},
    }

    def __init__(
        self,
        *,
        category: str,
        text: str,
        offset: int,
        length: int,
        confidence: float,
        resolutions: Optional[List["_models.BaseResolution"]] = None,
        extra_information: Optional[List["_models.BaseExtraInformation"]] = None,
        **kwargs
    ):
        """
        :keyword category: Required. The entity category.
        :paramtype category: str
        :keyword text: Required. The predicted entity text.
        :paramtype text: str
        :keyword offset: Required. The starting index of this entity in the query.
        :paramtype offset: int
        :keyword length: Required. The length of the text.
        :paramtype length: int
        :keyword confidence: Required. The entity confidence score.
        :paramtype confidence: float
        :keyword resolutions: The collection of entity resolution objects.
        :paramtype resolutions: list[~azure.ai.language.conversations.models.BaseResolution]
        :keyword extra_information: The collection of entity extra information objects.
        :paramtype extra_information:
         list[~azure.ai.language.conversations.models.BaseExtraInformation]
        """
        super(ConversationEntity, self).__init__(**kwargs)
        self.category = category
        self.text = text
        self.offset = offset
        self.length = length
        self.confidence = confidence
        self.resolutions = resolutions
        self.extra_information = extra_information


class ConversationIntent(msrest.serialization.Model):
    """The intent classification result of a Conversation project.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Required. A predicted class.
    :vartype category: str
    :ivar confidence: Required. The confidence score of the class from 0.0 to 1.0.
    :vartype confidence: float
    """

    _validation = {
        'category': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        category: str,
        confidence: float,
        **kwargs
    ):
        """
        :keyword category: Required. A predicted class.
        :paramtype category: str
        :keyword confidence: Required. The confidence score of the class from 0.0 to 1.0.
        :paramtype confidence: float
        """
        super(ConversationIntent, self).__init__(**kwargs)
        self.category = category
        self.confidence = confidence


class ConversationItemBase(msrest.serialization.Model):
    """The abstract base for a user input formatted conversation (e.g., Text, Transcript).

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: TextConversationItem, TranscriptConversationItem.

    All required parameters must be populated in order to send to Azure.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar id: Required. The ID of a conversation item.
    :vartype id: str
    :ivar participant_id: Required. The participant ID of a conversation item.
    :vartype participant_id: str
    :ivar language: The override language of a conversation item in BCP 47 language representation.
    :vartype language: str
    :ivar modality: Required. Enumeration of supported conversational modalities.Constant filled by
     server. Known values are: "transcript", "text".
    :vartype modality: str or ~azure.ai.language.conversations.models.InputModality
    :ivar role: The role of the participant. Known values are: "agent", "customer", "generic".
    :vartype role: str or ~azure.ai.language.conversations.models.Role
    """

    _validation = {
        'id': {'required': True},
        'participant_id': {'required': True},
        'modality': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'participant_id': {'key': 'participantId', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'modality': {'key': 'modality', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
    }

    _subtype_map = {
        'modality': {'text': 'TextConversationItem', 'transcript': 'TranscriptConversationItem'}
    }

    def __init__(
        self,
        *,
        id: str = "1",
        participant_id: str = "1",
        additional_properties: Optional[Dict[str, Any]] = None,
        language: Optional[str] = None,
        role: Optional[Union[str, "_models.Role"]] = None,
        **kwargs
    ):
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword id: Required. The ID of a conversation item.
        :paramtype id: str
        :keyword participant_id: Required. The participant ID of a conversation item.
        :paramtype participant_id: str
        :keyword language: The override language of a conversation item in BCP 47 language
         representation.
        :paramtype language: str
        :keyword role: The role of the participant. Known values are: "agent", "customer", "generic".
        :paramtype role: str or ~azure.ai.language.conversations.models.Role
        """
        super(ConversationItemBase, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.id = id
        self.participant_id = participant_id
        self.language = language
        self.modality = 'ConversationItemBase'  # type: str
        self.role = role


class ConversationParameters(AnalysisParameters):
    """This is a set of request parameters for Customized Conversation projects.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. The type of a target service.Constant filled by server.
     Known values are: "Luis", "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version to use when call a specific target service.
    :vartype api_version: str
    :ivar calling_options: The option to set to call a Conversation project.
    :vartype calling_options: ~azure.ai.language.conversations.models.ConversationCallingOptions
    """

    _validation = {
        'target_project_kind': {'required': True},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'calling_options': {'key': 'callingOptions', 'type': 'ConversationCallingOptions'},
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        calling_options: Optional["_models.ConversationCallingOptions"] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version to use when call a specific target service.
        :paramtype api_version: str
        :keyword calling_options: The option to set to call a Conversation project.
        :paramtype calling_options: ~azure.ai.language.conversations.models.ConversationCallingOptions
        """
        super(ConversationParameters, self).__init__(api_version=api_version, **kwargs)
        self.target_project_kind = 'Conversation'  # type: str
        self.calling_options = calling_options


class ConversationPIIItemResult(msrest.serialization.Model):
    """ConversationPIIItemResult.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required.
    :vartype id: str
    :ivar redacted_content: Required. The transcript content response generated by the service with
     all necessary personally identifiable information redacted.
    :vartype redacted_content: ~azure.ai.language.conversations.models.RedactedTranscriptContent
    :ivar entities: Required.
    :vartype entities: list[~azure.ai.language.conversations.models.Entity]
    """

    _validation = {
        'id': {'required': True},
        'redacted_content': {'required': True},
        'entities': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'redacted_content': {'key': 'redactedContent', 'type': 'RedactedTranscriptContent'},
        'entities': {'key': 'entities', 'type': '[Entity]'},
    }

    def __init__(
        self,
        *,
        id: str,
        redacted_content: "_models.RedactedTranscriptContent",
        entities: List["_models.Entity"],
        **kwargs
    ):
        """
        :keyword id: Required.
        :paramtype id: str
        :keyword redacted_content: Required. The transcript content response generated by the service
         with all necessary personally identifiable information redacted.
        :paramtype redacted_content: ~azure.ai.language.conversations.models.RedactedTranscriptContent
        :keyword entities: Required.
        :paramtype entities: list[~azure.ai.language.conversations.models.Entity]
        """
        super(ConversationPIIItemResult, self).__init__(**kwargs)
        self.id = id
        self.redacted_content = redacted_content
        self.entities = entities


class ConversationPIIResult(msrest.serialization.Model):
    """The result from PII detection and redaction operation for each conversation.

    All required parameters must be populated in order to send to Azure.

    :ivar conversation_items: Required. Enumeration of PII detection and redaction operation
     results for all the conversation items in a conversation.
    :vartype conversation_items:
     list[~azure.ai.language.conversations.models.ConversationPIIItemResult]
    """

    _validation = {
        'conversation_items': {'required': True},
    }

    _attribute_map = {
        'conversation_items': {'key': 'conversationItems', 'type': '[ConversationPIIItemResult]'},
    }

    def __init__(
        self,
        *,
        conversation_items: List["_models.ConversationPIIItemResult"],
        **kwargs
    ):
        """
        :keyword conversation_items: Required. Enumeration of PII detection and redaction operation
         results for all the conversation items in a conversation.
        :paramtype conversation_items:
         list[~azure.ai.language.conversations.models.ConversationPIIItemResult]
        """
        super(ConversationPIIResult, self).__init__(**kwargs)
        self.conversation_items = conversation_items


class PreBuiltResult(msrest.serialization.Model):
    """PreBuiltResult.

    All required parameters must be populated in order to send to Azure.

    :ivar errors: Required. Errors by document id.
    :vartype errors: list[~azure.ai.language.conversations.models.InputError]
    :ivar statistics: if showStats=true was specified in the request this field will contain
     information about the request payload.
    :vartype statistics: ~azure.ai.language.conversations.models.RequestStatistics
    :ivar model_version: Required. This field indicates which model is used for scoring.
    :vartype model_version: str
    """

    _validation = {
        'errors': {'required': True},
        'model_version': {'required': True},
    }

    _attribute_map = {
        'errors': {'key': 'errors', 'type': '[InputError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        errors: List["_models.InputError"],
        model_version: str,
        statistics: Optional["_models.RequestStatistics"] = None,
        **kwargs
    ):
        """
        :keyword errors: Required. Errors by document id.
        :paramtype errors: list[~azure.ai.language.conversations.models.InputError]
        :keyword statistics: if showStats=true was specified in the request this field will contain
         information about the request payload.
        :paramtype statistics: ~azure.ai.language.conversations.models.RequestStatistics
        :keyword model_version: Required. This field indicates which model is used for scoring.
        :paramtype model_version: str
        """
        super(PreBuiltResult, self).__init__(**kwargs)
        self.errors = errors
        self.statistics = statistics
        self.model_version = model_version


class ConversationPIIResults(PreBuiltResult):
    """The result from PII detection and redaction operation for each conversation.

    All required parameters must be populated in order to send to Azure.

    :ivar errors: Required. Errors by document id.
    :vartype errors: list[~azure.ai.language.conversations.models.InputError]
    :ivar statistics: if showStats=true was specified in the request this field will contain
     information about the request payload.
    :vartype statistics: ~azure.ai.language.conversations.models.RequestStatistics
    :ivar model_version: Required. This field indicates which model is used for scoring.
    :vartype model_version: str
    :ivar conversations: Required.
    :vartype conversations:
     list[~azure.ai.language.conversations.models.ConversationPIIResultsConversationsItem]
    """

    _validation = {
        'errors': {'required': True},
        'model_version': {'required': True},
        'conversations': {'required': True},
    }

    _attribute_map = {
        'errors': {'key': 'errors', 'type': '[InputError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
        'conversations': {'key': 'conversations', 'type': '[ConversationPIIResultsConversationsItem]'},
    }

    def __init__(
        self,
        *,
        errors: List["_models.InputError"],
        model_version: str,
        conversations: List["_models.ConversationPIIResultsConversationsItem"],
        statistics: Optional["_models.RequestStatistics"] = None,
        **kwargs
    ):
        """
        :keyword errors: Required. Errors by document id.
        :paramtype errors: list[~azure.ai.language.conversations.models.InputError]
        :keyword statistics: if showStats=true was specified in the request this field will contain
         information about the request payload.
        :paramtype statistics: ~azure.ai.language.conversations.models.RequestStatistics
        :keyword model_version: Required. This field indicates which model is used for scoring.
        :paramtype model_version: str
        :keyword conversations: Required.
        :paramtype conversations:
         list[~azure.ai.language.conversations.models.ConversationPIIResultsConversationsItem]
        """
        super(ConversationPIIResults, self).__init__(errors=errors, statistics=statistics, model_version=model_version, **kwargs)
        self.conversations = conversations


class ConversationResultBase(msrest.serialization.Model):
    """Shared attributes for all conversational task results.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. Unique, non-empty conversation identifier.
    :vartype id: str
    :ivar warnings: Required. Warnings encountered while processing document.
    :vartype warnings: list[~azure.ai.language.conversations.models.InputWarning]
    :ivar statistics: If showStats=true was specified in the request this field will contain
     information about the conversation payload.
    :vartype statistics: ~azure.ai.language.conversations.models.ConversationStatistics
    """

    _validation = {
        'id': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'warnings': {'key': 'warnings', 'type': '[InputWarning]'},
        'statistics': {'key': 'statistics', 'type': 'ConversationStatistics'},
    }

    def __init__(
        self,
        *,
        id: str,
        warnings: List["_models.InputWarning"],
        statistics: Optional["_models.ConversationStatistics"] = None,
        **kwargs
    ):
        """
        :keyword id: Required. Unique, non-empty conversation identifier.
        :paramtype id: str
        :keyword warnings: Required. Warnings encountered while processing document.
        :paramtype warnings: list[~azure.ai.language.conversations.models.InputWarning]
        :keyword statistics: If showStats=true was specified in the request this field will contain
         information about the conversation payload.
        :paramtype statistics: ~azure.ai.language.conversations.models.ConversationStatistics
        """
        super(ConversationResultBase, self).__init__(**kwargs)
        self.id = id
        self.warnings = warnings
        self.statistics = statistics


class ConversationPIIResultsConversationsItem(ConversationPIIResult, ConversationResultBase):
    """ConversationPIIResultsConversationsItem.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. Unique, non-empty conversation identifier.
    :vartype id: str
    :ivar warnings: Required. Warnings encountered while processing document.
    :vartype warnings: list[~azure.ai.language.conversations.models.InputWarning]
    :ivar statistics: If showStats=true was specified in the request this field will contain
     information about the conversation payload.
    :vartype statistics: ~azure.ai.language.conversations.models.ConversationStatistics
    :ivar conversation_items: Required. Enumeration of PII detection and redaction operation
     results for all the conversation items in a conversation.
    :vartype conversation_items:
     list[~azure.ai.language.conversations.models.ConversationPIIItemResult]
    """

    _validation = {
        'id': {'required': True},
        'warnings': {'required': True},
        'conversation_items': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'warnings': {'key': 'warnings', 'type': '[InputWarning]'},
        'statistics': {'key': 'statistics', 'type': 'ConversationStatistics'},
        'conversation_items': {'key': 'conversationItems', 'type': '[ConversationPIIItemResult]'},
    }

    def __init__(
        self,
        *,
        id: str,
        warnings: List["_models.InputWarning"],
        conversation_items: List["_models.ConversationPIIItemResult"],
        statistics: Optional["_models.ConversationStatistics"] = None,
        **kwargs
    ):
        """
        :keyword id: Required. Unique, non-empty conversation identifier.
        :paramtype id: str
        :keyword warnings: Required. Warnings encountered while processing document.
        :paramtype warnings: list[~azure.ai.language.conversations.models.InputWarning]
        :keyword statistics: If showStats=true was specified in the request this field will contain
         information about the conversation payload.
        :paramtype statistics: ~azure.ai.language.conversations.models.ConversationStatistics
        :keyword conversation_items: Required. Enumeration of PII detection and redaction operation
         results for all the conversation items in a conversation.
        :paramtype conversation_items:
         list[~azure.ai.language.conversations.models.ConversationPIIItemResult]
        """
        super(ConversationPIIResultsConversationsItem, self).__init__(conversation_items=conversation_items, id=id, warnings=warnings, statistics=statistics, **kwargs)
        self.id = id
        self.warnings = warnings
        self.statistics = statistics
        self.conversation_items = conversation_items


class TaskParameters(msrest.serialization.Model):
    """Base parameters object for a text analysis task.

    :ivar logging_opt_out:
    :vartype logging_opt_out: bool
    """

    _attribute_map = {
        'logging_opt_out': {'key': 'loggingOptOut', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        logging_opt_out: Optional[bool] = False,
        **kwargs
    ):
        """
        :keyword logging_opt_out:
        :paramtype logging_opt_out: bool
        """
        super(TaskParameters, self).__init__(**kwargs)
        self.logging_opt_out = logging_opt_out


class PreBuiltTaskParameters(TaskParameters):
    """Parameters object for a text analysis task using pre-built models.

    :ivar logging_opt_out:
    :vartype logging_opt_out: bool
    :ivar model_version:
    :vartype model_version: str
    """

    _attribute_map = {
        'logging_opt_out': {'key': 'loggingOptOut', 'type': 'bool'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        logging_opt_out: Optional[bool] = False,
        model_version: Optional[str] = "latest",
        **kwargs
    ):
        """
        :keyword logging_opt_out:
        :paramtype logging_opt_out: bool
        :keyword model_version:
        :paramtype model_version: str
        """
        super(PreBuiltTaskParameters, self).__init__(logging_opt_out=logging_opt_out, **kwargs)
        self.model_version = model_version


class ConversationPIITaskParameters(PreBuiltTaskParameters):
    """Supported parameters for a Conversational PII detection and redaction task.

    :ivar logging_opt_out:
    :vartype logging_opt_out: bool
    :ivar model_version:
    :vartype model_version: str
    :ivar pii_categories: Describes the PII categories to return for detection. If not provided,
     'default' categories will be returned which will vary with the language.
    :vartype pii_categories: list[str or
     ~azure.ai.language.conversations.models.ConversationPIICategory]
    :ivar include_audio_redaction: Flag to indicate if audio redaction is requested. By default
     audio redaction will not be performed.
    :vartype include_audio_redaction: bool
    :ivar redaction_source: For transcript conversations, this parameter provides information
     regarding which content type (ITN, Text, Lexical, Masked ITN) should be used for entity
     detection. The details of the entities detected - like the offset, length and the text itself -
     will correspond to the text type selected here. Known values are: "lexical", "itn",
     "maskedItn", "text".
    :vartype redaction_source: str or ~azure.ai.language.conversations.models.TranscriptContentType
    """

    _validation = {
        'pii_categories': {'unique': True},
    }

    _attribute_map = {
        'logging_opt_out': {'key': 'loggingOptOut', 'type': 'bool'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
        'pii_categories': {'key': 'piiCategories', 'type': '[str]'},
        'include_audio_redaction': {'key': 'includeAudioRedaction', 'type': 'bool'},
        'redaction_source': {'key': 'redactionSource', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        logging_opt_out: Optional[bool] = False,
        model_version: Optional[str] = "latest",
        pii_categories: Optional[List[Union[str, "_models.ConversationPIICategory"]]] = None,
        include_audio_redaction: Optional[bool] = False,
        redaction_source: Optional[Union[str, "_models.TranscriptContentType"]] = None,
        **kwargs
    ):
        """
        :keyword logging_opt_out:
        :paramtype logging_opt_out: bool
        :keyword model_version:
        :paramtype model_version: str
        :keyword pii_categories: Describes the PII categories to return for detection. If not provided,
         'default' categories will be returned which will vary with the language.
        :paramtype pii_categories: list[str or
         ~azure.ai.language.conversations.models.ConversationPIICategory]
        :keyword include_audio_redaction: Flag to indicate if audio redaction is requested. By default
         audio redaction will not be performed.
        :paramtype include_audio_redaction: bool
        :keyword redaction_source: For transcript conversations, this parameter provides information
         regarding which content type (ITN, Text, Lexical, Masked ITN) should be used for entity
         detection. The details of the entities detected - like the offset, length and the text itself -
         will correspond to the text type selected here. Known values are: "lexical", "itn",
         "maskedItn", "text".
        :paramtype redaction_source: str or
         ~azure.ai.language.conversations.models.TranscriptContentType
        """
        super(ConversationPIITaskParameters, self).__init__(logging_opt_out=logging_opt_out, model_version=model_version, **kwargs)
        self.pii_categories = pii_categories
        self.include_audio_redaction = include_audio_redaction
        self.redaction_source = redaction_source


class ConversationPrediction(BasePrediction):
    """Represents the prediction section of a Conversation project.

    All required parameters must be populated in order to send to Azure.

    :ivar project_kind: Required. The type of the project.Constant filled by server. Known values
     are: "Conversation", "Orchestration".
    :vartype project_kind: str or ~azure.ai.language.conversations.models.ProjectKind
    :ivar top_intent: The intent with the highest score.
    :vartype top_intent: str
    :ivar intents: Required. The intent classification results.
    :vartype intents: list[~azure.ai.language.conversations.models.ConversationIntent]
    :ivar entities: Required. The entity extraction results.
    :vartype entities: list[~azure.ai.language.conversations.models.ConversationEntity]
    """

    _validation = {
        'project_kind': {'required': True},
        'intents': {'required': True},
        'entities': {'required': True},
    }

    _attribute_map = {
        'project_kind': {'key': 'projectKind', 'type': 'str'},
        'top_intent': {'key': 'topIntent', 'type': 'str'},
        'intents': {'key': 'intents', 'type': '[ConversationIntent]'},
        'entities': {'key': 'entities', 'type': '[ConversationEntity]'},
    }

    def __init__(
        self,
        *,
        intents: List["_models.ConversationIntent"],
        entities: List["_models.ConversationEntity"],
        top_intent: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword top_intent: The intent with the highest score.
        :paramtype top_intent: str
        :keyword intents: Required. The intent classification results.
        :paramtype intents: list[~azure.ai.language.conversations.models.ConversationIntent]
        :keyword entities: Required. The entity extraction results.
        :paramtype entities: list[~azure.ai.language.conversations.models.ConversationEntity]
        """
        super(ConversationPrediction, self).__init__(top_intent=top_intent, **kwargs)
        self.project_kind = 'Conversation'  # type: str
        self.intents = intents
        self.entities = entities


class RequestStatistics(msrest.serialization.Model):
    """if showStats=true was specified in the request this field will contain information about the request payload.

    All required parameters must be populated in order to send to Azure.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar transactions_count: Required. Number of transactions for the request.
    :vartype transactions_count: long
    """

    _validation = {
        'transactions_count': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'transactions_count': {'key': 'transactionsCount', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        transactions_count: int,
        additional_properties: Optional[Dict[str, Any]] = None,
        **kwargs
    ):
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword transactions_count: Required. Number of transactions for the request.
        :paramtype transactions_count: long
        """
        super(RequestStatistics, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.transactions_count = transactions_count


class ConversationRequestStatistics(RequestStatistics):
    """if showStats=true was specified in the request this field will contain information about the request payload.

    All required parameters must be populated in order to send to Azure.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar transactions_count: Required. Number of transactions for the request.
    :vartype transactions_count: long
    :ivar conversations_count: Required. Number of conversations submitted in the request.
    :vartype conversations_count: int
    :ivar valid_conversations_count: Required. Number of conversations documents. This excludes
     empty, over-size limit or non-supported languages documents.
    :vartype valid_conversations_count: int
    :ivar erroneous_conversations_count: Required. Number of invalid documents. This includes
     empty, over-size limit or non-supported languages documents.
    :vartype erroneous_conversations_count: int
    """

    _validation = {
        'transactions_count': {'required': True},
        'conversations_count': {'required': True},
        'valid_conversations_count': {'required': True},
        'erroneous_conversations_count': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'transactions_count': {'key': 'transactionsCount', 'type': 'long'},
        'conversations_count': {'key': 'conversationsCount', 'type': 'int'},
        'valid_conversations_count': {'key': 'validConversationsCount', 'type': 'int'},
        'erroneous_conversations_count': {'key': 'erroneousConversationsCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        transactions_count: int,
        conversations_count: int,
        valid_conversations_count: int,
        erroneous_conversations_count: int,
        additional_properties: Optional[Dict[str, Any]] = None,
        **kwargs
    ):
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword transactions_count: Required. Number of transactions for the request.
        :paramtype transactions_count: long
        :keyword conversations_count: Required. Number of conversations submitted in the request.
        :paramtype conversations_count: int
        :keyword valid_conversations_count: Required. Number of conversations documents. This excludes
         empty, over-size limit or non-supported languages documents.
        :paramtype valid_conversations_count: int
        :keyword erroneous_conversations_count: Required. Number of invalid documents. This includes
         empty, over-size limit or non-supported languages documents.
        :paramtype erroneous_conversations_count: int
        """
        super(ConversationRequestStatistics, self).__init__(additional_properties=additional_properties, transactions_count=transactions_count, **kwargs)
        self.conversations_count = conversations_count
        self.valid_conversations_count = valid_conversations_count
        self.erroneous_conversations_count = erroneous_conversations_count


class ConversationResult(msrest.serialization.Model):
    """The response returned by a Conversation project.

    All required parameters must be populated in order to send to Azure.

    :ivar query: Required. The same query given in request.
    :vartype query: str
    :ivar detected_language: The detected language from the query in BCP 47 language
     representation..
    :vartype detected_language: str
    :ivar prediction: The predicted result for the query.
    :vartype prediction: ~azure.ai.language.conversations.models.ConversationPrediction
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'detected_language': {'key': 'detectedLanguage', 'type': 'str'},
        'prediction': {'key': 'prediction', 'type': 'ConversationPrediction'},
    }

    def __init__(
        self,
        *,
        query: str,
        detected_language: Optional[str] = None,
        prediction: Optional["_models.ConversationPrediction"] = None,
        **kwargs
    ):
        """
        :keyword query: Required. The same query given in request.
        :paramtype query: str
        :keyword detected_language: The detected language from the query in BCP 47 language
         representation..
        :paramtype detected_language: str
        :keyword prediction: The predicted result for the query.
        :paramtype prediction: ~azure.ai.language.conversations.models.ConversationPrediction
        """
        super(ConversationResult, self).__init__(**kwargs)
        self.query = query
        self.detected_language = detected_language
        self.prediction = prediction


class ConversationsSummaryResult(msrest.serialization.Model):
    """ConversationsSummaryResult.

    All required parameters must be populated in order to send to Azure.

    :ivar summaries: Required.
    :vartype summaries:
     list[~azure.ai.language.conversations.models.ConversationsSummaryResultSummariesItem]
    """

    _validation = {
        'summaries': {'required': True},
    }

    _attribute_map = {
        'summaries': {'key': 'summaries', 'type': '[ConversationsSummaryResultSummariesItem]'},
    }

    def __init__(
        self,
        *,
        summaries: List["_models.ConversationsSummaryResultSummariesItem"],
        **kwargs
    ):
        """
        :keyword summaries: Required.
        :paramtype summaries:
         list[~azure.ai.language.conversations.models.ConversationsSummaryResultSummariesItem]
        """
        super(ConversationsSummaryResult, self).__init__(**kwargs)
        self.summaries = summaries


class SummaryResultItem(msrest.serialization.Model):
    """SummaryResultItem.

    All required parameters must be populated in order to send to Azure.

    :ivar aspect: Required.
    :vartype aspect: str
    :ivar text: Required.
    :vartype text: str
    """

    _validation = {
        'aspect': {'required': True},
        'text': {'required': True},
    }

    _attribute_map = {
        'aspect': {'key': 'aspect', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        aspect: str,
        text: str,
        **kwargs
    ):
        """
        :keyword aspect: Required.
        :paramtype aspect: str
        :keyword text: Required.
        :paramtype text: str
        """
        super(SummaryResultItem, self).__init__(**kwargs)
        self.aspect = aspect
        self.text = text


class ConversationsSummaryResultSummariesItem(SummaryResultItem):
    """ConversationsSummaryResultSummariesItem.

    All required parameters must be populated in order to send to Azure.

    :ivar aspect: Required.
    :vartype aspect: str
    :ivar text: Required.
    :vartype text: str
    """

    _validation = {
        'aspect': {'required': True},
        'text': {'required': True},
    }

    _attribute_map = {
        'aspect': {'key': 'aspect', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        aspect: str,
        text: str,
        **kwargs
    ):
        """
        :keyword aspect: Required.
        :paramtype aspect: str
        :keyword text: Required.
        :paramtype text: str
        """
        super(ConversationsSummaryResultSummariesItem, self).__init__(aspect=aspect, text=text, **kwargs)


class ConversationStatistics(msrest.serialization.Model):
    """If showStats=true was specified in the request this field will contain information about the conversation payload.

    All required parameters must be populated in order to send to Azure.

    :ivar transactions_count: Required. Number of text units for the request.
    :vartype transactions_count: int
    """

    _validation = {
        'transactions_count': {'required': True},
    }

    _attribute_map = {
        'transactions_count': {'key': 'transactionsCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        transactions_count: int,
        **kwargs
    ):
        """
        :keyword transactions_count: Required. Number of text units for the request.
        :paramtype transactions_count: int
        """
        super(ConversationStatistics, self).__init__(**kwargs)
        self.transactions_count = transactions_count


class ConversationSummarizationTaskParameters(PreBuiltTaskParameters):
    """Supported parameters for an conversational summarization task.

    All required parameters must be populated in order to send to Azure.

    :ivar logging_opt_out:
    :vartype logging_opt_out: bool
    :ivar model_version:
    :vartype model_version: str
    :ivar summary_aspects: Required. Known values are: "Issue", "Resolution", "Issue, Resolution".
    :vartype summary_aspects: str or ~azure.ai.language.conversations.models.SummaryAspectEnum
    """

    _validation = {
        'summary_aspects': {'required': True},
    }

    _attribute_map = {
        'logging_opt_out': {'key': 'loggingOptOut', 'type': 'bool'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
        'summary_aspects': {'key': 'summaryAspects', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        summary_aspects: Union[str, "_models.SummaryAspectEnum"],
        logging_opt_out: Optional[bool] = False,
        model_version: Optional[str] = "latest",
        **kwargs
    ):
        """
        :keyword logging_opt_out:
        :paramtype logging_opt_out: bool
        :keyword model_version:
        :paramtype model_version: str
        :keyword summary_aspects: Required. Known values are: "Issue", "Resolution", "Issue,
         Resolution".
        :paramtype summary_aspects: str or ~azure.ai.language.conversations.models.SummaryAspectEnum
        """
        super(ConversationSummarizationTaskParameters, self).__init__(logging_opt_out=logging_opt_out, model_version=model_version, **kwargs)
        self.summary_aspects = summary_aspects


class TargetIntentResult(msrest.serialization.Model):
    """This is the base class of an intent prediction.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ConversationTargetIntentResult, LuisTargetIntentResult, NoneLinkedTargetIntentResult, QuestionAnsweringTargetIntentResult.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. This discriminator property specifies the type of the
     target project that returns the response.Constant filled by server. Known values are: "Luis",
     "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence: float
    """

    _validation = {
        'target_project_kind': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
    }

    _subtype_map = {
        'target_project_kind': {'Conversation': 'ConversationTargetIntentResult', 'Luis': 'LuisTargetIntentResult', 'NonLinked': 'NoneLinkedTargetIntentResult', 'QuestionAnswering': 'QuestionAnsweringTargetIntentResult'}
    }

    def __init__(
        self,
        *,
        confidence: float,
        api_version: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence: float
        """
        super(TargetIntentResult, self).__init__(**kwargs)
        self.target_project_kind = None  # type: Optional[str]
        self.api_version = api_version
        self.confidence = confidence


class ConversationTargetIntentResult(TargetIntentResult):
    """A wrap up of Conversation project response.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. This discriminator property specifies the type of the
     target project that returns the response.Constant filled by server. Known values are: "Luis",
     "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence: float
    :ivar result: The actual response from a Conversation project.
    :vartype result: ~azure.ai.language.conversations.models.ConversationResult
    """

    _validation = {
        'target_project_kind': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
        'result': {'key': 'result', 'type': 'ConversationResult'},
    }

    def __init__(
        self,
        *,
        confidence: float,
        api_version: Optional[str] = None,
        result: Optional["_models.ConversationResult"] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence: float
        :keyword result: The actual response from a Conversation project.
        :paramtype result: ~azure.ai.language.conversations.models.ConversationResult
        """
        super(ConversationTargetIntentResult, self).__init__(api_version=api_version, confidence=confidence, **kwargs)
        self.target_project_kind = 'Conversation'  # type: str
        self.result = result


class ConversationTaskParameters(msrest.serialization.Model):
    """Input parameters necessary for a Conversation task.

    All required parameters must be populated in order to send to Azure.

    :ivar project_name: Required. The name of the project to use.
    :vartype project_name: str
    :ivar deployment_name: Required. The name of the deployment to use.
    :vartype deployment_name: str
    :ivar verbose: If true, the service will return more detailed information in the response.
    :vartype verbose: bool
    :ivar is_logging_enabled: If true, the service will keep the query for further review.
    :vartype is_logging_enabled: bool
    :ivar string_index_type: Specifies the method used to interpret string offsets.  Defaults to
     Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see
     https://aka.ms/text-analytics-offsets. Known values are: "TextElements_v8", "UnicodeCodePoint",
     "Utf16CodeUnit". Default value: "TextElements_v8".
    :vartype string_index_type: str or ~azure.ai.language.conversations.models.StringIndexType
    :ivar direct_target: The name of a target project to forward the request to.
    :vartype direct_target: str
    :ivar target_project_parameters: A dictionary representing the parameters for each target
     project.
    :vartype target_project_parameters: dict[str,
     ~azure.ai.language.conversations.models.AnalysisParameters]
    """

    _validation = {
        'project_name': {'required': True},
        'deployment_name': {'required': True},
    }

    _attribute_map = {
        'project_name': {'key': 'projectName', 'type': 'str'},
        'deployment_name': {'key': 'deploymentName', 'type': 'str'},
        'verbose': {'key': 'verbose', 'type': 'bool'},
        'is_logging_enabled': {'key': 'isLoggingEnabled', 'type': 'bool'},
        'string_index_type': {'key': 'stringIndexType', 'type': 'str'},
        'direct_target': {'key': 'directTarget', 'type': 'str'},
        'target_project_parameters': {'key': 'targetProjectParameters', 'type': '{AnalysisParameters}'},
    }

    def __init__(
        self,
        *,
        project_name: str,
        deployment_name: str,
        verbose: Optional[bool] = None,
        is_logging_enabled: Optional[bool] = None,
        string_index_type: Optional[Union[str, "_models.StringIndexType"]] = "TextElements_v8",
        direct_target: Optional[str] = None,
        target_project_parameters: Optional[Dict[str, "_models.AnalysisParameters"]] = None,
        **kwargs
    ):
        """
        :keyword project_name: Required. The name of the project to use.
        :paramtype project_name: str
        :keyword deployment_name: Required. The name of the deployment to use.
        :paramtype deployment_name: str
        :keyword verbose: If true, the service will return more detailed information in the response.
        :paramtype verbose: bool
        :keyword is_logging_enabled: If true, the service will keep the query for further review.
        :paramtype is_logging_enabled: bool
        :keyword string_index_type: Specifies the method used to interpret string offsets.  Defaults to
         Text Elements (Graphemes) according to Unicode v8.0.0. For additional information see
         https://aka.ms/text-analytics-offsets. Known values are: "TextElements_v8", "UnicodeCodePoint",
         "Utf16CodeUnit". Default value: "TextElements_v8".
        :paramtype string_index_type: str or ~azure.ai.language.conversations.models.StringIndexType
        :keyword direct_target: The name of a target project to forward the request to.
        :paramtype direct_target: str
        :keyword target_project_parameters: A dictionary representing the parameters for each target
         project.
        :paramtype target_project_parameters: dict[str,
         ~azure.ai.language.conversations.models.AnalysisParameters]
        """
        super(ConversationTaskParameters, self).__init__(**kwargs)
        self.project_name = project_name
        self.deployment_name = deployment_name
        self.verbose = verbose
        self.is_logging_enabled = is_logging_enabled
        self.string_index_type = string_index_type
        self.direct_target = direct_target
        self.target_project_parameters = target_project_parameters


class ConversationTasksStateTasks(msrest.serialization.Model):
    """ConversationTasksStateTasks.

    All required parameters must be populated in order to send to Azure.

    :ivar completed: Required. Count of tasks completed successfully.
    :vartype completed: int
    :ivar failed: Required. Count of tasks that failed.
    :vartype failed: int
    :ivar in_progress: Required. Count of tasks in progress currently.
    :vartype in_progress: int
    :ivar total: Required. Total count of tasks submitted as part of the job.
    :vartype total: int
    :ivar items: List of results from tasks (if available).
    :vartype items: list[~azure.ai.language.conversations.models.AnalyzeConversationJobResult]
    """

    _validation = {
        'completed': {'required': True},
        'failed': {'required': True},
        'in_progress': {'required': True},
        'total': {'required': True},
    }

    _attribute_map = {
        'completed': {'key': 'completed', 'type': 'int'},
        'failed': {'key': 'failed', 'type': 'int'},
        'in_progress': {'key': 'inProgress', 'type': 'int'},
        'total': {'key': 'total', 'type': 'int'},
        'items': {'key': 'items', 'type': '[AnalyzeConversationJobResult]'},
    }

    def __init__(
        self,
        *,
        completed: int,
        failed: int,
        in_progress: int,
        total: int,
        items: Optional[List["_models.AnalyzeConversationJobResult"]] = None,
        **kwargs
    ):
        """
        :keyword completed: Required. Count of tasks completed successfully.
        :paramtype completed: int
        :keyword failed: Required. Count of tasks that failed.
        :paramtype failed: int
        :keyword in_progress: Required. Count of tasks in progress currently.
        :paramtype in_progress: int
        :keyword total: Required. Total count of tasks submitted as part of the job.
        :paramtype total: int
        :keyword items: List of results from tasks (if available).
        :paramtype items: list[~azure.ai.language.conversations.models.AnalyzeConversationJobResult]
        """
        super(ConversationTasksStateTasks, self).__init__(**kwargs)
        self.completed = completed
        self.failed = failed
        self.in_progress = in_progress
        self.total = total
        self.items = items


class CurrencyResolution(BaseResolution, QuantityResolution):
    """Represents the currency entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar iso4217: The alphabetic code based on another ISO standard, ISO 3166, which lists the
     codes for country names. The first two letters of the ISO 4217 three-letter code are the same
     as the code for the country name, and, where possible, the third letter corresponds to the
     first letter of the currency name.
    :vartype iso4217: str
    :ivar unit: Required. The unit of the amount captured in the extracted entity.
    :vartype unit: str
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'iso4217': {'key': 'ISO4217', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: str,
        iso4217: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword iso4217: The alphabetic code based on another ISO standard, ISO 3166, which lists the
         codes for country names. The first two letters of the ISO 4217 three-letter code are the same
         as the code for the country name, and, where possible, the third letter corresponds to the
         first letter of the currency name.
        :paramtype iso4217: str
        :keyword unit: Required. The unit of the amount captured in the extracted entity.
        :paramtype unit: str
        """
        super(CurrencyResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Currency'  # type: str
        self.iso4217 = iso4217
        self.unit = unit


class DateTimeResolution(BaseResolution):
    """A resolution for datetime entity instances.

    All required parameters must be populated in order to send to Azure.

    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar timex: Required. An extended ISO 8601 date/time representation as described in
     (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml).
    :vartype timex: str
    :ivar date_time_sub_kind: Required. The DateTime SubKind. Known values are: "Time", "Date",
     "DateTime", "Duration", "Set".
    :vartype date_time_sub_kind: str or ~azure.ai.language.conversations.models.DateTimeSubKind
    :ivar value: Required. The actual time that the extracted text denote.
    :vartype value: str
    :ivar modifier: An optional modifier of a date/time instance. Known values are: "AfterApprox",
     "Before", "BeforeStart", "Approx", "ReferenceUndefined", "SinceEnd", "AfterMid", "Start",
     "After", "BeforeEnd", "Until", "End", "Less", "Since", "AfterStart", "BeforeApprox", "Mid",
     "More".
    :vartype modifier: str or ~azure.ai.language.conversations.models.TemporalModifier
    """

    _validation = {
        'resolution_kind': {'required': True},
        'timex': {'required': True},
        'date_time_sub_kind': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'timex': {'key': 'timex', 'type': 'str'},
        'date_time_sub_kind': {'key': 'dateTimeSubKind', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'modifier': {'key': 'modifier', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        timex: str,
        date_time_sub_kind: Union[str, "_models.DateTimeSubKind"],
        value: str,
        modifier: Optional[Union[str, "_models.TemporalModifier"]] = None,
        **kwargs
    ):
        """
        :keyword timex: Required. An extended ISO 8601 date/time representation as described in
         (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml).
        :paramtype timex: str
        :keyword date_time_sub_kind: Required. The DateTime SubKind. Known values are: "Time", "Date",
         "DateTime", "Duration", "Set".
        :paramtype date_time_sub_kind: str or ~azure.ai.language.conversations.models.DateTimeSubKind
        :keyword value: Required. The actual time that the extracted text denote.
        :paramtype value: str
        :keyword modifier: An optional modifier of a date/time instance. Known values are:
         "AfterApprox", "Before", "BeforeStart", "Approx", "ReferenceUndefined", "SinceEnd", "AfterMid",
         "Start", "After", "BeforeEnd", "Until", "End", "Less", "Since", "AfterStart", "BeforeApprox",
         "Mid", "More".
        :paramtype modifier: str or ~azure.ai.language.conversations.models.TemporalModifier
        """
        super(DateTimeResolution, self).__init__(**kwargs)
        self.resolution_kind = 'DateTime'  # type: str
        self.timex = timex
        self.date_time_sub_kind = date_time_sub_kind
        self.value = value
        self.modifier = modifier


class Entity(msrest.serialization.Model):
    """Entity.

    All required parameters must be populated in order to send to Azure.

    :ivar text: Required. Entity text as appears in the request.
    :vartype text: str
    :ivar category: Required. Entity type.
    :vartype category: str
    :ivar subcategory: (Optional) Entity sub type.
    :vartype subcategory: str
    :ivar offset: Required. Start position for the entity text. Use of different 'stringIndexType'
     values can affect the offset returned.
    :vartype offset: int
    :ivar length: Required. Length for the entity text. Use of different 'stringIndexType' values
     can affect the length returned.
    :vartype length: int
    :ivar confidence_score: Required. Confidence score between 0 and 1 of the extracted entity.
    :vartype confidence_score: float
    """

    _validation = {
        'text': {'required': True},
        'category': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
        'confidence_score': {'required': True},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'subcategory': {'key': 'subcategory', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        text: str,
        category: str,
        offset: int,
        length: int,
        confidence_score: float,
        subcategory: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword text: Required. Entity text as appears in the request.
        :paramtype text: str
        :keyword category: Required. Entity type.
        :paramtype category: str
        :keyword subcategory: (Optional) Entity sub type.
        :paramtype subcategory: str
        :keyword offset: Required. Start position for the entity text. Use of different
         'stringIndexType' values can affect the offset returned.
        :paramtype offset: int
        :keyword length: Required. Length for the entity text. Use of different 'stringIndexType'
         values can affect the length returned.
        :paramtype length: int
        :keyword confidence_score: Required. Confidence score between 0 and 1 of the extracted entity.
        :paramtype confidence_score: float
        """
        super(Entity, self).__init__(**kwargs)
        self.text = text
        self.category = category
        self.subcategory = subcategory
        self.offset = offset
        self.length = length
        self.confidence_score = confidence_score


class EntitySubtype(BaseExtraInformation):
    """The concrete entity Subtype model of extra information.

    All required parameters must be populated in order to send to Azure.

    :ivar extra_information_kind: Required. The extra information object kind.Constant filled by
     server. Known values are: "EntitySubtype", "ListKey".
    :vartype extra_information_kind: str or
     ~azure.ai.language.conversations.models.ExtraInformationKind
    :ivar value: The Subtype of an extracted entity type.
    :vartype value: str
    """

    _validation = {
        'extra_information_kind': {'required': True},
    }

    _attribute_map = {
        'extra_information_kind': {'key': 'extraInformationKind', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: The Subtype of an extracted entity type.
        :paramtype value: str
        """
        super(EntitySubtype, self).__init__(**kwargs)
        self.extra_information_kind = 'EntitySubtype'  # type: str
        self.value = value


class Error(msrest.serialization.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar code: Required. One of a server-defined set of error codes. Known values are:
     "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
     "ProjectNotFound", "OperationNotFound", "AzureCognitiveSearchNotFound",
     "AzureCognitiveSearchIndexNotFound", "TooManyRequests", "AzureCognitiveSearchThrottling",
     "AzureCognitiveSearchIndexLimitReached", "InternalServerError", "ServiceUnavailable",
     "Timeout", "QuotaExceeded", "Conflict", "Warning".
    :vartype code: str or ~azure.ai.language.conversations.models.ErrorCode
    :ivar message: Required. A human-readable representation of the error.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.ai.language.conversations.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.conversations.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerErrorModel'},
    }

    def __init__(
        self,
        *,
        code: Union[str, "_models.ErrorCode"],
        message: str,
        additional_properties: Optional[Dict[str, Any]] = None,
        target: Optional[str] = None,
        details: Optional[List["_models.Error"]] = None,
        innererror: Optional["_models.InnerErrorModel"] = None,
        **kwargs
    ):
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword code: Required. One of a server-defined set of error codes. Known values are:
         "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
         "ProjectNotFound", "OperationNotFound", "AzureCognitiveSearchNotFound",
         "AzureCognitiveSearchIndexNotFound", "TooManyRequests", "AzureCognitiveSearchThrottling",
         "AzureCognitiveSearchIndexLimitReached", "InternalServerError", "ServiceUnavailable",
         "Timeout", "QuotaExceeded", "Conflict", "Warning".
        :paramtype code: str or ~azure.ai.language.conversations.models.ErrorCode
        :keyword message: Required. A human-readable representation of the error.
        :paramtype message: str
        :keyword target: The target of the error.
        :paramtype target: str
        :keyword details: An array of details about specific errors that led to this reported error.
        :paramtype details: list[~azure.ai.language.conversations.models.Error]
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.ai.language.conversations.models.InnerErrorModel
        """
        super(Error, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required. The error object.
    :vartype error: ~azure.ai.language.conversations.models.Error
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        error: "_models.Error",
        **kwargs
    ):
        """
        :keyword error: Required. The error object.
        :paramtype error: ~azure.ai.language.conversations.models.Error
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class InformationResolution(BaseResolution, QuantityResolution):
    """Represents the information (data) entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar unit: Required. The information (data) Unit of measurement. Known values are:
     "Unspecified", "Bit", "Kilobit", "Megabit", "Gigabit", "Terabit", "Petabit", "Byte",
     "Kilobyte", "Megabyte", "Gigabyte", "Terabyte", "Petabyte".
    :vartype unit: str or ~azure.ai.language.conversations.models.InformationUnit
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: Union[str, "_models.InformationUnit"],
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword unit: Required. The information (data) Unit of measurement. Known values are:
         "Unspecified", "Bit", "Kilobit", "Megabit", "Gigabit", "Terabit", "Petabit", "Byte",
         "Kilobyte", "Megabyte", "Gigabyte", "Terabyte", "Petabyte".
        :paramtype unit: str or ~azure.ai.language.conversations.models.InformationUnit
        """
        super(InformationResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Information'  # type: str
        self.unit = unit


class InnerErrorModel(msrest.serialization.Model):
    """An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. One of a server-defined set of error codes. Known values are:
     "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
     "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure",
     "InvalidRequestBodyFormat", "EmptyRequest", "MissingInputDocuments", "InvalidDocument",
     "ModelVersionIncorrect", "InvalidDocumentBatch", "UnsupportedLanguageCode",
     "InvalidCountryHint".
    :vartype code: str or ~azure.ai.language.conversations.models.InnerErrorCode
    :ivar message: Required. Error message.
    :vartype message: str
    :ivar details: Error details.
    :vartype details: dict[str, str]
    :ivar target: Error target.
    :vartype target: str
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.conversations.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '{str}'},
        'target': {'key': 'target', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerErrorModel'},
    }

    def __init__(
        self,
        *,
        code: Union[str, "_models.InnerErrorCode"],
        message: str,
        details: Optional[Dict[str, str]] = None,
        target: Optional[str] = None,
        innererror: Optional["_models.InnerErrorModel"] = None,
        **kwargs
    ):
        """
        :keyword code: Required. One of a server-defined set of error codes. Known values are:
         "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
         "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure",
         "InvalidRequestBodyFormat", "EmptyRequest", "MissingInputDocuments", "InvalidDocument",
         "ModelVersionIncorrect", "InvalidDocumentBatch", "UnsupportedLanguageCode",
         "InvalidCountryHint".
        :paramtype code: str or ~azure.ai.language.conversations.models.InnerErrorCode
        :keyword message: Required. Error message.
        :paramtype message: str
        :keyword details: Error details.
        :paramtype details: dict[str, str]
        :keyword target: Error target.
        :paramtype target: str
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.ai.language.conversations.models.InnerErrorModel
        """
        super(InnerErrorModel, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details
        self.target = target
        self.innererror = innererror


class InputError(msrest.serialization.Model):
    """Contains details of errors encountered during a job execution.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. The ID of the input.
    :vartype id: str
    :ivar error: Required. Error encountered.
    :vartype error: ~azure.ai.language.conversations.models.Error
    """

    _validation = {
        'id': {'required': True},
        'error': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        id: str,
        error: "_models.Error",
        **kwargs
    ):
        """
        :keyword id: Required. The ID of the input.
        :paramtype id: str
        :keyword error: Required. Error encountered.
        :paramtype error: ~azure.ai.language.conversations.models.Error
        """
        super(InputError, self).__init__(**kwargs)
        self.id = id
        self.error = error


class InputWarning(msrest.serialization.Model):
    """Contains details of warnings encountered during a job execution.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. Warning code.
    :vartype code: str
    :ivar message: Required. Warning message.
    :vartype message: str
    :ivar target_ref: A JSON pointer reference indicating the target object.
    :vartype target_ref: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target_ref': {'key': 'targetRef', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target_ref: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword code: Required. Warning code.
        :paramtype code: str
        :keyword message: Required. Warning message.
        :paramtype message: str
        :keyword target_ref: A JSON pointer reference indicating the target object.
        :paramtype target_ref: str
        """
        super(InputWarning, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target_ref = target_ref


class KnowledgeBaseAnswer(msrest.serialization.Model):
    """Represents knowledge base answer.

    :ivar questions: List of questions associated with the answer.
    :vartype questions: list[str]
    :ivar answer: Answer text.
    :vartype answer: str
    :ivar confidence: Answer confidence score, value ranges from 0 to 1.
    :vartype confidence: float
    :ivar qna_id: ID of the QnA result.
    :vartype qna_id: int
    :ivar source: Source of QnA result.
    :vartype source: str
    :ivar metadata: Metadata associated with the answer, useful to categorize or filter question
     answers.
    :vartype metadata: dict[str, str]
    :ivar dialog: Dialog associated with Answer.
    :vartype dialog: ~azure.ai.language.conversations.models.KnowledgeBaseAnswerDialog
    :ivar short_answer: Answer span object of QnA with respect to user's question.
    :vartype short_answer: ~azure.ai.language.conversations.models.AnswerSpan
    """

    _validation = {
        'confidence': {'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'questions': {'key': 'questions', 'type': '[str]'},
        'answer': {'key': 'answer', 'type': 'str'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
        'qna_id': {'key': 'id', 'type': 'int'},
        'source': {'key': 'source', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': '{str}'},
        'dialog': {'key': 'dialog', 'type': 'KnowledgeBaseAnswerDialog'},
        'short_answer': {'key': 'answerSpan', 'type': 'AnswerSpan'},
    }

    def __init__(
        self,
        *,
        questions: Optional[List[str]] = None,
        answer: Optional[str] = None,
        confidence: Optional[float] = None,
        qna_id: Optional[int] = None,
        source: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None,
        dialog: Optional["_models.KnowledgeBaseAnswerDialog"] = None,
        short_answer: Optional["_models.AnswerSpan"] = None,
        **kwargs
    ):
        """
        :keyword questions: List of questions associated with the answer.
        :paramtype questions: list[str]
        :keyword answer: Answer text.
        :paramtype answer: str
        :keyword confidence: Answer confidence score, value ranges from 0 to 1.
        :paramtype confidence: float
        :keyword qna_id: ID of the QnA result.
        :paramtype qna_id: int
        :keyword source: Source of QnA result.
        :paramtype source: str
        :keyword metadata: Metadata associated with the answer, useful to categorize or filter question
         answers.
        :paramtype metadata: dict[str, str]
        :keyword dialog: Dialog associated with Answer.
        :paramtype dialog: ~azure.ai.language.conversations.models.KnowledgeBaseAnswerDialog
        :keyword short_answer: Answer span object of QnA with respect to user's question.
        :paramtype short_answer: ~azure.ai.language.conversations.models.AnswerSpan
        """
        super(KnowledgeBaseAnswer, self).__init__(**kwargs)
        self.questions = questions
        self.answer = answer
        self.confidence = confidence
        self.qna_id = qna_id
        self.source = source
        self.metadata = metadata
        self.dialog = dialog
        self.short_answer = short_answer


class KnowledgeBaseAnswerContext(msrest.serialization.Model):
    """Context object with previous QnA's information.

    All required parameters must be populated in order to send to Azure.

    :ivar previous_qna_id: Required. Previous turn top answer result QnA ID.
    :vartype previous_qna_id: int
    :ivar previous_question: Previous user query.
    :vartype previous_question: str
    """

    _validation = {
        'previous_qna_id': {'required': True},
    }

    _attribute_map = {
        'previous_qna_id': {'key': 'previousQnaId', 'type': 'int'},
        'previous_question': {'key': 'previousUserQuery', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        previous_qna_id: int,
        previous_question: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword previous_qna_id: Required. Previous turn top answer result QnA ID.
        :paramtype previous_qna_id: int
        :keyword previous_question: Previous user query.
        :paramtype previous_question: str
        """
        super(KnowledgeBaseAnswerContext, self).__init__(**kwargs)
        self.previous_qna_id = previous_qna_id
        self.previous_question = previous_question


class KnowledgeBaseAnswerDialog(msrest.serialization.Model):
    """Dialog associated with Answer.

    :ivar is_context_only: To mark if a prompt is relevant only with a previous question or not. If
     true, do not include this QnA as search result for queries without context; otherwise, if
     false, ignores context and includes this QnA in search result.
    :vartype is_context_only: bool
    :ivar prompts: List of prompts associated with the answer.
    :vartype prompts: list[~azure.ai.language.conversations.models.KnowledgeBaseAnswerPrompt]
    """

    _validation = {
        'prompts': {'max_items': 20, 'min_items': 0},
    }

    _attribute_map = {
        'is_context_only': {'key': 'isContextOnly', 'type': 'bool'},
        'prompts': {'key': 'prompts', 'type': '[KnowledgeBaseAnswerPrompt]'},
    }

    def __init__(
        self,
        *,
        is_context_only: Optional[bool] = None,
        prompts: Optional[List["_models.KnowledgeBaseAnswerPrompt"]] = None,
        **kwargs
    ):
        """
        :keyword is_context_only: To mark if a prompt is relevant only with a previous question or not.
         If true, do not include this QnA as search result for queries without context; otherwise, if
         false, ignores context and includes this QnA in search result.
        :paramtype is_context_only: bool
        :keyword prompts: List of prompts associated with the answer.
        :paramtype prompts: list[~azure.ai.language.conversations.models.KnowledgeBaseAnswerPrompt]
        """
        super(KnowledgeBaseAnswerDialog, self).__init__(**kwargs)
        self.is_context_only = is_context_only
        self.prompts = prompts


class KnowledgeBaseAnswerPrompt(msrest.serialization.Model):
    """Prompt for an answer.

    :ivar display_order: Index of the prompt - used in ordering of the prompts.
    :vartype display_order: int
    :ivar qna_id: QnA ID corresponding to the prompt.
    :vartype qna_id: int
    :ivar display_text: Text displayed to represent a follow up question prompt.
    :vartype display_text: str
    """

    _validation = {
        'display_text': {'max_length': 200, 'min_length': 0},
    }

    _attribute_map = {
        'display_order': {'key': 'displayOrder', 'type': 'int'},
        'qna_id': {'key': 'qnaId', 'type': 'int'},
        'display_text': {'key': 'displayText', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_order: Optional[int] = None,
        qna_id: Optional[int] = None,
        display_text: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_order: Index of the prompt - used in ordering of the prompts.
        :paramtype display_order: int
        :keyword qna_id: QnA ID corresponding to the prompt.
        :paramtype qna_id: int
        :keyword display_text: Text displayed to represent a follow up question prompt.
        :paramtype display_text: str
        """
        super(KnowledgeBaseAnswerPrompt, self).__init__(**kwargs)
        self.display_order = display_order
        self.qna_id = qna_id
        self.display_text = display_text


class LengthResolution(BaseResolution, QuantityResolution):
    """Represents the length entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar unit: Required. The length Unit of measurement. Known values are: "Unspecified",
     "Kilometer", "Hectometer", "Decameter", "Meter", "Decimeter", "Centimeter", "Millimeter",
     "Micrometer", "Nanometer", "Picometer", "Mile", "Yard", "Inch", "Foot", "LightYear", "Pt".
    :vartype unit: str or ~azure.ai.language.conversations.models.LengthUnit
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: Union[str, "_models.LengthUnit"],
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword unit: Required. The length Unit of measurement. Known values are: "Unspecified",
         "Kilometer", "Hectometer", "Decameter", "Meter", "Decimeter", "Centimeter", "Millimeter",
         "Micrometer", "Nanometer", "Picometer", "Mile", "Yard", "Inch", "Foot", "LightYear", "Pt".
        :paramtype unit: str or ~azure.ai.language.conversations.models.LengthUnit
        """
        super(LengthResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Length'  # type: str
        self.unit = unit


class ListKey(BaseExtraInformation):
    """The list key extra data kind.

    All required parameters must be populated in order to send to Azure.

    :ivar extra_information_kind: Required. The extra information object kind.Constant filled by
     server. Known values are: "EntitySubtype", "ListKey".
    :vartype extra_information_kind: str or
     ~azure.ai.language.conversations.models.ExtraInformationKind
    :ivar key: The canonical form of the extracted entity.
    :vartype key: str
    """

    _validation = {
        'extra_information_kind': {'required': True},
    }

    _attribute_map = {
        'extra_information_kind': {'key': 'extraInformationKind', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword key: The canonical form of the extracted entity.
        :paramtype key: str
        """
        super(ListKey, self).__init__(**kwargs)
        self.extra_information_kind = 'ListKey'  # type: str
        self.key = key


class LuisCallingOptions(msrest.serialization.Model):
    """This customizes how the service calls LUIS Generally Available projects.

    :ivar verbose: Enable verbose response.
    :vartype verbose: bool
    :ivar log: Save log to add in training utterances later.
    :vartype log: bool
    :ivar show_all_intents: Set true to show all intents.
    :vartype show_all_intents: bool
    :ivar timezone_offset: The timezone offset for the location of the request.
    :vartype timezone_offset: float
    :ivar spell_check: Enable spell checking.
    :vartype spell_check: bool
    :ivar bing_spell_check_subscription_key: The subscription key to use when enabling Bing spell
     check.
    :vartype bing_spell_check_subscription_key: str
    """

    _attribute_map = {
        'verbose': {'key': 'verbose', 'type': 'bool'},
        'log': {'key': 'log', 'type': 'bool'},
        'show_all_intents': {'key': 'show-all-intents', 'type': 'bool'},
        'timezone_offset': {'key': 'timezoneOffset', 'type': 'float'},
        'spell_check': {'key': 'spellCheck', 'type': 'bool'},
        'bing_spell_check_subscription_key': {'key': 'bing-spell-check-subscription-key', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        verbose: Optional[bool] = None,
        log: Optional[bool] = None,
        show_all_intents: Optional[bool] = None,
        timezone_offset: Optional[float] = None,
        spell_check: Optional[bool] = None,
        bing_spell_check_subscription_key: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword verbose: Enable verbose response.
        :paramtype verbose: bool
        :keyword log: Save log to add in training utterances later.
        :paramtype log: bool
        :keyword show_all_intents: Set true to show all intents.
        :paramtype show_all_intents: bool
        :keyword timezone_offset: The timezone offset for the location of the request.
        :paramtype timezone_offset: float
        :keyword spell_check: Enable spell checking.
        :paramtype spell_check: bool
        :keyword bing_spell_check_subscription_key: The subscription key to use when enabling Bing
         spell check.
        :paramtype bing_spell_check_subscription_key: str
        """
        super(LuisCallingOptions, self).__init__(**kwargs)
        self.verbose = verbose
        self.log = log
        self.show_all_intents = show_all_intents
        self.timezone_offset = timezone_offset
        self.spell_check = spell_check
        self.bing_spell_check_subscription_key = bing_spell_check_subscription_key


class LuisParameters(AnalysisParameters):
    """This is a set of request parameters for LUIS Generally Available projects.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. The type of a target service.Constant filled by server.
     Known values are: "Luis", "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version to use when call a specific target service.
    :vartype api_version: str
    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar query: The utterance to predict.
    :vartype query: str
    :ivar calling_options: This customizes how the service calls LUIS Generally Available projects.
    :vartype calling_options: ~azure.ai.language.conversations.models.LuisCallingOptions
    """

    _validation = {
        'target_project_kind': {'required': True},
        'query': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'query': {'key': 'query', 'type': 'str'},
        'calling_options': {'key': 'callingOptions', 'type': 'LuisCallingOptions'},
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        additional_properties: Optional[Dict[str, Any]] = None,
        query: Optional[str] = None,
        calling_options: Optional["_models.LuisCallingOptions"] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version to use when call a specific target service.
        :paramtype api_version: str
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword query: The utterance to predict.
        :paramtype query: str
        :keyword calling_options: This customizes how the service calls LUIS Generally Available
         projects.
        :paramtype calling_options: ~azure.ai.language.conversations.models.LuisCallingOptions
        """
        super(LuisParameters, self).__init__(api_version=api_version, **kwargs)
        self.target_project_kind = 'Luis'  # type: str
        self.additional_properties = additional_properties
        self.query = query
        self.calling_options = calling_options


class LuisTargetIntentResult(TargetIntentResult):
    """It is a wrap up of LUIS Generally Available response.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. This discriminator property specifies the type of the
     target project that returns the response.Constant filled by server. Known values are: "Luis",
     "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence: float
    :ivar result: The actual response from a LUIS Generally Available application.
    :vartype result: any
    """

    _validation = {
        'target_project_kind': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
        'result': {'key': 'result', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        confidence: float,
        api_version: Optional[str] = None,
        result: Optional[Any] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence: float
        :keyword result: The actual response from a LUIS Generally Available application.
        :paramtype result: any
        """
        super(LuisTargetIntentResult, self).__init__(api_version=api_version, confidence=confidence, **kwargs)
        self.target_project_kind = 'Luis'  # type: str
        self.result = result


class MetadataFilter(msrest.serialization.Model):
    """Find QnAs that are associated with the given list of metadata.

    :ivar metadata:
    :vartype metadata: list[~azure.ai.language.conversations.models.MetadataRecord]
    :ivar logical_operation: Operation used to join metadata filters. Known values are: "AND",
     "OR".
    :vartype logical_operation: str or ~azure.ai.language.conversations.models.LogicalOperationKind
    """

    _attribute_map = {
        'metadata': {'key': 'metadata', 'type': '[MetadataRecord]'},
        'logical_operation': {'key': 'logicalOperation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        metadata: Optional[List["_models.MetadataRecord"]] = None,
        logical_operation: Optional[Union[str, "_models.LogicalOperationKind"]] = None,
        **kwargs
    ):
        """
        :keyword metadata:
        :paramtype metadata: list[~azure.ai.language.conversations.models.MetadataRecord]
        :keyword logical_operation: Operation used to join metadata filters. Known values are: "AND",
         "OR".
        :paramtype logical_operation: str or
         ~azure.ai.language.conversations.models.LogicalOperationKind
        """
        super(MetadataFilter, self).__init__(**kwargs)
        self.metadata = metadata
        self.logical_operation = logical_operation


class MetadataRecord(msrest.serialization.Model):
    """Object to provide the key value pair for each metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar key: Required. Metadata Key from Metadata dictionary used in the QnA.
    :vartype key: str
    :ivar value: Required. Metadata Value from Metadata dictionary used in the QnA.
    :vartype value: str
    """

    _validation = {
        'key': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        key: str,
        value: str,
        **kwargs
    ):
        """
        :keyword key: Required. Metadata Key from Metadata dictionary used in the QnA.
        :paramtype key: str
        :keyword value: Required. Metadata Value from Metadata dictionary used in the QnA.
        :paramtype value: str
        """
        super(MetadataRecord, self).__init__(**kwargs)
        self.key = key
        self.value = value


class MultiLanguageConversationAnalysisInput(msrest.serialization.Model):
    """MultiLanguageConversationAnalysisInput.

    All required parameters must be populated in order to send to Azure.

    :ivar conversations: Required.
    :vartype conversations: list[~azure.ai.language.conversations.models.Conversation]
    """

    _validation = {
        'conversations': {'required': True},
    }

    _attribute_map = {
        'conversations': {'key': 'conversations', 'type': '[Conversation]'},
    }

    def __init__(
        self,
        *,
        conversations: List["_models.Conversation"],
        **kwargs
    ):
        """
        :keyword conversations: Required.
        :paramtype conversations: list[~azure.ai.language.conversations.models.Conversation]
        """
        super(MultiLanguageConversationAnalysisInput, self).__init__(**kwargs)
        self.conversations = conversations


class NoneLinkedTargetIntentResult(TargetIntentResult):
    """A wrap up of non-linked intent response.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. This discriminator property specifies the type of the
     target project that returns the response.Constant filled by server. Known values are: "Luis",
     "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence: float
    :ivar result: The actual response from a Conversation project.
    :vartype result: ~azure.ai.language.conversations.models.ConversationResult
    """

    _validation = {
        'target_project_kind': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
        'result': {'key': 'result', 'type': 'ConversationResult'},
    }

    def __init__(
        self,
        *,
        confidence: float,
        api_version: Optional[str] = None,
        result: Optional["_models.ConversationResult"] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence: float
        :keyword result: The actual response from a Conversation project.
        :paramtype result: ~azure.ai.language.conversations.models.ConversationResult
        """
        super(NoneLinkedTargetIntentResult, self).__init__(api_version=api_version, confidence=confidence, **kwargs)
        self.target_project_kind = 'NonLinked'  # type: str
        self.result = result


class NumberResolution(BaseResolution):
    """A resolution for numeric entity instances.

    All required parameters must be populated in order to send to Azure.

    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar number_kind: Required. The type of the extracted number entity. Known values are:
     "Integer", "Decimal", "Power", "Fraction", "Percent", "Unspecified".
    :vartype number_kind: str or ~azure.ai.language.conversations.models.NumberKind
    :ivar value: Required. A numeric representation of what the extracted text denotes.
    :vartype value: str
    """

    _validation = {
        'resolution_kind': {'required': True},
        'number_kind': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'number_kind': {'key': 'numberKind', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        number_kind: Union[str, "_models.NumberKind"],
        value: str,
        **kwargs
    ):
        """
        :keyword number_kind: Required. The type of the extracted number entity. Known values are:
         "Integer", "Decimal", "Power", "Fraction", "Percent", "Unspecified".
        :paramtype number_kind: str or ~azure.ai.language.conversations.models.NumberKind
        :keyword value: Required. A numeric representation of what the extracted text denotes.
        :paramtype value: str
        """
        super(NumberResolution, self).__init__(**kwargs)
        self.resolution_kind = 'Number'  # type: str
        self.number_kind = number_kind
        self.value = value


class NumericRangeResolution(BaseResolution):
    """represents the resolution of numeric intervals.

    All required parameters must be populated in order to send to Azure.

    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar range_kind: Required. The kind of range that the resolution object represents. Known
     values are: "Number", "Speed", "Weight", "Length", "Volume", "Area", "Age", "Information",
     "Temperature", "Currency".
    :vartype range_kind: str or ~azure.ai.language.conversations.models.RangeKind
    :ivar minimum: Required. The beginning value of  the interval.
    :vartype minimum: float
    :ivar maximum: Required. The ending value of the interval.
    :vartype maximum: float
    """

    _validation = {
        'resolution_kind': {'required': True},
        'range_kind': {'required': True},
        'minimum': {'required': True},
        'maximum': {'required': True},
    }

    _attribute_map = {
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'range_kind': {'key': 'rangeKind', 'type': 'str'},
        'minimum': {'key': 'minimum', 'type': 'float'},
        'maximum': {'key': 'maximum', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        range_kind: Union[str, "_models.RangeKind"],
        minimum: float,
        maximum: float,
        **kwargs
    ):
        """
        :keyword range_kind: Required. The kind of range that the resolution object represents. Known
         values are: "Number", "Speed", "Weight", "Length", "Volume", "Area", "Age", "Information",
         "Temperature", "Currency".
        :paramtype range_kind: str or ~azure.ai.language.conversations.models.RangeKind
        :keyword minimum: Required. The beginning value of  the interval.
        :paramtype minimum: float
        :keyword maximum: Required. The ending value of the interval.
        :paramtype maximum: float
        """
        super(NumericRangeResolution, self).__init__(**kwargs)
        self.resolution_kind = 'NumericRange'  # type: str
        self.range_kind = range_kind
        self.minimum = minimum
        self.maximum = maximum


class OrchestrationPrediction(BasePrediction):
    """This represents the prediction result of an Orchestration project.

    All required parameters must be populated in order to send to Azure.

    :ivar project_kind: Required. The type of the project.Constant filled by server. Known values
     are: "Conversation", "Orchestration".
    :vartype project_kind: str or ~azure.ai.language.conversations.models.ProjectKind
    :ivar top_intent: The intent with the highest score.
    :vartype top_intent: str
    :ivar intents: Required. A dictionary that contains all intents. A key is an intent name and a
     value is its confidence score and target type. The top intent's value also contains the actual
     response from the target project.
    :vartype intents: dict[str, ~azure.ai.language.conversations.models.TargetIntentResult]
    """

    _validation = {
        'project_kind': {'required': True},
        'intents': {'required': True},
    }

    _attribute_map = {
        'project_kind': {'key': 'projectKind', 'type': 'str'},
        'top_intent': {'key': 'topIntent', 'type': 'str'},
        'intents': {'key': 'intents', 'type': '{TargetIntentResult}'},
    }

    def __init__(
        self,
        *,
        intents: Dict[str, "_models.TargetIntentResult"],
        top_intent: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword top_intent: The intent with the highest score.
        :paramtype top_intent: str
        :keyword intents: Required. A dictionary that contains all intents. A key is an intent name and
         a value is its confidence score and target type. The top intent's value also contains the
         actual response from the target project.
        :paramtype intents: dict[str, ~azure.ai.language.conversations.models.TargetIntentResult]
        """
        super(OrchestrationPrediction, self).__init__(top_intent=top_intent, **kwargs)
        self.project_kind = 'Orchestration'  # type: str
        self.intents = intents


class OrdinalResolution(BaseResolution):
    """A resolution for ordinal numbers entity instances.

    All required parameters must be populated in order to send to Azure.

    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar offset: Required. The offset With respect to the reference (e.g., offset = -1 in "show me
     the second to last".
    :vartype offset: str
    :ivar relative_to: Required. The reference point that the ordinal number denotes. Known values
     are: "Current", "End", "Start".
    :vartype relative_to: str or ~azure.ai.language.conversations.models.RelativeTo
    :ivar value: Required. A simple arithmetic expression that the ordinal denotes.
    :vartype value: str
    """

    _validation = {
        'resolution_kind': {'required': True},
        'offset': {'required': True},
        'relative_to': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'str'},
        'relative_to': {'key': 'relativeTo', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        offset: str,
        relative_to: Union[str, "_models.RelativeTo"],
        value: str,
        **kwargs
    ):
        """
        :keyword offset: Required. The offset With respect to the reference (e.g., offset = -1 in "show
         me the second to last".
        :paramtype offset: str
        :keyword relative_to: Required. The reference point that the ordinal number denotes. Known
         values are: "Current", "End", "Start".
        :paramtype relative_to: str or ~azure.ai.language.conversations.models.RelativeTo
        :keyword value: Required. A simple arithmetic expression that the ordinal denotes.
        :paramtype value: str
        """
        super(OrdinalResolution, self).__init__(**kwargs)
        self.resolution_kind = 'Ordinal'  # type: str
        self.offset = offset
        self.relative_to = relative_to
        self.value = value


class QueryFilters(msrest.serialization.Model):
    """filters over knowledge base.

    :ivar metadata_filter: Find QnAs that are associated with the given list of metadata.
    :vartype metadata_filter: ~azure.ai.language.conversations.models.MetadataFilter
    :ivar source_filter: Find QnAs that are associated with any of the given list of sources in
     knowledge base.
    :vartype source_filter: list[str]
    :ivar logical_operation: Logical operation used to join metadata filter with source filter.
     Known values are: "AND", "OR".
    :vartype logical_operation: str or ~azure.ai.language.conversations.models.LogicalOperationKind
    """

    _attribute_map = {
        'metadata_filter': {'key': 'metadataFilter', 'type': 'MetadataFilter'},
        'source_filter': {'key': 'sourceFilter', 'type': '[str]'},
        'logical_operation': {'key': 'logicalOperation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        metadata_filter: Optional["_models.MetadataFilter"] = None,
        source_filter: Optional[List[str]] = None,
        logical_operation: Optional[Union[str, "_models.LogicalOperationKind"]] = None,
        **kwargs
    ):
        """
        :keyword metadata_filter: Find QnAs that are associated with the given list of metadata.
        :paramtype metadata_filter: ~azure.ai.language.conversations.models.MetadataFilter
        :keyword source_filter: Find QnAs that are associated with any of the given list of sources in
         knowledge base.
        :paramtype source_filter: list[str]
        :keyword logical_operation: Logical operation used to join metadata filter with source filter.
         Known values are: "AND", "OR".
        :paramtype logical_operation: str or
         ~azure.ai.language.conversations.models.LogicalOperationKind
        """
        super(QueryFilters, self).__init__(**kwargs)
        self.metadata_filter = metadata_filter
        self.source_filter = source_filter
        self.logical_operation = logical_operation


class QuestionAnsweringParameters(AnalysisParameters):
    """This is a set of request parameters for Question Answering knowledge bases.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. The type of a target service.Constant filled by server.
     Known values are: "Luis", "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version to use when call a specific target service.
    :vartype api_version: str
    :ivar calling_options: The options sent to a Question Answering KB.
    :vartype calling_options: ~azure.ai.language.conversations.models.AnswersOptions
    """

    _validation = {
        'target_project_kind': {'required': True},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'calling_options': {'key': 'callingOptions', 'type': 'AnswersOptions'},
    }

    def __init__(
        self,
        *,
        api_version: Optional[str] = None,
        calling_options: Optional["_models.AnswersOptions"] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version to use when call a specific target service.
        :paramtype api_version: str
        :keyword calling_options: The options sent to a Question Answering KB.
        :paramtype calling_options: ~azure.ai.language.conversations.models.AnswersOptions
        """
        super(QuestionAnsweringParameters, self).__init__(api_version=api_version, **kwargs)
        self.target_project_kind = 'QuestionAnswering'  # type: str
        self.calling_options = calling_options


class QuestionAnsweringTargetIntentResult(TargetIntentResult):
    """It is a wrap up a Question Answering KB response.

    All required parameters must be populated in order to send to Azure.

    :ivar target_project_kind: Required. This discriminator property specifies the type of the
     target project that returns the response.Constant filled by server. Known values are: "Luis",
     "Conversation", "QuestionAnswering", "NonLinked".
    :vartype target_project_kind: str or ~azure.ai.language.conversations.models.TargetProjectKind
    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence: float
    :ivar result: The generated answer by a Question Answering KB.
    :vartype result: ~azure.ai.language.conversations.models.AnswersResult
    """

    _validation = {
        'target_project_kind': {'required': True},
        'confidence': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'target_project_kind': {'key': 'targetProjectKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence': {'key': 'confidenceScore', 'type': 'float'},
        'result': {'key': 'result', 'type': 'AnswersResult'},
    }

    def __init__(
        self,
        *,
        confidence: float,
        api_version: Optional[str] = None,
        result: Optional["_models.AnswersResult"] = None,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence: Required. The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence: float
        :keyword result: The generated answer by a Question Answering KB.
        :paramtype result: ~azure.ai.language.conversations.models.AnswersResult
        """
        super(QuestionAnsweringTargetIntentResult, self).__init__(api_version=api_version, confidence=confidence, **kwargs)
        self.target_project_kind = 'QuestionAnswering'  # type: str
        self.result = result


class RedactedTranscriptContent(msrest.serialization.Model):
    """The transcript content response generated by the service with all necessary personally identifiable information redacted.

    :ivar itn: The redacted output for inverse text normalized format input.
    :vartype itn: str
    :ivar masked_itn: The redacted output for masked inverse text normalized format input.
    :vartype masked_itn: str
    :ivar text: The redacted output for text (Microsoft's Speech to Text 'display') format input.
    :vartype text: str
    :ivar lexical: The redacted output for lexical format input.
    :vartype lexical: str
    :ivar audio_timings: The list of redacted audio segments.
    :vartype audio_timings: list[~azure.ai.language.conversations.models.AudioTiming]
    """

    _attribute_map = {
        'itn': {'key': 'itn', 'type': 'str'},
        'masked_itn': {'key': 'maskedItn', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
        'lexical': {'key': 'lexical', 'type': 'str'},
        'audio_timings': {'key': 'audioTimings', 'type': '[AudioTiming]'},
    }

    def __init__(
        self,
        *,
        itn: Optional[str] = None,
        masked_itn: Optional[str] = None,
        text: Optional[str] = None,
        lexical: Optional[str] = None,
        audio_timings: Optional[List["_models.AudioTiming"]] = None,
        **kwargs
    ):
        """
        :keyword itn: The redacted output for inverse text normalized format input.
        :paramtype itn: str
        :keyword masked_itn: The redacted output for masked inverse text normalized format input.
        :paramtype masked_itn: str
        :keyword text: The redacted output for text (Microsoft's Speech to Text 'display') format
         input.
        :paramtype text: str
        :keyword lexical: The redacted output for lexical format input.
        :paramtype lexical: str
        :keyword audio_timings: The list of redacted audio segments.
        :paramtype audio_timings: list[~azure.ai.language.conversations.models.AudioTiming]
        """
        super(RedactedTranscriptContent, self).__init__(**kwargs)
        self.itn = itn
        self.masked_itn = masked_itn
        self.text = text
        self.lexical = lexical
        self.audio_timings = audio_timings


class ShortAnswerOptions(msrest.serialization.Model):
    """To configure Answer span prediction feature.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar enable: Enable or disable Answer Span prediction. Has constant value: True.
    :vartype enable: bool
    :ivar confidence_threshold: Minimum threshold score required to include an answer span, value
     ranges from 0 to 1.
    :vartype confidence_threshold: float
    :ivar top: Number of Top answers to be considered for span prediction from 1 to 10.
    :vartype top: int
    """

    _validation = {
        'enable': {'required': True, 'constant': True},
        'confidence_threshold': {'maximum': 1, 'minimum': 0},
        'top': {'maximum': 10, 'minimum': 1},
    }

    _attribute_map = {
        'enable': {'key': 'enable', 'type': 'bool'},
        'confidence_threshold': {'key': 'confidenceScoreThreshold', 'type': 'float'},
        'top': {'key': 'topAnswersWithSpan', 'type': 'int'},
    }

    enable = True

    def __init__(
        self,
        *,
        confidence_threshold: Optional[float] = None,
        top: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword confidence_threshold: Minimum threshold score required to include an answer span,
         value ranges from 0 to 1.
        :paramtype confidence_threshold: float
        :keyword top: Number of Top answers to be considered for span prediction from 1 to 10.
        :paramtype top: int
        """
        super(ShortAnswerOptions, self).__init__(**kwargs)
        self.confidence_threshold = confidence_threshold
        self.top = top


class SpeedResolution(BaseResolution, QuantityResolution):
    """Represents the speed entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar unit: Required. The speed Unit of measurement. Known values are: "Unspecified",
     "MetersPerSecond", "KilometersPerHour", "KilometersPerMinute", "KilometersPerSecond",
     "MilesPerHour", "Knot", "FootPerSecond", "FootPerMinute", "YardsPerMinute", "YardsPerSecond",
     "MetersPerMillisecond", "CentimetersPerMillisecond", "KilometersPerMillisecond".
    :vartype unit: str or ~azure.ai.language.conversations.models.SpeedUnit
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: Union[str, "_models.SpeedUnit"],
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword unit: Required. The speed Unit of measurement. Known values are: "Unspecified",
         "MetersPerSecond", "KilometersPerHour", "KilometersPerMinute", "KilometersPerSecond",
         "MilesPerHour", "Knot", "FootPerSecond", "FootPerMinute", "YardsPerMinute", "YardsPerSecond",
         "MetersPerMillisecond", "CentimetersPerMillisecond", "KilometersPerMillisecond".
        :paramtype unit: str or ~azure.ai.language.conversations.models.SpeedUnit
        """
        super(SpeedResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Speed'  # type: str
        self.unit = unit


class SummaryResult(PreBuiltResult):
    """SummaryResult.

    All required parameters must be populated in order to send to Azure.

    :ivar errors: Required. Errors by document id.
    :vartype errors: list[~azure.ai.language.conversations.models.InputError]
    :ivar statistics: if showStats=true was specified in the request this field will contain
     information about the request payload.
    :vartype statistics: ~azure.ai.language.conversations.models.RequestStatistics
    :ivar model_version: Required. This field indicates which model is used for scoring.
    :vartype model_version: str
    :ivar conversations: Required.
    :vartype conversations:
     list[~azure.ai.language.conversations.models.SummaryResultConversationsItem]
    """

    _validation = {
        'errors': {'required': True},
        'model_version': {'required': True},
        'conversations': {'required': True},
    }

    _attribute_map = {
        'errors': {'key': 'errors', 'type': '[InputError]'},
        'statistics': {'key': 'statistics', 'type': 'RequestStatistics'},
        'model_version': {'key': 'modelVersion', 'type': 'str'},
        'conversations': {'key': 'conversations', 'type': '[SummaryResultConversationsItem]'},
    }

    def __init__(
        self,
        *,
        errors: List["_models.InputError"],
        model_version: str,
        conversations: List["_models.SummaryResultConversationsItem"],
        statistics: Optional["_models.RequestStatistics"] = None,
        **kwargs
    ):
        """
        :keyword errors: Required. Errors by document id.
        :paramtype errors: list[~azure.ai.language.conversations.models.InputError]
        :keyword statistics: if showStats=true was specified in the request this field will contain
         information about the request payload.
        :paramtype statistics: ~azure.ai.language.conversations.models.RequestStatistics
        :keyword model_version: Required. This field indicates which model is used for scoring.
        :paramtype model_version: str
        :keyword conversations: Required.
        :paramtype conversations:
         list[~azure.ai.language.conversations.models.SummaryResultConversationsItem]
        """
        super(SummaryResult, self).__init__(errors=errors, statistics=statistics, model_version=model_version, **kwargs)
        self.conversations = conversations


class SummaryResultConversationsItem(ConversationResultBase, ConversationsSummaryResult):
    """SummaryResultConversationsItem.

    All required parameters must be populated in order to send to Azure.

    :ivar summaries: Required.
    :vartype summaries:
     list[~azure.ai.language.conversations.models.ConversationsSummaryResultSummariesItem]
    :ivar id: Required. Unique, non-empty conversation identifier.
    :vartype id: str
    :ivar warnings: Required. Warnings encountered while processing document.
    :vartype warnings: list[~azure.ai.language.conversations.models.InputWarning]
    :ivar statistics: If showStats=true was specified in the request this field will contain
     information about the conversation payload.
    :vartype statistics: ~azure.ai.language.conversations.models.ConversationStatistics
    """

    _validation = {
        'summaries': {'required': True},
        'id': {'required': True},
        'warnings': {'required': True},
    }

    _attribute_map = {
        'summaries': {'key': 'summaries', 'type': '[ConversationsSummaryResultSummariesItem]'},
        'id': {'key': 'id', 'type': 'str'},
        'warnings': {'key': 'warnings', 'type': '[InputWarning]'},
        'statistics': {'key': 'statistics', 'type': 'ConversationStatistics'},
    }

    def __init__(
        self,
        *,
        summaries: List["_models.ConversationsSummaryResultSummariesItem"],
        id: str,
        warnings: List["_models.InputWarning"],
        statistics: Optional["_models.ConversationStatistics"] = None,
        **kwargs
    ):
        """
        :keyword summaries: Required.
        :paramtype summaries:
         list[~azure.ai.language.conversations.models.ConversationsSummaryResultSummariesItem]
        :keyword id: Required. Unique, non-empty conversation identifier.
        :paramtype id: str
        :keyword warnings: Required. Warnings encountered while processing document.
        :paramtype warnings: list[~azure.ai.language.conversations.models.InputWarning]
        :keyword statistics: If showStats=true was specified in the request this field will contain
         information about the conversation payload.
        :paramtype statistics: ~azure.ai.language.conversations.models.ConversationStatistics
        """
        super(SummaryResultConversationsItem, self).__init__(id=id, warnings=warnings, statistics=statistics, summaries=summaries, **kwargs)
        self.summaries = summaries
        self.id = id
        self.warnings = warnings
        self.statistics = statistics


class TemperatureResolution(BaseResolution, QuantityResolution):
    """Represents the temperature entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar unit: Required. The temperature Unit of measurement. Known values are: "Unspecified",
     "Fahrenheit", "Kelvin", "Rankine", "Celsius".
    :vartype unit: str or ~azure.ai.language.conversations.models.TemperatureUnit
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: Union[str, "_models.TemperatureUnit"],
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword unit: Required. The temperature Unit of measurement. Known values are: "Unspecified",
         "Fahrenheit", "Kelvin", "Rankine", "Celsius".
        :paramtype unit: str or ~azure.ai.language.conversations.models.TemperatureUnit
        """
        super(TemperatureResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Temperature'  # type: str
        self.unit = unit


class TemporalSpanResolution(BaseResolution):
    """represents the resolution of a date and/or time span.

    All required parameters must be populated in order to send to Azure.

    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar begin: An extended ISO 8601 date/time representation as described in
     (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml).
    :vartype begin: str
    :ivar end: An extended ISO 8601 date/time representation as described in
     (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml).
    :vartype end: str
    :ivar duration: An optional duration value formatted based on the ISO 8601
     (https://en.wikipedia.org/wiki/ISO_8601#Durations).
    :vartype duration: str
    :ivar modifier: An optional modifier of a date/time instance. Known values are: "AfterApprox",
     "Before", "BeforeStart", "Approx", "ReferenceUndefined", "SinceEnd", "AfterMid", "Start",
     "After", "BeforeEnd", "Until", "End", "Less", "Since", "AfterStart", "BeforeApprox", "Mid",
     "More".
    :vartype modifier: str or ~azure.ai.language.conversations.models.TemporalModifier
    """

    _validation = {
        'resolution_kind': {'required': True},
    }

    _attribute_map = {
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'begin': {'key': 'begin', 'type': 'str'},
        'end': {'key': 'end', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'str'},
        'modifier': {'key': 'modifier', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        begin: Optional[str] = None,
        end: Optional[str] = None,
        duration: Optional[str] = None,
        modifier: Optional[Union[str, "_models.TemporalModifier"]] = None,
        **kwargs
    ):
        """
        :keyword begin: An extended ISO 8601 date/time representation as described in
         (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml).
        :paramtype begin: str
        :keyword end: An extended ISO 8601 date/time representation as described in
         (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml).
        :paramtype end: str
        :keyword duration: An optional duration value formatted based on the ISO 8601
         (https://en.wikipedia.org/wiki/ISO_8601#Durations).
        :paramtype duration: str
        :keyword modifier: An optional modifier of a date/time instance. Known values are:
         "AfterApprox", "Before", "BeforeStart", "Approx", "ReferenceUndefined", "SinceEnd", "AfterMid",
         "Start", "After", "BeforeEnd", "Until", "End", "Less", "Since", "AfterStart", "BeforeApprox",
         "Mid", "More".
        :paramtype modifier: str or ~azure.ai.language.conversations.models.TemporalModifier
        """
        super(TemporalSpanResolution, self).__init__(**kwargs)
        self.resolution_kind = 'TemporalSpan'  # type: str
        self.begin = begin
        self.end = end
        self.duration = duration
        self.modifier = modifier


class TextConversation(Conversation):
    """TextConversation.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. Unique identifier for the conversation.
    :vartype id: str
    :ivar language: Required. The language of the conversation item in BCP-47 format.
    :vartype language: str
    :ivar modality: Required. Enumeration of supported conversational modalities.Constant filled by
     server. Known values are: "transcript", "text".
    :vartype modality: str or ~azure.ai.language.conversations.models.InputModality
    :ivar domain: Enumeration of supported conversational domains. Known values are: "finance",
     "healthcare", "generic".
    :vartype domain: str or ~azure.ai.language.conversations.models.ConversationDomain
    :ivar conversation_items: Required. Ordered list of text conversation items in the
     conversation.
    :vartype conversation_items: list[~azure.ai.language.conversations.models.TextConversationItem]
    """

    _validation = {
        'id': {'required': True},
        'language': {'required': True},
        'modality': {'required': True},
        'conversation_items': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'modality': {'key': 'modality', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'conversation_items': {'key': 'conversationItems', 'type': '[TextConversationItem]'},
    }

    def __init__(
        self,
        *,
        id: str,
        language: str,
        conversation_items: List["_models.TextConversationItem"],
        domain: Optional[Union[str, "_models.ConversationDomain"]] = None,
        **kwargs
    ):
        """
        :keyword id: Required. Unique identifier for the conversation.
        :paramtype id: str
        :keyword language: Required. The language of the conversation item in BCP-47 format.
        :paramtype language: str
        :keyword domain: Enumeration of supported conversational domains. Known values are: "finance",
         "healthcare", "generic".
        :paramtype domain: str or ~azure.ai.language.conversations.models.ConversationDomain
        :keyword conversation_items: Required. Ordered list of text conversation items in the
         conversation.
        :paramtype conversation_items:
         list[~azure.ai.language.conversations.models.TextConversationItem]
        """
        super(TextConversation, self).__init__(id=id, language=language, domain=domain, **kwargs)
        self.modality = 'text'  # type: str
        self.conversation_items = conversation_items


class TextConversationItem(ConversationItemBase):
    """The text modality of an input conversation.

    All required parameters must be populated in order to send to Azure.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar id: Required. The ID of a conversation item.
    :vartype id: str
    :ivar participant_id: Required. The participant ID of a conversation item.
    :vartype participant_id: str
    :ivar language: The override language of a conversation item in BCP 47 language representation.
    :vartype language: str
    :ivar modality: Required. Enumeration of supported conversational modalities.Constant filled by
     server. Known values are: "transcript", "text".
    :vartype modality: str or ~azure.ai.language.conversations.models.InputModality
    :ivar role: The role of the participant. Known values are: "agent", "customer", "generic".
    :vartype role: str or ~azure.ai.language.conversations.models.Role
    :ivar text: Required. The text input.
    :vartype text: str
    """

    _validation = {
        'id': {'required': True},
        'participant_id': {'required': True},
        'modality': {'required': True},
        'text': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'participant_id': {'key': 'participantId', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'modality': {'key': 'modality', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: str = "1",
        participant_id: str = "1",
        text: str,
        additional_properties: Optional[Dict[str, Any]] = None,
        language: Optional[str] = None,
        role: Optional[Union[str, "_models.Role"]] = None,
        **kwargs
    ):
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword id: Required. The ID of a conversation item.
        :paramtype id: str
        :keyword participant_id: Required. The participant ID of a conversation item.
        :paramtype participant_id: str
        :keyword language: The override language of a conversation item in BCP 47 language
         representation.
        :paramtype language: str
        :keyword role: The role of the participant. Known values are: "agent", "customer", "generic".
        :paramtype role: str or ~azure.ai.language.conversations.models.Role
        :keyword text: Required. The text input.
        :paramtype text: str
        """
        super(TextConversationItem, self).__init__(additional_properties=additional_properties, id=id, participant_id=participant_id, language=language, role=role, **kwargs)
        self.modality = 'text'  # type: str
        self.text = text


class TranscriptConversation(Conversation):
    """TranscriptConversation.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. Unique identifier for the conversation.
    :vartype id: str
    :ivar language: Required. The language of the conversation item in BCP-47 format.
    :vartype language: str
    :ivar modality: Required. Enumeration of supported conversational modalities.Constant filled by
     server. Known values are: "transcript", "text".
    :vartype modality: str or ~azure.ai.language.conversations.models.InputModality
    :ivar domain: Enumeration of supported conversational domains. Known values are: "finance",
     "healthcare", "generic".
    :vartype domain: str or ~azure.ai.language.conversations.models.ConversationDomain
    :ivar conversation_items: Required. Ordered list of transcript conversation items in the
     conversation.
    :vartype conversation_items:
     list[~azure.ai.language.conversations.models.TranscriptConversationItem]
    """

    _validation = {
        'id': {'required': True},
        'language': {'required': True},
        'modality': {'required': True},
        'conversation_items': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'modality': {'key': 'modality', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'conversation_items': {'key': 'conversationItems', 'type': '[TranscriptConversationItem]'},
    }

    def __init__(
        self,
        *,
        id: str,
        language: str,
        conversation_items: List["_models.TranscriptConversationItem"],
        domain: Optional[Union[str, "_models.ConversationDomain"]] = None,
        **kwargs
    ):
        """
        :keyword id: Required. Unique identifier for the conversation.
        :paramtype id: str
        :keyword language: Required. The language of the conversation item in BCP-47 format.
        :paramtype language: str
        :keyword domain: Enumeration of supported conversational domains. Known values are: "finance",
         "healthcare", "generic".
        :paramtype domain: str or ~azure.ai.language.conversations.models.ConversationDomain
        :keyword conversation_items: Required. Ordered list of transcript conversation items in the
         conversation.
        :paramtype conversation_items:
         list[~azure.ai.language.conversations.models.TranscriptConversationItem]
        """
        super(TranscriptConversation, self).__init__(id=id, language=language, domain=domain, **kwargs)
        self.modality = 'transcript'  # type: str
        self.conversation_items = conversation_items


class TranscriptConversationItem(ConversationItemBase):
    """Additional properties for supporting transcript conversation.

    All required parameters must be populated in order to send to Azure.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar id: Required. The ID of a conversation item.
    :vartype id: str
    :ivar participant_id: Required. The participant ID of a conversation item.
    :vartype participant_id: str
    :ivar language: The override language of a conversation item in BCP 47 language representation.
    :vartype language: str
    :ivar modality: Required. Enumeration of supported conversational modalities.Constant filled by
     server. Known values are: "transcript", "text".
    :vartype modality: str or ~azure.ai.language.conversations.models.InputModality
    :ivar role: The role of the participant. Known values are: "agent", "customer", "generic".
    :vartype role: str or ~azure.ai.language.conversations.models.Role
    :ivar content: Additional properties for supporting transcript conversation.
    :vartype content: ~azure.ai.language.conversations.models.TranscriptConversationItemContent
    """

    _validation = {
        'id': {'required': True},
        'participant_id': {'required': True},
        'modality': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'participant_id': {'key': 'participantId', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'modality': {'key': 'modality', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
        'content': {'key': 'content', 'type': 'TranscriptConversationItemContent'},
    }

    def __init__(
        self,
        *,
        id: str = "1",
        participant_id: str = "1",
        additional_properties: Optional[Dict[str, Any]] = None,
        language: Optional[str] = None,
        role: Optional[Union[str, "_models.Role"]] = None,
        content: Optional["_models.TranscriptConversationItemContent"] = None,
        **kwargs
    ):
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword id: Required. The ID of a conversation item.
        :paramtype id: str
        :keyword participant_id: Required. The participant ID of a conversation item.
        :paramtype participant_id: str
        :keyword language: The override language of a conversation item in BCP 47 language
         representation.
        :paramtype language: str
        :keyword role: The role of the participant. Known values are: "agent", "customer", "generic".
        :paramtype role: str or ~azure.ai.language.conversations.models.Role
        :keyword content: Additional properties for supporting transcript conversation.
        :paramtype content: ~azure.ai.language.conversations.models.TranscriptConversationItemContent
        """
        super(TranscriptConversationItem, self).__init__(additional_properties=additional_properties, id=id, participant_id=participant_id, language=language, role=role, **kwargs)
        self.modality = 'transcript'  # type: str
        self.content = content


class TranscriptConversationItemContent(msrest.serialization.Model):
    """Additional properties for supporting transcript conversation.

    All required parameters must be populated in order to send to Azure.

    :ivar text: Required. The display form of the recognized text from speech to text API, with
     punctuation and capitalization added.
    :vartype text: str
    :ivar lexical: Required. The lexical form of the recognized text from speech to text API with
     the actual words recognized.
    :vartype lexical: str
    :ivar itn: Required. Inverse Text Normalization representation of input. The
     inverse-text-normalized form is the recognized text from Microsoft’s Speech to Text API, with
     phone numbers, numbers, abbreviations, and other transformations applied.
    :vartype itn: str
    :ivar masked_itn: Required. The Inverse Text Normalized format with profanity masking applied.
    :vartype masked_itn: str
    :ivar audio_timings: The list of word level audio timing information.
    :vartype audio_timings: list[~azure.ai.language.conversations.models.WordLevelTiming]
    """

    _validation = {
        'text': {'required': True},
        'lexical': {'required': True},
        'itn': {'required': True},
        'masked_itn': {'required': True},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'lexical': {'key': 'lexical', 'type': 'str'},
        'itn': {'key': 'itn', 'type': 'str'},
        'masked_itn': {'key': 'maskedItn', 'type': 'str'},
        'audio_timings': {'key': 'audioTimings', 'type': '[WordLevelTiming]'},
    }

    def __init__(
        self,
        *,
        text: str,
        lexical: str,
        itn: str,
        masked_itn: str,
        audio_timings: Optional[List["_models.WordLevelTiming"]] = None,
        **kwargs
    ):
        """
        :keyword text: Required. The display form of the recognized text from speech to text API, with
         punctuation and capitalization added.
        :paramtype text: str
        :keyword lexical: Required. The lexical form of the recognized text from speech to text API
         with the actual words recognized.
        :paramtype lexical: str
        :keyword itn: Required. Inverse Text Normalization representation of input. The
         inverse-text-normalized form is the recognized text from Microsoft’s Speech to Text API, with
         phone numbers, numbers, abbreviations, and other transformations applied.
        :paramtype itn: str
        :keyword masked_itn: Required. The Inverse Text Normalized format with profanity masking
         applied.
        :paramtype masked_itn: str
        :keyword audio_timings: The list of word level audio timing information.
        :paramtype audio_timings: list[~azure.ai.language.conversations.models.WordLevelTiming]
        """
        super(TranscriptConversationItemContent, self).__init__(**kwargs)
        self.text = text
        self.lexical = lexical
        self.itn = itn
        self.masked_itn = masked_itn
        self.audio_timings = audio_timings


class VolumeResolution(BaseResolution, QuantityResolution):
    """Represents the volume entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar unit: Required. The Volume Unit of measurement. Known values are: "Unspecified",
     "CubicMeter", "CubicCentimeter", "CubicMillimeter", "Hectoliter", "Decaliter", "Liter",
     "Centiliter", "Milliliter", "CubicYard", "CubicInch", "CubicFoot", "CubicMile", "FluidOunce",
     "Teaspoon", "Tablespoon", "Pint", "Quart", "Cup", "Gill", "Pinch", "FluidDram", "Barrel",
     "Minim", "Cord", "Peck", "Bushel", "Hogshead".
    :vartype unit: str or ~azure.ai.language.conversations.models.VolumeUnit
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: Union[str, "_models.VolumeUnit"],
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword unit: Required. The Volume Unit of measurement. Known values are: "Unspecified",
         "CubicMeter", "CubicCentimeter", "CubicMillimeter", "Hectoliter", "Decaliter", "Liter",
         "Centiliter", "Milliliter", "CubicYard", "CubicInch", "CubicFoot", "CubicMile", "FluidOunce",
         "Teaspoon", "Tablespoon", "Pint", "Quart", "Cup", "Gill", "Pinch", "FluidDram", "Barrel",
         "Minim", "Cord", "Peck", "Bushel", "Hogshead".
        :paramtype unit: str or ~azure.ai.language.conversations.models.VolumeUnit
        """
        super(VolumeResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Volume'  # type: str
        self.unit = unit


class WeightResolution(BaseResolution, QuantityResolution):
    """Represents the weight entity resolution model.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The numeric value that the extracted text denotes.
    :vartype value: float
    :ivar resolution_kind: Required. The entity resolution object kind.Constant filled by server.
     Known values are: "Boolean", "DateTime", "Number", "Ordinal", "Speed", "Weight", "Length",
     "Volume", "Area", "Age", "Information", "Temperature", "Currency", "NumericRange",
     "TemporalSpan".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar unit: Required. The weight Unit of measurement. Known values are: "Unspecified",
     "Kilogram", "Gram", "Milligram", "Gallon", "MetricTon", "Ton", "Pound", "Ounce", "Grain",
     "PennyWeight", "LongTonBritish", "ShortTonUS", "ShortHundredWeightUS", "Stone", "Dram".
    :vartype unit: str or ~azure.ai.language.conversations.models.WeightUnit
    """

    _validation = {
        'value': {'required': True},
        'resolution_kind': {'required': True},
        'unit': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: float,
        unit: Union[str, "_models.WeightUnit"],
        **kwargs
    ):
        """
        :keyword value: Required. The numeric value that the extracted text denotes.
        :paramtype value: float
        :keyword unit: Required. The weight Unit of measurement. Known values are: "Unspecified",
         "Kilogram", "Gram", "Milligram", "Gallon", "MetricTon", "Ton", "Pound", "Ounce", "Grain",
         "PennyWeight", "LongTonBritish", "ShortTonUS", "ShortHundredWeightUS", "Stone", "Dram".
        :paramtype unit: str or ~azure.ai.language.conversations.models.WeightUnit
        """
        super(WeightResolution, self).__init__(value=value, **kwargs)
        self.value = value
        self.resolution_kind = 'Weight'  # type: str
        self.unit = unit


class WordLevelTiming(AudioTiming):
    """Word level timing information generated by the speech to text API. The words in this object should have 1:1 correspondence with the 'lexical' input to allow for audio redaction.

    :ivar offset: Offset from start of speech audio, in ticks. 1 tick = 100 ns.
    :vartype offset: long
    :ivar duration: Duration of word articulation, in ticks. 1 tick = 100 ns.
    :vartype duration: long
    :ivar word: The word recognized.
    :vartype word: str
    """

    _attribute_map = {
        'offset': {'key': 'offset', 'type': 'long'},
        'duration': {'key': 'duration', 'type': 'long'},
        'word': {'key': 'word', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        offset: Optional[int] = None,
        duration: Optional[int] = None,
        word: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword offset: Offset from start of speech audio, in ticks. 1 tick = 100 ns.
        :paramtype offset: long
        :keyword duration: Duration of word articulation, in ticks. 1 tick = 100 ns.
        :paramtype duration: long
        :keyword word: The word recognized.
        :paramtype word: str
        """
        super(WordLevelTiming, self).__init__(offset=offset, duration=duration, **kwargs)
        self.word = word
