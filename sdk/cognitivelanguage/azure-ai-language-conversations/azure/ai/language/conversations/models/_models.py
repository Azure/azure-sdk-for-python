# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class AnalyzeConversationOptions(msrest.serialization.Model):
    """The request body.

    All required parameters must be populated in order to send to Azure.

    :ivar query: Required. The conversation utterance to be analyzed.
    :vartype query: str
    :ivar direct_target: The name of the target project this request is sending to directly.
    :vartype direct_target: str
    :ivar language: The language to use in this request. This will be the language setting when
     communicating with all other target projects.
    :vartype language: str
    :ivar verbose: If true, the service will return more detailed information in the response.
    :vartype verbose: bool
    :ivar is_logging_enabled: If true, the query will be kept by the service for customers to
     further review, to improve the model quality.
    :vartype is_logging_enabled: bool
    :ivar parameters: A dictionary representing the input for each target project.
    :vartype parameters: dict[str, ~azure.ai.language.conversations.models.AnalyzeParameters]
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'direct_target': {'key': 'directTarget', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'verbose': {'key': 'verbose', 'type': 'bool'},
        'is_logging_enabled': {'key': 'isLoggingEnabled', 'type': 'bool'},
        'parameters': {'key': 'parameters', 'type': '{AnalyzeParameters}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword query: Required. The conversation utterance to be analyzed.
        :paramtype query: str
        :keyword direct_target: The name of the target project this request is sending to directly.
        :paramtype direct_target: str
        :keyword language: The language to use in this request. This will be the language setting when
         communicating with all other target projects.
        :paramtype language: str
        :keyword verbose: If true, the service will return more detailed information in the response.
        :paramtype verbose: bool
        :keyword is_logging_enabled: If true, the query will be kept by the service for customers to
         further review, to improve the model quality.
        :paramtype is_logging_enabled: bool
        :keyword parameters: A dictionary representing the input for each target project.
        :paramtype parameters: dict[str, ~azure.ai.language.conversations.models.AnalyzeParameters]
        """
        super(AnalyzeConversationOptions, self).__init__(**kwargs)
        self.query = kwargs['query']
        self.direct_target = kwargs.get('direct_target', None)
        self.language = kwargs.get('language', None)
        self.verbose = kwargs.get('verbose', None)
        self.is_logging_enabled = kwargs.get('is_logging_enabled', None)
        self.parameters = kwargs.get('parameters', None)


class AnalyzeConversationResult(msrest.serialization.Model):
    """Represents a conversation analysis response.

    All required parameters must be populated in order to send to Azure.

    :ivar query: Required. The conversation utterance given by the caller.
    :vartype query: str
    :ivar detected_language: The system detected language for the query.
    :vartype detected_language: str
    :ivar prediction: Required. The prediction result of a conversation project.
    :vartype prediction: ~azure.ai.language.conversations.models.BasePrediction
    """

    _validation = {
        'query': {'required': True},
        'prediction': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'detected_language': {'key': 'detectedLanguage', 'type': 'str'},
        'prediction': {'key': 'prediction', 'type': 'BasePrediction'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword query: Required. The conversation utterance given by the caller.
        :paramtype query: str
        :keyword detected_language: The system detected language for the query.
        :paramtype detected_language: str
        :keyword prediction: Required. The prediction result of a conversation project.
        :paramtype prediction: ~azure.ai.language.conversations.models.BasePrediction
        """
        super(AnalyzeConversationResult, self).__init__(**kwargs)
        self.query = kwargs['query']
        self.detected_language = kwargs.get('detected_language', None)
        self.prediction = kwargs['prediction']


class AnalyzeParameters(msrest.serialization.Model):
    """This is the parameter set of either the conversation application itself or one of the target services.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: LUISParameters, DeepstackParameters, QuestionAnsweringParameters.

    All required parameters must be populated in order to send to Azure.

    :ivar target_kind: Required. The type of a target service.Constant filled by server. Possible
     values include: "luis", "luis_deepstack", "question_answering".
    :vartype target_kind: str or ~azure.ai.language.conversations.models.TargetKind
    :ivar api_version: The API version to use when call a specific target service.
    :vartype api_version: str
    """

    _validation = {
        'target_kind': {'required': True},
    }

    _attribute_map = {
        'target_kind': {'key': 'targetKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
    }

    _subtype_map = {
        'target_kind': {'luis': 'LUISParameters', 'luis_deepstack': 'DeepstackParameters', 'question_answering': 'QuestionAnsweringParameters'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: The API version to use when call a specific target service.
        :paramtype api_version: str
        """
        super(AnalyzeParameters, self).__init__(**kwargs)
        self.target_kind = None  # type: Optional[str]
        self.api_version = kwargs.get('api_version', None)


class BasePrediction(msrest.serialization.Model):
    """This is the base class of prediction.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DeepstackPrediction, WorkflowPrediction.

    All required parameters must be populated in order to send to Azure.

    :ivar top_intent: The intent with the highest score.
    :vartype top_intent: str
    :ivar project_kind: Required. The type of the project.Constant filled by server. Possible
     values include: "conversation", "workflow".
    :vartype project_kind: str or ~azure.ai.language.conversations.models.ProjectKind
    """

    _validation = {
        'project_kind': {'required': True},
    }

    _attribute_map = {
        'top_intent': {'key': 'topIntent', 'type': 'str'},
        'project_kind': {'key': 'projectType', 'type': 'str'},
    }

    _subtype_map = {
        'project_kind': {'conversation': 'DeepstackPrediction', 'workflow': 'WorkflowPrediction'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword top_intent: The intent with the highest score.
        :paramtype top_intent: str
        """
        super(BasePrediction, self).__init__(**kwargs)
        self.top_intent = kwargs.get('top_intent', None)
        self.project_kind = None  # type: Optional[str]


class DeepstackCallingOptions(msrest.serialization.Model):
    """The option to set to call a LUIS Deepstack project.

    :ivar language: The language of the query.
    :vartype language: str
    :ivar verbose: If true, the service will return more detailed information.
    :vartype verbose: bool
    :ivar is_logging_enabled: If true, the query will be saved for customers to further review in
     authoring, to improve the model quality.
    :vartype is_logging_enabled: bool
    """

    _attribute_map = {
        'language': {'key': 'language', 'type': 'str'},
        'verbose': {'key': 'verbose', 'type': 'bool'},
        'is_logging_enabled': {'key': 'isLoggingEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword language: The language of the query.
        :paramtype language: str
        :keyword verbose: If true, the service will return more detailed information.
        :paramtype verbose: bool
        :keyword is_logging_enabled: If true, the query will be saved for customers to further review
         in authoring, to improve the model quality.
        :paramtype is_logging_enabled: bool
        """
        super(DeepstackCallingOptions, self).__init__(**kwargs)
        self.language = kwargs.get('language', None)
        self.verbose = kwargs.get('verbose', None)
        self.is_logging_enabled = kwargs.get('is_logging_enabled', None)


class DeepstackEntity(msrest.serialization.Model):
    """The entity extraction result of a LUIS Deepstack project.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Required. The entity category.
    :vartype category: str
    :ivar text: Required. The predicted entity text.
    :vartype text: str
    :ivar offset: Required. The starting index of this entity in the query.
    :vartype offset: int
    :ivar length: Required. The length of the text.
    :vartype length: int
    :ivar confidence_score: Required. The entity confidence score.
    :vartype confidence_score: float
    :ivar resolution: A array with extra information about the entity.
    :vartype resolution: list[~azure.ai.language.conversations.models.DeepStackEntityResolution]
    """

    _validation = {
        'category': {'required': True},
        'text': {'required': True},
        'offset': {'required': True},
        'length': {'required': True},
        'confidence_score': {'required': True},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'text': {'key': 'text', 'type': 'str'},
        'offset': {'key': 'offset', 'type': 'int'},
        'length': {'key': 'length', 'type': 'int'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'resolution': {'key': 'resolution', 'type': '[DeepStackEntityResolution]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword category: Required. The entity category.
        :paramtype category: str
        :keyword text: Required. The predicted entity text.
        :paramtype text: str
        :keyword offset: Required. The starting index of this entity in the query.
        :paramtype offset: int
        :keyword length: Required. The length of the text.
        :paramtype length: int
        :keyword confidence_score: Required. The entity confidence score.
        :paramtype confidence_score: float
        :keyword resolution: A array with extra information about the entity.
        :paramtype resolution: list[~azure.ai.language.conversations.models.DeepStackEntityResolution]
        """
        super(DeepstackEntity, self).__init__(**kwargs)
        self.category = kwargs['category']
        self.text = kwargs['text']
        self.offset = kwargs['offset']
        self.length = kwargs['length']
        self.confidence_score = kwargs['confidence_score']
        self.resolution = kwargs.get('resolution', None)


class DeepStackEntityResolution(msrest.serialization.Model):
    """This is the base class of all kinds of entity resolutions.

    All required parameters must be populated in order to send to Azure.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar resolution_kind: Required. The type of an entity resolution. Possible values include:
     "DictionaryNormalizedValue".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    """

    _validation = {
        'resolution_kind': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword resolution_kind: Required. The type of an entity resolution. Possible values include:
         "DictionaryNormalizedValue".
        :paramtype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
        """
        super(DeepStackEntityResolution, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.resolution_kind = kwargs['resolution_kind']


class DeepstackIntent(msrest.serialization.Model):
    """The intent classification result of a LUIS Deepstack project.

    All required parameters must be populated in order to send to Azure.

    :ivar category: Required. A predicted class.
    :vartype category: str
    :ivar confidence_score: Required. The confidence score of the class from 0.0 to 1.0.
    :vartype confidence_score: float
    """

    _validation = {
        'category': {'required': True},
        'confidence_score': {'required': True, 'maximum': 1, 'minimum': 0},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword category: Required. A predicted class.
        :paramtype category: str
        :keyword confidence_score: Required. The confidence score of the class from 0.0 to 1.0.
        :paramtype confidence_score: float
        """
        super(DeepstackIntent, self).__init__(**kwargs)
        self.category = kwargs['category']
        self.confidence_score = kwargs['confidence_score']


class DeepstackParameters(AnalyzeParameters):
    """This is a set of request parameters for LUIS Deepstack projects.

    All required parameters must be populated in order to send to Azure.

    :ivar target_kind: Required. The type of a target service.Constant filled by server. Possible
     values include: "luis", "luis_deepstack", "question_answering".
    :vartype target_kind: str or ~azure.ai.language.conversations.models.TargetKind
    :ivar api_version: The API version to use when call a specific target service.
    :vartype api_version: str
    :ivar calling_options: The option to set to call a LUIS Deepstack project.
    :vartype calling_options: ~azure.ai.language.conversations.models.DeepstackCallingOptions
    """

    _validation = {
        'target_kind': {'required': True},
    }

    _attribute_map = {
        'target_kind': {'key': 'targetKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'calling_options': {'key': 'callingOptions', 'type': 'DeepstackCallingOptions'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: The API version to use when call a specific target service.
        :paramtype api_version: str
        :keyword calling_options: The option to set to call a LUIS Deepstack project.
        :paramtype calling_options: ~azure.ai.language.conversations.models.DeepstackCallingOptions
        """
        super(DeepstackParameters, self).__init__(**kwargs)
        self.target_kind = 'luis_deepstack'  # type: str
        self.calling_options = kwargs.get('calling_options', None)


class DeepstackPrediction(BasePrediction):
    """Represents the prediction section of a LUIS Deepstack project.

    All required parameters must be populated in order to send to Azure.

    :ivar top_intent: The intent with the highest score.
    :vartype top_intent: str
    :ivar project_kind: Required. The type of the project.Constant filled by server. Possible
     values include: "conversation", "workflow".
    :vartype project_kind: str or ~azure.ai.language.conversations.models.ProjectKind
    :ivar intents: Required. The intent classification results.
    :vartype intents: list[~azure.ai.language.conversations.models.DeepstackIntent]
    :ivar entities: Required. The entity extraction results.
    :vartype entities: list[~azure.ai.language.conversations.models.DeepstackEntity]
    """

    _validation = {
        'project_kind': {'required': True},
        'intents': {'required': True},
        'entities': {'required': True},
    }

    _attribute_map = {
        'top_intent': {'key': 'topIntent', 'type': 'str'},
        'project_kind': {'key': 'projectType', 'type': 'str'},
        'intents': {'key': 'intents', 'type': '[DeepstackIntent]'},
        'entities': {'key': 'entities', 'type': '[DeepstackEntity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword top_intent: The intent with the highest score.
        :paramtype top_intent: str
        :keyword intents: Required. The intent classification results.
        :paramtype intents: list[~azure.ai.language.conversations.models.DeepstackIntent]
        :keyword entities: Required. The entity extraction results.
        :paramtype entities: list[~azure.ai.language.conversations.models.DeepstackEntity]
        """
        super(DeepstackPrediction, self).__init__(**kwargs)
        self.project_kind = 'conversation'  # type: str
        self.intents = kwargs['intents']
        self.entities = kwargs['entities']


class DeepstackResult(msrest.serialization.Model):
    """The response returned by a LUIS Deepstack project.

    All required parameters must be populated in order to send to Azure.

    :ivar query: Required. The same query given in request.
    :vartype query: str
    :ivar detected_language: The detected language from the query.
    :vartype detected_language: str
    :ivar prediction: Required. The predicted result for the query.
    :vartype prediction: ~azure.ai.language.conversations.models.DeepstackPrediction
    """

    _validation = {
        'query': {'required': True},
        'prediction': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'detected_language': {'key': 'detectedLanguage', 'type': 'str'},
        'prediction': {'key': 'prediction', 'type': 'DeepstackPrediction'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword query: Required. The same query given in request.
        :paramtype query: str
        :keyword detected_language: The detected language from the query.
        :paramtype detected_language: str
        :keyword prediction: Required. The predicted result for the query.
        :paramtype prediction: ~azure.ai.language.conversations.models.DeepstackPrediction
        """
        super(DeepstackResult, self).__init__(**kwargs)
        self.query = kwargs['query']
        self.detected_language = kwargs.get('detected_language', None)
        self.prediction = kwargs['prediction']


class DictionaryNormalizedValueResolution(DeepStackEntityResolution):
    """The DictionaryNormalizedValue resolution indicates entity values are extracted from a predefined dictionary. For example, Coca could be a normalized name for Coca-Cola.

    All required parameters must be populated in order to send to Azure.

    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar resolution_kind: Required. The type of an entity resolution. Possible values include:
     "DictionaryNormalizedValue".
    :vartype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
    :ivar values: A list of normalized entities.
    :vartype values: list[str]
    """

    _validation = {
        'resolution_kind': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'resolution_kind': {'key': 'resolutionKind', 'type': 'str'},
        'values': {'key': 'values', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword resolution_kind: Required. The type of an entity resolution. Possible values include:
         "DictionaryNormalizedValue".
        :paramtype resolution_kind: str or ~azure.ai.language.conversations.models.ResolutionKind
        :keyword values: A list of normalized entities.
        :paramtype values: list[str]
        """
        super(DictionaryNormalizedValueResolution, self).__init__(**kwargs)
        self.values = kwargs.get('values', None)


class TargetIntentResult(msrest.serialization.Model):
    """This is the base class of an intent prediction.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: LUISTargetIntentResult, DSTargetIntentResult, QuestionAnsweringTargetIntentResult.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence_score: The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence_score: float
    :ivar target_kind: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server. Possible values include: "luis", "luis_deepstack", "question_answering".
    :vartype target_kind: str or ~azure.ai.language.conversations.models.TargetKind
    """

    _validation = {
        'confidence_score': {'maximum': 1, 'minimum': 0},
        'target_kind': {'required': True},
    }

    _attribute_map = {
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'target_kind': {'key': 'targetType', 'type': 'str'},
    }

    _subtype_map = {
        'target_kind': {'luis': 'LUISTargetIntentResult', 'luis_deepstack': 'DSTargetIntentResult', 'question_answering': 'QuestionAnsweringTargetIntentResult'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence_score: The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence_score: float
        """
        super(TargetIntentResult, self).__init__(**kwargs)
        self.api_version = kwargs.get('api_version', None)
        self.confidence_score = kwargs.get('confidence_score', None)
        self.target_kind = None  # type: Optional[str]


class DSTargetIntentResult(TargetIntentResult):
    """A wrap up of LUIS Deepstack response.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence_score: The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence_score: float
    :ivar target_kind: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server. Possible values include: "luis", "luis_deepstack", "question_answering".
    :vartype target_kind: str or ~azure.ai.language.conversations.models.TargetKind
    :ivar result: The actual response from a LUIS Deepstack application.
    :vartype result: ~azure.ai.language.conversations.models.DeepstackResult
    """

    _validation = {
        'confidence_score': {'maximum': 1, 'minimum': 0},
        'target_kind': {'required': True},
    }

    _attribute_map = {
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'target_kind': {'key': 'targetType', 'type': 'str'},
        'result': {'key': 'result', 'type': 'DeepstackResult'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence_score: The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence_score: float
        :keyword result: The actual response from a LUIS Deepstack application.
        :paramtype result: ~azure.ai.language.conversations.models.DeepstackResult
        """
        super(DSTargetIntentResult, self).__init__(**kwargs)
        self.target_kind = 'luis_deepstack'  # type: str
        self.result = kwargs.get('result', None)


class Error(msrest.serialization.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. One of a server-defined set of error codes. Possible values include:
     "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
     "TooManyRequests", "InternalServerError", "ServiceUnavailable".
    :vartype code: str or ~azure.ai.language.conversations.models.ErrorCode
    :ivar message: Required. A human-readable representation of the error.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.ai.language.conversations.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.conversations.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerErrorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Required. One of a server-defined set of error codes. Possible values include:
         "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
         "TooManyRequests", "InternalServerError", "ServiceUnavailable".
        :paramtype code: str or ~azure.ai.language.conversations.models.ErrorCode
        :keyword message: Required. A human-readable representation of the error.
        :paramtype message: str
        :keyword target: The target of the error.
        :paramtype target: str
        :keyword details: An array of details about specific errors that led to this reported error.
        :paramtype details: list[~azure.ai.language.conversations.models.Error]
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.ai.language.conversations.models.InnerErrorModel
        """
        super(Error, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.ai.language.conversations.models.Error
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: The error object.
        :paramtype error: ~azure.ai.language.conversations.models.Error
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class InnerErrorModel(msrest.serialization.Model):
    """An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. One of a server-defined set of error codes. Possible values include:
     "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
     "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure".
    :vartype code: str or ~azure.ai.language.conversations.models.InnerErrorCode
    :ivar message: Required. Error message.
    :vartype message: str
    :ivar details: Error details.
    :vartype details: dict[str, str]
    :ivar target: Error target.
    :vartype target: str
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.conversations.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '{str}'},
        'target': {'key': 'target', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerErrorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Required. One of a server-defined set of error codes. Possible values include:
         "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
         "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure".
        :paramtype code: str or ~azure.ai.language.conversations.models.InnerErrorCode
        :keyword message: Required. Error message.
        :paramtype message: str
        :keyword details: Error details.
        :paramtype details: dict[str, str]
        :keyword target: Error target.
        :paramtype target: str
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.ai.language.conversations.models.InnerErrorModel
        """
        super(InnerErrorModel, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.details = kwargs.get('details', None)
        self.target = kwargs.get('target', None)
        self.innererror = kwargs.get('innererror', None)


class LUISCallingOptions(msrest.serialization.Model):
    """This customizes how the service calls LUIS Generally Available projects.

    :ivar verbose: Enable verbose response.
    :vartype verbose: bool
    :ivar log: Save log to add in training utterances later.
    :vartype log: bool
    :ivar show_all_intents: Set true to show all intents.
    :vartype show_all_intents: bool
    :ivar timezone_offset: The timezone offset for the location of the request.
    :vartype timezone_offset: float
    :ivar spell_check: Enable spell checking.
    :vartype spell_check: bool
    :ivar bing_spell_check_subscription_key: The subscription key to use when enabling Bing spell
     check.
    :vartype bing_spell_check_subscription_key: str
    """

    _attribute_map = {
        'verbose': {'key': 'verbose', 'type': 'bool'},
        'log': {'key': 'log', 'type': 'bool'},
        'show_all_intents': {'key': 'show-all-intents', 'type': 'bool'},
        'timezone_offset': {'key': 'timezoneOffset', 'type': 'float'},
        'spell_check': {'key': 'spellCheck', 'type': 'bool'},
        'bing_spell_check_subscription_key': {'key': 'bing-spell-check-subscription-key', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword verbose: Enable verbose response.
        :paramtype verbose: bool
        :keyword log: Save log to add in training utterances later.
        :paramtype log: bool
        :keyword show_all_intents: Set true to show all intents.
        :paramtype show_all_intents: bool
        :keyword timezone_offset: The timezone offset for the location of the request.
        :paramtype timezone_offset: float
        :keyword spell_check: Enable spell checking.
        :paramtype spell_check: bool
        :keyword bing_spell_check_subscription_key: The subscription key to use when enabling Bing
         spell check.
        :paramtype bing_spell_check_subscription_key: str
        """
        super(LUISCallingOptions, self).__init__(**kwargs)
        self.verbose = kwargs.get('verbose', None)
        self.log = kwargs.get('log', None)
        self.show_all_intents = kwargs.get('show_all_intents', None)
        self.timezone_offset = kwargs.get('timezone_offset', None)
        self.spell_check = kwargs.get('spell_check', None)
        self.bing_spell_check_subscription_key = kwargs.get('bing_spell_check_subscription_key', None)


class LUISParameters(AnalyzeParameters):
    """This is a set of request parameters for LUIS Generally Available projects.

    All required parameters must be populated in order to send to Azure.

    :ivar target_kind: Required. The type of a target service.Constant filled by server. Possible
     values include: "luis", "luis_deepstack", "question_answering".
    :vartype target_kind: str or ~azure.ai.language.conversations.models.TargetKind
    :ivar api_version: The API version to use when call a specific target service.
    :vartype api_version: str
    :ivar additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :vartype additional_properties: dict[str, any]
    :ivar query: The utterance to predict.
    :vartype query: str
    :ivar calling_options: This customizes how the service calls LUIS Generally Available projects.
    :vartype calling_options: ~azure.ai.language.conversations.models.LUISCallingOptions
    """

    _validation = {
        'target_kind': {'required': True},
        'query': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'target_kind': {'key': 'targetKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'additional_properties': {'key': '', 'type': '{object}'},
        'query': {'key': 'query', 'type': 'str'},
        'calling_options': {'key': 'callingOptions', 'type': 'LUISCallingOptions'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: The API version to use when call a specific target service.
        :paramtype api_version: str
        :keyword additional_properties: Unmatched properties from the message are deserialized to this
         collection.
        :paramtype additional_properties: dict[str, any]
        :keyword query: The utterance to predict.
        :paramtype query: str
        :keyword calling_options: This customizes how the service calls LUIS Generally Available
         projects.
        :paramtype calling_options: ~azure.ai.language.conversations.models.LUISCallingOptions
        """
        super(LUISParameters, self).__init__(**kwargs)
        self.target_kind = 'luis'  # type: str
        self.additional_properties = kwargs.get('additional_properties', None)
        self.query = kwargs.get('query', None)
        self.calling_options = kwargs.get('calling_options', None)


class LUISTargetIntentResult(TargetIntentResult):
    """It is a wrap up of LUIS Generally Available response.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence_score: The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence_score: float
    :ivar target_kind: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server. Possible values include: "luis", "luis_deepstack", "question_answering".
    :vartype target_kind: str or ~azure.ai.language.conversations.models.TargetKind
    :ivar result: The actual response from a LUIS Generally Available application.
    :vartype result: any
    """

    _validation = {
        'confidence_score': {'maximum': 1, 'minimum': 0},
        'target_kind': {'required': True},
    }

    _attribute_map = {
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'target_kind': {'key': 'targetType', 'type': 'str'},
        'result': {'key': 'result', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence_score: The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence_score: float
        :keyword result: The actual response from a LUIS Generally Available application.
        :paramtype result: any
        """
        super(LUISTargetIntentResult, self).__init__(**kwargs)
        self.target_kind = 'luis'  # type: str
        self.result = kwargs.get('result', None)


class QuestionAnsweringParameters(AnalyzeParameters):
    """This is a set of request parameters for Question Answering knowledge bases.

    All required parameters must be populated in order to send to Azure.

    :ivar target_kind: Required. The type of a target service.Constant filled by server. Possible
     values include: "luis", "luis_deepstack", "question_answering".
    :vartype target_kind: str or ~azure.ai.language.conversations.models.TargetKind
    :ivar api_version: The API version to use when call a specific target service.
    :vartype api_version: str
    :ivar calling_options: The options sent to a Question Answering KB.
    :vartype calling_options: any
    """

    _validation = {
        'target_kind': {'required': True},
    }

    _attribute_map = {
        'target_kind': {'key': 'targetKind', 'type': 'str'},
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'calling_options': {'key': 'callingOptions', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: The API version to use when call a specific target service.
        :paramtype api_version: str
        :keyword calling_options: The options sent to a Question Answering KB.
        :paramtype calling_options: any
        """
        super(QuestionAnsweringParameters, self).__init__(**kwargs)
        self.target_kind = 'question_answering'  # type: str
        self.calling_options = kwargs.get('calling_options', None)


class QuestionAnsweringTargetIntentResult(TargetIntentResult):
    """It is a wrap up a Question Answering KB response.

    All required parameters must be populated in order to send to Azure.

    :ivar api_version: The API version used to call a target service.
    :vartype api_version: str
    :ivar confidence_score: The prediction score and it ranges from 0.0 to 1.0.
    :vartype confidence_score: float
    :ivar target_kind: Required. This discriminator property specifies the type of the target
     project that returns the response. 'luis' means the type is LUIS Generally Available.
     'luis_deepstack' means LUIS vNext. 'question_answering' means Question Answering.Constant
     filled by server. Possible values include: "luis", "luis_deepstack", "question_answering".
    :vartype target_kind: str or ~azure.ai.language.conversations.models.TargetKind
    :ivar result: The generated answer by a Question Answering KB.
    :vartype result: any
    """

    _validation = {
        'confidence_score': {'maximum': 1, 'minimum': 0},
        'target_kind': {'required': True},
    }

    _attribute_map = {
        'api_version': {'key': 'apiVersion', 'type': 'str'},
        'confidence_score': {'key': 'confidenceScore', 'type': 'float'},
        'target_kind': {'key': 'targetType', 'type': 'str'},
        'result': {'key': 'result', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword api_version: The API version used to call a target service.
        :paramtype api_version: str
        :keyword confidence_score: The prediction score and it ranges from 0.0 to 1.0.
        :paramtype confidence_score: float
        :keyword result: The generated answer by a Question Answering KB.
        :paramtype result: any
        """
        super(QuestionAnsweringTargetIntentResult, self).__init__(**kwargs)
        self.target_kind = 'question_answering'  # type: str
        self.result = kwargs.get('result', None)


class WorkflowPrediction(BasePrediction):
    """This represents the prediction result of an Workflow project.

    All required parameters must be populated in order to send to Azure.

    :ivar top_intent: The intent with the highest score.
    :vartype top_intent: str
    :ivar project_kind: Required. The type of the project.Constant filled by server. Possible
     values include: "conversation", "workflow".
    :vartype project_kind: str or ~azure.ai.language.conversations.models.ProjectKind
    :ivar intents: Required. A dictionary that contains all intents. A key is an intent name and a
     value is its confidence score and target type. The top intent's value also contains the actual
     response from the target project.
    :vartype intents: dict[str, ~azure.ai.language.conversations.models.TargetIntentResult]
    """

    _validation = {
        'project_kind': {'required': True},
        'intents': {'required': True},
    }

    _attribute_map = {
        'top_intent': {'key': 'topIntent', 'type': 'str'},
        'project_kind': {'key': 'projectType', 'type': 'str'},
        'intents': {'key': 'intents', 'type': '{TargetIntentResult}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword top_intent: The intent with the highest score.
        :paramtype top_intent: str
        :keyword intents: Required. A dictionary that contains all intents. A key is an intent name and
         a value is its confidence score and target type. The top intent's value also contains the
         actual response from the target project.
        :paramtype intents: dict[str, ~azure.ai.language.conversations.models.TargetIntentResult]
        """
        super(WorkflowPrediction, self).__init__(**kwargs)
        self.project_kind = 'workflow'  # type: str
        self.intents = kwargs['intents']
