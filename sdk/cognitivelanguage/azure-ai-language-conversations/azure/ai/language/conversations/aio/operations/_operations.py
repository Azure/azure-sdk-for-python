# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ...operations._operations import build_analyze_conversations_request

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ConversationAnalysisClientOperationsMixin:

    @distributed_trace_async
    async def analyze_conversations(
        self,
        conversation_analysis_input: Any,
        *,
        project_name: str,
        deployment_name: str,
        **kwargs: Any
    ) -> Any:
        """Analyzes the input conversation utterance.

        :param conversation_analysis_input: Post body of the request.
        :type conversation_analysis_input: Any
        :keyword project_name: The project name.
        :paramtype project_name: str
        :keyword deployment_name: The deployment name/deployed version.
        :paramtype deployment_name: str
        :return: JSON object
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                conversation_analysis_input = {
                    "directTarget": "str",  # Optional. The name of the target project this request is sending to directly.
                    "isLoggingEnabled": bool,  # Optional. If true, the query will be kept by the service for customers to further review, to improve the model quality.
                    "language": "str",  # Optional. The language to use in this request. This will be the language setting when communicating with all other target projects.
                    "parameters": {
                        "str": {
                            "apiVersion": "str",  # Optional. The API version to use when call a specific target service.
                            targetKind: targetKind
                        }
                    },
                    "query": "str",  # The conversation utterance to be analyzed.
                    "verbose": bool  # Optional. If true, the service will return more detailed information in the response.
                }

                # response body for status code(s): 200
                response.json() == {
                    "detectedLanguage": "str",  # Optional. The system detected language for the query.
                    "prediction": {
                        "topIntent": "str",  # Optional. The intent with the highest score.
                        projectKind: projectKind
                    },
                    "query": "str"  # The conversation utterance given by the caller.
                }
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = conversation_analysis_input

        request = build_analyze_conversations_request(
            content_type=content_type,
            project_name=project_name,
            deployment_name=deployment_name,
            json=json,
            template_url=self.analyze_conversations.metadata['url'],
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    analyze_conversations.metadata = {'url': '/:analyze-conversations'}  # type: ignore

