# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=wrong-import-position

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ._patch import *  # pylint: disable=unused-wildcard-import


from ._models import (  # type: ignore
    AbstractiveSummarizationLROResult,
    AbstractiveSummarizationLROTask,
    AbstractiveSummarizationResult,
    AbstractiveSummarizationTaskParameters,
    AbstractiveSummary,
    AbstractiveSummaryDocumentResultWithDetectedLanguage,
    AgeMetadata,
    AllowOverlapEntityPolicyType,
    AnalyzeTextEntityLinkingInput,
    AnalyzeTextEntityRecognitionInput,
    AnalyzeTextJobState,
    AnalyzeTextKeyPhraseExtractionInput,
    AnalyzeTextLROResult,
    AnalyzeTextLROTask,
    AnalyzeTextLanguageDetectionInput,
    AnalyzeTextPiiEntitiesRecognitionInput,
    AnalyzeTextSentimentAnalysisInput,
    AnalyzeTextTask,
    AnalyzeTextTaskResult,
    AreaMetadata,
    BaseEntityOverlapPolicy,
    BaseMetadata,
    BaseRedactionPolicy,
    CharacterMaskPolicyType,
    ClassificationDocumentResultWithDetectedLanguage,
    ClassificationResult,
    CurrencyMetadata,
    CustomEntitiesLROTask,
    CustomEntitiesResult,
    CustomEntitiesTaskParameters,
    CustomEntityRecognitionLROResult,
    CustomLabelClassificationResult,
    CustomMultiLabelClassificationLROResult,
    CustomMultiLabelClassificationLROTask,
    CustomMultiLabelClassificationTaskParameters,
    CustomSingleLabelClassificationLROResult,
    CustomSingleLabelClassificationLROTask,
    CustomSingleLabelClassificationTaskParameters,
    DateMetadata,
    DateTimeMetadata,
    DateValue,
    DetectedLanguage,
    DocumentError,
    DocumentStatistics,
    DocumentWarning,
    EntitiesDocumentResultWithDetectedLanguage,
    EntitiesDocumentResultWithMetadata,
    EntitiesDocumentResultWithMetadataDetectedLanguage,
    EntitiesLROTask,
    EntitiesResult,
    EntitiesTaskParameters,
    EntitiesTaskResult,
    EntitiesWithMetadataAutoResult,
    Entity,
    EntityInferenceOptions,
    EntityLinkingLROResult,
    EntityLinkingLROTask,
    EntityLinkingResult,
    EntityLinkingResultWithDetectedLanguage,
    EntityLinkingTaskParameters,
    EntityLinkingTaskResult,
    EntityMaskPolicyType,
    EntityRecognitionLROResult,
    EntitySynonym,
    EntitySynonyms,
    EntityTag,
    EntityWithMetadata,
    Error,
    ErrorResponse,
    ExtractedSummaryDocumentResultWithDetectedLanguage,
    ExtractedSummarySentence,
    ExtractiveSummarizationLROResult,
    ExtractiveSummarizationLROTask,
    ExtractiveSummarizationResult,
    ExtractiveSummarizationTaskParameters,
    FhirBundle,
    HealthcareAssertion,
    HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage,
    HealthcareEntity,
    HealthcareEntityLink,
    HealthcareLROResult,
    HealthcareLROTask,
    HealthcareRelation,
    HealthcareRelationEntity,
    HealthcareResult,
    HealthcareTaskParameters,
    InformationMetadata,
    InnerErrorModel,
    KeyPhraseExtractionLROResult,
    KeyPhraseLROTask,
    KeyPhraseResult,
    KeyPhraseTaskParameters,
    KeyPhraseTaskResult,
    KeyPhrasesDocumentResultWithDetectedLanguage,
    LanguageDetectionAnalysisInput,
    LanguageDetectionDocumentResult,
    LanguageDetectionResult,
    LanguageDetectionTaskParameters,
    LanguageDetectionTaskResult,
    LanguageInput,
    LengthMetadata,
    LinkedEntity,
    Match,
    MatchLongestEntityPolicyType,
    MultiLanguageAnalysisInput,
    MultiLanguageInput,
    NoMaskPolicyType,
    NumberMetadata,
    NumericRangeMetadata,
    OrdinalMetadata,
    PiiEntityRecognitionLROResult,
    PiiEntityWithTags,
    PiiLROTask,
    PiiResult,
    PiiResultWithDetectedLanguage,
    PiiTaskParameters,
    PiiTaskResult,
    RequestStatistics,
    SentenceAssessment,
    SentenceSentiment,
    SentenceTarget,
    SentimentAnalysisLROTask,
    SentimentAnalysisTaskParameters,
    SentimentConfidenceScores,
    SentimentDocumentResultWithDetectedLanguage,
    SentimentLROResult,
    SentimentResponse,
    SentimentTaskResult,
    SpeedMetadata,
    SummaryContext,
    TargetConfidenceScoreLabel,
    TargetRelation,
    Tasks,
    TemperatureMetadata,
    TemporalSetMetadata,
    TemporalSpanMetadata,
    TemporalSpanValues,
    TimeMetadata,
    ValueExclusionPolicy,
    VolumeMetadata,
    WeightMetadata,
)

from ._enums import (  # type: ignore
    AgeUnit,
    AnalyzeTextLROResultsKind,
    AnalyzeTextLROTaskKind,
    AnalyzeTextTaskKind,
    AnalyzeTextTaskResultsKind,
    AreaUnit,
    Association,
    Certainty,
    Conditionality,
    DocumentSentimentValue,
    EntityCategory,
    ErrorCode,
    ExtractiveSummarizationSortingCriteria,
    FhirVersion,
    HealthcareDocumentType,
    HealthcareEntityCategory,
    InformationUnit,
    InnerErrorCode,
    LengthUnit,
    MetadataKind,
    NumberKind,
    PiiCategoriesExclude,
    PiiCategory,
    PiiDomain,
    PolicyKind,
    RangeInclusivity,
    RangeKind,
    RedactionCharacter,
    RedactionPolicyKind,
    RelationType,
    RelativeTo,
    ScriptCode,
    ScriptKind,
    SentenceSentimentValue,
    SpeedUnit,
    State,
    StringIndexType,
    SummaryLengthBucket,
    TargetRelationType,
    TemperatureUnit,
    TemporalModifier,
    Temporality,
    TokenSentimentValue,
    VolumeUnit,
    WarningCodeValue,
    WeightUnit,
)
from ._patch import __all__ as _patch_all
from ._patch import *
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "AbstractiveSummarizationLROResult",
    "AbstractiveSummarizationLROTask",
    "AbstractiveSummarizationResult",
    "AbstractiveSummarizationTaskParameters",
    "AbstractiveSummary",
    "AbstractiveSummaryDocumentResultWithDetectedLanguage",
    "AgeMetadata",
    "AllowOverlapEntityPolicyType",
    "AnalyzeTextEntityLinkingInput",
    "AnalyzeTextEntityRecognitionInput",
    "AnalyzeTextJobState",
    "AnalyzeTextKeyPhraseExtractionInput",
    "AnalyzeTextLROResult",
    "AnalyzeTextLROTask",
    "AnalyzeTextLanguageDetectionInput",
    "AnalyzeTextPiiEntitiesRecognitionInput",
    "AnalyzeTextSentimentAnalysisInput",
    "AnalyzeTextTask",
    "AnalyzeTextTaskResult",
    "AreaMetadata",
    "BaseEntityOverlapPolicy",
    "BaseMetadata",
    "BaseRedactionPolicy",
    "CharacterMaskPolicyType",
    "ClassificationDocumentResultWithDetectedLanguage",
    "ClassificationResult",
    "CurrencyMetadata",
    "CustomEntitiesLROTask",
    "CustomEntitiesResult",
    "CustomEntitiesTaskParameters",
    "CustomEntityRecognitionLROResult",
    "CustomLabelClassificationResult",
    "CustomMultiLabelClassificationLROResult",
    "CustomMultiLabelClassificationLROTask",
    "CustomMultiLabelClassificationTaskParameters",
    "CustomSingleLabelClassificationLROResult",
    "CustomSingleLabelClassificationLROTask",
    "CustomSingleLabelClassificationTaskParameters",
    "DateMetadata",
    "DateTimeMetadata",
    "DateValue",
    "DetectedLanguage",
    "DocumentError",
    "DocumentStatistics",
    "DocumentWarning",
    "EntitiesDocumentResultWithDetectedLanguage",
    "EntitiesDocumentResultWithMetadata",
    "EntitiesDocumentResultWithMetadataDetectedLanguage",
    "EntitiesLROTask",
    "EntitiesResult",
    "EntitiesTaskParameters",
    "EntitiesTaskResult",
    "EntitiesWithMetadataAutoResult",
    "Entity",
    "EntityInferenceOptions",
    "EntityLinkingLROResult",
    "EntityLinkingLROTask",
    "EntityLinkingResult",
    "EntityLinkingResultWithDetectedLanguage",
    "EntityLinkingTaskParameters",
    "EntityLinkingTaskResult",
    "EntityMaskPolicyType",
    "EntityRecognitionLROResult",
    "EntitySynonym",
    "EntitySynonyms",
    "EntityTag",
    "EntityWithMetadata",
    "Error",
    "ErrorResponse",
    "ExtractedSummaryDocumentResultWithDetectedLanguage",
    "ExtractedSummarySentence",
    "ExtractiveSummarizationLROResult",
    "ExtractiveSummarizationLROTask",
    "ExtractiveSummarizationResult",
    "ExtractiveSummarizationTaskParameters",
    "FhirBundle",
    "HealthcareAssertion",
    "HealthcareEntitiesDocumentResultWithDocumentDetectedLanguage",
    "HealthcareEntity",
    "HealthcareEntityLink",
    "HealthcareLROResult",
    "HealthcareLROTask",
    "HealthcareRelation",
    "HealthcareRelationEntity",
    "HealthcareResult",
    "HealthcareTaskParameters",
    "InformationMetadata",
    "InnerErrorModel",
    "KeyPhraseExtractionLROResult",
    "KeyPhraseLROTask",
    "KeyPhraseResult",
    "KeyPhraseTaskParameters",
    "KeyPhraseTaskResult",
    "KeyPhrasesDocumentResultWithDetectedLanguage",
    "LanguageDetectionAnalysisInput",
    "LanguageDetectionDocumentResult",
    "LanguageDetectionResult",
    "LanguageDetectionTaskParameters",
    "LanguageDetectionTaskResult",
    "LanguageInput",
    "LengthMetadata",
    "LinkedEntity",
    "Match",
    "MatchLongestEntityPolicyType",
    "MultiLanguageAnalysisInput",
    "MultiLanguageInput",
    "NoMaskPolicyType",
    "NumberMetadata",
    "NumericRangeMetadata",
    "OrdinalMetadata",
    "PiiEntityRecognitionLROResult",
    "PiiEntityWithTags",
    "PiiLROTask",
    "PiiResult",
    "PiiResultWithDetectedLanguage",
    "PiiTaskParameters",
    "PiiTaskResult",
    "RequestStatistics",
    "SentenceAssessment",
    "SentenceSentiment",
    "SentenceTarget",
    "SentimentAnalysisLROTask",
    "SentimentAnalysisTaskParameters",
    "SentimentConfidenceScores",
    "SentimentDocumentResultWithDetectedLanguage",
    "SentimentLROResult",
    "SentimentResponse",
    "SentimentTaskResult",
    "SpeedMetadata",
    "SummaryContext",
    "TargetConfidenceScoreLabel",
    "TargetRelation",
    "Tasks",
    "TemperatureMetadata",
    "TemporalSetMetadata",
    "TemporalSpanMetadata",
    "TemporalSpanValues",
    "TimeMetadata",
    "ValueExclusionPolicy",
    "VolumeMetadata",
    "WeightMetadata",
    "AgeUnit",
    "AnalyzeTextLROResultsKind",
    "AnalyzeTextLROTaskKind",
    "AnalyzeTextTaskKind",
    "AnalyzeTextTaskResultsKind",
    "AreaUnit",
    "Association",
    "Certainty",
    "Conditionality",
    "DocumentSentimentValue",
    "EntityCategory",
    "ErrorCode",
    "ExtractiveSummarizationSortingCriteria",
    "FhirVersion",
    "HealthcareDocumentType",
    "HealthcareEntityCategory",
    "InformationUnit",
    "InnerErrorCode",
    "LengthUnit",
    "MetadataKind",
    "NumberKind",
    "PiiCategoriesExclude",
    "PiiCategory",
    "PiiDomain",
    "PolicyKind",
    "RangeInclusivity",
    "RangeKind",
    "RedactionCharacter",
    "RedactionPolicyKind",
    "RelationType",
    "RelativeTo",
    "ScriptCode",
    "ScriptKind",
    "SentenceSentimentValue",
    "SpeedUnit",
    "State",
    "StringIndexType",
    "SummaryLengthBucket",
    "TargetRelationType",
    "TemperatureUnit",
    "TemporalModifier",
    "Temporality",
    "TokenSentimentValue",
    "VolumeUnit",
    "WarningCodeValue",
    "WeightUnit",
]
__all__.extend([p for p in _patch_all if p not in __all__])  # pyright: ignore
_patch_sdk()
