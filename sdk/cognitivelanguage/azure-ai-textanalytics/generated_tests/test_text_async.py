# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import TextPreparer
from testpreparer_async import TextClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestTextAsync(TextClientTestBaseAsync):
    @TextPreparer()
    @recorded_by_proxy_async
    async def test_analyze_text(self, text_endpoint):
        client = self.create_async_client(endpoint=text_endpoint)
        response = await client.analyze_text(
            body={
                "kind": "EntityLinking",
                "analysisInput": {"documents": [{"id": "str", "text": "str", "language": "str"}]},
                "parameters": {"loggingOptOut": bool, "modelVersion": "str", "stringIndexType": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @TextPreparer()
    @recorded_by_proxy_async
    async def test_analyze_text_job_status(self, text_endpoint):
        client = self.create_async_client(endpoint=text_endpoint)
        response = await client.analyze_text_job_status(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TextPreparer()
    @recorded_by_proxy_async
    async def test_begin_analyze_text_submit_job(self, text_endpoint):
        client = self.create_async_client(endpoint=text_endpoint)
        response = await (
            await client.begin_analyze_text_submit_job(
                body={
                    "analysisInput": {"documents": [{"id": "str", "text": "str", "language": "str"}]},
                    "tasks": ["analyze_text_lro_task"],
                    "cancelAfter": 0.0,
                    "defaultLanguage": "str",
                    "displayName": "str",
                },
                analysis_input={"documents": [{"id": "str", "text": "str", "language": "str"}]},
                tasks=["analyze_text_lro_task"],
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @TextPreparer()
    @recorded_by_proxy_async
    async def test_begin_analyze_text_cancel_job(self, text_endpoint):
        client = self.create_async_client(endpoint=text_endpoint)
        response = await (
            await client.begin_analyze_text_cancel_job(
                job_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
