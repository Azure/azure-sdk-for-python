# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.2.1, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._microsoft_cognitive_language_service_enums import *


class Assets(msrest.serialization.Model):
    """All assets for this project.

    :param synonyms: Collection of synonyms.
    :type synonyms: list[~microsoft_cognitive_language_service.models.WordAlterations]
    :param qnas: List of QnA records.
    :type qnas: list[~microsoft_cognitive_language_service.models.RetrieveQnaRecord]
    """

    _attribute_map = {
        "synonyms": {"key": "synonyms", "type": "[WordAlterations]"},
        "qnas": {"key": "qnas", "type": "[RetrieveQnaRecord]"},
    }

    def __init__(
        self,
        *,
        synonyms: Optional[List["WordAlterations"]] = None,
        qnas: Optional[List["RetrieveQnaRecord"]] = None,
        **kwargs
    ):
        super(Assets, self).__init__(**kwargs)
        self.synonyms = synonyms
        self.qnas = qnas


class CreateProjectParameters(msrest.serialization.Model):
    """Parameters needed to create the project.

    All required parameters must be populated in order to send to Azure.

    :param project_name: Required. Friendly name for the project.
    :type project_name: str
    :param description: Description of the project.
    :type description: str
    :param language: Required. Language of the text records. This is BCP-47 representation of a
     language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for
     English as default.
    :type language: str
    :param default_answer: Default Answer response when no good match is found in the
     Knowledgebase.
    :type default_answer: str
    :param multilingual_resource: Set to true to enable creating knowledgebases in different
     languages for the same resource.
    :type multilingual_resource: bool
    """

    _validation = {
        "project_name": {"required": True},
        "language": {"required": True},
    }

    _attribute_map = {
        "project_name": {"key": "projectName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "language": {"key": "language", "type": "str"},
        "default_answer": {"key": "defaultAnswer", "type": "str"},
        "multilingual_resource": {"key": "multilingualResource", "type": "bool"},
    }

    def __init__(
        self,
        *,
        project_name: str,
        language: str,
        description: Optional[str] = None,
        default_answer: Optional[str] = None,
        multilingual_resource: Optional[bool] = None,
        **kwargs
    ):
        super(CreateProjectParameters, self).__init__(**kwargs)
        self.project_name = project_name
        self.description = description
        self.language = language
        self.default_answer = default_answer
        self.multilingual_resource = multilingual_resource


class Error(msrest.serialization.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. One of a server-defined set of error codes. Possible values include:
     "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
     "TooManyRequests", "InternalServerError", "ServiceUnavailable".
    :type code: str or ~microsoft_cognitive_language_service.models.ErrorCode
    :param message: Required. A human-readable representation of the error.
    :type message: str
    :param target: The target of the error.
    :type target: str
    :param details: An array of details about specific errors that led to this reported error.
    :type details: list[~microsoft_cognitive_language_service.models.Error]
    :param innererror: An object containing more specific information than the current object about
     the error.
    :type innererror: ~microsoft_cognitive_language_service.models.InnerErrorModel
    """

    _validation = {
        "code": {"required": True},
        "message": {"required": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[Error]"},
        "innererror": {"key": "innererror", "type": "InnerErrorModel"},
    }

    def __init__(
        self,
        *,
        code: Union[str, "ErrorCode"],
        message: str,
        target: Optional[str] = None,
        details: Optional[List["Error"]] = None,
        innererror: Optional["InnerErrorModel"] = None,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    :param error: The error object.
    :type error: ~microsoft_cognitive_language_service.models.Error
    """

    _attribute_map = {
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, *, error: Optional["Error"] = None, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class Errors(msrest.serialization.Model):
    """Collection of Error types.

    :param errors:
    :type errors: list[~microsoft_cognitive_language_service.models.Error]
    """

    _attribute_map = {
        "errors": {"key": "errors", "type": "[Error]"},
    }

    def __init__(self, *, errors: Optional[List["Error"]] = None, **kwargs):
        super(Errors, self).__init__(**kwargs)
        self.errors = errors


class ExportJobParameters(msrest.serialization.Model):
    """Parameters required for export project job.

    :param export_asset_types: Collection of asset types.
    :type export_asset_types: list[str or ~microsoft_cognitive_language_service.models.AssetType]
    """

    _attribute_map = {
        "export_asset_types": {"key": "exportAssetTypes", "type": "[str]"},
    }

    def __init__(self, *, export_asset_types: Optional[List[Union[str, "AssetType"]]] = None, **kwargs):
        super(ExportJobParameters, self).__init__(**kwargs)
        self.export_asset_types = export_asset_types


class ExportJobResultUrl(msrest.serialization.Model):
    """URL to download the result of the Export Job.

    All required parameters must be populated in order to send to Azure.

    :param result_url: Required. URL to download the result of the Export Job.
    :type result_url: str
    """

    _validation = {
        "result_url": {"required": True},
    }

    _attribute_map = {
        "result_url": {"key": "resultUrl", "type": "str"},
    }

    def __init__(self, *, result_url: str, **kwargs):
        super(ExportJobResultUrl, self).__init__(**kwargs)
        self.result_url = result_url


class JobMetadata(msrest.serialization.Model):
    """Represents the job metadata.

    All required parameters must be populated in order to send to Azure.

    :param created_date_time: Required.
    :type created_date_time: ~datetime.datetime
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param job_id: Required.
    :type job_id: str
    :param last_updated_date_time: Required.
    :type last_updated_date_time: ~datetime.datetime
    :param status: Required. Job Status. Possible values include: "NotStarted", "Running",
     "Succeeded", "Failed", "Cancelled", "Cancelling", "PartiallyCompleted".
    :type status: str or ~microsoft_cognitive_language_service.models.JobStatus
    """

    _validation = {
        "created_date_time": {"required": True},
        "job_id": {"required": True},
        "last_updated_date_time": {"required": True},
        "status": {"required": True},
    }

    _attribute_map = {
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "expiration_date_time": {"key": "expirationDateTime", "type": "iso-8601"},
        "job_id": {"key": "jobId", "type": "str"},
        "last_updated_date_time": {"key": "lastUpdatedDateTime", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(JobMetadata, self).__init__(**kwargs)
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_updated_date_time = last_updated_date_time
        self.status = status


class JobState(JobMetadata, Errors):
    """Job state represents the job metadata and any errors.

    All required parameters must be populated in order to send to Azure.

    :param errors:
    :type errors: list[~microsoft_cognitive_language_service.models.Error]
    :param created_date_time: Required.
    :type created_date_time: ~datetime.datetime
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param job_id: Required.
    :type job_id: str
    :param last_updated_date_time: Required.
    :type last_updated_date_time: ~datetime.datetime
    :param status: Required. Job Status. Possible values include: "NotStarted", "Running",
     "Succeeded", "Failed", "Cancelled", "Cancelling", "PartiallyCompleted".
    :type status: str or ~microsoft_cognitive_language_service.models.JobStatus
    """

    _validation = {
        "created_date_time": {"required": True},
        "job_id": {"required": True},
        "last_updated_date_time": {"required": True},
        "status": {"required": True},
    }

    _attribute_map = {
        "errors": {"key": "errors", "type": "[Error]"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "expiration_date_time": {"key": "expirationDateTime", "type": "iso-8601"},
        "job_id": {"key": "jobId", "type": "str"},
        "last_updated_date_time": {"key": "lastUpdatedDateTime", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "JobStatus"],
        errors: Optional[List["Error"]] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(JobState, self).__init__(
            created_date_time=created_date_time,
            expiration_date_time=expiration_date_time,
            job_id=job_id,
            last_updated_date_time=last_updated_date_time,
            status=status,
            errors=errors,
            **kwargs
        )
        self.errors = errors
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_updated_date_time = last_updated_date_time
        self.status = status


class ExportJobState(JobState, ExportJobResultUrl):
    """Export job status, project metadata, and assets.

    All required parameters must be populated in order to send to Azure.

    :param result_url: Required. URL to download the result of the Export Job.
    :type result_url: str
    :param errors:
    :type errors: list[~microsoft_cognitive_language_service.models.Error]
    :param created_date_time: Required.
    :type created_date_time: ~datetime.datetime
    :param expiration_date_time:
    :type expiration_date_time: ~datetime.datetime
    :param job_id: Required.
    :type job_id: str
    :param last_updated_date_time: Required.
    :type last_updated_date_time: ~datetime.datetime
    :param status: Required. Job Status. Possible values include: "NotStarted", "Running",
     "Succeeded", "Failed", "Cancelled", "Cancelling", "PartiallyCompleted".
    :type status: str or ~microsoft_cognitive_language_service.models.JobStatus
    """

    _validation = {
        "result_url": {"required": True},
        "created_date_time": {"required": True},
        "job_id": {"required": True},
        "last_updated_date_time": {"required": True},
        "status": {"required": True},
    }

    _attribute_map = {
        "result_url": {"key": "resultUrl", "type": "str"},
        "errors": {"key": "errors", "type": "[Error]"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "expiration_date_time": {"key": "expirationDateTime", "type": "iso-8601"},
        "job_id": {"key": "jobId", "type": "str"},
        "last_updated_date_time": {"key": "lastUpdatedDateTime", "type": "iso-8601"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        result_url: str,
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "JobStatus"],
        errors: Optional[List["Error"]] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(ExportJobState, self).__init__(
            errors=errors,
            created_date_time=created_date_time,
            expiration_date_time=expiration_date_time,
            job_id=job_id,
            last_updated_date_time=last_updated_date_time,
            status=status,
            result_url=result_url,
            **kwargs
        )
        self.result_url = result_url
        self.errors = errors
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_updated_date_time = last_updated_date_time
        self.status = status


class ImportJobParameters(msrest.serialization.Model):
    """Project assets the needs to be imported.

    :param import_asset_types: Collection of asset types.
    :type import_asset_types: list[str or ~microsoft_cognitive_language_service.models.AssetType]
    :param project_metadata: Represents the project.
    :type project_metadata: ~microsoft_cognitive_language_service.models.ProjectMetadata
    :param assets: All assets for this project.
    :type assets: ~microsoft_cognitive_language_service.models.Assets
    """

    _attribute_map = {
        "import_asset_types": {"key": "importAssetTypes", "type": "[str]"},
        "project_metadata": {"key": "projectMetadata", "type": "ProjectMetadata"},
        "assets": {"key": "assets", "type": "Assets"},
    }

    def __init__(
        self,
        *,
        import_asset_types: Optional[List[Union[str, "AssetType"]]] = None,
        project_metadata: Optional["ProjectMetadata"] = None,
        assets: Optional["Assets"] = None,
        **kwargs
    ):
        super(ImportJobParameters, self).__init__(**kwargs)
        self.import_asset_types = import_asset_types
        self.project_metadata = project_metadata
        self.assets = assets


class InnerErrorModel(msrest.serialization.Model):
    """An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. One of a server-defined set of error codes. Possible values include:
     "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
     "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure".
    :type code: str or ~microsoft_cognitive_language_service.models.InnerErrorCode
    :param message: Required. Error message.
    :type message: str
    :param details: Error details.
    :type details: dict[str, str]
    :param target: Error target.
    :type target: str
    :param innererror: An object containing more specific information than the current object about
     the error.
    :type innererror: ~microsoft_cognitive_language_service.models.InnerErrorModel
    """

    _validation = {
        "code": {"required": True},
        "message": {"required": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "details": {"key": "details", "type": "{str}"},
        "target": {"key": "target", "type": "str"},
        "innererror": {"key": "innererror", "type": "InnerErrorModel"},
    }

    def __init__(
        self,
        *,
        code: Union[str, "InnerErrorCode"],
        message: str,
        details: Optional[Dict[str, str]] = None,
        target: Optional[str] = None,
        innererror: Optional["InnerErrorModel"] = None,
        **kwargs
    ):
        super(InnerErrorModel, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details
        self.target = target
        self.innererror = innererror


class LastUpdatedDateTimeParameter(msrest.serialization.Model):
    """Last updated date-time parameter.

    :param last_updated_date_time: Date-time when the QnA was last updated.
    :type last_updated_date_time: ~datetime.datetime
    """

    _attribute_map = {
        "last_updated_date_time": {"key": "lastUpdatedDateTime", "type": "iso-8601"},
    }

    def __init__(self, *, last_updated_date_time: Optional[datetime.datetime] = None, **kwargs):
        super(LastUpdatedDateTimeParameter, self).__init__(**kwargs)
        self.last_updated_date_time = last_updated_date_time


class ProjectMetadata(msrest.serialization.Model):
    """Represents the project.

    :param project_name: Name of the project.
    :type project_name: str
    :param description: Description of the project.
    :type description: str
    :param language: Language of the text records. This is BCP-47 representation of a language. For
     example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as
     default.
    :type language: str
    :param default_answer: Default Answer response when no good match is found in the
     Knowledgebase.
    :type default_answer: str
    :param multilingual_resource: Resource enabled for multiple languages across projects or not.
    :type multilingual_resource: bool
    :param created_date_time: Project creation date-time.
    :type created_date_time: ~datetime.datetime
    :param last_modified_date_time: Represents the project last modified date-time.
    :type last_modified_date_time: ~datetime.datetime
    :param last_deployed_date_time: Represents the project last deployment date-time.
    :type last_deployed_date_time: ~datetime.datetime
    """

    _attribute_map = {
        "project_name": {"key": "projectName", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "language": {"key": "language", "type": "str"},
        "default_answer": {"key": "defaultAnswer", "type": "str"},
        "multilingual_resource": {"key": "multilingualResource", "type": "bool"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "last_modified_date_time": {"key": "lastModifiedDateTime", "type": "iso-8601"},
        "last_deployed_date_time": {"key": "lastDeployedDateTime", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        project_name: Optional[str] = None,
        description: Optional[str] = None,
        language: Optional[str] = None,
        default_answer: Optional[str] = None,
        multilingual_resource: Optional[bool] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_deployed_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(ProjectMetadata, self).__init__(**kwargs)
        self.project_name = project_name
        self.description = description
        self.language = language
        self.default_answer = default_answer
        self.multilingual_resource = multilingual_resource
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time
        self.last_deployed_date_time = last_deployed_date_time


class ProjectsMetadata(msrest.serialization.Model):
    """Collection of projects metadata and global settings.

    :param projects:
    :type projects: list[~microsoft_cognitive_language_service.models.ProjectMetadata]
    """

    _attribute_map = {
        "projects": {"key": "projects", "type": "[ProjectMetadata]"},
    }

    def __init__(self, *, projects: Optional[List["ProjectMetadata"]] = None, **kwargs):
        super(ProjectsMetadata, self).__init__(**kwargs)
        self.projects = projects


class QnaDialog(msrest.serialization.Model):
    """Dialog associated with QnA Record.

    :param is_context_only: To mark if a prompt is relevant only with a previous question or not.
     If true, do not include this QnA as search result for queries without context; otherwise,
     ignores context and includes this QnA in search result.
    :type is_context_only: bool
    :param prompts: List of prompts associated with the answer.
    :type prompts: list[~microsoft_cognitive_language_service.models.QnaPrompt]
    """

    _validation = {
        "prompts": {"max_items": 20, "min_items": 0},
    }

    _attribute_map = {
        "is_context_only": {"key": "isContextOnly", "type": "bool"},
        "prompts": {"key": "prompts", "type": "[QnaPrompt]"},
    }

    def __init__(
        self, *, is_context_only: Optional[bool] = None, prompts: Optional[List["QnaPrompt"]] = None, **kwargs
    ):
        super(QnaDialog, self).__init__(**kwargs)
        self.is_context_only = is_context_only
        self.prompts = prompts


class QnaPrompt(msrest.serialization.Model):
    """Prompt for an answer.

    :param display_order: Index of the prompt. It is used for ordering of the prompts.
    :type display_order: int
    :param qna_id: ID of the QnA corresponding to the prompt.
    :type qna_id: int
    :param qna: QnA record. Either QnAId or QnA record needs to be present in a Prompt.
    :type qna: ~microsoft_cognitive_language_service.models.QnaRecord
    :param display_text: Text displayed to represent a follow up question prompt.
    :type display_text: str
    """

    _validation = {
        "display_text": {"max_length": 200, "min_length": 0},
    }

    _attribute_map = {
        "display_order": {"key": "displayOrder", "type": "int"},
        "qna_id": {"key": "qnaId", "type": "int"},
        "qna": {"key": "qna", "type": "QnaRecord"},
        "display_text": {"key": "displayText", "type": "str"},
    }

    def __init__(
        self,
        *,
        display_order: Optional[int] = None,
        qna_id: Optional[int] = None,
        qna: Optional["QnaRecord"] = None,
        display_text: Optional[str] = None,
        **kwargs
    ):
        super(QnaPrompt, self).__init__(**kwargs)
        self.display_order = display_order
        self.qna_id = qna_id
        self.qna = qna
        self.display_text = display_text


class QnaRecord(msrest.serialization.Model):
    """QnA record.

    :param id: Unique ID for the QnA.
    :type id: int
    :param answer: Answer text.
    :type answer: str
    :param source: Source from which QnA was indexed e.g.
     https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
    :type source: str
    :param questions: List of questions associated with the answer.
    :type questions: list[str]
    :param metadata: Metadata associated with the answer, useful to categorize or filter question
     answers.
    :type metadata: dict[str, str]
    :param dialog: Context of a QnA.
    :type dialog: ~microsoft_cognitive_language_service.models.QnaDialog
    """

    _validation = {
        "answer": {"max_length": 25000, "min_length": 1},
        "source": {"max_length": 300, "min_length": 0},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "answer": {"key": "answer", "type": "str"},
        "source": {"key": "source", "type": "str"},
        "questions": {"key": "questions", "type": "[str]"},
        "metadata": {"key": "metadata", "type": "{str}"},
        "dialog": {"key": "dialog", "type": "QnaDialog"},
    }

    def __init__(
        self,
        *,
        id: Optional[int] = None,
        answer: Optional[str] = None,
        source: Optional[str] = None,
        questions: Optional[List[str]] = None,
        metadata: Optional[Dict[str, str]] = None,
        dialog: Optional["QnaDialog"] = None,
        **kwargs
    ):
        super(QnaRecord, self).__init__(**kwargs)
        self.id = id
        self.answer = answer
        self.source = source
        self.questions = questions
        self.metadata = metadata
        self.dialog = dialog


class RetrieveQnaRecord(QnaRecord, LastUpdatedDateTimeParameter):
    """QnA Record with last updated date-time.

    :param last_updated_date_time: Date-time when the QnA was last updated.
    :type last_updated_date_time: ~datetime.datetime
    :param id: Unique ID for the QnA.
    :type id: int
    :param answer: Answer text.
    :type answer: str
    :param source: Source from which QnA was indexed e.g.
     https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
    :type source: str
    :param questions: List of questions associated with the answer.
    :type questions: list[str]
    :param metadata: Metadata associated with the answer, useful to categorize or filter question
     answers.
    :type metadata: dict[str, str]
    :param dialog: Context of a QnA.
    :type dialog: ~microsoft_cognitive_language_service.models.QnaDialog
    """

    _validation = {
        "answer": {"max_length": 25000, "min_length": 1},
        "source": {"max_length": 300, "min_length": 0},
    }

    _attribute_map = {
        "last_updated_date_time": {"key": "lastUpdatedDateTime", "type": "iso-8601"},
        "id": {"key": "id", "type": "int"},
        "answer": {"key": "answer", "type": "str"},
        "source": {"key": "source", "type": "str"},
        "questions": {"key": "questions", "type": "[str]"},
        "metadata": {"key": "metadata", "type": "{str}"},
        "dialog": {"key": "dialog", "type": "QnaDialog"},
    }

    def __init__(
        self,
        *,
        last_updated_date_time: Optional[datetime.datetime] = None,
        id: Optional[int] = None,
        answer: Optional[str] = None,
        source: Optional[str] = None,
        questions: Optional[List[str]] = None,
        metadata: Optional[Dict[str, str]] = None,
        dialog: Optional["QnaDialog"] = None,
        **kwargs
    ):
        super(RetrieveQnaRecord, self).__init__(
            id=id,
            answer=answer,
            source=source,
            questions=questions,
            metadata=metadata,
            dialog=dialog,
            last_updated_date_time=last_updated_date_time,
            **kwargs
        )
        self.last_updated_date_time = last_updated_date_time
        self.id = id
        self.answer = answer
        self.source = source
        self.questions = questions
        self.metadata = metadata
        self.dialog = dialog


class WordAlterations(msrest.serialization.Model):
    """Collection of word alterations.

    All required parameters must be populated in order to send to Azure.

    :param alterations: Required. Collection of word alterations.
    :type alterations: list[str]
    """

    _validation = {
        "alterations": {"required": True},
    }

    _attribute_map = {
        "alterations": {"key": "alterations", "type": "[str]"},
    }

    def __init__(self, *, alterations: List[str], **kwargs):
        super(WordAlterations, self).__init__(**kwargs)
        self.alterations = alterations
