# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import TextAnalysisClientTestBase, TextAnalysisPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestTextAnalysis(TextAnalysisClientTestBase):
    @TextAnalysisPreparer()
    @recorded_by_proxy
    def test_analyze_text(self, textanalysis_endpoint):
        client = self.create_client(endpoint=textanalysis_endpoint)
        response = client.analyze_text(
            body={
                "kind": "EntityLinking",
                "analysisInput": {"documents": [{"id": "str", "text": "str", "language": "str"}]},
                "parameters": {"loggingOptOut": bool, "modelVersion": "str", "stringIndexType": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @TextAnalysisPreparer()
    @recorded_by_proxy
    def test_analyze_text_job_status(self, textanalysis_endpoint):
        client = self.create_client(endpoint=textanalysis_endpoint)
        response = client.analyze_text_job_status(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @TextAnalysisPreparer()
    @recorded_by_proxy
    def test_begin_analyze_text_submit_job(self, textanalysis_endpoint):
        client = self.create_client(endpoint=textanalysis_endpoint)
        response = client.begin_analyze_text_submit_job(
            body={
                "analysisInput": {"documents": [{"id": "str", "text": "str", "language": "str"}]},
                "tasks": ["analyze_text_operation_action"],
                "cancelAfter": 0.0,
                "defaultLanguage": "str",
                "displayName": "str",
            },
            text_input={"documents": [{"id": "str", "text": "str", "language": "str"}]},
            actions=["analyze_text_operation_action"],
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @TextAnalysisPreparer()
    @recorded_by_proxy
    def test_begin_analyze_text_cancel_job(self, textanalysis_endpoint):
        client = self.create_client(endpoint=textanalysis_endpoint)
        response = client.begin_analyze_text_cancel_job(
            job_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
