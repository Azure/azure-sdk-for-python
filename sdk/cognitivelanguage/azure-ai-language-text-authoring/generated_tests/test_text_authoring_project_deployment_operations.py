# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import TextAuthoringProjectClientTestBase, TextAuthoringProjectPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestTextAuthoringProjectDeploymentOperations(TextAuthoringProjectClientTestBase):
    @TextAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_deployment_get_deployment(self, textauthoringproject_endpoint):
        client = self.create_client(endpoint=textauthoringproject_endpoint)
        response = client.deployment.get_deployment(
            project_name="str",
            deployment_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @TextAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_deployment_begin_deploy_project(self, textauthoringproject_endpoint):
        client = self.create_client(endpoint=textauthoringproject_endpoint)
        response = client.deployment.begin_deploy_project(
            project_name="str",
            deployment_name="str",
            body={
                "trainedModelLabel": "str",
                "assignedResources": [
                    {
                        "region": "str",
                        "resourceId": "str",
                        "assignedAoaiResource": {"deploymentName": "str", "kind": "AzureOpenAI", "resourceId": "str"},
                    }
                ],
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @TextAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_deployment_begin_delete_deployment(self, textauthoringproject_endpoint):
        client = self.create_client(endpoint=textauthoringproject_endpoint)
        response = client.deployment.begin_delete_deployment(
            project_name="str",
            deployment_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @TextAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_deployment_begin_delete_deployment_from_resources(self, textauthoringproject_endpoint):
        client = self.create_client(endpoint=textauthoringproject_endpoint)
        response = client.deployment.begin_delete_deployment_from_resources(
            project_name="str",
            deployment_name="str",
            body={"assignedResourceIds": ["str"]},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
