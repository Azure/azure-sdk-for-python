# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import QuestionAnsweringClientTestBase, QuestionAnsweringPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestQuestionAnswering(QuestionAnsweringClientTestBase):
    @QuestionAnsweringPreparer()
    @recorded_by_proxy
    def test_get_answers(self, questionanswering_endpoint):
        client = self.create_client(endpoint=questionanswering_endpoint)
        response = client.get_answers(
            knowledge_base_query_options={
                "answerSpanRequest": {"enable": bool, "confidenceScoreThreshold": 0.0, "topAnswersWithSpan": 0},
                "confidenceScoreThreshold": 0.0,
                "context": {"previousQnaId": 0, "previousUserQuery": "str"},
                "filters": {
                    "logicalOperation": "str",
                    "metadataFilter": {"logicalOperation": "str", "metadata": [{"key": "str", "value": "str"}]},
                    "sourceFilter": ["str"],
                },
                "includeUnstructuredSources": bool,
                "qnaId": 0,
                "queryPreferences": {"matchingPolicy": "matching_policy", "scorer": "str"},
                "question": "str",
                "rankerType": "str",
                "top": 0,
                "userId": "str",
            },
            project_name="str",
            deployment_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @QuestionAnsweringPreparer()
    @recorded_by_proxy
    def test_get_answers_from_text(self, questionanswering_endpoint):
        client = self.create_client(endpoint=questionanswering_endpoint)
        response = client.get_answers_from_text(
            text_query_options={
                "question": "str",
                "records": [{"id": "str", "text": "str"}],
                "language": "str",
                "stringIndexType": "str",
            },
        )

        # please add some check logic here by yourself
        # ...
