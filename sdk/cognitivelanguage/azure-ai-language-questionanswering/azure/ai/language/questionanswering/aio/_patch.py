# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------
"""Customize generated code here.

Follow our quickstart for examples: https://aka.ms/azsdk/python/dpcodegen/python/customize
"""


from typing import Any
import warnings

__all__: list[str] = []  # Add all objects you want publicly available to users at this package level


def patch_sdk():
    """Attach small (deprecated) async convenience methods onto the generated async client.

    These wrappers existed in earlier versions so user code and samples could call
    ``await client.get_answers(...)`` or ``await client.get_answers_from_text(...)`` directly.
    They are now deprecated in favor of the operations group:
    ``client.question_answering.get_answers`` and
    ``client.question_answering.get_answers_from_text``.

    The wrappers only emit a ``DeprecationWarning`` then await and return the
    underlying coroutine result without additional validation or transformation.

    Migration:
      - Replace ``await client.get_answers(... )`` with
        ``await client.question_answering.get_answers(... )``
      - Replace ``await client.get_answers_from_text(... )`` with
        ``await client.question_answering.get_answers_from_text(... )``

    This function is invoked by the autogenerated ``aio/_patch.py`` hook during
    package import.
    """
    from ._client import QuestionAnsweringClient  # local import to avoid circular

    async def get_answers(self: "QuestionAnsweringClient", *args: Any, **kwargs: Any):  # type: ignore
        """Async deprecated wrapper for :meth:`QuestionAnsweringOperations.get_answers`.

        Forwards all arguments to ``self.question_answering.get_answers`` and returns
        the awaited result.
        Additional keyword arguments are forwarded unchanged to the underlying operation.

        :param args: Positional arguments forwarded unchanged to the underlying ``get_answers`` operation.
        :type args: Any
        :returns: Result of the underlying async operation (typically ``AnswersResult``).
        :rtype: Any
        :deprecated: Use ``client.question_answering.get_answers`` instead.
        """
        warnings.warn(
            (
                "QuestionAnsweringClient.get_answers (async) is deprecated; use "
                "client.question_answering.get_answers instead."
            ),
            DeprecationWarning,
            stacklevel=2,
        )
        return await self.question_answering.get_answers(*args, **kwargs)

    async def get_answers_from_text(self: "QuestionAnsweringClient", *args: Any, **kwargs: Any):  # type: ignore
        """Async deprecated wrapper for :meth:`QuestionAnsweringOperations.get_answers_from_text`.

        Forwards all arguments to ``self.question_answering.get_answers_from_text`` and
        returns the awaited result.
        Additional keyword arguments are forwarded unchanged to the underlying operation.

        :param args: Positional arguments forwarded unchanged to the underlying ``get_answers_from_text`` operation.
        :type args: Any
        :returns: Result of the underlying async operation (typically ``AnswersFromTextResult``).
        :rtype: Any
        :deprecated: Use ``client.question_answering.get_answers_from_text`` instead.
        """
        warnings.warn(
            (
                "QuestionAnsweringClient.get_answers_from_text (async) is deprecated; use "
                "client.question_answering.get_answers_from_text instead."
            ),
            DeprecationWarning,
            stacklevel=2,
        )
        return await self.question_answering.get_answers_from_text(*args, **kwargs)

    if not hasattr(QuestionAnsweringClient, "get_answers"):
        setattr(QuestionAnsweringClient, "get_answers", get_answers)
    if not hasattr(QuestionAnsweringClient, "get_answers_from_text"):
        setattr(QuestionAnsweringClient, "get_answers_from_text", get_answers_from_text)

    if "get_answers" not in __all__:
        # Export deprecated convenience names for backward compatibility
        __all__.extend(["get_answers", "get_answers_from_text"])  # type: ignore
