# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional, Union

_SERIALIZER = Serializer()


def build_list_projects_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Gets all projects for a user.

    Gets all projects for a user.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "projects": [
                    {
                        "createdDateTime": "datetime (optional)",
                        "defaultAnswer": "str (optional)",
                        "description": "str (optional)",
                        "language": "str (optional)",
                        "lastDeployedDateTime": "datetime (optional)",
                        "lastModifiedDateTime": "datetime (optional)",
                        "multilingualResource": "bool (optional)",
                        "projectName": "str (optional)"
                    }
                ]
            }
    """


    api_version = "2021-05-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/query-knowledgebases/projects')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_project_details_request(
    project_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get the requested project metadata.

    Get the requested project metadata.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param project_name: The name of the project to use.
    :type project_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "createdDateTime": "datetime (optional)",
                "defaultAnswer": "str (optional)",
                "description": "str (optional)",
                "language": "str (optional)",
                "lastDeployedDateTime": "datetime (optional)",
                "lastModifiedDateTime": "datetime (optional)",
                "multilingualResource": "bool (optional)",
                "projectName": "str (optional)"
            }
    """


    api_version = "2021-05-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/query-knowledgebases/projects/{projectName}')
    path_format_arguments = {
        'projectName': _SERIALIZER.url("project_name", project_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_project_request(
    project_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Create or update a project.

    Create or update a project.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param project_name: The name of the project to use.
    :type project_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Parameters needed to create the project.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Parameters needed to create the project.
    :paramtype content: Any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "defaultAnswer": "str (optional)",
                "description": "str (optional)",
                "language": "str",
                "multilingualResource": "bool (optional)",
                "projectName": "str"
            }

            # response body for status code(s): 200, 201
            response.json() == {
                "createdDateTime": "datetime (optional)",
                "defaultAnswer": "str (optional)",
                "description": "str (optional)",
                "language": "str (optional)",
                "lastDeployedDateTime": "datetime (optional)",
                "lastModifiedDateTime": "datetime (optional)",
                "multilingualResource": "bool (optional)",
                "projectName": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-05-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/query-knowledgebases/projects/{projectName}')
    path_format_arguments = {
        'projectName': _SERIALIZER.url("project_name", project_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_delete_project_request(
    project_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Delete the project.

    Delete the project.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param project_name: The name of the project to use.
    :type project_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """


    api_version = "2021-05-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/query-knowledgebases/projects/{projectName}')
    path_format_arguments = {
        'projectName': _SERIALIZER.url("project_name", project_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_export_project_request(
    project_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Export project metadata and assets.

    Export project metadata and assets.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param project_name: The name of the project to use.
    :type project_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Parameters required for export project job.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Parameters required for export project job.
    :paramtype content: Any
    :keyword format: Knowledgebase Import or Export format.
    :paramtype format: str or ~azure.ai.language.questionanswering.models.Format
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "exportAssetTypes": [
                    "str (optional)"
                ]
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    format = kwargs.pop('format', "json")  # type: Optional[Union[str, "_models.Format"]]

    api_version = "2021-05-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/query-knowledgebases/projects/{projectName}/:export')
    path_format_arguments = {
        'projectName': _SERIALIZER.url("project_name", project_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')
    if format is not None:
        query_parameters['format'] = _SERIALIZER.query("format", format, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_import_project_request(
    project_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Import project assets.

    Import project assets.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param project_name: The name of the project to use.
    :type project_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Project assets the needs to be imported.
    :paramtype json: Any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Project assets the needs to be imported.
    :paramtype content: Any
    :keyword format: Knowledgebase Import or Export format.
    :paramtype format: str or ~azure.ai.language.questionanswering.models.Format
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "assets": {
                    "qnas": [
                        {}
                    ],
                    "synonyms": [
                        {
                            "alterations": [
                                "str"
                            ]
                        }
                    ]
                },
                "importAssetTypes": [
                    "str (optional)"
                ],
                "projectMetadata": {
                    "createdDateTime": "datetime (optional)",
                    "defaultAnswer": "str (optional)",
                    "description": "str (optional)",
                    "language": "str (optional)",
                    "lastDeployedDateTime": "datetime (optional)",
                    "lastModifiedDateTime": "datetime (optional)",
                    "multilingualResource": "bool (optional)",
                    "projectName": "str (optional)"
                }
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    format = kwargs.pop('format', "json")  # type: Optional[Union[str, "_models.Format"]]

    api_version = "2021-05-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/query-knowledgebases/projects/{projectName}/:import')
    path_format_arguments = {
        'projectName': _SERIALIZER.url("project_name", project_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')
    if format is not None:
        query_parameters['format'] = _SERIALIZER.query("format", format, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_deploy_project_request(
    project_name,  # type: str
    deployment_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Deploy project to production.

    Deploy project to production.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your
    code flow.

    :param project_name: The name of the project to use.
    :type project_name: str
    :param deployment_name: The name of the specific deployment of the project to use.
    :type deployment_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """


    api_version = "2021-05-01-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/query-knowledgebases/projects/{projectName}/deployments/{deploymentName}')
    path_format_arguments = {
        'projectName': _SERIALIZER.url("project_name", project_name, 'str'),
        'deploymentName': _SERIALIZER.url("deployment_name", deployment_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

