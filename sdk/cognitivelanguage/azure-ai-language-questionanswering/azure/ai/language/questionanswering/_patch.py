# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------
"""Customize generated code here.

Follow our quickstart for examples: https://aka.ms/azsdk/python/dpcodegen/python/customize
"""


from typing import Any
import warnings
# from . import models  # type: ignore

__all__: list[str] = []  # Add all objects you want publicly available to users at this package level


def patch_sdk():
    """Attach small (deprecated) convenience methods onto the generated sync client.

    These wrappers existed in earlier versions so user code and samples could call
    ``client.get_answers(...)`` or ``client.get_answers_from_text(...)`` directly.
    They are now deprecated in favor of the operations group:
    ``client.question_answering.get_answers`` and
    ``client.question_answering.get_answers_from_text``.

    The wrappers perform no additional validation or transformation; they only
    emit a ``DeprecationWarning`` and forward all arguments verbatim.

    Migration:
      - Replace ``client.get_answers(... )`` with
        ``client.question_answering.get_answers(... )``
      - Replace ``client.get_answers_from_text(... )`` with
        ``client.question_answering.get_answers_from_text(... )``

    This function is invoked by the autogenerated ``patch.py`` hook during
    package import.
    """
    from ._client import QuestionAnsweringClient  # local import to avoid circular

    def get_answers(self: "QuestionAnsweringClient", *args: Any, **kwargs: Any):  # type: ignore
        """Deprecated wrapper for :meth:`QuestionAnsweringOperations.get_answers`.

        All positional / keyword arguments are forwarded to
        ``self.question_answering.get_answers`` unchanged.
        Additional keyword arguments (``**kwargs``) are forwarded unchanged to the
        underlying operation.

        :param args: Positional arguments forwarded unchanged to the underlying ``get_answers`` operation.
        :type args: Any
        :returns: Whatever the underlying operation returns (typically ``AnswersResult``).
        :rtype: Any
        :deprecated: Use ``client.question_answering.get_answers`` instead.
        """
        warnings.warn(
            (
                "QuestionAnsweringClient.get_answers is deprecated; use "
                "client.question_answering.get_answers instead."
            ),
            DeprecationWarning,
            stacklevel=2,
        )
        return self.question_answering.get_answers(*args, **kwargs)

    def get_answers_from_text(self: "QuestionAnsweringClient", *args: Any, **kwargs: Any):  # type: ignore
        """Deprecated wrapper for :meth:`QuestionAnsweringOperations.get_answers_from_text`.

        All positional / keyword arguments are forwarded to
        ``self.question_answering.get_answers_from_text`` unchanged.
        Additional keyword arguments (``**kwargs``) are forwarded unchanged to the
        underlying operation.

        :param args: Positional arguments forwarded unchanged to the underlying ``get_answers_from_text`` operation.
        :type args: Any
        :returns: Whatever the underlying operation returns (typically ``AnswersFromTextResult``).
        :rtype: Any
        :deprecated: Use ``client.question_answering.get_answers_from_text`` instead.
        """
        warnings.warn(
            (
                "QuestionAnsweringClient.get_answers_from_text is deprecated; use "
                "client.question_answering.get_answers_from_text instead."
            ),
            DeprecationWarning,
            stacklevel=2,
        )
        return self.question_answering.get_answers_from_text(*args, **kwargs)

    if not hasattr(QuestionAnsweringClient, "get_answers"):
        setattr(QuestionAnsweringClient, "get_answers", get_answers)
    if not hasattr(QuestionAnsweringClient, "get_answers_from_text"):
        setattr(QuestionAnsweringClient, "get_answers_from_text", get_answers_from_text)

    # export for * import if desired
    if "get_answers" not in __all__:
        # Export deprecated convenience names for backward compatibility
        __all__.extend(["get_answers", "get_answers_from_text"])  # type: ignore
