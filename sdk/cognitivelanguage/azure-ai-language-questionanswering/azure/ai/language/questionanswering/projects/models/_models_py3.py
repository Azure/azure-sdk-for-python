# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._question_answering_projects_client_enums import *


class ActiveLearningFeedback(msrest.serialization.Model):
    """Feedback for Active Learning.

    :ivar records: A list of Feedback Records for Active Learning.
    :vartype records: list[~azure.ai.language.questionanswering.projects.models.FeedbackRecord]
    """

    _attribute_map = {
        'records': {'key': 'records', 'type': '[FeedbackRecord]'},
    }

    def __init__(
        self,
        *,
        records: Optional[List["FeedbackRecord"]] = None,
        **kwargs
    ):
        """
        :keyword records: A list of Feedback Records for Active Learning.
        :paramtype records: list[~azure.ai.language.questionanswering.projects.models.FeedbackRecord]
        """
        super(ActiveLearningFeedback, self).__init__(**kwargs)
        self.records = records


class Assets(msrest.serialization.Model):
    """All assets for this project.

    :ivar synonyms: Collection of synonyms.
    :vartype synonyms: list[~azure.ai.language.questionanswering.projects.models.WordAlterations]
    :ivar qnas: List of QnA records to import.
    :vartype qnas: list[~azure.ai.language.questionanswering.projects.models.ImportQnaRecord]
    """

    _attribute_map = {
        'synonyms': {'key': 'synonyms', 'type': '[WordAlterations]'},
        'qnas': {'key': 'qnas', 'type': '[ImportQnaRecord]'},
    }

    def __init__(
        self,
        *,
        synonyms: Optional[List["WordAlterations"]] = None,
        qnas: Optional[List["ImportQnaRecord"]] = None,
        **kwargs
    ):
        """
        :keyword synonyms: Collection of synonyms.
        :paramtype synonyms: list[~azure.ai.language.questionanswering.projects.models.WordAlterations]
        :keyword qnas: List of QnA records to import.
        :paramtype qnas: list[~azure.ai.language.questionanswering.projects.models.ImportQnaRecord]
        """
        super(Assets, self).__init__(**kwargs)
        self.synonyms = synonyms
        self.qnas = qnas


class CreateProjectOptions(msrest.serialization.Model):
    """Parameters needed to create the project.

    All required parameters must be populated in order to send to Azure.

    :ivar description: Description of the project.
    :vartype description: str
    :ivar language: Required. Language of the text records. This is BCP-47 representation of a
     language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for
     English as default.
    :vartype language: str
    :ivar multilingual_resource: Set to true to enable creating knowledgebases in different
     languages for the same resource.
    :vartype multilingual_resource: bool
    :ivar settings: Configurable settings of the Project.
    :vartype settings: ~azure.ai.language.questionanswering.projects.models.ProjectSettings
    """

    _validation = {
        'language': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'multilingual_resource': {'key': 'multilingualResource', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': 'ProjectSettings'},
    }

    def __init__(
        self,
        *,
        language: str,
        description: Optional[str] = None,
        multilingual_resource: Optional[bool] = None,
        settings: Optional["ProjectSettings"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the project.
        :paramtype description: str
        :keyword language: Required. Language of the text records. This is BCP-47 representation of a
         language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for
         English as default.
        :paramtype language: str
        :keyword multilingual_resource: Set to true to enable creating knowledgebases in different
         languages for the same resource.
        :paramtype multilingual_resource: bool
        :keyword settings: Configurable settings of the Project.
        :paramtype settings: ~azure.ai.language.questionanswering.projects.models.ProjectSettings
        """
        super(CreateProjectOptions, self).__init__(**kwargs)
        self.description = description
        self.language = language
        self.multilingual_resource = multilingual_resource
        self.settings = settings


class Error(msrest.serialization.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. One of a server-defined set of error codes. Possible values include:
     "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
     "ProjectNotFound", "OperationNotFound", "AzureCognitiveSearchNotFound",
     "AzureCognitiveSearchIndexNotFound", "TooManyRequests", "AzureCognitiveSearchThrottling",
     "AzureCognitiveSearchIndexLimitReached", "InternalServerError", "ServiceUnavailable".
    :vartype code: str or ~azure.ai.language.questionanswering.projects.models.ErrorCode
    :ivar message: Required. A human-readable representation of the error.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.ai.language.questionanswering.projects.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.questionanswering.projects.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerErrorModel'},
    }

    def __init__(
        self,
        *,
        code: Union[str, "ErrorCode"],
        message: str,
        target: Optional[str] = None,
        details: Optional[List["Error"]] = None,
        innererror: Optional["InnerErrorModel"] = None,
        **kwargs
    ):
        """
        :keyword code: Required. One of a server-defined set of error codes. Possible values include:
         "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
         "ProjectNotFound", "OperationNotFound", "AzureCognitiveSearchNotFound",
         "AzureCognitiveSearchIndexNotFound", "TooManyRequests", "AzureCognitiveSearchThrottling",
         "AzureCognitiveSearchIndexLimitReached", "InternalServerError", "ServiceUnavailable".
        :paramtype code: str or ~azure.ai.language.questionanswering.projects.models.ErrorCode
        :keyword message: Required. A human-readable representation of the error.
        :paramtype message: str
        :keyword target: The target of the error.
        :paramtype target: str
        :keyword details: An array of details about specific errors that led to this reported error.
        :paramtype details: list[~azure.ai.language.questionanswering.projects.models.Error]
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.ai.language.questionanswering.projects.models.InnerErrorModel
        """
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.ai.language.questionanswering.projects.models.Error
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        error: Optional["Error"] = None,
        **kwargs
    ):
        """
        :keyword error: The error object.
        :paramtype error: ~azure.ai.language.questionanswering.projects.models.Error
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class Errors(msrest.serialization.Model):
    """Collection of Error types.

    :ivar errors:
    :vartype errors: list[~azure.ai.language.questionanswering.projects.models.Error]
    """

    _attribute_map = {
        'errors': {'key': 'errors', 'type': '[Error]'},
    }

    def __init__(
        self,
        *,
        errors: Optional[List["Error"]] = None,
        **kwargs
    ):
        """
        :keyword errors:
        :paramtype errors: list[~azure.ai.language.questionanswering.projects.models.Error]
        """
        super(Errors, self).__init__(**kwargs)
        self.errors = errors


class ExportJobResultUrl(msrest.serialization.Model):
    """URL to download the result of the Export Job.

    All required parameters must be populated in order to send to Azure.

    :ivar result_url: Required. URL to download the result of the Export Job.
    :vartype result_url: str
    """

    _validation = {
        'result_url': {'required': True},
    }

    _attribute_map = {
        'result_url': {'key': 'resultUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        result_url: str,
        **kwargs
    ):
        """
        :keyword result_url: Required. URL to download the result of the Export Job.
        :paramtype result_url: str
        """
        super(ExportJobResultUrl, self).__init__(**kwargs)
        self.result_url = result_url


class JobMetadata(msrest.serialization.Model):
    """Represents the job metadata.

    All required parameters must be populated in order to send to Azure.

    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar expiration_date_time:
    :vartype expiration_date_time: ~datetime.datetime
    :ivar job_id: Required.
    :vartype job_id: str
    :ivar last_updated_date_time: Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar status: Required. Job Status. Possible values include: "notStarted", "running",
     "succeeded", "failed", "cancelled", "cancelling", "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.questionanswering.projects.models.JobStatus
    """

    _validation = {
        'created_date_time': {'required': True},
        'job_id': {'required': True},
        'last_updated_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword expiration_date_time:
        :paramtype expiration_date_time: ~datetime.datetime
        :keyword job_id: Required.
        :paramtype job_id: str
        :keyword last_updated_date_time: Required.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword status: Required. Job Status. Possible values include: "notStarted", "running",
         "succeeded", "failed", "cancelled", "cancelling", "partiallyCompleted".
        :paramtype status: str or ~azure.ai.language.questionanswering.projects.models.JobStatus
        """
        super(JobMetadata, self).__init__(**kwargs)
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_updated_date_time = last_updated_date_time
        self.status = status


class JobState(JobMetadata, Errors):
    """Job state represents the job metadata and any errors.

    All required parameters must be populated in order to send to Azure.

    :ivar errors:
    :vartype errors: list[~azure.ai.language.questionanswering.projects.models.Error]
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar expiration_date_time:
    :vartype expiration_date_time: ~datetime.datetime
    :ivar job_id: Required.
    :vartype job_id: str
    :ivar last_updated_date_time: Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar status: Required. Job Status. Possible values include: "notStarted", "running",
     "succeeded", "failed", "cancelled", "cancelling", "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.questionanswering.projects.models.JobStatus
    """

    _validation = {
        'created_date_time': {'required': True},
        'job_id': {'required': True},
        'last_updated_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'errors': {'key': 'errors', 'type': '[Error]'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "JobStatus"],
        errors: Optional[List["Error"]] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword errors:
        :paramtype errors: list[~azure.ai.language.questionanswering.projects.models.Error]
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword expiration_date_time:
        :paramtype expiration_date_time: ~datetime.datetime
        :keyword job_id: Required.
        :paramtype job_id: str
        :keyword last_updated_date_time: Required.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword status: Required. Job Status. Possible values include: "notStarted", "running",
         "succeeded", "failed", "cancelled", "cancelling", "partiallyCompleted".
        :paramtype status: str or ~azure.ai.language.questionanswering.projects.models.JobStatus
        """
        super(JobState, self).__init__(created_date_time=created_date_time, expiration_date_time=expiration_date_time, job_id=job_id, last_updated_date_time=last_updated_date_time, status=status, errors=errors, **kwargs)
        self.errors = errors
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_updated_date_time = last_updated_date_time
        self.status = status


class ExportJobState(JobState, ExportJobResultUrl):
    """Export job status, project metadata, and assets.

    All required parameters must be populated in order to send to Azure.

    :ivar result_url: Required. URL to download the result of the Export Job.
    :vartype result_url: str
    :ivar errors:
    :vartype errors: list[~azure.ai.language.questionanswering.projects.models.Error]
    :ivar created_date_time: Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar expiration_date_time:
    :vartype expiration_date_time: ~datetime.datetime
    :ivar job_id: Required.
    :vartype job_id: str
    :ivar last_updated_date_time: Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar status: Required. Job Status. Possible values include: "notStarted", "running",
     "succeeded", "failed", "cancelled", "cancelling", "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.questionanswering.projects.models.JobStatus
    """

    _validation = {
        'result_url': {'required': True},
        'created_date_time': {'required': True},
        'job_id': {'required': True},
        'last_updated_date_time': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'result_url': {'key': 'resultUrl', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[Error]'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        result_url: str,
        created_date_time: datetime.datetime,
        job_id: str,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "JobStatus"],
        errors: Optional[List["Error"]] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword result_url: Required. URL to download the result of the Export Job.
        :paramtype result_url: str
        :keyword errors:
        :paramtype errors: list[~azure.ai.language.questionanswering.projects.models.Error]
        :keyword created_date_time: Required.
        :paramtype created_date_time: ~datetime.datetime
        :keyword expiration_date_time:
        :paramtype expiration_date_time: ~datetime.datetime
        :keyword job_id: Required.
        :paramtype job_id: str
        :keyword last_updated_date_time: Required.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword status: Required. Job Status. Possible values include: "notStarted", "running",
         "succeeded", "failed", "cancelled", "cancelling", "partiallyCompleted".
        :paramtype status: str or ~azure.ai.language.questionanswering.projects.models.JobStatus
        """
        super(ExportJobState, self).__init__(errors=errors, created_date_time=created_date_time, expiration_date_time=expiration_date_time, job_id=job_id, last_updated_date_time=last_updated_date_time, status=status, result_url=result_url, **kwargs)
        self.result_url = result_url
        self.errors = errors
        self.created_date_time = created_date_time
        self.expiration_date_time = expiration_date_time
        self.job_id = job_id
        self.last_updated_date_time = last_updated_date_time
        self.status = status


class FeedbackRecord(msrest.serialization.Model):
    """Feedback Record for Active Learning.

    :ivar user_id: Unique identifier of the user.
    :vartype user_id: str
    :ivar user_question: User suggested question for the QnA.
    :vartype user_question: str
    :ivar qna_id: Unique ID of the QnA.
    :vartype qna_id: int
    """

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'user_question': {'key': 'userQuestion', 'type': 'str'},
        'qna_id': {'key': 'qnaId', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        user_id: Optional[str] = None,
        user_question: Optional[str] = None,
        qna_id: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword user_id: Unique identifier of the user.
        :paramtype user_id: str
        :keyword user_question: User suggested question for the QnA.
        :paramtype user_question: str
        :keyword qna_id: Unique ID of the QnA.
        :paramtype qna_id: int
        """
        super(FeedbackRecord, self).__init__(**kwargs)
        self.user_id = user_id
        self.user_question = user_question
        self.qna_id = qna_id


class ImportJobOptions(msrest.serialization.Model):
    """Project assets the needs to be imported.

    :ivar metadata: Parameters needed to create the project.
    :vartype metadata: ~azure.ai.language.questionanswering.projects.models.CreateProjectOptions
    :ivar assets: All assets for this project.
    :vartype assets: ~azure.ai.language.questionanswering.projects.models.Assets
    :ivar file_uri: Import data File URI.
    :vartype file_uri: str
    """

    _attribute_map = {
        'metadata': {'key': 'metadata', 'type': 'CreateProjectOptions'},
        'assets': {'key': 'assets', 'type': 'Assets'},
        'file_uri': {'key': 'fileUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        metadata: Optional["CreateProjectOptions"] = None,
        assets: Optional["Assets"] = None,
        file_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword metadata: Parameters needed to create the project.
        :paramtype metadata: ~azure.ai.language.questionanswering.projects.models.CreateProjectOptions
        :keyword assets: All assets for this project.
        :paramtype assets: ~azure.ai.language.questionanswering.projects.models.Assets
        :keyword file_uri: Import data File URI.
        :paramtype file_uri: str
        """
        super(ImportJobOptions, self).__init__(**kwargs)
        self.metadata = metadata
        self.assets = assets
        self.file_uri = file_uri


class SourceDisplayNameParameter(msrest.serialization.Model):
    """SourceDisplayNameParameter.

    :ivar source_display_name: Friendly name of the Source.
    :vartype source_display_name: str
    """

    _validation = {
        'source_display_name': {'max_length': 200, 'min_length': 1},
    }

    _attribute_map = {
        'source_display_name': {'key': 'sourceDisplayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        source_display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword source_display_name: Friendly name of the Source.
        :paramtype source_display_name: str
        """
        super(SourceDisplayNameParameter, self).__init__(**kwargs)
        self.source_display_name = source_display_name


class LastUpdatedDateTimeParameter(msrest.serialization.Model):
    """Last updated date-time parameter.

    :ivar last_updated_date_time: Date-time when the QnA was last updated.
    :vartype last_updated_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        last_updated_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword last_updated_date_time: Date-time when the QnA was last updated.
        :paramtype last_updated_date_time: ~datetime.datetime
        """
        super(LastUpdatedDateTimeParameter, self).__init__(**kwargs)
        self.last_updated_date_time = last_updated_date_time


class QnaRecord(msrest.serialization.Model):
    """QnA record.

    :ivar id: Unique ID for the QnA.
    :vartype id: int
    :ivar answer: Answer text.
    :vartype answer: str
    :ivar source: Source from which QnA was indexed e.g.
     https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
    :vartype source: str
    :ivar questions: List of questions associated with the answer.
    :vartype questions: list[str]
    :ivar metadata: Metadata associated with the answer, useful to categorize or filter question
     answers.
    :vartype metadata: dict[str, str]
    :ivar dialog: Context of a QnA.
    :vartype dialog: ~azure.ai.language.questionanswering.projects.models.QnaDialog
    :ivar active_learning_suggestions: List of Active Learning suggestions for the QnA.
    :vartype active_learning_suggestions:
     list[~azure.ai.language.questionanswering.projects.models.SuggestedQuestionsCluster]
    """

    _validation = {
        'answer': {'max_length': 25000, 'min_length': 1},
        'source': {'max_length': 300, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'answer': {'key': 'answer', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'questions': {'key': 'questions', 'type': '[str]'},
        'metadata': {'key': 'metadata', 'type': '{str}'},
        'dialog': {'key': 'dialog', 'type': 'QnaDialog'},
        'active_learning_suggestions': {'key': 'activeLearningSuggestions', 'type': '[SuggestedQuestionsCluster]'},
    }

    def __init__(
        self,
        *,
        id: Optional[int] = None,
        answer: Optional[str] = None,
        source: Optional[str] = None,
        questions: Optional[List[str]] = None,
        metadata: Optional[Dict[str, str]] = None,
        dialog: Optional["QnaDialog"] = None,
        active_learning_suggestions: Optional[List["SuggestedQuestionsCluster"]] = None,
        **kwargs
    ):
        """
        :keyword id: Unique ID for the QnA.
        :paramtype id: int
        :keyword answer: Answer text.
        :paramtype answer: str
        :keyword source: Source from which QnA was indexed e.g.
         https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        :paramtype source: str
        :keyword questions: List of questions associated with the answer.
        :paramtype questions: list[str]
        :keyword metadata: Metadata associated with the answer, useful to categorize or filter question
         answers.
        :paramtype metadata: dict[str, str]
        :keyword dialog: Context of a QnA.
        :paramtype dialog: ~azure.ai.language.questionanswering.projects.models.QnaDialog
        :keyword active_learning_suggestions: List of Active Learning suggestions for the QnA.
        :paramtype active_learning_suggestions:
         list[~azure.ai.language.questionanswering.projects.models.SuggestedQuestionsCluster]
        """
        super(QnaRecord, self).__init__(**kwargs)
        self.id = id
        self.answer = answer
        self.source = source
        self.questions = questions
        self.metadata = metadata
        self.dialog = dialog
        self.active_learning_suggestions = active_learning_suggestions


class RetrieveQnaRecord(QnaRecord, LastUpdatedDateTimeParameter):
    """QnA Record with last updated date-time.

    :ivar last_updated_date_time: Date-time when the QnA was last updated.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar id: Unique ID for the QnA.
    :vartype id: int
    :ivar answer: Answer text.
    :vartype answer: str
    :ivar source: Source from which QnA was indexed e.g.
     https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
    :vartype source: str
    :ivar questions: List of questions associated with the answer.
    :vartype questions: list[str]
    :ivar metadata: Metadata associated with the answer, useful to categorize or filter question
     answers.
    :vartype metadata: dict[str, str]
    :ivar dialog: Context of a QnA.
    :vartype dialog: ~azure.ai.language.questionanswering.projects.models.QnaDialog
    :ivar active_learning_suggestions: List of Active Learning suggestions for the QnA.
    :vartype active_learning_suggestions:
     list[~azure.ai.language.questionanswering.projects.models.SuggestedQuestionsCluster]
    """

    _validation = {
        'answer': {'max_length': 25000, 'min_length': 1},
        'source': {'max_length': 300, 'min_length': 0},
    }

    _attribute_map = {
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'int'},
        'answer': {'key': 'answer', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'questions': {'key': 'questions', 'type': '[str]'},
        'metadata': {'key': 'metadata', 'type': '{str}'},
        'dialog': {'key': 'dialog', 'type': 'QnaDialog'},
        'active_learning_suggestions': {'key': 'activeLearningSuggestions', 'type': '[SuggestedQuestionsCluster]'},
    }

    def __init__(
        self,
        *,
        last_updated_date_time: Optional[datetime.datetime] = None,
        id: Optional[int] = None,
        answer: Optional[str] = None,
        source: Optional[str] = None,
        questions: Optional[List[str]] = None,
        metadata: Optional[Dict[str, str]] = None,
        dialog: Optional["QnaDialog"] = None,
        active_learning_suggestions: Optional[List["SuggestedQuestionsCluster"]] = None,
        **kwargs
    ):
        """
        :keyword last_updated_date_time: Date-time when the QnA was last updated.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword id: Unique ID for the QnA.
        :paramtype id: int
        :keyword answer: Answer text.
        :paramtype answer: str
        :keyword source: Source from which QnA was indexed e.g.
         https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        :paramtype source: str
        :keyword questions: List of questions associated with the answer.
        :paramtype questions: list[str]
        :keyword metadata: Metadata associated with the answer, useful to categorize or filter question
         answers.
        :paramtype metadata: dict[str, str]
        :keyword dialog: Context of a QnA.
        :paramtype dialog: ~azure.ai.language.questionanswering.projects.models.QnaDialog
        :keyword active_learning_suggestions: List of Active Learning suggestions for the QnA.
        :paramtype active_learning_suggestions:
         list[~azure.ai.language.questionanswering.projects.models.SuggestedQuestionsCluster]
        """
        super(RetrieveQnaRecord, self).__init__(id=id, answer=answer, source=source, questions=questions, metadata=metadata, dialog=dialog, active_learning_suggestions=active_learning_suggestions, last_updated_date_time=last_updated_date_time, **kwargs)
        self.last_updated_date_time = last_updated_date_time
        self.id = id
        self.answer = answer
        self.source = source
        self.questions = questions
        self.metadata = metadata
        self.dialog = dialog
        self.active_learning_suggestions = active_learning_suggestions


class ImportQnaRecord(RetrieveQnaRecord, SourceDisplayNameParameter):
    """Import QnA Record.

    :ivar source_display_name: Friendly name of the Source.
    :vartype source_display_name: str
    :ivar last_updated_date_time: Date-time when the QnA was last updated.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar id: Unique ID for the QnA.
    :vartype id: int
    :ivar answer: Answer text.
    :vartype answer: str
    :ivar source: Source from which QnA was indexed e.g.
     https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
    :vartype source: str
    :ivar questions: List of questions associated with the answer.
    :vartype questions: list[str]
    :ivar metadata: Metadata associated with the answer, useful to categorize or filter question
     answers.
    :vartype metadata: dict[str, str]
    :ivar dialog: Context of a QnA.
    :vartype dialog: ~azure.ai.language.questionanswering.projects.models.QnaDialog
    :ivar active_learning_suggestions: List of Active Learning suggestions for the QnA.
    :vartype active_learning_suggestions:
     list[~azure.ai.language.questionanswering.projects.models.SuggestedQuestionsCluster]
    """

    _validation = {
        'source_display_name': {'max_length': 200, 'min_length': 1},
        'answer': {'max_length': 25000, 'min_length': 1},
        'source': {'max_length': 300, 'min_length': 0},
    }

    _attribute_map = {
        'source_display_name': {'key': 'sourceDisplayName', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'int'},
        'answer': {'key': 'answer', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'questions': {'key': 'questions', 'type': '[str]'},
        'metadata': {'key': 'metadata', 'type': '{str}'},
        'dialog': {'key': 'dialog', 'type': 'QnaDialog'},
        'active_learning_suggestions': {'key': 'activeLearningSuggestions', 'type': '[SuggestedQuestionsCluster]'},
    }

    def __init__(
        self,
        *,
        source_display_name: Optional[str] = None,
        last_updated_date_time: Optional[datetime.datetime] = None,
        id: Optional[int] = None,
        answer: Optional[str] = None,
        source: Optional[str] = None,
        questions: Optional[List[str]] = None,
        metadata: Optional[Dict[str, str]] = None,
        dialog: Optional["QnaDialog"] = None,
        active_learning_suggestions: Optional[List["SuggestedQuestionsCluster"]] = None,
        **kwargs
    ):
        """
        :keyword source_display_name: Friendly name of the Source.
        :paramtype source_display_name: str
        :keyword last_updated_date_time: Date-time when the QnA was last updated.
        :paramtype last_updated_date_time: ~datetime.datetime
        :keyword id: Unique ID for the QnA.
        :paramtype id: int
        :keyword answer: Answer text.
        :paramtype answer: str
        :keyword source: Source from which QnA was indexed e.g.
         https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
        :paramtype source: str
        :keyword questions: List of questions associated with the answer.
        :paramtype questions: list[str]
        :keyword metadata: Metadata associated with the answer, useful to categorize or filter question
         answers.
        :paramtype metadata: dict[str, str]
        :keyword dialog: Context of a QnA.
        :paramtype dialog: ~azure.ai.language.questionanswering.projects.models.QnaDialog
        :keyword active_learning_suggestions: List of Active Learning suggestions for the QnA.
        :paramtype active_learning_suggestions:
         list[~azure.ai.language.questionanswering.projects.models.SuggestedQuestionsCluster]
        """
        super(ImportQnaRecord, self).__init__(last_updated_date_time=last_updated_date_time, id=id, answer=answer, source=source, questions=questions, metadata=metadata, dialog=dialog, active_learning_suggestions=active_learning_suggestions, source_display_name=source_display_name, **kwargs)
        self.source_display_name = source_display_name
        self.last_updated_date_time = last_updated_date_time
        self.id = id
        self.answer = answer
        self.source = source
        self.questions = questions
        self.metadata = metadata
        self.dialog = dialog
        self.active_learning_suggestions = active_learning_suggestions


class InnerErrorModel(msrest.serialization.Model):
    """An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. One of a server-defined set of error codes. Possible values include:
     "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
     "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure".
    :vartype code: str or ~azure.ai.language.questionanswering.projects.models.InnerErrorCode
    :ivar message: Required. Error message.
    :vartype message: str
    :ivar details: Error details.
    :vartype details: dict[str, str]
    :ivar target: Error target.
    :vartype target: str
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.questionanswering.projects.models.InnerErrorModel
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '{str}'},
        'target': {'key': 'target', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerErrorModel'},
    }

    def __init__(
        self,
        *,
        code: Union[str, "InnerErrorCode"],
        message: str,
        details: Optional[Dict[str, str]] = None,
        target: Optional[str] = None,
        innererror: Optional["InnerErrorModel"] = None,
        **kwargs
    ):
        """
        :keyword code: Required. One of a server-defined set of error codes. Possible values include:
         "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
         "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure".
        :paramtype code: str or ~azure.ai.language.questionanswering.projects.models.InnerErrorCode
        :keyword message: Required. Error message.
        :paramtype message: str
        :keyword details: Error details.
        :paramtype details: dict[str, str]
        :keyword target: Error target.
        :paramtype target: str
        :keyword innererror: An object containing more specific information than the current object
         about the error.
        :paramtype innererror: ~azure.ai.language.questionanswering.projects.models.InnerErrorModel
        """
        super(InnerErrorModel, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details
        self.target = target
        self.innererror = innererror


class ProjectDeployment(msrest.serialization.Model):
    """Project deployment details.

    :ivar deployment_name: Name of the deployment.
    :vartype deployment_name: str
    :ivar last_deployed_date_time: Represents the project last deployment date-time.
    :vartype last_deployed_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'deployment_name': {'key': 'deploymentName', 'type': 'str'},
        'last_deployed_date_time': {'key': 'lastDeployedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        deployment_name: Optional[str] = None,
        last_deployed_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword deployment_name: Name of the deployment.
        :paramtype deployment_name: str
        :keyword last_deployed_date_time: Represents the project last deployment date-time.
        :paramtype last_deployed_date_time: ~datetime.datetime
        """
        super(ProjectDeployment, self).__init__(**kwargs)
        self.deployment_name = deployment_name
        self.last_deployed_date_time = last_deployed_date_time


class ProjectDeployments(msrest.serialization.Model):
    """All deployments of a project.

    :ivar value: List of deployments of a project.
    :vartype value: list[~azure.ai.language.questionanswering.projects.models.ProjectDeployment]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ProjectDeployment]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ProjectDeployment"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: List of deployments of a project.
        :paramtype value: list[~azure.ai.language.questionanswering.projects.models.ProjectDeployment]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(ProjectDeployments, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ProjectMetadata(msrest.serialization.Model):
    """Represents the project.

    :ivar project_name: Name of the project.
    :vartype project_name: str
    :ivar description: Description of the project.
    :vartype description: str
    :ivar language: Language of the text records. This is BCP-47 representation of a language. For
     example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as
     default.
    :vartype language: str
    :ivar multilingual_resource: Resource enabled for multiple languages across projects or not.
    :vartype multilingual_resource: bool
    :ivar settings: Configurable settings of the Project.
    :vartype settings: ~azure.ai.language.questionanswering.projects.models.ProjectSettings
    :ivar created_date_time: Project creation date-time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_modified_date_time: Represents the project last modified date-time.
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_deployed_date_time: Represents the project last deployment date-time.
    :vartype last_deployed_date_time: ~datetime.datetime
    """

    _attribute_map = {
        'project_name': {'key': 'projectName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'multilingual_resource': {'key': 'multilingualResource', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': 'ProjectSettings'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'last_deployed_date_time': {'key': 'lastDeployedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        project_name: Optional[str] = None,
        description: Optional[str] = None,
        language: Optional[str] = None,
        multilingual_resource: Optional[bool] = None,
        settings: Optional["ProjectSettings"] = None,
        created_date_time: Optional[datetime.datetime] = None,
        last_modified_date_time: Optional[datetime.datetime] = None,
        last_deployed_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword project_name: Name of the project.
        :paramtype project_name: str
        :keyword description: Description of the project.
        :paramtype description: str
        :keyword language: Language of the text records. This is BCP-47 representation of a language.
         For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as
         default.
        :paramtype language: str
        :keyword multilingual_resource: Resource enabled for multiple languages across projects or not.
        :paramtype multilingual_resource: bool
        :keyword settings: Configurable settings of the Project.
        :paramtype settings: ~azure.ai.language.questionanswering.projects.models.ProjectSettings
        :keyword created_date_time: Project creation date-time.
        :paramtype created_date_time: ~datetime.datetime
        :keyword last_modified_date_time: Represents the project last modified date-time.
        :paramtype last_modified_date_time: ~datetime.datetime
        :keyword last_deployed_date_time: Represents the project last deployment date-time.
        :paramtype last_deployed_date_time: ~datetime.datetime
        """
        super(ProjectMetadata, self).__init__(**kwargs)
        self.project_name = project_name
        self.description = description
        self.language = language
        self.multilingual_resource = multilingual_resource
        self.settings = settings
        self.created_date_time = created_date_time
        self.last_modified_date_time = last_modified_date_time
        self.last_deployed_date_time = last_deployed_date_time


class ProjectSettings(msrest.serialization.Model):
    """Configurable settings of the Project.

    :ivar default_answer: Default Answer response when no good match is found in the knowledge
     base.
    :vartype default_answer: str
    """

    _attribute_map = {
        'default_answer': {'key': 'defaultAnswer', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        default_answer: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword default_answer: Default Answer response when no good match is found in the knowledge
         base.
        :paramtype default_answer: str
        """
        super(ProjectSettings, self).__init__(**kwargs)
        self.default_answer = default_answer


class ProjectsMetadata(msrest.serialization.Model):
    """Collection of projects metadata and global settings.

    :ivar value:
    :vartype value: list[~azure.ai.language.questionanswering.projects.models.ProjectMetadata]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ProjectMetadata]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ProjectMetadata"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value:
        :paramtype value: list[~azure.ai.language.questionanswering.projects.models.ProjectMetadata]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(ProjectsMetadata, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class QnaAssets(msrest.serialization.Model):
    """All QnA assets for the project.

    :ivar value: List of QnA records.
    :vartype value: list[~azure.ai.language.questionanswering.projects.models.RetrieveQnaRecord]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RetrieveQnaRecord]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["RetrieveQnaRecord"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: List of QnA records.
        :paramtype value: list[~azure.ai.language.questionanswering.projects.models.RetrieveQnaRecord]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(QnaAssets, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class QnaDialog(msrest.serialization.Model):
    """Dialog associated with QnA Record.

    :ivar is_context_only: To mark if a prompt is relevant only with a previous question or not. If
     true, do not include this QnA as answer for queries without context; otherwise, ignores context
     and includes this QnA in answers.
    :vartype is_context_only: bool
    :ivar prompts: List of prompts associated with the answer.
    :vartype prompts: list[~azure.ai.language.questionanswering.projects.models.QnaPrompt]
    """

    _validation = {
        'prompts': {'max_items': 20, 'min_items': 0},
    }

    _attribute_map = {
        'is_context_only': {'key': 'isContextOnly', 'type': 'bool'},
        'prompts': {'key': 'prompts', 'type': '[QnaPrompt]'},
    }

    def __init__(
        self,
        *,
        is_context_only: Optional[bool] = None,
        prompts: Optional[List["QnaPrompt"]] = None,
        **kwargs
    ):
        """
        :keyword is_context_only: To mark if a prompt is relevant only with a previous question or not.
         If true, do not include this QnA as answer for queries without context; otherwise, ignores
         context and includes this QnA in answers.
        :paramtype is_context_only: bool
        :keyword prompts: List of prompts associated with the answer.
        :paramtype prompts: list[~azure.ai.language.questionanswering.projects.models.QnaPrompt]
        """
        super(QnaDialog, self).__init__(**kwargs)
        self.is_context_only = is_context_only
        self.prompts = prompts


class QnaPrompt(msrest.serialization.Model):
    """Prompt for an answer.

    :ivar display_order: Index of the prompt. It is used for ordering of the prompts.
    :vartype display_order: int
    :ivar qna_id: ID of the QnA corresponding to the prompt.
    :vartype qna_id: int
    :ivar qna: QnA record. Either QnAId or QnA record needs to be present in a Prompt.
    :vartype qna: ~azure.ai.language.questionanswering.projects.models.QnaRecord
    :ivar display_text: Text displayed to represent a follow up question prompt.
    :vartype display_text: str
    """

    _validation = {
        'display_text': {'max_length': 200, 'min_length': 0},
    }

    _attribute_map = {
        'display_order': {'key': 'displayOrder', 'type': 'int'},
        'qna_id': {'key': 'qnaId', 'type': 'int'},
        'qna': {'key': 'qna', 'type': 'QnaRecord'},
        'display_text': {'key': 'displayText', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display_order: Optional[int] = None,
        qna_id: Optional[int] = None,
        qna: Optional["QnaRecord"] = None,
        display_text: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword display_order: Index of the prompt. It is used for ordering of the prompts.
        :paramtype display_order: int
        :keyword qna_id: ID of the QnA corresponding to the prompt.
        :paramtype qna_id: int
        :keyword qna: QnA record. Either QnAId or QnA record needs to be present in a Prompt.
        :paramtype qna: ~azure.ai.language.questionanswering.projects.models.QnaRecord
        :keyword display_text: Text displayed to represent a follow up question prompt.
        :paramtype display_text: str
        """
        super(QnaPrompt, self).__init__(**kwargs)
        self.display_order = display_order
        self.qna_id = qna_id
        self.qna = qna
        self.display_text = display_text


class QnaSourceMetadata(msrest.serialization.Model):
    """Input source file or url details.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: Friendly name of the Source.
    :vartype display_name: str
    :ivar source: Unique source identifier. Name of the file if it's a 'file' source; otherwise,
     the complete URL if it's a 'url' source.
    :vartype source: str
    :ivar source_uri: Required. URI location for the file or url.
    :vartype source_uri: str
    :ivar source_kind: Required. Supported source types. Possible values include: "file", "url".
    :vartype source_kind: str or ~azure.ai.language.questionanswering.projects.models.SourceKind
    :ivar content_structure_kind: Content structure type for sources. Possible values include:
     "unstructured".
    :vartype content_structure_kind: str or
     ~azure.ai.language.questionanswering.projects.models.SourceContentStructureKind
    """

    _validation = {
        'display_name': {'max_length': 200, 'min_length': 1},
        'source_uri': {'required': True},
        'source_kind': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'source_uri': {'key': 'sourceUri', 'type': 'str'},
        'source_kind': {'key': 'sourceKind', 'type': 'str'},
        'content_structure_kind': {'key': 'contentStructureKind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        source_uri: str,
        source_kind: Union[str, "SourceKind"],
        display_name: Optional[str] = None,
        source: Optional[str] = None,
        content_structure_kind: Optional[Union[str, "SourceContentStructureKind"]] = None,
        **kwargs
    ):
        """
        :keyword display_name: Friendly name of the Source.
        :paramtype display_name: str
        :keyword source: Unique source identifier. Name of the file if it's a 'file' source; otherwise,
         the complete URL if it's a 'url' source.
        :paramtype source: str
        :keyword source_uri: Required. URI location for the file or url.
        :paramtype source_uri: str
        :keyword source_kind: Required. Supported source types. Possible values include: "file", "url".
        :paramtype source_kind: str or ~azure.ai.language.questionanswering.projects.models.SourceKind
        :keyword content_structure_kind: Content structure type for sources. Possible values include:
         "unstructured".
        :paramtype content_structure_kind: str or
         ~azure.ai.language.questionanswering.projects.models.SourceContentStructureKind
        """
        super(QnaSourceMetadata, self).__init__(**kwargs)
        self.display_name = display_name
        self.source = source
        self.source_uri = source_uri
        self.source_kind = source_kind
        self.content_structure_kind = content_structure_kind


class QnaSourceRecord(LastUpdatedDateTimeParameter, QnaSourceMetadata):
    """Custom source record with last updated date-time.

    All required parameters must be populated in order to send to Azure.

    :ivar display_name: Friendly name of the Source.
    :vartype display_name: str
    :ivar source: Unique source identifier. Name of the file if it's a 'file' source; otherwise,
     the complete URL if it's a 'url' source.
    :vartype source: str
    :ivar source_uri: Required. URI location for the file or url.
    :vartype source_uri: str
    :ivar source_kind: Required. Supported source types. Possible values include: "file", "url".
    :vartype source_kind: str or ~azure.ai.language.questionanswering.projects.models.SourceKind
    :ivar content_structure_kind: Content structure type for sources. Possible values include:
     "unstructured".
    :vartype content_structure_kind: str or
     ~azure.ai.language.questionanswering.projects.models.SourceContentStructureKind
    :ivar last_updated_date_time: Date-time when the QnA was last updated.
    :vartype last_updated_date_time: ~datetime.datetime
    """

    _validation = {
        'display_name': {'max_length': 200, 'min_length': 1},
        'source_uri': {'required': True},
        'source_kind': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'source_uri': {'key': 'sourceUri', 'type': 'str'},
        'source_kind': {'key': 'sourceKind', 'type': 'str'},
        'content_structure_kind': {'key': 'contentStructureKind', 'type': 'str'},
        'last_updated_date_time': {'key': 'lastUpdatedDateTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        source_uri: str,
        source_kind: Union[str, "SourceKind"],
        display_name: Optional[str] = None,
        source: Optional[str] = None,
        content_structure_kind: Optional[Union[str, "SourceContentStructureKind"]] = None,
        last_updated_date_time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword display_name: Friendly name of the Source.
        :paramtype display_name: str
        :keyword source: Unique source identifier. Name of the file if it's a 'file' source; otherwise,
         the complete URL if it's a 'url' source.
        :paramtype source: str
        :keyword source_uri: Required. URI location for the file or url.
        :paramtype source_uri: str
        :keyword source_kind: Required. Supported source types. Possible values include: "file", "url".
        :paramtype source_kind: str or ~azure.ai.language.questionanswering.projects.models.SourceKind
        :keyword content_structure_kind: Content structure type for sources. Possible values include:
         "unstructured".
        :paramtype content_structure_kind: str or
         ~azure.ai.language.questionanswering.projects.models.SourceContentStructureKind
        :keyword last_updated_date_time: Date-time when the QnA was last updated.
        :paramtype last_updated_date_time: ~datetime.datetime
        """
        super(QnaSourceRecord, self).__init__(last_updated_date_time=last_updated_date_time, display_name=display_name, source=source, source_uri=source_uri, source_kind=source_kind, content_structure_kind=content_structure_kind, **kwargs)
        self.display_name = display_name
        self.source = source
        self.source_uri = source_uri
        self.source_kind = source_kind
        self.content_structure_kind = content_structure_kind
        self.last_updated_date_time = last_updated_date_time


class QnaSources(msrest.serialization.Model):
    """All QnA sources for the project.

    :ivar value: Custom sources from which QnAs were extracted or explicitly added to the project.
    :vartype value: list[~azure.ai.language.questionanswering.projects.models.QnaSourceRecord]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[QnaSourceRecord]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["QnaSourceRecord"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Custom sources from which QnAs were extracted or explicitly added to the
         project.
        :paramtype value: list[~azure.ai.language.questionanswering.projects.models.QnaSourceRecord]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(QnaSources, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class RefreshSourceOptions(msrest.serialization.Model):
    """Boolean flag used to refresh data from the Source.

    :ivar refresh: Boolean flag used to refresh data from the Source.
    :vartype refresh: bool
    """

    _attribute_map = {
        'refresh': {'key': 'refresh', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        refresh: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword refresh: Boolean flag used to refresh data from the Source.
        :paramtype refresh: bool
        """
        super(RefreshSourceOptions, self).__init__(**kwargs)
        self.refresh = refresh


class SuggestedQuestion(msrest.serialization.Model):
    """Question suggested by the Active Learning feature.

    :ivar question: Question suggested by the Active Learning feature.
    :vartype question: str
    :ivar user_suggested_count: The number of times the question was suggested explicitly by the
     user.
    :vartype user_suggested_count: int
    :ivar auto_suggested_count: The number of times the question was suggested automatically by the
     Active Learning algorithm.
    :vartype auto_suggested_count: int
    """

    _attribute_map = {
        'question': {'key': 'question', 'type': 'str'},
        'user_suggested_count': {'key': 'userSuggestedCount', 'type': 'int'},
        'auto_suggested_count': {'key': 'autoSuggestedCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        question: Optional[str] = None,
        user_suggested_count: Optional[int] = None,
        auto_suggested_count: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword question: Question suggested by the Active Learning feature.
        :paramtype question: str
        :keyword user_suggested_count: The number of times the question was suggested explicitly by the
         user.
        :paramtype user_suggested_count: int
        :keyword auto_suggested_count: The number of times the question was suggested automatically by
         the Active Learning algorithm.
        :paramtype auto_suggested_count: int
        """
        super(SuggestedQuestion, self).__init__(**kwargs)
        self.question = question
        self.user_suggested_count = user_suggested_count
        self.auto_suggested_count = auto_suggested_count


class SuggestedQuestionsCluster(msrest.serialization.Model):
    """Active Learning suggested questions cluster details.

    :ivar cluster_head: Question chosen as the head of suggested questions cluster by Active
     Learning clustering algorithm.
    :vartype cluster_head: str
    :ivar suggested_questions: List of all suggested questions for the QnA.
    :vartype suggested_questions:
     list[~azure.ai.language.questionanswering.projects.models.SuggestedQuestion]
    """

    _attribute_map = {
        'cluster_head': {'key': 'clusterHead', 'type': 'str'},
        'suggested_questions': {'key': 'suggestedQuestions', 'type': '[SuggestedQuestion]'},
    }

    def __init__(
        self,
        *,
        cluster_head: Optional[str] = None,
        suggested_questions: Optional[List["SuggestedQuestion"]] = None,
        **kwargs
    ):
        """
        :keyword cluster_head: Question chosen as the head of suggested questions cluster by Active
         Learning clustering algorithm.
        :paramtype cluster_head: str
        :keyword suggested_questions: List of all suggested questions for the QnA.
        :paramtype suggested_questions:
         list[~azure.ai.language.questionanswering.projects.models.SuggestedQuestion]
        """
        super(SuggestedQuestionsCluster, self).__init__(**kwargs)
        self.cluster_head = cluster_head
        self.suggested_questions = suggested_questions


class SynonymAssets(msrest.serialization.Model):
    """All synonym assets for this project.

    :ivar value: Collection of synonyms.
    :vartype value: list[~azure.ai.language.questionanswering.projects.models.WordAlterations]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[WordAlterations]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["WordAlterations"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Collection of synonyms.
        :paramtype value: list[~azure.ai.language.questionanswering.projects.models.WordAlterations]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(SynonymAssets, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class UpdateQnaRecord(msrest.serialization.Model):
    """QnA record to be updated.

    All required parameters must be populated in order to send to Azure.

    :ivar op: Required. Update operation type for assets. Possible values include: "add", "delete",
     "replace".
    :vartype op: str or ~azure.ai.language.questionanswering.projects.models.UpdateOperationKind
    :ivar value: Required. QnA record.
    :vartype value: ~azure.ai.language.questionanswering.projects.models.QnaRecord
    """

    _validation = {
        'op': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'op': {'key': 'op', 'type': 'str'},
        'value': {'key': 'value', 'type': 'QnaRecord'},
    }

    def __init__(
        self,
        *,
        op: Union[str, "UpdateOperationKind"],
        value: "QnaRecord",
        **kwargs
    ):
        """
        :keyword op: Required. Update operation type for assets. Possible values include: "add",
         "delete", "replace".
        :paramtype op: str or ~azure.ai.language.questionanswering.projects.models.UpdateOperationKind
        :keyword value: Required. QnA record.
        :paramtype value: ~azure.ai.language.questionanswering.projects.models.QnaRecord
        """
        super(UpdateQnaRecord, self).__init__(**kwargs)
        self.op = op
        self.value = value


class UpdateQnaSourceRecord(QnaSourceMetadata, RefreshSourceOptions):
    """Update source record.

    All required parameters must be populated in order to send to Azure.

    :ivar refresh: Boolean flag used to refresh data from the Source.
    :vartype refresh: bool
    :ivar display_name: Friendly name of the Source.
    :vartype display_name: str
    :ivar source: Unique source identifier. Name of the file if it's a 'file' source; otherwise,
     the complete URL if it's a 'url' source.
    :vartype source: str
    :ivar source_uri: Required. URI location for the file or url.
    :vartype source_uri: str
    :ivar source_kind: Required. Supported source types. Possible values include: "file", "url".
    :vartype source_kind: str or ~azure.ai.language.questionanswering.projects.models.SourceKind
    :ivar content_structure_kind: Content structure type for sources. Possible values include:
     "unstructured".
    :vartype content_structure_kind: str or
     ~azure.ai.language.questionanswering.projects.models.SourceContentStructureKind
    """

    _validation = {
        'display_name': {'max_length': 200, 'min_length': 1},
        'source_uri': {'required': True},
        'source_kind': {'required': True},
    }

    _attribute_map = {
        'refresh': {'key': 'refresh', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'source_uri': {'key': 'sourceUri', 'type': 'str'},
        'source_kind': {'key': 'sourceKind', 'type': 'str'},
        'content_structure_kind': {'key': 'contentStructureKind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        source_uri: str,
        source_kind: Union[str, "SourceKind"],
        refresh: Optional[bool] = None,
        display_name: Optional[str] = None,
        source: Optional[str] = None,
        content_structure_kind: Optional[Union[str, "SourceContentStructureKind"]] = None,
        **kwargs
    ):
        """
        :keyword refresh: Boolean flag used to refresh data from the Source.
        :paramtype refresh: bool
        :keyword display_name: Friendly name of the Source.
        :paramtype display_name: str
        :keyword source: Unique source identifier. Name of the file if it's a 'file' source; otherwise,
         the complete URL if it's a 'url' source.
        :paramtype source: str
        :keyword source_uri: Required. URI location for the file or url.
        :paramtype source_uri: str
        :keyword source_kind: Required. Supported source types. Possible values include: "file", "url".
        :paramtype source_kind: str or ~azure.ai.language.questionanswering.projects.models.SourceKind
        :keyword content_structure_kind: Content structure type for sources. Possible values include:
         "unstructured".
        :paramtype content_structure_kind: str or
         ~azure.ai.language.questionanswering.projects.models.SourceContentStructureKind
        """
        super(UpdateQnaSourceRecord, self).__init__(display_name=display_name, source=source, source_uri=source_uri, source_kind=source_kind, content_structure_kind=content_structure_kind, refresh=refresh, **kwargs)
        self.refresh = refresh
        self.display_name = display_name
        self.source = source
        self.source_uri = source_uri
        self.source_kind = source_kind
        self.content_structure_kind = content_structure_kind


class UpdateSourceRecord(msrest.serialization.Model):
    """Source to be updated.

    All required parameters must be populated in order to send to Azure.

    :ivar op: Required. Update operation type for assets. Possible values include: "add", "delete",
     "replace".
    :vartype op: str or ~azure.ai.language.questionanswering.projects.models.UpdateOperationKind
    :ivar value: Required. Update source record.
    :vartype value: ~azure.ai.language.questionanswering.projects.models.UpdateQnaSourceRecord
    """

    _validation = {
        'op': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'op': {'key': 'op', 'type': 'str'},
        'value': {'key': 'value', 'type': 'UpdateQnaSourceRecord'},
    }

    def __init__(
        self,
        *,
        op: Union[str, "UpdateOperationKind"],
        value: "UpdateQnaSourceRecord",
        **kwargs
    ):
        """
        :keyword op: Required. Update operation type for assets. Possible values include: "add",
         "delete", "replace".
        :paramtype op: str or ~azure.ai.language.questionanswering.projects.models.UpdateOperationKind
        :keyword value: Required. Update source record.
        :paramtype value: ~azure.ai.language.questionanswering.projects.models.UpdateQnaSourceRecord
        """
        super(UpdateSourceRecord, self).__init__(**kwargs)
        self.op = op
        self.value = value


class WordAlterations(msrest.serialization.Model):
    """Collection of word alterations.

    All required parameters must be populated in order to send to Azure.

    :ivar alterations: Required. Collection of word alterations.
    :vartype alterations: list[str]
    """

    _validation = {
        'alterations': {'required': True},
    }

    _attribute_map = {
        'alterations': {'key': 'alterations', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        alterations: List[str],
        **kwargs
    ):
        """
        :keyword alterations: Required. Collection of word alterations.
        :paramtype alterations: list[str]
        """
        super(WordAlterations, self).__init__(**kwargs)
        self.alterations = alterations
