# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import OrchestrationTargetProjectKind, ProjectKind

if TYPE_CHECKING:
    from .. import models as _models


class AnalyzeConversationAuthoringAssignDeploymentResourcesOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for assigning Azure resources to a project.

    All required parameters must be populated in order to send to server.

    :ivar resources_metadata: Represents the metadata for the resources to be assigned. Required.
    :vartype resources_metadata:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringResourceMetadata]
    """

    resources_metadata: List["_models.AnalyzeConversationAuthoringResourceMetadata"] = rest_field(
        name="resourcesMetadata"
    )
    """Represents the metadata for the resources to be assigned. Required."""

    @overload
    def __init__(
        self,
        *,
        resources_metadata: List["_models.AnalyzeConversationAuthoringResourceMetadata"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringAssignedDeploymentResource(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the assigned deployment resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar azure_resource_id: The resource ID. Required.
    :vartype azure_resource_id: str
    :ivar region: The resource region. Required.
    :vartype region: str
    """

    azure_resource_id: str = rest_field(name="azureResourceId", visibility=["read"])
    """The resource ID. Required."""
    region: str = rest_field()
    """The resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        region: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the metadata for an assigned deployment.


    :ivar deployment_name: Represents the deployment name. Required.
    :vartype deployment_name: str
    :ivar last_deployed_date_time: Represents deployment last deployed time. Required.
    :vartype last_deployed_date_time: ~datetime.datetime
    :ivar deployment_expiration_date: Represents deployment expiration date in the runtime.
     Required.
    :vartype deployment_expiration_date: ~datetime.date
    """

    deployment_name: str = rest_field(name="deploymentName")
    """Represents the deployment name. Required."""
    last_deployed_date_time: datetime.datetime = rest_field(name="lastDeployedDateTime", format="rfc3339")
    """Represents deployment last deployed time. Required."""
    deployment_expiration_date: datetime.date = rest_field(name="deploymentExpirationDate")
    """Represents deployment expiration date in the runtime. Required."""

    @overload
    def __init__(
        self,
        *,
        deployment_name: str,
        last_deployed_date_time: datetime.datetime,
        deployment_expiration_date: datetime.date,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the metadata for assigned deployments for a project.


    :ivar project_name: Represents the project name. Required.
    :vartype project_name: str
    :ivar deployments_metadata: Represents the resource region. Required.
    :vartype deployments_metadata:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata]  # pylint: disable=line-too-long
    """

    project_name: str = rest_field(name="projectName")
    """Represents the project name. Required."""
    deployments_metadata: List["_models.AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata"] = rest_field(
        name="deploymentsMetadata"
    )
    """Represents the resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        project_name: str,
        deployments_metadata: List["_models.AnalyzeConversationAuthoringAssignedProjectDeploymentMetadata"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringAssignedResourceDeploymentsMetadata(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the metadata for deployments assigned to a resource.


    :ivar value: The list of retrieved assigned project deployments. Required.
    :vartype value:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata]  # pylint: disable=line-too-long
    :ivar next_link: The next page link.
    :vartype next_link: str
    """

    value: List["_models.AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata"] = rest_field()
    """The list of retrieved assigned project deployments. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The next page link."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.AnalyzeConversationAuthoringAssignedProjectDeploymentsMetadata"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringConfusionMatrix(_model_base.Model):  # pylint: disable=name-too-long
    """AnalyzeConversationAuthoringConfusionMatrix."""


class AnalyzeConversationAuthoringConfusionMatrixCell(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a cell in a confusion matrix.


    :ivar normalized_value: Represents normalized value in percentages. Required.
    :vartype normalized_value: float
    :ivar raw_value: Represents raw value. Required.
    :vartype raw_value: float
    """

    normalized_value: float = rest_field(name="normalizedValue")
    """Represents normalized value in percentages. Required."""
    raw_value: float = rest_field(name="rawValue")
    """Represents raw value. Required."""

    @overload
    def __init__(
        self,
        *,
        normalized_value: float,
        raw_value: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringConfusionMatrixRow(_model_base.Model):  # pylint: disable=name-too-long
    """AnalyzeConversationAuthoringConfusionMatrixRow."""


class AnalyzeConversationAuthoringConversationExportedEntity(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an entity with its components.

    All required parameters must be populated in order to send to server.

    :ivar category: The category of the entity. Required.
    :vartype category: str
    :ivar composition_setting: The behavior to follow when the entity's components overlap with
     each other. Known values are: "returnLongestOverlap", "requireExactOverlap",
     "separateComponents", and "combineComponents".
    :vartype composition_setting: str or
     ~azure.ai.language.conversations.authoring.models.CompositionSetting
    :ivar list: The list component of the entity.
    :vartype list:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedEntityList
    :ivar prebuilts: The prebuilt entities components.
    :vartype prebuilts:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedPrebuiltEntity]
    :ivar regex: The regex component of the entity.
    :vartype regex:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedEntityRegex
    :ivar required_components: The required components. Allowed values are 'learned', 'list',
     'prebuilts' and 'regex'.
    :vartype required_components: list[str]
    """

    category: str = rest_field()
    """The category of the entity. Required."""
    composition_setting: Optional[Union[str, "_models.CompositionSetting"]] = rest_field(name="compositionSetting")
    """The behavior to follow when the entity's components overlap with each other. Known values are:
     \"returnLongestOverlap\", \"requireExactOverlap\", \"separateComponents\", and
     \"combineComponents\"."""
    list: Optional["_models.AnalyzeConversationAuthoringExportedEntityList"] = rest_field()
    """The list component of the entity."""
    prebuilts: Optional[List["_models.AnalyzeConversationAuthoringExportedPrebuiltEntity"]] = rest_field()
    """The prebuilt entities components."""
    regex: Optional["_models.AnalyzeConversationAuthoringExportedEntityRegex"] = rest_field()
    """The regex component of the entity."""
    required_components: Optional[List[str]] = rest_field(name="requiredComponents")
    """The required components. Allowed values are 'learned', 'list', 'prebuilts' and 'regex'."""

    @overload
    def __init__(
        self,
        *,
        category: str,
        composition_setting: Optional[Union[str, "_models.CompositionSetting"]] = None,
        list: Optional["_models.AnalyzeConversationAuthoringExportedEntityList"] = None,
        prebuilts: Optional[List["_models.AnalyzeConversationAuthoringExportedPrebuiltEntity"]] = None,
        regex: Optional["_models.AnalyzeConversationAuthoringExportedEntityRegex"] = None,
        required_components: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringConversationExportedIntent(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported intent of a conversational project.

    All required parameters must be populated in order to send to server.

    :ivar category: The intent category. Required.
    :vartype category: str
    """

    category: str = rest_field()
    """The intent category. Required."""

    @overload
    def __init__(
        self,
        *,
        category: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedProjectAssets(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the assets of an exported project.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AnalyzeConversationAuthoringConversationExportedProjectAssets,
    AnalyzeConversationAuthoringOrchestrationExportedProjectAssets

    All required parameters must be populated in order to send to server.

    :ivar project_kind: The type of project containing the assets. Required. Known values are:
     "Conversation", "Orchestration", and "CustomConversationSummarization".
    :vartype project_kind: str or ~azure.ai.language.conversations.authoring.models.ProjectKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    project_kind: str = rest_discriminator(name="projectKind")
    """The type of project containing the assets. Required. Known values are: \"Conversation\",
     \"Orchestration\", and \"CustomConversationSummarization\"."""

    @overload
    def __init__(
        self,
        *,
        project_kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringConversationExportedProjectAssets(
    AnalyzeConversationAuthoringExportedProjectAssets, discriminator="Conversation"
):  # pylint: disable=name-too-long
    """Represents the exported assets of a conversational project.

    All required parameters must be populated in order to send to server.

    :ivar intents: The intents defined in the project.
    :vartype intents:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringConversationExportedIntent]
    :ivar entities: The entities defined in the project.
    :vartype entities:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringConversationExportedEntity]
    :ivar utterances: The utterances defined in the project.
    :vartype utterances:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringConversationExportedUtterance]
    :ivar project_kind: The type of project containing the assets. Required. A project to build
     natural language into apps, bots, and IoT devices.
    :vartype project_kind: str or ~azure.ai.language.conversations.authoring.models.CONVERSATION
    """

    intents: Optional[List["_models.AnalyzeConversationAuthoringConversationExportedIntent"]] = rest_field()
    """The intents defined in the project."""
    entities: Optional[List["_models.AnalyzeConversationAuthoringConversationExportedEntity"]] = rest_field()
    """The entities defined in the project."""
    utterances: Optional[List["_models.AnalyzeConversationAuthoringConversationExportedUtterance"]] = rest_field()
    """The utterances defined in the project."""
    project_kind: Literal[ProjectKind.CONVERSATION] = rest_discriminator(name="projectKind")  # type: ignore
    """The type of project containing the assets. Required. A project to build natural language into
     apps, bots, and IoT devices."""

    @overload
    def __init__(
        self,
        *,
        intents: Optional[List["_models.AnalyzeConversationAuthoringConversationExportedIntent"]] = None,
        entities: Optional[List["_models.AnalyzeConversationAuthoringConversationExportedEntity"]] = None,
        utterances: Optional[List["_models.AnalyzeConversationAuthoringConversationExportedUtterance"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.CONVERSATION, **kwargs)


class AnalyzeConversationAuthoringConversationExportedUtterance(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported utterance for a conversational project.

    All required parameters must be populated in order to send to server.

    :ivar entities: Represents the entity labels of the utterance.
    :vartype entities:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedUtteranceEntityLabel]
    :ivar text: The utterance text. Required.
    :vartype text: str
    :ivar language: Represents the utterance's language. This is BCP-47 representation of a
     language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar intent: The intent of the utterance. Required.
    :vartype intent: str
    :ivar dataset: The dataset for this utterance. Allowed values are 'Train' and 'Test'.
    :vartype dataset: str
    """

    entities: Optional[List["_models.AnalyzeConversationAuthoringExportedUtteranceEntityLabel"]] = rest_field()
    """Represents the entity labels of the utterance."""
    text: str = rest_field()
    """The utterance text. Required."""
    language: Optional[str] = rest_field()
    """Represents the utterance's language. This is BCP-47 representation of a language. For example,
     use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    intent: str = rest_field()
    """The intent of the utterance. Required."""
    dataset: Optional[str] = rest_field()
    """The dataset for this utterance. Allowed values are 'Train' and 'Test'."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        intent: str,
        entities: Optional[List["_models.AnalyzeConversationAuthoringExportedUtteranceEntityLabel"]] = None,
        language: Optional[str] = None,
        dataset: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringCopyProjectJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a copy job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringCopyProjectOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for copying an existing project to another Azure resource.


    :ivar project_kind: Represents the project kind. Required. Known values are: "Conversation",
     "Orchestration", and "CustomConversationSummarization".
    :vartype project_kind: str or ~azure.ai.language.conversations.authoring.models.ProjectKind
    :ivar target_project_name: The project name to be copied-into. Required.
    :vartype target_project_name: str
    :ivar access_token: The access token. Required.
    :vartype access_token: str
    :ivar expires_at: The expiration of the access token. Required.
    :vartype expires_at: ~datetime.datetime
    :ivar target_resource_id: Represents the target Azure resource ID. Required.
    :vartype target_resource_id: str
    :ivar target_resource_region: Represents the target Azure resource region. Required.
    :vartype target_resource_region: str
    """

    project_kind: Union[str, "_models.ProjectKind"] = rest_field(name="projectKind")
    """Represents the project kind. Required. Known values are: \"Conversation\", \"Orchestration\",
     and \"CustomConversationSummarization\"."""
    target_project_name: str = rest_field(name="targetProjectName")
    """The project name to be copied-into. Required."""
    access_token: str = rest_field(name="accessToken")
    """The access token. Required."""
    expires_at: datetime.datetime = rest_field(name="expiresAt", format="rfc3339")
    """The expiration of the access token. Required."""
    target_resource_id: str = rest_field(name="targetResourceId")
    """Represents the target Azure resource ID. Required."""
    target_resource_region: str = rest_field(name="targetResourceRegion")
    """Represents the target Azure resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        project_kind: Union[str, "_models.ProjectKind"],
        target_project_name: str,
        access_token: str,
        expires_at: datetime.datetime,
        target_resource_id: str,
        target_resource_region: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringCreateDeploymentOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for creating or updating a project deployment.

    All required parameters must be populated in order to send to server.

    :ivar trained_model_label: Represents the trained model label. Required.
    :vartype trained_model_label: str
    :ivar assigned_resource_ids: Represents the resource IDs to be assigned to the deployment. If
     provided, the deployment will be rolled out to the resources provided here as well as the
     original resource in which the project is created.
    :vartype assigned_resource_ids: list[str]
    """

    trained_model_label: str = rest_field(name="trainedModelLabel")
    """Represents the trained model label. Required."""
    assigned_resource_ids: Optional[List[str]] = rest_field(name="assignedResourceIds")
    """Represents the resource IDs to be assigned to the deployment. If provided, the deployment will
     be rolled out to the resources provided here as well as the original resource in which the
     project is created."""

    @overload
    def __init__(
        self,
        *,
        trained_model_label: str,
        assigned_resource_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringCreateProjectOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options used to create or update a project.

    All required parameters must be populated in order to send to server.

    :ivar project_kind: Represents the project kind. Required. Known values are: "Conversation",
     "Orchestration", and "CustomConversationSummarization".
    :vartype project_kind: str or ~azure.ai.language.conversations.authoring.models.ProjectKind
    :ivar settings: The project settings.
    :vartype settings:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringProjectSettings
    :ivar storage_input_container_name: The storage container name in case of conversation
     summarization.
    :vartype storage_input_container_name: str
    :ivar project_name: The new project name. Required.
    :vartype project_name: str
    :ivar multilingual: Whether the project would be used for multiple languages or not.
    :vartype multilingual: bool
    :ivar description: The project description.
    :vartype description: str
    :ivar language: The project language. This is BCP-47 representation of a language. For example,
     use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    """

    project_kind: Union[str, "_models.ProjectKind"] = rest_field(name="projectKind")
    """Represents the project kind. Required. Known values are: \"Conversation\", \"Orchestration\",
     and \"CustomConversationSummarization\"."""
    settings: Optional["_models.AnalyzeConversationAuthoringProjectSettings"] = rest_field()
    """The project settings."""
    storage_input_container_name: Optional[str] = rest_field(name="storageInputContainerName")
    """The storage container name in case of conversation summarization."""
    project_name: str = rest_field(name="projectName")
    """The new project name. Required."""
    multilingual: Optional[bool] = rest_field()
    """Whether the project would be used for multiple languages or not."""
    description: Optional[str] = rest_field()
    """The project description."""
    language: str = rest_field()
    """The project language. This is BCP-47 representation of a language. For example, use \"en\" for
     English, \"en-gb\" for English (UK), \"es\" for Spanish etc. Required."""

    @overload
    def __init__(
        self,
        *,
        project_kind: Union[str, "_models.ProjectKind"],
        project_name: str,
        language: str,
        settings: Optional["_models.AnalyzeConversationAuthoringProjectSettings"] = None,
        storage_input_container_name: Optional[str] = None,
        multilingual: Optional[bool] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringDeleteDeploymentOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for deleting a project deployment.

    :ivar assigned_resource_ids: Represents the resource IDs to delete the deployment from. If not
     provided, the deployment will be rolled out from all the resources it is deployed to. If
     provided, it will delete the deployment only from the specified assigned resources, and leave
     it for the rest.
    :vartype assigned_resource_ids: list[str]
    """

    assigned_resource_ids: Optional[List[str]] = rest_field(name="assignedResourceIds")
    """Represents the resource IDs to delete the deployment from. If not provided, the deployment will
     be rolled out from all the resources it is deployed to. If provided, it will delete the
     deployment only from the specified assigned resources, and leave it for the rest."""

    @overload
    def __init__(
        self,
        *,
        assigned_resource_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringDeploymentDeleteFromResourcesJobState(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the state of an existing delete deployment from specific resources job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringDeploymentJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a deployment job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringDeploymentResource(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an Azure resource assigned to a deployment.


    :ivar resource_id: Represents the Azure resource Id. Required.
    :vartype resource_id: str
    :ivar region: Represents the resource region. Required.
    :vartype region: str
    """

    resource_id: str = rest_field(name="resourceId")
    """Represents the Azure resource Id. Required."""
    region: str = rest_field()
    """Represents the resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
        region: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringDeploymentResourcesJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a deployment resources job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringEntitiesEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation result summary for the project's entities.


    :ivar confusion_matrix: Represents the confusion matrix between two entities (the two entities
     can be the same). The matrix is between the entity that was labelled and the entity that was
     predicted. Required.
    :vartype confusion_matrix:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringConfusionMatrix
    :ivar entities: Represents the entities evaluation summary. Required.
    :vartype entities: dict[str,
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringEntityEvaluationSummary]
    :ivar micro_f1: Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype micro_f1: float
    :ivar micro_precision: Represents the micro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype micro_precision: float
    :ivar micro_recall: Represents the micro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype micro_recall: float
    :ivar macro_f1: Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype macro_f1: float
    :ivar macro_precision: Represents the macro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype macro_precision: float
    :ivar macro_recall: Represents the macro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype macro_recall: float
    """

    confusion_matrix: "_models.AnalyzeConversationAuthoringConfusionMatrix" = rest_field(name="confusionMatrix")
    """Represents the confusion matrix between two entities (the two entities can be the same). The
     matrix is between the entity that was labelled and the entity that was predicted. Required."""
    entities: Dict[str, "_models.AnalyzeConversationAuthoringEntityEvaluationSummary"] = rest_field()
    """Represents the entities evaluation summary. Required."""
    micro_f1: float = rest_field(name="microF1")
    """Represents the micro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_precision: float = rest_field(name="microPrecision")
    """Represents the micro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_recall: float = rest_field(name="microRecall")
    """Represents the micro recall. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_f1: float = rest_field(name="macroF1")
    """Represents the macro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_precision: float = rest_field(name="macroPrecision")
    """Represents the macro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_recall: float = rest_field(name="macroRecall")
    """Represents the macro recall. Expected value is a float between 0 and 1 inclusive. Required."""

    @overload
    def __init__(
        self,
        *,
        confusion_matrix: "_models.AnalyzeConversationAuthoringConfusionMatrix",
        entities: Dict[str, "_models.AnalyzeConversationAuthoringEntityEvaluationSummary"],
        micro_f1: float,
        micro_precision: float,
        micro_recall: float,
        macro_f1: float,
        macro_precision: float,
        macro_recall: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringEntityEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation result for an entity.


    :ivar f1: Represents the model precision. Required.
    :vartype f1: float
    :ivar precision: Represents the model recall. Required.
    :vartype precision: float
    :ivar recall: Represents the model F1 score. Required.
    :vartype recall: float
    :ivar true_positive_count: Represents the count of true positive. Required.
    :vartype true_positive_count: int
    :ivar true_negative_count: Represents the count of true negative. Required.
    :vartype true_negative_count: int
    :ivar false_positive_count: Represents the count of false positive. Required.
    :vartype false_positive_count: int
    :ivar false_negative_count: Represents the count of false negative. Required.
    :vartype false_negative_count: int
    """

    f1: float = rest_field()
    """Represents the model precision. Required."""
    precision: float = rest_field()
    """Represents the model recall. Required."""
    recall: float = rest_field()
    """Represents the model F1 score. Required."""
    true_positive_count: int = rest_field(name="truePositiveCount")
    """Represents the count of true positive. Required."""
    true_negative_count: int = rest_field(name="trueNegativeCount")
    """Represents the count of true negative. Required."""
    false_positive_count: int = rest_field(name="falsePositiveCount")
    """Represents the count of false positive. Required."""
    false_negative_count: int = rest_field(name="falseNegativeCount")
    """Represents the count of false negative. Required."""

    @overload
    def __init__(
        self,
        *,
        f1: float,
        precision: float,
        recall: float,
        true_positive_count: int,
        true_negative_count: int,
        false_positive_count: int,
        false_negative_count: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringEvaluationJobResult(_model_base.Model):  # pylint: disable=name-too-long
    """AnalyzeConversationAuthoringEvaluationJobResult.


    :ivar evaluation_options: Represents the options used running the evaluation. Required.
    :vartype evaluation_options:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringEvaluationOptions
    :ivar model_label: Represents trained model label. Required.
    :vartype model_label: str
    :ivar training_config_version: Represents training config version. Required.
    :vartype training_config_version: str
    :ivar percent_complete: Represents progress percentage. Required.
    :vartype percent_complete: int
    """

    evaluation_options: "_models.AnalyzeConversationAuthoringEvaluationOptions" = rest_field(name="evaluationOptions")
    """Represents the options used running the evaluation. Required."""
    model_label: str = rest_field(name="modelLabel")
    """Represents trained model label. Required."""
    training_config_version: str = rest_field(name="trainingConfigVersion")
    """Represents training config version. Required."""
    percent_complete: int = rest_field(name="percentComplete")
    """Represents progress percentage. Required."""

    @overload
    def __init__(
        self,
        *,
        evaluation_options: "_models.AnalyzeConversationAuthoringEvaluationOptions",
        model_label: str,
        training_config_version: str,
        percent_complete: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringEvaluationJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a evaluation job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    :ivar result: Represents evaluation task detailed result. Required.
    :vartype result:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringEvaluationJobResult
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""
    result: "_models.AnalyzeConversationAuthoringEvaluationJobResult" = rest_field()
    """Represents evaluation task detailed result. Required."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        result: "_models.AnalyzeConversationAuthoringEvaluationJobResult",
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringEvaluationOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options used running the evaluation.

    :ivar kind: Represents the evaluation kind. By default, the evaluation kind is set to
     percentage. Known values are: "percentage" and "manual".
    :vartype kind: str or ~azure.ai.language.conversations.authoring.models.EvaluationKind
    :ivar training_split_percentage: Represents the training dataset split percentage. Only needed
     in case the evaluation kind is percentage.
    :vartype training_split_percentage: int
    :ivar testing_split_percentage: Represents the testing dataset split percentage. Only needed in
     case the evaluation kind is percentage.
    :vartype testing_split_percentage: int
    """

    kind: Optional[Union[str, "_models.EvaluationKind"]] = rest_field()
    """Represents the evaluation kind. By default, the evaluation kind is set to percentage. Known
     values are: \"percentage\" and \"manual\"."""
    training_split_percentage: Optional[int] = rest_field(name="trainingSplitPercentage")
    """Represents the training dataset split percentage. Only needed in case the evaluation kind is
     percentage."""
    testing_split_percentage: Optional[int] = rest_field(name="testingSplitPercentage")
    """Represents the testing dataset split percentage. Only needed in case the evaluation kind is
     percentage."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[Union[str, "_models.EvaluationKind"]] = None,
        training_split_percentage: Optional[int] = None,
        testing_split_percentage: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation result summary.


    :ivar entities_evaluation: Contains the data related to entities evaluation. Required.
    :vartype entities_evaluation:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringEntitiesEvaluationSummary
    :ivar intents_evaluation: Contains the data related to intents evaluation. Required.
    :vartype intents_evaluation:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringIntentsEvaluationSummary
    :ivar evaluation_options: The options that were used while running the evaluation.
    :vartype evaluation_options:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringEvaluationOptions
    """

    entities_evaluation: "_models.AnalyzeConversationAuthoringEntitiesEvaluationSummary" = rest_field(
        name="entitiesEvaluation"
    )
    """Contains the data related to entities evaluation. Required."""
    intents_evaluation: "_models.AnalyzeConversationAuthoringIntentsEvaluationSummary" = rest_field(
        name="intentsEvaluation"
    )
    """Contains the data related to intents evaluation. Required."""
    evaluation_options: Optional["_models.AnalyzeConversationAuthoringEvaluationOptions"] = rest_field(
        name="evaluationOptions"
    )
    """The options that were used while running the evaluation."""

    @overload
    def __init__(
        self,
        *,
        entities_evaluation: "_models.AnalyzeConversationAuthoringEntitiesEvaluationSummary",
        intents_evaluation: "_models.AnalyzeConversationAuthoringIntentsEvaluationSummary",
        evaluation_options: Optional["_models.AnalyzeConversationAuthoringEvaluationOptions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedConversationOrchestration(_model_base.Model):  # pylint: disable=name-too-long
    """Defines the orchestration details for a Conversational project target.

    All required parameters must be populated in order to send to server.

    :ivar project_name: The name of the targeted project. Required.
    :vartype project_name: str
    :ivar deployment_name: The name of the targeted deployment. Required.
    :vartype deployment_name: str
    """

    project_name: str = rest_field(name="projectName")
    """The name of the targeted project. Required."""
    deployment_name: str = rest_field(name="deploymentName")
    """The name of the targeted deployment. Required."""

    @overload
    def __init__(
        self,
        *,
        project_name: str,
        deployment_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedOrchestrationOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options used to define the orchestration behavior of an intent.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AnalyzeConversationAuthoringExportedConversationOrchestrationOptions,
    AnalyzeConversationAuthoringExportedLuisOrchestrationOptions,
    AnalyzeConversationAuthoringExportedQuestionAnsweringOrchestrationOptions

    All required parameters must be populated in order to send to server.

    :ivar target_project_kind: Required. Known values are: "Luis", "Conversation", and
     "QuestionAnswering".
    :vartype target_project_kind: str or
     ~azure.ai.language.conversations.authoring.models.OrchestrationTargetProjectKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    target_project_kind: str = rest_discriminator(name="targetProjectKind")
    """Required. Known values are: \"Luis\", \"Conversation\", and \"QuestionAnswering\"."""

    @overload
    def __init__(
        self,
        *,
        target_project_kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedConversationOrchestrationOptions(
    AnalyzeConversationAuthoringExportedOrchestrationOptions, discriminator="Conversation"
):  # pylint: disable=name-too-long
    """Represents the orchestration options for a Conversational project target.

    All required parameters must be populated in order to send to server.

    :ivar conversation_orchestration: The Conversational project target details. Required.
    :vartype conversation_orchestration:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedConversationOrchestration
    :ivar target_project_kind: The kind of the target used in the orchestration flow. Required.
    :vartype target_project_kind: str or
     ~azure.ai.language.conversations.authoring.models.CONVERSATION
    """

    conversation_orchestration: "_models.AnalyzeConversationAuthoringExportedConversationOrchestration" = rest_field(
        name="conversationOrchestration"
    )
    """The Conversational project target details. Required."""
    target_project_kind: Literal[OrchestrationTargetProjectKind.CONVERSATION] = rest_discriminator(name="targetProjectKind")  # type: ignore
    """The kind of the target used in the orchestration flow. Required."""

    @overload
    def __init__(
        self,
        *,
        conversation_orchestration: "_models.AnalyzeConversationAuthoringExportedConversationOrchestration",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, target_project_kind=OrchestrationTargetProjectKind.CONVERSATION, **kwargs)


class AnalyzeConversationAuthoringExportedEntityList(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a list component of an entity.

    :ivar sublists: The sub-lists of the list component.
    :vartype sublists:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedEntitySublist]
    """

    sublists: Optional[List["_models.AnalyzeConversationAuthoringExportedEntitySublist"]] = rest_field()
    """The sub-lists of the list component."""

    @overload
    def __init__(
        self,
        *,
        sublists: Optional[List["_models.AnalyzeConversationAuthoringExportedEntitySublist"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedEntityListSynonym(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a list of synonyms inside a list component.

    :ivar language: Represents the language of the synonyms. This is BCP-47 representation of a
     language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar values_property: The list of synonyms.
    :vartype values_property: list[str]
    """

    language: Optional[str] = rest_field()
    """Represents the language of the synonyms. This is BCP-47 representation of a language. For
     example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    values_property: Optional[List[str]] = rest_field(name="values")
    """The list of synonyms."""

    @overload
    def __init__(
        self,
        *,
        language: Optional[str] = None,
        values_property: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedEntityRegex(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a regex component of an entity.

    :ivar expressions: The regex expressions of the regex component. These expressions follow the
     .NET regex syntax. For reference, check here:
     https://learn.microsoft.com/dotnet/standard/base-types/regular-expressions.
    :vartype expressions:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedEntityRegexExpression]
    """

    expressions: Optional[List["_models.AnalyzeConversationAuthoringExportedEntityRegexExpression"]] = rest_field()
    """The regex expressions of the regex component. These expressions follow the .NET regex syntax.
     For reference, check here:
     https://learn.microsoft.com/dotnet/standard/base-types/regular-expressions."""

    @overload
    def __init__(
        self,
        *,
        expressions: Optional[List["_models.AnalyzeConversationAuthoringExportedEntityRegexExpression"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedEntityRegexExpression(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a regex expression inside a regex component. This expression follows the .NET regex
    syntax. For reference, check here:
    https://learn.microsoft.com/dotnet/standard/base-types/regular-expressions.

    :ivar regex_key: The key of the regex expression.
    :vartype regex_key: str
    :ivar language: Represents the language of the regex expression. This is BCP-47 representation
     of a language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish
     etc.
    :vartype language: str
    :ivar regex_pattern: The regex pattern.
    :vartype regex_pattern: str
    """

    regex_key: Optional[str] = rest_field(name="regexKey")
    """The key of the regex expression."""
    language: Optional[str] = rest_field()
    """Represents the language of the regex expression. This is BCP-47 representation of a language.
     For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    regex_pattern: Optional[str] = rest_field(name="regexPattern")
    """The regex pattern."""

    @overload
    def __init__(
        self,
        *,
        regex_key: Optional[str] = None,
        language: Optional[str] = None,
        regex_pattern: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedEntitySublist(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a sub-list inside a list component.

    :ivar list_key: The key of the sub-list.
    :vartype list_key: str
    :ivar synonyms: The phrases of that correspond to the sub-list.
    :vartype synonyms:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedEntityListSynonym]
    """

    list_key: Optional[str] = rest_field(name="listKey")
    """The key of the sub-list."""
    synonyms: Optional[List["_models.AnalyzeConversationAuthoringExportedEntityListSynonym"]] = rest_field()
    """The phrases of that correspond to the sub-list."""

    @overload
    def __init__(
        self,
        *,
        list_key: Optional[str] = None,
        synonyms: Optional[List["_models.AnalyzeConversationAuthoringExportedEntityListSynonym"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedLuisOrchestration(_model_base.Model):  # pylint: disable=name-too-long
    """Defines the orchestration details for a LUIS application target.

    All required parameters must be populated in order to send to server.

    :ivar app_id: The LUIS application ID. Required.
    :vartype app_id: str
    :ivar app_version: The targeted version Id.
    :vartype app_version: str
    :ivar slot_name: The targeted slot name.
    :vartype slot_name: str
    """

    app_id: str = rest_field(name="appId")
    """The LUIS application ID. Required."""
    app_version: Optional[str] = rest_field(name="appVersion")
    """The targeted version Id."""
    slot_name: Optional[str] = rest_field(name="slotName")
    """The targeted slot name."""

    @overload
    def __init__(
        self,
        *,
        app_id: str,
        app_version: Optional[str] = None,
        slot_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedLuisOrchestrationOptions(
    AnalyzeConversationAuthoringExportedOrchestrationOptions, discriminator="Luis"
):  # pylint: disable=name-too-long
    """Represents the orchestration options for a LUIS application target.

    All required parameters must be populated in order to send to server.

    :ivar luis_orchestration: The LUIS application target details. Required.
    :vartype luis_orchestration:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedLuisOrchestration
    :ivar target_project_kind: The kind of the target used in the orchestration flow. Required.
    :vartype target_project_kind: str or ~azure.ai.language.conversations.authoring.models.LUIS
    """

    luis_orchestration: "_models.AnalyzeConversationAuthoringExportedLuisOrchestration" = rest_field(
        name="luisOrchestration"
    )
    """The LUIS application target details. Required."""
    target_project_kind: Literal[OrchestrationTargetProjectKind.LUIS] = rest_discriminator(name="targetProjectKind")  # type: ignore # pylint: disable=line-too-long
    """The kind of the target used in the orchestration flow. Required."""

    @overload
    def __init__(
        self,
        *,
        luis_orchestration: "_models.AnalyzeConversationAuthoringExportedLuisOrchestration",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, target_project_kind=OrchestrationTargetProjectKind.LUIS, **kwargs)


class AnalyzeConversationAuthoringExportedModelJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a job to create or updated an exported model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedPrebuiltEntity(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported prebuilt entity component.

    All required parameters must be populated in order to send to server.

    :ivar category: The prebuilt entity category. Required.
    :vartype category: str
    """

    category: str = rest_field()
    """The prebuilt entity category. Required."""

    @overload
    def __init__(
        self,
        *,
        category: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedProject(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported project.

    All required parameters must be populated in order to send to server.

    :ivar project_file_version: The version of the exported file. Required.
    :vartype project_file_version: str
    :ivar string_index_type: Specifies the method used to interpret string offsets. For additional
     information see https://aka.ms/text-analytics-offsets. Required. "Utf16CodeUnit"
    :vartype string_index_type: str or
     ~azure.ai.language.conversations.authoring.models.StringIndexType
    :ivar metadata: Represents the project metadata. Required.
    :vartype metadata:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringCreateProjectOptions
    :ivar assets: Represents the project assets.
    :vartype assets:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedProjectAssets
    """

    project_file_version: str = rest_field(name="projectFileVersion")
    """The version of the exported file. Required."""
    string_index_type: Union[str, "_models.StringIndexType"] = rest_field(name="stringIndexType")
    """Specifies the method used to interpret string offsets. For additional information see
     https://aka.ms/text-analytics-offsets. Required. \"Utf16CodeUnit\""""
    metadata: "_models.AnalyzeConversationAuthoringCreateProjectOptions" = rest_field()
    """Represents the project metadata. Required."""
    assets: Optional["_models.AnalyzeConversationAuthoringExportedProjectAssets"] = rest_field()
    """Represents the project assets."""

    @overload
    def __init__(
        self,
        *,
        project_file_version: str,
        string_index_type: Union[str, "_models.StringIndexType"],
        metadata: "_models.AnalyzeConversationAuthoringCreateProjectOptions",
        assets: Optional["_models.AnalyzeConversationAuthoringExportedProjectAssets"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedQuestionAnsweringOrchestration(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Defines the orchestration details for a Question Answering project target.

    All required parameters must be populated in order to send to server.

    :ivar project_name: The name of the target project. Required.
    :vartype project_name: str
    """

    project_name: str = rest_field(name="projectName")
    """The name of the target project. Required."""

    @overload
    def __init__(
        self,
        *,
        project_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedQuestionAnsweringOrchestrationOptions(
    AnalyzeConversationAuthoringExportedOrchestrationOptions, discriminator="QuestionAnswering"
):  # pylint: disable=name-too-long
    """Represents the orchestration options for a Question Answering project target.

    All required parameters must be populated in order to send to server.

    :ivar question_answering_orchestration: The Question Answering project details. Required.
    :vartype question_answering_orchestration:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedQuestionAnsweringOrchestration  # pylint: disable=line-too-long
    :ivar target_project_kind: The kind of the target used in the orchestration flow. Required.
    :vartype target_project_kind: str or
     ~azure.ai.language.conversations.authoring.models.QUESTION_ANSWERING
    """

    question_answering_orchestration: "_models.AnalyzeConversationAuthoringExportedQuestionAnsweringOrchestration" = (
        rest_field(name="questionAnsweringOrchestration")
    )
    """The Question Answering project details. Required."""
    target_project_kind: Literal[OrchestrationTargetProjectKind.QUESTION_ANSWERING] = rest_discriminator(name="targetProjectKind")  # type: ignore
    """The kind of the target used in the orchestration flow. Required."""

    @overload
    def __init__(
        self,
        *,
        question_answering_orchestration: "_models.AnalyzeConversationAuthoringExportedQuestionAnsweringOrchestration",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, target_project_kind=OrchestrationTargetProjectKind.QUESTION_ANSWERING, **kwargs)


class AnalyzeConversationAuthoringExportedTrainedModel(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported trained model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar exported_model_name: The exported model name. Required.
    :vartype exported_model_name: str
    :ivar model_id: The model ID. Required.
    :vartype model_id: str
    :ivar last_trained_date_time: The last trained date time of the model. Required.
    :vartype last_trained_date_time: ~datetime.datetime
    :ivar last_exported_model_date_time: The last exported date time of the model. Required.
    :vartype last_exported_model_date_time: ~datetime.datetime
    :ivar model_expiration_date: The model expiration date. Required.
    :vartype model_expiration_date: ~datetime.date
    :ivar model_training_config_version: The model training config version. Required.
    :vartype model_training_config_version: str
    """

    exported_model_name: str = rest_field(name="exportedModelName", visibility=["read"])
    """The exported model name. Required."""
    model_id: str = rest_field(name="modelId")
    """The model ID. Required."""
    last_trained_date_time: datetime.datetime = rest_field(name="lastTrainedDateTime", format="rfc3339")
    """The last trained date time of the model. Required."""
    last_exported_model_date_time: datetime.datetime = rest_field(name="lastExportedModelDateTime", format="rfc3339")
    """The last exported date time of the model. Required."""
    model_expiration_date: datetime.date = rest_field(name="modelExpirationDate")
    """The model expiration date. Required."""
    model_training_config_version: str = rest_field(name="modelTrainingConfigVersion")
    """The model training config version. Required."""

    @overload
    def __init__(
        self,
        *,
        model_id: str,
        last_trained_date_time: datetime.datetime,
        last_exported_model_date_time: datetime.datetime,
        model_expiration_date: datetime.date,
        model_training_config_version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportedUtteranceEntityLabel(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an entity label for an utterance.

    All required parameters must be populated in order to send to server.

    :ivar category: The category of the entity label. Required.
    :vartype category: str
    :ivar offset: Start position for the entity text. Required.
    :vartype offset: int
    :ivar length: Length for the entity text. Required.
    :vartype length: int
    """

    category: str = rest_field()
    """The category of the entity label. Required."""
    offset: int = rest_field()
    """Start position for the entity text. Required."""
    length: int = rest_field()
    """Length for the entity text. Required."""

    @overload
    def __init__(
        self,
        *,
        category: str,
        offset: int,
        length: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringExportProjectJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of an export job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    :ivar result_url: The URL to use in order to download the exported project.
    :vartype result_url: str
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""
    result_url: Optional[str] = rest_field(name="resultUrl")
    """The URL to use in order to download the exported project."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
        result_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringImportProjectJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of an import job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringIntentEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """The evaluation summary for an intent.


    :ivar f1: Represents the model precision. Required.
    :vartype f1: float
    :ivar precision: Represents the model recall. Required.
    :vartype precision: float
    :ivar recall: Represents the model F1 score. Required.
    :vartype recall: float
    :ivar true_positive_count: Represents the count of true positive. Required.
    :vartype true_positive_count: int
    :ivar true_negative_count: Represents the count of true negative. Required.
    :vartype true_negative_count: int
    :ivar false_positive_count: Represents the count of false positive. Required.
    :vartype false_positive_count: int
    :ivar false_negative_count: Represents the count of false negative. Required.
    :vartype false_negative_count: int
    """

    f1: float = rest_field()
    """Represents the model precision. Required."""
    precision: float = rest_field()
    """Represents the model recall. Required."""
    recall: float = rest_field()
    """Represents the model F1 score. Required."""
    true_positive_count: int = rest_field(name="truePositiveCount")
    """Represents the count of true positive. Required."""
    true_negative_count: int = rest_field(name="trueNegativeCount")
    """Represents the count of true negative. Required."""
    false_positive_count: int = rest_field(name="falsePositiveCount")
    """Represents the count of false positive. Required."""
    false_negative_count: int = rest_field(name="falseNegativeCount")
    """Represents the count of false negative. Required."""

    @overload
    def __init__(
        self,
        *,
        f1: float,
        precision: float,
        recall: float,
        true_positive_count: int,
        true_negative_count: int,
        false_positive_count: int,
        false_negative_count: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringIntentsEvaluationSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation summary for the project's intents.


    :ivar confusion_matrix: Represents the confusion matrix between two intents (the two intents
     can be the same). The matrix is between the intent that was labelled and the intent that was
     predicted. Required.
    :vartype confusion_matrix:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringConfusionMatrix
    :ivar intents: Represents the intents evaluation summary. Required.
    :vartype intents: dict[str,
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringIntentEvaluationSummary]
    :ivar micro_f1: Represents the micro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype micro_f1: float
    :ivar micro_precision: Represents the micro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype micro_precision: float
    :ivar micro_recall: Represents the micro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype micro_recall: float
    :ivar macro_f1: Represents the macro F1. Expected value is a float between 0 and 1 inclusive.
     Required.
    :vartype macro_f1: float
    :ivar macro_precision: Represents the macro precision. Expected value is a float between 0 and
     1 inclusive. Required.
    :vartype macro_precision: float
    :ivar macro_recall: Represents the macro recall. Expected value is a float between 0 and 1
     inclusive. Required.
    :vartype macro_recall: float
    """

    confusion_matrix: "_models.AnalyzeConversationAuthoringConfusionMatrix" = rest_field(name="confusionMatrix")
    """Represents the confusion matrix between two intents (the two intents can be the same). The
     matrix is between the intent that was labelled and the intent that was predicted. Required."""
    intents: Dict[str, "_models.AnalyzeConversationAuthoringIntentEvaluationSummary"] = rest_field()
    """Represents the intents evaluation summary. Required."""
    micro_f1: float = rest_field(name="microF1")
    """Represents the micro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_precision: float = rest_field(name="microPrecision")
    """Represents the micro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    micro_recall: float = rest_field(name="microRecall")
    """Represents the micro recall. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_f1: float = rest_field(name="macroF1")
    """Represents the macro F1. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_precision: float = rest_field(name="macroPrecision")
    """Represents the macro precision. Expected value is a float between 0 and 1 inclusive. Required."""
    macro_recall: float = rest_field(name="macroRecall")
    """Represents the macro recall. Expected value is a float between 0 and 1 inclusive. Required."""

    @overload
    def __init__(
        self,
        *,
        confusion_matrix: "_models.AnalyzeConversationAuthoringConfusionMatrix",
        intents: Dict[str, "_models.AnalyzeConversationAuthoringIntentEvaluationSummary"],
        micro_f1: float,
        micro_precision: float,
        micro_recall: float,
        macro_f1: float,
        macro_precision: float,
        macro_recall: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringLoadSnapshotJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of loading a snapshot job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringOrchestrationExportedIntent(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an exported intent for an orchestration project.

    All required parameters must be populated in order to send to server.

    :ivar orchestration: Specifies the behavior of this intent in the orchestration flow.
    :vartype orchestration:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringExportedOrchestrationOptions
    :ivar category: The intent category. Required.
    :vartype category: str
    """

    orchestration: Optional["_models.AnalyzeConversationAuthoringExportedOrchestrationOptions"] = rest_field()
    """Specifies the behavior of this intent in the orchestration flow."""
    category: str = rest_field()
    """The intent category. Required."""

    @overload
    def __init__(
        self,
        *,
        category: str,
        orchestration: Optional["_models.AnalyzeConversationAuthoringExportedOrchestrationOptions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringOrchestrationExportedProjectAssets(
    AnalyzeConversationAuthoringExportedProjectAssets, discriminator="Orchestration"
):  # pylint: disable=name-too-long
    """Represents the assets of an orchestration project.

    All required parameters must be populated in order to send to server.

    :ivar intents: Represents the intents of the project.
    :vartype intents:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringOrchestrationExportedIntent]
    :ivar utterances: Represents the utterances of the project.
    :vartype utterances:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringOrchestrationExportedUtterance]
    :ivar project_kind: The type of project containing the assets. Required. A project to connect
     and orchestrate Conversation, Custom question answering and LUIS projects together in one
     single project.
    :vartype project_kind: str or ~azure.ai.language.conversations.authoring.models.ORCHESTRATION
    """

    intents: Optional[List["_models.AnalyzeConversationAuthoringOrchestrationExportedIntent"]] = rest_field()
    """Represents the intents of the project."""
    utterances: Optional[List["_models.AnalyzeConversationAuthoringOrchestrationExportedUtterance"]] = rest_field()
    """Represents the utterances of the project."""
    project_kind: Literal[ProjectKind.ORCHESTRATION] = rest_discriminator(name="projectKind")  # type: ignore
    """The type of project containing the assets. Required. A project to connect and orchestrate
     Conversation, Custom question answering and LUIS projects together in one single project."""

    @overload
    def __init__(
        self,
        *,
        intents: Optional[List["_models.AnalyzeConversationAuthoringOrchestrationExportedIntent"]] = None,
        utterances: Optional[List["_models.AnalyzeConversationAuthoringOrchestrationExportedUtterance"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, project_kind=ProjectKind.ORCHESTRATION, **kwargs)


class AnalyzeConversationAuthoringOrchestrationExportedUtterance(_model_base.Model):  # pylint: disable=name-too-long
    """Represents an utterance of an orchestration project.

    All required parameters must be populated in order to send to server.

    :ivar text: The utterance text. Required.
    :vartype text: str
    :ivar language: Represents the utterance's language. This is BCP-47 representation of a
     language. For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
    :vartype language: str
    :ivar intent: The intent of the utterance. Required.
    :vartype intent: str
    :ivar dataset: The dataset for this utterance. Allowed values are 'Train' and 'Test'.
    :vartype dataset: str
    """

    text: str = rest_field()
    """The utterance text. Required."""
    language: Optional[str] = rest_field()
    """Represents the utterance's language. This is BCP-47 representation of a language. For example,
     use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc."""
    intent: str = rest_field()
    """The intent of the utterance. Required."""
    dataset: Optional[str] = rest_field()
    """The dataset for this utterance. Allowed values are 'Train' and 'Test'."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        intent: str,
        language: Optional[str] = None,
        dataset: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringPrebuiltEntities(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a list of the retrieved supported prebuilt entities.


    :ivar value: The supported prebuilt entities. Required.
    :vartype value:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringPrebuiltEntity]
    :ivar next_link: The next page link.
    :vartype next_link: str
    """

    value: List["_models.AnalyzeConversationAuthoringPrebuiltEntity"] = rest_field()
    """The supported prebuilt entities. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The next page link."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.AnalyzeConversationAuthoringPrebuiltEntity"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringPrebuiltEntity(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a supported prebuilt entity.


    :ivar category: The prebuilt entity category. Required.
    :vartype category: str
    :ivar description: The description. Required.
    :vartype description: str
    :ivar examples: English examples for the entity. Required.
    :vartype examples: str
    """

    category: str = rest_field()
    """The prebuilt entity category. Required."""
    description: str = rest_field()
    """The description. Required."""
    examples: str = rest_field()
    """English examples for the entity. Required."""

    @overload
    def __init__(
        self,
        *,
        category: str,
        description: str,
        examples: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringProjectDeletionJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a project deletion job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringProjectDeployment(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a project deployment.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar deployment_name: Represents deployment name. Required.
    :vartype deployment_name: str
    :ivar model_id: Represents deployment modelId. Required.
    :vartype model_id: str
    :ivar last_trained_date_time: Represents deployment last trained time. Required.
    :vartype last_trained_date_time: ~datetime.datetime
    :ivar last_deployed_date_time: Represents deployment last deployed time. Required.
    :vartype last_deployed_date_time: ~datetime.datetime
    :ivar deployment_expiration_date: Represents deployment expiration date in the runtime.
     Required.
    :vartype deployment_expiration_date: ~datetime.date
    :ivar model_training_config_version: Represents model training config version. Required.
    :vartype model_training_config_version: str
    :ivar assigned_resources: Represents the metadata of the assigned Azure resources. Required.
    :vartype assigned_resources:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringDeploymentResource]
    """

    deployment_name: str = rest_field(name="deploymentName", visibility=["read"])
    """Represents deployment name. Required."""
    model_id: str = rest_field(name="modelId")
    """Represents deployment modelId. Required."""
    last_trained_date_time: datetime.datetime = rest_field(name="lastTrainedDateTime", format="rfc3339")
    """Represents deployment last trained time. Required."""
    last_deployed_date_time: datetime.datetime = rest_field(name="lastDeployedDateTime", format="rfc3339")
    """Represents deployment last deployed time. Required."""
    deployment_expiration_date: datetime.date = rest_field(name="deploymentExpirationDate")
    """Represents deployment expiration date in the runtime. Required."""
    model_training_config_version: str = rest_field(name="modelTrainingConfigVersion")
    """Represents model training config version. Required."""
    assigned_resources: List["_models.AnalyzeConversationAuthoringDeploymentResource"] = rest_field(
        name="assignedResources"
    )
    """Represents the metadata of the assigned Azure resources. Required."""

    @overload
    def __init__(
        self,
        *,
        model_id: str,
        last_trained_date_time: datetime.datetime,
        last_deployed_date_time: datetime.datetime,
        deployment_expiration_date: datetime.date,
        model_training_config_version: str,
        assigned_resources: List["_models.AnalyzeConversationAuthoringDeploymentResource"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringProjectMetadata(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the metadata of a project.


    :ivar created_date_time: Represents the project creation datetime. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_modified_date_time: Represents the project creation datetime. Required.
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_trained_date_time: Represents the project last trained datetime.
    :vartype last_trained_date_time: ~datetime.datetime
    :ivar last_deployed_date_time: Represents the project last deployed datetime.
    :vartype last_deployed_date_time: ~datetime.datetime
    :ivar project_kind: Represents the project kind. Required. Known values are: "Conversation",
     "Orchestration", and "CustomConversationSummarization".
    :vartype project_kind: str or ~azure.ai.language.conversations.authoring.models.ProjectKind
    :ivar settings: The project settings.
    :vartype settings:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringProjectSettings
    :ivar storage_input_container_name: The storage container name in case of conversation
     summarization.
    :vartype storage_input_container_name: str
    :ivar project_name: The new project name. Required.
    :vartype project_name: str
    :ivar multilingual: Whether the project would be used for multiple languages or not.
    :vartype multilingual: bool
    :ivar description: The project description.
    :vartype description: str
    :ivar language: The project language. This is BCP-47 representation of a language. For example,
     use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    """

    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """Represents the project creation datetime. Required."""
    last_modified_date_time: datetime.datetime = rest_field(name="lastModifiedDateTime", format="rfc3339")
    """Represents the project creation datetime. Required."""
    last_trained_date_time: Optional[datetime.datetime] = rest_field(name="lastTrainedDateTime", format="rfc3339")
    """Represents the project last trained datetime."""
    last_deployed_date_time: Optional[datetime.datetime] = rest_field(name="lastDeployedDateTime", format="rfc3339")
    """Represents the project last deployed datetime."""
    project_kind: Union[str, "_models.ProjectKind"] = rest_field(name="projectKind", visibility=["read", "create"])
    """Represents the project kind. Required. Known values are: \"Conversation\", \"Orchestration\",
     and \"CustomConversationSummarization\"."""
    settings: Optional["_models.AnalyzeConversationAuthoringProjectSettings"] = rest_field(
        visibility=["read", "create"]
    )
    """The project settings."""
    storage_input_container_name: Optional[str] = rest_field(
        name="storageInputContainerName", visibility=["read", "create"]
    )
    """The storage container name in case of conversation summarization."""
    project_name: str = rest_field(name="projectName", visibility=["read", "create"])
    """The new project name. Required."""
    multilingual: Optional[bool] = rest_field(visibility=["read", "create"])
    """Whether the project would be used for multiple languages or not."""
    description: Optional[str] = rest_field(visibility=["read", "create"])
    """The project description."""
    language: str = rest_field(visibility=["read", "create"])
    """The project language. This is BCP-47 representation of a language. For example, use \"en\" for
     English, \"en-gb\" for English (UK), \"es\" for Spanish etc. Required."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_modified_date_time: datetime.datetime,
        project_kind: Union[str, "_models.ProjectKind"],
        project_name: str,
        language: str,
        last_trained_date_time: Optional[datetime.datetime] = None,
        last_deployed_date_time: Optional[datetime.datetime] = None,
        settings: Optional["_models.AnalyzeConversationAuthoringProjectSettings"] = None,
        storage_input_container_name: Optional[str] = None,
        multilingual: Optional[bool] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringProjectSettings(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the settings used to define the project behavior.


    :ivar confidence_threshold: The threshold of the intent with the highest confidence, at which
     the prediction will automatically be changed to "None". The value of the threshold should be
     between 0 and 1 inclusive. Required.
    :vartype confidence_threshold: float
    """

    confidence_threshold: float = rest_field(name="confidenceThreshold")
    """The threshold of the intent with the highest confidence, at which the prediction will
     automatically be changed to \"None\". The value of the threshold should be between 0 and 1
     inclusive. Required."""

    @overload
    def __init__(
        self,
        *,
        confidence_threshold: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringProjectTrainedModel(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a trained model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar label: The trained model label. Required.
    :vartype label: str
    :ivar model_id: The model ID. Required.
    :vartype model_id: str
    :ivar last_trained_date_time: The last trained date time of the model. Required.
    :vartype last_trained_date_time: ~datetime.datetime
    :ivar last_training_duration_in_seconds: The duration of the model's last training request in
     seconds. Required.
    :vartype last_training_duration_in_seconds: int
    :ivar model_expiration_date: The model expiration date. Required.
    :vartype model_expiration_date: ~datetime.date
    :ivar model_training_config_version: The model training config version. Required.
    :vartype model_training_config_version: str
    :ivar has_snapshot: The flag to indicate if the trained model has a snapshot ready. Required.
    :vartype has_snapshot: bool
    """

    label: str = rest_field(visibility=["read"])
    """The trained model label. Required."""
    model_id: str = rest_field(name="modelId")
    """The model ID. Required."""
    last_trained_date_time: datetime.datetime = rest_field(name="lastTrainedDateTime", format="rfc3339")
    """The last trained date time of the model. Required."""
    last_training_duration_in_seconds: int = rest_field(name="lastTrainingDurationInSeconds")
    """The duration of the model's last training request in seconds. Required."""
    model_expiration_date: datetime.date = rest_field(name="modelExpirationDate")
    """The model expiration date. Required."""
    model_training_config_version: str = rest_field(name="modelTrainingConfigVersion")
    """The model training config version. Required."""
    has_snapshot: bool = rest_field(name="hasSnapshot")
    """The flag to indicate if the trained model has a snapshot ready. Required."""

    @overload
    def __init__(
        self,
        *,
        model_id: str,
        last_trained_date_time: datetime.datetime,
        last_training_duration_in_seconds: int,
        model_expiration_date: datetime.date,
        model_training_config_version: str,
        has_snapshot: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringResourceMetadata(_model_base.Model):  # pylint: disable=name-too-long
    """Represents metadata for the Azure resource..

    All required parameters must be populated in order to send to server.

    :ivar azure_resource_id: Represents the Azure resource ID. Required.
    :vartype azure_resource_id: str
    :ivar custom_domain: Represents the Azure resource custom domain. Required.
    :vartype custom_domain: str
    :ivar region: Represents the Azure resource region. Required.
    :vartype region: str
    """

    azure_resource_id: str = rest_field(name="azureResourceId")
    """Represents the Azure resource ID. Required."""
    custom_domain: str = rest_field(name="customDomain")
    """Represents the Azure resource custom domain. Required."""
    region: str = rest_field()
    """Represents the Azure resource region. Required."""

    @overload
    def __init__(
        self,
        *,
        azure_resource_id: str,
        custom_domain: str,
        region: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringSubTrainingJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the detailed state of a training sub-operation.


    :ivar percent_complete: Represents progress percentage. Required.
    :vartype percent_complete: int
    :ivar start_date_time: Represents the start date time.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: Represents the end date time.
    :vartype end_date_time: ~datetime.datetime
    :ivar status: Represents the status of the sub-operation. Required. Known values are:
     "notStarted", "running", "succeeded", "failed", "cancelled", "cancelling", and
     "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    """

    percent_complete: int = rest_field(name="percentComplete")
    """Represents progress percentage. Required."""
    start_date_time: Optional[datetime.datetime] = rest_field(name="startDateTime", format="rfc3339")
    """Represents the start date time."""
    end_date_time: Optional[datetime.datetime] = rest_field(name="endDateTime", format="rfc3339")
    """Represents the end date time."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """Represents the status of the sub-operation. Required. Known values are: \"notStarted\",
     \"running\", \"succeeded\", \"failed\", \"cancelled\", \"cancelling\", and
     \"partiallyCompleted\"."""

    @overload
    def __init__(
        self,
        *,
        percent_complete: int,
        status: Union[str, "_models.JobStatus"],
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringSupportedLanguage(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a supported language.


    :ivar language_name: The language name. Required.
    :vartype language_name: str
    :ivar language_code: The language code. This is BCP-47 representation of a language. For
     example, "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language_code: str
    """

    language_name: str = rest_field(name="languageName")
    """The language name. Required."""
    language_code: str = rest_field(name="languageCode")
    """The language code. This is BCP-47 representation of a language. For example, \"en\" for
     English, \"en-gb\" for English (UK), \"es\" for Spanish etc. Required."""

    @overload
    def __init__(
        self,
        *,
        language_name: str,
        language_code: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringSupportedLanguages(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a list of retrieved languages.


    :ivar value: The list of the languages. Required.
    :vartype value:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringSupportedLanguage]
    :ivar next_link: The next page link.
    :vartype next_link: str
    """

    value: List["_models.AnalyzeConversationAuthoringSupportedLanguage"] = rest_field()
    """The list of the languages. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The next page link."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.AnalyzeConversationAuthoringSupportedLanguage"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringSwapDeploymentsJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a deployment job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringSwapDeploymentsOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for swapping two deployments together.

    All required parameters must be populated in order to send to server.

    :ivar first_deployment_name: Represents the first deployment name. Required.
    :vartype first_deployment_name: str
    :ivar second_deployment_name: Represents the second deployment name. Required.
    :vartype second_deployment_name: str
    """

    first_deployment_name: str = rest_field(name="firstDeploymentName")
    """Represents the first deployment name. Required."""
    second_deployment_name: str = rest_field(name="secondDeploymentName")
    """Represents the second deployment name. Required."""

    @overload
    def __init__(
        self,
        *,
        first_deployment_name: str,
        second_deployment_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringTrainingConfigVersion(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a training config version.


    :ivar training_config_version: Represents the version of the config. Required.
    :vartype training_config_version: str
    :ivar model_expiration_date: Represents the training config version expiration date. Required.
    :vartype model_expiration_date: ~datetime.date
    """

    training_config_version: str = rest_field(name="trainingConfigVersion")
    """Represents the version of the config. Required."""
    model_expiration_date: datetime.date = rest_field(name="modelExpirationDate")
    """Represents the training config version expiration date. Required."""

    @overload
    def __init__(
        self,
        *,
        training_config_version: str,
        model_expiration_date: datetime.date,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringTrainingConfigVersions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents a list of training config versions.


    :ivar value: The list of the training config versions. Required.
    :vartype value:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringTrainingConfigVersion]
    :ivar next_link: The next page link.
    :vartype next_link: str
    """

    value: List["_models.AnalyzeConversationAuthoringTrainingConfigVersion"] = rest_field()
    """The list of the training config versions. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The next page link."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.AnalyzeConversationAuthoringTrainingConfigVersion"],
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringTrainingJobOptions(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the options for starting a new training job.

    All required parameters must be populated in order to send to server.

    :ivar model_label: Represents the output model label. Required.
    :vartype model_label: str
    :ivar training_config_version: Represents training config version. By default, "latest" value
     is used which uses the latest released training config version.
    :vartype training_config_version: str
    :ivar training_mode: Represents the mode of the training operation. Required. Known values are:
     "advanced" and "standard".
    :vartype training_mode: str or ~azure.ai.language.conversations.authoring.models.TrainingMode
    :ivar evaluation_options: Represents the evaluation options. By default, the evaluation kind is
     percentage, with training split percentage as 80, and testing split percentage as 20.
    :vartype evaluation_options:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringEvaluationOptions
    """

    model_label: str = rest_field(name="modelLabel")
    """Represents the output model label. Required."""
    training_config_version: Optional[str] = rest_field(name="trainingConfigVersion")
    """Represents training config version. By default, \"latest\" value is used which uses the latest
     released training config version."""
    training_mode: Union[str, "_models.TrainingMode"] = rest_field(name="trainingMode")
    """Represents the mode of the training operation. Required. Known values are: \"advanced\" and
     \"standard\"."""
    evaluation_options: Optional["_models.AnalyzeConversationAuthoringEvaluationOptions"] = rest_field(
        name="evaluationOptions"
    )
    """Represents the evaluation options. By default, the evaluation kind is percentage, with training
     split percentage as 80, and testing split percentage as 20."""

    @overload
    def __init__(
        self,
        *,
        model_label: str,
        training_mode: Union[str, "_models.TrainingMode"],
        training_config_version: Optional[str] = None,
        evaluation_options: Optional["_models.AnalyzeConversationAuthoringEvaluationOptions"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringTrainingJobResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the output of a training job.


    :ivar model_label: Represents trained model label. Required.
    :vartype model_label: str
    :ivar training_config_version: Represents training config version. Required.
    :vartype training_config_version: str
    :ivar training_mode: Represents the mode of the training operation. Known values are:
     "advanced" and "standard".
    :vartype training_mode: str or ~azure.ai.language.conversations.authoring.models.TrainingMode
    :ivar training_status: Represents the model training status. Required.
    :vartype training_status:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringSubTrainingJobState
    :ivar evaluation_status: Represents model evaluation status.
    :vartype evaluation_status:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringSubTrainingJobState
    :ivar estimated_end_date_time: Represents the estimated end date time for training and
     evaluation.
    :vartype estimated_end_date_time: ~datetime.datetime
    """

    model_label: str = rest_field(name="modelLabel")
    """Represents trained model label. Required."""
    training_config_version: str = rest_field(name="trainingConfigVersion")
    """Represents training config version. Required."""
    training_mode: Optional[Union[str, "_models.TrainingMode"]] = rest_field(name="trainingMode")
    """Represents the mode of the training operation. Known values are: \"advanced\" and \"standard\"."""
    training_status: "_models.AnalyzeConversationAuthoringSubTrainingJobState" = rest_field(name="trainingStatus")
    """Represents the model training status. Required."""
    evaluation_status: Optional["_models.AnalyzeConversationAuthoringSubTrainingJobState"] = rest_field(
        name="evaluationStatus"
    )
    """Represents model evaluation status."""
    estimated_end_date_time: Optional[datetime.datetime] = rest_field(name="estimatedEndDateTime", format="rfc3339")
    """Represents the estimated end date time for training and evaluation."""

    @overload
    def __init__(
        self,
        *,
        model_label: str,
        training_config_version: str,
        training_status: "_models.AnalyzeConversationAuthoringSubTrainingJobState",
        training_mode: Optional[Union[str, "_models.TrainingMode"]] = None,
        evaluation_status: Optional["_models.AnalyzeConversationAuthoringSubTrainingJobState"] = None,
        estimated_end_date_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringTrainingJobState(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the state of a training job.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar job_id: The job ID. Required.
    :vartype job_id: str
    :ivar created_date_time: The creation date time of the job. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_updated_date_time: The last date time the job was updated. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar expiration_date_time: The expiration date time of the job.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar status: The job status. Required. Known values are: "notStarted", "running", "succeeded",
     "failed", "cancelled", "cancelling", and "partiallyCompleted".
    :vartype status: str or ~azure.ai.language.conversations.authoring.models.JobStatus
    :ivar warnings: The warnings that were encountered while executing the job.
    :vartype warnings: list[~azure.ai.language.conversations.authoring.models.Warning]
    :ivar errors: The errors encountered while executing the job.
    :vartype errors: list[~azure.ai.language.conversations.authoring.models.Error]
    :ivar result: Represents training tasks detailed result. Required.
    :vartype result:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringTrainingJobResult
    """

    job_id: str = rest_field(name="jobId", visibility=["read"])
    """The job ID. Required."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """The creation date time of the job. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """The last date time the job was updated. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """The expiration date time of the job."""
    status: Union[str, "_models.JobStatus"] = rest_field()
    """The job status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"failed\", \"cancelled\", \"cancelling\", and \"partiallyCompleted\"."""
    warnings: Optional[List["_models.Warning"]] = rest_field()
    """The warnings that were encountered while executing the job."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """The errors encountered while executing the job."""
    result: "_models.AnalyzeConversationAuthoringTrainingJobResult" = rest_field()
    """Represents training tasks detailed result. Required."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.JobStatus"],
        result: "_models.AnalyzeConversationAuthoringTrainingJobResult",
        expiration_date_time: Optional[datetime.datetime] = None,
        warnings: Optional[List["_models.Warning"]] = None,
        errors: Optional[List["_models.Error"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringUnassignDeploymentResourcesOptions(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Represents the options to unassign Azure resources from a project.

    All required parameters must be populated in order to send to server.

    :ivar assigned_resource_ids: Represents the assigned resource IDs to be unassigned. Required.
    :vartype assigned_resource_ids: list[str]
    """

    assigned_resource_ids: List[str] = rest_field(name="assignedResourceIds")
    """Represents the assigned resource IDs to be unassigned. Required."""

    @overload
    def __init__(
        self,
        *,
        assigned_resource_ids: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringUtteranceEntitiesEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the comparison between the expected and predicted entities for an utterance.


    :ivar expected_entities: Represents the expected entity labels. Required.
    :vartype expected_entities:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringUtteranceEntityEvaluationResult]
    :ivar predicted_entities: Represents the predicted entity labels. Required.
    :vartype predicted_entities:
     list[~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringUtteranceEntityEvaluationResult]
    """

    expected_entities: List["_models.AnalyzeConversationAuthoringUtteranceEntityEvaluationResult"] = rest_field(
        name="expectedEntities"
    )
    """Represents the expected entity labels. Required."""
    predicted_entities: List["_models.AnalyzeConversationAuthoringUtteranceEntityEvaluationResult"] = rest_field(
        name="predictedEntities"
    )
    """Represents the predicted entity labels. Required."""

    @overload
    def __init__(
        self,
        *,
        expected_entities: List["_models.AnalyzeConversationAuthoringUtteranceEntityEvaluationResult"],
        predicted_entities: List["_models.AnalyzeConversationAuthoringUtteranceEntityEvaluationResult"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringUtteranceEntityEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation output of an entity label or prediction.


    :ivar category: Represents the entity category. Required.
    :vartype category: str
    :ivar offset: Represents the entity offset index relative to the original text. Required.
    :vartype offset: int
    :ivar length: Represents the entity length. Required.
    :vartype length: int
    """

    category: str = rest_field()
    """Represents the entity category. Required."""
    offset: int = rest_field()
    """Represents the entity offset index relative to the original text. Required."""
    length: int = rest_field()
    """Represents the entity length. Required."""

    @overload
    def __init__(
        self,
        *,
        category: str,
        offset: int,
        length: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringUtteranceEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the evaluation result for an utterance.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar text: Represents the utterance text. Required.
    :vartype text: str
    :ivar language: Represents the utterance language. This is BCP-47 representation of a language.
     For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish etc. Required.
    :vartype language: str
    :ivar entities_result: Represents the entities results for the utterance. Required.
    :vartype entities_result:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringUtteranceEntitiesEvaluationResult
    :ivar intents_result: Represents the intents results for the utterance. Required.
    :vartype intents_result:
     ~azure.ai.language.conversations.authoring.models.AnalyzeConversationAuthoringUtteranceIntentsEvaluationResult
    """

    text: str = rest_field(visibility=["read"])
    """Represents the utterance text. Required."""
    language: str = rest_field()
    """Represents the utterance language. This is BCP-47 representation of a language. For example,
     use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc. Required."""
    entities_result: "_models.AnalyzeConversationAuthoringUtteranceEntitiesEvaluationResult" = rest_field(
        name="entitiesResult"
    )
    """Represents the entities results for the utterance. Required."""
    intents_result: "_models.AnalyzeConversationAuthoringUtteranceIntentsEvaluationResult" = rest_field(
        name="intentsResult"
    )
    """Represents the intents results for the utterance. Required."""

    @overload
    def __init__(
        self,
        *,
        language: str,
        entities_result: "_models.AnalyzeConversationAuthoringUtteranceEntitiesEvaluationResult",
        intents_result: "_models.AnalyzeConversationAuthoringUtteranceIntentsEvaluationResult",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeConversationAuthoringUtteranceIntentsEvaluationResult(_model_base.Model):  # pylint: disable=name-too-long
    """Represents the comparison between the expected and the predicted intent for an utterance.


    :ivar expected_intent: Represents the utterance's expected intent. Required.
    :vartype expected_intent: str
    :ivar predicted_intent: Represents the utterance's predicted intent. Required.
    :vartype predicted_intent: str
    """

    expected_intent: str = rest_field(name="expectedIntent")
    """Represents the utterance's expected intent. Required."""
    predicted_intent: str = rest_field(name="predictedIntent")
    """Represents the utterance's predicted intent. Required."""

    @overload
    def __init__(
        self,
        *,
        expected_intent: str,
        predicted_intent: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Error(_model_base.Model):
    """The error object.


    :ivar code: One of a server-defined set of error codes. Required. Known values are:
     "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
     "ProjectNotFound", "OperationNotFound", "AzureCognitiveSearchNotFound",
     "AzureCognitiveSearchIndexNotFound", "TooManyRequests", "AzureCognitiveSearchThrottling",
     "AzureCognitiveSearchIndexLimitReached", "InternalServerError", "ServiceUnavailable",
     "Timeout", "QuotaExceeded", "Conflict", and "Warning".
    :vartype code: str or ~azure.ai.language.conversations.authoring.models.ErrorCode
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.ai.language.conversations.authoring.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.conversations.authoring.models.InnerErrorModel
    """

    code: Union[str, "_models.ErrorCode"] = rest_field()
    """One of a server-defined set of error codes. Required. Known values are: \"InvalidRequest\",
     \"InvalidArgument\", \"Unauthorized\", \"Forbidden\", \"NotFound\", \"ProjectNotFound\",
     \"OperationNotFound\", \"AzureCognitiveSearchNotFound\", \"AzureCognitiveSearchIndexNotFound\",
     \"TooManyRequests\", \"AzureCognitiveSearchThrottling\",
     \"AzureCognitiveSearchIndexLimitReached\", \"InternalServerError\", \"ServiceUnavailable\",
     \"Timeout\", \"QuotaExceeded\", \"Conflict\", and \"Warning\"."""
    message: str = rest_field()
    """A human-readable representation of the error. Required."""
    target: Optional[str] = rest_field()
    """The target of the error."""
    details: Optional[List["_models.Error"]] = rest_field()
    """An array of details about specific errors that led to this reported error."""
    innererror: Optional["_models.InnerErrorModel"] = rest_field()
    """An object containing more specific information than the current object about
     the error."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.ErrorCode"],
        message: str,
        target: Optional[str] = None,
        details: Optional[List["_models.Error"]] = None,
        innererror: Optional["_models.InnerErrorModel"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """Error response.

    All required parameters must be populated in order to send to server.

    :ivar error: The error object. Required.
    :vartype error: ~azure.ai.language.conversations.authoring.models.Error
    """

    error: "_models.Error" = rest_field()
    """The error object. Required."""

    @overload
    def __init__(
        self,
        *,
        error: "_models.Error",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExportedModelOptions(_model_base.Model):
    """Represents the options for creating or replacing an exported model.

    All required parameters must be populated in order to send to server.

    :ivar trained_model_label: The trained model label. Required.
    :vartype trained_model_label: str
    """

    trained_model_label: str = rest_field(name="trainedModelLabel")
    """The trained model label. Required."""

    @overload
    def __init__(
        self,
        *,
        trained_model_label: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InnerErrorModel(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API
    guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.


    :ivar code: One of a server-defined set of error codes. Required. Known values are:
     "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
     "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure",
     "InvalidRequestBodyFormat", "EmptyRequest", "MissingInputDocuments", "InvalidDocument",
     "ModelVersionIncorrect", "InvalidDocumentBatch", "UnsupportedLanguageCode", and
     "InvalidCountryHint".
    :vartype code: str or ~azure.ai.language.conversations.authoring.models.InnerErrorCode
    :ivar message: Error message. Required.
    :vartype message: str
    :ivar details: Error details.
    :vartype details: dict[str, str]
    :ivar target: Error target.
    :vartype target: str
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.conversations.authoring.models.InnerErrorModel
    """

    code: Union[str, "_models.InnerErrorCode"] = rest_field()
    """One of a server-defined set of error codes. Required. Known values are: \"InvalidRequest\",
     \"InvalidParameterValue\", \"KnowledgeBaseNotFound\", \"AzureCognitiveSearchNotFound\",
     \"AzureCognitiveSearchThrottling\", \"ExtractionFailure\", \"InvalidRequestBodyFormat\",
     \"EmptyRequest\", \"MissingInputDocuments\", \"InvalidDocument\", \"ModelVersionIncorrect\",
     \"InvalidDocumentBatch\", \"UnsupportedLanguageCode\", and \"InvalidCountryHint\"."""
    message: str = rest_field()
    """Error message. Required."""
    details: Optional[Dict[str, str]] = rest_field()
    """Error details."""
    target: Optional[str] = rest_field()
    """Error target."""
    innererror: Optional["_models.InnerErrorModel"] = rest_field()
    """An object containing more specific information than the current object about the error."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.InnerErrorCode"],
        message: str,
        details: Optional[Dict[str, str]] = None,
        target: Optional[str] = None,
        innererror: Optional["_models.InnerErrorModel"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Warning(_model_base.Model):
    """Represents a warning that was encountered while executing the request.


    :ivar code: The warning code. Required.
    :vartype code: str
    :ivar message: The warning message. Required.
    :vartype message: str
    """

    code: str = rest_field()
    """The warning code. Required."""
    message: str = rest_field()
    """The warning message. Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
