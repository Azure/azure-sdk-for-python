# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import ConversationAuthoringClientTestBase, ConversationAuthoringPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationAuthoringProjectOperationsOperations(ConversationAuthoringClientTestBase):
    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_list_trained_models(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.list_trained_models(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_list_training_jobs(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.list_training_jobs(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_list_deployment_resources(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.list_deployment_resources(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_list_deployments(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.list_deployments(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_list_exported_models(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.list_exported_models(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_begin_assign_deployment_resources(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.begin_assign_deployment_resources(
            project_name="str",
            body={"resourcesMetadata": [{"azureResourceId": "str", "customDomain": "str", "region": "str"}]},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_begin_unassign_deployment_resources(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.begin_unassign_deployment_resources(
            project_name="str",
            body={"assignedResourceIds": ["str"]},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_get_assign_deployment_resources_status(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.get_assign_deployment_resources_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_get_unassign_deployment_resources_status(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.get_unassign_deployment_resources_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_begin_swap_deployments(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.begin_swap_deployments(
            project_name="str",
            body={"firstDeploymentName": "str", "secondDeploymentName": "str"},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_get_swap_deployments_status(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.get_swap_deployments_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_get_project(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.get_project(
            project_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_get_project_deletion_status(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.get_project_deletion_status(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_begin_export(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.begin_export(
            project_name="str",
            string_index_type="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_get_export_status(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.get_export_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_copy_project_authorization(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.copy_project_authorization(
            project_name="str",
            body={"projectKind": "str", "allowOverwrite": bool, "storageInputContainerName": "str"},
            project_kind="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_begin_copy_project(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.begin_copy_project(
            project_name="str",
            body={
                "accessToken": "str",
                "expiresAt": "2020-02-20 00:00:00",
                "projectKind": "str",
                "targetProjectName": "str",
                "targetResourceId": "str",
                "targetResourceRegion": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_get_copy_project_status(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.get_copy_project_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_begin_train(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.begin_train(
            project_name="str",
            body={
                "modelLabel": "str",
                "trainingMode": "str",
                "dataGenerationSettings": {
                    "dataGenerationConnectionInfo": {"deploymentName": "str", "kind": "str", "resourceId": "str"},
                    "enableDataGeneration": bool,
                },
                "evaluationOptions": {"kind": "str", "testingSplitPercentage": 0, "trainingSplitPercentage": 0},
                "trainingConfigVersion": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_get_training_status(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.get_training_status(
            project_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_project_operations_begin_cancel_training_job(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.project_operations.begin_cancel_training_job(
            project_name="str",
            job_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
