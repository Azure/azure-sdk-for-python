# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import ConversationAuthoringProjectClientTestBase, ConversationAuthoringProjectPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationAuthoringProjectProjectOperations(ConversationAuthoringProjectClientTestBase):
    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_list_trained_models(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.list_trained_models(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_list_training_jobs(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.list_training_jobs(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_list_deployment_resources(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.list_deployment_resources(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_list_deployments(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.list_deployments(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_list_exported_models(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.list_exported_models(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_get_project(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.get_project(
            project_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_copy_project_authorization(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.copy_project_authorization(
            project_name="str",
            body={"projectKind": "str", "allowOverwrite": bool, "storageInputContainerName": "str"},
            project_kind="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_begin_train(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.begin_train(
            project_name="str",
            body={
                "modelLabel": "str",
                "trainingMode": "str",
                "dataGenerationSettings": {
                    "dataGenerationConnectionInfo": {"deploymentName": "str", "kind": "str", "resourceId": "str"},
                    "enableDataGeneration": bool,
                },
                "evaluationOptions": {"kind": "str", "testingSplitPercentage": 0, "trainingSplitPercentage": 0},
                "trainingConfigVersion": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_project_begin_cancel_training_job(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.project.begin_cancel_training_job(
            project_name="str",
            job_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
