# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ConversationAuthoringPreparer
from testpreparer_async import ConversationAuthoringClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationAuthoringExportedModelOperationsAsync(ConversationAuthoringClientTestBaseAsync):
    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_exported_model_get_exported_model(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = await client.exported_model.get_exported_model(
            project_name="str",
            exported_model_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_exported_model_begin_delete_exported_model(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = await (
            await client.exported_model.begin_delete_exported_model(
                project_name="str",
                exported_model_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_exported_model_begin_create_or_update_exported_model(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = await (
            await client.exported_model.begin_create_or_update_exported_model(
                project_name="str",
                exported_model_name="str",
                body={"trainedModelLabel": "str"},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_exported_model_get_exported_model_job_status(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = await client.exported_model.get_exported_model_job_status(
            project_name="str",
            exported_model_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...
