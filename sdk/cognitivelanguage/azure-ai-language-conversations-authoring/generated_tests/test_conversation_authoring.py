# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import ConversationAuthoringClientTestBase, ConversationAuthoringPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationAuthoring(ConversationAuthoringClientTestBase):
    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_deployments(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_deployments(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_projects(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_projects()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_supported_languages(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_supported_languages(
            project_kind="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_assigned_resource_deployments(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_assigned_resource_deployments()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_deployment_resources(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_deployment_resources(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_supported_prebuilt_entities(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_supported_prebuilt_entities()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_training_config_versions(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_training_config_versions(
            project_kind="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_training_jobs(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_training_jobs(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_trained_models(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_trained_models(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy
    def test_conversation_authoring_list_exported_models(self, conversationauthoring_endpoint):
        client = self.create_client(endpoint=conversationauthoring_endpoint)
        response = client.conversation_authoring_list_exported_models(
            project_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
