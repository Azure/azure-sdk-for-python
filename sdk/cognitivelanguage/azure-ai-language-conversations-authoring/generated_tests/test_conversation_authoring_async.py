# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ConversationAuthoringPreparer
from testpreparer_async import ConversationAuthoringClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationAuthoringAsync(ConversationAuthoringClientTestBaseAsync):
    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_list_projects(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = client.list_projects()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_list_supported_languages(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = client.list_supported_languages(
            project_kind="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_list_assigned_resource_deployments(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = client.list_assigned_resource_deployments()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_list_supported_prebuilt_entities(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = client.list_supported_prebuilt_entities()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_list_training_config_versions(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = client.list_training_config_versions(
            project_kind="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_create_project(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = await client.create_project(
            project_name="str",
            body={
                "language": "str",
                "projectKind": "str",
                "projectName": "str",
                "description": "str",
                "multilingual": bool,
                "settings": {"confidenceThreshold": 0.0},
                "storageInputContainerName": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_get_project(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = await client.get_project(
            project_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_begin_delete_project(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = await (
            await client.begin_delete_project(
                project_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringPreparer()
    @recorded_by_proxy_async
    async def test_begin_import_method(self, conversationauthoring_endpoint):
        client = self.create_async_client(endpoint=conversationauthoring_endpoint)
        response = await (
            await client.begin_import_method(
                project_name="str",
                body={
                    "metadata": {
                        "language": "str",
                        "projectKind": "str",
                        "projectName": "str",
                        "description": "str",
                        "multilingual": bool,
                        "settings": {"confidenceThreshold": 0.0},
                        "storageInputContainerName": "str",
                    },
                    "projectFileVersion": "str",
                    "stringIndexType": "str",
                    "assets": "exported_project_asset",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
