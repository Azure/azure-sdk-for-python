# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import ConversationAuthoringProjectClientTestBase, ConversationAuthoringProjectPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationAuthoringProjectTrainedModelOperations(ConversationAuthoringProjectClientTestBase):
    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_trained_model_get_trained_model(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.trained_model.get_trained_model(
            project_name="str",
            trained_model_label="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_trained_model_delete_trained_model(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.trained_model.delete_trained_model(
            project_name="str",
            trained_model_label="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_trained_model_begin_evaluate_model(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.trained_model.begin_evaluate_model(
            project_name="str",
            trained_model_label="str",
            body={"kind": "str", "testingSplitPercentage": 0, "trainingSplitPercentage": 0},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_trained_model_get_model_evaluation_results(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.trained_model.get_model_evaluation_results(
            project_name="str",
            trained_model_label="str",
            string_index_type="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy
    def test_trained_model_get_model_evaluation_summary(self, conversationauthoringproject_endpoint):
        client = self.create_client(endpoint=conversationauthoringproject_endpoint)
        response = client.trained_model.get_model_evaluation_summary(
            project_name="str",
            trained_model_label="str",
        )

        # please add some check logic here by yourself
        # ...
