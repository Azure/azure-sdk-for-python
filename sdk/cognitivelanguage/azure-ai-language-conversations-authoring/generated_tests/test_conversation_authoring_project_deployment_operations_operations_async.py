# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ConversationAuthoringProjectPreparer
from testpreparer_async import ConversationAuthoringProjectClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConversationAuthoringProjectDeploymentOperationsOperationsAsync(
    ConversationAuthoringProjectClientTestBaseAsync
):
    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_deployment_operations_get_deployment(self, conversationauthoringproject_endpoint):
        client = self.create_async_client(endpoint=conversationauthoringproject_endpoint)
        response = await client.deployment_operations.get_deployment(
            project_name="str",
            deployment_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_deployment_operations_begin_deploy_project(self, conversationauthoringproject_endpoint):
        client = self.create_async_client(endpoint=conversationauthoringproject_endpoint)
        response = await (
            await client.deployment_operations.begin_deploy_project(
                project_name="str",
                deployment_name="str",
                body={
                    "trainedModelLabel": "str",
                    "assignedResources": [
                        {
                            "region": "str",
                            "resourceId": "str",
                            "assignedAoaiResource": {"deploymentName": "str", "kind": "str", "resourceId": "str"},
                        }
                    ],
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_deployment_operations_begin_delete_deployment(self, conversationauthoringproject_endpoint):
        client = self.create_async_client(endpoint=conversationauthoringproject_endpoint)
        response = await (
            await client.deployment_operations.begin_delete_deployment(
                project_name="str",
                deployment_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_deployment_operations_begin_delete_deployment_from_resources(
        self, conversationauthoringproject_endpoint
    ):
        client = self.create_async_client(endpoint=conversationauthoringproject_endpoint)
        response = await (
            await client.deployment_operations.begin_delete_deployment_from_resources(
                project_name="str",
                deployment_name="str",
                body={"assignedResourceIds": ["str"]},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_deployment_operations_get_deployment_delete_from_resources_status(
        self, conversationauthoringproject_endpoint
    ):
        client = self.create_async_client(endpoint=conversationauthoringproject_endpoint)
        response = await client.deployment_operations.get_deployment_delete_from_resources_status(
            project_name="str",
            deployment_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConversationAuthoringProjectPreparer()
    @recorded_by_proxy_async
    async def test_deployment_operations_get_deployment_status(self, conversationauthoringproject_endpoint):
        client = self.create_async_client(endpoint=conversationauthoringproject_endpoint)
        response = await client.deployment_operations.get_deployment_status(
            project_name="str",
            deployment_name="str",
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...
