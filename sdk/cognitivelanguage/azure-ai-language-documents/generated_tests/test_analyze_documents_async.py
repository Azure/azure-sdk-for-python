# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AnalyzeDocumentsPreparer
from testpreparer_async import AnalyzeDocumentsClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAnalyzeDocumentsAsync(AnalyzeDocumentsClientTestBaseAsync):
    @AnalyzeDocumentsPreparer()
    @recorded_by_proxy_async
    async def test_analyze_documents_job_status(self, analyzedocuments_endpoint):
        client = self.create_async_client(endpoint=analyzedocuments_endpoint)
        response = await client.analyze_documents_job_status(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @AnalyzeDocumentsPreparer()
    @recorded_by_proxy_async
    async def test_begin_analyze_documents_submit_job(self, analyzedocuments_endpoint):
        client = self.create_async_client(endpoint=analyzedocuments_endpoint)
        response = await (
            await client.begin_analyze_documents_submit_job(
                body={
                    "analysisInput": {
                        "documents": [
                            {
                                "id": "str",
                                "source": "document_location",
                                "target": "document_location",
                                "language": "str",
                            }
                        ]
                    },
                    "tasks": ["analyze_documents_lro_task"],
                    "defaultLanguage": "str",
                    "displayName": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AnalyzeDocumentsPreparer()
    @recorded_by_proxy_async
    async def test_begin_analyze_documents_cancel_job(self, analyzedocuments_endpoint):
        client = self.create_async_client(endpoint=analyzedocuments_endpoint)
        response = await (
            await client.begin_analyze_documents_cancel_job(
                job_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
