# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import (
    AnalyzeDocumentsLROResultsKind,
    AnalyzeDocumentsLROTaskKind,
    DocumentLocationKind,
    RedactionPolicyKind,
)

if TYPE_CHECKING:
    from .. import models as _models


class AnalyzeDocumentsLROResult(_model_base.Model):
    """Contains the AnalyzeDocuments long running operation result object.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AbstractiveSummarizationLROResult, ExtractiveSummarizationLROResult,
    PiiEntityRecognitionLROResult


    :ivar last_update_date_time: The last updated time in UTC for the task. Required.
    :vartype last_update_date_time: ~datetime.datetime
    :ivar status: The status of the task at the mentioned last update time. Required. Known values
     are: "notStarted", "running", "succeeded", "partiallyCompleted", "failed", "cancelled", and
     "cancelling".
    :vartype status: str or ~azure.ai.language.documents.models.State
    :ivar task_name: task name.
    :vartype task_name: str
    :ivar kind: Kind of the task. Required. Known values are: "PiiEntityRecognitionLROResults",
     "ExtractiveSummarizationLROResults", and "AbstractiveSummarizationLROResults".
    :vartype kind: str or ~azure.ai.language.documents.models.AnalyzeDocumentsLROResultsKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    last_update_date_time: datetime.datetime = rest_field(name="lastUpdateDateTime", format="rfc3339")
    """The last updated time in UTC for the task. Required."""
    status: Union[str, "_models.State"] = rest_field()
    """The status of the task at the mentioned last update time. Required. Known values are:
     \"notStarted\", \"running\", \"succeeded\", \"partiallyCompleted\", \"failed\", \"cancelled\",
     and \"cancelling\"."""
    task_name: Optional[str] = rest_field(name="taskName")
    """task name."""
    kind: str = rest_discriminator(name="kind")
    """Kind of the task. Required. Known values are: \"PiiEntityRecognitionLROResults\",
     \"ExtractiveSummarizationLROResults\", and \"AbstractiveSummarizationLROResults\"."""

    @overload
    def __init__(
        self,
        *,
        last_update_date_time: datetime.datetime,
        status: Union[str, "_models.State"],
        kind: str,
        task_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AbstractiveSummarizationLROResult(AnalyzeDocumentsLROResult, discriminator="AbstractiveSummarizationLROResults"):
    """An object representing the results for an Abstractive Summarization task.


    :ivar last_update_date_time: The last updated time in UTC for the task. Required.
    :vartype last_update_date_time: ~datetime.datetime
    :ivar status: The status of the task at the mentioned last update time. Required. Known values
     are: "notStarted", "running", "succeeded", "partiallyCompleted", "failed", "cancelled", and
     "cancelling".
    :vartype status: str or ~azure.ai.language.documents.models.State
    :ivar task_name: task name.
    :vartype task_name: str
    :ivar kind: Kind of the task. Required. Abstractive summarization LRO results
    :vartype kind: str or ~azure.ai.language.documents.models.ABSTRACTIVE_SUMMARIZATION_LRO_RESULTS
    :ivar results: Results of the task. Required.
    :vartype results: ~azure.ai.language.documents.models.AnalyzeDocumentsResult
    """

    kind: Literal[AnalyzeDocumentsLROResultsKind.ABSTRACTIVE_SUMMARIZATION_LRO_RESULTS] = rest_discriminator(name="kind")  # type: ignore
    """Kind of the task. Required. Abstractive summarization LRO results"""
    results: "_models.AnalyzeDocumentsResult" = rest_field()
    """Results of the task. Required."""

    @overload
    def __init__(
        self,
        *,
        last_update_date_time: datetime.datetime,
        status: Union[str, "_models.State"],
        results: "_models.AnalyzeDocumentsResult",
        task_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=AnalyzeDocumentsLROResultsKind.ABSTRACTIVE_SUMMARIZATION_LRO_RESULTS, **kwargs)


class AnalyzeDocumentsLROTask(_model_base.Model):
    """The long running task to be performed by the service on the input documents.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AbstractiveSummarizationLROTask, ExtractiveSummarizationLROTask, PiiLROTask

    All required parameters must be populated in order to send to server.

    :ivar task_name: task name.
    :vartype task_name: str
    :ivar kind: The kind of task to perform. Required. Known values are: "PiiEntityRecognition",
     "ExtractiveSummarization", and "AbstractiveSummarization".
    :vartype kind: str or ~azure.ai.language.documents.models.AnalyzeDocumentsLROTaskKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    task_name: Optional[str] = rest_field(name="taskName")
    """task name."""
    kind: str = rest_discriminator(name="kind")
    """The kind of task to perform. Required. Known values are: \"PiiEntityRecognition\",
     \"ExtractiveSummarization\", and \"AbstractiveSummarization\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
        task_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AbstractiveSummarizationLROTask(AnalyzeDocumentsLROTask, discriminator="AbstractiveSummarization"):
    """An object representing the task definition for an Abstractive Summarization task.

    All required parameters must be populated in order to send to server.

    :ivar task_name: task name.
    :vartype task_name: str
    :ivar kind: The Abstractive Summarization kind of the long running task. Required. Abstractive
     summarization task
    :vartype kind: str or ~azure.ai.language.documents.models.ABSTRACTIVE_SUMMARIZATION
    :ivar parameters: Parameters for the Abstractive Summarization task. Required.
    :vartype parameters: ~azure.ai.language.documents.models.AbstractiveSummarizationTaskParameters
    """

    kind: Literal[AnalyzeDocumentsLROTaskKind.ABSTRACTIVE_SUMMARIZATION] = rest_discriminator(name="kind")  # type: ignore # pylint: disable=line-too-long
    """The Abstractive Summarization kind of the long running task. Required. Abstractive
     summarization task"""
    parameters: "_models.AbstractiveSummarizationTaskParameters" = rest_field()
    """Parameters for the Abstractive Summarization task. Required."""

    @overload
    def __init__(
        self,
        *,
        parameters: "_models.AbstractiveSummarizationTaskParameters",
        task_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=AnalyzeDocumentsLROTaskKind.ABSTRACTIVE_SUMMARIZATION, **kwargs)


class AbstractiveSummarizationTaskParameters(_model_base.Model):
    """Supported parameters for the pre-built Abstractive Summarization task.

    :ivar logging_opt_out: logging opt out.
    :vartype logging_opt_out: bool
    :ivar model_version: model version.
    :vartype model_version: str
    :ivar sentence_count: Controls the approximate number of sentences in the output summaries.
    :vartype sentence_count: int
    :ivar string_index_type: String index type. Known values are: "TextElements_v8",
     "UnicodeCodePoint", and "Utf16CodeUnit".
    :vartype string_index_type: str or ~azure.ai.language.documents.models.StringIndexType
    :ivar summary_length: (NOTE: Recommended to use summaryLength over sentenceCount) Controls the
     approximate length of the output summaries. Known values are: "short", "medium", and "long".
    :vartype summary_length: str or ~azure.ai.language.documents.models.SummaryLengthBucket
    :ivar instruction: (Optional) If provided, the instruction will be used to generate the
     summary.
    :vartype instruction: str
    """

    logging_opt_out: Optional[bool] = rest_field(name="loggingOptOut")
    """logging opt out."""
    model_version: Optional[str] = rest_field(name="modelVersion")
    """model version."""
    sentence_count: Optional[int] = rest_field(name="sentenceCount")
    """Controls the approximate number of sentences in the output summaries."""
    string_index_type: Optional[Union[str, "_models.StringIndexType"]] = rest_field(name="stringIndexType")
    """String index type. Known values are: \"TextElements_v8\", \"UnicodeCodePoint\", and
     \"Utf16CodeUnit\"."""
    summary_length: Optional[Union[str, "_models.SummaryLengthBucket"]] = rest_field(name="summaryLength")
    """(NOTE: Recommended to use summaryLength over sentenceCount) Controls the approximate length of
     the output summaries. Known values are: \"short\", \"medium\", and \"long\"."""
    instruction: Optional[str] = rest_field()
    """(Optional) If provided, the instruction will be used to generate the summary."""

    @overload
    def __init__(
        self,
        *,
        logging_opt_out: Optional[bool] = None,
        model_version: Optional[str] = None,
        sentence_count: Optional[int] = None,
        string_index_type: Optional[Union[str, "_models.StringIndexType"]] = None,
        summary_length: Optional[Union[str, "_models.SummaryLengthBucket"]] = None,
        instruction: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeDocumentJobsInput(_model_base.Model):
    """The input object for the analyze documents LRO.

    All required parameters must be populated in order to send to server.

    :ivar display_name: Name for the task.
    :vartype display_name: str
    :ivar analysis_input: Contains the input to be analyzed. Required.
    :vartype analysis_input: ~azure.ai.language.documents.models.MultiLanguageAnalysisInput
    :ivar tasks: List of tasks to be performed as part of the LRO. Required.
    :vartype tasks: list[~azure.ai.language.documents.models.AnalyzeDocumentsLROTask]
    :ivar default_language: Default language to use for records.
    :vartype default_language: str
    """

    display_name: Optional[str] = rest_field(name="displayName")
    """Name for the task."""
    analysis_input: "_models.MultiLanguageAnalysisInput" = rest_field(name="analysisInput")
    """Contains the input to be analyzed. Required."""
    tasks: List["_models.AnalyzeDocumentsLROTask"] = rest_field()
    """List of tasks to be performed as part of the LRO. Required."""
    default_language: Optional[str] = rest_field(name="defaultLanguage")
    """Default language to use for records."""

    @overload
    def __init__(
        self,
        *,
        analysis_input: "_models.MultiLanguageAnalysisInput",
        tasks: List["_models.AnalyzeDocumentsLROTask"],
        display_name: Optional[str] = None,
        default_language: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeDocumentsDocumentError(_model_base.Model):
    """Contains the error object with errors encountered for the processed document.


    :ivar id: Document Id. Required.
    :vartype id: str
    :ivar error: Document Error. Required.
    :vartype error: ~azure.ai.language.documents.models.Error
    """

    id: str = rest_field()
    """Document Id. Required."""
    error: "_models.Error" = rest_field()
    """Document Error. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        error: "_models.Error",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeDocumentsJobState(_model_base.Model):
    """The object containing the analyze job LRO job state.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar display_name: display name.
    :vartype display_name: str
    :ivar created_date_time: Date and time job created. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar expiration_date_time: Date and time job expires.
    :vartype expiration_date_time: ~datetime.datetime
    :ivar job_id: job ID. Required.
    :vartype job_id: str
    :ivar last_updated_date_time: last updated date and time. Required.
    :vartype last_updated_date_time: ~datetime.datetime
    :ivar status: status. Required. Known values are: "notStarted", "running", "succeeded",
     "partiallyCompleted", "failed", "cancelled", and "cancelling".
    :vartype status: str or ~azure.ai.language.documents.models.State
    :ivar errors: errors.
    :vartype errors: list[~azure.ai.language.documents.models.Error]
    :ivar next_link: next link.
    :vartype next_link: str
    :ivar tasks: List of tasks. Required.
    :vartype tasks: ~azure.ai.language.documents.models.Tasks
    :ivar statistics: if showStats=true was specified in the request this field will contain
     information about the request payload.
    :vartype statistics: ~azure.ai.language.documents.models.RequestStatistics
    """

    display_name: Optional[str] = rest_field(name="displayName")
    """display name."""
    created_date_time: datetime.datetime = rest_field(name="createdDateTime", format="rfc3339")
    """Date and time job created. Required."""
    expiration_date_time: Optional[datetime.datetime] = rest_field(name="expirationDateTime", format="rfc3339")
    """Date and time job expires."""
    job_id: str = rest_field(name="jobId", visibility=["read"])
    """job ID. Required."""
    last_updated_date_time: datetime.datetime = rest_field(name="lastUpdatedDateTime", format="rfc3339")
    """last updated date and time. Required."""
    status: Union[str, "_models.State"] = rest_field()
    """status. Required. Known values are: \"notStarted\", \"running\", \"succeeded\",
     \"partiallyCompleted\", \"failed\", \"cancelled\", and \"cancelling\"."""
    errors: Optional[List["_models.Error"]] = rest_field()
    """errors."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """next link."""
    tasks: "_models.Tasks" = rest_field()
    """List of tasks. Required."""
    statistics: Optional["_models.RequestStatistics"] = rest_field()
    """if showStats=true was specified in the request this field will contain information about the
     request payload."""

    @overload
    def __init__(
        self,
        *,
        created_date_time: datetime.datetime,
        last_updated_date_time: datetime.datetime,
        status: Union[str, "_models.State"],
        tasks: "_models.Tasks",
        display_name: Optional[str] = None,
        expiration_date_time: Optional[datetime.datetime] = None,
        errors: Optional[List["_models.Error"]] = None,
        next_link: Optional[str] = None,
        statistics: Optional["_models.RequestStatistics"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeDocumentsResult(_model_base.Model):
    """Contains the result object for the processed document.


    :ivar errors: Errors by document id. Required.
    :vartype errors: list[~azure.ai.language.documents.models.AnalyzeDocumentsDocumentError]
    :ivar statistics: if showStats=true was specified in the request this field will contain
     information about the request payload.
    :vartype statistics: ~azure.ai.language.documents.models.RequestStatistics
    :ivar model_version: This field indicates which model is used for analysis. Required.
    :vartype model_version: str
    :ivar documents: Response by document. Required.
    :vartype documents: list[~azure.ai.language.documents.models.DocumentAnalysisDocumentResult]
    """

    errors: List["_models.AnalyzeDocumentsDocumentError"] = rest_field()
    """Errors by document id. Required."""
    statistics: Optional["_models.RequestStatistics"] = rest_field()
    """if showStats=true was specified in the request this field will contain information about the
     request payload."""
    model_version: str = rest_field(name="modelVersion")
    """This field indicates which model is used for analysis. Required."""
    documents: List["_models.DocumentAnalysisDocumentResult"] = rest_field()
    """Response by document. Required."""

    @overload
    def __init__(
        self,
        *,
        errors: List["_models.AnalyzeDocumentsDocumentError"],
        model_version: str,
        documents: List["_models.DocumentAnalysisDocumentResult"],
        statistics: Optional["_models.RequestStatistics"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentLocation(_model_base.Model):
    """Contains the location of the document.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureBlobDocumentLocation


    :ivar kind: The kind of the document location. Required. "AzureBlob"
    :vartype kind: str or ~azure.ai.language.documents.models.DocumentLocationKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    kind: str = rest_discriminator(name="kind")
    """The kind of the document location. Required. \"AzureBlob\""""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureBlobDocumentLocation(DocumentLocation, discriminator="AzureBlob"):
    """Document location for azure blobs.


    :ivar kind: The kind of the document location. Required. The document is a URL.
    :vartype kind: str or ~azure.ai.language.documents.models.AZURE_BLOB
    :ivar location: The location of the document. Required.
    :vartype location: str
    :ivar managed_identity_client_id: The user managed identity client Id to use to authenticate
     with the storage account.
    :vartype managed_identity_client_id: str
    """

    kind: Literal[DocumentLocationKind.AZURE_BLOB] = rest_discriminator(name="kind")  # type: ignore
    """The kind of the document location. Required. The document is a URL."""
    location: str = rest_field()
    """The location of the document. Required."""
    managed_identity_client_id: Optional[str] = rest_field(name="managedIdentityClientId")
    """The user managed identity client Id to use to authenticate with the storage account."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        managed_identity_client_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=DocumentLocationKind.AZURE_BLOB, **kwargs)


class BaseRedactionPolicy(_model_base.Model):
    """The abstract base class for RedactionPolicy.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CharacterMaskPolicy, EntityMaskPolicy, NoMaskPolicy

    All required parameters must be populated in order to send to server.

    :ivar policy_kind: The entity RedactionPolicy object kind. Required. Known values are:
     "noMask", "characterMask", and "entityMask".
    :vartype policy_kind: str or ~azure.ai.language.documents.models.RedactionPolicyKind
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    policy_kind: str = rest_discriminator(name="policyKind")
    """The entity RedactionPolicy object kind. Required. Known values are: \"noMask\",
     \"characterMask\", and \"entityMask\"."""

    @overload
    def __init__(
        self,
        *,
        policy_kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CharacterMaskPolicy(BaseRedactionPolicy, discriminator="characterMask"):
    """Represents the policy of redacting with a redaction character.

    All required parameters must be populated in order to send to server.

    :ivar policy_kind: The entity RedactionPolicy object kind. Required. React detected entities
     with redaction character.
    :vartype policy_kind: str or ~azure.ai.language.documents.models.CHARACTER_MASK
    :ivar redaction_character: Optional parameter to use a Custom Character to be used for
     redaction in PII responses. Default character will be * as before. We allow specific ascii
     characters for redaction. Known values are: "!", "#", "$", "%", "&", "*", "+", "-", "=", "?",
     "@", "^", "_", and "~".
    :vartype redaction_character: str or ~azure.ai.language.documents.models.RedactionCharacter
    """

    policy_kind: Literal[RedactionPolicyKind.CHARACTER_MASK] = rest_discriminator(name="policyKind")  # type: ignore
    """The entity RedactionPolicy object kind. Required. React detected entities with redaction
     character."""
    redaction_character: Optional[Union[str, "_models.RedactionCharacter"]] = rest_field(name="redactionCharacter")
    """Optional parameter to use a Custom Character to be used for redaction in PII responses. Default
     character will be * as before. We allow specific ascii characters for redaction. Known values
     are: \"!\", \"#\", \"$\", \"%\", \"&\", \"*\", \"+\", \"-\", \"=\", \"?\", \"@\", \"^\", \"_\",
     and \"~\"."""

    @overload
    def __init__(
        self,
        *,
        redaction_character: Optional[Union[str, "_models.RedactionCharacter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, policy_kind=RedactionPolicyKind.CHARACTER_MASK, **kwargs)


class DocumentAnalysisDocumentResult(_model_base.Model):
    """Contains the result object for the processed document.


    :ivar id: Unique, non-empty document identifier. Required.
    :vartype id: str
    :ivar warnings: Warnings encountered while processing document. Required.
    :vartype warnings: list[~azure.ai.language.documents.models.DocumentWarning]
    :ivar statistics: if showStats=true was specified in the request this field will contain
     information about the document payload.
    :vartype statistics: ~azure.ai.language.documents.models.DocumentStatistics
    :ivar source: Location of the input document. Required.
    :vartype source: ~azure.ai.language.documents.models.DocumentLocation
    :ivar target: Array of document results generated after the analysis. Required.
    :vartype target: list[~azure.ai.language.documents.models.DocumentLocation]
    """

    id: str = rest_field()
    """Unique, non-empty document identifier. Required."""
    warnings: List["_models.DocumentWarning"] = rest_field()
    """Warnings encountered while processing document. Required."""
    statistics: Optional["_models.DocumentStatistics"] = rest_field()
    """if showStats=true was specified in the request this field will contain information about the
     document payload."""
    source: "_models.DocumentLocation" = rest_field()
    """Location of the input document. Required."""
    target: List["_models.DocumentLocation"] = rest_field()
    """Array of document results generated after the analysis. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        warnings: List["_models.DocumentWarning"],
        source: "_models.DocumentLocation",
        target: List["_models.DocumentLocation"],
        statistics: Optional["_models.DocumentStatistics"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentStatistics(_model_base.Model):
    """if showStats=true was specified in the request this field will contain information about the
    document payload.


    :ivar characters_count: Number of documents elements recognized in the document. Required.
    :vartype characters_count: int
    :ivar transactions_count: Number of transactions for the document. Required.
    :vartype transactions_count: int
    """

    characters_count: int = rest_field(name="charactersCount")
    """Number of documents elements recognized in the document. Required."""
    transactions_count: int = rest_field(name="transactionsCount")
    """Number of transactions for the document. Required."""

    @overload
    def __init__(
        self,
        *,
        characters_count: int,
        transactions_count: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentWarning(_model_base.Model):
    """Contains the warnings object with warnings encountered for the processed document.


    :ivar code: Warning code. Required. Known values are: "LongWordsInDocument" and
     "DocumentTruncated".
    :vartype code: str or ~azure.ai.language.documents.models.WarningCodeValue
    :ivar message: Warning message. Required.
    :vartype message: str
    :ivar target_ref: A JSON pointer reference indicating the target object.
    :vartype target_ref: str
    """

    code: Union[str, "_models.WarningCodeValue"] = rest_field()
    """Warning code. Required. Known values are: \"LongWordsInDocument\" and \"DocumentTruncated\"."""
    message: str = rest_field()
    """Warning message. Required."""
    target_ref: Optional[str] = rest_field(name="targetRef")
    """A JSON pointer reference indicating the target object."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.WarningCodeValue"],
        message: str,
        target_ref: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EntityMaskPolicy(BaseRedactionPolicy, discriminator="entityMask"):
    """Represents the policy of redacting PII with the entity type.

    All required parameters must be populated in order to send to server.

    :ivar policy_kind: The entity OverlapPolicy object kind. Required. Redact detected entities
     with entity type.
    :vartype policy_kind: str or ~azure.ai.language.documents.models.ENTITY_MASK
    """

    policy_kind: Literal[RedactionPolicyKind.ENTITY_MASK] = rest_discriminator(name="policyKind")  # type: ignore
    """The entity OverlapPolicy object kind. Required. Redact detected entities with entity type."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, policy_kind=RedactionPolicyKind.ENTITY_MASK, **kwargs)


class Error(_model_base.Model):
    """The error response object returned when the service encounters some errors during processing
    the request.


    :ivar code: One of a server-defined set of error codes. Required. Known values are:
     "InvalidRequest", "InvalidArgument", "Unauthorized", "Forbidden", "NotFound",
     "ProjectNotFound", "OperationNotFound", "AzureCognitiveSearchNotFound",
     "AzureCognitiveSearchIndexNotFound", "TooManyRequests", "AzureCognitiveSearchThrottling",
     "AzureCognitiveSearchIndexLimitReached", "InternalServerError", "ServiceUnavailable",
     "Timeout", "QuotaExceeded", "Conflict", and "Warning".
    :vartype code: str or ~azure.ai.language.documents.models.ErrorCode
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.ai.language.documents.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.documents.models.InnerErrorModel
    """

    code: Union[str, "_models.ErrorCode"] = rest_field()
    """One of a server-defined set of error codes. Required. Known values are: \"InvalidRequest\",
     \"InvalidArgument\", \"Unauthorized\", \"Forbidden\", \"NotFound\", \"ProjectNotFound\",
     \"OperationNotFound\", \"AzureCognitiveSearchNotFound\", \"AzureCognitiveSearchIndexNotFound\",
     \"TooManyRequests\", \"AzureCognitiveSearchThrottling\",
     \"AzureCognitiveSearchIndexLimitReached\", \"InternalServerError\", \"ServiceUnavailable\",
     \"Timeout\", \"QuotaExceeded\", \"Conflict\", and \"Warning\"."""
    message: str = rest_field()
    """A human-readable representation of the error. Required."""
    target: Optional[str] = rest_field()
    """The target of the error."""
    details: Optional[List["_models.Error"]] = rest_field()
    """An array of details about specific errors that led to this reported error."""
    innererror: Optional["_models.InnerErrorModel"] = rest_field()
    """An object containing more specific information than the current object about the error."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.ErrorCode"],
        message: str,
        target: Optional[str] = None,
        details: Optional[List["_models.Error"]] = None,
        innererror: Optional["_models.InnerErrorModel"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """Error response.

    All required parameters must be populated in order to send to server.

    :ivar error: The error object. Required.
    :vartype error: ~azure.ai.language.documents.models.Error
    """

    error: "_models.Error" = rest_field()
    """The error object. Required."""

    @overload
    def __init__(
        self,
        *,
        error: "_models.Error",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExtractiveSummarizationLROResult(AnalyzeDocumentsLROResult, discriminator="ExtractiveSummarizationLROResults"):
    """An object representing the results for an Extractive Summarization task.


    :ivar last_update_date_time: The last updated time in UTC for the task. Required.
    :vartype last_update_date_time: ~datetime.datetime
    :ivar status: The status of the task at the mentioned last update time. Required. Known values
     are: "notStarted", "running", "succeeded", "partiallyCompleted", "failed", "cancelled", and
     "cancelling".
    :vartype status: str or ~azure.ai.language.documents.models.State
    :ivar task_name: task name.
    :vartype task_name: str
    :ivar kind: Kind of the task. Required. Extractive summarization LRO results
    :vartype kind: str or ~azure.ai.language.documents.models.EXTRACTIVE_SUMMARIZATION_LRO_RESULTS
    :ivar results: Results of the document task. Required.
    :vartype results: ~azure.ai.language.documents.models.AnalyzeDocumentsResult
    """

    kind: Literal[AnalyzeDocumentsLROResultsKind.EXTRACTIVE_SUMMARIZATION_LRO_RESULTS] = rest_discriminator(name="kind")  # type: ignore # pylint: disable=line-too-long
    """Kind of the task. Required. Extractive summarization LRO results"""
    results: "_models.AnalyzeDocumentsResult" = rest_field()
    """Results of the document task. Required."""

    @overload
    def __init__(
        self,
        *,
        last_update_date_time: datetime.datetime,
        status: Union[str, "_models.State"],
        results: "_models.AnalyzeDocumentsResult",
        task_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=AnalyzeDocumentsLROResultsKind.EXTRACTIVE_SUMMARIZATION_LRO_RESULTS, **kwargs)


class ExtractiveSummarizationLROTask(AnalyzeDocumentsLROTask, discriminator="ExtractiveSummarization"):
    """An object representing the task definition for an Extractive Summarization task.

    All required parameters must be populated in order to send to server.

    :ivar task_name: task name.
    :vartype task_name: str
    :ivar kind: The Extractive Summarization kind of the long running task. Required. Extractive
     summarization task
    :vartype kind: str or ~azure.ai.language.documents.models.EXTRACTIVE_SUMMARIZATION
    :ivar parameters: Parameters for the Extractive Summarization task.
    :vartype parameters: ~azure.ai.language.documents.models.ExtractiveSummarizationTaskParameters
    """

    kind: Literal[AnalyzeDocumentsLROTaskKind.EXTRACTIVE_SUMMARIZATION] = rest_discriminator(name="kind")  # type: ignore # pylint: disable=line-too-long
    """The Extractive Summarization kind of the long running task. Required. Extractive summarization
     task"""
    parameters: Optional["_models.ExtractiveSummarizationTaskParameters"] = rest_field()
    """Parameters for the Extractive Summarization task."""

    @overload
    def __init__(
        self,
        *,
        task_name: Optional[str] = None,
        parameters: Optional["_models.ExtractiveSummarizationTaskParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=AnalyzeDocumentsLROTaskKind.EXTRACTIVE_SUMMARIZATION, **kwargs)


class ExtractiveSummarizationTaskParameters(_model_base.Model):
    """Supported parameters for an Extractive Summarization task.

    :ivar logging_opt_out: logging opt out.
    :vartype logging_opt_out: bool
    :ivar model_version: model version.
    :vartype model_version: str
    :ivar sentence_count: Specifies the number of sentences in the extracted summary.
    :vartype sentence_count: int
    :ivar sort_by: Specifies how to sort the extracted summaries. Known values are: "Offset" and
     "Rank".
    :vartype sort_by: str or
     ~azure.ai.language.documents.models.ExtractiveSummarizationSortingCriteria
    :ivar string_index_type: Specifies the method used to interpret string offsets. Known values
     are: "TextElements_v8", "UnicodeCodePoint", and "Utf16CodeUnit".
    :vartype string_index_type: str or ~azure.ai.language.documents.models.StringIndexType
    :ivar query: (Optional) If provided, the query will be used to extract most relevant sentences
     from the document.
    :vartype query: str
    """

    logging_opt_out: Optional[bool] = rest_field(name="loggingOptOut")
    """logging opt out."""
    model_version: Optional[str] = rest_field(name="modelVersion")
    """model version."""
    sentence_count: Optional[int] = rest_field(name="sentenceCount")
    """Specifies the number of sentences in the extracted summary."""
    sort_by: Optional[Union[str, "_models.ExtractiveSummarizationSortingCriteria"]] = rest_field(name="sortBy")
    """Specifies how to sort the extracted summaries. Known values are: \"Offset\" and \"Rank\"."""
    string_index_type: Optional[Union[str, "_models.StringIndexType"]] = rest_field(name="stringIndexType")
    """Specifies the method used to interpret string offsets. Known values are: \"TextElements_v8\",
     \"UnicodeCodePoint\", and \"Utf16CodeUnit\"."""
    query: Optional[str] = rest_field()
    """(Optional) If provided, the query will be used to extract most relevant sentences from the
     document."""

    @overload
    def __init__(
        self,
        *,
        logging_opt_out: Optional[bool] = None,
        model_version: Optional[str] = None,
        sentence_count: Optional[int] = None,
        sort_by: Optional[Union[str, "_models.ExtractiveSummarizationSortingCriteria"]] = None,
        string_index_type: Optional[Union[str, "_models.StringIndexType"]] = None,
        query: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InnerErrorModel(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API
    guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.


    :ivar code: One of a server-defined set of error codes. Required. Known values are:
     "InvalidRequest", "InvalidParameterValue", "KnowledgeBaseNotFound",
     "AzureCognitiveSearchNotFound", "AzureCognitiveSearchThrottling", "ExtractionFailure",
     "InvalidRequestBodyFormat", "EmptyRequest", "MissingInputDocuments", "InvalidDocument",
     "ModelVersionIncorrect", "InvalidDocumentBatch", "UnsupportedLanguageCode", and
     "InvalidCountryHint".
    :vartype code: str or ~azure.ai.language.documents.models.InnerErrorCode
    :ivar message: Error message. Required.
    :vartype message: str
    :ivar details: Error details.
    :vartype details: dict[str, str]
    :ivar target: Error target.
    :vartype target: str
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.ai.language.documents.models.InnerErrorModel
    """

    code: Union[str, "_models.InnerErrorCode"] = rest_field()
    """One of a server-defined set of error codes. Required. Known values are: \"InvalidRequest\",
     \"InvalidParameterValue\", \"KnowledgeBaseNotFound\", \"AzureCognitiveSearchNotFound\",
     \"AzureCognitiveSearchThrottling\", \"ExtractionFailure\", \"InvalidRequestBodyFormat\",
     \"EmptyRequest\", \"MissingInputDocuments\", \"InvalidDocument\", \"ModelVersionIncorrect\",
     \"InvalidDocumentBatch\", \"UnsupportedLanguageCode\", and \"InvalidCountryHint\"."""
    message: str = rest_field()
    """Error message. Required."""
    details: Optional[Dict[str, str]] = rest_field()
    """Error details."""
    target: Optional[str] = rest_field()
    """Error target."""
    innererror: Optional["_models.InnerErrorModel"] = rest_field()
    """An object containing more specific information than the current object about the error."""

    @overload
    def __init__(
        self,
        *,
        code: Union[str, "_models.InnerErrorCode"],
        message: str,
        details: Optional[Dict[str, str]] = None,
        target: Optional[str] = None,
        innererror: Optional["_models.InnerErrorModel"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MultiLanguageAnalysisInput(_model_base.Model):
    """Collection of input documents to be analyzed by the service.

    :ivar documents: The input documents to be analyzed.
    :vartype documents: list[~azure.ai.language.documents.models.MultiLanguageInput]
    """

    documents: Optional[List["_models.MultiLanguageInput"]] = rest_field()
    """The input documents to be analyzed."""

    @overload
    def __init__(
        self,
        *,
        documents: Optional[List["_models.MultiLanguageInput"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MultiLanguageInput(_model_base.Model):
    """Contains an input document to be analyzed by the service.

    All required parameters must be populated in order to send to server.

    :ivar id: A unique, non-empty document identifier. Required.
    :vartype id: str
    :ivar source: The location of the input document to process. Required.
    :vartype source: ~azure.ai.language.documents.models.DocumentLocation
    :ivar target: The location where the processed document will be stored. Required.
    :vartype target: ~azure.ai.language.documents.models.DocumentLocation
    :ivar language: (Optional) This is the 2 letter ISO 639-1 representation of a language. For
     example, use \\"en\\" for English; \\"es\\" for Spanish etc. If not set, use \\"en\\" for
     English as default.
    :vartype language: str
    """

    id: str = rest_field()
    """A unique, non-empty document identifier. Required."""
    source: "_models.DocumentLocation" = rest_field()
    """The location of the input document to process. Required."""
    target: "_models.DocumentLocation" = rest_field()
    """The location where the processed document will be stored. Required."""
    language: Optional[str] = rest_field()
    """(Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use
     \\"en\\" for English; \\"es\\" for Spanish etc. If not set, use \\"en\\" for English as
     default."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        source: "_models.DocumentLocation",
        target: "_models.DocumentLocation",
        language: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NoMaskPolicy(BaseRedactionPolicy, discriminator="noMask"):
    """Represents the policy of not redacting found PII.

    All required parameters must be populated in order to send to server.

    :ivar policy_kind: The entity RedactionPolicy object kind. Required. Do not redact detected
     entities.
    :vartype policy_kind: str or ~azure.ai.language.documents.models.NO_MASK
    """

    policy_kind: Literal[RedactionPolicyKind.NO_MASK] = rest_discriminator(name="policyKind")  # type: ignore
    """The entity RedactionPolicy object kind. Required. Do not redact detected entities."""

    @overload
    def __init__(
        self,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, policy_kind=RedactionPolicyKind.NO_MASK, **kwargs)


class PiiEntityRecognitionLROResult(AnalyzeDocumentsLROResult, discriminator="PiiEntityRecognitionLROResults"):
    """Contains the PII LRO results.


    :ivar last_update_date_time: The last updated time in UTC for the task. Required.
    :vartype last_update_date_time: ~datetime.datetime
    :ivar status: The status of the task at the mentioned last update time. Required. Known values
     are: "notStarted", "running", "succeeded", "partiallyCompleted", "failed", "cancelled", and
     "cancelling".
    :vartype status: str or ~azure.ai.language.documents.models.State
    :ivar task_name: task name.
    :vartype task_name: str
    :ivar kind: The kind of the task. Required. PII entity recognition LRO results
    :vartype kind: str or ~azure.ai.language.documents.models.PII_ENTITY_RECOGNITION_LRO_RESULTS
    :ivar results: The list of pii document results. Required.
    :vartype results: ~azure.ai.language.documents.models.AnalyzeDocumentsResult
    """

    kind: Literal[AnalyzeDocumentsLROResultsKind.PII_ENTITY_RECOGNITION_LRO_RESULTS] = rest_discriminator(name="kind")  # type: ignore # pylint: disable=line-too-long
    """The kind of the task. Required. PII entity recognition LRO results"""
    results: "_models.AnalyzeDocumentsResult" = rest_field()
    """The list of pii document results. Required."""

    @overload
    def __init__(
        self,
        *,
        last_update_date_time: datetime.datetime,
        status: Union[str, "_models.State"],
        results: "_models.AnalyzeDocumentsResult",
        task_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=AnalyzeDocumentsLROResultsKind.PII_ENTITY_RECOGNITION_LRO_RESULTS, **kwargs)


class PiiLROTask(AnalyzeDocumentsLROTask, discriminator="PiiEntityRecognition"):
    """Contains the analyze text PIIEntityRecognition LRO task.

    All required parameters must be populated in order to send to server.

    :ivar task_name: task name.
    :vartype task_name: str
    :ivar kind: Kind of the task. Required. PII entity recognition task
    :vartype kind: str or ~azure.ai.language.documents.models.PII_ENTITY_RECOGNITION
    :ivar parameters: Pii task parameters.
    :vartype parameters: ~azure.ai.language.documents.models.PiiTaskParameters
    """

    kind: Literal[AnalyzeDocumentsLROTaskKind.PII_ENTITY_RECOGNITION] = rest_discriminator(name="kind")  # type: ignore
    """Kind of the task. Required. PII entity recognition task"""
    parameters: Optional["_models.PiiTaskParameters"] = rest_field()
    """Pii task parameters."""

    @overload
    def __init__(
        self,
        *,
        task_name: Optional[str] = None,
        parameters: Optional["_models.PiiTaskParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, kind=AnalyzeDocumentsLROTaskKind.PII_ENTITY_RECOGNITION, **kwargs)


class PiiTaskParameters(_model_base.Model):
    """Supported parameters for a PII Entities Recognition task.

    :ivar logging_opt_out: logging opt out.
    :vartype logging_opt_out: bool
    :ivar model_version: model version.
    :vartype model_version: str
    :ivar domain: Domain for PII task. Known values are: "phi" and "none".
    :vartype domain: str or ~azure.ai.language.documents.models.PiiDomain
    :ivar pii_categories: Enumeration of PII categories to be returned in the response.
    :vartype pii_categories: list[str or ~azure.ai.language.documents.models.PiiCategory]
    :ivar string_index_type: StringIndexType to be used for analysis. Known values are:
     "TextElements_v8", "UnicodeCodePoint", and "Utf16CodeUnit".
    :vartype string_index_type: str or ~azure.ai.language.documents.models.StringIndexType
    :ivar exclude_pii_categories: Enumeration of PII categories to be excluded in the response.
    :vartype exclude_pii_categories: list[str or
     ~azure.ai.language.documents.models.PiiCategoriesExclude]
    :ivar redaction_policy: Redaction policy to be used when redacting from documents.
    :vartype redaction_policy: ~azure.ai.language.documents.models.BaseRedactionPolicy
    :ivar exclude_extraction_data: Boolean to indicate if entities should be excluded from the
     response json stored in the customer's storage.
    :vartype exclude_extraction_data: bool
    """

    logging_opt_out: Optional[bool] = rest_field(name="loggingOptOut")
    """logging opt out."""
    model_version: Optional[str] = rest_field(name="modelVersion")
    """model version."""
    domain: Optional[Union[str, "_models.PiiDomain"]] = rest_field()
    """Domain for PII task. Known values are: \"phi\" and \"none\"."""
    pii_categories: Optional[List[Union[str, "_models.PiiCategory"]]] = rest_field(name="piiCategories")
    """Enumeration of PII categories to be returned in the response."""
    string_index_type: Optional[Union[str, "_models.StringIndexType"]] = rest_field(name="stringIndexType")
    """StringIndexType to be used for analysis. Known values are: \"TextElements_v8\",
     \"UnicodeCodePoint\", and \"Utf16CodeUnit\"."""
    exclude_pii_categories: Optional[List[Union[str, "_models.PiiCategoriesExclude"]]] = rest_field(
        name="excludePiiCategories"
    )
    """Enumeration of PII categories to be excluded in the response."""
    redaction_policy: Optional["_models.BaseRedactionPolicy"] = rest_field(name="redactionPolicy")
    """Redaction policy to be used when redacting from documents."""
    exclude_extraction_data: Optional[bool] = rest_field(name="excludeExtractionData")
    """Boolean to indicate if entities should be excluded from the response json stored in the
     customer's storage."""

    @overload
    def __init__(
        self,
        *,
        logging_opt_out: Optional[bool] = None,
        model_version: Optional[str] = None,
        domain: Optional[Union[str, "_models.PiiDomain"]] = None,
        pii_categories: Optional[List[Union[str, "_models.PiiCategory"]]] = None,
        string_index_type: Optional[Union[str, "_models.StringIndexType"]] = None,
        exclude_pii_categories: Optional[List[Union[str, "_models.PiiCategoriesExclude"]]] = None,
        redaction_policy: Optional["_models.BaseRedactionPolicy"] = None,
        exclude_extraction_data: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RequestStatistics(_model_base.Model):
    """if showStats=true was specified in the request this field will contain information about the
    request payload.


    :ivar documents_count: Number of documents submitted in the request. Required.
    :vartype documents_count: int
    :ivar valid_documents_count: Number of valid documents. This excludes empty, over-size limit or
     non-supported languages documents. Required.
    :vartype valid_documents_count: int
    :ivar erroneous_documents_count: Number of invalid documents. This includes empty, over-size
     limit or non-supported languages documents. Required.
    :vartype erroneous_documents_count: int
    :ivar transactions_count: Number of transactions for the request. Required.
    :vartype transactions_count: int
    """

    documents_count: int = rest_field(name="documentsCount")
    """Number of documents submitted in the request. Required."""
    valid_documents_count: int = rest_field(name="validDocumentsCount")
    """Number of valid documents. This excludes empty, over-size limit or non-supported languages
     documents. Required."""
    erroneous_documents_count: int = rest_field(name="erroneousDocumentsCount")
    """Number of invalid documents. This includes empty, over-size limit or non-supported languages
     documents. Required."""
    transactions_count: int = rest_field(name="transactionsCount")
    """Number of transactions for the request. Required."""

    @overload
    def __init__(
        self,
        *,
        documents_count: int,
        valid_documents_count: int,
        erroneous_documents_count: int,
        transactions_count: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Tasks(_model_base.Model):
    """Container for the tasks status for the LRO job.


    :ivar completed: Count of completed tasks. Required.
    :vartype completed: int
    :ivar failed: Count of failed tasks. Required.
    :vartype failed: int
    :ivar in_progress: Count of inprogress tasks. Required.
    :vartype in_progress: int
    :ivar total: Count of total tasks. Required.
    :vartype total: int
    :ivar items_property: Enumerable of Analyze documents job results.
    :vartype items_property: list[~azure.ai.language.documents.models.AnalyzeDocumentsLROResult]
    """

    completed: int = rest_field()
    """Count of completed tasks. Required."""
    failed: int = rest_field()
    """Count of failed tasks. Required."""
    in_progress: int = rest_field(name="inProgress")
    """Count of inprogress tasks. Required."""
    total: int = rest_field()
    """Count of total tasks. Required."""
    items_property: Optional[List["_models.AnalyzeDocumentsLROResult"]] = rest_field(name="items")
    """Enumerable of Analyze documents job results."""

    @overload
    def __init__(
        self,
        *,
        completed: int,
        failed: int,
        in_progress: int,
        total: int,
        items_property: Optional[List["_models.AnalyzeDocumentsLROResult"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
