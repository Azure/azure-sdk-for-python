# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Iterator, List, Optional, Type, TypeVar, Union, cast, overload
import uuid

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import RadiologyInsightsClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
_Unset: Any = object()
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_radiology_insights_infer_radiology_insights_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-09-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/radiology-insights/jobs"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if "Repeatability-Request-ID" not in _headers:
        _headers["Repeatability-Request-ID"] = str(uuid.uuid4())
    if "Repeatability-First-Sent" not in _headers:
        _headers["Repeatability-First-Sent"] = _SERIALIZER.serialize_data(
            datetime.datetime.now(datetime.timezone.utc), "rfc-1123"
        )
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class RadiologyInsightsClientOperationsMixin(RadiologyInsightsClientMixinABC):

    def _infer_radiology_insights_initial(
        self,
        body: Union[JSON, IO[bytes]] = _Unset,
        *,
        patients: List[_models.PatientRecord] = _Unset,
        configuration: Optional[_models.RadiologyInsightsModelConfiguration] = None,
        **kwargs: Any,
    ) -> Iterator[bytes]:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        if body is _Unset:
            if patients is _Unset:
                raise TypeError("missing required argument: patients")
            body = {"configuration": configuration, "patients": patients}
            body = {k: v for k, v in body.items() if v is not None}
        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_radiology_insights_infer_radiology_insights_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            try:
                response.read()  # Load the body in memory and close the socket
            except (StreamConsumedError, StreamClosedError):
                pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))
        response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
        response_headers["Repeatability-Result"] = self._deserialize(
            "str", response.headers.get("Repeatability-Result")
        )

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def begin_infer_radiology_insights(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError]:
        """Create Radiology Insights job.

        Creates a Radiology Insights job with the given request body.

        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns
         HealthInsightsOperationStatusRadiologyInsightsInferenceResultError. The
         HealthInsightsOperationStatusRadiologyInsightsInferenceResultError is compatible with
         MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.healthinsights.radiologyinsights.models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "patients": [
                        {
                            "id": "str",
                            "encounters": [
                                {
                                    "id": "str",
                                    "class": "str",
                                    "period": {
                                        "end": "2020-02-20 00:00:00",
                                        "start": "2020-02-20 00:00:00"
                                    }
                                }
                            ],
                            "info": {
                                "birthDate": "2020-02-20",
                                "clinicalInfo": [
                                    {
                                        "resourceType": "str",
                                        "id": "str",
                                        "implicitRules": "str",
                                        "language": "str",
                                        "meta": {
                                            "lastUpdated": "str",
                                            "profile": [
                                                "str"
                                            ],
                                            "security": [
                                                {
                                                    "code":
                                                      "str",
                                                    "display":
                                                      "str",
                                                    "extension":
                                                      [
                                                        {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                                                        }
                                                    ],
                                                    "id": "str",
                                                    "system":
                                                      "str",
                                                    "version":
                                                      "str"
                                                }
                                            ],
                                            "source": "str",
                                            "tag": [
                                                {
                                                    "code":
                                                      "str",
                                                    "display":
                                                      "str",
                                                    "extension":
                                                      [
                                                        {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                                                        }
                                                    ],
                                                    "id": "str",
                                                    "system":
                                                      "str",
                                                    "version":
                                                      "str"
                                                }
                                            ],
                                            "versionId": "str"
                                        }
                                    }
                                ],
                                "sex": "str"
                            },
                            "patientDocuments": [
                                {
                                    "content": {
                                        "sourceType": "str",
                                        "value": "str"
                                    },
                                    "id": "str",
                                    "type": "str",
                                    "administrativeMetadata": {
                                        "encounterId": "str",
                                        "orderedProcedures": [
                                            {
                                                "code": {
                                                    "coding": [
                                                        {
                "code": "str",
                "display": "str",
                "extension": [
                {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": ...,
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": ...,
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                }
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                                                        }
                                                    ],
                                                    "text": "str"
                                                },
                                                "description": "str",
                                                "extension": [
                                                    {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                ...
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                ],
                "text": "str"
                                                        },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                                                        },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                                                        },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                                                        },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                                                        },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                ...
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                                                        },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                                                        },
                "valueString": "str",
                "valueTime": "12:30:00"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "authors": [
                                        {
                                            "fullName": "str",
                                            "id": "str"
                                        }
                                    ],
                                    "clinicalType": "str",
                                    "createdDateTime": "2020-02-20 00:00:00",
                                    "language": "str",
                                    "specialtyType": "str"
                                }
                            ]
                        }
                    ],
                    "configuration": {
                        "includeEvidence": bool,
                        "inferenceOptions": {
                            "findingOptions": {
                                "provideFocusedSentenceEvidence": bool
                            },
                            "followupRecommendationOptions": {
                                "includeRecommendationsInReferences": bool,
                                "includeRecommendationsWithNoSpecifiedModality":
                                  bool,
                                "provideFocusedSentenceEvidence": bool
                            }
                        },
                        "inferenceTypes": [
                            "str"
                        ],
                        "locale": "str",
                        "verbose": bool
                    }
                }

                # response body for status code(s): 202
                response == {
                    "id": "str",
                    "status": "str",
                    "createdDateTime": "2020-02-20 00:00:00",
                    "error": {
                        "code": "str",
                        "message": "str",
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",
                            "innererror": ...
                        },
                        "target": "str"
                    },
                    "expirationDateTime": "2020-02-20 00:00:00",
                    "lastUpdateDateTime": "2020-02-20 00:00:00",
                    "result": {
                        "modelVersion": "str",
                        "patientResults": [
                            {
                                "inferences": [
                                    radiology_insights_inference
                                ],
                                "patientId": "str"
                            }
                        ]
                    }
                }
        """

    @overload
    def begin_infer_radiology_insights(
        self,
        *,
        patients: List[_models.PatientRecord],
        content_type: str = "application/json",
        configuration: Optional[_models.RadiologyInsightsModelConfiguration] = None,
        **kwargs: Any,
    ) -> LROPoller[_models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError]:
        """Create Radiology Insights job.

        Creates a Radiology Insights job with the given request body.

        :keyword patients: The list of patients, including their clinical information and data.
         Required.
        :paramtype patients: list[~azure.healthinsights.radiologyinsights.models.PatientRecord]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword configuration: Configuration affecting the Radiology Insights model's inference.
         Default value is None.
        :paramtype configuration:
         ~azure.healthinsights.radiologyinsights.models.RadiologyInsightsModelConfiguration
        :return: An instance of LROPoller that returns
         HealthInsightsOperationStatusRadiologyInsightsInferenceResultError. The
         HealthInsightsOperationStatusRadiologyInsightsInferenceResultError is compatible with
         MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.healthinsights.radiologyinsights.models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "id": "str",
                    "status": "str",
                    "createdDateTime": "2020-02-20 00:00:00",
                    "error": {
                        "code": "str",
                        "message": "str",
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",
                            "innererror": ...
                        },
                        "target": "str"
                    },
                    "expirationDateTime": "2020-02-20 00:00:00",
                    "lastUpdateDateTime": "2020-02-20 00:00:00",
                    "result": {
                        "modelVersion": "str",
                        "patientResults": [
                            {
                                "inferences": [
                                    radiology_insights_inference
                                ],
                                "patientId": "str"
                            }
                        ]
                    }
                }
        """

    @overload
    def begin_infer_radiology_insights(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[_models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError]:
        """Create Radiology Insights job.

        Creates a Radiology Insights job with the given request body.

        :param body: Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of LROPoller that returns
         HealthInsightsOperationStatusRadiologyInsightsInferenceResultError. The
         HealthInsightsOperationStatusRadiologyInsightsInferenceResultError is compatible with
         MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.healthinsights.radiologyinsights.models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "id": "str",
                    "status": "str",
                    "createdDateTime": "2020-02-20 00:00:00",
                    "error": {
                        "code": "str",
                        "message": "str",
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",
                            "innererror": ...
                        },
                        "target": "str"
                    },
                    "expirationDateTime": "2020-02-20 00:00:00",
                    "lastUpdateDateTime": "2020-02-20 00:00:00",
                    "result": {
                        "modelVersion": "str",
                        "patientResults": [
                            {
                                "inferences": [
                                    radiology_insights_inference
                                ],
                                "patientId": "str"
                            }
                        ]
                    }
                }
        """

    @distributed_trace
    def begin_infer_radiology_insights(
        self,
        body: Union[JSON, IO[bytes]] = _Unset,
        *,
        patients: List[_models.PatientRecord] = _Unset,
        configuration: Optional[_models.RadiologyInsightsModelConfiguration] = None,
        **kwargs: Any,
    ) -> LROPoller[_models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError]:
        """Create Radiology Insights job.

        Creates a Radiology Insights job with the given request body.

        :param body: Is either a JSON type or a IO[bytes] type. Required.
        :type body: JSON or IO[bytes]
        :keyword patients: The list of patients, including their clinical information and data.
         Required.
        :paramtype patients: list[~azure.healthinsights.radiologyinsights.models.PatientRecord]
        :keyword configuration: Configuration affecting the Radiology Insights model's inference.
         Default value is None.
        :paramtype configuration:
         ~azure.healthinsights.radiologyinsights.models.RadiologyInsightsModelConfiguration
        :return: An instance of LROPoller that returns
         HealthInsightsOperationStatusRadiologyInsightsInferenceResultError. The
         HealthInsightsOperationStatusRadiologyInsightsInferenceResultError is compatible with
         MutableMapping
        :rtype:
         ~azure.core.polling.LROPoller[~azure.healthinsights.radiologyinsights.models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "patients": [
                        {
                            "id": "str",
                            "encounters": [
                                {
                                    "id": "str",
                                    "class": "str",
                                    "period": {
                                        "end": "2020-02-20 00:00:00",
                                        "start": "2020-02-20 00:00:00"
                                    }
                                }
                            ],
                            "info": {
                                "birthDate": "2020-02-20",
                                "clinicalInfo": [
                                    {
                                        "resourceType": "str",
                                        "id": "str",
                                        "implicitRules": "str",
                                        "language": "str",
                                        "meta": {
                                            "lastUpdated": "str",
                                            "profile": [
                                                "str"
                                            ],
                                            "security": [
                                                {
                                                    "code":
                                                      "str",
                                                    "display":
                                                      "str",
                                                    "extension":
                                                      [
                                                        {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                                                        }
                                                    ],
                                                    "id": "str",
                                                    "system":
                                                      "str",
                                                    "version":
                                                      "str"
                                                }
                                            ],
                                            "source": "str",
                                            "tag": [
                                                {
                                                    "code":
                                                      "str",
                                                    "display":
                                                      "str",
                                                    "extension":
                                                      [
                                                        {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                ...
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                                                        }
                                                    ],
                                                    "id": "str",
                                                    "system":
                                                      "str",
                                                    "version":
                                                      "str"
                                                }
                                            ],
                                            "versionId": "str"
                                        }
                                    }
                                ],
                                "sex": "str"
                            },
                            "patientDocuments": [
                                {
                                    "content": {
                                        "sourceType": "str",
                                        "value": "str"
                                    },
                                    "id": "str",
                                    "type": "str",
                                    "administrativeMetadata": {
                                        "encounterId": "str",
                                        "orderedProcedures": [
                                            {
                                                "code": {
                                                    "coding": [
                                                        {
                "code": "str",
                "display": "str",
                "extension": [
                {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": ...,
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": ...,
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                },
                "valueString": "str",
                "valueTime": "12:30:00"
                }
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                                                        }
                                                    ],
                                                    "text": "str"
                                                },
                                                "description": "str",
                                                "extension": [
                                                    {
                "url": "str",
                "valueBoolean": bool,
                "valueCodeableConcept": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                ...
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                ],
                "text": "str"
                                                        },
                "valueDateTime": "str",
                "valueInteger": 0,
                "valuePeriod": {
                "end": "str",
                "start": "str"
                                                        },
                "valueQuantity": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                                                        },
                "valueRange": {
                "high": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "low": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                                                        },
                "valueRatio": {
                "denominator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "numerator": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                }
                                                        },
                "valueReference": {
                "display": "str",
                "identifier": {
                "assigner": ...,
                "period": {
                "end": "str",
                "start": "str"
                },
                "system": "str",
                "type": {
                "coding": [
                {
                "code": "str",
                "display": "str",
                "extension": [
                ...
                ],
                "id": "str",
                "system": "str",
                "version": "str"
                }
                ],
                "text": "str"
                },
                "use": "str",
                "value": "str"
                },
                "reference": "str",
                "type": "str"
                                                        },
                "valueSampledData": {
                "dimensions": 0,
                "origin": {
                "code": "str",
                "comparator": "str",
                "system": "str",
                "unit": "str",
                "value": 0.0
                },
                "period": 0.0,
                "data": "str",
                "factor": 0.0,
                "lowerLimit": 0.0,
                "upperLimit": 0.0
                                                        },
                "valueString": "str",
                "valueTime": "12:30:00"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "authors": [
                                        {
                                            "fullName": "str",
                                            "id": "str"
                                        }
                                    ],
                                    "clinicalType": "str",
                                    "createdDateTime": "2020-02-20 00:00:00",
                                    "language": "str",
                                    "specialtyType": "str"
                                }
                            ]
                        }
                    ],
                    "configuration": {
                        "includeEvidence": bool,
                        "inferenceOptions": {
                            "findingOptions": {
                                "provideFocusedSentenceEvidence": bool
                            },
                            "followupRecommendationOptions": {
                                "includeRecommendationsInReferences": bool,
                                "includeRecommendationsWithNoSpecifiedModality":
                                  bool,
                                "provideFocusedSentenceEvidence": bool
                            }
                        },
                        "inferenceTypes": [
                            "str"
                        ],
                        "locale": "str",
                        "verbose": bool
                    }
                }

                # response body for status code(s): 202
                response == {
                    "id": "str",
                    "status": "str",
                    "createdDateTime": "2020-02-20 00:00:00",
                    "error": {
                        "code": "str",
                        "message": "str",
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",
                            "innererror": ...
                        },
                        "target": "str"
                    },
                    "expirationDateTime": "2020-02-20 00:00:00",
                    "lastUpdateDateTime": "2020-02-20 00:00:00",
                    "result": {
                        "modelVersion": "str",
                        "patientResults": [
                            {
                                "inferences": [
                                    radiology_insights_inference
                                ],
                                "patientId": "str"
                            }
                        ]
                    }
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError] = kwargs.pop(
            "cls", None
        )
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._infer_radiology_insights_initial(
                body=body,
                patients=patients,
                configuration=configuration,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs,
            )
            raw_result.http_response.read()  # type: ignore
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Repeatability-Result"] = self._deserialize(
                "str", response.headers.get("Repeatability-Result")
            )

            deserialized = _deserialize(
                _models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError,
                response.json().get("result"),
            )
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, LROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller[
                _models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError
            ].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller[_models.HealthInsightsOperationStatusRadiologyInsightsInferenceResultError](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )
