# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AzureAppConfigurationPreparer
from testpreparer_async import AzureAppConfigurationClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureAppConfigurationAsync(AzureAppConfigurationClientTestBaseAsync):
    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_get_keys(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = client.get_keys(
            api_version="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_check_keys(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.check_keys(
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_get_key_values(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = client.get_key_values(
            api_version="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_check_key_values(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.check_key_values(
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_get_key_value(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.get_key_value(
            key="str",
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_delete_key_value(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.delete_key_value(
            key="str",
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_check_key_value(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.check_key_value(
            key="str",
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_get_snapshots(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = client.get_snapshots(
            api_version="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_check_snapshots(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.check_snapshots(
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_get_snapshot(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.get_snapshot(
            name="str",
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_get_operation_details(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.get_operation_details(
            api_version="str",
            snapshot="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_begin_create_snapshot(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await (
            await client.begin_create_snapshot(
                name="str",
                entity={
                    "filters": [{"key": "str", "label": "str", "tags": ["str"]}],
                    "name": "str",
                    "composition_type": "str",
                    "created": "2020-02-20 00:00:00",
                    "etag": "str",
                    "expires": "2020-02-20 00:00:00",
                    "items_count": 0,
                    "retention_period": 0,
                    "size": 0,
                    "status": "str",
                    "tags": {"str": "str"},
                },
                api_version="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_check_snapshot(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.check_snapshot(
            name="str",
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_get_labels(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = client.get_labels(
            api_version="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_check_labels(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.check_labels(
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_put_lock(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.put_lock(
            key="str",
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_delete_lock(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.delete_lock(
            key="str",
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_get_revisions(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = client.get_revisions(
            api_version="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @AzureAppConfigurationPreparer()
    @recorded_by_proxy_async
    async def test_check_revisions(self, azureappconfiguration_endpoint):
        client = self.create_async_client(endpoint=azureappconfiguration_endpoint)
        response = await client.check_revisions(
            api_version="str",
        )

        # please add some check logic here by yourself
        # ...
