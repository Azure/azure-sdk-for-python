# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ODataV4Format

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Allocation(_model_base.Model):
    """Defines how to allocate variants based on context.

    :ivar default_when_disabled: The default variant to use when disabled.
    :vartype default_when_disabled: str
    :ivar default_when_enabled: The default variant to use when enabled but not allocated.
    :vartype default_when_enabled: str
    :ivar percentile: Allocates percentiles to variants.
    :vartype percentile: list[~azure.appconfiguration.models.PercentileAllocation]
    :ivar user: Allocates users to variants.
    :vartype user: list[~azure.appconfiguration.models.UserAllocation]
    :ivar group: Allocates groups to variants.
    :vartype group: list[~azure.appconfiguration.models.GroupAllocation]
    :ivar seed: The seed used for random allocation.
    :vartype seed: str
    """

    default_when_disabled: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The default variant to use when disabled."""
    default_when_enabled: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The default variant to use when enabled but not allocated."""
    percentile: Optional[List["_models.PercentileAllocation"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Allocates percentiles to variants."""
    user: Optional[List["_models.UserAllocation"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Allocates users to variants."""
    group: Optional[List["_models.GroupAllocation"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Allocates groups to variants."""
    seed: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The seed used for random allocation."""

    @overload
    def __init__(
        self,
        *,
        default_when_disabled: Optional[str] = None,
        default_when_enabled: Optional[str] = None,
        percentile: Optional[List["_models.PercentileAllocation"]] = None,
        user: Optional[List["_models.UserAllocation"]] = None,
        group: Optional[List["_models.GroupAllocation"]] = None,
        seed: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Conditions(_model_base.Model):
    """The conditions that must be met for the feature flag to be enabled.

    :ivar requirement_type: The requirement type for the conditions. Known values are: "Any" and
     "All".
    :vartype requirement_type: str or ~azure.appconfiguration.models.RequirementType
    :ivar filters: The filters that will conditionally enable or disable the flag.
    :vartype filters: list[~azure.appconfiguration.models.FeatureFlagFilter]
    """

    requirement_type: Optional[Union[str, "_models.RequirementType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The requirement type for the conditions. Known values are: \"Any\" and \"All\"."""
    filters: Optional[List["_models.FeatureFlagFilter"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The filters that will conditionally enable or disable the flag."""

    @overload
    def __init__(
        self,
        *,
        requirement_type: Optional[Union[str, "_models.RequirementType"]] = None,
        filters: Optional[List["_models.FeatureFlagFilter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
    

class Error(_model_base.Model):
    """Azure App Configuration error object.

    :ivar type: The type of the error.
    :vartype type: str
    :ivar title: A brief summary of the error.
    :vartype title: str
    :ivar name: The name of the parameter that resulted in the error.
    :vartype name: str
    :ivar detail: A detailed description of the error.
    :vartype detail: str
    :ivar status: The HTTP status code that the error maps to.
    :vartype status: int
    """

    type: Optional[str] = rest_field()
    """The type of the error."""
    title: Optional[str] = rest_field()
    """A brief summary of the error."""
    name: Optional[str] = rest_field()
    """The name of the parameter that resulted in the error."""
    detail: Optional[str] = rest_field()
    """A detailed description of the error."""
    status: Optional[int] = rest_field()
    """The HTTP status code that the error maps to."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        title: Optional[str] = None,
        name: Optional[str] = None,
        detail: Optional[str] = None,
        status: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FeatureFlag(_model_base.Model):
    """A feature flag.

    :ivar name: The name of the feature flag. Required.
    :vartype name: str
    :ivar alias: The alias of the feature flag.
    :vartype alias: str
    :ivar label: The label the feature flag belongs to.
    :vartype label: str
    :ivar description: The description of the feature flag.
    :vartype description: str
    :ivar enabled: The enabled state of the feature flag.
    :vartype enabled: bool
    :ivar conditions: The conditions of the feature flag.
    :vartype conditions: ~azure.appconfiguration.models.Conditions
    :ivar variants: The variants of the feature flag.
    :vartype variants: list[~azure.appconfiguration.models.Variant]
    :ivar allocation: The allocation of the feature flag.
    :vartype allocation: ~azure.appconfiguration.models.Allocation
    :ivar telemetry: The telemetry settings of the feature flag.
    :vartype telemetry: ~azure.appconfiguration.models.Telemetry
    :ivar tags: The tags of the feature flag.
    :vartype tags: dict[str, str]
    :ivar last_modified: A date representing the last time the feature flag was modified.
    :vartype last_modified: ~datetime.datetime
    :ivar etag: A value representing the current state of the resource.
    :vartype etag: str
    """

    name: str = rest_field(visibility=["read"])
    """The name of the feature flag. Required."""
    alias: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The alias of the feature flag."""
    label: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The label the feature flag belongs to."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the feature flag."""
    enabled: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The enabled state of the feature flag."""
    conditions: Optional["_models.Conditions"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The conditions of the feature flag."""
    variants: Optional[List["_models.Variant"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The variants of the feature flag."""
    allocation: Optional["_models.Allocation"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The allocation of the feature flag."""
    telemetry: Optional["_models.FeatureFlagTelemetry"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The telemetry settings of the feature flag."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tags of the feature flag."""
    last_modified: Optional[datetime.datetime] = rest_field(visibility=["read"], format="rfc3339")
    """A date representing the last time the feature flag was modified."""
    etag: Optional[str] = rest_field(visibility=["read"])
    """A value representing the current state of the resource."""

    @overload
    def __init__(
        self,
        *,
        alias: Optional[str] = None,
        label: Optional[str] = None,
        description: Optional[str] = None,
        enabled: Optional[bool] = None,
        conditions: Optional["_models.Conditions"] = None,
        variants: Optional[List["_models.Variant"]] = None,
        allocation: Optional["_models.Allocation"] = None,
        telemetry: Optional["_models.FeatureFlagTelemetry"] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FeatureFlagFilter(_model_base.Model):
    """Feature Flag Filter object.

    :ivar name: The name of the filter. Required.
    :vartype name: str
    :ivar parameters: The parameters used by the filter.
    :vartype parameters: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the filter. Required."""
    parameters: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The parameters used by the filter."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        parameters: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GroupAllocation(_model_base.Model):
    """Feature Flag GroupAllocation object.

    :ivar variant: The variant to allocate these percentiles to. Required.
    :vartype variant: str
    :ivar groups: The groups to get this variant. Required.
    :vartype groups: list[str]
    """

    variant: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The variant to allocate these percentiles to. Required."""
    groups: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The groups to get this variant. Required."""

    @overload
    def __init__(
        self,
        *,
        variant: str,
        groups: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Key(_model_base.Model):
    """Keys serve as identifiers for key-values and are used to store and retrieve corresponding
    values.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar name: The name of the key. Required.
    :vartype name: str
    """

    name: str = rest_field(visibility=["read"])
    """The name of the key. Required."""


class KeyValue(_model_base.Model):
    """A key-value pair representing application settings.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar key: The key of the key-value. Required.
    :vartype key: str
    :ivar label: The label the key-value belongs to.
    :vartype label: str
    :ivar content_type: The content type of the value stored within the key-value.
    :vartype content_type: str
    :ivar value: The value of the key-value.
    :vartype value: str
    :ivar last_modified: A date representing the last time the key-value was modified.
    :vartype last_modified: ~datetime.datetime
    :ivar tags: The tags of the key-value.
    :vartype tags: dict[str, str]
    :ivar locked: Indicates whether the key-value is locked.
    :vartype locked: bool
    :ivar etag: A value representing the current state of the resource.
    :vartype etag: str
    """

    key: str = rest_field(visibility=["read"])
    """The key of the key-value. Required."""
    label: Optional[str] = rest_field()
    """The label the key-value belongs to."""
    content_type: Optional[str] = rest_field()
    """The content type of the value stored within the key-value."""
    value: Optional[str] = rest_field()
    """The value of the key-value."""
    last_modified: Optional[datetime.datetime] = rest_field(format="rfc3339")
    """A date representing the last time the key-value was modified."""
    tags: Optional[Dict[str, str]] = rest_field()
    """The tags of the key-value."""
    locked: Optional[bool] = rest_field()
    """Indicates whether the key-value is locked."""
    etag: Optional[str] = rest_field()
    """A value representing the current state of the resource."""

    @overload
    def __init__(
        self,
        *,
        label: Optional[str] = None,
        content_type: Optional[str] = None,
        value: Optional[str] = None,
        last_modified: Optional[datetime.datetime] = None,
        tags: Optional[Dict[str, str]] = None,
        locked: Optional[bool] = None,
        etag: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KeyValueFilter(_model_base.Model):
    """Enables filtering of key-values. Syntax reference:
    https://aka.ms/azconfig/docs/restapisnapshots.


    :ivar key: Filters key-values by their key field. Required.
    :vartype key: str
    :ivar label: Filters key-values by their label field.
    :vartype label: str
    :ivar tags: Filters key-values by their tags field.
    :vartype tags: list[str]
    """

    key: str = rest_field()
    """Filters key-values by their key field. Required."""
    label: Optional[str] = rest_field()
    """Filters key-values by their label field."""
    tags: Optional[List[str]] = rest_field()
    """Filters key-values by their tags field."""

    @overload
    def __init__(
        self,
        *,
        key: str,
        label: Optional[str] = None,
        tags: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Label(_model_base.Model):
    """Labels are used to group key-values.

    :ivar name: The name of the label.
    :vartype name: str
    """

    name: Optional[str] = rest_field()
    """The name of the label."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDetails(_model_base.Model):
    """Details of a long running operation.


    :ivar id: The unique id of the operation. Required.
    :vartype id: str
    :ivar status: The current status of the operation. Required. Known values are: "NotStarted",
     "Running", "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.appconfiguration.models.OperationState
    :ivar error: An error, available when the status is ``Failed``\\ , describing why the operation
     failed.
    :vartype error: ~azure.core.ODataV4Format
    """

    id: str = rest_field()
    """The unique id of the operation. Required."""
    status: Union[str, "_models.OperationState"] = rest_field()
    """The current status of the operation. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[ODataV4Format] = rest_field()
    """An error, available when the status is ``Failed``\ , describing why the operation
     failed."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationState"],
        error: Optional[ODataV4Format] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PercentileAllocation(_model_base.Model):
    """Feature Flag PercentileAllocation object.

    :ivar variant: The variant to allocate these percentiles to. Required.
    :vartype variant: str
    :ivar from_property: The lower bounds for this percentile allocation. Required.
    :vartype from_property: int
    :ivar to: The upper bounds for this percentile allocation. Required.
    :vartype to: int
    """

    variant: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The variant to allocate these percentiles to. Required."""
    from_property: int = rest_field(name="from", visibility=["read", "create", "update", "delete", "query"])
    """The lower bounds for this percentile allocation. Required."""
    to: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The upper bounds for this percentile allocation. Required."""

    @overload
    def __init__(
        self,
        *,
        variant: str,
        from_property: int,
        to: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Snapshot(_model_base.Model):
    """A snapshot is a named, immutable subset of an App Configuration store's key-values.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar name: The name of the snapshot. Required.
    :vartype name: str
    :ivar status: The current status of the snapshot. Known values are: "provisioning", "ready",
     "archived", and "failed".
    :vartype status: str or ~azure.appconfiguration.models.SnapshotStatus
    :ivar filters: A list of filters used to filter the key-values included in the snapshot.
     Required.
    :vartype filters: list[~azure.appconfiguration.models.KeyValueFilter]
    :ivar composition_type: The composition type describes how the key-values within the snapshot
     are
     composed. The 'key' composition type ensures there are no two key-values
     containing the same key. The 'key_label' composition type ensures there are no
     two key-values containing the same key and label. Known values are: "key" and "key_label".
    :vartype composition_type: str or ~azure.appconfiguration.models.SnapshotComposition
    :ivar created: The time that the snapshot was created.
    :vartype created: ~datetime.datetime
    :ivar expires: The time that the snapshot will expire.
    :vartype expires: ~datetime.datetime
    :ivar retention_period: The amount of time, in seconds, that a snapshot will remain in the
     archived
     state before expiring. This property is only writable during the creation of a
     snapshot. If not specified, the default lifetime of key-value revisions will be
     used.
    :vartype retention_period: int
    :ivar size: The size in bytes of the snapshot.
    :vartype size: int
    :ivar items_count: The amount of key-values in the snapshot.
    :vartype items_count: int
    :ivar tags: The tags of the snapshot.
    :vartype tags: dict[str, str]
    :ivar etag: A value representing the current state of the snapshot.
    :vartype etag: str
    """

    name: str = rest_field(visibility=["read"])
    """The name of the snapshot. Required."""
    status: Optional[Union[str, "_models.SnapshotStatus"]] = rest_field(visibility=["read"])
    """The current status of the snapshot. Known values are: \"provisioning\", \"ready\",
     \"archived\", and \"failed\"."""
    filters: List["_models.KeyValueFilter"] = rest_field()
    """A list of filters used to filter the key-values included in the snapshot. Required."""
    composition_type: Optional[Union[str, "_models.SnapshotComposition"]] = rest_field()
    """The composition type describes how the key-values within the snapshot are
     composed. The 'key' composition type ensures there are no two key-values
     containing the same key. The 'key_label' composition type ensures there are no
     two key-values containing the same key and label. Known values are: \"key\" and \"key_label\"."""
    created: Optional[datetime.datetime] = rest_field(visibility=["read"], format="rfc3339")
    """The time that the snapshot was created."""
    expires: Optional[datetime.datetime] = rest_field(visibility=["read"], format="rfc3339")
    """The time that the snapshot will expire."""
    retention_period: Optional[int] = rest_field()
    """The amount of time, in seconds, that a snapshot will remain in the archived
     state before expiring. This property is only writable during the creation of a
     snapshot. If not specified, the default lifetime of key-value revisions will be
     used."""
    size: Optional[int] = rest_field(visibility=["read"])
    """The size in bytes of the snapshot."""
    items_count: Optional[int] = rest_field(visibility=["read"])
    """The amount of key-values in the snapshot."""
    tags: Optional[Dict[str, str]] = rest_field()
    """The tags of the snapshot."""
    etag: Optional[str] = rest_field(visibility=["read"])
    """A value representing the current state of the snapshot."""

    @overload
    def __init__(
        self,
        *,
        filters: List["_models.KeyValueFilter"],
        composition_type: Optional[Union[str, "_models.SnapshotComposition"]] = None,
        retention_period: Optional[int] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SnapshotUpdateParameters(_model_base.Model):
    """Parameters used to update a snapshot.

    :ivar status: The desired status of the snapshot. Known values are: "provisioning", "ready",
     "archived", and "failed".
    :vartype status: str or ~azure.appconfiguration.models.SnapshotStatus
    """

    status: Optional[Union[str, "_models.SnapshotStatus"]] = rest_field()
    """The desired status of the snapshot. Known values are: \"provisioning\", \"ready\",
     \"archived\", and \"failed\"."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.SnapshotStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FeatureFlagTelemetry(_model_base.Model):
    """Feature Flag Telemetry object.

    :ivar enabled: The enabled state of the telemetry. Required.
    :vartype enabled: bool
    :ivar metadata: The metadata to include on outbound telemetry.
    :vartype metadata: dict[str, str]
    """

    enabled: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The enabled state of the telemetry. Required."""
    metadata: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The metadata to include on outbound telemetry."""

    @overload
    def __init__(
        self,
        *,
        enabled: bool,
        metadata: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserAllocation(_model_base.Model):
    """Feature Flag UserAllocation object.

    :ivar variant: The variant to allocate these percentiles to. Required.
    :vartype variant: str
    :ivar users: The users to get this variant. Required.
    :vartype users: list[str]
    """

    variant: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The variant to allocate these percentiles to. Required."""
    users: List[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The users to get this variant. Required."""

    @overload
    def __init__(
        self,
        *,
        variant: str,
        users: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Variant(_model_base.Model):
    """Feature Flag Variants object.

    :ivar name: The name of the variant. Required.
    :vartype name: str
    :ivar configuration_value: The value of the variant.
    :vartype configuration_value: str
    :ivar status_override: Determines if the variant should override the status of the flag. Known
     values are: "None", "Enabled", and "Disabled".
    :vartype status_override: str or ~azure.appconfiguration.models.StatusOverride
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the variant. Required."""
    configuration_value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the variant."""
    status_override: Optional[Union[str, "_models.StatusOverride"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Determines if the variant should override the status of the flag. Known values are: \"None\",
     \"Enabled\", and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        configuration_value: Optional[str] = None,
        status_override: Optional[Union[str, "_models.StatusOverride"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)