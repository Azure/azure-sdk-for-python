# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import ARMPipelineClient
from azure.profiles import KnownProfiles, ProfileDefinition
from azure.profiles.multiapiclient import MultiApiClientMixin

from ._configuration import AppConfigurationManagementClientConfiguration
from ._serialization import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials import TokenCredential

class _SDKClient(object):
    def __init__(self, *args, **kwargs):
        """This is a fake class to support current implemetation of MultiApiClientMixin."
        Will be removed in final version of multiapi azure-core based client
        """
        pass

class AppConfigurationManagementClient(MultiApiClientMixin, _SDKClient):
    """AppConfigurationManagementClient.

    This ready contains multiple API versions, to help you deal with all of the Azure clouds
    (Azure Stack, Azure Government, Azure China, etc.).
    By default, it uses the latest API version available on public Azure.
    For production, you should stick to a particular api-version and/or profile.
    The profile sets a mapping between an operation group and its API version.
    The api-version parameter sets the default API version if the operation
    group is not described in the profile.

    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials.TokenCredential
    :param subscription_id: The Microsoft Azure subscription ID. Required.
    :type subscription_id: str
    :param api_version: API version to use if no profile is provided, or if missing in profile.
    :type api_version: str
    :param base_url: Service URL
    :type base_url: str
    :param profile: A profile definition, from KnownProfiles to dict.
    :type profile: azure.profiles.KnownProfiles
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    DEFAULT_API_VERSION = '2023-03-01'
    _PROFILE_TAG = "azure.mgmt.appconfiguration.AppConfigurationManagementClient"
    LATEST_PROFILE = ProfileDefinition({
        _PROFILE_TAG: {
            None: DEFAULT_API_VERSION,
        }},
        _PROFILE_TAG + " latest"
    )

    def __init__(
        self,
        credential: "TokenCredential",
        subscription_id: str,
        api_version: Optional[str]=None,
        base_url: str = "https://management.azure.com",
        profile: KnownProfiles=KnownProfiles.default,
        **kwargs: Any
    ):
        self._config = AppConfigurationManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)
        super(AppConfigurationManagementClient, self).__init__(
            api_version=api_version,
            profile=profile
        )

    @classmethod
    def _models_dict(cls, api_version):
        return {k: v for k, v in cls.models(api_version).__dict__.items() if isinstance(v, type)}

    @classmethod
    def models(cls, api_version=DEFAULT_API_VERSION):
        """Module depends on the API version:

           * 2022-03-01-preview: :mod:`v2022_03_01_preview.models<azure.mgmt.appconfiguration.v2022_03_01_preview.models>`
           * 2022-05-01: :mod:`v2022_05_01.models<azure.mgmt.appconfiguration.v2022_05_01.models>`
           * 2023-03-01: :mod:`v2023_03_01.models<azure.mgmt.appconfiguration.v2023_03_01.models>`
        """
        if api_version == '2022-03-01-preview':
            from .v2022_03_01_preview import models
            return models
        elif api_version == '2022-05-01':
            from .v2022_05_01 import models
            return models
        elif api_version == '2023-03-01':
            from .v2023_03_01 import models
            return models
        raise ValueError("API version {} is not available".format(api_version))

    @property
    def configuration_stores(self):
        """Instance depends on the API version:

           * 2022-03-01-preview: :class:`ConfigurationStoresOperations<azure.mgmt.appconfiguration.v2022_03_01_preview.operations.ConfigurationStoresOperations>`
           * 2022-05-01: :class:`ConfigurationStoresOperations<azure.mgmt.appconfiguration.v2022_05_01.operations.ConfigurationStoresOperations>`
           * 2023-03-01: :class:`ConfigurationStoresOperations<azure.mgmt.appconfiguration.v2023_03_01.operations.ConfigurationStoresOperations>`
        """
        api_version = self._get_api_version('configuration_stores')
        if api_version == '2022-03-01-preview':
            from .v2022_03_01_preview.operations import ConfigurationStoresOperations as OperationClass
        elif api_version == '2022-05-01':
            from .v2022_05_01.operations import ConfigurationStoresOperations as OperationClass
        elif api_version == '2023-03-01':
            from .v2023_03_01.operations import ConfigurationStoresOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'configuration_stores'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)))

    @property
    def key_values(self):
        """Instance depends on the API version:

           * 2022-03-01-preview: :class:`KeyValuesOperations<azure.mgmt.appconfiguration.v2022_03_01_preview.operations.KeyValuesOperations>`
           * 2022-05-01: :class:`KeyValuesOperations<azure.mgmt.appconfiguration.v2022_05_01.operations.KeyValuesOperations>`
           * 2023-03-01: :class:`KeyValuesOperations<azure.mgmt.appconfiguration.v2023_03_01.operations.KeyValuesOperations>`
        """
        api_version = self._get_api_version('key_values')
        if api_version == '2022-03-01-preview':
            from .v2022_03_01_preview.operations import KeyValuesOperations as OperationClass
        elif api_version == '2022-05-01':
            from .v2022_05_01.operations import KeyValuesOperations as OperationClass
        elif api_version == '2023-03-01':
            from .v2023_03_01.operations import KeyValuesOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'key_values'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)))

    @property
    def operations(self):
        """Instance depends on the API version:

           * 2022-03-01-preview: :class:`Operations<azure.mgmt.appconfiguration.v2022_03_01_preview.operations.Operations>`
           * 2022-05-01: :class:`Operations<azure.mgmt.appconfiguration.v2022_05_01.operations.Operations>`
           * 2023-03-01: :class:`Operations<azure.mgmt.appconfiguration.v2023_03_01.operations.Operations>`
        """
        api_version = self._get_api_version('operations')
        if api_version == '2022-03-01-preview':
            from .v2022_03_01_preview.operations import Operations as OperationClass
        elif api_version == '2022-05-01':
            from .v2022_05_01.operations import Operations as OperationClass
        elif api_version == '2023-03-01':
            from .v2023_03_01.operations import Operations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'operations'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)))

    @property
    def private_endpoint_connections(self):
        """Instance depends on the API version:

           * 2022-03-01-preview: :class:`PrivateEndpointConnectionsOperations<azure.mgmt.appconfiguration.v2022_03_01_preview.operations.PrivateEndpointConnectionsOperations>`
           * 2022-05-01: :class:`PrivateEndpointConnectionsOperations<azure.mgmt.appconfiguration.v2022_05_01.operations.PrivateEndpointConnectionsOperations>`
           * 2023-03-01: :class:`PrivateEndpointConnectionsOperations<azure.mgmt.appconfiguration.v2023_03_01.operations.PrivateEndpointConnectionsOperations>`
        """
        api_version = self._get_api_version('private_endpoint_connections')
        if api_version == '2022-03-01-preview':
            from .v2022_03_01_preview.operations import PrivateEndpointConnectionsOperations as OperationClass
        elif api_version == '2022-05-01':
            from .v2022_05_01.operations import PrivateEndpointConnectionsOperations as OperationClass
        elif api_version == '2023-03-01':
            from .v2023_03_01.operations import PrivateEndpointConnectionsOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'private_endpoint_connections'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)))

    @property
    def private_link_resources(self):
        """Instance depends on the API version:

           * 2022-03-01-preview: :class:`PrivateLinkResourcesOperations<azure.mgmt.appconfiguration.v2022_03_01_preview.operations.PrivateLinkResourcesOperations>`
           * 2022-05-01: :class:`PrivateLinkResourcesOperations<azure.mgmt.appconfiguration.v2022_05_01.operations.PrivateLinkResourcesOperations>`
           * 2023-03-01: :class:`PrivateLinkResourcesOperations<azure.mgmt.appconfiguration.v2023_03_01.operations.PrivateLinkResourcesOperations>`
        """
        api_version = self._get_api_version('private_link_resources')
        if api_version == '2022-03-01-preview':
            from .v2022_03_01_preview.operations import PrivateLinkResourcesOperations as OperationClass
        elif api_version == '2022-05-01':
            from .v2022_05_01.operations import PrivateLinkResourcesOperations as OperationClass
        elif api_version == '2023-03-01':
            from .v2023_03_01.operations import PrivateLinkResourcesOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'private_link_resources'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)))

    @property
    def replicas(self):
        """Instance depends on the API version:

           * 2022-03-01-preview: :class:`ReplicasOperations<azure.mgmt.appconfiguration.v2022_03_01_preview.operations.ReplicasOperations>`
           * 2023-03-01: :class:`ReplicasOperations<azure.mgmt.appconfiguration.v2023_03_01.operations.ReplicasOperations>`
        """
        api_version = self._get_api_version('replicas')
        if api_version == '2022-03-01-preview':
            from .v2022_03_01_preview.operations import ReplicasOperations as OperationClass
        elif api_version == '2023-03-01':
            from .v2023_03_01.operations import ReplicasOperations as OperationClass
        else:
            raise ValueError("API version {} does not have operation group 'replicas'".format(api_version))
        self._config.api_version = api_version
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)))

    def close(self):
        self._client.close()
    def __enter__(self):
        self._client.__enter__()
        return self
    def __exit__(self, *exc_details):
        self._client.__exit__(*exc_details)
