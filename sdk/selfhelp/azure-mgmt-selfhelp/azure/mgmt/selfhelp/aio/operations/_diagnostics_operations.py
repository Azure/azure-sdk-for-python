# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.async_arm_polling import AsyncARMPolling

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._diagnostics_operations import (
    build_check_name_availability_request,
    build_create_request,
    build_get_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class DiagnosticsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.selfhelp.aio.SelfHelpMgmtClient`'s
        :attr:`diagnostics` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def check_name_availability(
        self,
        scope: str,
        check_name_availability_request: Optional[_models.CheckNameAvailabilityRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        """This API is used to check the uniqueness of a resource name used for a diagnostic check.

        :param scope: This is an extension resource provider and only resource level extension is
         supported at the moment. Required.
        :type scope: str
        :param check_name_availability_request: The required parameters for availability check. Default
         value is None.
        :type check_name_availability_request: ~azure.mgmt.selfhelp.models.CheckNameAvailabilityRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CheckNameAvailabilityResponse or the result of cls(response)
        :rtype: ~azure.mgmt.selfhelp.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def check_name_availability(
        self,
        scope: str,
        check_name_availability_request: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        """This API is used to check the uniqueness of a resource name used for a diagnostic check.

        :param scope: This is an extension resource provider and only resource level extension is
         supported at the moment. Required.
        :type scope: str
        :param check_name_availability_request: The required parameters for availability check. Default
         value is None.
        :type check_name_availability_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CheckNameAvailabilityResponse or the result of cls(response)
        :rtype: ~azure.mgmt.selfhelp.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def check_name_availability(
        self,
        scope: str,
        check_name_availability_request: Optional[Union[_models.CheckNameAvailabilityRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.CheckNameAvailabilityResponse:
        """This API is used to check the uniqueness of a resource name used for a diagnostic check.

        :param scope: This is an extension resource provider and only resource level extension is
         supported at the moment. Required.
        :type scope: str
        :param check_name_availability_request: The required parameters for availability check. Is
         either a CheckNameAvailabilityRequest type or a IO type. Default value is None.
        :type check_name_availability_request: ~azure.mgmt.selfhelp.models.CheckNameAvailabilityRequest
         or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CheckNameAvailabilityResponse or the result of cls(response)
        :rtype: ~azure.mgmt.selfhelp.models.CheckNameAvailabilityResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.CheckNameAvailabilityResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(check_name_availability_request, (IO, bytes)):
            _content = check_name_availability_request
        else:
            if check_name_availability_request is not None:
                _json = self._serialize.body(check_name_availability_request, "CheckNameAvailabilityRequest")
            else:
                _json = None

        request = build_check_name_availability_request(
            scope=scope,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.check_name_availability.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("CheckNameAvailabilityResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    check_name_availability.metadata = {"url": "/{scope}/providers/Microsoft.Help/checkNameAvailability"}

    async def _create_initial(
        self,
        scope: str,
        diagnostics_resource_name: str,
        diagnostic_resource_request: Optional[Union[_models.DiagnosticResource, IO]] = None,
        **kwargs: Any
    ) -> _models.DiagnosticResource:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DiagnosticResource] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(diagnostic_resource_request, (IO, bytes)):
            _content = diagnostic_resource_request
        else:
            if diagnostic_resource_request is not None:
                _json = self._serialize.body(diagnostic_resource_request, "DiagnosticResource")
            else:
                _json = None

        request = build_create_request(
            scope=scope,
            diagnostics_resource_name=diagnostics_resource_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self._create_initial.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("DiagnosticResource", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    _create_initial.metadata = {"url": "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}"}

    @overload
    async def begin_create(
        self,
        scope: str,
        diagnostics_resource_name: str,
        diagnostic_resource_request: Optional[_models.DiagnosticResource] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.DiagnosticResource]:
        """Diagnostics tells you precisely the root cause of the issue and how to address it. You can get
        diagnostics once you discover and identify the relevant solution for your Azure
        issue.:code:`<br/>`:code:`<br/>` You can create diagnostics using the ‘solutionId’  from
        Solution Discovery API response and ‘additionalParameters’ :code:`<br/>`:code:`<br/>`
        :code:`<b>Note: </b>`‘requiredParameterSets’ from Solutions Discovery API response must be
        passed via ‘additionalParameters’ as an input to Diagnostics API.

        :param scope: This is an extension resource provider and only resource level extension is
         supported at the moment. Required.
        :type scope: str
        :param diagnostics_resource_name: Unique resource name for insight resources. Required.
        :type diagnostics_resource_name: str
        :param diagnostic_resource_request: The required request body for this insightResource
         invocation. Default value is None.
        :type diagnostic_resource_request: ~azure.mgmt.selfhelp.models.DiagnosticResource
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncARMPolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either DiagnosticResource or the result of
         cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.mgmt.selfhelp.models.DiagnosticResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def begin_create(
        self,
        scope: str,
        diagnostics_resource_name: str,
        diagnostic_resource_request: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncLROPoller[_models.DiagnosticResource]:
        """Diagnostics tells you precisely the root cause of the issue and how to address it. You can get
        diagnostics once you discover and identify the relevant solution for your Azure
        issue.:code:`<br/>`:code:`<br/>` You can create diagnostics using the ‘solutionId’  from
        Solution Discovery API response and ‘additionalParameters’ :code:`<br/>`:code:`<br/>`
        :code:`<b>Note: </b>`‘requiredParameterSets’ from Solutions Discovery API response must be
        passed via ‘additionalParameters’ as an input to Diagnostics API.

        :param scope: This is an extension resource provider and only resource level extension is
         supported at the moment. Required.
        :type scope: str
        :param diagnostics_resource_name: Unique resource name for insight resources. Required.
        :type diagnostics_resource_name: str
        :param diagnostic_resource_request: The required request body for this insightResource
         invocation. Default value is None.
        :type diagnostic_resource_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncARMPolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either DiagnosticResource or the result of
         cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.mgmt.selfhelp.models.DiagnosticResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def begin_create(
        self,
        scope: str,
        diagnostics_resource_name: str,
        diagnostic_resource_request: Optional[Union[_models.DiagnosticResource, IO]] = None,
        **kwargs: Any
    ) -> AsyncLROPoller[_models.DiagnosticResource]:
        """Diagnostics tells you precisely the root cause of the issue and how to address it. You can get
        diagnostics once you discover and identify the relevant solution for your Azure
        issue.:code:`<br/>`:code:`<br/>` You can create diagnostics using the ‘solutionId’  from
        Solution Discovery API response and ‘additionalParameters’ :code:`<br/>`:code:`<br/>`
        :code:`<b>Note: </b>`‘requiredParameterSets’ from Solutions Discovery API response must be
        passed via ‘additionalParameters’ as an input to Diagnostics API.

        :param scope: This is an extension resource provider and only resource level extension is
         supported at the moment. Required.
        :type scope: str
        :param diagnostics_resource_name: Unique resource name for insight resources. Required.
        :type diagnostics_resource_name: str
        :param diagnostic_resource_request: The required request body for this insightResource
         invocation. Is either a DiagnosticResource type or a IO type. Default value is None.
        :type diagnostic_resource_request: ~azure.mgmt.selfhelp.models.DiagnosticResource or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncARMPolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either DiagnosticResource or the result of
         cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.mgmt.selfhelp.models.DiagnosticResource]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DiagnosticResource] = kwargs.pop("cls", None)
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = await self._create_initial(
                scope=scope,
                diagnostics_resource_name=diagnostics_resource_name,
                diagnostic_resource_request=diagnostic_resource_request,
                api_version=api_version,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize("DiagnosticResource", pipeline_response)
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method: AsyncPollingMethod = cast(
                AsyncPollingMethod,
                AsyncARMPolling(lro_delay, lro_options={"final-state-via": "azure-async-operation"}, **kwargs),
            )
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    begin_create.metadata = {"url": "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}"}

    @distributed_trace_async
    async def get(self, scope: str, diagnostics_resource_name: str, **kwargs: Any) -> _models.DiagnosticResource:
        """Get the diagnostics using the 'diagnosticsResourceName' you chose while creating the
        diagnostic.

        :param scope: This is an extension resource provider and only resource level extension is
         supported at the moment. Required.
        :type scope: str
        :param diagnostics_resource_name: Unique resource name for insight resources. Required.
        :type diagnostics_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticResource or the result of cls(response)
        :rtype: ~azure.mgmt.selfhelp.models.DiagnosticResource
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))
        cls: ClsType[_models.DiagnosticResource] = kwargs.pop("cls", None)

        request = build_get_request(
            scope=scope,
            diagnostics_resource_name=diagnostics_resource_name,
            api_version=api_version,
            template_url=self.get.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("DiagnosticResource", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {"url": "/{scope}/providers/Microsoft.Help/diagnostics/{diagnosticsResourceName}"}
