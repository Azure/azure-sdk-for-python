# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core.configuration import Configuration
from azure.core.pipeline import policies
from azure.mgmt.core.policies import ARMHttpLoggingPolicy, AsyncARMChallengeAuthenticationPolicy

from .._version import VERSION

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential


class SelfHelpMgmtClientConfiguration(Configuration):  # pylint: disable=too-many-instance-attributes
    """Configuration for SelfHelpMgmtClient.

    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param scope: This is an extension resource provider and only resource level extension is
     supported at the moment. Required.
    :type scope: str
    :param diagnostics_resource_name: Unique resource name for insight resources. Required.
    :type diagnostics_resource_name: str
    :param filter: Can be used to filter solutionIds by 'ProblemClassificationId'. The filter
     supports only 'and' and 'eq' operators. Example: $filter=ProblemClassificationId eq
     '1ddda5b4-cf6c-4d4f-91ad-bc38ab0e811e' and ProblemClassificationId eq
     '0a9673c2-7af6-4e19-90d3-4ee2461076d9'. Default value is None.
    :type filter: str
    :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If
     a previous response contains a nextLink element, the value of the nextLink element will include
     a skiptoken parameter that specifies a starting point to use for subsequent calls. Default
     value is None.
    :type skiptoken: str
    :keyword api_version: Api Version. Default value is "2023-01-01-preview". Note that overriding
     this default value may result in unsupported behavior.
    :paramtype api_version: str
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        scope: str,
        diagnostics_resource_name: str,
        filter: Optional[str] = None,
        skiptoken: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        super(SelfHelpMgmtClientConfiguration, self).__init__(**kwargs)
        api_version: str = kwargs.pop("api_version", "2023-01-01-preview")

        if credential is None:
            raise ValueError("Parameter 'credential' must not be None.")
        if scope is None:
            raise ValueError("Parameter 'scope' must not be None.")
        if diagnostics_resource_name is None:
            raise ValueError("Parameter 'diagnostics_resource_name' must not be None.")

        self.credential = credential
        self.scope = scope
        self.diagnostics_resource_name = diagnostics_resource_name
        self.filter = filter
        self.skiptoken = skiptoken
        self.api_version = api_version
        self.credential_scopes = kwargs.pop("credential_scopes", ["https://management.azure.com/.default"])
        kwargs.setdefault("sdk_moniker", "mgmt-selfhelp/{}".format(VERSION))
        self._configure(**kwargs)

    def _configure(self, **kwargs: Any) -> None:
        self.user_agent_policy = kwargs.get("user_agent_policy") or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get("headers_policy") or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get("proxy_policy") or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get("logging_policy") or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.http_logging_policy = kwargs.get("http_logging_policy") or ARMHttpLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get("retry_policy") or policies.AsyncRetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get("custom_hook_policy") or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get("redirect_policy") or policies.AsyncRedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get("authentication_policy")
        if self.credential and not self.authentication_policy:
            self.authentication_policy = AsyncARMChallengeAuthenticationPolicy(
                self.credential, *self.credential_scopes, **kwargs
            )
