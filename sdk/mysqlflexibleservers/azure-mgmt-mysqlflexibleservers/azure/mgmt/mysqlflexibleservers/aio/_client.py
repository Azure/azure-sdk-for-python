# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, Optional, TYPE_CHECKING, cast
from typing_extensions import Self

from azure.core.pipeline import policies
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.settings import settings
from azure.mgmt.core import AsyncARMPipelineClient
from azure.mgmt.core.policies import AsyncARMAutoResourceProviderRegistrationPolicy
from azure.mgmt.core.tools import get_arm_endpoints

from .._utils.serialization import Deserializer, Serializer
from ._configuration import DBforMySQLClientConfiguration
from .operations import (
    AdvancedThreatProtectionSettingsOperations,
    AzureADAdministratorsOperations,
    BackupAndExportOperations,
    BackupsOperations,
    CheckNameAvailabilityOperations,
    CheckNameAvailabilityWithoutLocationOperations,
    CheckVirtualNetworkSubnetUsageOperations,
    ConfigurationsOperations,
    DatabasesOperations,
    FirewallRulesOperations,
    GetPrivateDnsZoneSuffixOperations,
    LocationBasedCapabilitiesOperations,
    LocationBasedCapabilitySetOperations,
    LogFilesOperations,
    LongRunningBackupOperations,
    LongRunningBackupsOperations,
    MaintenancesOperations,
    OperationProgressOperations,
    OperationResultsOperations,
    Operations,
    PrivateEndpointConnectionsOperations,
    PrivateLinkResourcesOperations,
    ReplicasOperations,
    ServersMigrationOperations,
    ServersOperations,
)

if TYPE_CHECKING:
    from azure.core import AzureClouds
    from azure.core.credentials_async import AsyncTokenCredential


class DBforMySQLClient:  # pylint: disable=too-many-instance-attributes
    """The Microsoft Azure management API provides create, read, update, and delete functionality for
    Azure MySQL resources including servers, databases, firewall rules, VNET rules, log files and
    configurations with new business model.

    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.mysqlflexibleservers.aio.operations.Operations
    :ivar azure_ad_administrators: AzureADAdministratorsOperations operations
    :vartype azure_ad_administrators:
     azure.mgmt.mysqlflexibleservers.aio.operations.AzureADAdministratorsOperations
    :ivar servers: ServersOperations operations
    :vartype servers: azure.mgmt.mysqlflexibleservers.aio.operations.ServersOperations
    :ivar backup_and_export: BackupAndExportOperations operations
    :vartype backup_and_export:
     azure.mgmt.mysqlflexibleservers.aio.operations.BackupAndExportOperations
    :ivar log_files: LogFilesOperations operations
    :vartype log_files: azure.mgmt.mysqlflexibleservers.aio.operations.LogFilesOperations
    :ivar servers_migration: ServersMigrationOperations operations
    :vartype servers_migration:
     azure.mgmt.mysqlflexibleservers.aio.operations.ServersMigrationOperations
    :ivar backups: BackupsOperations operations
    :vartype backups: azure.mgmt.mysqlflexibleservers.aio.operations.BackupsOperations
    :ivar long_running_backups: LongRunningBackupsOperations operations
    :vartype long_running_backups:
     azure.mgmt.mysqlflexibleservers.aio.operations.LongRunningBackupsOperations
    :ivar long_running_backup: LongRunningBackupOperations operations
    :vartype long_running_backup:
     azure.mgmt.mysqlflexibleservers.aio.operations.LongRunningBackupOperations
    :ivar configurations: ConfigurationsOperations operations
    :vartype configurations:
     azure.mgmt.mysqlflexibleservers.aio.operations.ConfigurationsOperations
    :ivar databases: DatabasesOperations operations
    :vartype databases: azure.mgmt.mysqlflexibleservers.aio.operations.DatabasesOperations
    :ivar firewall_rules: FirewallRulesOperations operations
    :vartype firewall_rules: azure.mgmt.mysqlflexibleservers.aio.operations.FirewallRulesOperations
    :ivar advanced_threat_protection_settings: AdvancedThreatProtectionSettingsOperations
     operations
    :vartype advanced_threat_protection_settings:
     azure.mgmt.mysqlflexibleservers.aio.operations.AdvancedThreatProtectionSettingsOperations
    :ivar location_based_capability_set: LocationBasedCapabilitySetOperations operations
    :vartype location_based_capability_set:
     azure.mgmt.mysqlflexibleservers.aio.operations.LocationBasedCapabilitySetOperations
    :ivar maintenances: MaintenancesOperations operations
    :vartype maintenances: azure.mgmt.mysqlflexibleservers.aio.operations.MaintenancesOperations
    :ivar private_endpoint_connections: PrivateEndpointConnectionsOperations operations
    :vartype private_endpoint_connections:
     azure.mgmt.mysqlflexibleservers.aio.operations.PrivateEndpointConnectionsOperations
    :ivar private_link_resources: PrivateLinkResourcesOperations operations
    :vartype private_link_resources:
     azure.mgmt.mysqlflexibleservers.aio.operations.PrivateLinkResourcesOperations
    :ivar location_based_capabilities: LocationBasedCapabilitiesOperations operations
    :vartype location_based_capabilities:
     azure.mgmt.mysqlflexibleservers.aio.operations.LocationBasedCapabilitiesOperations
    :ivar check_virtual_network_subnet_usage: CheckVirtualNetworkSubnetUsageOperations operations
    :vartype check_virtual_network_subnet_usage:
     azure.mgmt.mysqlflexibleservers.aio.operations.CheckVirtualNetworkSubnetUsageOperations
    :ivar check_name_availability: CheckNameAvailabilityOperations operations
    :vartype check_name_availability:
     azure.mgmt.mysqlflexibleservers.aio.operations.CheckNameAvailabilityOperations
    :ivar check_name_availability_without_location: CheckNameAvailabilityWithoutLocationOperations
     operations
    :vartype check_name_availability_without_location:
     azure.mgmt.mysqlflexibleservers.aio.operations.CheckNameAvailabilityWithoutLocationOperations
    :ivar operation_results: OperationResultsOperations operations
    :vartype operation_results:
     azure.mgmt.mysqlflexibleservers.aio.operations.OperationResultsOperations
    :ivar operation_progress: OperationProgressOperations operations
    :vartype operation_progress:
     azure.mgmt.mysqlflexibleservers.aio.operations.OperationProgressOperations
    :ivar get_private_dns_zone_suffix: GetPrivateDnsZoneSuffixOperations operations
    :vartype get_private_dns_zone_suffix:
     azure.mgmt.mysqlflexibleservers.aio.operations.GetPrivateDnsZoneSuffixOperations
    :ivar replicas: ReplicasOperations operations
    :vartype replicas: azure.mgmt.mysqlflexibleservers.aio.operations.ReplicasOperations
    :param credential: Credential used to authenticate requests to the service. Required.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: The ID of the target subscription. The value must be an UUID. Required.
    :type subscription_id: str
    :param base_url: Service host. Default value is None.
    :type base_url: str
    :keyword cloud_setting: The cloud setting for which to get the ARM endpoint. Default value is
     None.
    :paramtype cloud_setting: ~azure.core.AzureClouds
    :keyword api_version: The API version to use for this operation. Default value is "2024-12-30".
     Note that overriding this default value may result in unsupported behavior.
    :paramtype api_version: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        *,
        cloud_setting: Optional["AzureClouds"] = None,
        **kwargs: Any
    ) -> None:
        _endpoint = "{endpoint}"
        _cloud = cloud_setting or settings.current.azure_cloud  # type: ignore
        _endpoints = get_arm_endpoints(_cloud)
        if not base_url:
            base_url = _endpoints["resource_manager"]
        credential_scopes = kwargs.pop("credential_scopes", _endpoints["credential_scopes"])
        self._config = DBforMySQLClientConfiguration(
            credential=credential,
            subscription_id=subscription_id,
            base_url=cast(str, base_url),
            cloud_setting=cloud_setting,
            credential_scopes=credential_scopes,
            **kwargs
        )

        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                AsyncARMAutoResourceProviderRegistrationPolicy(),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: AsyncARMPipelineClient = AsyncARMPipelineClient(
            base_url=cast(str, _endpoint), policies=_policies, **kwargs
        )

        self._serialize = Serializer()
        self._deserialize = Deserializer()
        self._serialize.client_side_validation = False
        self.operations = Operations(self._client, self._config, self._serialize, self._deserialize)
        self.azure_ad_administrators = AzureADAdministratorsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.servers = ServersOperations(self._client, self._config, self._serialize, self._deserialize)
        self.backup_and_export = BackupAndExportOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.log_files = LogFilesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.servers_migration = ServersMigrationOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.backups = BackupsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.long_running_backups = LongRunningBackupsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.long_running_backup = LongRunningBackupOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.configurations = ConfigurationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.databases = DatabasesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.firewall_rules = FirewallRulesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.advanced_threat_protection_settings = AdvancedThreatProtectionSettingsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.location_based_capability_set = LocationBasedCapabilitySetOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.maintenances = MaintenancesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.private_endpoint_connections = PrivateEndpointConnectionsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.private_link_resources = PrivateLinkResourcesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.location_based_capabilities = LocationBasedCapabilitiesOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.check_virtual_network_subnet_usage = CheckVirtualNetworkSubnetUsageOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.check_name_availability = CheckNameAvailabilityOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.check_name_availability_without_location = CheckNameAvailabilityWithoutLocationOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.operation_results = OperationResultsOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.operation_progress = OperationProgressOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.get_private_dns_zone_suffix = GetPrivateDnsZoneSuffixOperations(
            self._client, self._config, self._serialize, self._deserialize
        )
        self.replicas = ReplicasOperations(self._client, self._config, self._serialize, self._deserialize)

    def send_request(
        self, request: HttpRequest, *, stream: bool = False, **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client.send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.base_url", self._config.base_url, "str", skip_quote=True),
        }

        request_copy.url = self._client.format_url(request_copy.url, **path_format_arguments)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> Self:
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details: Any) -> None:
        await self._client.__aexit__(*exc_details)
