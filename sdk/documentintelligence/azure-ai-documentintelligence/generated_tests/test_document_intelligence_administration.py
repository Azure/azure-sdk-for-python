# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import DocumentIntelligenceAdministrationClientTestBase, DocumentIntelligenceAdministrationPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDocumentIntelligenceAdministration(DocumentIntelligenceAdministrationClientTestBase):
    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_begin_build_document_model(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.begin_build_document_model(
            build_request={
                "buildMode": "str",
                "modelId": "str",
                "allowOverwrite": bool,
                "azureBlobFileListSource": {"containerUrl": "str", "fileList": "str"},
                "azureBlobSource": {"containerUrl": "str", "prefix": "str"},
                "description": "str",
                "maxTrainingHours": 0.0,
                "tags": {"str": "str"},
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_begin_compose_model(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.begin_compose_model(
            compose_request={
                "classifierId": "str",
                "docTypes": {
                    "str": {
                        "buildMode": "str",
                        "confidenceThreshold": 0.0,
                        "description": "str",
                        "features": ["str"],
                        "fieldConfidence": {"str": 0.0},
                        "fieldSchema": {
                            "str": {
                                "type": "str",
                                "description": "str",
                                "example": "str",
                                "items": ...,
                                "properties": {"str": ...},
                            }
                        },
                        "maxDocumentsToAnalyze": 0,
                        "modelId": "str",
                        "queryFields": ["str"],
                    }
                },
                "modelId": "str",
                "description": "str",
                "split": "str",
                "tags": {"str": "str"},
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_authorize_model_copy(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.authorize_model_copy(
            authorize_copy_request={"modelId": "str", "description": "str", "tags": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_begin_copy_model_to(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.begin_copy_model_to(
            model_id="str",
            copy_to_request={
                "accessToken": "str",
                "expirationDateTime": "2020-02-20 00:00:00",
                "targetModelId": "str",
                "targetModelLocation": "str",
                "targetResourceId": "str",
                "targetResourceRegion": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_get_model(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.get_model(
            model_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_list_models(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.list_models()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_delete_model(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.delete_model(
            model_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_get_resource_info(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.get_resource_info()

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_get_operation(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.get_operation(
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_list_operations(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.list_operations()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_begin_build_classifier(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.begin_build_classifier(
            build_request={
                "classifierId": "str",
                "docTypes": {
                    "str": {
                        "azureBlobFileListSource": {"containerUrl": "str", "fileList": "str"},
                        "azureBlobSource": {"containerUrl": "str", "prefix": "str"},
                        "sourceKind": "str",
                    }
                },
                "allowOverwrite": bool,
                "baseClassifierId": "str",
                "description": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_authorize_classifier_copy(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.authorize_classifier_copy(
            authorize_copy_request={"classifierId": "str", "description": "str", "tags": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_begin_copy_classifier_to(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.begin_copy_classifier_to(
            classifier_id="str",
            copy_to_request={
                "accessToken": "str",
                "expirationDateTime": "2020-02-20 00:00:00",
                "targetClassifierId": "str",
                "targetClassifierLocation": "str",
                "targetResourceId": "str",
                "targetResourceRegion": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_get_classifier(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.get_classifier(
            classifier_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_list_classifiers(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.list_classifiers()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @DocumentIntelligenceAdministrationPreparer()
    @recorded_by_proxy
    def test_delete_classifier(self, documentintelligenceadministration_endpoint):
        client = self.create_client(endpoint=documentintelligenceadministration_endpoint)
        response = client.delete_classifier(
            classifier_id="str",
        )

        # please add some check logic here by yourself
        # ...
