# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import MicrosoftPlanetaryComputerProClientTestBase, MicrosoftPlanetaryComputerProPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMicrosoftPlanetaryComputerProStacCollectionOperationsOperations(MicrosoftPlanetaryComputerProClientTestBase):
    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_stac_collection_operations_get_all(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.stac_collection_operations.get_all()

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_stac_collection_operations_begin_create(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.stac_collection_operations.begin_create(
            body={
                "description": "str",
                "extent": {"spatial": {"bbox": [[0.0]]}, "temporal": {"interval": [["str"]]}},
                "id": "str",
                "license": "str",
                "links": [
                    {
                        "href": "str",
                        "body": {"str": "str"},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "assets": {
                    "str": {
                        "href": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "roles": ["str"],
                        "title": "str",
                        "type": "str",
                        "updated": "2020-02-20 00:00:00",
                    }
                },
                "keywords": ["str"],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                "stac_extensions": ["str"],
                "stac_version": "str",
                "summaries": {"str": "str"},
                "title": "str",
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_stac_collection_operations_get(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.stac_collection_operations.get(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_stac_collection_operations_begin_create_or_replace(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.stac_collection_operations.begin_create_or_replace(
            collection_id="str",
            body={
                "description": "str",
                "extent": {"spatial": {"bbox": [[0.0]]}, "temporal": {"interval": [["str"]]}},
                "id": "str",
                "license": "str",
                "links": [
                    {
                        "href": "str",
                        "body": {"str": "str"},
                        "headers": {"str": "str"},
                        "hreflang": "str",
                        "length": 0,
                        "merge": bool,
                        "method": "GET",
                        "rel": "str",
                        "title": "str",
                        "type": "str",
                    }
                ],
                "assets": {
                    "str": {
                        "href": "str",
                        "constellation": "str",
                        "created": "2020-02-20 00:00:00",
                        "description": "str",
                        "gsd": 0.0,
                        "instruments": ["str"],
                        "mission": "str",
                        "platform": "str",
                        "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                        "roles": ["str"],
                        "title": "str",
                        "type": "str",
                        "updated": "2020-02-20 00:00:00",
                    }
                },
                "keywords": ["str"],
                "msft:_created": "str",
                "msft:_updated": "str",
                "msft:short_description": "str",
                "providers": [{"name": "str", "description": "str", "roles": ["str"], "url": "str"}],
                "stac_extensions": ["str"],
                "stac_version": "str",
                "summaries": {"str": "str"},
                "title": "str",
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_stac_collection_operations_begin_delete(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.stac_collection_operations.begin_delete(
            collection_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
