# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import MicrosoftPlanetaryComputerProPreparer
from testpreparer_async import MicrosoftPlanetaryComputerProClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMicrosoftPlanetaryComputerProStacCollectionMosaicsOperationsAsync(
    MicrosoftPlanetaryComputerProClientTestBaseAsync
):
    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy_async
    async def test_stac_collection_mosaics_get_all(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_async_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = await client.stac_collection_mosaics.get_all(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy_async
    async def test_stac_collection_mosaics_add(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_async_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = await client.stac_collection_mosaics.add(
            collection_id="str",
            body={
                "cql": [
                    {
                        "filter": {"args": [{"property": "str"}], "op": "str"},
                        "filter-lang": "str",
                        "sortby": [{"direction": "str", "field": "str"}],
                    }
                ],
                "id": "str",
                "name": "str",
                "description": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy_async
    async def test_stac_collection_mosaics_get(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_async_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = await client.stac_collection_mosaics.get(
            collection_id="str",
            mosaic_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy_async
    async def test_stac_collection_mosaics_create_or_replace(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_async_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = await client.stac_collection_mosaics.create_or_replace(
            collection_id="str",
            mosaic_id="str",
            body={
                "cql": [
                    {
                        "filter": {"args": [{"property": "str"}], "op": "str"},
                        "filter-lang": "str",
                        "sortby": [{"direction": "str", "field": "str"}],
                    }
                ],
                "id": "str",
                "name": "str",
                "description": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy_async
    async def test_stac_collection_mosaics_delete(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_async_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = await client.stac_collection_mosaics.delete(
            collection_id="str",
            mosaic_id="str",
        )

        # please add some check logic here by yourself
        # ...
