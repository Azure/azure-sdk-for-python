# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import PlanetaryComputerClientTestBase, PlanetaryComputerPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPlanetaryComputerStacCollectionRenderOptionsOperations(PlanetaryComputerClientTestBase):
    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_collection_render_options_get_all(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac_collection_render_options.get_all(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_collection_render_options_create(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac_collection_render_options.create(
            collection_id="str",
            body={
                "id": "str",
                "name": "str",
                "conditions": [{"property": "str", "value": "str"}],
                "description": "str",
                "legend": {"labels": ["str"], "scaleFactor": 0.0, "trimEnd": 0, "trimStart": 0, "type": "str"},
                "minZoom": 0,
                "options": "str",
                "type": "str",
                "vectorOptions": {
                    "sourceLayer": "str",
                    "tilejsonKey": "str",
                    "fillColor": "str",
                    "filter": ["str"],
                    "strokeColor": "str",
                    "strokeWidth": 0,
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_collection_render_options_get(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac_collection_render_options.get(
            collection_id="str",
            render_option_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_collection_render_options_create_or_replace(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac_collection_render_options.create_or_replace(
            collection_id="str",
            render_option_id="str",
            body={
                "id": "str",
                "name": "str",
                "conditions": [{"property": "str", "value": "str"}],
                "description": "str",
                "legend": {"labels": ["str"], "scaleFactor": 0.0, "trimEnd": 0, "trimStart": 0, "type": "str"},
                "minZoom": 0,
                "options": "str",
                "type": "str",
                "vectorOptions": {
                    "sourceLayer": "str",
                    "tilejsonKey": "str",
                    "fillColor": "str",
                    "filter": ["str"],
                    "strokeColor": "str",
                    "strokeWidth": 0,
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy
    def test_stac_collection_render_options_delete(self, planetarycomputer_endpoint):
        client = self.create_client(endpoint=planetarycomputer_endpoint)
        response = client.stac_collection_render_options.delete(
            collection_id="str",
            render_option_id="str",
        )

        # please add some check logic here by yourself
        # ...
