# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import PlanetaryComputerPreparer
from testpreparer_async import PlanetaryComputerClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestPlanetaryComputerIngestionSourcesOperationsAsync(PlanetaryComputerClientTestBaseAsync):
    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestion_sources_list_all(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestion_sources.list_all()

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestion_sources_get(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestion_sources.get(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestion_sources_create(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestion_sources.create(
            ingestion_source={
                "connectionInfo": {"containerUrl": "str", "objectId": "str"},
                "id": "str",
                "kind": "BlobManagedIdentity",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestion_sources_create_or_replace(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestion_sources.create_or_replace(
            id="str",
            ingestion_source={
                "connectionInfo": {"containerUrl": "str", "objectId": "str"},
                "id": "str",
                "kind": "BlobManagedIdentity",
            },
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestion_sources_delete(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestion_sources.delete(
            id="str",
        )

        # please add some check logic here by yourself
        # ...

    @PlanetaryComputerPreparer()
    @recorded_by_proxy_async
    async def test_ingestion_sources_list_managed_identities(self, planetarycomputer_endpoint):
        client = self.create_async_client(endpoint=planetarycomputer_endpoint)
        response = await client.ingestion_sources.list_managed_identities()

        # please add some check logic here by yourself
        # ...
