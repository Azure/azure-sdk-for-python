# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import MicrosoftPlanetaryComputerProClientTestBase, MicrosoftPlanetaryComputerProPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestMicrosoftPlanetaryComputerProIngestionsOperations(MicrosoftPlanetaryComputerProClientTestBase):
    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_ingestions_list_all(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.ingestions.list_all(
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_ingestions_get(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.ingestions.get(
            collection_id="str",
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_ingestions_create(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.ingestions.create(
            collection_id="str",
            definition={
                "importType": "str",
                "displayName": "str",
                "keepOriginalAssets": bool,
                "skipExistingItems": bool,
                "sourceCatalogUrl": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_ingestions_update(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.ingestions.update(
            collection_id="str",
            ingestion_id="str",
            definition={
                "displayName": "str",
                "keepOriginalAssets": bool,
                "skipExistingItems": bool,
                "sourceCatalogUrl": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_ingestions_begin_delete(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.ingestions.begin_delete(
            collection_id="str",
            ingestion_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_ingestions_ingestion_runs_list_all(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.ingestions.ingestion_runs.list_all(
            collection_id="str",
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_ingestions_ingestion_runs_get(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.ingestions.ingestion_runs.get(
            collection_id="str",
            ingestion_id="str",
            run_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @MicrosoftPlanetaryComputerProPreparer()
    @recorded_by_proxy
    def test_ingestions_ingestion_runs_create(self, microsoftplanetarycomputerpro_endpoint):
        client = self.create_client(endpoint=microsoftplanetarycomputerpro_endpoint)
        response = client.ingestions.ingestion_runs.create(
            collection_id="str",
            ingestion_id="str",
        )

        # please add some check logic here by yourself
        # ...
