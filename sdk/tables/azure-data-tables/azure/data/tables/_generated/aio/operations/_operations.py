# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ...operations._operations import (
    build_service_get_properties_request,
    build_service_get_statistics_request,
    build_service_set_properties_request,
    build_table_create_request,
    build_table_delete_entity_request,
    build_table_delete_request,
    build_table_get_access_policy_request,
    build_table_insert_entity_request,
    build_table_merge_entity_request,
    build_table_query_entities_request,
    build_table_query_entity_with_partition_and_row_key_request,
    build_table_query_request,
    build_table_set_access_policy_request,
    build_table_update_entity_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class TableOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.table.aio.AzureTable`'s
        :attr:`table` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def query(
        self,
        query_options: Optional[_models.QueryOptions] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        request_id_parameter: Optional[str] = None,
        next_table_name: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TableQueryResponse:
        """Queries tables under the given account.

        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword next_table_name: A table query continuation token from a previous call. Default value
         is None.
        :paramtype next_table_name: str
        :return: TableQueryResponse
        :rtype: ~azure.table.models.TableQueryResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.TableQueryResponse]

        _format = None
        _top = None
        _select = None
        _filter = None
        if query_options is not None:
            _filter = query_options.filter
            _format = query_options.format
            _select = query_options.select
            _top = query_options.top

        request = build_table_query_request(
            data_service_version=data_service_version,
            version=self._config.version,
            request_id_parameter=request_id_parameter,
            format=_format,
            top=_top,
            select=_select,
            filter=_filter,
            next_table_name=next_table_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
        response_headers["x-ms-continuation-NextTableName"] = self._deserialize(
            "str", response.headers.get("x-ms-continuation-NextTableName")
        )

        deserialized = self._deserialize("TableQueryResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def create(
        self,
        table_properties: _models.TableProperties,
        query_options: Optional[_models.QueryOptions] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        request_id_parameter: Optional[str] = None,
        response_preference: Optional[Union[str, _models.ResponseFormat]] = None,
        **kwargs: Any
    ) -> Optional[_models.TableResponse]:
        """Creates a new table under the given account.

        :param table_properties: The Table properties. Required.
        :type table_properties: ~azure.table.models.TableProperties
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword response_preference: Specifies whether the response should include the inserted entity
         in the payload. Possible values are return-no-content and return-content. Known values are:
         "return-no-content" and "return-content". Default value is None.
        :paramtype response_preference: str or ~azure.table.models.ResponseFormat
        :return: TableResponse or None
        :rtype: ~azure.table.models.TableResponse or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", "application/json;odata=nometadata")
        )  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[_models.TableResponse]]

        _format = None
        if query_options is not None:
            _format = query_options.format
        _json = self._serialize.body(table_properties, "TableProperties")

        request = build_table_create_request(
            data_service_version=data_service_version,
            version=self._config.version,
            request_id_parameter=request_id_parameter,
            format=_format,
            response_preference=response_preference,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = None
        response_headers = {}
        if response.status_code == 201:
            response_headers["x-ms-client-request-id"] = self._deserialize(
                "str", response.headers.get("x-ms-client-request-id")
            )
            response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
            response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
            response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
            response_headers["Preference-Applied"] = self._deserialize(
                "str", response.headers.get("Preference-Applied")
            )

            deserialized = self._deserialize("TableResponse", pipeline_response)

        if response.status_code == 204:
            response_headers["x-ms-client-request-id"] = self._deserialize(
                "str", response.headers.get("x-ms-client-request-id")
            )
            response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
            response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
            response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
            response_headers["Preference-Applied"] = self._deserialize(
                "str", response.headers.get("Preference-Applied")
            )

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self, table: str, *, request_id_parameter: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Operation permanently deletes the specified table.

        :param table: The name of the table. Required.
        :type table: str
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_table_delete_request(
            table=table,
            version=self._config.version,
            request_id_parameter=request_id_parameter,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace_async
    async def query_entities(
        self,
        table: str,
        query_options: Optional[_models.QueryOptions] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        next_partition_key: Optional[str] = None,
        next_row_key: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TableEntityQueryResponse:
        """Queries entities in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword next_partition_key: An entity query continuation token from a previous call. Default
         value is None.
        :paramtype next_partition_key: str
        :keyword next_row_key: An entity query continuation token from a previous call. Default value
         is None.
        :paramtype next_row_key: str
        :return: TableEntityQueryResponse
        :rtype: ~azure.table.models.TableEntityQueryResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.TableEntityQueryResponse]

        _format = None
        _top = None
        _select = None
        _filter = None
        if query_options is not None:
            _filter = query_options.filter
            _format = query_options.format
            _select = query_options.select
            _top = query_options.top

        request = build_table_query_entities_request(
            table=table,
            data_service_version=data_service_version,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            format=_format,
            top=_top,
            select=_select,
            filter=_filter,
            next_partition_key=next_partition_key,
            next_row_key=next_row_key,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
        response_headers["x-ms-continuation-NextPartitionKey"] = self._deserialize(
            "str", response.headers.get("x-ms-continuation-NextPartitionKey")
        )
        response_headers["x-ms-continuation-NextRowKey"] = self._deserialize(
            "str", response.headers.get("x-ms-continuation-NextRowKey")
        )

        deserialized = self._deserialize("TableEntityQueryResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def query_entity_with_partition_and_row_key(
        self,
        table: str,
        partition_key: str,
        row_key: str,
        query_options: Optional[_models.QueryOptions] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> Dict[str, Any]:
        """Queries a single entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param partition_key: The partition key of the entity. Required.
        :type partition_key: str
        :param row_key: The row key of the entity. Required.
        :type row_key: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :return: dict mapping str to any
        :rtype: dict[str, any]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Any]]

        _format = None
        _select = None
        _filter = None
        if query_options is not None:
            _filter = query_options.filter
            _format = query_options.format
            _select = query_options.select

        request = build_table_query_entity_with_partition_and_row_key_request(
            table=table,
            partition_key=partition_key,
            row_key=row_key,
            data_service_version=data_service_version,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            format=_format,
            select=_select,
            filter=_filter,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
        response_headers["x-ms-continuation-NextPartitionKey"] = self._deserialize(
            "str", response.headers.get("x-ms-continuation-NextPartitionKey")
        )
        response_headers["x-ms-continuation-NextRowKey"] = self._deserialize(
            "str", response.headers.get("x-ms-continuation-NextRowKey")
        )

        deserialized = self._deserialize("{object}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @overload
    async def update_entity(  # pylint: disable=inconsistent-return-statements
        self,
        table: str,
        partition_key: str,
        row_key: str,
        query_options: Optional[_models.QueryOptions] = None,
        table_entity_properties: Optional[Dict[str, Any]] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        if_match: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param partition_key: The partition key of the entity. Required.
        :type partition_key: str
        :param row_key: The row key of the entity. Required.
        :type row_key: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :param table_entity_properties: The properties for the table entity. Default value is None.
        :type table_entity_properties: dict[str, any]
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword if_match: Match condition for an entity to be updated. If specified and a matching
         entity is not found, an error will be raised. To force an unconditional update, set to the
         wildcard character (*). If not specified, an insert will be performed when no existing entity
         is found to update and a replace will be performed if an existing entity is found. Default
         value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_entity(  # pylint: disable=inconsistent-return-statements
        self,
        table: str,
        partition_key: str,
        row_key: str,
        query_options: Optional[_models.QueryOptions] = None,
        table_entity_properties: Optional[IO] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        if_match: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param partition_key: The partition key of the entity. Required.
        :type partition_key: str
        :param row_key: The row key of the entity. Required.
        :type row_key: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :param table_entity_properties: The properties for the table entity. Default value is None.
        :type table_entity_properties: IO
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword if_match: Match condition for an entity to be updated. If specified and a matching
         entity is not found, an error will be raised. To force an unconditional update, set to the
         wildcard character (*). If not specified, an insert will be performed when no existing entity
         is found to update and a replace will be performed if an existing entity is found. Default
         value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update_entity(  # pylint: disable=inconsistent-return-statements
        self,
        table: str,
        partition_key: str,
        row_key: str,
        query_options: Optional[_models.QueryOptions] = None,
        table_entity_properties: Optional[Union[Dict[str, Any], IO]] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Update entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param partition_key: The partition key of the entity. Required.
        :type partition_key: str
        :param row_key: The row key of the entity. Required.
        :type row_key: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :param table_entity_properties: The properties for the table entity. Is either a dict type or a
         IO type. Default value is None.
        :type table_entity_properties: dict[str, any] or IO
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword if_match: Match condition for an entity to be updated. If specified and a matching
         entity is not found, an error will be raised. To force an unconditional update, set to the
         wildcard character (*). If not specified, an insert will be performed when no existing entity
         is found to update and a replace will be performed if an existing entity is found. Default
         value is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _format = None
        if query_options is not None:
            _format = query_options.format
        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(table_entity_properties, (IO, bytes)):
            _content = table_entity_properties
        else:
            if table_entity_properties is not None:
                _json = self._serialize.body(table_entity_properties, "{object}")
            else:
                _json = None

        request = build_table_update_entity_request(
            table=table,
            partition_key=partition_key,
            row_key=row_key,
            data_service_version=data_service_version,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            format=_format,
            if_match=if_match,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @overload
    async def merge_entity(  # pylint: disable=inconsistent-return-statements
        self,
        table: str,
        partition_key: str,
        row_key: str,
        query_options: Optional[_models.QueryOptions] = None,
        table_entity_properties: Optional[Dict[str, Any]] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        if_match: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Merge entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param partition_key: The partition key of the entity. Required.
        :type partition_key: str
        :param row_key: The row key of the entity. Required.
        :type row_key: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :param table_entity_properties: The properties for the table entity. Default value is None.
        :type table_entity_properties: dict[str, any]
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword if_match: Match condition for an entity to be updated. If specified and a matching
         entity is not found, an error will be raised. To force an unconditional update, set to the
         wildcard character (*). If not specified, an insert will be performed when no existing entity
         is found to update and a merge will be performed if an existing entity is found. Default value
         is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def merge_entity(  # pylint: disable=inconsistent-return-statements
        self,
        table: str,
        partition_key: str,
        row_key: str,
        query_options: Optional[_models.QueryOptions] = None,
        table_entity_properties: Optional[IO] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        if_match: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Merge entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param partition_key: The partition key of the entity. Required.
        :type partition_key: str
        :param row_key: The row key of the entity. Required.
        :type row_key: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :param table_entity_properties: The properties for the table entity. Default value is None.
        :type table_entity_properties: IO
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword if_match: Match condition for an entity to be updated. If specified and a matching
         entity is not found, an error will be raised. To force an unconditional update, set to the
         wildcard character (*). If not specified, an insert will be performed when no existing entity
         is found to update and a merge will be performed if an existing entity is found. Default value
         is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def merge_entity(  # pylint: disable=inconsistent-return-statements
        self,
        table: str,
        partition_key: str,
        row_key: str,
        query_options: Optional[_models.QueryOptions] = None,
        table_entity_properties: Optional[Union[Dict[str, Any], IO]] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Merge entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param partition_key: The partition key of the entity. Required.
        :type partition_key: str
        :param row_key: The row key of the entity. Required.
        :type row_key: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :param table_entity_properties: The properties for the table entity. Is either a dict type or a
         IO type. Default value is None.
        :type table_entity_properties: dict[str, any] or IO
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword if_match: Match condition for an entity to be updated. If specified and a matching
         entity is not found, an error will be raised. To force an unconditional update, set to the
         wildcard character (*). If not specified, an insert will be performed when no existing entity
         is found to update and a merge will be performed if an existing entity is found. Default value
         is None.
        :paramtype if_match: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _format = None
        if query_options is not None:
            _format = query_options.format
        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(table_entity_properties, (IO, bytes)):
            _content = table_entity_properties
        else:
            if table_entity_properties is not None:
                _json = self._serialize.body(table_entity_properties, "{object}")
            else:
                _json = None

        request = build_table_merge_entity_request(
            table=table,
            partition_key=partition_key,
            row_key=row_key,
            data_service_version=data_service_version,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            format=_format,
            if_match=if_match,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
        response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace_async
    async def delete_entity(  # pylint: disable=inconsistent-return-statements
        self,
        table: str,
        partition_key: str,
        row_key: str,
        query_options: Optional[_models.QueryOptions] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        if_match: str,
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Deletes the specified entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param partition_key: The partition key of the entity. Required.
        :type partition_key: str
        :param row_key: The row key of the entity. Required.
        :type row_key: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword if_match: Match condition for an entity to be deleted. If specified and a matching
         entity is not found, an error will be raised. To force an unconditional delete, set to the
         wildcard character (*). Required.
        :paramtype if_match: str
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _format = None
        if query_options is not None:
            _format = query_options.format

        request = build_table_delete_entity_request(
            table=table,
            partition_key=partition_key,
            row_key=row_key,
            data_service_version=data_service_version,
            if_match=if_match,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            format=_format,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace_async
    async def insert_entity(
        self,
        table: str,
        query_options: Optional[_models.QueryOptions] = None,
        table_entity_properties: Optional[Dict[str, Any]] = None,
        *,
        data_service_version: Union[str, _models.Enum1],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        response_preference: Optional[Union[str, _models.ResponseFormat]] = None,
        **kwargs: Any
    ) -> Optional[Dict[str, Any]]:
        """Insert entity in a table.

        :param table: The name of the table. Required.
        :type table: str
        :param query_options: Parameter group. Default value is None.
        :type query_options: ~azure.table.models.QueryOptions
        :param table_entity_properties: The properties for the table entity. Default value is None.
        :type table_entity_properties: dict[str, any]
        :keyword data_service_version: Specifies the data service version. "3.0" Required.
        :paramtype data_service_version: str or ~azure.table.models.Enum1
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :keyword response_preference: Specifies whether the response should include the inserted entity
         in the payload. Possible values are return-no-content and return-content. Known values are:
         "return-no-content" and "return-content". Default value is None.
        :paramtype response_preference: str or ~azure.table.models.ResponseFormat
        :return: dict mapping str to any or None
        :rtype: dict[str, any] or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop(
            "content_type", _headers.pop("Content-Type", "application/json;odata=nometadata")
        )  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[Dict[str, Any]]]

        _format = None
        if query_options is not None:
            _format = query_options.format
        if table_entity_properties is not None:
            _json = self._serialize.body(table_entity_properties, "{object}")
        else:
            _json = None

        request = build_table_insert_entity_request(
            table=table,
            data_service_version=data_service_version,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            format=_format,
            response_preference=response_preference,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = None
        response_headers = {}
        if response.status_code == 201:
            response_headers["x-ms-client-request-id"] = self._deserialize(
                "str", response.headers.get("x-ms-client-request-id")
            )
            response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
            response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
            response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
            response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
            response_headers["Preference-Applied"] = self._deserialize(
                "str", response.headers.get("Preference-Applied")
            )
            response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

            deserialized = self._deserialize("{object}", pipeline_response)

        if response.status_code == 204:
            response_headers["x-ms-client-request-id"] = self._deserialize(
                "str", response.headers.get("x-ms-client-request-id")
            )
            response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
            response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
            response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))
            response_headers["ETag"] = self._deserialize("str", response.headers.get("ETag"))
            response_headers["Preference-Applied"] = self._deserialize(
                "str", response.headers.get("Preference-Applied")
            )
            response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def get_access_policy(
        self,
        table: str,
        *,
        comp: Union[str, _models.Enum4],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> _models.SignedIdentifier:
        """Retrieves details about any stored access policies specified on the table that may be used with
        Shared Access Signatures.

        :param table: The name of the table. Required.
        :type table: str
        :keyword comp: Required query string to handle stored access policies for the table that may be
         used with Shared Access Signatures. "acl" Required.
        :paramtype comp: str or ~azure.table.models.Enum4
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :return: SignedIdentifier
        :rtype: ~azure.table.models.SignedIdentifier
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.SignedIdentifier]

        request = build_table_get_access_policy_request(
            table=table,
            comp=comp,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))

        deserialized = self._deserialize("[SignedIdentifier]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def set_access_policy(  # pylint: disable=inconsistent-return-statements
        self,
        table: str,
        table_acl: Optional[_models.SignedIdentifier] = None,
        *,
        comp: Union[str, _models.Enum4],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Sets stored access policies for the table that may be used with Shared Access Signatures.

        :param table: The name of the table. Required.
        :type table: str
        :param table_acl: The acls for the table. Default value is None.
        :type table_acl: ~azure.table.models.SignedIdentifier
        :keyword comp: Required query string to handle stored access policies for the table that may be
         used with Shared Access Signatures. "acl" Required.
        :paramtype comp: str or ~azure.table.models.Enum4
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/xml"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        serialization_ctxt = {"xml": {"name": "SignedIdentifiers", "wrapped": True, "itemsName": "SignedIdentifier"}}
        if table_acl is not None:
            _content = self._serialize.body(
                table_acl, "[SignedIdentifier]", is_xml=True, serialization_ctxt=serialization_ctxt
            )
        else:
            _content = None

        request = build_table_set_access_policy_request(
            table=table,
            comp=comp,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))

        if cls:
            return cls(pipeline_response, None, response_headers)


class ServiceOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.table.aio.AzureTable`'s
        :attr:`service` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def set_properties(  # pylint: disable=inconsistent-return-statements
        self,
        table_service_properties: _models.TableServiceProperties,
        *,
        restype: Union[str, _models.Enum5],
        comp: Union[str, _models.Enum6],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Sets properties for an account's Table service endpoint, including properties for Analytics and
        CORS (Cross-Origin Resource Sharing) rules.

        :param table_service_properties: The Table Service properties. Required.
        :type table_service_properties: ~azure.table.models.TableServiceProperties
        :keyword restype: Required query string to set the service properties. "service" Required.
        :paramtype restype: str or ~azure.table.models.Enum5
        :keyword comp: Required query string to set the service properties. "properties" Required.
        :paramtype comp: str or ~azure.table.models.Enum6
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/xml"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _content = self._serialize.body(table_service_properties, "TableServiceProperties", is_xml=True)

        request = build_service_set_properties_request(
            restype=restype,
            comp=comp,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace_async
    async def get_properties(
        self,
        *,
        restype: Union[str, _models.Enum5],
        comp: Union[str, _models.Enum6],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TableServiceProperties:
        """Gets the properties of an account's Table service, including properties for Analytics and CORS
        (Cross-Origin Resource Sharing) rules.

        :keyword restype: Required query string to set the service properties. "service" Required.
        :paramtype restype: str or ~azure.table.models.Enum5
        :keyword comp: Required query string to set the service properties. "properties" Required.
        :paramtype comp: str or ~azure.table.models.Enum6
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :return: TableServiceProperties
        :rtype: ~azure.table.models.TableServiceProperties
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.TableServiceProperties]

        request = build_service_get_properties_request(
            restype=restype,
            comp=comp,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))

        deserialized = self._deserialize("TableServiceProperties", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace_async
    async def get_statistics(
        self,
        *,
        restype: Union[str, _models.Enum5],
        comp: Union[str, _models.Enum7],
        timeout: Optional[int] = None,
        request_id_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> _models.TableServiceStats:
        """Retrieves statistics related to replication for the Table service. It is only available on the
        secondary location endpoint when read-access geo-redundant replication is enabled for the
        account.

        :keyword restype: Required query string to get service stats. "service" Required.
        :paramtype restype: str or ~azure.table.models.Enum5
        :keyword comp: Required query string to get service stats. "stats" Required.
        :paramtype comp: str or ~azure.table.models.Enum7
        :keyword timeout: The timeout parameter is expressed in seconds. Default value is None.
        :paramtype timeout: int
        :keyword request_id_parameter: Provides a client-generated, opaque value with a 1 KB character
         limit that is recorded in the analytics logs when analytics logging is enabled. Default value
         is None.
        :paramtype request_id_parameter: str
        :return: TableServiceStats
        :rtype: ~azure.table.models.TableServiceStats
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.TableServiceStats]

        request = build_service_get_statistics_request(
            restype=restype,
            comp=comp,
            version=self._config.version,
            timeout=timeout,
            request_id_parameter=request_id_parameter,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "url": self._serialize.url("self._config.url", self._config.url, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.TableServiceError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-version"] = self._deserialize("str", response.headers.get("x-ms-version"))
        response_headers["Date"] = self._deserialize("rfc-1123", response.headers.get("Date"))

        deserialized = self._deserialize("TableServiceStats", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
