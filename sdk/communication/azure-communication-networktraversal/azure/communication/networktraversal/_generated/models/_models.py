# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class CommunicationError(msrest.serialization.Model):
    """The Communication Services error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The error code.
    :type code: str
    :param message: Required. The error message.
    :type message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Further details about specific errors that led to this error.
    :vartype details: list[~azure.communication.networktraversal.models.CommunicationError]
    :ivar inner_error: The inner error if any.
    :vartype inner_error: ~azure.communication.networktraversal.models.CommunicationError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CommunicationError]'},
        'inner_error': {'key': 'innererror', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationError, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = None
        self.details = None
        self.inner_error = None


class CommunicationErrorResponse(msrest.serialization.Model):
    """The Communication Services error.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The Communication Services error.
    :type error: ~azure.communication.networktraversal.models.CommunicationError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationErrorResponse, self).__init__(**kwargs)
        self.error = kwargs['error']


class CommunicationIceServer(msrest.serialization.Model):
    """An instance of a STUN/TURN server with credentials to be used for ICE negotiation.

    All required parameters must be populated in order to send to Azure.

    :param urls: Required. List of STUN/TURN server URLs.
    :type urls: list[str]
    :param username: Required. User account name which uniquely identifies the credentials.
    :type username: str
    :param credential: Required. Credential for the server.
    :type credential: str
    """

    _validation = {
        'urls': {'required': True},
        'username': {'required': True},
        'credential': {'required': True},
    }

    _attribute_map = {
        'urls': {'key': 'urls', 'type': '[str]'},
        'username': {'key': 'username', 'type': 'str'},
        'credential': {'key': 'credential', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationIceServer, self).__init__(**kwargs)
        self.urls = kwargs['urls']
        self.username = kwargs['username']
        self.credential = kwargs['credential']


class CommunicationRelayConfiguration(msrest.serialization.Model):
    """A relay configuration containing the STUN/TURN URLs and credentials.

    All required parameters must be populated in order to send to Azure.

    :param expires_on: Required. The date for which the username and credentials are not longer
     valid.
    :type expires_on: ~datetime.datetime
    :param ice_servers: Required. An array representing the credentials and the STUN/TURN server
     URLs for use in ICE negotiations.
    :type ice_servers: list[~azure.communication.networktraversal.models.CommunicationIceServer]
    """

    _validation = {
        'expires_on': {'required': True},
        'ice_servers': {'required': True},
    }

    _attribute_map = {
        'expires_on': {'key': 'expiresOn', 'type': 'iso-8601'},
        'ice_servers': {'key': 'iceServers', 'type': '[CommunicationIceServer]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationRelayConfiguration, self).__init__(**kwargs)
        self.expires_on = kwargs['expires_on']
        self.ice_servers = kwargs['ice_servers']


class CommunicationRelayConfigurationRequest(msrest.serialization.Model):
    """Request for a CommunicationRelayConfiguration.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. An existing ACS identity.
    :type id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationRelayConfigurationRequest, self).__init__(**kwargs)
        self.id = kwargs['id']
