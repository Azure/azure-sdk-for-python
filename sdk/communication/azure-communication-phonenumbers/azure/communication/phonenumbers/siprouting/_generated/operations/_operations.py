# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
from io import IOBase
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core import PipelineClient
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._configuration import SIPRoutingServiceConfiguration
from .._utils.serialization import Deserializer, Serializer

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_sip_routing_get_request(
    *, expand: Optional[Union[str, _models.ExpandEnum]] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/sip"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if expand is not None:
        _params["expand"] = _SERIALIZER.query("expand", expand, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_sip_routing_update_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/sip"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_sip_routing_test_routes_with_number_request(  # pylint: disable=name-too-long
    *, target_phone_number: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-11-15-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/sip:testRoutesWithNumber"

    # Construct parameters
    _params["targetPhoneNumber"] = _SERIALIZER.query("target_phone_number", target_phone_number, "str")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class SipRoutingOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.communication.phonenumbers.siprouting.SIPRoutingService`'s
        :attr:`sip_routing` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client: PipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: SIPRoutingServiceConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(
        self, *, expand: Optional[Union[str, _models.ExpandEnum]] = None, **kwargs: Any
    ) -> _models.SipConfiguration:
        """Gets SIP configuration for resource.

        Gets SIP configuration for resource.

        :keyword expand: Sip configuration expand. Optional. "trunks/health" Default value is None.
        :paramtype expand: str or ~azure.communication.phonenumbers.siprouting.models.ExpandEnum
        :return: SipConfiguration
        :rtype: ~azure.communication.phonenumbers.siprouting.models.SipConfiguration
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.SipConfiguration] = kwargs.pop("cls", None)

        _request = build_sip_routing_get_request(
            expand=expand,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("SipConfiguration", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def update(
        self,
        body: Optional[_models.SipConfiguration] = None,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> _models.SipConfiguration:
        """Updates SIP configuration for resource.

        Updates SIP configuration for resource.

        :param body: Sip configuration update object. Default value is None.
        :type body: ~azure.communication.phonenumbers.siprouting.models.SipConfiguration
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: SipConfiguration
        :rtype: ~azure.communication.phonenumbers.siprouting.models.SipConfiguration
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update(
        self, body: Optional[IO[bytes]] = None, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.SipConfiguration:
        """Updates SIP configuration for resource.

        Updates SIP configuration for resource.

        :param body: Sip configuration update object. Default value is None.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: SipConfiguration
        :rtype: ~azure.communication.phonenumbers.siprouting.models.SipConfiguration
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update(
        self, body: Optional[Union[_models.SipConfiguration, IO[bytes]]] = None, **kwargs: Any
    ) -> _models.SipConfiguration:
        """Updates SIP configuration for resource.

        Updates SIP configuration for resource.

        :param body: Sip configuration update object. Is either a SipConfiguration type or a IO[bytes]
         type. Default value is None.
        :type body: ~azure.communication.phonenumbers.siprouting.models.SipConfiguration or IO[bytes]
        :return: SipConfiguration
        :rtype: ~azure.communication.phonenumbers.siprouting.models.SipConfiguration
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SipConfiguration] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "SipConfiguration")
            else:
                _json = None

        _request = build_sip_routing_update_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("SipConfiguration", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def test_routes_with_number(
        self,
        sip_configuration: Optional[_models.SipConfiguration] = None,
        *,
        target_phone_number: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RoutesForNumber:
        """Gets the list of routes matching the target phone number, ordered by priority.

        Gets the list of routes matching the target phone number, ordered by priority.

        :param sip_configuration: Sip configuration object to test with targetPhoneNumber. Default
         value is None.
        :type sip_configuration: ~azure.communication.phonenumbers.siprouting.models.SipConfiguration
        :keyword target_phone_number: Phone number to test routing patterns against. Required.
        :paramtype target_phone_number: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RoutesForNumber
        :rtype: ~azure.communication.phonenumbers.siprouting.models.RoutesForNumber
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def test_routes_with_number(
        self,
        sip_configuration: Optional[IO[bytes]] = None,
        *,
        target_phone_number: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RoutesForNumber:
        """Gets the list of routes matching the target phone number, ordered by priority.

        Gets the list of routes matching the target phone number, ordered by priority.

        :param sip_configuration: Sip configuration object to test with targetPhoneNumber. Default
         value is None.
        :type sip_configuration: IO[bytes]
        :keyword target_phone_number: Phone number to test routing patterns against. Required.
        :paramtype target_phone_number: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: RoutesForNumber
        :rtype: ~azure.communication.phonenumbers.siprouting.models.RoutesForNumber
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def test_routes_with_number(
        self,
        sip_configuration: Optional[Union[_models.SipConfiguration, IO[bytes]]] = None,
        *,
        target_phone_number: str,
        **kwargs: Any
    ) -> _models.RoutesForNumber:
        """Gets the list of routes matching the target phone number, ordered by priority.

        Gets the list of routes matching the target phone number, ordered by priority.

        :param sip_configuration: Sip configuration object to test with targetPhoneNumber. Is either a
         SipConfiguration type or a IO[bytes] type. Default value is None.
        :type sip_configuration: ~azure.communication.phonenumbers.siprouting.models.SipConfiguration
         or IO[bytes]
        :keyword target_phone_number: Phone number to test routing patterns against. Required.
        :paramtype target_phone_number: str
        :return: RoutesForNumber
        :rtype: ~azure.communication.phonenumbers.siprouting.models.RoutesForNumber
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.RoutesForNumber] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(sip_configuration, (IOBase, bytes)):
            _content = sip_configuration
        else:
            if sip_configuration is not None:
                _json = self._serialize.body(sip_configuration, "SipConfiguration")
            else:
                _json = None

        _request = build_sip_routing_test_routes_with_number_request(
            target_phone_number=target_phone_number,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("RoutesForNumber", pipeline_response.http_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
