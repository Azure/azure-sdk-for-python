# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class ErrorBody(msrest.serialization.Model):
    """Represents a service error response body.

    :param code: The error code in the error response.
    :type code: str
    :param message: The error message in the error response.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message


class ErrorResponse(msrest.serialization.Model):
    """Represents a service error response.

    :param error: Represents a service error response body.
    :type error: ~azure.communication.siprouting.models.ErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorBody'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorBody"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class SipConfiguration(msrest.serialization.Model):
    """Represents a SIP configuration.

    :param trunks: SIP trunks for routing calls. Map key is trunk's fqdn (1-255 characters).
    :type trunks: dict[str, ~azure.communication.siprouting.models.Trunk]
    :param routes: Trunk routes for routing calls. Route's name is used as the key.
    :type routes: list[~azure.communication.siprouting.models.TrunkRoute]
    """

    _attribute_map = {
        'trunks': {'key': 'trunks', 'type': '{Trunk}'},
        'routes': {'key': 'routes', 'type': '[TrunkRoute]'},
    }

    def __init__(
        self,
        *,
        trunks: Optional[Dict[str, "Trunk"]] = None,
        routes: Optional[List["TrunkRoute"]] = None,
        **kwargs
    ):
        super(SipConfiguration, self).__init__(**kwargs)
        self.trunks = trunks
        self.routes = routes


class Trunk(msrest.serialization.Model):
    """Represents a SIP trunk for routing calls. See RFC 4904.

    All required parameters must be populated in order to send to Azure.

    :param sip_signaling_port: Required. Gets or sets SIP signaling port of the trunk.
    :type sip_signaling_port: int
    """

    _validation = {
        'sip_signaling_port': {'required': True},
    }

    _attribute_map = {
        'sip_signaling_port': {'key': 'sipSignalingPort', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        sip_signaling_port: int,
        **kwargs
    ):
        super(Trunk, self).__init__(**kwargs)
        self.sip_signaling_port = sip_signaling_port


class TrunkRoute(msrest.serialization.Model):
    """Represents a trunk route for routing calls.

    All required parameters must be populated in order to send to Azure.

    :param description: Gets or sets description of the route.
    :type description: str
    :param name: Required. Gets or sets name of the route.
    :type name: str
    :param number_pattern: Required. Gets or sets regex number pattern for routing calls. .NET
     regex format is supported.
     The regex should match only digits with an optional '+' prefix without spaces.
     I.e. "^\+[1-9][0-9]{3,23}$".
    :type number_pattern: str
    :param trunks: Gets or sets list of SIP trunks for routing calls. Trunks are represented as
     fqdn.
    :type trunks: list[str]
    """

    _validation = {
        'description': {'max_length': 1024, 'min_length': 0},
        'name': {'required': True, 'max_length': 256, 'min_length': 0},
        'number_pattern': {'required': True, 'max_length': 1024, 'min_length': 0},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'number_pattern': {'key': 'numberPattern', 'type': 'str'},
        'trunks': {'key': 'trunks', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        name: str,
        number_pattern: str,
        description: Optional[str] = None,
        trunks: Optional[List[str]] = None,
        **kwargs
    ):
        super(TrunkRoute, self).__init__(**kwargs)
        self.description = description
        self.name = name
        self.number_pattern = number_pattern
        self.trunks = trunks
