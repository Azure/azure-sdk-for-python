# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._azure_communication_calling_server_service_enums import *


class AddParticipantRequest(msrest.serialization.Model):
    """The add participant request.

    :param alternate_caller_id: The alternate identity of source participant.
    :type alternate_caller_id: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :param participant: The participant to be added to the call.
    :type participant: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param operation_context: The operation context.
    :type operation_context: str
    :param callback_uri: The callback URI.
    :type callback_uri: str
    """

    _attribute_map = {
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        alternate_caller_id: Optional["PhoneNumberIdentifierModel"] = None,
        participant: Optional["CommunicationIdentifierModel"] = None,
        operation_context: Optional[str] = None,
        callback_uri: Optional[str] = None,
        **kwargs
    ):
        super(AddParticipantRequest, self).__init__(**kwargs)
        self.alternate_caller_id = alternate_caller_id
        self.participant = participant
        self.operation_context = operation_context
        self.callback_uri = callback_uri


class AddParticipantResult(msrest.serialization.Model):
    """The add participant result.

    :param participant_id: The id of the added participant.
    :type participant_id: str
    """

    _attribute_map = {
        'participant_id': {'key': 'participantId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        participant_id: Optional[str] = None,
        **kwargs
    ):
        super(AddParticipantResult, self).__init__(**kwargs)
        self.participant_id = participant_id


class AddParticipantResultEvent(msrest.serialization.Model):
    """AddParticipantResultEvent.

    All required parameters must be populated in order to send to Azure.

    :param result_info: The result details.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    :param operation_context: The operation context.
    :type operation_context: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "OperationStatus"],
        result_info: Optional["ResultInfo"] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        super(AddParticipantResultEvent, self).__init__(**kwargs)
        self.result_info = result_info
        self.operation_context = operation_context
        self.status = status


class CallConnectionStateChangedEvent(msrest.serialization.Model):
    """The call connection state changed event.

    All required parameters must be populated in order to send to Azure.

    :param server_call_id: The server call.id.
    :type server_call_id: str
    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    :param call_connection_state: Required. The call connection state. Possible values include:
     "incoming", "connecting", "connected", "disconnecting", "disconnected".
    :type call_connection_state: str or
     ~azure.communication.callingserver.models.CallConnectionState
    """

    _validation = {
        'call_connection_state': {'required': True},
    }

    _attribute_map = {
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'call_connection_state': {'key': 'callConnectionState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        call_connection_state: Union[str, "CallConnectionState"],
        server_call_id: Optional[str] = None,
        call_connection_id: Optional[str] = None,
        **kwargs
    ):
        super(CallConnectionStateChangedEvent, self).__init__(**kwargs)
        self.server_call_id = server_call_id
        self.call_connection_id = call_connection_id
        self.call_connection_state = call_connection_state


class CallParticipant(msrest.serialization.Model):
    """A participant in a call.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Communication identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param participant_id: Participant id.
    :type participant_id: str
    :param is_muted: Required. Is participant muted.
    :type is_muted: bool
    """

    _validation = {
        'is_muted': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'participant_id': {'key': 'participantId', 'type': 'str'},
        'is_muted': {'key': 'isMuted', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        is_muted: bool,
        identifier: Optional["CommunicationIdentifierModel"] = None,
        participant_id: Optional[str] = None,
        **kwargs
    ):
        super(CallParticipant, self).__init__(**kwargs)
        self.identifier = identifier
        self.participant_id = participant_id
        self.is_muted = is_muted


class CallRecordingProperties(msrest.serialization.Model):
    """The response payload of get call recording properties operation.

    All required parameters must be populated in order to send to Azure.

    :param recording_state: Required. The state of the recording. Possible values include:
     "active", "inactive".
    :type recording_state: str or ~azure.communication.callingserver.models.CallRecordingState
    """

    _validation = {
        'recording_state': {'required': True},
    }

    _attribute_map = {
        'recording_state': {'key': 'recordingState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        recording_state: Union[str, "CallRecordingState"],
        **kwargs
    ):
        super(CallRecordingProperties, self).__init__(**kwargs)
        self.recording_state = recording_state


class CallRecordingStateChangeEvent(msrest.serialization.Model):
    """The call recording state change event.

    All required parameters must be populated in order to send to Azure.

    :param recording_id: The call recording id.
    :type recording_id: str
    :param state: Required. The state of the recording. Possible values include: "active",
     "inactive".
    :type state: str or ~azure.communication.callingserver.models.CallRecordingState
    :param start_date_time: Required. The time of the recording started.
    :type start_date_time: ~datetime.datetime
    :param server_call_id: The server call.id.
    :type server_call_id: str
    """

    _validation = {
        'state': {'required': True},
        'start_date_time': {'required': True},
    }

    _attribute_map = {
        'recording_id': {'key': 'recordingId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Union[str, "CallRecordingState"],
        start_date_time: datetime.datetime,
        recording_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        **kwargs
    ):
        super(CallRecordingStateChangeEvent, self).__init__(**kwargs)
        self.recording_id = recording_id
        self.state = state
        self.start_date_time = start_date_time
        self.server_call_id = server_call_id


class CancelAllMediaOperationsRequest(msrest.serialization.Model):
    """The request payload for cancel all media operations.

    :param operation_context: The context for this operation.
    :type operation_context: str
    """

    _attribute_map = {
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        super(CancelAllMediaOperationsRequest, self).__init__(**kwargs)
        self.operation_context = operation_context


class CancelAllMediaOperationsResult(msrest.serialization.Model):
    """The response payload of the cancel all media operations.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: The operation id.
    :type operation_id: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    :param operation_context: The operation context provided by client.
    :type operation_context: str
    :param result_info: The result info for the operation.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "OperationStatus"],
        operation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_info: Optional["ResultInfo"] = None,
        **kwargs
    ):
        super(CancelAllMediaOperationsResult, self).__init__(**kwargs)
        self.operation_id = operation_id
        self.status = status
        self.operation_context = operation_context
        self.result_info = result_info


class CommunicationError(msrest.serialization.Model):
    """The Communication Services error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The error code.
    :type code: str
    :param message: Required. The error message.
    :type message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Further details about specific errors that led to this error.
    :vartype details: list[~azure.communication.callingserver.models.CommunicationError]
    :ivar inner_error: The inner error if any.
    :vartype inner_error: ~azure.communication.callingserver.models.CommunicationError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CommunicationError]'},
        'inner_error': {'key': 'innererror', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        **kwargs
    ):
        super(CommunicationError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = None
        self.details = None
        self.inner_error = None


class CommunicationErrorResponse(msrest.serialization.Model):
    """The Communication Services error.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The Communication Services error.
    :type error: ~azure.communication.callingserver.models.CommunicationError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        *,
        error: "CommunicationError",
        **kwargs
    ):
        super(CommunicationErrorResponse, self).__init__(**kwargs)
        self.error = error


class CommunicationIdentifierModel(msrest.serialization.Model):
    """Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set.

    :param raw_id: Raw Id of the identifier. Optional in requests, required in responses.
    :type raw_id: str
    :param communication_user: The communication user.
    :type communication_user:
     ~azure.communication.callingserver.models.CommunicationUserIdentifierModel
    :param phone_number: The phone number.
    :type phone_number: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :param microsoft_teams_user: The Microsoft Teams user.
    :type microsoft_teams_user:
     ~azure.communication.callingserver.models.MicrosoftTeamsUserIdentifierModel
    """

    _attribute_map = {
        'raw_id': {'key': 'rawId', 'type': 'str'},
        'communication_user': {'key': 'communicationUser', 'type': 'CommunicationUserIdentifierModel'},
        'phone_number': {'key': 'phoneNumber', 'type': 'PhoneNumberIdentifierModel'},
        'microsoft_teams_user': {'key': 'microsoftTeamsUser', 'type': 'MicrosoftTeamsUserIdentifierModel'},
    }

    def __init__(
        self,
        *,
        raw_id: Optional[str] = None,
        communication_user: Optional["CommunicationUserIdentifierModel"] = None,
        phone_number: Optional["PhoneNumberIdentifierModel"] = None,
        microsoft_teams_user: Optional["MicrosoftTeamsUserIdentifierModel"] = None,
        **kwargs
    ):
        super(CommunicationIdentifierModel, self).__init__(**kwargs)
        self.raw_id = raw_id
        self.communication_user = communication_user
        self.phone_number = phone_number
        self.microsoft_teams_user = microsoft_teams_user


class CommunicationUserIdentifierModel(msrest.serialization.Model):
    """A user that got created with an Azure Communication Services resource.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The Id of the communication user.
    :type id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: str,
        **kwargs
    ):
        super(CommunicationUserIdentifierModel, self).__init__(**kwargs)
        self.id = id


class CreateCallRequest(msrest.serialization.Model):
    """The request payload for create call.

    All required parameters must be populated in order to send to Azure.

    :param alternate_caller_id: The alternate identity of the source of the call if dialing out to
     a pstn number.
    :type alternate_caller_id: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :param targets: Required. The targets of the call.
    :type targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    :param source: Required. The source of the call.
    :type source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param subject: The subject.
    :type subject: str
    :param callback_uri: Required. The callback URI.
    :type callback_uri: str
    :param requested_media_types: The requested modalities.
    :type requested_media_types: list[str or ~azure.communication.callingserver.models.MediaType]
    :param requested_call_events: The requested call events to subscribe to.
    :type requested_call_events: list[str or
     ~azure.communication.callingserver.models.EventSubscriptionType]
    """

    _validation = {
        'targets': {'required': True},
        'source': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        targets: List["CommunicationIdentifierModel"],
        source: "CommunicationIdentifierModel",
        callback_uri: str,
        alternate_caller_id: Optional["PhoneNumberIdentifierModel"] = None,
        subject: Optional[str] = None,
        requested_media_types: Optional[List[Union[str, "MediaType"]]] = None,
        requested_call_events: Optional[List[Union[str, "EventSubscriptionType"]]] = None,
        **kwargs
    ):
        super(CreateCallRequest, self).__init__(**kwargs)
        self.alternate_caller_id = alternate_caller_id
        self.targets = targets
        self.source = source
        self.subject = subject
        self.callback_uri = callback_uri
        self.requested_media_types = requested_media_types
        self.requested_call_events = requested_call_events


class CreateCallResult(msrest.serialization.Model):
    """The response payload of the create call operation.

    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        **kwargs
    ):
        super(CreateCallResult, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id


class JoinCallRequest(msrest.serialization.Model):
    """The request payload for join call.

    All required parameters must be populated in order to send to Azure.

    :param source: Required. The source of the call.
    :type source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param subject: The subject.
    :type subject: str
    :param callback_uri: Required. The callback URI.
    :type callback_uri: str
    :param requested_media_types: The requested modalities.
    :type requested_media_types: list[str or ~azure.communication.callingserver.models.MediaType]
    :param requested_call_events: The requested call events to subscribe to.
    :type requested_call_events: list[str or
     ~azure.communication.callingserver.models.EventSubscriptionType]
    """

    _validation = {
        'source': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        source: "CommunicationIdentifierModel",
        callback_uri: str,
        subject: Optional[str] = None,
        requested_media_types: Optional[List[Union[str, "MediaType"]]] = None,
        requested_call_events: Optional[List[Union[str, "EventSubscriptionType"]]] = None,
        **kwargs
    ):
        super(JoinCallRequest, self).__init__(**kwargs)
        self.source = source
        self.subject = subject
        self.callback_uri = callback_uri
        self.requested_media_types = requested_media_types
        self.requested_call_events = requested_call_events


class JoinCallResult(msrest.serialization.Model):
    """The response payload of the join call operation.

    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        **kwargs
    ):
        super(JoinCallResult, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id


class MicrosoftTeamsUserIdentifierModel(msrest.serialization.Model):
    """A Microsoft Teams user.

    All required parameters must be populated in order to send to Azure.

    :param user_id: Required. The Id of the Microsoft Teams user. If not anonymous, this is the AAD
     object Id of the user.
    :type user_id: str
    :param is_anonymous: True if the Microsoft Teams user is anonymous. By default false if
     missing.
    :type is_anonymous: bool
    :param cloud: The cloud that the Microsoft Teams user belongs to. By default 'public' if
     missing. Possible values include: "public", "dod", "gcch".
    :type cloud: str or
     ~azure.communication.callingserver.models.CommunicationCloudEnvironmentModel
    """

    _validation = {
        'user_id': {'required': True},
    }

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'is_anonymous': {'key': 'isAnonymous', 'type': 'bool'},
        'cloud': {'key': 'cloud', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_id: str,
        is_anonymous: Optional[bool] = None,
        cloud: Optional[Union[str, "CommunicationCloudEnvironmentModel"]] = None,
        **kwargs
    ):
        super(MicrosoftTeamsUserIdentifierModel, self).__init__(**kwargs)
        self.user_id = user_id
        self.is_anonymous = is_anonymous
        self.cloud = cloud


class ParticipantsUpdatedEvent(msrest.serialization.Model):
    """The participant update event.

    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    :param participants: The list of participants.
    :type participants: list[~azure.communication.callingserver.models.CallParticipant]
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'participants': {'key': 'participants', 'type': '[CallParticipant]'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        participants: Optional[List["CallParticipant"]] = None,
        **kwargs
    ):
        super(ParticipantsUpdatedEvent, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.participants = participants


class PhoneNumberIdentifierModel(msrest.serialization.Model):
    """A phone number.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The phone number in E.164 format.
    :type value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: str,
        **kwargs
    ):
        super(PhoneNumberIdentifierModel, self).__init__(**kwargs)
        self.value = value


class PlayAudioRequest(msrest.serialization.Model):
    """The request payload for playing audio.

    :param audio_file_uri: The media resource uri of the play audio request.
     Currently only Wave file (.wav) format audio prompts are supported.
     More specifically, the audio content in the wave file must be mono (single-channel),
     16-bit samples with a 16,000 (16KHz) sampling rate.
    :type audio_file_uri: str
    :param loop: The flag indicating whether audio file needs to be played in loop or not.
    :type loop: bool
    :param operation_context: The value to identify context of the operation.
    :type operation_context: str
    :param audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
     resource.
    :type audio_file_id: str
    :param callback_uri: The callback Uri to receive PlayAudio status notifications.
    :type callback_uri: str
    """

    _attribute_map = {
        'audio_file_uri': {'key': 'audioFileUri', 'type': 'str'},
        'loop': {'key': 'loop', 'type': 'bool'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'audio_file_id': {'key': 'audioFileId', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        audio_file_uri: Optional[str] = None,
        loop: Optional[bool] = None,
        operation_context: Optional[str] = None,
        audio_file_id: Optional[str] = None,
        callback_uri: Optional[str] = None,
        **kwargs
    ):
        super(PlayAudioRequest, self).__init__(**kwargs)
        self.audio_file_uri = audio_file_uri
        self.loop = loop
        self.operation_context = operation_context
        self.audio_file_id = audio_file_id
        self.callback_uri = callback_uri


class PlayAudioResult(msrest.serialization.Model):
    """The response payload for play audio operation.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: The operation id.
    :type operation_id: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    :param operation_context: The operation context provided by client.
    :type operation_context: str
    :param result_info: The result info for the operation.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "OperationStatus"],
        operation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_info: Optional["ResultInfo"] = None,
        **kwargs
    ):
        super(PlayAudioResult, self).__init__(**kwargs)
        self.operation_id = operation_id
        self.status = status
        self.operation_context = operation_context
        self.result_info = result_info


class PlayAudioResultEvent(msrest.serialization.Model):
    """The play audio result event.

    All required parameters must be populated in order to send to Azure.

    :param result_info: The result details.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    :param operation_context: The operation context.
    :type operation_context: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status: Union[str, "OperationStatus"],
        result_info: Optional["ResultInfo"] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        super(PlayAudioResultEvent, self).__init__(**kwargs)
        self.result_info = result_info
        self.operation_context = operation_context
        self.status = status


class ResultInfo(msrest.serialization.Model):
    """Result info class to be used to report result status for actions/operations.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The result code associated with the operation.
    :type code: int
    :param subcode: Required. The subcode that further classifies the result.
    :type subcode: int
    :param message: The message is a detail explanation of subcode.
    :type message: str
    """

    _validation = {
        'code': {'required': True},
        'subcode': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'subcode': {'key': 'subcode', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: int,
        subcode: int,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ResultInfo, self).__init__(**kwargs)
        self.code = code
        self.subcode = subcode
        self.message = message


class StartCallRecordingRequest(msrest.serialization.Model):
    """The request payload start call recording operation.

    :param recording_state_callback_uri: The uri to send notifications to.
    :type recording_state_callback_uri: str
    """

    _attribute_map = {
        'recording_state_callback_uri': {'key': 'recordingStateCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        recording_state_callback_uri: Optional[str] = None,
        **kwargs
    ):
        super(StartCallRecordingRequest, self).__init__(**kwargs)
        self.recording_state_callback_uri = recording_state_callback_uri


class StartCallRecordingResult(msrest.serialization.Model):
    """The response payload of start call recording operation.

    :param recording_id: The recording id of the started recording.
    :type recording_id: str
    """

    _attribute_map = {
        'recording_id': {'key': 'recordingId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        recording_id: Optional[str] = None,
        **kwargs
    ):
        super(StartCallRecordingResult, self).__init__(**kwargs)
        self.recording_id = recording_id


class ToneInfo(msrest.serialization.Model):
    """The information about the tone.

    All required parameters must be populated in order to send to Azure.

    :param sequence_id: Required. The sequence id which can be used to determine if the same tone
     was played multiple times or if any tones were missed.
    :type sequence_id: int
    :param tone: Required. The tone value. Possible values include: "tone0", "tone1", "tone2",
     "tone3", "tone4", "tone5", "tone6", "tone7", "tone8", "tone9", "star", "pound", "a", "b", "c",
     "d", "flash".
    :type tone: str or ~azure.communication.callingserver.models.ToneValue
    """

    _validation = {
        'sequence_id': {'required': True},
        'tone': {'required': True},
    }

    _attribute_map = {
        'sequence_id': {'key': 'sequenceId', 'type': 'int'},
        'tone': {'key': 'tone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sequence_id: int,
        tone: Union[str, "ToneValue"],
        **kwargs
    ):
        super(ToneInfo, self).__init__(**kwargs)
        self.sequence_id = sequence_id
        self.tone = tone


class ToneReceivedEvent(msrest.serialization.Model):
    """The subscribe to tone event.

    All required parameters must be populated in order to send to Azure.

    :param tone_info: Required. The tone info.
    :type tone_info: ~azure.communication.callingserver.models.ToneInfo
    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    """

    _validation = {
        'tone_info': {'required': True},
    }

    _attribute_map = {
        'tone_info': {'key': 'toneInfo', 'type': 'ToneInfo'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tone_info: "ToneInfo",
        call_connection_id: Optional[str] = None,
        **kwargs
    ):
        super(ToneReceivedEvent, self).__init__(**kwargs)
        self.tone_info = tone_info
        self.call_connection_id = call_connection_id
