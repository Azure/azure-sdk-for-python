# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class AddParticipantRequest(msrest.serialization.Model):
    """The add participant request.

    All required parameters must be populated in order to send to Azure.

    :ivar alternate_caller_id: The alternate identity of source participant.
    :vartype alternate_caller_id:
     ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :ivar participant: Required. The participant to be added to the call.
    :vartype participant: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    """

    _validation = {
        'participant': {'required': True},
    }

    _attribute_map = {
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword alternate_caller_id: The alternate identity of source participant.
        :paramtype alternate_caller_id:
         ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
        :keyword participant: Required. The participant to be added to the call.
        :paramtype participant: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        """
        super(AddParticipantRequest, self).__init__(**kwargs)
        self.alternate_caller_id = kwargs.get('alternate_caller_id', None)
        self.participant = kwargs['participant']
        self.operation_context = kwargs.get('operation_context', None)


class AddParticipantResult(msrest.serialization.Model):
    """The add participant result.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: The operation id.
    :vartype operation_id: str
    :ivar status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :vartype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    :ivar result_details: The result info for the operation.
    :vartype result_details:
     ~azure.communication.callingserver.models.CallingOperationResultDetails
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_details': {'key': 'resultDetails', 'type': 'CallingOperationResultDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword operation_id: The operation id.
        :paramtype operation_id: str
        :keyword status: Required. The status of the operation. Possible values include: "notStarted",
         "running", "completed", "failed".
        :paramtype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        :keyword result_details: The result info for the operation.
        :paramtype result_details:
         ~azure.communication.callingserver.models.CallingOperationResultDetails
        """
        super(AddParticipantResult, self).__init__(**kwargs)
        self.operation_id = kwargs.get('operation_id', None)
        self.status = kwargs['status']
        self.operation_context = kwargs.get('operation_context', None)
        self.result_details = kwargs.get('result_details', None)


class AddParticipantResultEvent(msrest.serialization.Model):
    """The add participant result event.

    All required parameters must be populated in order to send to Azure.

    :ivar result_details: The result details.
    :vartype result_details:
     ~azure.communication.callingserver.models.CallingOperationResultDetails
    :ivar operation_id: The operation id.
    :vartype operation_id: str
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    :ivar status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :vartype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
    :ivar call_locator: The server call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'result_details': {'key': 'resultDetails', 'type': 'CallingOperationResultDetails'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword result_details: The result details.
        :paramtype result_details:
         ~azure.communication.callingserver.models.CallingOperationResultDetails
        :keyword operation_id: The operation id.
        :paramtype operation_id: str
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        :keyword status: Required. The status of the operation. Possible values include: "notStarted",
         "running", "completed", "failed".
        :paramtype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
        :keyword call_locator: The server call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        """
        super(AddParticipantResultEvent, self).__init__(**kwargs)
        self.result_details = kwargs.get('result_details', None)
        self.operation_id = kwargs.get('operation_id', None)
        self.operation_context = kwargs.get('operation_context', None)
        self.status = kwargs['status']
        self.call_locator = kwargs.get('call_locator', None)


class AddParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The add participant request with call locator.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar callback_uri: The callback URI.
    :vartype callback_uri: str
    :ivar alternate_caller_id: The alternate identity of source participant.
    :vartype alternate_caller_id:
     ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :ivar participant: Required. The participant to be added to the call.
    :vartype participant: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    """

    _validation = {
        'call_locator': {'required': True},
        'participant': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword callback_uri: The callback URI.
        :paramtype callback_uri: str
        :keyword alternate_caller_id: The alternate identity of source participant.
        :paramtype alternate_caller_id:
         ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
        :keyword participant: Required. The participant to be added to the call.
        :paramtype participant: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        """
        super(AddParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.callback_uri = kwargs.get('callback_uri', None)
        self.alternate_caller_id = kwargs.get('alternate_caller_id', None)
        self.participant = kwargs['participant']
        self.operation_context = kwargs.get('operation_context', None)


class AddToDefaultAudioGroupRequest(msrest.serialization.Model):
    """The request payload for adding a participant to default audio group.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        """
        super(AddToDefaultAudioGroupRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class AnswerCallRequest(msrest.serialization.Model):
    """The request payload for answering the call.

    All required parameters must be populated in order to send to Azure.

    :ivar incoming_call_context: Required. The context associated with the call.
    :vartype incoming_call_context: str
    :ivar callback_uri: The callback uri.
    :vartype callback_uri: str
    :ivar requested_media_types: The requested modalities.
    :vartype requested_media_types: list[str or
     ~azure.communication.callingserver.models.CallMediaType]
    :ivar requested_call_events: The requested call events to subscribe to.
    :vartype requested_call_events: list[str or
     ~azure.communication.callingserver.models.CallingEventSubscriptionType]
    """

    _validation = {
        'incoming_call_context': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword incoming_call_context: Required. The context associated with the call.
        :paramtype incoming_call_context: str
        :keyword callback_uri: The callback uri.
        :paramtype callback_uri: str
        :keyword requested_media_types: The requested modalities.
        :paramtype requested_media_types: list[str or
         ~azure.communication.callingserver.models.CallMediaType]
        :keyword requested_call_events: The requested call events to subscribe to.
        :paramtype requested_call_events: list[str or
         ~azure.communication.callingserver.models.CallingEventSubscriptionType]
        """
        super(AnswerCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = kwargs['incoming_call_context']
        self.callback_uri = kwargs.get('callback_uri', None)
        self.requested_media_types = kwargs.get('requested_media_types', None)
        self.requested_call_events = kwargs.get('requested_call_events', None)


class AnswerCallResult(msrest.serialization.Model):
    """The response payload of the answer call operation.

    :ivar call_connection_id: The call connection id.
    :vartype call_connection_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_connection_id: The call connection id.
        :paramtype call_connection_id: str
        """
        super(AnswerCallResult, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)


class AudioGroupRequest(msrest.serialization.Model):
    """The audio group request.

    All required parameters must be populated in order to send to Azure.

    :ivar audio_routing_mode: Required. The audio routing mode. Possible values include:
     "oneToOne", "multicast".
    :vartype audio_routing_mode: str or ~azure.communication.callingserver.models.AudioRoutingMode
    :ivar targets: Required. The target identities that would be receivers in the audio group.
    :vartype targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    """

    _validation = {
        'audio_routing_mode': {'required': True},
        'targets': {'required': True},
    }

    _attribute_map = {
        'audio_routing_mode': {'key': 'audioRoutingMode', 'type': 'str'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword audio_routing_mode: Required. The audio routing mode. Possible values include:
         "oneToOne", "multicast".
        :paramtype audio_routing_mode: str or
         ~azure.communication.callingserver.models.AudioRoutingMode
        :keyword targets: Required. The target identities that would be receivers in the audio group.
        :paramtype targets:
         list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
        """
        super(AudioGroupRequest, self).__init__(**kwargs)
        self.audio_routing_mode = kwargs['audio_routing_mode']
        self.targets = kwargs['targets']


class AudioGroupResult(msrest.serialization.Model):
    """The audio group result.

    :ivar audio_routing_mode: The audio routing mode. Possible values include: "oneToOne",
     "multicast".
    :vartype audio_routing_mode: str or ~azure.communication.callingserver.models.AudioRoutingMode
    :ivar targets: The target identities that would be receivers in the audio group.
    :vartype targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    """

    _attribute_map = {
        'audio_routing_mode': {'key': 'audioRoutingMode', 'type': 'str'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword audio_routing_mode: The audio routing mode. Possible values include: "oneToOne",
         "multicast".
        :paramtype audio_routing_mode: str or
         ~azure.communication.callingserver.models.AudioRoutingMode
        :keyword targets: The target identities that would be receivers in the audio group.
        :paramtype targets:
         list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
        """
        super(AudioGroupResult, self).__init__(**kwargs)
        self.audio_routing_mode = kwargs.get('audio_routing_mode', None)
        self.targets = kwargs.get('targets', None)


class CallConnectionProperties(msrest.serialization.Model):
    """CallConnectionProperties.

    :ivar call_connection_id: The call connection id.
    :vartype call_connection_id: str
    :ivar source: The source of the call.
    :vartype source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar alternate_caller_id: The alternate identity of the source of the call if dialing out to a
     pstn number.
    :vartype alternate_caller_id:
     ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :ivar targets: The targets of the call.
    :vartype targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    :ivar call_connection_state: The state of the call connection. Possible values include:
     "unknown", "connecting", "connected", "transferring", "transferAccepted", "disconnecting",
     "disconnected".
    :vartype call_connection_state: str or
     ~azure.communication.callingserver.models.CallConnectionState
    :ivar subject: The subject.
    :vartype subject: str
    :ivar callback_uri: The callback URI.
    :vartype callback_uri: str
    :ivar requested_media_types: The requested modalities.
    :vartype requested_media_types: list[str or
     ~azure.communication.callingserver.models.CallMediaType]
    :ivar requested_call_events: The requested call events to subscribe to.
    :vartype requested_call_events: list[str or
     ~azure.communication.callingserver.models.CallingEventSubscriptionType]
    :ivar call_locator: The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
        'call_connection_state': {'key': 'callConnectionState', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_connection_id: The call connection id.
        :paramtype call_connection_id: str
        :keyword source: The source of the call.
        :paramtype source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword alternate_caller_id: The alternate identity of the source of the call if dialing out
         to a pstn number.
        :paramtype alternate_caller_id:
         ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
        :keyword targets: The targets of the call.
        :paramtype targets:
         list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
        :keyword call_connection_state: The state of the call connection. Possible values include:
         "unknown", "connecting", "connected", "transferring", "transferAccepted", "disconnecting",
         "disconnected".
        :paramtype call_connection_state: str or
         ~azure.communication.callingserver.models.CallConnectionState
        :keyword subject: The subject.
        :paramtype subject: str
        :keyword callback_uri: The callback URI.
        :paramtype callback_uri: str
        :keyword requested_media_types: The requested modalities.
        :paramtype requested_media_types: list[str or
         ~azure.communication.callingserver.models.CallMediaType]
        :keyword requested_call_events: The requested call events to subscribe to.
        :paramtype requested_call_events: list[str or
         ~azure.communication.callingserver.models.CallingEventSubscriptionType]
        :keyword call_locator: The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        """
        super(CallConnectionProperties, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)
        self.source = kwargs.get('source', None)
        self.alternate_caller_id = kwargs.get('alternate_caller_id', None)
        self.targets = kwargs.get('targets', None)
        self.call_connection_state = kwargs.get('call_connection_state', None)
        self.subject = kwargs.get('subject', None)
        self.callback_uri = kwargs.get('callback_uri', None)
        self.requested_media_types = kwargs.get('requested_media_types', None)
        self.requested_call_events = kwargs.get('requested_call_events', None)
        self.call_locator = kwargs.get('call_locator', None)


class CallConnectionStateChangedEvent(msrest.serialization.Model):
    """The call connection state changed event.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: The server call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar call_connection_id: The call connection id.
    :vartype call_connection_id: str
    :ivar call_connection_state: Required. The state of the call connection. Possible values
     include: "unknown", "connecting", "connected", "transferring", "transferAccepted",
     "disconnecting", "disconnected".
    :vartype call_connection_state: str or
     ~azure.communication.callingserver.models.CallConnectionState
    """

    _validation = {
        'call_connection_state': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'call_connection_state': {'key': 'callConnectionState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: The server call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword call_connection_id: The call connection id.
        :paramtype call_connection_id: str
        :keyword call_connection_state: Required. The state of the call connection. Possible values
         include: "unknown", "connecting", "connected", "transferring", "transferAccepted",
         "disconnecting", "disconnected".
        :paramtype call_connection_state: str or
         ~azure.communication.callingserver.models.CallConnectionState
        """
        super(CallConnectionStateChangedEvent, self).__init__(**kwargs)
        self.call_locator = kwargs.get('call_locator', None)
        self.call_connection_id = kwargs.get('call_connection_id', None)
        self.call_connection_state = kwargs['call_connection_state']


class CallingOperationResultDetails(msrest.serialization.Model):
    """The result details of calling operation.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. The result code associated with the operation.
    :vartype code: int
    :ivar subcode: Required. The subcode that further classifies the result.
    :vartype subcode: int
    :ivar message: The message is a detail explanation of subcode.
    :vartype message: str
    """

    _validation = {
        'code': {'required': True},
        'subcode': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'subcode': {'key': 'subcode', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Required. The result code associated with the operation.
        :paramtype code: int
        :keyword subcode: Required. The subcode that further classifies the result.
        :paramtype subcode: int
        :keyword message: The message is a detail explanation of subcode.
        :paramtype message: str
        """
        super(CallingOperationResultDetails, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.subcode = kwargs['subcode']
        self.message = kwargs.get('message', None)


class CallLocatorModel(msrest.serialization.Model):
    """The locator used for joining or taking action on a call.

    :ivar group_call_id: The group call id.
    :vartype group_call_id: str
    :ivar server_call_id: The server call id.
    :vartype server_call_id: str
    :ivar kind: The call locator kind. Possible values include: "groupCallLocator",
     "serverCallLocator".
    :vartype kind: str or ~azure.communication.callingserver.models.CallLocatorKindModel
    """

    _attribute_map = {
        'group_call_id': {'key': 'groupCallId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword group_call_id: The group call id.
        :paramtype group_call_id: str
        :keyword server_call_id: The server call id.
        :paramtype server_call_id: str
        :keyword kind: The call locator kind. Possible values include: "groupCallLocator",
         "serverCallLocator".
        :paramtype kind: str or ~azure.communication.callingserver.models.CallLocatorKindModel
        """
        super(CallLocatorModel, self).__init__(**kwargs)
        self.group_call_id = kwargs.get('group_call_id', None)
        self.server_call_id = kwargs.get('server_call_id', None)
        self.kind = kwargs.get('kind', None)


class CallParticipant(msrest.serialization.Model):
    """A participant in a call.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. Communication identifier of the participant.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar participant_id: Participant id.
    :vartype participant_id: str
    :ivar is_muted: Required. Is participant muted.
    :vartype is_muted: bool
    """

    _validation = {
        'identifier': {'required': True},
        'is_muted': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'participant_id': {'key': 'participantId', 'type': 'str'},
        'is_muted': {'key': 'isMuted', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. Communication identifier of the participant.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword participant_id: Participant id.
        :paramtype participant_id: str
        :keyword is_muted: Required. Is participant muted.
        :paramtype is_muted: bool
        """
        super(CallParticipant, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.participant_id = kwargs.get('participant_id', None)
        self.is_muted = kwargs['is_muted']


class CallRecordingProperties(msrest.serialization.Model):
    """The response payload of get call recording properties operation.

    All required parameters must be populated in order to send to Azure.

    :ivar recording_state: Required. The state of the recording. Possible values include: "active",
     "inactive".
    :vartype recording_state: str or ~azure.communication.callingserver.models.CallRecordingState
    """

    _validation = {
        'recording_state': {'required': True},
    }

    _attribute_map = {
        'recording_state': {'key': 'recordingState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword recording_state: Required. The state of the recording. Possible values include:
         "active", "inactive".
        :paramtype recording_state: str or ~azure.communication.callingserver.models.CallRecordingState
        """
        super(CallRecordingProperties, self).__init__(**kwargs)
        self.recording_state = kwargs['recording_state']


class CallRecordingStateChangeEvent(msrest.serialization.Model):
    """The call recording state change event.

    All required parameters must be populated in order to send to Azure.

    :ivar recording_id: The call recording id.
    :vartype recording_id: str
    :ivar call_recording_state: Required. The state of the recording. Possible values include:
     "active", "inactive".
    :vartype call_recording_state: str or
     ~azure.communication.callingserver.models.CallRecordingState
    :ivar start_date_time: Required. The time of the recording started.
    :vartype start_date_time: ~datetime.datetime
    :ivar call_locator: The server call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _validation = {
        'call_recording_state': {'required': True},
        'start_date_time': {'required': True},
    }

    _attribute_map = {
        'recording_id': {'key': 'recordingId', 'type': 'str'},
        'call_recording_state': {'key': 'callRecordingState', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword recording_id: The call recording id.
        :paramtype recording_id: str
        :keyword call_recording_state: Required. The state of the recording. Possible values include:
         "active", "inactive".
        :paramtype call_recording_state: str or
         ~azure.communication.callingserver.models.CallRecordingState
        :keyword start_date_time: Required. The time of the recording started.
        :paramtype start_date_time: ~datetime.datetime
        :keyword call_locator: The server call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        """
        super(CallRecordingStateChangeEvent, self).__init__(**kwargs)
        self.recording_id = kwargs.get('recording_id', None)
        self.call_recording_state = kwargs['call_recording_state']
        self.start_date_time = kwargs['start_date_time']
        self.call_locator = kwargs.get('call_locator', None)


class CancelMediaOperationWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for stopping a media operation for a participant with call locator.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar media_operation_id: Required. The operationId of the media operation to cancel.
    :vartype media_operation_id: str
    """

    _validation = {
        'call_locator': {'required': True},
        'media_operation_id': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'media_operation_id': {'key': 'mediaOperationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword media_operation_id: Required. The operationId of the media operation to cancel.
        :paramtype media_operation_id: str
        """
        super(CancelMediaOperationWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.media_operation_id = kwargs['media_operation_id']


class CancelParticipantMediaOperationRequest(msrest.serialization.Model):
    """The request payload for stopping a media operation for a participant.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar media_operation_id: Required. The operationId of the media operation to cancel.
    :vartype media_operation_id: str
    """

    _validation = {
        'identifier': {'required': True},
        'media_operation_id': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'media_operation_id': {'key': 'mediaOperationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword media_operation_id: Required. The operationId of the media operation to cancel.
        :paramtype media_operation_id: str
        """
        super(CancelParticipantMediaOperationRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.media_operation_id = kwargs['media_operation_id']


class CancelParticipantMediaOperationWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for stopping a media operation for a participant with call locator.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar identifier: Required. The identifier of the participant.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar media_operation_id: Required. The operationId of the media operation to cancel.
    :vartype media_operation_id: str
    """

    _validation = {
        'call_locator': {'required': True},
        'identifier': {'required': True},
        'media_operation_id': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'media_operation_id': {'key': 'mediaOperationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword identifier: Required. The identifier of the participant.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword media_operation_id: Required. The operationId of the media operation to cancel.
        :paramtype media_operation_id: str
        """
        super(CancelParticipantMediaOperationWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.identifier = kwargs['identifier']
        self.media_operation_id = kwargs['media_operation_id']


class CommunicationError(msrest.serialization.Model):
    """The Communication Services error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. The error code.
    :vartype code: str
    :ivar message: Required. The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Further details about specific errors that led to this error.
    :vartype details: list[~azure.communication.callingserver.models.CommunicationError]
    :ivar inner_error: The inner error if any.
    :vartype inner_error: ~azure.communication.callingserver.models.CommunicationError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CommunicationError]'},
        'inner_error': {'key': 'innererror', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Required. The error code.
        :paramtype code: str
        :keyword message: Required. The error message.
        :paramtype message: str
        """
        super(CommunicationError, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = None
        self.details = None
        self.inner_error = None


class CommunicationErrorResponse(msrest.serialization.Model):
    """The Communication Services error.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required. The Communication Services error.
    :vartype error: ~azure.communication.callingserver.models.CommunicationError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: Required. The Communication Services error.
        :paramtype error: ~azure.communication.callingserver.models.CommunicationError
        """
        super(CommunicationErrorResponse, self).__init__(**kwargs)
        self.error = kwargs['error']


class CommunicationIdentifierModel(msrest.serialization.Model):
    """Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set.

    :ivar raw_id: Raw Id of the identifier. Optional in requests, required in responses.
    :vartype raw_id: str
    :ivar communication_user: The communication user.
    :vartype communication_user:
     ~azure.communication.callingserver.models.CommunicationUserIdentifierModel
    :ivar phone_number: The phone number.
    :vartype phone_number: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :ivar microsoft_teams_user: The Microsoft Teams user.
    :vartype microsoft_teams_user:
     ~azure.communication.callingserver.models.MicrosoftTeamsUserIdentifierModel
    """

    _attribute_map = {
        'raw_id': {'key': 'rawId', 'type': 'str'},
        'communication_user': {'key': 'communicationUser', 'type': 'CommunicationUserIdentifierModel'},
        'phone_number': {'key': 'phoneNumber', 'type': 'PhoneNumberIdentifierModel'},
        'microsoft_teams_user': {'key': 'microsoftTeamsUser', 'type': 'MicrosoftTeamsUserIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword raw_id: Raw Id of the identifier. Optional in requests, required in responses.
        :paramtype raw_id: str
        :keyword communication_user: The communication user.
        :paramtype communication_user:
         ~azure.communication.callingserver.models.CommunicationUserIdentifierModel
        :keyword phone_number: The phone number.
        :paramtype phone_number: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
        :keyword microsoft_teams_user: The Microsoft Teams user.
        :paramtype microsoft_teams_user:
         ~azure.communication.callingserver.models.MicrosoftTeamsUserIdentifierModel
        """
        super(CommunicationIdentifierModel, self).__init__(**kwargs)
        self.raw_id = kwargs.get('raw_id', None)
        self.communication_user = kwargs.get('communication_user', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.microsoft_teams_user = kwargs.get('microsoft_teams_user', None)


class CommunicationUserIdentifierModel(msrest.serialization.Model):
    """A user that got created with an Azure Communication Services resource.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. The Id of the communication user.
    :vartype id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required. The Id of the communication user.
        :paramtype id: str
        """
        super(CommunicationUserIdentifierModel, self).__init__(**kwargs)
        self.id = kwargs['id']


class CreateAudioGroupResult(msrest.serialization.Model):
    """The response payload of the create audio group operation.

    :ivar audio_group_id: The audio group id.
    :vartype audio_group_id: str
    """

    _attribute_map = {
        'audio_group_id': {'key': 'audioGroupId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword audio_group_id: The audio group id.
        :paramtype audio_group_id: str
        """
        super(CreateAudioGroupResult, self).__init__(**kwargs)
        self.audio_group_id = kwargs.get('audio_group_id', None)


class CreateCallRequest(msrest.serialization.Model):
    """The request payload for create call.

    All required parameters must be populated in order to send to Azure.

    :ivar alternate_caller_id: The alternate identity of the source of the call if dialing out to a
     pstn number.
    :vartype alternate_caller_id:
     ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :ivar targets: Required. The targets of the call.
    :vartype targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    :ivar source: Required. The source of the call.
    :vartype source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar subject: The subject.
    :vartype subject: str
    :ivar callback_uri: Required. The callback URI.
    :vartype callback_uri: str
    :ivar requested_media_types: The requested modalities.
    :vartype requested_media_types: list[str or
     ~azure.communication.callingserver.models.CallMediaType]
    :ivar requested_call_events: The requested call events to subscribe to.
    :vartype requested_call_events: list[str or
     ~azure.communication.callingserver.models.CallingEventSubscriptionType]
    """

    _validation = {
        'targets': {'required': True},
        'source': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword alternate_caller_id: The alternate identity of the source of the call if dialing out
         to a pstn number.
        :paramtype alternate_caller_id:
         ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
        :keyword targets: Required. The targets of the call.
        :paramtype targets:
         list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
        :keyword source: Required. The source of the call.
        :paramtype source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword subject: The subject.
        :paramtype subject: str
        :keyword callback_uri: Required. The callback URI.
        :paramtype callback_uri: str
        :keyword requested_media_types: The requested modalities.
        :paramtype requested_media_types: list[str or
         ~azure.communication.callingserver.models.CallMediaType]
        :keyword requested_call_events: The requested call events to subscribe to.
        :paramtype requested_call_events: list[str or
         ~azure.communication.callingserver.models.CallingEventSubscriptionType]
        """
        super(CreateCallRequest, self).__init__(**kwargs)
        self.alternate_caller_id = kwargs.get('alternate_caller_id', None)
        self.targets = kwargs['targets']
        self.source = kwargs['source']
        self.subject = kwargs.get('subject', None)
        self.callback_uri = kwargs['callback_uri']
        self.requested_media_types = kwargs.get('requested_media_types', None)
        self.requested_call_events = kwargs.get('requested_call_events', None)


class CreateCallResult(msrest.serialization.Model):
    """The response payload of the create call operation.

    :ivar call_connection_id: The call connection id.
    :vartype call_connection_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_connection_id: The call connection id.
        :paramtype call_connection_id: str
        """
        super(CreateCallResult, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)


class GetAllParticipantsWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for get all participants.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _validation = {
        'call_locator': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        """
        super(GetAllParticipantsWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']


class GetParticipantRequest(msrest.serialization.Model):
    """The get participant by identifier request.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        """
        super(GetParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class GetParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The get participant by identifier request using call locator.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar identifier: Required. The identifier of the participant.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'call_locator': {'required': True},
        'identifier': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword identifier: Required. The identifier of the participant.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        """
        super(GetParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.identifier = kwargs['identifier']


class JoinCallRequest(msrest.serialization.Model):
    """The request payload for join call.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar source: Required. The source of the call.
    :vartype source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar subject: The subject.
    :vartype subject: str
    :ivar callback_uri: Required. The callback URI.
    :vartype callback_uri: str
    :ivar requested_media_types: The requested modalities.
    :vartype requested_media_types: list[str or
     ~azure.communication.callingserver.models.CallMediaType]
    :ivar requested_call_events: The requested call events to subscribe to.
    :vartype requested_call_events: list[str or
     ~azure.communication.callingserver.models.CallingEventSubscriptionType]
    """

    _validation = {
        'call_locator': {'required': True},
        'source': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword source: Required. The source of the call.
        :paramtype source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword subject: The subject.
        :paramtype subject: str
        :keyword callback_uri: Required. The callback URI.
        :paramtype callback_uri: str
        :keyword requested_media_types: The requested modalities.
        :paramtype requested_media_types: list[str or
         ~azure.communication.callingserver.models.CallMediaType]
        :keyword requested_call_events: The requested call events to subscribe to.
        :paramtype requested_call_events: list[str or
         ~azure.communication.callingserver.models.CallingEventSubscriptionType]
        """
        super(JoinCallRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.source = kwargs['source']
        self.subject = kwargs.get('subject', None)
        self.callback_uri = kwargs['callback_uri']
        self.requested_media_types = kwargs.get('requested_media_types', None)
        self.requested_call_events = kwargs.get('requested_call_events', None)


class JoinCallResult(msrest.serialization.Model):
    """The response payload of the join call operation.

    :ivar call_connection_id: The call connection id.
    :vartype call_connection_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_connection_id: The call connection id.
        :paramtype call_connection_id: str
        """
        super(JoinCallResult, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)


class MicrosoftTeamsUserIdentifierModel(msrest.serialization.Model):
    """A Microsoft Teams user.

    All required parameters must be populated in order to send to Azure.

    :ivar user_id: Required. The Id of the Microsoft Teams user. If not anonymous, this is the AAD
     object Id of the user.
    :vartype user_id: str
    :ivar is_anonymous: True if the Microsoft Teams user is anonymous. By default false if missing.
    :vartype is_anonymous: bool
    :ivar cloud: The cloud that the Microsoft Teams user belongs to. By default 'public' if
     missing. Possible values include: "public", "dod", "gcch".
    :vartype cloud: str or
     ~azure.communication.callingserver.models.CommunicationCloudEnvironmentModel
    """

    _validation = {
        'user_id': {'required': True},
    }

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'is_anonymous': {'key': 'isAnonymous', 'type': 'bool'},
        'cloud': {'key': 'cloud', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword user_id: Required. The Id of the Microsoft Teams user. If not anonymous, this is the
         AAD object Id of the user.
        :paramtype user_id: str
        :keyword is_anonymous: True if the Microsoft Teams user is anonymous. By default false if
         missing.
        :paramtype is_anonymous: bool
        :keyword cloud: The cloud that the Microsoft Teams user belongs to. By default 'public' if
         missing. Possible values include: "public", "dod", "gcch".
        :paramtype cloud: str or
         ~azure.communication.callingserver.models.CommunicationCloudEnvironmentModel
        """
        super(MicrosoftTeamsUserIdentifierModel, self).__init__(**kwargs)
        self.user_id = kwargs['user_id']
        self.is_anonymous = kwargs.get('is_anonymous', None)
        self.cloud = kwargs.get('cloud', None)


class MuteParticipantRequest(msrest.serialization.Model):
    """The request payload to mute a participant.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant to be muted in the call.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant to be muted in the call.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        """
        super(MuteParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.operation_context = kwargs.get('operation_context', None)


class ParticipantsUpdatedEvent(msrest.serialization.Model):
    """The participant update event.

    :ivar call_connection_id: The call connection id.
    :vartype call_connection_id: str
    :ivar call_locator: The server call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar participants: The list of participants.
    :vartype participants: list[~azure.communication.callingserver.models.CallParticipant]
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'participants': {'key': 'participants', 'type': '[CallParticipant]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_connection_id: The call connection id.
        :paramtype call_connection_id: str
        :keyword call_locator: The server call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword participants: The list of participants.
        :paramtype participants: list[~azure.communication.callingserver.models.CallParticipant]
        """
        super(ParticipantsUpdatedEvent, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)
        self.call_locator = kwargs.get('call_locator', None)
        self.participants = kwargs.get('participants', None)


class PhoneNumberIdentifierModel(msrest.serialization.Model):
    """A phone number.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The phone number in E.164 format.
    :vartype value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. The phone number in E.164 format.
        :paramtype value: str
        """
        super(PhoneNumberIdentifierModel, self).__init__(**kwargs)
        self.value = kwargs['value']


class PlayAudioRequest(msrest.serialization.Model):
    """The request payload for playing audio.

    All required parameters must be populated in order to send to Azure.

    :ivar audio_file_uri: Required. The media resource uri of the play audio request.
     Currently only Wave file (.wav) format audio prompts are supported.
     More specifically, the audio content in the wave file must be mono (single-channel),
     16-bit samples with a 16,000 (16KHz) sampling rate.
    :vartype audio_file_uri: str
    :ivar loop: Required. The flag indicating whether audio file needs to be played in loop or not.
    :vartype loop: bool
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
     resource.
    :vartype audio_file_id: str
    """

    _validation = {
        'audio_file_uri': {'required': True},
        'loop': {'required': True},
    }

    _attribute_map = {
        'audio_file_uri': {'key': 'audioFileUri', 'type': 'str'},
        'loop': {'key': 'loop', 'type': 'bool'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'audio_file_id': {'key': 'audioFileId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword audio_file_uri: Required. The media resource uri of the play audio request.
         Currently only Wave file (.wav) format audio prompts are supported.
         More specifically, the audio content in the wave file must be mono (single-channel),
         16-bit samples with a 16,000 (16KHz) sampling rate.
        :paramtype audio_file_uri: str
        :keyword loop: Required. The flag indicating whether audio file needs to be played in loop or
         not.
        :paramtype loop: bool
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
         resource.
        :paramtype audio_file_id: str
        """
        super(PlayAudioRequest, self).__init__(**kwargs)
        self.audio_file_uri = kwargs['audio_file_uri']
        self.loop = kwargs['loop']
        self.operation_context = kwargs.get('operation_context', None)
        self.audio_file_id = kwargs.get('audio_file_id', None)


class PlayAudioResult(msrest.serialization.Model):
    """The response payload for play audio operation.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: The operation id.
    :vartype operation_id: str
    :ivar status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :vartype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    :ivar result_details: The result info for the operation.
    :vartype result_details:
     ~azure.communication.callingserver.models.CallingOperationResultDetails
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_details': {'key': 'resultDetails', 'type': 'CallingOperationResultDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword operation_id: The operation id.
        :paramtype operation_id: str
        :keyword status: Required. The status of the operation. Possible values include: "notStarted",
         "running", "completed", "failed".
        :paramtype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        :keyword result_details: The result info for the operation.
        :paramtype result_details:
         ~azure.communication.callingserver.models.CallingOperationResultDetails
        """
        super(PlayAudioResult, self).__init__(**kwargs)
        self.operation_id = kwargs.get('operation_id', None)
        self.status = kwargs['status']
        self.operation_context = kwargs.get('operation_context', None)
        self.result_details = kwargs.get('result_details', None)


class PlayAudioResultEvent(msrest.serialization.Model):
    """The play audio result event.

    All required parameters must be populated in order to send to Azure.

    :ivar result_details: The result details.
    :vartype result_details:
     ~azure.communication.callingserver.models.CallingOperationResultDetails
    :ivar operation_id: The operation id.
    :vartype operation_id: str
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    :ivar status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :vartype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
    :ivar call_locator: The server call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'result_details': {'key': 'resultDetails', 'type': 'CallingOperationResultDetails'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword result_details: The result details.
        :paramtype result_details:
         ~azure.communication.callingserver.models.CallingOperationResultDetails
        :keyword operation_id: The operation id.
        :paramtype operation_id: str
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        :keyword status: Required. The status of the operation. Possible values include: "notStarted",
         "running", "completed", "failed".
        :paramtype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
        :keyword call_locator: The server call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        """
        super(PlayAudioResultEvent, self).__init__(**kwargs)
        self.result_details = kwargs.get('result_details', None)
        self.operation_id = kwargs.get('operation_id', None)
        self.operation_context = kwargs.get('operation_context', None)
        self.status = kwargs['status']
        self.call_locator = kwargs.get('call_locator', None)


class PlayAudioToParticipantRequest(msrest.serialization.Model):
    """The request payload for playing audio to participant.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant to play audio to.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar audio_file_uri: Required. The media resource uri of the play audio request.
     Currently only Wave file (.wav) format audio prompts are supported.
     More specifically, the audio content in the wave file must be mono (single-channel),
     16-bit samples with a 16,000 (16KHz) sampling rate.
    :vartype audio_file_uri: str
    :ivar loop: Required. The flag indicating whether audio file needs to be played in loop or not.
    :vartype loop: bool
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
     resource.
    :vartype audio_file_id: str
    """

    _validation = {
        'identifier': {'required': True},
        'audio_file_uri': {'required': True},
        'loop': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'audio_file_uri': {'key': 'audioFileUri', 'type': 'str'},
        'loop': {'key': 'loop', 'type': 'bool'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'audio_file_id': {'key': 'audioFileId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant to play audio to.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword audio_file_uri: Required. The media resource uri of the play audio request.
         Currently only Wave file (.wav) format audio prompts are supported.
         More specifically, the audio content in the wave file must be mono (single-channel),
         16-bit samples with a 16,000 (16KHz) sampling rate.
        :paramtype audio_file_uri: str
        :keyword loop: Required. The flag indicating whether audio file needs to be played in loop or
         not.
        :paramtype loop: bool
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
         resource.
        :paramtype audio_file_id: str
        """
        super(PlayAudioToParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.audio_file_uri = kwargs['audio_file_uri']
        self.loop = kwargs['loop']
        self.operation_context = kwargs.get('operation_context', None)
        self.audio_file_id = kwargs.get('audio_file_id', None)


class PlayAudioToParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for playing audio with call locator to participant.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant to play audio to.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar callback_uri: The callback Uri to receive PlayAudio status notifications.
    :vartype callback_uri: str
    :ivar audio_file_uri: Required. The media resource uri of the play audio request.
     Currently only Wave file (.wav) format audio prompts are supported.
     More specifically, the audio content in the wave file must be mono (single-channel),
     16-bit samples with a 16,000 (16KHz) sampling rate.
    :vartype audio_file_uri: str
    :ivar loop: Required. The flag indicating whether audio file needs to be played in loop or not.
    :vartype loop: bool
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
     resource.
    :vartype audio_file_id: str
    """

    _validation = {
        'identifier': {'required': True},
        'call_locator': {'required': True},
        'audio_file_uri': {'required': True},
        'loop': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'audio_file_uri': {'key': 'audioFileUri', 'type': 'str'},
        'loop': {'key': 'loop', 'type': 'bool'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'audio_file_id': {'key': 'audioFileId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant to play audio to.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword callback_uri: The callback Uri to receive PlayAudio status notifications.
        :paramtype callback_uri: str
        :keyword audio_file_uri: Required. The media resource uri of the play audio request.
         Currently only Wave file (.wav) format audio prompts are supported.
         More specifically, the audio content in the wave file must be mono (single-channel),
         16-bit samples with a 16,000 (16KHz) sampling rate.
        :paramtype audio_file_uri: str
        :keyword loop: Required. The flag indicating whether audio file needs to be played in loop or
         not.
        :paramtype loop: bool
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
         resource.
        :paramtype audio_file_id: str
        """
        super(PlayAudioToParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.call_locator = kwargs['call_locator']
        self.callback_uri = kwargs.get('callback_uri', None)
        self.audio_file_uri = kwargs['audio_file_uri']
        self.loop = kwargs['loop']
        self.operation_context = kwargs.get('operation_context', None)
        self.audio_file_id = kwargs.get('audio_file_id', None)


class PlayAudioWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for playing audio with call locator.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar callback_uri: The callback Uri to receive PlayAudio status notifications.
    :vartype callback_uri: str
    :ivar audio_file_uri: Required. The media resource uri of the play audio request.
     Currently only Wave file (.wav) format audio prompts are supported.
     More specifically, the audio content in the wave file must be mono (single-channel),
     16-bit samples with a 16,000 (16KHz) sampling rate.
    :vartype audio_file_uri: str
    :ivar loop: Required. The flag indicating whether audio file needs to be played in loop or not.
    :vartype loop: bool
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
     resource.
    :vartype audio_file_id: str
    """

    _validation = {
        'call_locator': {'required': True},
        'audio_file_uri': {'required': True},
        'loop': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'audio_file_uri': {'key': 'audioFileUri', 'type': 'str'},
        'loop': {'key': 'loop', 'type': 'bool'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'audio_file_id': {'key': 'audioFileId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword callback_uri: The callback Uri to receive PlayAudio status notifications.
        :paramtype callback_uri: str
        :keyword audio_file_uri: Required. The media resource uri of the play audio request.
         Currently only Wave file (.wav) format audio prompts are supported.
         More specifically, the audio content in the wave file must be mono (single-channel),
         16-bit samples with a 16,000 (16KHz) sampling rate.
        :paramtype audio_file_uri: str
        :keyword loop: Required. The flag indicating whether audio file needs to be played in loop or
         not.
        :paramtype loop: bool
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
         resource.
        :paramtype audio_file_id: str
        """
        super(PlayAudioWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.callback_uri = kwargs.get('callback_uri', None)
        self.audio_file_uri = kwargs['audio_file_uri']
        self.loop = kwargs['loop']
        self.operation_context = kwargs.get('operation_context', None)
        self.audio_file_id = kwargs.get('audio_file_id', None)


class RedirectCallRequest(msrest.serialization.Model):
    """The request payload for redirecting the call.

    All required parameters must be populated in order to send to Azure.

    :ivar incoming_call_context: Required. The context associated with the call.
    :vartype incoming_call_context: str
    :ivar target: Required. The target identity to redirect the call to.
    :vartype target: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'incoming_call_context': {'required': True},
        'target': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'target': {'key': 'target', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword incoming_call_context: Required. The context associated with the call.
        :paramtype incoming_call_context: str
        :keyword target: Required. The target identity to redirect the call to.
        :paramtype target: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        """
        super(RedirectCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = kwargs['incoming_call_context']
        self.target = kwargs['target']


class RejectCallRequest(msrest.serialization.Model):
    """The request payload for rejecting the call.

    All required parameters must be populated in order to send to Azure.

    :ivar incoming_call_context: Required. The context associated with the call.
    :vartype incoming_call_context: str
    :ivar call_reject_reason: The rejection reason. Possible values include: "none", "busy",
     "forbidden".
    :vartype call_reject_reason: str or ~azure.communication.callingserver.models.CallRejectReason
    """

    _validation = {
        'incoming_call_context': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'call_reject_reason': {'key': 'callRejectReason', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword incoming_call_context: Required. The context associated with the call.
        :paramtype incoming_call_context: str
        :keyword call_reject_reason: The rejection reason. Possible values include: "none", "busy",
         "forbidden".
        :paramtype call_reject_reason: str or
         ~azure.communication.callingserver.models.CallRejectReason
        """
        super(RejectCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = kwargs['incoming_call_context']
        self.call_reject_reason = kwargs.get('call_reject_reason', None)


class RemoveFromDefaultAudioGroupRequest(msrest.serialization.Model):
    """The request payload for removing a participant from default audio group.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        """
        super(RemoveFromDefaultAudioGroupRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class RemoveParticipantRequest(msrest.serialization.Model):
    """The remove participant by identifier request.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant to be removed from the call.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant to be removed from the call.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        """
        super(RemoveParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class RemoveParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The remove participant by identifier request.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar identifier: Required. The identifier of the participant to be removed from the call.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'call_locator': {'required': True},
        'identifier': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword identifier: Required. The identifier of the participant to be removed from the call.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        """
        super(RemoveParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.identifier = kwargs['identifier']


class StartCallRecordingResult(msrest.serialization.Model):
    """The response payload of start call recording operation.

    :ivar recording_id: The recording id of the started recording.
    :vartype recording_id: str
    """

    _attribute_map = {
        'recording_id': {'key': 'recordingId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword recording_id: The recording id of the started recording.
        :paramtype recording_id: str
        """
        super(StartCallRecordingResult, self).__init__(**kwargs)
        self.recording_id = kwargs.get('recording_id', None)


class StartCallRecordingWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload start for call recording operation with call locator.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :ivar recording_state_callback_uri: The uri to send notifications to.
    :vartype recording_state_callback_uri: str
    :ivar recording_content_type: The content type of call recording. Possible values include:
     "audio", "audioVideo".
    :vartype recording_content_type: str or
     ~azure.communication.callingserver.models.RecordingContentType
    :ivar recording_channel_type: The channel type of call recording. Possible values include:
     "mixed", "unmixed".
    :vartype recording_channel_type: str or
     ~azure.communication.callingserver.models.RecordingChannelType
    :ivar recording_format_type: The format type of call recording. Possible values include: "wav",
     "mp3", "mp4".
    :vartype recording_format_type: str or
     ~azure.communication.callingserver.models.RecordingFormatType
    """

    _validation = {
        'call_locator': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'recording_state_callback_uri': {'key': 'recordingStateCallbackUri', 'type': 'str'},
        'recording_content_type': {'key': 'recordingContentType', 'type': 'str'},
        'recording_channel_type': {'key': 'recordingChannelType', 'type': 'str'},
        'recording_format_type': {'key': 'recordingFormatType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        :keyword recording_state_callback_uri: The uri to send notifications to.
        :paramtype recording_state_callback_uri: str
        :keyword recording_content_type: The content type of call recording. Possible values include:
         "audio", "audioVideo".
        :paramtype recording_content_type: str or
         ~azure.communication.callingserver.models.RecordingContentType
        :keyword recording_channel_type: The channel type of call recording. Possible values include:
         "mixed", "unmixed".
        :paramtype recording_channel_type: str or
         ~azure.communication.callingserver.models.RecordingChannelType
        :keyword recording_format_type: The format type of call recording. Possible values include:
         "wav", "mp3", "mp4".
        :paramtype recording_format_type: str or
         ~azure.communication.callingserver.models.RecordingFormatType
        """
        super(StartCallRecordingWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.recording_state_callback_uri = kwargs.get('recording_state_callback_uri', None)
        self.recording_content_type = kwargs.get('recording_content_type', None)
        self.recording_channel_type = kwargs.get('recording_channel_type', None)
        self.recording_format_type = kwargs.get('recording_format_type', None)


class ToneInfo(msrest.serialization.Model):
    """The information about the tone.

    All required parameters must be populated in order to send to Azure.

    :ivar sequence_id: Required. The sequence id which can be used to determine if the same tone
     was played multiple times or if any tones were missed.
    :vartype sequence_id: int
    :ivar tone: Required. The tone value. Possible values include: "tone0", "tone1", "tone2",
     "tone3", "tone4", "tone5", "tone6", "tone7", "tone8", "tone9", "star", "pound", "a", "b", "c",
     "d", "flash".
    :vartype tone: str or ~azure.communication.callingserver.models.ToneValue
    """

    _validation = {
        'sequence_id': {'required': True},
        'tone': {'required': True},
    }

    _attribute_map = {
        'sequence_id': {'key': 'sequenceId', 'type': 'int'},
        'tone': {'key': 'tone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sequence_id: Required. The sequence id which can be used to determine if the same tone
         was played multiple times or if any tones were missed.
        :paramtype sequence_id: int
        :keyword tone: Required. The tone value. Possible values include: "tone0", "tone1", "tone2",
         "tone3", "tone4", "tone5", "tone6", "tone7", "tone8", "tone9", "star", "pound", "a", "b", "c",
         "d", "flash".
        :paramtype tone: str or ~azure.communication.callingserver.models.ToneValue
        """
        super(ToneInfo, self).__init__(**kwargs)
        self.sequence_id = kwargs['sequence_id']
        self.tone = kwargs['tone']


class ToneReceivedEvent(msrest.serialization.Model):
    """The subscribe to tone event.

    All required parameters must be populated in order to send to Azure.

    :ivar tone_info: Required. The tone info.
    :vartype tone_info: ~azure.communication.callingserver.models.ToneInfo
    :ivar call_connection_id: The call connection id.
    :vartype call_connection_id: str
    :ivar call_locator: The server call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _validation = {
        'tone_info': {'required': True},
    }

    _attribute_map = {
        'tone_info': {'key': 'toneInfo', 'type': 'ToneInfo'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tone_info: Required. The tone info.
        :paramtype tone_info: ~azure.communication.callingserver.models.ToneInfo
        :keyword call_connection_id: The call connection id.
        :paramtype call_connection_id: str
        :keyword call_locator: The server call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        """
        super(ToneReceivedEvent, self).__init__(**kwargs)
        self.tone_info = kwargs['tone_info']
        self.call_connection_id = kwargs.get('call_connection_id', None)
        self.call_locator = kwargs.get('call_locator', None)


class TransferCallResult(msrest.serialization.Model):
    """The response payload for transfer call operation.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: The operation id.
    :vartype operation_id: str
    :ivar status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :vartype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    :ivar result_details: The result info for the operation.
    :vartype result_details:
     ~azure.communication.callingserver.models.CallingOperationResultDetails
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_details': {'key': 'resultDetails', 'type': 'CallingOperationResultDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword operation_id: The operation id.
        :paramtype operation_id: str
        :keyword status: Required. The status of the operation. Possible values include: "notStarted",
         "running", "completed", "failed".
        :paramtype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        :keyword result_details: The result info for the operation.
        :paramtype result_details:
         ~azure.communication.callingserver.models.CallingOperationResultDetails
        """
        super(TransferCallResult, self).__init__(**kwargs)
        self.operation_id = kwargs.get('operation_id', None)
        self.status = kwargs['status']
        self.operation_context = kwargs.get('operation_context', None)
        self.result_details = kwargs.get('result_details', None)


class TransferCallResultEvent(msrest.serialization.Model):
    """The transfer call result event.

    All required parameters must be populated in order to send to Azure.

    :ivar result_details: The result details.
    :vartype result_details:
     ~azure.communication.callingserver.models.CallingOperationResultDetails
    :ivar operation_id: The operation id.
    :vartype operation_id: str
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    :ivar status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :vartype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
    :ivar call_locator: The server call locator.
    :vartype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'result_details': {'key': 'resultDetails', 'type': 'CallingOperationResultDetails'},
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword result_details: The result details.
        :paramtype result_details:
         ~azure.communication.callingserver.models.CallingOperationResultDetails
        :keyword operation_id: The operation id.
        :paramtype operation_id: str
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        :keyword status: Required. The status of the operation. Possible values include: "notStarted",
         "running", "completed", "failed".
        :paramtype status: str or ~azure.communication.callingserver.models.CallingOperationStatus
        :keyword call_locator: The server call locator.
        :paramtype call_locator: ~azure.communication.callingserver.models.CallLocatorModel
        """
        super(TransferCallResultEvent, self).__init__(**kwargs)
        self.result_details = kwargs.get('result_details', None)
        self.operation_id = kwargs.get('operation_id', None)
        self.operation_context = kwargs.get('operation_context', None)
        self.status = kwargs['status']
        self.call_locator = kwargs.get('call_locator', None)


class TransferToCallRequest(msrest.serialization.Model):
    """The transfer to call request.

    All required parameters must be populated in order to send to Azure.

    :ivar target_call_connection_id: Required. The call connection id to replace the current call
     with. This parameter should be used for consultative transfer.
    :vartype target_call_connection_id: str
    :ivar user_to_user_information: The user to user information.
    :vartype user_to_user_information: str
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    """

    _validation = {
        'target_call_connection_id': {'required': True},
    }

    _attribute_map = {
        'target_call_connection_id': {'key': 'targetCallConnectionId', 'type': 'str'},
        'user_to_user_information': {'key': 'userToUserInformation', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_call_connection_id: Required. The call connection id to replace the current
         call with. This parameter should be used for consultative transfer.
        :paramtype target_call_connection_id: str
        :keyword user_to_user_information: The user to user information.
        :paramtype user_to_user_information: str
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        """
        super(TransferToCallRequest, self).__init__(**kwargs)
        self.target_call_connection_id = kwargs['target_call_connection_id']
        self.user_to_user_information = kwargs.get('user_to_user_information', None)
        self.operation_context = kwargs.get('operation_context', None)


class TransferToParticipantRequest(msrest.serialization.Model):
    """The transfer call to participant request.

    All required parameters must be populated in order to send to Azure.

    :ivar target_participant: Required. The identity of the target where call should be transfer
     to.
    :vartype target_participant:
     ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar alternate_caller_id: The alternate identity of the transferor if transferring to a pstn
     number.
    :vartype alternate_caller_id:
     ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :ivar user_to_user_information: The user to user information.
    :vartype user_to_user_information: str
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    """

    _validation = {
        'target_participant': {'required': True},
    }

    _attribute_map = {
        'target_participant': {'key': 'targetParticipant', 'type': 'CommunicationIdentifierModel'},
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'user_to_user_information': {'key': 'userToUserInformation', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword target_participant: Required. The identity of the target where call should be transfer
         to.
        :paramtype target_participant:
         ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword alternate_caller_id: The alternate identity of the transferor if transferring to a
         pstn number.
        :paramtype alternate_caller_id:
         ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
        :keyword user_to_user_information: The user to user information.
        :paramtype user_to_user_information: str
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        """
        super(TransferToParticipantRequest, self).__init__(**kwargs)
        self.target_participant = kwargs['target_participant']
        self.alternate_caller_id = kwargs.get('alternate_caller_id', None)
        self.user_to_user_information = kwargs.get('user_to_user_information', None)
        self.operation_context = kwargs.get('operation_context', None)


class UnmuteParticipantRequest(msrest.serialization.Model):
    """The request payload to unmute a participant.

    All required parameters must be populated in order to send to Azure.

    :ivar identifier: Required. The identifier of the participant to be unmuted in the call.
    :vartype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :ivar operation_context: The operation context.
    :vartype operation_context: str
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword identifier: Required. The identifier of the participant to be unmuted in the call.
        :paramtype identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
        :keyword operation_context: The operation context.
        :paramtype operation_context: str
        """
        super(UnmuteParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.operation_context = kwargs.get('operation_context', None)


class UpdateAudioGroupRequest(msrest.serialization.Model):
    """The update audio group request.

    All required parameters must be populated in order to send to Azure.

    :ivar targets: Required. The target identities that would be receivers in the audio group.
    :vartype targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    """

    _validation = {
        'targets': {'required': True},
    }

    _attribute_map = {
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword targets: Required. The target identities that would be receivers in the audio group.
        :paramtype targets:
         list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
        """
        super(UpdateAudioGroupRequest, self).__init__(**kwargs)
        self.targets = kwargs['targets']
