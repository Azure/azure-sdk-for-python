# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class AddParticipantRequest(msrest.serialization.Model):
    """The add participant request.

    :param alternate_caller_id: The alternate identity of source participant.
    :type alternate_caller_id: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :param participant: The participant to be added to the call.
    :type participant: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param operation_context: The operation context.
    :type operation_context: str
    :param callback_uri: The callback URI.
    :type callback_uri: str
    """

    _attribute_map = {
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AddParticipantRequest, self).__init__(**kwargs)
        self.alternate_caller_id = kwargs.get('alternate_caller_id', None)
        self.participant = kwargs.get('participant', None)
        self.operation_context = kwargs.get('operation_context', None)
        self.callback_uri = kwargs.get('callback_uri', None)


class AddParticipantResult(msrest.serialization.Model):
    """The add participant result.

    :param participant_id: The id of the added participant.
    :type participant_id: str
    """

    _attribute_map = {
        'participant_id': {'key': 'participantId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AddParticipantResult, self).__init__(**kwargs)
        self.participant_id = kwargs.get('participant_id', None)


class AddParticipantResultEvent(msrest.serialization.Model):
    """AddParticipantResultEvent.

    All required parameters must be populated in order to send to Azure.

    :param result_info: The result details.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    :param operation_context: The operation context.
    :type operation_context: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AddParticipantResultEvent, self).__init__(**kwargs)
        self.result_info = kwargs.get('result_info', None)
        self.operation_context = kwargs.get('operation_context', None)
        self.status = kwargs['status']


class AddParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The add participant request with call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param add_participant_request: Required. The add participant request.
    :type add_participant_request: ~azure.communication.callingserver.models.AddParticipantRequest
    """

    _validation = {
        'call_locator': {'required': True},
        'add_participant_request': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'add_participant_request': {'key': 'addParticipantRequest', 'type': 'AddParticipantRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AddParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.add_participant_request = kwargs['add_participant_request']


class AnswerCallRequest(msrest.serialization.Model):
    """The request payload for answering the call.

    All required parameters must be populated in order to send to Azure.

    :param incoming_call_context: The context associated with the call.
    :type incoming_call_context: str
    :param participant_capacity: The number of participant that the application can handle for the
     call.
    :type participant_capacity: int
    :param callback_url: Required. The callback url.
    :type callback_url: str
    :param requested_media_types: The requested modalities.
    :type requested_media_types: list[str or ~azure.communication.callingserver.models.MediaType]
    :param requested_call_events: The requested call events to subscribe to.
    :type requested_call_events: list[str or
     ~azure.communication.callingserver.models.EventSubscriptionType]
    """

    _validation = {
        'callback_url': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'participant_capacity': {'key': 'participantCapacity', 'type': 'int'},
        'callback_url': {'key': 'callbackUrl', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AnswerCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = kwargs.get('incoming_call_context', None)
        self.participant_capacity = kwargs.get('participant_capacity', None)
        self.callback_url = kwargs['callback_url']
        self.requested_media_types = kwargs.get('requested_media_types', None)
        self.requested_call_events = kwargs.get('requested_call_events', None)


class AnswerCallResult(msrest.serialization.Model):
    """The response payload of the answer call operation.

    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AnswerCallResult, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)


class AudioRoutingGroupRequest(msrest.serialization.Model):
    """The audio routing group request.

    :param audio_routing_mode: The audio routing mode. Possible values include: "oneToOne",
     "multicast".
    :type audio_routing_mode: str or ~azure.communication.callingserver.models.AudioRoutingMode
    :param targets: The target identities that would be receivers in the audio routing group.
    :type targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    """

    _attribute_map = {
        'audio_routing_mode': {'key': 'audioRoutingMode', 'type': 'str'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AudioRoutingGroupRequest, self).__init__(**kwargs)
        self.audio_routing_mode = kwargs.get('audio_routing_mode', None)
        self.targets = kwargs.get('targets', None)


class CallConnectionProperties(msrest.serialization.Model):
    """CallConnectionProperties.

    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    :param source: The source of the call.
    :type source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param alternate_caller_id: The alternate identity of the source of the call if dialing out to
     a pstn number.
    :type alternate_caller_id: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :param targets: The targets of the call.
    :type targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    :param call_connection_state: The state of the call connection. Possible values include:
     "connecting", "connected", "transferring", "transferAccepted", "disconnecting", "disconnected".
    :type call_connection_state: str or
     ~azure.communication.callingserver.models.CallConnectionState
    :param subject: The subject.
    :type subject: str
    :param callback_uri: The callback URI.
    :type callback_uri: str
    :param requested_media_types: The requested modalities.
    :type requested_media_types: list[str or ~azure.communication.callingserver.models.MediaType]
    :param requested_call_events: The requested call events to subscribe to.
    :type requested_call_events: list[str or
     ~azure.communication.callingserver.models.EventSubscriptionType]
    :param call_locator: The locator used for joining or taking action on a call.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
        'call_connection_state': {'key': 'callConnectionState', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CallConnectionProperties, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)
        self.source = kwargs.get('source', None)
        self.alternate_caller_id = kwargs.get('alternate_caller_id', None)
        self.targets = kwargs.get('targets', None)
        self.call_connection_state = kwargs.get('call_connection_state', None)
        self.subject = kwargs.get('subject', None)
        self.callback_uri = kwargs.get('callback_uri', None)
        self.requested_media_types = kwargs.get('requested_media_types', None)
        self.requested_call_events = kwargs.get('requested_call_events', None)
        self.call_locator = kwargs.get('call_locator', None)


class CallConnectionStateChangedEvent(msrest.serialization.Model):
    """The call connection state changed event.

    All required parameters must be populated in order to send to Azure.

    :param server_call_id: The server call.id.
    :type server_call_id: str
    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    :param call_connection_state: Required. The state of the call connection. Possible values
     include: "connecting", "connected", "transferring", "transferAccepted", "disconnecting",
     "disconnected".
    :type call_connection_state: str or
     ~azure.communication.callingserver.models.CallConnectionState
    """

    _validation = {
        'call_connection_state': {'required': True},
    }

    _attribute_map = {
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'call_connection_state': {'key': 'callConnectionState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CallConnectionStateChangedEvent, self).__init__(**kwargs)
        self.server_call_id = kwargs.get('server_call_id', None)
        self.call_connection_id = kwargs.get('call_connection_id', None)
        self.call_connection_state = kwargs['call_connection_state']


class CallLocatorModel(msrest.serialization.Model):
    """The locator used for joining or taking action on a call.

    :param group_call_id: The group call id.
    :type group_call_id: str
    :param server_call_id: The server call id.
    :type server_call_id: str
    :param kind: The call locator kind. Possible values include: "groupCallLocator",
     "serverCallLocator".
    :type kind: str or ~azure.communication.callingserver.models.CallLocatorKindModel
    """

    _attribute_map = {
        'group_call_id': {'key': 'groupCallId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CallLocatorModel, self).__init__(**kwargs)
        self.group_call_id = kwargs.get('group_call_id', None)
        self.server_call_id = kwargs.get('server_call_id', None)
        self.kind = kwargs.get('kind', None)


class CallParticipant(msrest.serialization.Model):
    """A participant in a call.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. Communication identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param participant_id: Participant id.
    :type participant_id: str
    :param is_muted: Required. Is participant muted.
    :type is_muted: bool
    """

    _validation = {
        'identifier': {'required': True},
        'is_muted': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'participant_id': {'key': 'participantId', 'type': 'str'},
        'is_muted': {'key': 'isMuted', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CallParticipant, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.participant_id = kwargs.get('participant_id', None)
        self.is_muted = kwargs['is_muted']


class CallRecordingProperties(msrest.serialization.Model):
    """The response payload of get call recording properties operation.

    All required parameters must be populated in order to send to Azure.

    :param recording_state: Required. The state of the recording. Possible values include:
     "active", "inactive".
    :type recording_state: str or ~azure.communication.callingserver.models.CallRecordingState
    """

    _validation = {
        'recording_state': {'required': True},
    }

    _attribute_map = {
        'recording_state': {'key': 'recordingState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CallRecordingProperties, self).__init__(**kwargs)
        self.recording_state = kwargs['recording_state']


class CallRecordingStateChangeEvent(msrest.serialization.Model):
    """The call recording state change event.

    All required parameters must be populated in order to send to Azure.

    :param recording_id: The call recording id.
    :type recording_id: str
    :param state: Required. The state of the recording. Possible values include: "active",
     "inactive".
    :type state: str or ~azure.communication.callingserver.models.CallRecordingState
    :param start_date_time: Required. The time of the recording started.
    :type start_date_time: ~datetime.datetime
    :param server_call_id: The server call.id.
    :type server_call_id: str
    """

    _validation = {
        'state': {'required': True},
        'start_date_time': {'required': True},
    }

    _attribute_map = {
        'recording_id': {'key': 'recordingId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CallRecordingStateChangeEvent, self).__init__(**kwargs)
        self.recording_id = kwargs.get('recording_id', None)
        self.state = kwargs['state']
        self.start_date_time = kwargs['start_date_time']
        self.server_call_id = kwargs.get('server_call_id', None)


class CancelAllMediaOperationsRequest(msrest.serialization.Model):
    """The request payload for cancel all media operations.

    :param operation_context: The context for this operation.
    :type operation_context: str
    """

    _attribute_map = {
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CancelAllMediaOperationsRequest, self).__init__(**kwargs)
        self.operation_context = kwargs.get('operation_context', None)


class CancelAllMediaOperationsResult(msrest.serialization.Model):
    """The response payload of the cancel all media operations.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: The operation id.
    :type operation_id: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    :param operation_context: The operation context provided by client.
    :type operation_context: str
    :param result_info: The result info for the operation.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CancelAllMediaOperationsResult, self).__init__(**kwargs)
        self.operation_id = kwargs.get('operation_id', None)
        self.status = kwargs['status']
        self.operation_context = kwargs.get('operation_context', None)
        self.result_info = kwargs.get('result_info', None)


class CancelMediaOperationRequest(msrest.serialization.Model):
    """The request payload for stopping a media operation for a participant.

    All required parameters must be populated in order to send to Azure.

    :param media_operation_id: Required. The operationId of the media operation to cancel.
    :type media_operation_id: str
    """

    _validation = {
        'media_operation_id': {'required': True},
    }

    _attribute_map = {
        'media_operation_id': {'key': 'mediaOperationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CancelMediaOperationRequest, self).__init__(**kwargs)
        self.media_operation_id = kwargs['media_operation_id']


class CancelMediaOperationWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for stopping a media operation for a participant with call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param cancel_media_operation_request: Required. The request payload for stopping a media
     operation.
    :type cancel_media_operation_request:
     ~azure.communication.callingserver.models.CancelMediaOperationRequest
    """

    _validation = {
        'call_locator': {'required': True},
        'cancel_media_operation_request': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'cancel_media_operation_request': {'key': 'cancelMediaOperationRequest', 'type': 'CancelMediaOperationRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CancelMediaOperationWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.cancel_media_operation_request = kwargs['cancel_media_operation_request']


class CancelParticipantMediaOperationRequest(msrest.serialization.Model):
    """The request payload for stopping a media operation for a participant.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param media_operation_id: Required. The operationId of the media operation to cancel.
    :type media_operation_id: str
    """

    _validation = {
        'identifier': {'required': True},
        'media_operation_id': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'media_operation_id': {'key': 'mediaOperationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CancelParticipantMediaOperationRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.media_operation_id = kwargs['media_operation_id']


class CancelParticipantMediaOperationWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for stopping a media operation for a participant with call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param cancel_participant_media_operation_request: Required. The request payload for stopping a
     media operation.
    :type cancel_participant_media_operation_request:
     ~azure.communication.callingserver.models.CancelParticipantMediaOperationRequest
    """

    _validation = {
        'call_locator': {'required': True},
        'cancel_participant_media_operation_request': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'cancel_participant_media_operation_request': {'key': 'cancelParticipantMediaOperationRequest', 'type': 'CancelParticipantMediaOperationRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CancelParticipantMediaOperationWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.cancel_participant_media_operation_request = kwargs['cancel_participant_media_operation_request']


class CommunicationError(msrest.serialization.Model):
    """The Communication Services error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The error code.
    :type code: str
    :param message: Required. The error message.
    :type message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Further details about specific errors that led to this error.
    :vartype details: list[~azure.communication.callingserver.models.CommunicationError]
    :ivar inner_error: The inner error if any.
    :vartype inner_error: ~azure.communication.callingserver.models.CommunicationError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CommunicationError]'},
        'inner_error': {'key': 'innererror', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationError, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = None
        self.details = None
        self.inner_error = None


class CommunicationErrorResponse(msrest.serialization.Model):
    """The Communication Services error.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The Communication Services error.
    :type error: ~azure.communication.callingserver.models.CommunicationError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationErrorResponse, self).__init__(**kwargs)
        self.error = kwargs['error']


class CommunicationIdentifierModel(msrest.serialization.Model):
    """Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set.

    :param raw_id: Raw Id of the identifier. Optional in requests, required in responses.
    :type raw_id: str
    :param communication_user: The communication user.
    :type communication_user:
     ~azure.communication.callingserver.models.CommunicationUserIdentifierModel
    :param phone_number: The phone number.
    :type phone_number: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :param microsoft_teams_user: The Microsoft Teams user.
    :type microsoft_teams_user:
     ~azure.communication.callingserver.models.MicrosoftTeamsUserIdentifierModel
    """

    _attribute_map = {
        'raw_id': {'key': 'rawId', 'type': 'str'},
        'communication_user': {'key': 'communicationUser', 'type': 'CommunicationUserIdentifierModel'},
        'phone_number': {'key': 'phoneNumber', 'type': 'PhoneNumberIdentifierModel'},
        'microsoft_teams_user': {'key': 'microsoftTeamsUser', 'type': 'MicrosoftTeamsUserIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationIdentifierModel, self).__init__(**kwargs)
        self.raw_id = kwargs.get('raw_id', None)
        self.communication_user = kwargs.get('communication_user', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.microsoft_teams_user = kwargs.get('microsoft_teams_user', None)


class CommunicationUserIdentifierModel(msrest.serialization.Model):
    """A user that got created with an Azure Communication Services resource.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The Id of the communication user.
    :type id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CommunicationUserIdentifierModel, self).__init__(**kwargs)
        self.id = kwargs['id']


class CreateCallRequest(msrest.serialization.Model):
    """The request payload for create call.

    All required parameters must be populated in order to send to Azure.

    :param alternate_caller_id: The alternate identity of the source of the call if dialing out to
     a pstn number.
    :type alternate_caller_id: ~azure.communication.callingserver.models.PhoneNumberIdentifierModel
    :param targets: Required. The targets of the call.
    :type targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    :param source: Required. The source of the call.
    :type source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param subject: The subject.
    :type subject: str
    :param callback_uri: Required. The callback URI.
    :type callback_uri: str
    :param requested_media_types: The requested modalities.
    :type requested_media_types: list[str or ~azure.communication.callingserver.models.MediaType]
    :param requested_call_events: The requested call events to subscribe to.
    :type requested_call_events: list[str or
     ~azure.communication.callingserver.models.EventSubscriptionType]
    """

    _validation = {
        'targets': {'required': True},
        'source': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'alternate_caller_id': {'key': 'alternateCallerId', 'type': 'PhoneNumberIdentifierModel'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CreateCallRequest, self).__init__(**kwargs)
        self.alternate_caller_id = kwargs.get('alternate_caller_id', None)
        self.targets = kwargs['targets']
        self.source = kwargs['source']
        self.subject = kwargs.get('subject', None)
        self.callback_uri = kwargs['callback_uri']
        self.requested_media_types = kwargs.get('requested_media_types', None)
        self.requested_call_events = kwargs.get('requested_call_events', None)


class CreateCallResult(msrest.serialization.Model):
    """The response payload of the create call operation.

    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CreateCallResult, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)


class GetAllParticipantsWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for get all participants.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    """

    _validation = {
        'call_locator': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GetAllParticipantsWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']


class GetParticipantRequest(msrest.serialization.Model):
    """The get participant by identifier request.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GetParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class GetParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The get participant by identifier request using call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param get_participant_request: Required. The get participant by identifier request.
    :type get_participant_request: ~azure.communication.callingserver.models.GetParticipantRequest
    """

    _validation = {
        'call_locator': {'required': True},
        'get_participant_request': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'get_participant_request': {'key': 'getParticipantRequest', 'type': 'GetParticipantRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GetParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.get_participant_request = kwargs['get_participant_request']


class HoldMeetingAudioRequest(msrest.serialization.Model):
    """The request payload for holding meeting audio for a participant.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HoldMeetingAudioRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class HoldMeetingAudioWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for holding meeting audio for a participant.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'call_locator': {'required': True},
        'identifier': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HoldMeetingAudioWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.identifier = kwargs['identifier']


class JoinCallRequest(msrest.serialization.Model):
    """The request payload for join call.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param source: Required. The source of the call.
    :type source: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param subject: The subject.
    :type subject: str
    :param callback_uri: Required. The callback URI.
    :type callback_uri: str
    :param requested_media_types: The requested modalities.
    :type requested_media_types: list[str or ~azure.communication.callingserver.models.MediaType]
    :param requested_call_events: The requested call events to subscribe to.
    :type requested_call_events: list[str or
     ~azure.communication.callingserver.models.EventSubscriptionType]
    """

    _validation = {
        'source': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'subject': {'key': 'subject', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'requested_media_types': {'key': 'requestedMediaTypes', 'type': '[str]'},
        'requested_call_events': {'key': 'requestedCallEvents', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JoinCallRequest, self).__init__(**kwargs)
        self.call_locator = kwargs.get('call_locator', None)
        self.source = kwargs['source']
        self.subject = kwargs.get('subject', None)
        self.callback_uri = kwargs['callback_uri']
        self.requested_media_types = kwargs.get('requested_media_types', None)
        self.requested_call_events = kwargs.get('requested_call_events', None)


class JoinCallResult(msrest.serialization.Model):
    """The response payload of the join call operation.

    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JoinCallResult, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)


class MicrosoftTeamsUserIdentifierModel(msrest.serialization.Model):
    """A Microsoft Teams user.

    All required parameters must be populated in order to send to Azure.

    :param user_id: Required. The Id of the Microsoft Teams user. If not anonymous, this is the AAD
     object Id of the user.
    :type user_id: str
    :param is_anonymous: True if the Microsoft Teams user is anonymous. By default false if
     missing.
    :type is_anonymous: bool
    :param cloud: The cloud that the Microsoft Teams user belongs to. By default 'public' if
     missing. Possible values include: "public", "dod", "gcch".
    :type cloud: str or
     ~azure.communication.callingserver.models.CommunicationCloudEnvironmentModel
    """

    _validation = {
        'user_id': {'required': True},
    }

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'is_anonymous': {'key': 'isAnonymous', 'type': 'bool'},
        'cloud': {'key': 'cloud', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MicrosoftTeamsUserIdentifierModel, self).__init__(**kwargs)
        self.user_id = kwargs['user_id']
        self.is_anonymous = kwargs.get('is_anonymous', None)
        self.cloud = kwargs.get('cloud', None)


class MuteParticipantRequest(msrest.serialization.Model):
    """The request payload for muting any participant.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant to be muted in the call.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MuteParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class MuteParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for muting any participant using call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param identifier: Required. The identifier of the participant to be muted in the call.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'call_locator': {'required': True},
        'identifier': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MuteParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.identifier = kwargs['identifier']


class ParticipantsUpdatedEvent(msrest.serialization.Model):
    """The participant update event.

    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    :param participants: The list of participants.
    :type participants: list[~azure.communication.callingserver.models.CallParticipant]
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'participants': {'key': 'participants', 'type': '[CallParticipant]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ParticipantsUpdatedEvent, self).__init__(**kwargs)
        self.call_connection_id = kwargs.get('call_connection_id', None)
        self.participants = kwargs.get('participants', None)


class PhoneNumberIdentifierModel(msrest.serialization.Model):
    """A phone number.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The phone number in E.164 format.
    :type value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PhoneNumberIdentifierModel, self).__init__(**kwargs)
        self.value = kwargs['value']


class PlayAudioRequest(msrest.serialization.Model):
    """The request payload for playing audio.

    All required parameters must be populated in order to send to Azure.

    :param audio_file_uri: The media resource uri of the play audio request.
     Currently only Wave file (.wav) format audio prompts are supported.
     More specifically, the audio content in the wave file must be mono (single-channel),
     16-bit samples with a 16,000 (16KHz) sampling rate.
    :type audio_file_uri: str
    :param loop: Required. The flag indicating whether audio file needs to be played in loop or
     not.
    :type loop: bool
    :param operation_context: The value to identify context of the operation.
    :type operation_context: str
    :param audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
     resource.
    :type audio_file_id: str
    :param callback_uri: The callback Uri to receive PlayAudio status notifications.
    :type callback_uri: str
    """

    _validation = {
        'loop': {'required': True},
    }

    _attribute_map = {
        'audio_file_uri': {'key': 'audioFileUri', 'type': 'str'},
        'loop': {'key': 'loop', 'type': 'bool'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'audio_file_id': {'key': 'audioFileId', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PlayAudioRequest, self).__init__(**kwargs)
        self.audio_file_uri = kwargs.get('audio_file_uri', None)
        self.loop = kwargs['loop']
        self.operation_context = kwargs.get('operation_context', None)
        self.audio_file_id = kwargs.get('audio_file_id', None)
        self.callback_uri = kwargs.get('callback_uri', None)


class PlayAudioResult(msrest.serialization.Model):
    """The response payload for play audio operation.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: The operation id.
    :type operation_id: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    :param operation_context: The operation context provided by client.
    :type operation_context: str
    :param result_info: The result info for the operation.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PlayAudioResult, self).__init__(**kwargs)
        self.operation_id = kwargs.get('operation_id', None)
        self.status = kwargs['status']
        self.operation_context = kwargs.get('operation_context', None)
        self.result_info = kwargs.get('result_info', None)


class PlayAudioResultEvent(msrest.serialization.Model):
    """The play audio result event.

    All required parameters must be populated in order to send to Azure.

    :param result_info: The result details.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    :param operation_context: The operation context.
    :type operation_context: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PlayAudioResultEvent, self).__init__(**kwargs)
        self.result_info = kwargs.get('result_info', None)
        self.operation_context = kwargs.get('operation_context', None)
        self.status = kwargs['status']


class PlayAudioToParticipantRequest(msrest.serialization.Model):
    """The request payload for playing audio to participant.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant to play audio to.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param audio_file_uri: The media resource uri of the play audio request.
     Currently only Wave file (.wav) format audio prompts are supported.
     More specifically, the audio content in the wave file must be mono (single-channel),
     16-bit samples with a 16,000 (16KHz) sampling rate.
    :type audio_file_uri: str
    :param loop: Required. The flag indicating whether audio file needs to be played in loop or
     not.
    :type loop: bool
    :param operation_context: The value to identify context of the operation.
    :type operation_context: str
    :param audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
     resource.
    :type audio_file_id: str
    :param callback_uri: The callback Uri to receive PlayAudio status notifications.
    :type callback_uri: str
    """

    _validation = {
        'identifier': {'required': True},
        'loop': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'audio_file_uri': {'key': 'audioFileUri', 'type': 'str'},
        'loop': {'key': 'loop', 'type': 'bool'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'audio_file_id': {'key': 'audioFileId', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PlayAudioToParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.audio_file_uri = kwargs.get('audio_file_uri', None)
        self.loop = kwargs['loop']
        self.operation_context = kwargs.get('operation_context', None)
        self.audio_file_id = kwargs.get('audio_file_id', None)
        self.callback_uri = kwargs.get('callback_uri', None)


class PlayAudioToParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for playing audio with call locator to participant.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param play_audio_to_participant_request: The play audio to participant request.
    :type play_audio_to_participant_request:
     ~azure.communication.callingserver.models.PlayAudioToParticipantRequest
    """

    _validation = {
        'call_locator': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'play_audio_to_participant_request': {'key': 'playAudioToParticipantRequest', 'type': 'PlayAudioToParticipantRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PlayAudioToParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.play_audio_to_participant_request = kwargs.get('play_audio_to_participant_request', None)


class PlayAudioWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for playing audio with call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param play_audio_request: Required. The request payload for playing audio.
    :type play_audio_request: ~azure.communication.callingserver.models.PlayAudioRequest
    """

    _validation = {
        'call_locator': {'required': True},
        'play_audio_request': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'play_audio_request': {'key': 'playAudioRequest', 'type': 'PlayAudioRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PlayAudioWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.play_audio_request = kwargs['play_audio_request']


class RedirectCallRequest(msrest.serialization.Model):
    """The request payload for redirecting the call.

    All required parameters must be populated in order to send to Azure.

    :param incoming_call_context: Required. The context associated with the call.
    :type incoming_call_context: str
    :param targets: Required. The target identity to redirect the call to.
    :type targets: list[~azure.communication.callingserver.models.CommunicationIdentifierModel]
    :param callback_url: Required. The callback url.
    :type callback_url: str
    :param timeout: The timeout for the redirect in seconds.
    :type timeout: int
    """

    _validation = {
        'incoming_call_context': {'required': True},
        'targets': {'required': True},
        'callback_url': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
        'callback_url': {'key': 'callbackUrl', 'type': 'str'},
        'timeout': {'key': 'timeout', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RedirectCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = kwargs['incoming_call_context']
        self.targets = kwargs['targets']
        self.callback_url = kwargs['callback_url']
        self.timeout = kwargs.get('timeout', None)


class RejectCallRequest(msrest.serialization.Model):
    """The request payload for rejecting the call.

    All required parameters must be populated in order to send to Azure.

    :param incoming_call_context: Required. The context associated with the call.
    :type incoming_call_context: str
    :param call_reject_reason: The rejection reason. Possible values include: "none", "busy",
     "forbidden".
    :type call_reject_reason: str or ~azure.communication.callingserver.models.CallRejectReason
    :param callback_url: Required. The callback url.
    :type callback_url: str
    """

    _validation = {
        'incoming_call_context': {'required': True},
        'callback_url': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'call_reject_reason': {'key': 'callRejectReason', 'type': 'str'},
        'callback_url': {'key': 'callbackUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RejectCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = kwargs['incoming_call_context']
        self.call_reject_reason = kwargs.get('call_reject_reason', None)
        self.callback_url = kwargs['callback_url']


class RemoveParticipantRequest(msrest.serialization.Model):
    """The remove participant by identifier request.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant to be removed from the call.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RemoveParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class RemoveParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The remove participant by identifier request.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param remove_participant_request: Required. The remove participant by identifier request.
    :type remove_participant_request:
     ~azure.communication.callingserver.models.RemoveParticipantRequest
    """

    _validation = {
        'call_locator': {'required': True},
        'remove_participant_request': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'remove_participant_request': {'key': 'removeParticipantRequest', 'type': 'RemoveParticipantRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RemoveParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.remove_participant_request = kwargs['remove_participant_request']


class ResultInfo(msrest.serialization.Model):
    """Result info class to be used to report result status for actions/operations.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The result code associated with the operation.
    :type code: int
    :param subcode: Required. The subcode that further classifies the result.
     The subcode further classifies a failure. For example.
    :type subcode: int
    :param message: The message is a detail explanation of subcode.
    :type message: str
    """

    _validation = {
        'code': {'required': True},
        'subcode': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'subcode': {'key': 'subcode', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResultInfo, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.subcode = kwargs['subcode']
        self.message = kwargs.get('message', None)


class ResumeMeetingAudioRequest(msrest.serialization.Model):
    """The request payload for resuming meeting audio for a participant.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResumeMeetingAudioRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class ResumeMeetingAudioWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for resuming meeting audio for a participant.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'call_locator': {'required': True},
        'identifier': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResumeMeetingAudioWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.identifier = kwargs['identifier']


class StartCallRecordingRequest(msrest.serialization.Model):
    """The request payload start call recording operation.

    :param recording_state_callback_uri: The uri to send notifications to.
    :type recording_state_callback_uri: str
    :param recording_content_type: Content type of call recording. Possible values include:
     "audio", "audioVideo".
    :type recording_content_type: str or
     ~azure.communication.callingserver.models.RecordingContentType
    :param recording_channel_type: Channel type of call recording. Possible values include:
     "mixed", "unmixed".
    :type recording_channel_type: str or
     ~azure.communication.callingserver.models.RecordingChannelType
    :param recording_format_type: Format type of call recording. Possible values include: "wav",
     "mp3", "mp4".
    :type recording_format_type: str or
     ~azure.communication.callingserver.models.RecordingFormatType
    """

    _attribute_map = {
        'recording_state_callback_uri': {'key': 'recordingStateCallbackUri', 'type': 'str'},
        'recording_content_type': {'key': 'recordingContentType', 'type': 'str'},
        'recording_channel_type': {'key': 'recordingChannelType', 'type': 'str'},
        'recording_format_type': {'key': 'recordingFormatType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StartCallRecordingRequest, self).__init__(**kwargs)
        self.recording_state_callback_uri = kwargs.get('recording_state_callback_uri', None)
        self.recording_content_type = kwargs.get('recording_content_type', None)
        self.recording_channel_type = kwargs.get('recording_channel_type', None)
        self.recording_format_type = kwargs.get('recording_format_type', None)


class StartCallRecordingResult(msrest.serialization.Model):
    """The response payload of start call recording operation.

    :param recording_id: The recording id of the started recording.
    :type recording_id: str
    """

    _attribute_map = {
        'recording_id': {'key': 'recordingId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StartCallRecordingResult, self).__init__(**kwargs)
        self.recording_id = kwargs.get('recording_id', None)


class StartCallRecordingWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload start for call recording operation with call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param start_call_recording_request: Required. The request payload for start call recording
     operation.
    :type start_call_recording_request:
     ~azure.communication.callingserver.models.StartCallRecordingRequest
    """

    _validation = {
        'call_locator': {'required': True},
        'start_call_recording_request': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'start_call_recording_request': {'key': 'startCallRecordingRequest', 'type': 'StartCallRecordingRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StartCallRecordingWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.start_call_recording_request = kwargs['start_call_recording_request']


class StartHoldMusicRequest(msrest.serialization.Model):
    """The request payload for playing hold music for a participant.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param audio_file_uri: The media resource uri of the hold music request.
     Currently only Wave file (.wav) format audio prompts are supported.
     More specifically, the audio content in the wave file must be mono (single-channel),
     16-bit samples with a 16,000 (16KHz) sampling rate.
    :type audio_file_uri: str
    :param audio_file_id: An id for the media in the AudioFileUri, using which we cache the media
     resource.
    :type audio_file_id: str
    :param callback_uri: The callback URI.
    :type callback_uri: str
    :param operation_context: The value to identify context of the operation.
    :type operation_context: str
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'audio_file_uri': {'key': 'audioFileUri', 'type': 'str'},
        'audio_file_id': {'key': 'audioFileId', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StartHoldMusicRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']
        self.audio_file_uri = kwargs.get('audio_file_uri', None)
        self.audio_file_id = kwargs.get('audio_file_id', None)
        self.callback_uri = kwargs.get('callback_uri', None)
        self.operation_context = kwargs.get('operation_context', None)


class StartHoldMusicResult(msrest.serialization.Model):
    """The response payload for start hold music operation.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: The operation id.
    :type operation_id: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    :param operation_context: The operation context provided by client.
    :type operation_context: str
    :param result_info: The result info for the operation.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StartHoldMusicResult, self).__init__(**kwargs)
        self.operation_id = kwargs.get('operation_id', None)
        self.status = kwargs['status']
        self.operation_context = kwargs.get('operation_context', None)
        self.result_info = kwargs.get('result_info', None)


class StartHoldMusicWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for playing hold music for a participant with call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param start_hold_music_request: Required. The request payload for playing hold music for a
     participant.
    :type start_hold_music_request: ~azure.communication.callingserver.models.StartHoldMusicRequest
    """

    _validation = {
        'call_locator': {'required': True},
        'start_hold_music_request': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'start_hold_music_request': {'key': 'startHoldMusicRequest', 'type': 'StartHoldMusicRequest'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StartHoldMusicWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.start_hold_music_request = kwargs['start_hold_music_request']


class StopHoldMusicRequest(msrest.serialization.Model):
    """The request payload for removing participant from hold.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StopHoldMusicRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class StopHoldMusicResult(msrest.serialization.Model):
    """The response payload for start hold music operation.

    All required parameters must be populated in order to send to Azure.

    :param operation_id: The operation id.
    :type operation_id: str
    :param status: Required. The status of the operation. Possible values include: "notStarted",
     "running", "completed", "failed".
    :type status: str or ~azure.communication.callingserver.models.OperationStatus
    :param operation_context: The operation context provided by client.
    :type operation_context: str
    :param result_info: The result info for the operation.
    :type result_info: ~azure.communication.callingserver.models.ResultInfo
    """

    _validation = {
        'status': {'required': True},
    }

    _attribute_map = {
        'operation_id': {'key': 'operationId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_info': {'key': 'resultInfo', 'type': 'ResultInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StopHoldMusicResult, self).__init__(**kwargs)
        self.operation_id = kwargs.get('operation_id', None)
        self.status = kwargs['status']
        self.operation_context = kwargs.get('operation_context', None)
        self.result_info = kwargs.get('result_info', None)


class StopHoldMusicWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for removing participant from hold using call locator.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param identifier: Required. The identifier of the participant.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param start_hold_music_operation_id: Required. The operationId of the StartHoldMusicOperation
     to stop.
    :type start_hold_music_operation_id: str
    """

    _validation = {
        'call_locator': {'required': True},
        'identifier': {'required': True},
        'start_hold_music_operation_id': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'start_hold_music_operation_id': {'key': 'startHoldMusicOperationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StopHoldMusicWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.identifier = kwargs['identifier']
        self.start_hold_music_operation_id = kwargs['start_hold_music_operation_id']


class ToneInfo(msrest.serialization.Model):
    """The information about the tone.

    All required parameters must be populated in order to send to Azure.

    :param sequence_id: Required. The sequence id which can be used to determine if the same tone
     was played multiple times or if any tones were missed.
    :type sequence_id: int
    :param tone: Required. The tone value. Possible values include: "tone0", "tone1", "tone2",
     "tone3", "tone4", "tone5", "tone6", "tone7", "tone8", "tone9", "star", "pound", "a", "b", "c",
     "d", "flash".
    :type tone: str or ~azure.communication.callingserver.models.ToneValue
    """

    _validation = {
        'sequence_id': {'required': True},
        'tone': {'required': True},
    }

    _attribute_map = {
        'sequence_id': {'key': 'sequenceId', 'type': 'int'},
        'tone': {'key': 'tone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ToneInfo, self).__init__(**kwargs)
        self.sequence_id = kwargs['sequence_id']
        self.tone = kwargs['tone']


class ToneReceivedEvent(msrest.serialization.Model):
    """The subscribe to tone event.

    All required parameters must be populated in order to send to Azure.

    :param tone_info: Required. The tone info.
    :type tone_info: ~azure.communication.callingserver.models.ToneInfo
    :param call_connection_id: The call connection id.
    :type call_connection_id: str
    """

    _validation = {
        'tone_info': {'required': True},
    }

    _attribute_map = {
        'tone_info': {'key': 'toneInfo', 'type': 'ToneInfo'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ToneReceivedEvent, self).__init__(**kwargs)
        self.tone_info = kwargs['tone_info']
        self.call_connection_id = kwargs.get('call_connection_id', None)


class TransferCallRequest(msrest.serialization.Model):
    """The transfer call request.

    All required parameters must be populated in order to send to Azure.

    :param target_participant: Required. The identity of the target where call should be transfer
     to.
    :type target_participant:
     ~azure.communication.callingserver.models.CommunicationIdentifierModel
    :param user_to_user_information: The user to user information.
    :type user_to_user_information: str
    """

    _validation = {
        'target_participant': {'required': True},
    }

    _attribute_map = {
        'target_participant': {'key': 'targetParticipant', 'type': 'CommunicationIdentifierModel'},
        'user_to_user_information': {'key': 'userToUserInformation', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TransferCallRequest, self).__init__(**kwargs)
        self.target_participant = kwargs['target_participant']
        self.user_to_user_information = kwargs.get('user_to_user_information', None)


class UnmuteParticipantRequest(msrest.serialization.Model):
    """The request payload for unmuting any participant.

    All required parameters must be populated in order to send to Azure.

    :param identifier: Required. The identifier of the participant to be unmuted in the call.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'identifier': {'required': True},
    }

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UnmuteParticipantRequest, self).__init__(**kwargs)
        self.identifier = kwargs['identifier']


class UnmuteParticipantWithCallLocatorRequest(msrest.serialization.Model):
    """The request payload for unmuting any participant.

    All required parameters must be populated in order to send to Azure.

    :param call_locator: Required. The call locator.
    :type call_locator: ~azure.communication.callingserver.models.CallLocatorModel
    :param identifier: Required. The identifier of the participant to be unmuted in the call.
    :type identifier: ~azure.communication.callingserver.models.CommunicationIdentifierModel
    """

    _validation = {
        'call_locator': {'required': True},
        'identifier': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocatorModel'},
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UnmuteParticipantWithCallLocatorRequest, self).__init__(**kwargs)
        self.call_locator = kwargs['call_locator']
        self.identifier = kwargs['identifier']
