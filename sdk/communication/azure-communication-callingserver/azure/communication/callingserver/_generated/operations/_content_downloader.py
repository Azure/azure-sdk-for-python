# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from urllib.parse import urlparse

from .. import models as _models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]


class ContentDownloader(object):
    """Content Downloader.

       You should not instantiate this class directly. Instead, you should create a Client instance that
        instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.communication.callingserver.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def download_content(
            self,
            content_url,  # type: str
            **kwargs  # type: Any
    ):
        # type: (...) -> "_models.DownloadContentResult"
        """Start download_content.

        :param content_url: The content url
        :return: DownloadContentResult, or the result of cls(response)
        :rtype: ~azure.communication.callingserver.models.DownloadContentResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """

        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            409: ResourceExistsError,
            400: lambda response: HttpResponseError(response=response,
                                                    model=self._deserialize(_models.CommunicationErrorResponse,
                                                                            response)),
            401: lambda response: ClientAuthenticationError(response=response,
                                                            model=self._deserialize(_models.CommunicationErrorResponse,
                                                                                    response)),
            403: lambda response: HttpResponseError(response=response,
                                                    model=self._deserialize(_models.CommunicationErrorResponse,
                                                                            response)),
            404: lambda response: ResourceNotFoundError(response=response,
                                                        model=self._deserialize(_models.CommunicationErrorResponse,
                                                                                response)),
            500: lambda response: HttpResponseError(response=response,
                                                    model=self._deserialize(_models.CommunicationErrorResponse,
                                                                            response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2021-06-15-preview"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        # to remove......
        # url = self.downlaod_content.metadata['url']  # type: ignore
        # to remove......

        url = content_url

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')
        
        uri_to_sign_with = self.get_url_to_sign_request_with(url)
        #host = urlparse(self._config.endpoint).hostname
        print(uri_to_sign_with)
        header_parameters['UriToSignWith'] = self._serialize.header("uri_to_sign_with", uri_to_sign_with, 'str')
        
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('DownloadedContentProperties', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized


    def get_url_to_sign_request_with(self, content_url: str):
        path = urlparse(content_url).path

        return self._config.endpoint + path

        

    #downlaod_content.metadata = {
    #    'url': '/calling/downloadContent/{contentUrl}/'}  # type: ignore
