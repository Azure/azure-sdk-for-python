# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._azure_communication_call_automation_service_enums import *


class AddParticipantFailed(msrest.serialization.Model):
    """The failed to add participants event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar participant: Participant.
    :vartype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        participant: Optional["CommunicationIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword participant: Participant.
        :paramtype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        """
        super(AddParticipantFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.participant = participant


class AddParticipantRequest(msrest.serialization.Model):
    """The request payload for adding participant to the call.

    All required parameters must be populated in order to send to Azure.

    :ivar source_caller_id_number: The source caller Id, a phone number, that's shown to the PSTN
     participant being invited.
     Required only when inviting a PSTN participant.
    :vartype source_caller_id_number:
     ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
    :ivar source_display_name: (Optional) The display name of the source that is associated with
     this invite operation when
     adding a PSTN participant or teams user.  Note: Will not update the display name in the
     roster.
    :vartype source_display_name: str
    :ivar participant_to_add: Required. The participant to invite.
    :vartype participant_to_add:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar invitation_timeout_in_seconds: Gets or sets the timeout to wait for the invited
     participant to pickup.
     The maximum value of this is 180 seconds.
    :vartype invitation_timeout_in_seconds: int
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    :ivar custom_calling_context: Used by customer to send custom calling context to targets.
    :vartype custom_calling_context:
     ~azure.communication.callautomation.models.CustomCallingContext
    """

    _validation = {
        'participant_to_add': {'required': True},
        'invitation_timeout_in_seconds': {'maximum': 180, 'minimum': 0},
    }

    _attribute_map = {
        'source_caller_id_number': {'key': 'sourceCallerIdNumber', 'type': 'PhoneNumberIdentifierModel'},
        'source_display_name': {'key': 'sourceDisplayName', 'type': 'str'},
        'participant_to_add': {'key': 'participantToAdd', 'type': 'CommunicationIdentifierModel'},
        'invitation_timeout_in_seconds': {'key': 'invitationTimeoutInSeconds', 'type': 'int'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
        'custom_calling_context': {'key': 'customCallingContext', 'type': 'CustomCallingContext'},
    }

    def __init__(
        self,
        *,
        participant_to_add: "CommunicationIdentifierModel",
        source_caller_id_number: Optional["PhoneNumberIdentifierModel"] = None,
        source_display_name: Optional[str] = None,
        invitation_timeout_in_seconds: Optional[int] = None,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        custom_calling_context: Optional["CustomCallingContext"] = None,
        **kwargs
    ):
        """
        :keyword source_caller_id_number: The source caller Id, a phone number, that's shown to the
         PSTN participant being invited.
         Required only when inviting a PSTN participant.
        :paramtype source_caller_id_number:
         ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
        :keyword source_display_name: (Optional) The display name of the source that is associated with
         this invite operation when
         adding a PSTN participant or teams user.  Note: Will not update the display name in the
         roster.
        :paramtype source_display_name: str
        :keyword participant_to_add: Required. The participant to invite.
        :paramtype participant_to_add:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword invitation_timeout_in_seconds: Gets or sets the timeout to wait for the invited
         participant to pickup.
         The maximum value of this is 180 seconds.
        :paramtype invitation_timeout_in_seconds: int
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        :keyword custom_calling_context: Used by customer to send custom calling context to targets.
        :paramtype custom_calling_context:
         ~azure.communication.callautomation.models.CustomCallingContext
        """
        super(AddParticipantRequest, self).__init__(**kwargs)
        self.source_caller_id_number = source_caller_id_number
        self.source_display_name = source_display_name
        self.participant_to_add = participant_to_add
        self.invitation_timeout_in_seconds = invitation_timeout_in_seconds
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri
        self.custom_calling_context = custom_calling_context


class AddParticipantResponse(msrest.serialization.Model):
    """The response payload for adding participants to the call.

    :ivar participant: List of current participants in the call.
    :vartype participant: ~azure.communication.callautomation.models.CallParticipant
    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    :ivar invitation_id: Invitation ID used to add a participant.
    :vartype invitation_id: str
    """

    _attribute_map = {
        'participant': {'key': 'participant', 'type': 'CallParticipant'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'invitation_id': {'key': 'invitationId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        participant: Optional["CallParticipant"] = None,
        operation_context: Optional[str] = None,
        invitation_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword participant: List of current participants in the call.
        :paramtype participant: ~azure.communication.callautomation.models.CallParticipant
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        :keyword invitation_id: Invitation ID used to add a participant.
        :paramtype invitation_id: str
        """
        super(AddParticipantResponse, self).__init__(**kwargs)
        self.participant = participant
        self.operation_context = operation_context
        self.invitation_id = invitation_id


class AddParticipantSucceeded(msrest.serialization.Model):
    """The participants successfully added event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar participant: Participant.
    :vartype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        participant: Optional["CommunicationIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword participant: Participant.
        :paramtype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        """
        super(AddParticipantSucceeded, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.participant = participant


class AnswerCallRequest(msrest.serialization.Model):
    """The request payload for answering the call.

    All required parameters must be populated in order to send to Azure.

    :ivar incoming_call_context: Required. The context associated with the call.
    :vartype incoming_call_context: str
    :ivar callback_uri: Required. The callback uri.
    :vartype callback_uri: str
    :ivar custom_calling_context: Used by customer to send custom calling context to targets when
     answering On-Behalf-Of call.
    :vartype custom_calling_context:
     ~azure.communication.callautomation.models.CustomCallingContext
    :ivar operation_context: A customer set value used to track the answering of a call.
    :vartype operation_context: str
    :ivar call_intelligence_options: AI options for the call.
    :vartype call_intelligence_options:
     ~azure.communication.callautomation.models.CallIntelligenceOptions
    :ivar answered_by: The identifier of the call automation entity which answers the call.
    :vartype answered_by:
     ~azure.communication.callautomation.models.CommunicationUserIdentifierModel
    :ivar media_streaming_options: Media Streaming Options.
    :vartype media_streaming_options:
     ~azure.communication.callautomation.models.MediaStreamingOptions
    :ivar transcription_options: Transcription Options.
    :vartype transcription_options: ~azure.communication.callautomation.models.TranscriptionOptions
    """

    _validation = {
        'incoming_call_context': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'custom_calling_context': {'key': 'customCallingContext', 'type': 'CustomCallingContext'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'call_intelligence_options': {'key': 'callIntelligenceOptions', 'type': 'CallIntelligenceOptions'},
        'answered_by': {'key': 'answeredBy', 'type': 'CommunicationUserIdentifierModel'},
        'media_streaming_options': {'key': 'mediaStreamingOptions', 'type': 'MediaStreamingOptions'},
        'transcription_options': {'key': 'transcriptionOptions', 'type': 'TranscriptionOptions'},
    }

    def __init__(
        self,
        *,
        incoming_call_context: str,
        callback_uri: str,
        custom_calling_context: Optional["CustomCallingContext"] = None,
        operation_context: Optional[str] = None,
        call_intelligence_options: Optional["CallIntelligenceOptions"] = None,
        answered_by: Optional["CommunicationUserIdentifierModel"] = None,
        media_streaming_options: Optional["MediaStreamingOptions"] = None,
        transcription_options: Optional["TranscriptionOptions"] = None,
        **kwargs
    ):
        """
        :keyword incoming_call_context: Required. The context associated with the call.
        :paramtype incoming_call_context: str
        :keyword callback_uri: Required. The callback uri.
        :paramtype callback_uri: str
        :keyword custom_calling_context: Used by customer to send custom calling context to targets
         when answering On-Behalf-Of call.
        :paramtype custom_calling_context:
         ~azure.communication.callautomation.models.CustomCallingContext
        :keyword operation_context: A customer set value used to track the answering of a call.
        :paramtype operation_context: str
        :keyword call_intelligence_options: AI options for the call.
        :paramtype call_intelligence_options:
         ~azure.communication.callautomation.models.CallIntelligenceOptions
        :keyword answered_by: The identifier of the call automation entity which answers the call.
        :paramtype answered_by:
         ~azure.communication.callautomation.models.CommunicationUserIdentifierModel
        :keyword media_streaming_options: Media Streaming Options.
        :paramtype media_streaming_options:
         ~azure.communication.callautomation.models.MediaStreamingOptions
        :keyword transcription_options: Transcription Options.
        :paramtype transcription_options:
         ~azure.communication.callautomation.models.TranscriptionOptions
        """
        super(AnswerCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = incoming_call_context
        self.callback_uri = callback_uri
        self.custom_calling_context = custom_calling_context
        self.operation_context = operation_context
        self.call_intelligence_options = call_intelligence_options
        self.answered_by = answered_by
        self.media_streaming_options = media_streaming_options
        self.transcription_options = transcription_options


class AnswerFailed(msrest.serialization.Model):
    """The failed to answer call event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(AnswerFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class BaseDialog(msrest.serialization.Model):
    """BaseDialog.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureOpenAIDialog, PowerVirtualAgentsDialog.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Determines the type of the dialog.Constant filled by server. Possible
     values include: "powerVirtualAgents", "azureOpenAI".
    :vartype kind: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar context: Required. Dialog context.
    :vartype context: dict[str, any]
    """

    _validation = {
        'kind': {'required': True},
        'context': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'context': {'key': 'context', 'type': '{object}'},
    }

    _subtype_map = {
        'kind': {'azureOpenAI': 'AzureOpenAIDialog', 'powerVirtualAgents': 'PowerVirtualAgentsDialog'}
    }

    def __init__(
        self,
        *,
        context: Dict[str, Any],
        **kwargs
    ):
        """
        :keyword context: Required. Dialog context.
        :paramtype context: dict[str, any]
        """
        super(BaseDialog, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.context = context


class AzureOpenAIDialog(BaseDialog):
    """Azure Open AI Dialog.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Determines the type of the dialog.Constant filled by server. Possible
     values include: "powerVirtualAgents", "azureOpenAI".
    :vartype kind: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar context: Required. Dialog context.
    :vartype context: dict[str, any]
    """

    _validation = {
        'kind': {'required': True},
        'context': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'context': {'key': 'context', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        context: Dict[str, Any],
        **kwargs
    ):
        """
        :keyword context: Required. Dialog context.
        :paramtype context: dict[str, any]
        """
        super(AzureOpenAIDialog, self).__init__(context=context, **kwargs)
        self.kind = 'azureOpenAI'  # type: str


class DialogUpdateBase(msrest.serialization.Model):
    """DialogUpdateBase.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureOpenAIDialogUpdate.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Determines the type of the dialog.Constant filled by server. Possible
     values include: "powerVirtualAgents", "azureOpenAI".
    :vartype kind: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar context: Dialog context.
    :vartype context: dict[str, any]
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'context': {'key': 'context', 'type': '{object}'},
    }

    _subtype_map = {
        'kind': {'azureOpenAI': 'AzureOpenAIDialogUpdate'}
    }

    def __init__(
        self,
        *,
        context: Optional[Dict[str, Any]] = None,
        **kwargs
    ):
        """
        :keyword context: Dialog context.
        :paramtype context: dict[str, any]
        """
        super(DialogUpdateBase, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.context = context


class AzureOpenAIDialogUpdate(DialogUpdateBase):
    """Azure Open AI Dialog for UpdateDialog API Call.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Determines the type of the dialog.Constant filled by server. Possible
     values include: "powerVirtualAgents", "azureOpenAI".
    :vartype kind: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar context: Dialog context.
    :vartype context: dict[str, any]
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'context': {'key': 'context', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        context: Optional[Dict[str, Any]] = None,
        **kwargs
    ):
        """
        :keyword context: Dialog context.
        :paramtype context: dict[str, any]
        """
        super(AzureOpenAIDialogUpdate, self).__init__(context=context, **kwargs)
        self.kind = 'azureOpenAI'  # type: str


class CallConnected(msrest.serialization.Model):
    """The call connected event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(CallConnected, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class CallConnectionProperties(msrest.serialization.Model):
    """Properties of a call connection.

    :ivar call_connection_id: The call connection id.
    :vartype call_connection_id: str
    :ivar server_call_id: The server call id.
    :vartype server_call_id: str
    :ivar targets: The targets of the call.
    :vartype targets: list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
    :ivar call_connection_state: The state of the call connection. Possible values include:
     "unknown", "connecting", "connected", "transferring", "transferAccepted", "disconnecting",
     "disconnected".
    :vartype call_connection_state: str or
     ~azure.communication.callautomation.models.CallConnectionState
    :ivar callback_uri: The callback URI.
    :vartype callback_uri: str
    :ivar source_caller_id_number: The source caller Id, a phone number, that's shown to the PSTN
     participant being invited.
     Required only when calling a PSTN callee.
    :vartype source_caller_id_number:
     ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
    :ivar source_display_name: Display name of the call if dialing out to a pstn number.
    :vartype source_display_name: str
    :ivar source: Source identity.
    :vartype source: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar correlation_id: The correlation ID.
    :vartype correlation_id: str
    :ivar answered_by: Identity of the answering entity. Only populated when identity is provided
     in the request.
    :vartype answered_by:
     ~azure.communication.callautomation.models.CommunicationUserIdentifierModel
    :ivar media_subscription_id: SubscriptionId for media streaming.
    :vartype media_subscription_id: str
    :ivar data_subscription_id: SubscriptionId for transcription.
    :vartype data_subscription_id: str
    :ivar media_streaming_subscription: The state of media streaming subscription for the call.
    :vartype media_streaming_subscription:
     ~azure.communication.callautomation.models.MediaStreamingSubscription
    :ivar transcription_subscription: Transcription Subscription.
    :vartype transcription_subscription:
     ~azure.communication.callautomation.models.TranscriptionSubscription
    :ivar answered_for: Identity of the original Pstn target of an incoming Call. Only populated
     when the original target is a Pstn number.
    :vartype answered_for: ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
        'call_connection_state': {'key': 'callConnectionState', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'source_caller_id_number': {'key': 'sourceCallerIdNumber', 'type': 'PhoneNumberIdentifierModel'},
        'source_display_name': {'key': 'sourceDisplayName', 'type': 'str'},
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'answered_by': {'key': 'answeredBy', 'type': 'CommunicationUserIdentifierModel'},
        'media_subscription_id': {'key': 'mediaSubscriptionId', 'type': 'str'},
        'data_subscription_id': {'key': 'dataSubscriptionId', 'type': 'str'},
        'media_streaming_subscription': {'key': 'mediaStreamingSubscription', 'type': 'MediaStreamingSubscription'},
        'transcription_subscription': {'key': 'transcriptionSubscription', 'type': 'TranscriptionSubscription'},
        'answered_for': {'key': 'answeredFor', 'type': 'PhoneNumberIdentifierModel'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        targets: Optional[List["CommunicationIdentifierModel"]] = None,
        call_connection_state: Optional[Union[str, "CallConnectionState"]] = None,
        callback_uri: Optional[str] = None,
        source_caller_id_number: Optional["PhoneNumberIdentifierModel"] = None,
        source_display_name: Optional[str] = None,
        source: Optional["CommunicationIdentifierModel"] = None,
        correlation_id: Optional[str] = None,
        answered_by: Optional["CommunicationUserIdentifierModel"] = None,
        media_subscription_id: Optional[str] = None,
        data_subscription_id: Optional[str] = None,
        media_streaming_subscription: Optional["MediaStreamingSubscription"] = None,
        transcription_subscription: Optional["TranscriptionSubscription"] = None,
        answered_for: Optional["PhoneNumberIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: The call connection id.
        :paramtype call_connection_id: str
        :keyword server_call_id: The server call id.
        :paramtype server_call_id: str
        :keyword targets: The targets of the call.
        :paramtype targets:
         list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
        :keyword call_connection_state: The state of the call connection. Possible values include:
         "unknown", "connecting", "connected", "transferring", "transferAccepted", "disconnecting",
         "disconnected".
        :paramtype call_connection_state: str or
         ~azure.communication.callautomation.models.CallConnectionState
        :keyword callback_uri: The callback URI.
        :paramtype callback_uri: str
        :keyword source_caller_id_number: The source caller Id, a phone number, that's shown to the
         PSTN participant being invited.
         Required only when calling a PSTN callee.
        :paramtype source_caller_id_number:
         ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
        :keyword source_display_name: Display name of the call if dialing out to a pstn number.
        :paramtype source_display_name: str
        :keyword source: Source identity.
        :paramtype source: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword correlation_id: The correlation ID.
        :paramtype correlation_id: str
        :keyword answered_by: Identity of the answering entity. Only populated when identity is
         provided in the request.
        :paramtype answered_by:
         ~azure.communication.callautomation.models.CommunicationUserIdentifierModel
        :keyword media_subscription_id: SubscriptionId for media streaming.
        :paramtype media_subscription_id: str
        :keyword data_subscription_id: SubscriptionId for transcription.
        :paramtype data_subscription_id: str
        :keyword media_streaming_subscription: The state of media streaming subscription for the call.
        :paramtype media_streaming_subscription:
         ~azure.communication.callautomation.models.MediaStreamingSubscription
        :keyword transcription_subscription: Transcription Subscription.
        :paramtype transcription_subscription:
         ~azure.communication.callautomation.models.TranscriptionSubscription
        :keyword answered_for: Identity of the original Pstn target of an incoming Call. Only populated
         when the original target is a Pstn number.
        :paramtype answered_for: ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
        """
        super(CallConnectionProperties, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.targets = targets
        self.call_connection_state = call_connection_state
        self.callback_uri = callback_uri
        self.source_caller_id_number = source_caller_id_number
        self.source_display_name = source_display_name
        self.source = source
        self.correlation_id = correlation_id
        self.answered_by = answered_by
        self.media_subscription_id = media_subscription_id
        self.data_subscription_id = data_subscription_id
        self.media_streaming_subscription = media_streaming_subscription
        self.transcription_subscription = transcription_subscription
        self.answered_for = answered_for


class CallDisconnected(msrest.serialization.Model):
    """The call disconnected event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(CallDisconnected, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class CallIntelligenceOptions(msrest.serialization.Model):
    """AI options for the call.

    :ivar cognitive_services_endpoint: The identifier of the Cognitive Service resource assigned to
     this call.
    :vartype cognitive_services_endpoint: str
    :ivar backup_cognitive_services_endpoint: A backup identifier of the Cognitive Service resource
     assigned to this call.
    :vartype backup_cognitive_services_endpoint: str
    """

    _attribute_map = {
        'cognitive_services_endpoint': {'key': 'cognitiveServicesEndpoint', 'type': 'str'},
        'backup_cognitive_services_endpoint': {'key': 'backupCognitiveServicesEndpoint', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        cognitive_services_endpoint: Optional[str] = None,
        backup_cognitive_services_endpoint: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword cognitive_services_endpoint: The identifier of the Cognitive Service resource assigned
         to this call.
        :paramtype cognitive_services_endpoint: str
        :keyword backup_cognitive_services_endpoint: A backup identifier of the Cognitive Service
         resource assigned to this call.
        :paramtype backup_cognitive_services_endpoint: str
        """
        super(CallIntelligenceOptions, self).__init__(**kwargs)
        self.cognitive_services_endpoint = cognitive_services_endpoint
        self.backup_cognitive_services_endpoint = backup_cognitive_services_endpoint


class CallLocator(msrest.serialization.Model):
    """The locator used for joining or taking action on a call.

    :ivar group_call_id: The group call id.
    :vartype group_call_id: str
    :ivar server_call_id: The server call id.
    :vartype server_call_id: str
    :ivar room_id: The Acs room id. (Not supported for Start Recording).
    :vartype room_id: str
    :ivar kind: The call locator kind. Possible values include: "groupCallLocator",
     "serverCallLocator", "roomCallLocator".
    :vartype kind: str or ~azure.communication.callautomation.models.CallLocatorKind
    """

    _attribute_map = {
        'group_call_id': {'key': 'groupCallId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'room_id': {'key': 'roomId', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        group_call_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        room_id: Optional[str] = None,
        kind: Optional[Union[str, "CallLocatorKind"]] = None,
        **kwargs
    ):
        """
        :keyword group_call_id: The group call id.
        :paramtype group_call_id: str
        :keyword server_call_id: The server call id.
        :paramtype server_call_id: str
        :keyword room_id: The Acs room id. (Not supported for Start Recording).
        :paramtype room_id: str
        :keyword kind: The call locator kind. Possible values include: "groupCallLocator",
         "serverCallLocator", "roomCallLocator".
        :paramtype kind: str or ~azure.communication.callautomation.models.CallLocatorKind
        """
        super(CallLocator, self).__init__(**kwargs)
        self.group_call_id = group_call_id
        self.server_call_id = server_call_id
        self.room_id = room_id
        self.kind = kind


class CallParticipant(msrest.serialization.Model):
    """A call participant.

    :ivar identifier: Communication identifier of the participant.
    :vartype identifier: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar is_muted: Is participant muted.
    :vartype is_muted: bool
    :ivar is_on_hold: Is participant on hold.
    :vartype is_on_hold: bool
    """

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'CommunicationIdentifierModel'},
        'is_muted': {'key': 'isMuted', 'type': 'bool'},
        'is_on_hold': {'key': 'isOnHold', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        identifier: Optional["CommunicationIdentifierModel"] = None,
        is_muted: Optional[bool] = None,
        is_on_hold: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword identifier: Communication identifier of the participant.
        :paramtype identifier: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword is_muted: Is participant muted.
        :paramtype is_muted: bool
        :keyword is_on_hold: Is participant on hold.
        :paramtype is_on_hold: bool
        """
        super(CallParticipant, self).__init__(**kwargs)
        self.identifier = identifier
        self.is_muted = is_muted
        self.is_on_hold = is_on_hold


class CallTransferAccepted(msrest.serialization.Model):
    """The call transfer accepted event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar transfer_target: Target who the call is transferred to.
    :vartype transfer_target:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar transferee: the participant who is being transferred away.
    :vartype transferee: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'transfer_target': {'key': 'transferTarget', 'type': 'CommunicationIdentifierModel'},
        'transferee': {'key': 'transferee', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        transfer_target: Optional["CommunicationIdentifierModel"] = None,
        transferee: Optional["CommunicationIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword transfer_target: Target who the call is transferred to.
        :paramtype transfer_target:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword transferee: the participant who is being transferred away.
        :paramtype transferee: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        """
        super(CallTransferAccepted, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.transfer_target = transfer_target
        self.transferee = transferee


class CallTransferFailed(msrest.serialization.Model):
    """The call transfer failed event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(CallTransferFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class CancelAddParticipantFailed(msrest.serialization.Model):
    """Failed cancel add participant event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar invitation_id: Invitation ID used to cancel the request.
    :vartype invitation_id: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'invitation_id': {'key': 'invitationId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        invitation_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword invitation_id: Invitation ID used to cancel the request.
        :paramtype invitation_id: str
        """
        super(CancelAddParticipantFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.invitation_id = invitation_id


class CancelAddParticipantRequest(msrest.serialization.Model):
    """Request payload for cancelling add participant request.

    All required parameters must be populated in order to send to Azure.

    :ivar invitation_id: Required. Invitation ID used to add a participant.
    :vartype invitation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _validation = {
        'invitation_id': {'required': True},
    }

    _attribute_map = {
        'invitation_id': {'key': 'invitationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        invitation_id: str,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword invitation_id: Required. Invitation ID used to add a participant.
        :paramtype invitation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(CancelAddParticipantRequest, self).__init__(**kwargs)
        self.invitation_id = invitation_id
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class CancelAddParticipantResponse(msrest.serialization.Model):
    """Response payload for cancel add participant request.

    :ivar invitation_id: Invitation ID used to cancel the add participant action.
    :vartype invitation_id: str
    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    """

    _attribute_map = {
        'invitation_id': {'key': 'invitationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        invitation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword invitation_id: Invitation ID used to cancel the add participant action.
        :paramtype invitation_id: str
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        """
        super(CancelAddParticipantResponse, self).__init__(**kwargs)
        self.invitation_id = invitation_id
        self.operation_context = operation_context


class CancelAddParticipantSucceeded(msrest.serialization.Model):
    """Successful cancel add participant event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar invitation_id: Invitation ID used to cancel the request.
    :vartype invitation_id: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'invitation_id': {'key': 'invitationId', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        invitation_id: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword invitation_id: Invitation ID used to cancel the request.
        :paramtype invitation_id: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(CancelAddParticipantSucceeded, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.invitation_id = invitation_id
        self.result_information = result_information


class ChannelAffinity(msrest.serialization.Model):
    """Channel affinity for a participant.

    All required parameters must be populated in order to send to Azure.

    :ivar channel: Channel number to which bitstream from a particular participant will be written.
    :vartype channel: int
    :ivar participant: Required. The identifier for the participant whose bitstream will be written
     to the channel
     represented by the channel number.
    :vartype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    """

    _validation = {
        'channel': {'maximum': 4, 'minimum': 0},
        'participant': {'required': True},
    }

    _attribute_map = {
        'channel': {'key': 'channel', 'type': 'int'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        *,
        participant: "CommunicationIdentifierModel",
        channel: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword channel: Channel number to which bitstream from a particular participant will be
         written.
        :paramtype channel: int
        :keyword participant: Required. The identifier for the participant whose bitstream will be
         written to the channel
         represented by the channel number.
        :paramtype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        """
        super(ChannelAffinity, self).__init__(**kwargs)
        self.channel = channel
        self.participant = participant


class Choice(msrest.serialization.Model):
    """Choice.

    All required parameters must be populated in order to send to Azure.

    :ivar label: Required. Identifier for a given choice.
    :vartype label: str
    :ivar phrases: Required. List of phrases to recognize.
    :vartype phrases: list[str]
    :ivar tone: Possible values include: "zero", "one", "two", "three", "four", "five", "six",
     "seven", "eight", "nine", "a", "b", "c", "d", "pound", "asterisk".
    :vartype tone: str or ~azure.communication.callautomation.models.DtmfTone
    """

    _validation = {
        'label': {'required': True},
        'phrases': {'required': True},
    }

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'phrases': {'key': 'phrases', 'type': '[str]'},
        'tone': {'key': 'tone', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        label: str,
        phrases: List[str],
        tone: Optional[Union[str, "DtmfTone"]] = None,
        **kwargs
    ):
        """
        :keyword label: Required. Identifier for a given choice.
        :paramtype label: str
        :keyword phrases: Required. List of phrases to recognize.
        :paramtype phrases: list[str]
        :keyword tone: Possible values include: "zero", "one", "two", "three", "four", "five", "six",
         "seven", "eight", "nine", "a", "b", "c", "d", "pound", "asterisk".
        :paramtype tone: str or ~azure.communication.callautomation.models.DtmfTone
        """
        super(Choice, self).__init__(**kwargs)
        self.label = label
        self.phrases = phrases
        self.tone = tone


class ChoiceResult(msrest.serialization.Model):
    """ChoiceResult.

    :ivar label: Label is the primary identifier for the choice detected.
    :vartype label: str
    :ivar recognized_phrase: Phrases are set to the value if choice is selected via phrase
     detection.
     If Dtmf input is recognized, then Label will be the identifier for the choice detected and
     phrases will be set to null.
    :vartype recognized_phrase: str
    """

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'recognized_phrase': {'key': 'recognizedPhrase', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        label: Optional[str] = None,
        recognized_phrase: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword label: Label is the primary identifier for the choice detected.
        :paramtype label: str
        :keyword recognized_phrase: Phrases are set to the value if choice is selected via phrase
         detection.
         If Dtmf input is recognized, then Label will be the identifier for the choice detected and
         phrases will be set to null.
        :paramtype recognized_phrase: str
        """
        super(ChoiceResult, self).__init__(**kwargs)
        self.label = label
        self.recognized_phrase = recognized_phrase


class CommunicationError(msrest.serialization.Model):
    """The Communication Services error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. The error code.
    :vartype code: str
    :ivar message: Required. The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Further details about specific errors that led to this error.
    :vartype details: list[~azure.communication.callautomation.models.CommunicationError]
    :ivar inner_error: The inner error if any.
    :vartype inner_error: ~azure.communication.callautomation.models.CommunicationError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CommunicationError]'},
        'inner_error': {'key': 'innererror', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        **kwargs
    ):
        """
        :keyword code: Required. The error code.
        :paramtype code: str
        :keyword message: Required. The error message.
        :paramtype message: str
        """
        super(CommunicationError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = None
        self.details = None
        self.inner_error = None


class CommunicationErrorResponse(msrest.serialization.Model):
    """The Communication Services error.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required. The Communication Services error.
    :vartype error: ~azure.communication.callautomation.models.CommunicationError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        *,
        error: "CommunicationError",
        **kwargs
    ):
        """
        :keyword error: Required. The Communication Services error.
        :paramtype error: ~azure.communication.callautomation.models.CommunicationError
        """
        super(CommunicationErrorResponse, self).__init__(**kwargs)
        self.error = error


class CommunicationIdentifierModel(msrest.serialization.Model):
    """Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model is polymorphic: Apart from kind and rawId, at most one further property may be set which must match the kind enum value.

    :ivar kind: The identifier kind. Only required in responses. Possible values include:
     "unknown", "communicationUser", "phoneNumber", "microsoftTeamsUser", "microsoftTeamsApp",
     "teamsExtensionUser".
    :vartype kind: str or
     ~azure.communication.callautomation.models.CommunicationIdentifierModelKind
    :ivar raw_id: Raw Id of the identifier. Optional in requests, required in responses.
    :vartype raw_id: str
    :ivar communication_user: The communication user.
    :vartype communication_user:
     ~azure.communication.callautomation.models.CommunicationUserIdentifierModel
    :ivar phone_number: The phone number.
    :vartype phone_number: ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
    :ivar microsoft_teams_user: The Microsoft Teams user.
    :vartype microsoft_teams_user:
     ~azure.communication.callautomation.models.MicrosoftTeamsUserIdentifierModel
    :ivar microsoft_teams_app: The Microsoft Teams application.
    :vartype microsoft_teams_app:
     ~azure.communication.callautomation.models.MicrosoftTeamsAppIdentifierModel
    :ivar teams_extension_user: The Microsoft Teams Extension user.
    :vartype teams_extension_user:
     ~azure.communication.callautomation.models.TeamsExtensionUserIdentifierModel
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'raw_id': {'key': 'rawId', 'type': 'str'},
        'communication_user': {'key': 'communicationUser', 'type': 'CommunicationUserIdentifierModel'},
        'phone_number': {'key': 'phoneNumber', 'type': 'PhoneNumberIdentifierModel'},
        'microsoft_teams_user': {'key': 'microsoftTeamsUser', 'type': 'MicrosoftTeamsUserIdentifierModel'},
        'microsoft_teams_app': {'key': 'microsoftTeamsApp', 'type': 'MicrosoftTeamsAppIdentifierModel'},
        'teams_extension_user': {'key': 'teamsExtensionUser', 'type': 'TeamsExtensionUserIdentifierModel'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "CommunicationIdentifierModelKind"]] = None,
        raw_id: Optional[str] = None,
        communication_user: Optional["CommunicationUserIdentifierModel"] = None,
        phone_number: Optional["PhoneNumberIdentifierModel"] = None,
        microsoft_teams_user: Optional["MicrosoftTeamsUserIdentifierModel"] = None,
        microsoft_teams_app: Optional["MicrosoftTeamsAppIdentifierModel"] = None,
        teams_extension_user: Optional["TeamsExtensionUserIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword kind: The identifier kind. Only required in responses. Possible values include:
         "unknown", "communicationUser", "phoneNumber", "microsoftTeamsUser", "microsoftTeamsApp",
         "teamsExtensionUser".
        :paramtype kind: str or
         ~azure.communication.callautomation.models.CommunicationIdentifierModelKind
        :keyword raw_id: Raw Id of the identifier. Optional in requests, required in responses.
        :paramtype raw_id: str
        :keyword communication_user: The communication user.
        :paramtype communication_user:
         ~azure.communication.callautomation.models.CommunicationUserIdentifierModel
        :keyword phone_number: The phone number.
        :paramtype phone_number: ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
        :keyword microsoft_teams_user: The Microsoft Teams user.
        :paramtype microsoft_teams_user:
         ~azure.communication.callautomation.models.MicrosoftTeamsUserIdentifierModel
        :keyword microsoft_teams_app: The Microsoft Teams application.
        :paramtype microsoft_teams_app:
         ~azure.communication.callautomation.models.MicrosoftTeamsAppIdentifierModel
        :keyword teams_extension_user: The Microsoft Teams Extension user.
        :paramtype teams_extension_user:
         ~azure.communication.callautomation.models.TeamsExtensionUserIdentifierModel
        """
        super(CommunicationIdentifierModel, self).__init__(**kwargs)
        self.kind = kind
        self.raw_id = raw_id
        self.communication_user = communication_user
        self.phone_number = phone_number
        self.microsoft_teams_user = microsoft_teams_user
        self.microsoft_teams_app = microsoft_teams_app
        self.teams_extension_user = teams_extension_user


class CommunicationUserIdentifierModel(msrest.serialization.Model):
    """A user that got created with an Azure Communication Services resource.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. The Id of the communication user.
    :vartype id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: str,
        **kwargs
    ):
        """
        :keyword id: Required. The Id of the communication user.
        :paramtype id: str
        """
        super(CommunicationUserIdentifierModel, self).__init__(**kwargs)
        self.id = id


class ConnectFailed(msrest.serialization.Model):
    """The ConnectFailed event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(ConnectFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class ConnectRequest(msrest.serialization.Model):
    """The request payload for creating a connection to a CallLocator.

    All required parameters must be populated in order to send to Azure.

    :ivar call_locator: Required. The call locator.
    :vartype call_locator: ~azure.communication.callautomation.models.CallLocator
    :ivar callback_uri: Required. The callback URI.
    :vartype callback_uri: str
    :ivar operation_context: Used by customers to correlate the request to the response event.
    :vartype operation_context: str
    :ivar call_intelligence_options: AI options for the call.
    :vartype call_intelligence_options:
     ~azure.communication.callautomation.models.CallIntelligenceOptions
    :ivar media_streaming_options: Media Streaming Options.
    :vartype media_streaming_options:
     ~azure.communication.callautomation.models.MediaStreamingOptions
    :ivar transcription_options: Transcription Options.
    :vartype transcription_options: ~azure.communication.callautomation.models.TranscriptionOptions
    """

    _validation = {
        'call_locator': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocator'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'call_intelligence_options': {'key': 'callIntelligenceOptions', 'type': 'CallIntelligenceOptions'},
        'media_streaming_options': {'key': 'mediaStreamingOptions', 'type': 'MediaStreamingOptions'},
        'transcription_options': {'key': 'transcriptionOptions', 'type': 'TranscriptionOptions'},
    }

    def __init__(
        self,
        *,
        call_locator: "CallLocator",
        callback_uri: str,
        operation_context: Optional[str] = None,
        call_intelligence_options: Optional["CallIntelligenceOptions"] = None,
        media_streaming_options: Optional["MediaStreamingOptions"] = None,
        transcription_options: Optional["TranscriptionOptions"] = None,
        **kwargs
    ):
        """
        :keyword call_locator: Required. The call locator.
        :paramtype call_locator: ~azure.communication.callautomation.models.CallLocator
        :keyword callback_uri: Required. The callback URI.
        :paramtype callback_uri: str
        :keyword operation_context: Used by customers to correlate the request to the response event.
        :paramtype operation_context: str
        :keyword call_intelligence_options: AI options for the call.
        :paramtype call_intelligence_options:
         ~azure.communication.callautomation.models.CallIntelligenceOptions
        :keyword media_streaming_options: Media Streaming Options.
        :paramtype media_streaming_options:
         ~azure.communication.callautomation.models.MediaStreamingOptions
        :keyword transcription_options: Transcription Options.
        :paramtype transcription_options:
         ~azure.communication.callautomation.models.TranscriptionOptions
        """
        super(ConnectRequest, self).__init__(**kwargs)
        self.call_locator = call_locator
        self.callback_uri = callback_uri
        self.operation_context = operation_context
        self.call_intelligence_options = call_intelligence_options
        self.media_streaming_options = media_streaming_options
        self.transcription_options = transcription_options


class ContinuousDtmfRecognitionRequest(msrest.serialization.Model):
    """ContinuousDtmfRecognitionRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar target_participant: Required. Defines options for recognition.
    :vartype target_participant:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _validation = {
        'target_participant': {'required': True},
    }

    _attribute_map = {
        'target_participant': {'key': 'targetParticipant', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_participant: "CommunicationIdentifierModel",
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword target_participant: Required. Defines options for recognition.
        :paramtype target_participant:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(ContinuousDtmfRecognitionRequest, self).__init__(**kwargs)
        self.target_participant = target_participant
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class ContinuousDtmfRecognitionStopped(msrest.serialization.Model):
    """ContinuousDtmfRecognitionStopped.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(ContinuousDtmfRecognitionStopped, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class ContinuousDtmfRecognitionToneFailed(msrest.serialization.Model):
    """ContinuousDtmfRecognitionToneFailed.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        """
        super(ContinuousDtmfRecognitionToneFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.result_information = result_information
        self.operation_context = operation_context


class ContinuousDtmfRecognitionToneReceived(msrest.serialization.Model):
    """ContinuousDtmfRecognitionToneReceived.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar sequence_id: The sequence id which can be used to determine if the same tone was played
     multiple times or if any tones were missed.
    :vartype sequence_id: int
    :ivar tone: Possible values include: "zero", "one", "two", "three", "four", "five", "six",
     "seven", "eight", "nine", "a", "b", "c", "d", "pound", "asterisk".
    :vartype tone: str or ~azure.communication.callautomation.models.DtmfTone
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'sequence_id': {'readonly': True},
    }

    _attribute_map = {
        'sequence_id': {'key': 'sequenceId', 'type': 'int'},
        'tone': {'key': 'tone', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        tone: Optional[Union[str, "DtmfTone"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword tone: Possible values include: "zero", "one", "two", "three", "four", "five", "six",
         "seven", "eight", "nine", "a", "b", "c", "d", "pound", "asterisk".
        :paramtype tone: str or ~azure.communication.callautomation.models.DtmfTone
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(ContinuousDtmfRecognitionToneReceived, self).__init__(**kwargs)
        self.sequence_id = None
        self.tone = tone
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class CreateCallFailed(msrest.serialization.Model):
    """The create call failed event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(CreateCallFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class CreateCallRequest(msrest.serialization.Model):
    """The request payload for creating the call.

    All required parameters must be populated in order to send to Azure.

    :ivar targets: Required. The targets of the call.
    :vartype targets: list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
    :ivar source_caller_id_number: The source caller Id, a phone number, that's shown to the PSTN
     participant being invited.
     Required only when calling a PSTN callee.
    :vartype source_caller_id_number:
     ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
    :ivar source_display_name: Display name of the call if dialing out to a pstn number.
    :vartype source_display_name: str
    :ivar source: The identifier of the source of the call.
    :vartype source: ~azure.communication.callautomation.models.CommunicationUserIdentifierModel
    :ivar operation_context: A customer set value used to track the answering of a call.
    :vartype operation_context: str
    :ivar callback_uri: Required. The callback URI.
    :vartype callback_uri: str
    :ivar call_intelligence_options: AI options for the call.
    :vartype call_intelligence_options:
     ~azure.communication.callautomation.models.CallIntelligenceOptions
    :ivar teams_app_source: The identifier of the source for creating call with Teams resource
     account ID.
    :vartype teams_app_source:
     ~azure.communication.callautomation.models.MicrosoftTeamsAppIdentifierModel
    :ivar custom_calling_context: Used by customer to send custom calling context to targets.
    :vartype custom_calling_context:
     ~azure.communication.callautomation.models.CustomCallingContext
    :ivar media_streaming_options: Media Streaming Options.
    :vartype media_streaming_options:
     ~azure.communication.callautomation.models.MediaStreamingOptions
    :ivar transcription_options: Transcription Options.
    :vartype transcription_options: ~azure.communication.callautomation.models.TranscriptionOptions
    """

    _validation = {
        'targets': {'required': True},
        'callback_uri': {'required': True},
    }

    _attribute_map = {
        'targets': {'key': 'targets', 'type': '[CommunicationIdentifierModel]'},
        'source_caller_id_number': {'key': 'sourceCallerIdNumber', 'type': 'PhoneNumberIdentifierModel'},
        'source_display_name': {'key': 'sourceDisplayName', 'type': 'str'},
        'source': {'key': 'source', 'type': 'CommunicationUserIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'callback_uri': {'key': 'callbackUri', 'type': 'str'},
        'call_intelligence_options': {'key': 'callIntelligenceOptions', 'type': 'CallIntelligenceOptions'},
        'teams_app_source': {'key': 'teamsAppSource', 'type': 'MicrosoftTeamsAppIdentifierModel'},
        'custom_calling_context': {'key': 'customCallingContext', 'type': 'CustomCallingContext'},
        'media_streaming_options': {'key': 'mediaStreamingOptions', 'type': 'MediaStreamingOptions'},
        'transcription_options': {'key': 'transcriptionOptions', 'type': 'TranscriptionOptions'},
    }

    def __init__(
        self,
        *,
        targets: List["CommunicationIdentifierModel"],
        callback_uri: str,
        source_caller_id_number: Optional["PhoneNumberIdentifierModel"] = None,
        source_display_name: Optional[str] = None,
        source: Optional["CommunicationUserIdentifierModel"] = None,
        operation_context: Optional[str] = None,
        call_intelligence_options: Optional["CallIntelligenceOptions"] = None,
        teams_app_source: Optional["MicrosoftTeamsAppIdentifierModel"] = None,
        custom_calling_context: Optional["CustomCallingContext"] = None,
        media_streaming_options: Optional["MediaStreamingOptions"] = None,
        transcription_options: Optional["TranscriptionOptions"] = None,
        **kwargs
    ):
        """
        :keyword targets: Required. The targets of the call.
        :paramtype targets:
         list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
        :keyword source_caller_id_number: The source caller Id, a phone number, that's shown to the
         PSTN participant being invited.
         Required only when calling a PSTN callee.
        :paramtype source_caller_id_number:
         ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
        :keyword source_display_name: Display name of the call if dialing out to a pstn number.
        :paramtype source_display_name: str
        :keyword source: The identifier of the source of the call.
        :paramtype source: ~azure.communication.callautomation.models.CommunicationUserIdentifierModel
        :keyword operation_context: A customer set value used to track the answering of a call.
        :paramtype operation_context: str
        :keyword callback_uri: Required. The callback URI.
        :paramtype callback_uri: str
        :keyword call_intelligence_options: AI options for the call.
        :paramtype call_intelligence_options:
         ~azure.communication.callautomation.models.CallIntelligenceOptions
        :keyword teams_app_source: The identifier of the source for creating call with Teams resource
         account ID.
        :paramtype teams_app_source:
         ~azure.communication.callautomation.models.MicrosoftTeamsAppIdentifierModel
        :keyword custom_calling_context: Used by customer to send custom calling context to targets.
        :paramtype custom_calling_context:
         ~azure.communication.callautomation.models.CustomCallingContext
        :keyword media_streaming_options: Media Streaming Options.
        :paramtype media_streaming_options:
         ~azure.communication.callautomation.models.MediaStreamingOptions
        :keyword transcription_options: Transcription Options.
        :paramtype transcription_options:
         ~azure.communication.callautomation.models.TranscriptionOptions
        """
        super(CreateCallRequest, self).__init__(**kwargs)
        self.targets = targets
        self.source_caller_id_number = source_caller_id_number
        self.source_display_name = source_display_name
        self.source = source
        self.operation_context = operation_context
        self.callback_uri = callback_uri
        self.call_intelligence_options = call_intelligence_options
        self.teams_app_source = teams_app_source
        self.custom_calling_context = custom_calling_context
        self.media_streaming_options = media_streaming_options
        self.transcription_options = transcription_options


class CustomCallingContext(msrest.serialization.Model):
    """The custom calling context which will be sent to the target.

    :ivar voip_headers: Custom calling context VoiP headers.
    :vartype voip_headers: dict[str, str]
    :ivar sip_headers: Custom calling context SIP headers.
    :vartype sip_headers: dict[str, str]
    :ivar teams_phone_call_details: Custom calling context TeamsPhoneCallDetails.
    :vartype teams_phone_call_details:
     ~azure.communication.callautomation.models.TeamsPhoneCallDetails
    """

    _attribute_map = {
        'voip_headers': {'key': 'voipHeaders', 'type': '{str}'},
        'sip_headers': {'key': 'sipHeaders', 'type': '{str}'},
        'teams_phone_call_details': {'key': 'teamsPhoneCallDetails', 'type': 'TeamsPhoneCallDetails'},
    }

    def __init__(
        self,
        *,
        voip_headers: Optional[Dict[str, str]] = None,
        sip_headers: Optional[Dict[str, str]] = None,
        teams_phone_call_details: Optional["TeamsPhoneCallDetails"] = None,
        **kwargs
    ):
        """
        :keyword voip_headers: Custom calling context VoiP headers.
        :paramtype voip_headers: dict[str, str]
        :keyword sip_headers: Custom calling context SIP headers.
        :paramtype sip_headers: dict[str, str]
        :keyword teams_phone_call_details: Custom calling context TeamsPhoneCallDetails.
        :paramtype teams_phone_call_details:
         ~azure.communication.callautomation.models.TeamsPhoneCallDetails
        """
        super(CustomCallingContext, self).__init__(**kwargs)
        self.voip_headers = voip_headers
        self.sip_headers = sip_headers
        self.teams_phone_call_details = teams_phone_call_details


class DialogCompleted(msrest.serialization.Model):
    """DialogCompleted.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'dialog_id': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogCompleted, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.dialog_id = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DialogConsent(msrest.serialization.Model):
    """DialogConsent.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar user_consent: UserConsent data from the Conversation Conductor.
    :vartype user_consent: ~azure.communication.callautomation.models.UserConsent
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'user_consent': {'readonly': True},
        'dialog_id': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'user_consent': {'key': 'userConsent', 'type': 'UserConsent'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogConsent, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.user_consent = None
        self.dialog_id = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DialogFailed(msrest.serialization.Model):
    """DialogFailed.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'dialog_id': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogFailed, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.dialog_id = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DialogHangup(msrest.serialization.Model):
    """DialogHangup.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar ivr_context: Ivr Context.
    :vartype ivr_context: any
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'dialog_id': {'readonly': True},
        'ivr_context': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'ivr_context': {'key': 'ivrContext', 'type': 'object'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogHangup, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.dialog_id = None
        self.ivr_context = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DialogLanguageChange(msrest.serialization.Model):
    """DialogLanguageChange.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar selected_language: Selected Language.
    :vartype selected_language: str
    :ivar ivr_context: Ivr Context.
    :vartype ivr_context: any
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'dialog_id': {'readonly': True},
        'selected_language': {'readonly': True},
        'ivr_context': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'selected_language': {'key': 'selectedLanguage', 'type': 'str'},
        'ivr_context': {'key': 'ivrContext', 'type': 'object'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogLanguageChange, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.dialog_id = None
        self.selected_language = None
        self.ivr_context = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DialogSensitivityUpdate(msrest.serialization.Model):
    """DialogSensitivityUpdate.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar sensitive_mask: SensitiveMask.
    :vartype sensitive_mask: bool
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'dialog_id': {'readonly': True},
        'sensitive_mask': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'sensitive_mask': {'key': 'sensitiveMask', 'type': 'bool'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogSensitivityUpdate, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.dialog_id = None
        self.sensitive_mask = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DialogStarted(msrest.serialization.Model):
    """DialogStarted.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'dialog_id': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogStarted, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.dialog_id = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DialogStateResponse(msrest.serialization.Model):
    """DialogStateResponse.

    :ivar dialog_id: The dialog ID.
    :vartype dialog_id: str
    :ivar dialog: Defines dialog.
    :vartype dialog: ~azure.communication.callautomation.models.BaseDialog
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    """

    _attribute_map = {
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'dialog': {'key': 'dialog', 'type': 'BaseDialog'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dialog_id: Optional[str] = None,
        dialog: Optional["BaseDialog"] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword dialog_id: The dialog ID.
        :paramtype dialog_id: str
        :keyword dialog: Defines dialog.
        :paramtype dialog: ~azure.communication.callautomation.models.BaseDialog
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        """
        super(DialogStateResponse, self).__init__(**kwargs)
        self.dialog_id = dialog_id
        self.dialog = dialog
        self.operation_context = operation_context


class DialogTransfer(msrest.serialization.Model):
    """DialogTransfer.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar transfer_type: Transfer type.
    :vartype transfer_type: str
    :ivar transfer_destination: Transfer destination.
    :vartype transfer_destination: str
    :ivar ivr_context: IVR context.
    :vartype ivr_context: any
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'dialog_id': {'readonly': True},
        'transfer_type': {'readonly': True},
        'transfer_destination': {'readonly': True},
        'ivr_context': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'transfer_type': {'key': 'transferType', 'type': 'str'},
        'transfer_destination': {'key': 'transferDestination', 'type': 'str'},
        'ivr_context': {'key': 'ivrContext', 'type': 'object'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogTransfer, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.dialog_id = None
        self.transfer_type = None
        self.transfer_destination = None
        self.ivr_context = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DialogUpdated(msrest.serialization.Model):
    """DialogUpdated.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dialog_input_type: Determines the type of the dialog. Possible values include:
     "powerVirtualAgents", "azureOpenAI".
    :vartype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar dialog_id: Dialog ID.
    :vartype dialog_id: str
    :ivar ivr_context: IVR context.
    :vartype ivr_context: any
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'dialog_id': {'readonly': True},
        'ivr_context': {'readonly': True},
    }

    _attribute_map = {
        'dialog_input_type': {'key': 'dialogInputType', 'type': 'str'},
        'dialog_id': {'key': 'dialogId', 'type': 'str'},
        'ivr_context': {'key': 'ivrContext', 'type': 'object'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        dialog_input_type: Optional[Union[str, "DialogInputType"]] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword dialog_input_type: Determines the type of the dialog. Possible values include:
         "powerVirtualAgents", "azureOpenAI".
        :paramtype dialog_input_type: str or ~azure.communication.callautomation.models.DialogInputType
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(DialogUpdated, self).__init__(**kwargs)
        self.dialog_input_type = dialog_input_type
        self.dialog_id = None
        self.ivr_context = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class DtmfOptions(msrest.serialization.Model):
    """Options for DTMF recognition.

    :ivar inter_tone_timeout_in_seconds: Time to wait between DTMF inputs to stop recognizing.
    :vartype inter_tone_timeout_in_seconds: int
    :ivar max_tones_to_collect: Maximum number of DTMF tones to be collected.
    :vartype max_tones_to_collect: int
    :ivar stop_tones: List of tones that will stop recognizing.
    :vartype stop_tones: list[str or ~azure.communication.callautomation.models.DtmfTone]
    """

    _validation = {
        'inter_tone_timeout_in_seconds': {'maximum': 60, 'minimum': 1},
    }

    _attribute_map = {
        'inter_tone_timeout_in_seconds': {'key': 'interToneTimeoutInSeconds', 'type': 'int'},
        'max_tones_to_collect': {'key': 'maxTonesToCollect', 'type': 'int'},
        'stop_tones': {'key': 'stopTones', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        inter_tone_timeout_in_seconds: Optional[int] = None,
        max_tones_to_collect: Optional[int] = None,
        stop_tones: Optional[List[Union[str, "DtmfTone"]]] = None,
        **kwargs
    ):
        """
        :keyword inter_tone_timeout_in_seconds: Time to wait between DTMF inputs to stop recognizing.
        :paramtype inter_tone_timeout_in_seconds: int
        :keyword max_tones_to_collect: Maximum number of DTMF tones to be collected.
        :paramtype max_tones_to_collect: int
        :keyword stop_tones: List of tones that will stop recognizing.
        :paramtype stop_tones: list[str or ~azure.communication.callautomation.models.DtmfTone]
        """
        super(DtmfOptions, self).__init__(**kwargs)
        self.inter_tone_timeout_in_seconds = inter_tone_timeout_in_seconds
        self.max_tones_to_collect = max_tones_to_collect
        self.stop_tones = stop_tones


class DtmfResult(msrest.serialization.Model):
    """DtmfResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tones:
    :vartype tones: list[str or ~azure.communication.callautomation.models.DtmfTone]
    """

    _validation = {
        'tones': {'readonly': True},
    }

    _attribute_map = {
        'tones': {'key': 'tones', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DtmfResult, self).__init__(**kwargs)
        self.tones = None


class Error(msrest.serialization.Model):
    """Error details.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    :ivar inner_error: Inner error details.
    :vartype inner_error: ~azure.communication.callautomation.models.Error
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        inner_error: Optional["Error"] = None,
        **kwargs
    ):
        """
        :keyword code: Error code.
        :paramtype code: str
        :keyword message: Error message.
        :paramtype message: str
        :keyword inner_error: Inner error details.
        :paramtype inner_error: ~azure.communication.callautomation.models.Error
        """
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.inner_error = inner_error


class ExternalStorage(msrest.serialization.Model):
    """ExternalStorage.

    All required parameters must be populated in order to send to Azure.

    :ivar recording_storage_kind: Required. Defines the kind of external storage. Possible values
     include: "AzureCommunicationServices", "AzureBlobStorage".
    :vartype recording_storage_kind: str or
     ~azure.communication.callautomation.models.RecordingStorageKind
    :ivar recording_destination_container_url: Uri of a container or a location within a container.
    :vartype recording_destination_container_url: str
    """

    _validation = {
        'recording_storage_kind': {'required': True},
    }

    _attribute_map = {
        'recording_storage_kind': {'key': 'recordingStorageKind', 'type': 'str'},
        'recording_destination_container_url': {'key': 'recordingDestinationContainerUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        recording_storage_kind: Union[str, "RecordingStorageKind"],
        recording_destination_container_url: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword recording_storage_kind: Required. Defines the kind of external storage. Possible
         values include: "AzureCommunicationServices", "AzureBlobStorage".
        :paramtype recording_storage_kind: str or
         ~azure.communication.callautomation.models.RecordingStorageKind
        :keyword recording_destination_container_url: Uri of a container or a location within a
         container.
        :paramtype recording_destination_container_url: str
        """
        super(ExternalStorage, self).__init__(**kwargs)
        self.recording_storage_kind = recording_storage_kind
        self.recording_destination_container_url = recording_destination_container_url


class FileSource(msrest.serialization.Model):
    """FileSource.

    All required parameters must be populated in order to send to Azure.

    :ivar uri: Required. Uri for the audio file to be played.
    :vartype uri: str
    """

    _validation = {
        'uri': {'required': True},
    }

    _attribute_map = {
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        uri: str,
        **kwargs
    ):
        """
        :keyword uri: Required. Uri for the audio file to be played.
        :paramtype uri: str
        """
        super(FileSource, self).__init__(**kwargs)
        self.uri = uri


class GetParticipantsResponse(msrest.serialization.Model):
    """The response payload for getting participants of the call.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. List of the current participants in the call.
    :vartype value: list[~azure.communication.callautomation.models.CallParticipant]
    :ivar next_link: Continue of the list of participants.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CallParticipant]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["CallParticipant"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. List of the current participants in the call.
        :paramtype value: list[~azure.communication.callautomation.models.CallParticipant]
        :keyword next_link: Continue of the list of participants.
        :paramtype next_link: str
        """
        super(GetParticipantsResponse, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class HoldAudioCompleted(msrest.serialization.Model):
    """Hold Audio Completed event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(HoldAudioCompleted, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class HoldAudioPaused(msrest.serialization.Model):
    """Hold Audio Paused event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(HoldAudioPaused, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class HoldAudioResumed(msrest.serialization.Model):
    """Hold Audio Resumed event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(HoldAudioResumed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class HoldAudioStarted(msrest.serialization.Model):
    """Hold Audio Started event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(HoldAudioStarted, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class HoldFailed(msrest.serialization.Model):
    """Hold Failed event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(HoldFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class HoldRequest(msrest.serialization.Model):
    """The request payload for holding participant from the call.

    All required parameters must be populated in order to send to Azure.

    :ivar target_participant: Required. Participant to be held from the call.
    :vartype target_participant:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar play_source_info: Prompt to play while in hold.
    :vartype play_source_info: ~azure.communication.callautomation.models.PlaySource
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _validation = {
        'target_participant': {'required': True},
    }

    _attribute_map = {
        'target_participant': {'key': 'targetParticipant', 'type': 'CommunicationIdentifierModel'},
        'play_source_info': {'key': 'playSourceInfo', 'type': 'PlaySource'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_participant: "CommunicationIdentifierModel",
        play_source_info: Optional["PlaySource"] = None,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword target_participant: Required. Participant to be held from the call.
        :paramtype target_participant:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword play_source_info: Prompt to play while in hold.
        :paramtype play_source_info: ~azure.communication.callautomation.models.PlaySource
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(HoldRequest, self).__init__(**kwargs)
        self.target_participant = target_participant
        self.play_source_info = play_source_info
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class IncomingCall(msrest.serialization.Model):
    """The incoming call event.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar to: The communication identifier of the target user.
    :vartype to: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar from_property: The communication identifier of the user who initiated the call.
    :vartype from_property: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar caller_display_name: Display name of caller.
    :vartype caller_display_name: str
    :ivar server_call_id: The server call id.
    :vartype server_call_id: str
    :ivar custom_context: Custom Context of Incoming Call.
    :vartype custom_context: ~azure.communication.callautomation.models.CustomCallingContext
    :ivar incoming_call_context: Incoming call context.
    :vartype incoming_call_context: str
    :ivar on_behalf_of_callee: The communication identifier of the user on behalf of whom the call
     is made.
    :vartype on_behalf_of_callee:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    """

    _validation = {
        'to': {'readonly': True},
        'from_property': {'readonly': True},
        'caller_display_name': {'readonly': True},
        'server_call_id': {'readonly': True},
        'custom_context': {'readonly': True},
        'incoming_call_context': {'readonly': True},
        'on_behalf_of_callee': {'readonly': True},
        'correlation_id': {'readonly': True},
    }

    _attribute_map = {
        'to': {'key': 'to', 'type': 'CommunicationIdentifierModel'},
        'from_property': {'key': 'from', 'type': 'CommunicationIdentifierModel'},
        'caller_display_name': {'key': 'callerDisplayName', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'custom_context': {'key': 'customContext', 'type': 'CustomCallingContext'},
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'on_behalf_of_callee': {'key': 'onBehalfOfCallee', 'type': 'CommunicationIdentifierModel'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(IncomingCall, self).__init__(**kwargs)
        self.to = None
        self.from_property = None
        self.caller_display_name = None
        self.server_call_id = None
        self.custom_context = None
        self.incoming_call_context = None
        self.on_behalf_of_callee = None
        self.correlation_id = None


class InterruptAudioAndAnnounceRequest(msrest.serialization.Model):
    """InterruptAudioAndAnnounceRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar play_sources: Required. The source of the audio to be played.
    :vartype play_sources: list[~azure.communication.callautomation.models.PlaySource]
    :ivar play_to: Required. The list of call participants play provided audio to.
     Plays to everyone in the call when not provided.
    :vartype play_to: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    """

    _validation = {
        'play_sources': {'required': True},
        'play_to': {'required': True},
    }

    _attribute_map = {
        'play_sources': {'key': 'playSources', 'type': '[PlaySource]'},
        'play_to': {'key': 'playTo', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        play_sources: List["PlaySource"],
        play_to: "CommunicationIdentifierModel",
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword play_sources: Required. The source of the audio to be played.
        :paramtype play_sources: list[~azure.communication.callautomation.models.PlaySource]
        :keyword play_to: Required. The list of call participants play provided audio to.
         Plays to everyone in the call when not provided.
        :paramtype play_to: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        """
        super(InterruptAudioAndAnnounceRequest, self).__init__(**kwargs)
        self.play_sources = play_sources
        self.play_to = play_to
        self.operation_context = operation_context


class MediaStreamingFailed(msrest.serialization.Model):
    """MediaStreamingFailed.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar media_streaming_update: Defines the result for MediaStreamingUpdate with the current
     status and the details about the status.
    :vartype media_streaming_update:
     ~azure.communication.callautomation.models.MediaStreamingUpdate
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'media_streaming_update': {'readonly': True},
    }

    _attribute_map = {
        'media_streaming_update': {'key': 'mediaStreamingUpdate', 'type': 'MediaStreamingUpdate'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(MediaStreamingFailed, self).__init__(**kwargs)
        self.media_streaming_update = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class MediaStreamingOptions(msrest.serialization.Model):
    """Configuration of Media streaming.

    All required parameters must be populated in order to send to Azure.

    :ivar transport_url: Required. Transport URL for media streaming.
    :vartype transport_url: str
    :ivar transport_type: Required. The type of transport to be used for media streaming, eg.
     Websocket. Possible values include: "websocket".
    :vartype transport_type: str or
     ~azure.communication.callautomation.models.MediaStreamingTransportType
    :ivar content_type: Required. Content type to stream, eg. audio. Possible values include:
     "audio".
    :vartype content_type: str or
     ~azure.communication.callautomation.models.MediaStreamingContentType
    :ivar audio_channel_type: Required. Audio channel type to stream, eg. unmixed audio, mixed
     audio. Possible values include: "mixed", "unmixed".
    :vartype audio_channel_type: str or
     ~azure.communication.callautomation.models.MediaStreamingAudioChannelType
    :ivar start_media_streaming: Determines if the media streaming should be started immediately
     after call is answered or not.
    :vartype start_media_streaming: bool
    :ivar enable_bidirectional: A value indicating whether bidirectional streaming is enabled.
    :vartype enable_bidirectional: bool
    :ivar audio_format: Specifies the audio format used for encoding, including sample rate and
     channel type. Possible values include: "Pcm16KMono", "Pcm24KMono".
    :vartype audio_format: str or ~azure.communication.callautomation.models.AudioFormat
    """

    _validation = {
        'transport_url': {'required': True},
        'transport_type': {'required': True},
        'content_type': {'required': True},
        'audio_channel_type': {'required': True},
    }

    _attribute_map = {
        'transport_url': {'key': 'transportUrl', 'type': 'str'},
        'transport_type': {'key': 'transportType', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'audio_channel_type': {'key': 'audioChannelType', 'type': 'str'},
        'start_media_streaming': {'key': 'startMediaStreaming', 'type': 'bool'},
        'enable_bidirectional': {'key': 'enableBidirectional', 'type': 'bool'},
        'audio_format': {'key': 'audioFormat', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        transport_url: str,
        transport_type: Union[str, "MediaStreamingTransportType"],
        content_type: Union[str, "MediaStreamingContentType"],
        audio_channel_type: Union[str, "MediaStreamingAudioChannelType"],
        start_media_streaming: Optional[bool] = None,
        enable_bidirectional: Optional[bool] = None,
        audio_format: Optional[Union[str, "AudioFormat"]] = None,
        **kwargs
    ):
        """
        :keyword transport_url: Required. Transport URL for media streaming.
        :paramtype transport_url: str
        :keyword transport_type: Required. The type of transport to be used for media streaming, eg.
         Websocket. Possible values include: "websocket".
        :paramtype transport_type: str or
         ~azure.communication.callautomation.models.MediaStreamingTransportType
        :keyword content_type: Required. Content type to stream, eg. audio. Possible values include:
         "audio".
        :paramtype content_type: str or
         ~azure.communication.callautomation.models.MediaStreamingContentType
        :keyword audio_channel_type: Required. Audio channel type to stream, eg. unmixed audio, mixed
         audio. Possible values include: "mixed", "unmixed".
        :paramtype audio_channel_type: str or
         ~azure.communication.callautomation.models.MediaStreamingAudioChannelType
        :keyword start_media_streaming: Determines if the media streaming should be started immediately
         after call is answered or not.
        :paramtype start_media_streaming: bool
        :keyword enable_bidirectional: A value indicating whether bidirectional streaming is enabled.
        :paramtype enable_bidirectional: bool
        :keyword audio_format: Specifies the audio format used for encoding, including sample rate and
         channel type. Possible values include: "Pcm16KMono", "Pcm24KMono".
        :paramtype audio_format: str or ~azure.communication.callautomation.models.AudioFormat
        """
        super(MediaStreamingOptions, self).__init__(**kwargs)
        self.transport_url = transport_url
        self.transport_type = transport_type
        self.content_type = content_type
        self.audio_channel_type = audio_channel_type
        self.start_media_streaming = start_media_streaming
        self.enable_bidirectional = enable_bidirectional
        self.audio_format = audio_format


class MediaStreamingStarted(msrest.serialization.Model):
    """MediaStreamingStarted.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar media_streaming_update: Defines the result for MediaStreamingUpdate with the current
     status and the details about the status.
    :vartype media_streaming_update:
     ~azure.communication.callautomation.models.MediaStreamingUpdate
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'media_streaming_update': {'readonly': True},
    }

    _attribute_map = {
        'media_streaming_update': {'key': 'mediaStreamingUpdate', 'type': 'MediaStreamingUpdate'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(MediaStreamingStarted, self).__init__(**kwargs)
        self.media_streaming_update = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class MediaStreamingStopped(msrest.serialization.Model):
    """MediaStreamingStopped.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar media_streaming_update: Defines the result for MediaStreamingUpdate with the current
     status and the details about the status.
    :vartype media_streaming_update:
     ~azure.communication.callautomation.models.MediaStreamingUpdate
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'media_streaming_update': {'readonly': True},
    }

    _attribute_map = {
        'media_streaming_update': {'key': 'mediaStreamingUpdate', 'type': 'MediaStreamingUpdate'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(MediaStreamingStopped, self).__init__(**kwargs)
        self.media_streaming_update = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class MediaStreamingSubscription(msrest.serialization.Model):
    """Media streaming Subscription Object.

    :ivar id: Subscription Id.
    :vartype id: str
    :ivar state: Media streaming subscription state. Possible values include: "disabled",
     "inactive", "active".
    :vartype state: str or
     ~azure.communication.callautomation.models.MediaStreamingSubscriptionState
    :ivar subscribed_content_types: Subscribed media streaming content types.
    :vartype subscribed_content_types: list[str or
     ~azure.communication.callautomation.models.MediaStreamingContentType]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'subscribed_content_types': {'key': 'subscribedContentTypes', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        state: Optional[Union[str, "MediaStreamingSubscriptionState"]] = None,
        subscribed_content_types: Optional[List[Union[str, "MediaStreamingContentType"]]] = None,
        **kwargs
    ):
        """
        :keyword id: Subscription Id.
        :paramtype id: str
        :keyword state: Media streaming subscription state. Possible values include: "disabled",
         "inactive", "active".
        :paramtype state: str or
         ~azure.communication.callautomation.models.MediaStreamingSubscriptionState
        :keyword subscribed_content_types: Subscribed media streaming content types.
        :paramtype subscribed_content_types: list[str or
         ~azure.communication.callautomation.models.MediaStreamingContentType]
        """
        super(MediaStreamingSubscription, self).__init__(**kwargs)
        self.id = id
        self.state = state
        self.subscribed_content_types = subscribed_content_types


class MediaStreamingUpdate(msrest.serialization.Model):
    """MediaStreamingUpdate.

    :ivar content_type:
    :vartype content_type: str
    :ivar media_streaming_status: Possible values include: "mediaStreamingStarted",
     "mediaStreamingFailed", "mediaStreamingStopped", "unspecifiedError".
    :vartype media_streaming_status: str or
     ~azure.communication.callautomation.models.MediaStreamingStatus
    :ivar media_streaming_status_details: Possible values include: "subscriptionStarted",
     "streamConnectionReestablished", "streamConnectionUnsuccessful", "streamUrlMissing",
     "serviceShutdown", "streamConnectionInterrupted", "speechServicesConnectionError",
     "subscriptionStopped", "unspecifiedError", "authenticationFailure", "badRequest",
     "tooManyRequests", "forbidden", "serviceTimeout", "initialWebSocketConnectionFailed".
    :vartype media_streaming_status_details: str or
     ~azure.communication.callautomation.models.MediaStreamingStatusDetails
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'media_streaming_status': {'key': 'mediaStreamingStatus', 'type': 'str'},
        'media_streaming_status_details': {'key': 'mediaStreamingStatusDetails', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        content_type: Optional[str] = None,
        media_streaming_status: Optional[Union[str, "MediaStreamingStatus"]] = None,
        media_streaming_status_details: Optional[Union[str, "MediaStreamingStatusDetails"]] = None,
        **kwargs
    ):
        """
        :keyword content_type:
        :paramtype content_type: str
        :keyword media_streaming_status: Possible values include: "mediaStreamingStarted",
         "mediaStreamingFailed", "mediaStreamingStopped", "unspecifiedError".
        :paramtype media_streaming_status: str or
         ~azure.communication.callautomation.models.MediaStreamingStatus
        :keyword media_streaming_status_details: Possible values include: "subscriptionStarted",
         "streamConnectionReestablished", "streamConnectionUnsuccessful", "streamUrlMissing",
         "serviceShutdown", "streamConnectionInterrupted", "speechServicesConnectionError",
         "subscriptionStopped", "unspecifiedError", "authenticationFailure", "badRequest",
         "tooManyRequests", "forbidden", "serviceTimeout", "initialWebSocketConnectionFailed".
        :paramtype media_streaming_status_details: str or
         ~azure.communication.callautomation.models.MediaStreamingStatusDetails
        """
        super(MediaStreamingUpdate, self).__init__(**kwargs)
        self.content_type = content_type
        self.media_streaming_status = media_streaming_status
        self.media_streaming_status_details = media_streaming_status_details


class MicrosoftTeamsAppIdentifierModel(msrest.serialization.Model):
    """A Microsoft Teams application.

    All required parameters must be populated in order to send to Azure.

    :ivar app_id: Required. The Id of the Microsoft Teams application.
    :vartype app_id: str
    :ivar cloud: The cloud that the Microsoft Teams application belongs to. By default 'public' if
     missing. Possible values include: "public", "dod", "gcch".
    :vartype cloud: str or
     ~azure.communication.callautomation.models.CommunicationCloudEnvironmentModel
    """

    _validation = {
        'app_id': {'required': True},
    }

    _attribute_map = {
        'app_id': {'key': 'appId', 'type': 'str'},
        'cloud': {'key': 'cloud', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        app_id: str,
        cloud: Optional[Union[str, "CommunicationCloudEnvironmentModel"]] = None,
        **kwargs
    ):
        """
        :keyword app_id: Required. The Id of the Microsoft Teams application.
        :paramtype app_id: str
        :keyword cloud: The cloud that the Microsoft Teams application belongs to. By default 'public'
         if missing. Possible values include: "public", "dod", "gcch".
        :paramtype cloud: str or
         ~azure.communication.callautomation.models.CommunicationCloudEnvironmentModel
        """
        super(MicrosoftTeamsAppIdentifierModel, self).__init__(**kwargs)
        self.app_id = app_id
        self.cloud = cloud


class MicrosoftTeamsUserIdentifierModel(msrest.serialization.Model):
    """A Microsoft Teams user.

    All required parameters must be populated in order to send to Azure.

    :ivar user_id: Required. The Id of the Microsoft Teams user. If not anonymous, this is the
     Entra ID object Id of the user.
    :vartype user_id: str
    :ivar is_anonymous: True if the Microsoft Teams user is anonymous. By default false if missing.
    :vartype is_anonymous: bool
    :ivar cloud: The cloud that the Microsoft Teams user belongs to. By default 'public' if
     missing. Possible values include: "public", "dod", "gcch".
    :vartype cloud: str or
     ~azure.communication.callautomation.models.CommunicationCloudEnvironmentModel
    """

    _validation = {
        'user_id': {'required': True},
    }

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'is_anonymous': {'key': 'isAnonymous', 'type': 'bool'},
        'cloud': {'key': 'cloud', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_id: str,
        is_anonymous: Optional[bool] = None,
        cloud: Optional[Union[str, "CommunicationCloudEnvironmentModel"]] = None,
        **kwargs
    ):
        """
        :keyword user_id: Required. The Id of the Microsoft Teams user. If not anonymous, this is the
         Entra ID object Id of the user.
        :paramtype user_id: str
        :keyword is_anonymous: True if the Microsoft Teams user is anonymous. By default false if
         missing.
        :paramtype is_anonymous: bool
        :keyword cloud: The cloud that the Microsoft Teams user belongs to. By default 'public' if
         missing. Possible values include: "public", "dod", "gcch".
        :paramtype cloud: str or
         ~azure.communication.callautomation.models.CommunicationCloudEnvironmentModel
        """
        super(MicrosoftTeamsUserIdentifierModel, self).__init__(**kwargs)
        self.user_id = user_id
        self.is_anonymous = is_anonymous
        self.cloud = cloud


class MoveParticipantFailed(msrest.serialization.Model):
    """Moving the participant failed event.

    :ivar from_call: The CallConnectionId for the call you want to move the participant from.
    :vartype from_call: str
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar participant: Participant.
    :vartype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    """

    _attribute_map = {
        'from_call': {'key': 'fromCall', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        *,
        from_call: Optional[str] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        participant: Optional["CommunicationIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword from_call: The CallConnectionId for the call you want to move the participant from.
        :paramtype from_call: str
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword participant: Participant.
        :paramtype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        """
        super(MoveParticipantFailed, self).__init__(**kwargs)
        self.from_call = from_call
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.participant = participant


class MoveParticipantsRequest(msrest.serialization.Model):
    """The request payload for moving participant to the call.

    All required parameters must be populated in order to send to Azure.

    :ivar target_participants: Required. The participant to Move.
    :vartype target_participants:
     list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    :ivar from_call: Required. The CallConnectionId for the call you want to move the participant
     from.
    :vartype from_call: str
    """

    _validation = {
        'target_participants': {'required': True},
        'from_call': {'required': True},
    }

    _attribute_map = {
        'target_participants': {'key': 'targetParticipants', 'type': '[CommunicationIdentifierModel]'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
        'from_call': {'key': 'fromCall', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_participants: List["CommunicationIdentifierModel"],
        from_call: str,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword target_participants: Required. The participant to Move.
        :paramtype target_participants:
         list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        :keyword from_call: Required. The CallConnectionId for the call you want to move the
         participant from.
        :paramtype from_call: str
        """
        super(MoveParticipantsRequest, self).__init__(**kwargs)
        self.target_participants = target_participants
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri
        self.from_call = from_call


class MoveParticipantsResponse(msrest.serialization.Model):
    """The response payload for moving participants to the call.

    :ivar participants: List of current participants in the call.
    :vartype participants: list[~azure.communication.callautomation.models.CallParticipant]
    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    :ivar from_call: The CallConnectionId for the call you want to move the participant from.
    :vartype from_call: str
    """

    _attribute_map = {
        'participants': {'key': 'participants', 'type': '[CallParticipant]'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'from_call': {'key': 'fromCall', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        participants: Optional[List["CallParticipant"]] = None,
        operation_context: Optional[str] = None,
        from_call: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword participants: List of current participants in the call.
        :paramtype participants: list[~azure.communication.callautomation.models.CallParticipant]
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        :keyword from_call: The CallConnectionId for the call you want to move the participant from.
        :paramtype from_call: str
        """
        super(MoveParticipantsResponse, self).__init__(**kwargs)
        self.participants = participants
        self.operation_context = operation_context
        self.from_call = from_call


class MoveParticipantSucceeded(msrest.serialization.Model):
    """Moving the participant successfully event.

    :ivar from_call: The CallConnectionId for the call you want to move the participant from.
    :vartype from_call: str
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar participant: Participant.
    :vartype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    """

    _attribute_map = {
        'from_call': {'key': 'fromCall', 'type': 'str'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        *,
        from_call: Optional[str] = None,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        participant: Optional["CommunicationIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword from_call: The CallConnectionId for the call you want to move the participant from.
        :paramtype from_call: str
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword participant: Participant.
        :paramtype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        """
        super(MoveParticipantSucceeded, self).__init__(**kwargs)
        self.from_call = from_call
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.participant = participant


class MuteParticipantsRequest(msrest.serialization.Model):
    """The request payload for muting participants from the call.

    All required parameters must be populated in order to send to Azure.

    :ivar target_participants: Required. Participants to be muted from the call.
     Only ACS Users are supported.
    :vartype target_participants:
     list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    """

    _validation = {
        'target_participants': {'required': True},
    }

    _attribute_map = {
        'target_participants': {'key': 'targetParticipants', 'type': '[CommunicationIdentifierModel]'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_participants: List["CommunicationIdentifierModel"],
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword target_participants: Required. Participants to be muted from the call.
         Only ACS Users are supported.
        :paramtype target_participants:
         list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        """
        super(MuteParticipantsRequest, self).__init__(**kwargs)
        self.target_participants = target_participants
        self.operation_context = operation_context


class MuteParticipantsResult(msrest.serialization.Model):
    """The result payload for muting participants from the call.

    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    """

    _attribute_map = {
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        """
        super(MuteParticipantsResult, self).__init__(**kwargs)
        self.operation_context = operation_context


class ParticipantsUpdated(msrest.serialization.Model):
    """The participants updated in a call event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar sequence_number: The Sequence Number of the event.
    :vartype sequence_number: int
    :ivar participants: The list of participants in the call.
    :vartype participants: list[~azure.communication.callautomation.models.CallParticipant]
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'sequence_number': {'key': 'sequenceNumber', 'type': 'int'},
        'participants': {'key': 'participants', 'type': '[CallParticipant]'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        sequence_number: Optional[int] = None,
        participants: Optional[List["CallParticipant"]] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword sequence_number: The Sequence Number of the event.
        :paramtype sequence_number: int
        :keyword participants: The list of participants in the call.
        :paramtype participants: list[~azure.communication.callautomation.models.CallParticipant]
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(ParticipantsUpdated, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.sequence_number = sequence_number
        self.participants = participants
        self.result_information = result_information


class PhoneNumberIdentifierModel(msrest.serialization.Model):
    """A phone number.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. The phone number, usually in E.164 format.
    :vartype value: str
    :ivar is_anonymous: True if the phone number is anonymous. By default false if missing. If the
     phone number is anonymous, the value will be the string 'anonymous'.
    :vartype is_anonymous: bool
    :ivar asserted_id: The asserted Id of the phone number. An asserted Id gets generated when the
     same phone number joins the same call more than once.
    :vartype asserted_id: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'is_anonymous': {'key': 'isAnonymous', 'type': 'bool'},
        'asserted_id': {'key': 'assertedId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: str,
        is_anonymous: Optional[bool] = None,
        asserted_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. The phone number, usually in E.164 format.
        :paramtype value: str
        :keyword is_anonymous: True if the phone number is anonymous. By default false if missing. If
         the phone number is anonymous, the value will be the string 'anonymous'.
        :paramtype is_anonymous: bool
        :keyword asserted_id: The asserted Id of the phone number. An asserted Id gets generated when
         the same phone number joins the same call more than once.
        :paramtype asserted_id: str
        """
        super(PhoneNumberIdentifierModel, self).__init__(**kwargs)
        self.value = value
        self.is_anonymous = is_anonymous
        self.asserted_id = asserted_id


class PlayCanceled(msrest.serialization.Model):
    """PlayCanceled.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(PlayCanceled, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class PlayCompleted(msrest.serialization.Model):
    """PlayCompleted.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(PlayCompleted, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class PlayFailed(msrest.serialization.Model):
    """PlayFailed.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar failed_play_source_index: Contains the index of the failed play source.
    :vartype failed_play_source_index: int
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'failed_play_source_index': {'key': 'failedPlaySourceIndex', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        failed_play_source_index: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword failed_play_source_index: Contains the index of the failed play source.
        :paramtype failed_play_source_index: int
        """
        super(PlayFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.failed_play_source_index = failed_play_source_index


class PlayOptions(msrest.serialization.Model):
    """PlayOptions.

    All required parameters must be populated in order to send to Azure.

    :ivar loop: Required. The option to play the provided audio source in loop when set to true.
    :vartype loop: bool
    :ivar interrupt_call_media_operation: If set play can barge into other existing
     queued-up/currently-processing requests.
    :vartype interrupt_call_media_operation: bool
    :ivar interrupt_hold_audio: If set, hold audio will be interrupted, then this request will be
     played, and then the hold audio will be resumed.
    :vartype interrupt_hold_audio: bool
    """

    _validation = {
        'loop': {'required': True},
    }

    _attribute_map = {
        'loop': {'key': 'loop', 'type': 'bool'},
        'interrupt_call_media_operation': {'key': 'interruptCallMediaOperation', 'type': 'bool'},
        'interrupt_hold_audio': {'key': 'interruptHoldAudio', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        loop: bool,
        interrupt_call_media_operation: Optional[bool] = None,
        interrupt_hold_audio: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword loop: Required. The option to play the provided audio source in loop when set to true.
        :paramtype loop: bool
        :keyword interrupt_call_media_operation: If set play can barge into other existing
         queued-up/currently-processing requests.
        :paramtype interrupt_call_media_operation: bool
        :keyword interrupt_hold_audio: If set, hold audio will be interrupted, then this request will
         be played, and then the hold audio will be resumed.
        :paramtype interrupt_hold_audio: bool
        """
        super(PlayOptions, self).__init__(**kwargs)
        self.loop = loop
        self.interrupt_call_media_operation = interrupt_call_media_operation
        self.interrupt_hold_audio = interrupt_hold_audio


class PlayPaused(msrest.serialization.Model):
    """Play Paused event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(PlayPaused, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class PlayRequest(msrest.serialization.Model):
    """PlayRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar play_sources: Required. The source of the audio to be played.
    :vartype play_sources: list[~azure.communication.callautomation.models.PlaySource]
    :ivar play_to: The list of call participants play provided audio to.
     Plays to everyone in the call when not provided.
    :vartype play_to: list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
    :ivar play_options: Defines options for playing the audio.
    :vartype play_options: ~azure.communication.callautomation.models.PlayOptions
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _validation = {
        'play_sources': {'required': True},
    }

    _attribute_map = {
        'play_sources': {'key': 'playSources', 'type': '[PlaySource]'},
        'play_to': {'key': 'playTo', 'type': '[CommunicationIdentifierModel]'},
        'play_options': {'key': 'playOptions', 'type': 'PlayOptions'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        play_sources: List["PlaySource"],
        play_to: Optional[List["CommunicationIdentifierModel"]] = None,
        play_options: Optional["PlayOptions"] = None,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword play_sources: Required. The source of the audio to be played.
        :paramtype play_sources: list[~azure.communication.callautomation.models.PlaySource]
        :keyword play_to: The list of call participants play provided audio to.
         Plays to everyone in the call when not provided.
        :paramtype play_to:
         list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
        :keyword play_options: Defines options for playing the audio.
        :paramtype play_options: ~azure.communication.callautomation.models.PlayOptions
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(PlayRequest, self).__init__(**kwargs)
        self.play_sources = play_sources
        self.play_to = play_to
        self.play_options = play_options
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class PlayResumed(msrest.serialization.Model):
    """Play Resumed event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(PlayResumed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class PlaySource(msrest.serialization.Model):
    """PlaySource.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Defines the type of the play source. Possible values include: "file",
     "text", "ssml".
    :vartype kind: str or ~azure.communication.callautomation.models.PlaySourceType
    :ivar play_source_cache_id: Defines the identifier to be used for caching related media.
    :vartype play_source_cache_id: str
    :ivar file: Defines the file source info to be used for play.
    :vartype file: ~azure.communication.callautomation.models.FileSource
    :ivar text: Defines the text source info to be used for play.
    :vartype text: ~azure.communication.callautomation.models.TextSource
    :ivar ssml: Defines the ssml(Speech Synthesis Markup Language) source info to be used for play.
    :vartype ssml: ~azure.communication.callautomation.models.SsmlSource
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'play_source_cache_id': {'key': 'playSourceCacheId', 'type': 'str'},
        'file': {'key': 'file', 'type': 'FileSource'},
        'text': {'key': 'text', 'type': 'TextSource'},
        'ssml': {'key': 'ssml', 'type': 'SsmlSource'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "PlaySourceType"],
        play_source_cache_id: Optional[str] = None,
        file: Optional["FileSource"] = None,
        text: Optional["TextSource"] = None,
        ssml: Optional["SsmlSource"] = None,
        **kwargs
    ):
        """
        :keyword kind: Required. Defines the type of the play source. Possible values include: "file",
         "text", "ssml".
        :paramtype kind: str or ~azure.communication.callautomation.models.PlaySourceType
        :keyword play_source_cache_id: Defines the identifier to be used for caching related media.
        :paramtype play_source_cache_id: str
        :keyword file: Defines the file source info to be used for play.
        :paramtype file: ~azure.communication.callautomation.models.FileSource
        :keyword text: Defines the text source info to be used for play.
        :paramtype text: ~azure.communication.callautomation.models.TextSource
        :keyword ssml: Defines the ssml(Speech Synthesis Markup Language) source info to be used for
         play.
        :paramtype ssml: ~azure.communication.callautomation.models.SsmlSource
        """
        super(PlaySource, self).__init__(**kwargs)
        self.kind = kind
        self.play_source_cache_id = play_source_cache_id
        self.file = file
        self.text = text
        self.ssml = ssml


class PlayStarted(msrest.serialization.Model):
    """Play started event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(PlayStarted, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class PostProcessingOptions(msrest.serialization.Model):
    """PostProcessingOptions.

    All required parameters must be populated in order to send to Azure.

    :ivar cognitive_services_endpoint: The identifier of the Cognitive Service resource assigned to
     the post recording processing.
     The Cognitive Service resource will be used by the summarization feature.
    :vartype cognitive_services_endpoint: str
    :ivar transcription: Required. Define options of the transcription for the post recording
     processing.
    :vartype transcription: ~azure.communication.callautomation.models.Transcription
    :ivar summarization: Define options of the summarization for the post recording processing.
    :vartype summarization: ~azure.communication.callautomation.models.Summarization
    """

    _validation = {
        'transcription': {'required': True},
    }

    _attribute_map = {
        'cognitive_services_endpoint': {'key': 'cognitiveServicesEndpoint', 'type': 'str'},
        'transcription': {'key': 'transcription', 'type': 'Transcription'},
        'summarization': {'key': 'summarization', 'type': 'Summarization'},
    }

    def __init__(
        self,
        *,
        transcription: "Transcription",
        cognitive_services_endpoint: Optional[str] = None,
        summarization: Optional["Summarization"] = None,
        **kwargs
    ):
        """
        :keyword cognitive_services_endpoint: The identifier of the Cognitive Service resource assigned
         to the post recording processing.
         The Cognitive Service resource will be used by the summarization feature.
        :paramtype cognitive_services_endpoint: str
        :keyword transcription: Required. Define options of the transcription for the post recording
         processing.
        :paramtype transcription: ~azure.communication.callautomation.models.Transcription
        :keyword summarization: Define options of the summarization for the post recording processing.
        :paramtype summarization: ~azure.communication.callautomation.models.Summarization
        """
        super(PostProcessingOptions, self).__init__(**kwargs)
        self.cognitive_services_endpoint = cognitive_services_endpoint
        self.transcription = transcription
        self.summarization = summarization


class PowerVirtualAgentsDialog(BaseDialog):
    """Power Virtual Agents Dialog.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. Determines the type of the dialog.Constant filled by server. Possible
     values include: "powerVirtualAgents", "azureOpenAI".
    :vartype kind: str or ~azure.communication.callautomation.models.DialogInputType
    :ivar context: Required. Dialog context.
    :vartype context: dict[str, any]
    :ivar bot_app_id: Required. Bot identifier.
    :vartype bot_app_id: str
    :ivar language: Language.
    :vartype language: str
    """

    _validation = {
        'kind': {'required': True},
        'context': {'required': True},
        'bot_app_id': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'context': {'key': 'context', 'type': '{object}'},
        'bot_app_id': {'key': 'botAppId', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        context: Dict[str, Any],
        bot_app_id: str,
        language: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword context: Required. Dialog context.
        :paramtype context: dict[str, any]
        :keyword bot_app_id: Required. Bot identifier.
        :paramtype bot_app_id: str
        :keyword language: Language.
        :paramtype language: str
        """
        super(PowerVirtualAgentsDialog, self).__init__(context=context, **kwargs)
        self.kind = 'powerVirtualAgents'  # type: str
        self.bot_app_id = bot_app_id
        self.language = language


class RecognizeCanceled(msrest.serialization.Model):
    """RecognizeCanceled.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(RecognizeCanceled, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class RecognizeCompleted(msrest.serialization.Model):
    """RecognizeCompleted.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar recognition_type: Determines the sub-type of the recognize operation.
     In case of cancel operation the this field is not set and is returned empty. Possible values
     include: "dtmf", "speech", "choices".
    :vartype recognition_type: str or ~azure.communication.callautomation.models.RecognitionType
    :ivar dtmf_result: Defines the result for RecognitionType = Dtmf.
    :vartype dtmf_result: ~azure.communication.callautomation.models.DtmfResult
    :ivar choice_result: Defines the result for RecognitionType = Choices.
    :vartype choice_result: ~azure.communication.callautomation.models.ChoiceResult
    :ivar speech_result: Defines the result for RecognitionType = Speech and SpeechOrDtmf.
    :vartype speech_result: ~azure.communication.callautomation.models.SpeechResult
    """

    _validation = {
        'speech_result': {'readonly': True},
    }

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'recognition_type': {'key': 'recognitionType', 'type': 'str'},
        'dtmf_result': {'key': 'dtmfResult', 'type': 'DtmfResult'},
        'choice_result': {'key': 'choiceResult', 'type': 'ChoiceResult'},
        'speech_result': {'key': 'speechResult', 'type': 'SpeechResult'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        recognition_type: Optional[Union[str, "RecognitionType"]] = None,
        dtmf_result: Optional["DtmfResult"] = None,
        choice_result: Optional["ChoiceResult"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword recognition_type: Determines the sub-type of the recognize operation.
         In case of cancel operation the this field is not set and is returned empty. Possible values
         include: "dtmf", "speech", "choices".
        :paramtype recognition_type: str or ~azure.communication.callautomation.models.RecognitionType
        :keyword dtmf_result: Defines the result for RecognitionType = Dtmf.
        :paramtype dtmf_result: ~azure.communication.callautomation.models.DtmfResult
        :keyword choice_result: Defines the result for RecognitionType = Choices.
        :paramtype choice_result: ~azure.communication.callautomation.models.ChoiceResult
        """
        super(RecognizeCompleted, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.recognition_type = recognition_type
        self.dtmf_result = dtmf_result
        self.choice_result = choice_result
        self.speech_result = None


class RecognizeFailed(msrest.serialization.Model):
    """RecognizeFailed.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar failed_play_source_index: Contains the index of the failed play source.
    :vartype failed_play_source_index: int
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'failed_play_source_index': {'key': 'failedPlaySourceIndex', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        failed_play_source_index: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword failed_play_source_index: Contains the index of the failed play source.
        :paramtype failed_play_source_index: int
        """
        super(RecognizeFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.failed_play_source_index = failed_play_source_index


class RecognizeOptions(msrest.serialization.Model):
    """RecognizeOptions.

    All required parameters must be populated in order to send to Azure.

    :ivar interrupt_prompt: Determines if we interrupt the prompt and start recognizing.
    :vartype interrupt_prompt: bool
    :ivar initial_silence_timeout_in_seconds: Time to wait for first input after prompt (if any).
    :vartype initial_silence_timeout_in_seconds: int
    :ivar target_participant: Required. Target participant of DTMF tone recognition.
    :vartype target_participant:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar speech_language: Speech language to be recognized, If not set default is en-US.
    :vartype speech_language: str
    :ivar speech_recognition_model_endpoint_id: Endpoint where the custom model was deployed.
    :vartype speech_recognition_model_endpoint_id: str
    :ivar dtmf_options: Defines configurations for DTMF.
    :vartype dtmf_options: ~azure.communication.callautomation.models.DtmfOptions
    :ivar choices: Defines Ivr choices for recognize.
    :vartype choices: list[~azure.communication.callautomation.models.Choice]
    :ivar speech_options: Defines continuous speech recognition option.
    :vartype speech_options: ~azure.communication.callautomation.models.SpeechOptions
    """

    _validation = {
        'initial_silence_timeout_in_seconds': {'maximum': 300, 'minimum': 0},
        'target_participant': {'required': True},
    }

    _attribute_map = {
        'interrupt_prompt': {'key': 'interruptPrompt', 'type': 'bool'},
        'initial_silence_timeout_in_seconds': {'key': 'initialSilenceTimeoutInSeconds', 'type': 'int'},
        'target_participant': {'key': 'targetParticipant', 'type': 'CommunicationIdentifierModel'},
        'speech_language': {'key': 'speechLanguage', 'type': 'str'},
        'speech_recognition_model_endpoint_id': {'key': 'speechRecognitionModelEndpointId', 'type': 'str'},
        'dtmf_options': {'key': 'dtmfOptions', 'type': 'DtmfOptions'},
        'choices': {'key': 'choices', 'type': '[Choice]'},
        'speech_options': {'key': 'speechOptions', 'type': 'SpeechOptions'},
    }

    def __init__(
        self,
        *,
        target_participant: "CommunicationIdentifierModel",
        interrupt_prompt: Optional[bool] = None,
        initial_silence_timeout_in_seconds: Optional[int] = None,
        speech_language: Optional[str] = None,
        speech_recognition_model_endpoint_id: Optional[str] = None,
        dtmf_options: Optional["DtmfOptions"] = None,
        choices: Optional[List["Choice"]] = None,
        speech_options: Optional["SpeechOptions"] = None,
        **kwargs
    ):
        """
        :keyword interrupt_prompt: Determines if we interrupt the prompt and start recognizing.
        :paramtype interrupt_prompt: bool
        :keyword initial_silence_timeout_in_seconds: Time to wait for first input after prompt (if
         any).
        :paramtype initial_silence_timeout_in_seconds: int
        :keyword target_participant: Required. Target participant of DTMF tone recognition.
        :paramtype target_participant:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword speech_language: Speech language to be recognized, If not set default is en-US.
        :paramtype speech_language: str
        :keyword speech_recognition_model_endpoint_id: Endpoint where the custom model was deployed.
        :paramtype speech_recognition_model_endpoint_id: str
        :keyword dtmf_options: Defines configurations for DTMF.
        :paramtype dtmf_options: ~azure.communication.callautomation.models.DtmfOptions
        :keyword choices: Defines Ivr choices for recognize.
        :paramtype choices: list[~azure.communication.callautomation.models.Choice]
        :keyword speech_options: Defines continuous speech recognition option.
        :paramtype speech_options: ~azure.communication.callautomation.models.SpeechOptions
        """
        super(RecognizeOptions, self).__init__(**kwargs)
        self.interrupt_prompt = interrupt_prompt
        self.initial_silence_timeout_in_seconds = initial_silence_timeout_in_seconds
        self.target_participant = target_participant
        self.speech_language = speech_language
        self.speech_recognition_model_endpoint_id = speech_recognition_model_endpoint_id
        self.dtmf_options = dtmf_options
        self.choices = choices
        self.speech_options = speech_options


class RecognizeRequest(msrest.serialization.Model):
    """RecognizeRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar recognize_input_type: Required. Determines the type of the recognition. Possible values
     include: "dtmf", "speech", "speechOrDtmf", "choices".
    :vartype recognize_input_type: str or
     ~azure.communication.callautomation.models.RecognizeInputType
    :ivar play_prompt: The source of the audio to be played for recognition.
    :vartype play_prompt: ~azure.communication.callautomation.models.PlaySource
    :ivar play_prompts: The source of the audio to be played for recognition.
    :vartype play_prompts: list[~azure.communication.callautomation.models.PlaySource]
    :ivar interrupt_call_media_operation: If set recognize can barge into other existing
     queued-up/currently-processing requests.
    :vartype interrupt_call_media_operation: bool
    :ivar recognize_options: Required. Defines options for recognition.
    :vartype recognize_options: ~azure.communication.callautomation.models.RecognizeOptions
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _validation = {
        'recognize_input_type': {'required': True},
        'recognize_options': {'required': True},
    }

    _attribute_map = {
        'recognize_input_type': {'key': 'recognizeInputType', 'type': 'str'},
        'play_prompt': {'key': 'playPrompt', 'type': 'PlaySource'},
        'play_prompts': {'key': 'playPrompts', 'type': '[PlaySource]'},
        'interrupt_call_media_operation': {'key': 'interruptCallMediaOperation', 'type': 'bool'},
        'recognize_options': {'key': 'recognizeOptions', 'type': 'RecognizeOptions'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        recognize_input_type: Union[str, "RecognizeInputType"],
        recognize_options: "RecognizeOptions",
        play_prompt: Optional["PlaySource"] = None,
        play_prompts: Optional[List["PlaySource"]] = None,
        interrupt_call_media_operation: Optional[bool] = None,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword recognize_input_type: Required. Determines the type of the recognition. Possible
         values include: "dtmf", "speech", "speechOrDtmf", "choices".
        :paramtype recognize_input_type: str or
         ~azure.communication.callautomation.models.RecognizeInputType
        :keyword play_prompt: The source of the audio to be played for recognition.
        :paramtype play_prompt: ~azure.communication.callautomation.models.PlaySource
        :keyword play_prompts: The source of the audio to be played for recognition.
        :paramtype play_prompts: list[~azure.communication.callautomation.models.PlaySource]
        :keyword interrupt_call_media_operation: If set recognize can barge into other existing
         queued-up/currently-processing requests.
        :paramtype interrupt_call_media_operation: bool
        :keyword recognize_options: Required. Defines options for recognition.
        :paramtype recognize_options: ~azure.communication.callautomation.models.RecognizeOptions
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(RecognizeRequest, self).__init__(**kwargs)
        self.recognize_input_type = recognize_input_type
        self.play_prompt = play_prompt
        self.play_prompts = play_prompts
        self.interrupt_call_media_operation = interrupt_call_media_operation
        self.recognize_options = recognize_options
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class RecordingChunkStorageInfo(msrest.serialization.Model):
    """Recording chunk data.

    :ivar document_id: Chunk document id.
    :vartype document_id: str
    :ivar index: Chunks order in a multi chunk recording.
    :vartype index: int
    :ivar end_reason: Reason this chunk ended. Possible values include: "chunkIsBeingRecorded",
     "sessionEnded", "chunkMaximumSizeExceeded", "chunkMaximumTimeExceeded", "chunkUploadFailure".
    :vartype end_reason: str or ~azure.communication.callautomation.models.ChunkEndReason
    :ivar content_location: Location of the chunk.
    :vartype content_location: str
    :ivar metadata_location: Location of chunk metadata.
    :vartype metadata_location: str
    :ivar delete_location: Callback for deleting chunk.
    :vartype delete_location: str
    """

    _attribute_map = {
        'document_id': {'key': 'documentId', 'type': 'str'},
        'index': {'key': 'index', 'type': 'int'},
        'end_reason': {'key': 'endReason', 'type': 'str'},
        'content_location': {'key': 'contentLocation', 'type': 'str'},
        'metadata_location': {'key': 'metadataLocation', 'type': 'str'},
        'delete_location': {'key': 'deleteLocation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        document_id: Optional[str] = None,
        index: Optional[int] = None,
        end_reason: Optional[Union[str, "ChunkEndReason"]] = None,
        content_location: Optional[str] = None,
        metadata_location: Optional[str] = None,
        delete_location: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword document_id: Chunk document id.
        :paramtype document_id: str
        :keyword index: Chunks order in a multi chunk recording.
        :paramtype index: int
        :keyword end_reason: Reason this chunk ended. Possible values include: "chunkIsBeingRecorded",
         "sessionEnded", "chunkMaximumSizeExceeded", "chunkMaximumTimeExceeded", "chunkUploadFailure".
        :paramtype end_reason: str or ~azure.communication.callautomation.models.ChunkEndReason
        :keyword content_location: Location of the chunk.
        :paramtype content_location: str
        :keyword metadata_location: Location of chunk metadata.
        :paramtype metadata_location: str
        :keyword delete_location: Callback for deleting chunk.
        :paramtype delete_location: str
        """
        super(RecordingChunkStorageInfo, self).__init__(**kwargs)
        self.document_id = document_id
        self.index = index
        self.end_reason = end_reason
        self.content_location = content_location
        self.metadata_location = metadata_location
        self.delete_location = delete_location


class RecordingResultResponse(msrest.serialization.Model):
    """Recording result data.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar recording_id:
    :vartype recording_id: str
    :ivar recording_storage_info: Container for chunks.
    :vartype recording_storage_info:
     ~azure.communication.callautomation.models.RecordingStorageInfo
    :ivar errors:
    :vartype errors: list[~azure.communication.callautomation.models.Error]
    :ivar recording_start_time:
    :vartype recording_start_time: ~datetime.datetime
    :ivar recording_duration_ms:
    :vartype recording_duration_ms: long
    :ivar session_end_reason: Possible values include: "sessionStillOngoing", "callEnded",
     "initiatorLeft", "handedOverOrTransfered", "maximumSessionTimeReached", "callStartTimeout",
     "mediaTimeout", "audioStreamFailure", "allInstancesBusy", "teamsTokenConversionFailed",
     "reportCallStateFailed", "reportCallStateFailedAndSessionMustBeDiscarded",
     "couldNotRejoinCall", "invalidBotData", "couldNotStart",
     "appHostedMediaFailureOutcomeWithError", "appHostedMediaFailureOutcomeGracefully",
     "handedOverDueToMediaTimeout", "handedOverDueToAudioStreamFailure",
     "speechRecognitionSessionNonRetriableError",
     "speechRecognitionSessionRetriableErrorMaxRetryCountReached",
     "handedOverDueToChunkCreationFailure", "chunkCreationFailed",
     "handedOverDueToProcessingTimeout", "processingTimeout", "transcriptObjectCreationFailed".
    :vartype session_end_reason: str or
     ~azure.communication.callautomation.models.CallSessionEndReason
    :ivar recording_expiration_time:
    :vartype recording_expiration_time: ~datetime.datetime
    """

    _validation = {
        'recording_id': {'readonly': True},
        'recording_storage_info': {'readonly': True},
        'errors': {'readonly': True},
        'recording_start_time': {'readonly': True},
        'recording_duration_ms': {'readonly': True},
        'session_end_reason': {'readonly': True},
        'recording_expiration_time': {'readonly': True},
    }

    _attribute_map = {
        'recording_id': {'key': 'recordingId', 'type': 'str'},
        'recording_storage_info': {'key': 'recordingStorageInfo', 'type': 'RecordingStorageInfo'},
        'errors': {'key': 'errors', 'type': '[Error]'},
        'recording_start_time': {'key': 'recordingStartTime', 'type': 'iso-8601'},
        'recording_duration_ms': {'key': 'recordingDurationMs', 'type': 'long'},
        'session_end_reason': {'key': 'sessionEndReason', 'type': 'str'},
        'recording_expiration_time': {'key': 'recordingExpirationTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(RecordingResultResponse, self).__init__(**kwargs)
        self.recording_id = None
        self.recording_storage_info = None
        self.errors = None
        self.recording_start_time = None
        self.recording_duration_ms = None
        self.session_end_reason = None
        self.recording_expiration_time = None


class RecordingStateChanged(msrest.serialization.Model):
    """RecordingStateChanged.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar recording_id: The call recording id.
    :vartype recording_id: str
    :ivar state: Possible values include: "active", "inactive".
    :vartype state: str or ~azure.communication.callautomation.models.RecordingState
    :ivar start_date_time: The time of the recording started.
    :vartype start_date_time: ~datetime.datetime
    :ivar recording_kind: Possible values include: "AzureCommunicationServices", "Teams",
     "TeamsCompliance".
    :vartype recording_kind: str or ~azure.communication.callautomation.models.RecordingKind
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'recording_id': {'readonly': True},
        'start_date_time': {'readonly': True},
    }

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'recording_id': {'key': 'recordingId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'recording_kind': {'key': 'recordingKind', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        state: Optional[Union[str, "RecordingState"]] = None,
        recording_kind: Optional[Union[str, "RecordingKind"]] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword state: Possible values include: "active", "inactive".
        :paramtype state: str or ~azure.communication.callautomation.models.RecordingState
        :keyword recording_kind: Possible values include: "AzureCommunicationServices", "Teams",
         "TeamsCompliance".
        :paramtype recording_kind: str or ~azure.communication.callautomation.models.RecordingKind
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(RecordingStateChanged, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.recording_id = None
        self.state = state
        self.start_date_time = None
        self.recording_kind = recording_kind
        self.result_information = result_information


class RecordingStateResponse(msrest.serialization.Model):
    """RecordingStateResponse.

    :ivar recording_id:
    :vartype recording_id: str
    :ivar recording_state: Possible values include: "active", "inactive".
    :vartype recording_state: str or ~azure.communication.callautomation.models.RecordingState
    :ivar recording_kind: Possible values include: "AzureCommunicationServices", "Teams",
     "TeamsCompliance".
    :vartype recording_kind: str or ~azure.communication.callautomation.models.RecordingKind
    """

    _attribute_map = {
        'recording_id': {'key': 'recordingId', 'type': 'str'},
        'recording_state': {'key': 'recordingState', 'type': 'str'},
        'recording_kind': {'key': 'recordingKind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        recording_id: Optional[str] = None,
        recording_state: Optional[Union[str, "RecordingState"]] = None,
        recording_kind: Optional[Union[str, "RecordingKind"]] = None,
        **kwargs
    ):
        """
        :keyword recording_id:
        :paramtype recording_id: str
        :keyword recording_state: Possible values include: "active", "inactive".
        :paramtype recording_state: str or ~azure.communication.callautomation.models.RecordingState
        :keyword recording_kind: Possible values include: "AzureCommunicationServices", "Teams",
         "TeamsCompliance".
        :paramtype recording_kind: str or ~azure.communication.callautomation.models.RecordingKind
        """
        super(RecordingStateResponse, self).__init__(**kwargs)
        self.recording_id = recording_id
        self.recording_state = recording_state
        self.recording_kind = recording_kind


class RecordingStorageInfo(msrest.serialization.Model):
    """Container for chunks.

    :ivar recording_chunks: Collection of
     {Microsoft.Skype.Platform.ExecutionAgent.Azure.Communication.Service.ServerCalling.Content.Contracts.ALPHA4_2024_09_01_preview.Models.RecordingChunkStorageInfo}.
    :vartype recording_chunks:
     list[~azure.communication.callautomation.models.RecordingChunkStorageInfo]
    """

    _attribute_map = {
        'recording_chunks': {'key': 'recordingChunks', 'type': '[RecordingChunkStorageInfo]'},
    }

    def __init__(
        self,
        *,
        recording_chunks: Optional[List["RecordingChunkStorageInfo"]] = None,
        **kwargs
    ):
        """
        :keyword recording_chunks: Collection of
         {Microsoft.Skype.Platform.ExecutionAgent.Azure.Communication.Service.ServerCalling.Content.Contracts.ALPHA4_2024_09_01_preview.Models.RecordingChunkStorageInfo}.
        :paramtype recording_chunks:
         list[~azure.communication.callautomation.models.RecordingChunkStorageInfo]
        """
        super(RecordingStorageInfo, self).__init__(**kwargs)
        self.recording_chunks = recording_chunks


class RedirectCallRequest(msrest.serialization.Model):
    """The request payload for redirecting the call.

    All required parameters must be populated in order to send to Azure.

    :ivar incoming_call_context: Required. The context associated with the call.
    :vartype incoming_call_context: str
    :ivar target: Required. The target identity to redirect the call to.
    :vartype target: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar custom_calling_context: Used by customer to send custom calling context to targets.
    :vartype custom_calling_context:
     ~azure.communication.callautomation.models.CustomCallingContext
    """

    _validation = {
        'incoming_call_context': {'required': True},
        'target': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'target': {'key': 'target', 'type': 'CommunicationIdentifierModel'},
        'custom_calling_context': {'key': 'customCallingContext', 'type': 'CustomCallingContext'},
    }

    def __init__(
        self,
        *,
        incoming_call_context: str,
        target: "CommunicationIdentifierModel",
        custom_calling_context: Optional["CustomCallingContext"] = None,
        **kwargs
    ):
        """
        :keyword incoming_call_context: Required. The context associated with the call.
        :paramtype incoming_call_context: str
        :keyword target: Required. The target identity to redirect the call to.
        :paramtype target: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword custom_calling_context: Used by customer to send custom calling context to targets.
        :paramtype custom_calling_context:
         ~azure.communication.callautomation.models.CustomCallingContext
        """
        super(RedirectCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = incoming_call_context
        self.target = target
        self.custom_calling_context = custom_calling_context


class RejectCallRequest(msrest.serialization.Model):
    """The request payload for rejecting the call.

    All required parameters must be populated in order to send to Azure.

    :ivar incoming_call_context: Required. The context associated with the call.
    :vartype incoming_call_context: str
    :ivar call_reject_reason: The rejection reason. Possible values include: "none", "busy",
     "forbidden".
    :vartype call_reject_reason: str or ~azure.communication.callautomation.models.CallRejectReason
    """

    _validation = {
        'incoming_call_context': {'required': True},
    }

    _attribute_map = {
        'incoming_call_context': {'key': 'incomingCallContext', 'type': 'str'},
        'call_reject_reason': {'key': 'callRejectReason', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        incoming_call_context: str,
        call_reject_reason: Optional[Union[str, "CallRejectReason"]] = None,
        **kwargs
    ):
        """
        :keyword incoming_call_context: Required. The context associated with the call.
        :paramtype incoming_call_context: str
        :keyword call_reject_reason: The rejection reason. Possible values include: "none", "busy",
         "forbidden".
        :paramtype call_reject_reason: str or
         ~azure.communication.callautomation.models.CallRejectReason
        """
        super(RejectCallRequest, self).__init__(**kwargs)
        self.incoming_call_context = incoming_call_context
        self.call_reject_reason = call_reject_reason


class RemoveParticipantFailed(msrest.serialization.Model):
    """The failed to remove participant event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar participant: Participant.
    :vartype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        participant: Optional["CommunicationIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword participant: Participant.
        :paramtype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        """
        super(RemoveParticipantFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.participant = participant


class RemoveParticipantRequest(msrest.serialization.Model):
    """The remove participant by identifier request.

    All required parameters must be populated in order to send to Azure.

    :ivar participant_to_remove: Required. The participants to be removed from the call.
    :vartype participant_to_remove:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _validation = {
        'participant_to_remove': {'required': True},
    }

    _attribute_map = {
        'participant_to_remove': {'key': 'participantToRemove', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        participant_to_remove: "CommunicationIdentifierModel",
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword participant_to_remove: Required. The participants to be removed from the call.
        :paramtype participant_to_remove:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(RemoveParticipantRequest, self).__init__(**kwargs)
        self.participant_to_remove = participant_to_remove
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class RemoveParticipantResponse(msrest.serialization.Model):
    """The response payload for removing participants of the call.

    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    """

    _attribute_map = {
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        """
        super(RemoveParticipantResponse, self).__init__(**kwargs)
        self.operation_context = operation_context


class RemoveParticipantSucceeded(msrest.serialization.Model):
    """The participant removed event.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    :ivar participant: Participant.
    :vartype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
        'participant': {'key': 'participant', 'type': 'CommunicationIdentifierModel'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        participant: Optional["CommunicationIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        :keyword participant: Participant.
        :paramtype participant: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        """
        super(RemoveParticipantSucceeded, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information
        self.participant = participant


class ResultInformation(msrest.serialization.Model):
    """ResultInformation.

    :ivar code: Code of the current result. This can be helpful to Call Automation team to
     troubleshoot the issue if this result was unexpected.
    :vartype code: int
    :ivar sub_code: Subcode of the current result. This can be helpful to Call Automation team to
     troubleshoot the issue if this result was unexpected.
    :vartype sub_code: int
    :ivar message: Detail message that describes the current result.
    :vartype message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'int'},
        'sub_code': {'key': 'subCode', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[int] = None,
        sub_code: Optional[int] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword code: Code of the current result. This can be helpful to Call Automation team to
         troubleshoot the issue if this result was unexpected.
        :paramtype code: int
        :keyword sub_code: Subcode of the current result. This can be helpful to Call Automation team
         to troubleshoot the issue if this result was unexpected.
        :paramtype sub_code: int
        :keyword message: Detail message that describes the current result.
        :paramtype message: str
        """
        super(ResultInformation, self).__init__(**kwargs)
        self.code = code
        self.sub_code = sub_code
        self.message = message


class SendDtmfTonesCompleted(msrest.serialization.Model):
    """SendDtmfTonesCompleted.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(SendDtmfTonesCompleted, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class SendDtmfTonesFailed(msrest.serialization.Model):
    """SendDtmfTonesFailed.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(SendDtmfTonesFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class SendDtmfTonesRequest(msrest.serialization.Model):
    """SendDtmfTonesRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar tones: Required. List of tones to be sent to target participant.
    :vartype tones: list[str or ~azure.communication.callautomation.models.DtmfTone]
    :ivar target_participant: Required. Target participant of send Dtmf tones.
    :vartype target_participant:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _validation = {
        'tones': {'required': True},
        'target_participant': {'required': True},
    }

    _attribute_map = {
        'tones': {'key': 'tones', 'type': '[str]'},
        'target_participant': {'key': 'targetParticipant', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tones: List[Union[str, "DtmfTone"]],
        target_participant: "CommunicationIdentifierModel",
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tones: Required. List of tones to be sent to target participant.
        :paramtype tones: list[str or ~azure.communication.callautomation.models.DtmfTone]
        :keyword target_participant: Required. Target participant of send Dtmf tones.
        :paramtype target_participant:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(SendDtmfTonesRequest, self).__init__(**kwargs)
        self.tones = tones
        self.target_participant = target_participant
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class SendDtmfTonesResult(msrest.serialization.Model):
    """SendDtmfTonesResult.

    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    """

    _attribute_map = {
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        """
        super(SendDtmfTonesResult, self).__init__(**kwargs)
        self.operation_context = operation_context


class SpeechOptions(msrest.serialization.Model):
    """Options for continuous speech recognition.

    :ivar end_silence_timeout_in_ms: The length of end silence when user stops speaking and
     cogservice send response.
    :vartype end_silence_timeout_in_ms: long
    """

    _attribute_map = {
        'end_silence_timeout_in_ms': {'key': 'endSilenceTimeoutInMs', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        end_silence_timeout_in_ms: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword end_silence_timeout_in_ms: The length of end silence when user stops speaking and
         cogservice send response.
        :paramtype end_silence_timeout_in_ms: long
        """
        super(SpeechOptions, self).__init__(**kwargs)
        self.end_silence_timeout_in_ms = end_silence_timeout_in_ms


class SpeechResult(msrest.serialization.Model):
    """The speech status as a result.

    :ivar speech: The recognized speech in string.
    :vartype speech: str
    :ivar confidence: The confidence of the recognized speech.
    :vartype confidence: float
    """

    _attribute_map = {
        'speech': {'key': 'speech', 'type': 'str'},
        'confidence': {'key': 'confidence', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        speech: Optional[str] = None,
        confidence: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword speech: The recognized speech in string.
        :paramtype speech: str
        :keyword confidence: The confidence of the recognized speech.
        :paramtype confidence: float
        """
        super(SpeechResult, self).__init__(**kwargs)
        self.speech = speech
        self.confidence = confidence


class SsmlSource(msrest.serialization.Model):
    """SsmlSource.

    All required parameters must be populated in order to send to Azure.

    :ivar ssml_text: Required. Ssml string for the cognitive service to be played.
    :vartype ssml_text: str
    :ivar custom_voice_endpoint_id: Endpoint where the custom voice was deployed.
    :vartype custom_voice_endpoint_id: str
    """

    _validation = {
        'ssml_text': {'required': True},
    }

    _attribute_map = {
        'ssml_text': {'key': 'ssmlText', 'type': 'str'},
        'custom_voice_endpoint_id': {'key': 'customVoiceEndpointId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        ssml_text: str,
        custom_voice_endpoint_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword ssml_text: Required. Ssml string for the cognitive service to be played.
        :paramtype ssml_text: str
        :keyword custom_voice_endpoint_id: Endpoint where the custom voice was deployed.
        :paramtype custom_voice_endpoint_id: str
        """
        super(SsmlSource, self).__init__(**kwargs)
        self.ssml_text = ssml_text
        self.custom_voice_endpoint_id = custom_voice_endpoint_id


class StartCallRecordingRequest(msrest.serialization.Model):
    """The request payload start for call recording operation with call locator.

    :ivar call_locator: The call locator. (Only one of callLocator or callConnectionId to be used).
    :vartype call_locator: ~azure.communication.callautomation.models.CallLocator
    :ivar call_connection_id: The call connectionId. (Only one of callLocator or callConnectionId
     to be used).
    :vartype call_connection_id: str
    :ivar recording_state_callback_uri: The uri to send notifications to.
    :vartype recording_state_callback_uri: str
    :ivar recording_content_type: The content type of call recording. Possible values include:
     "audio", "audioVideo".
    :vartype recording_content_type: str or
     ~azure.communication.callautomation.models.RecordingContent
    :ivar recording_channel_type: The channel type of call recording. Possible values include:
     "mixed", "unmixed".
    :vartype recording_channel_type: str or
     ~azure.communication.callautomation.models.RecordingChannel
    :ivar recording_format_type: The format type of call recording. Possible values include: "wav",
     "mp3", "mp4".
    :vartype recording_format_type: str or
     ~azure.communication.callautomation.models.RecordingFormat
    :ivar audio_channel_participant_ordering: The sequential order in which audio channels are
     assigned to participants in the unmixed recording.
     When 'recordingChannelType' is set to 'unmixed' and `audioChannelParticipantOrdering is not
     specified,
     the audio channel to participant mapping will be automatically assigned based on the order in
     which participant
     first audio was detected.  Channel to participant mapping details can be found in the metadata
     of the recording.
    :vartype audio_channel_participant_ordering:
     list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
    :ivar channel_affinity: The channel affinity of call recording
     When 'recordingChannelType' is set to 'unmixed', if channelAffinity is not specified,
     'channel' will be automatically assigned.
     Channel-Participant mapping details can be found in the metadata of the recording.
     ///.
    :vartype channel_affinity: list[~azure.communication.callautomation.models.ChannelAffinity]
    :ivar pause_on_start: When set to true will start recording in Pause mode, which can be
     resumed.
    :vartype pause_on_start: bool
    :ivar external_storage: Optional property to specify location where recording will be stored.
    :vartype external_storage: ~azure.communication.callautomation.models.ExternalStorage
    :ivar post_processing_options: The post processing options for the recording.
    :vartype post_processing_options:
     ~azure.communication.callautomation.models.PostProcessingOptions
    """

    _attribute_map = {
        'call_locator': {'key': 'callLocator', 'type': 'CallLocator'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'recording_state_callback_uri': {'key': 'recordingStateCallbackUri', 'type': 'str'},
        'recording_content_type': {'key': 'recordingContentType', 'type': 'str'},
        'recording_channel_type': {'key': 'recordingChannelType', 'type': 'str'},
        'recording_format_type': {'key': 'recordingFormatType', 'type': 'str'},
        'audio_channel_participant_ordering': {'key': 'audioChannelParticipantOrdering', 'type': '[CommunicationIdentifierModel]'},
        'channel_affinity': {'key': 'channelAffinity', 'type': '[ChannelAffinity]'},
        'pause_on_start': {'key': 'pauseOnStart', 'type': 'bool'},
        'external_storage': {'key': 'externalStorage', 'type': 'ExternalStorage'},
        'post_processing_options': {'key': 'postProcessingOptions', 'type': 'PostProcessingOptions'},
    }

    def __init__(
        self,
        *,
        call_locator: Optional["CallLocator"] = None,
        call_connection_id: Optional[str] = None,
        recording_state_callback_uri: Optional[str] = None,
        recording_content_type: Optional[Union[str, "RecordingContent"]] = None,
        recording_channel_type: Optional[Union[str, "RecordingChannel"]] = None,
        recording_format_type: Optional[Union[str, "RecordingFormat"]] = None,
        audio_channel_participant_ordering: Optional[List["CommunicationIdentifierModel"]] = None,
        channel_affinity: Optional[List["ChannelAffinity"]] = None,
        pause_on_start: Optional[bool] = None,
        external_storage: Optional["ExternalStorage"] = None,
        post_processing_options: Optional["PostProcessingOptions"] = None,
        **kwargs
    ):
        """
        :keyword call_locator: The call locator. (Only one of callLocator or callConnectionId to be
         used).
        :paramtype call_locator: ~azure.communication.callautomation.models.CallLocator
        :keyword call_connection_id: The call connectionId. (Only one of callLocator or
         callConnectionId to be used).
        :paramtype call_connection_id: str
        :keyword recording_state_callback_uri: The uri to send notifications to.
        :paramtype recording_state_callback_uri: str
        :keyword recording_content_type: The content type of call recording. Possible values include:
         "audio", "audioVideo".
        :paramtype recording_content_type: str or
         ~azure.communication.callautomation.models.RecordingContent
        :keyword recording_channel_type: The channel type of call recording. Possible values include:
         "mixed", "unmixed".
        :paramtype recording_channel_type: str or
         ~azure.communication.callautomation.models.RecordingChannel
        :keyword recording_format_type: The format type of call recording. Possible values include:
         "wav", "mp3", "mp4".
        :paramtype recording_format_type: str or
         ~azure.communication.callautomation.models.RecordingFormat
        :keyword audio_channel_participant_ordering: The sequential order in which audio channels are
         assigned to participants in the unmixed recording.
         When 'recordingChannelType' is set to 'unmixed' and `audioChannelParticipantOrdering is not
         specified,
         the audio channel to participant mapping will be automatically assigned based on the order in
         which participant
         first audio was detected.  Channel to participant mapping details can be found in the metadata
         of the recording.
        :paramtype audio_channel_participant_ordering:
         list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
        :keyword channel_affinity: The channel affinity of call recording
         When 'recordingChannelType' is set to 'unmixed', if channelAffinity is not specified,
         'channel' will be automatically assigned.
         Channel-Participant mapping details can be found in the metadata of the recording.
         ///.
        :paramtype channel_affinity: list[~azure.communication.callautomation.models.ChannelAffinity]
        :keyword pause_on_start: When set to true will start recording in Pause mode, which can be
         resumed.
        :paramtype pause_on_start: bool
        :keyword external_storage: Optional property to specify location where recording will be
         stored.
        :paramtype external_storage: ~azure.communication.callautomation.models.ExternalStorage
        :keyword post_processing_options: The post processing options for the recording.
        :paramtype post_processing_options:
         ~azure.communication.callautomation.models.PostProcessingOptions
        """
        super(StartCallRecordingRequest, self).__init__(**kwargs)
        self.call_locator = call_locator
        self.call_connection_id = call_connection_id
        self.recording_state_callback_uri = recording_state_callback_uri
        self.recording_content_type = recording_content_type
        self.recording_channel_type = recording_channel_type
        self.recording_format_type = recording_format_type
        self.audio_channel_participant_ordering = audio_channel_participant_ordering
        self.channel_affinity = channel_affinity
        self.pause_on_start = pause_on_start
        self.external_storage = external_storage
        self.post_processing_options = post_processing_options


class StartDialogRequest(msrest.serialization.Model):
    """StartDialogRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar dialog: Required. Defines the dialog.
    :vartype dialog: ~azure.communication.callautomation.models.BaseDialog
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    """

    _validation = {
        'dialog': {'required': True},
    }

    _attribute_map = {
        'dialog': {'key': 'dialog', 'type': 'BaseDialog'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dialog: "BaseDialog",
        operation_callback_uri: Optional[str] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword dialog: Required. Defines the dialog.
        :paramtype dialog: ~azure.communication.callautomation.models.BaseDialog
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        """
        super(StartDialogRequest, self).__init__(**kwargs)
        self.dialog = dialog
        self.operation_callback_uri = operation_callback_uri
        self.operation_context = operation_context


class StartMediaStreamingRequest(msrest.serialization.Model):
    """StartMediaStreamingRequest.

    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    """

    _attribute_map = {
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_callback_uri: Optional[str] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        """
        super(StartMediaStreamingRequest, self).__init__(**kwargs)
        self.operation_callback_uri = operation_callback_uri
        self.operation_context = operation_context


class StartRecordingFailed(msrest.serialization.Model):
    """StartRecordingFailed.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar correlation_id: Correlation ID for event to call correlation.
    :vartype correlation_id: str
    :ivar recording_id: The call recording id.
    :vartype recording_id: str
    """

    _validation = {
        'recording_id': {'readonly': True},
    }

    _attribute_map = {
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'recording_id': {'key': 'recordingId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword correlation_id: Correlation ID for event to call correlation.
        :paramtype correlation_id: str
        """
        super(StartRecordingFailed, self).__init__(**kwargs)
        self.call_connection_id = call_connection_id
        self.correlation_id = correlation_id
        self.recording_id = None


class StartTranscriptionRequest(msrest.serialization.Model):
    """StartTranscriptionRequest.

    :ivar locale: Defines Locale for the transcription e,g en-US.
    :vartype locale: str
    :ivar speech_model_endpoint_id: Endpoint where the custom model was deployed.
    :vartype speech_model_endpoint_id: str
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _attribute_map = {
        'locale': {'key': 'locale', 'type': 'str'},
        'speech_model_endpoint_id': {'key': 'speechModelEndpointId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        locale: Optional[str] = None,
        speech_model_endpoint_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword locale: Defines Locale for the transcription e,g en-US.
        :paramtype locale: str
        :keyword speech_model_endpoint_id: Endpoint where the custom model was deployed.
        :paramtype speech_model_endpoint_id: str
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(StartTranscriptionRequest, self).__init__(**kwargs)
        self.locale = locale
        self.speech_model_endpoint_id = speech_model_endpoint_id
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class StopMediaStreamingRequest(msrest.serialization.Model):
    """StopMediaStreamingRequest.

    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    """

    _attribute_map = {
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_callback_uri: Optional[str] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        """
        super(StopMediaStreamingRequest, self).__init__(**kwargs)
        self.operation_callback_uri = operation_callback_uri
        self.operation_context = operation_context


class StopTranscriptionRequest(msrest.serialization.Model):
    """StopTranscriptionRequest.

    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _attribute_map = {
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(StopTranscriptionRequest, self).__init__(**kwargs)
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class Summarization(msrest.serialization.Model):
    """Summarization.

    All required parameters must be populated in order to send to Azure.

    :ivar enable_summarization: Required. Determine if the summarization should be enabled for the
     post recording processing.
    :vartype enable_summarization: bool
    """

    _validation = {
        'enable_summarization': {'required': True},
    }

    _attribute_map = {
        'enable_summarization': {'key': 'enableSummarization', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        enable_summarization: bool,
        **kwargs
    ):
        """
        :keyword enable_summarization: Required. Determine if the summarization should be enabled for
         the post recording processing.
        :paramtype enable_summarization: bool
        """
        super(Summarization, self).__init__(**kwargs)
        self.enable_summarization = enable_summarization


class TeamsExtensionUserIdentifierModel(msrest.serialization.Model):
    """A Microsoft Teams Phone user who is using a Communication Services resource to extend their Teams Phone set up.

    All required parameters must be populated in order to send to Azure.

    :ivar user_id: Required. The Id of the Microsoft Teams Extension user, i.e. the Entra ID object
     Id of the user.
    :vartype user_id: str
    :ivar tenant_id: Required. The tenant Id of the Microsoft Teams Extension user.
    :vartype tenant_id: str
    :ivar resource_id: Required. The Communication Services resource Id.
    :vartype resource_id: str
    :ivar cloud: The cloud that the Microsoft Teams Extension user belongs to. By default 'public'
     if missing. Possible values include: "public", "dod", "gcch".
    :vartype cloud: str or
     ~azure.communication.callautomation.models.CommunicationCloudEnvironmentModel
    """

    _validation = {
        'user_id': {'required': True},
        'tenant_id': {'required': True},
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'cloud': {'key': 'cloud', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_id: str,
        tenant_id: str,
        resource_id: str,
        cloud: Optional[Union[str, "CommunicationCloudEnvironmentModel"]] = None,
        **kwargs
    ):
        """
        :keyword user_id: Required. The Id of the Microsoft Teams Extension user, i.e. the Entra ID
         object Id of the user.
        :paramtype user_id: str
        :keyword tenant_id: Required. The tenant Id of the Microsoft Teams Extension user.
        :paramtype tenant_id: str
        :keyword resource_id: Required. The Communication Services resource Id.
        :paramtype resource_id: str
        :keyword cloud: The cloud that the Microsoft Teams Extension user belongs to. By default
         'public' if missing. Possible values include: "public", "dod", "gcch".
        :paramtype cloud: str or
         ~azure.communication.callautomation.models.CommunicationCloudEnvironmentModel
        """
        super(TeamsExtensionUserIdentifierModel, self).__init__(**kwargs)
        self.user_id = user_id
        self.tenant_id = tenant_id
        self.resource_id = resource_id
        self.cloud = cloud


class TeamsPhoneCallDetails(msrest.serialization.Model):
    """The call details which will be sent to the target.

    :ivar teams_phone_caller_details: Container for details relating to the original caller of the
     call.
    :vartype teams_phone_caller_details:
     ~azure.communication.callautomation.models.TeamsPhoneCallerDetails
    :ivar teams_phone_source_details: Container for details relating to the entity responsible for
     the creation of these call details.
    :vartype teams_phone_source_details:
     ~azure.communication.callautomation.models.TeamsPhoneSourceDetails
    :ivar session_id: Id to exclusively identify this call session. IVR will use this for their
     telemetry/reporting.
    :vartype session_id: str
    :ivar intent: The intent of the call.
    :vartype intent: str
    :ivar call_topic: A very short description (max 48 chars) of the reason for the call. To be
     displayed in Teams CallNotification.
    :vartype call_topic: str
    :ivar call_context: A summary of the call thus far. It will be displayed on a side panel in the
     Teams UI.
    :vartype call_context: str
    :ivar transcript_url: Url for fetching the transcript of the call.
    :vartype transcript_url: str
    :ivar call_sentiment: Sentiment of the call thus far.
    :vartype call_sentiment: str
    :ivar suggested_actions: Recommendations for resolving the issue based on the customer’s intent
     and interaction history.
    :vartype suggested_actions: str
    """

    _attribute_map = {
        'teams_phone_caller_details': {'key': 'teamsPhoneCallerDetails', 'type': 'TeamsPhoneCallerDetails'},
        'teams_phone_source_details': {'key': 'teamsPhoneSourceDetails', 'type': 'TeamsPhoneSourceDetails'},
        'session_id': {'key': 'sessionId', 'type': 'str'},
        'intent': {'key': 'intent', 'type': 'str'},
        'call_topic': {'key': 'callTopic', 'type': 'str'},
        'call_context': {'key': 'callContext', 'type': 'str'},
        'transcript_url': {'key': 'transcriptUrl', 'type': 'str'},
        'call_sentiment': {'key': 'callSentiment', 'type': 'str'},
        'suggested_actions': {'key': 'suggestedActions', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        teams_phone_caller_details: Optional["TeamsPhoneCallerDetails"] = None,
        teams_phone_source_details: Optional["TeamsPhoneSourceDetails"] = None,
        session_id: Optional[str] = None,
        intent: Optional[str] = None,
        call_topic: Optional[str] = None,
        call_context: Optional[str] = None,
        transcript_url: Optional[str] = None,
        call_sentiment: Optional[str] = None,
        suggested_actions: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword teams_phone_caller_details: Container for details relating to the original caller of
         the call.
        :paramtype teams_phone_caller_details:
         ~azure.communication.callautomation.models.TeamsPhoneCallerDetails
        :keyword teams_phone_source_details: Container for details relating to the entity responsible
         for the creation of these call details.
        :paramtype teams_phone_source_details:
         ~azure.communication.callautomation.models.TeamsPhoneSourceDetails
        :keyword session_id: Id to exclusively identify this call session. IVR will use this for their
         telemetry/reporting.
        :paramtype session_id: str
        :keyword intent: The intent of the call.
        :paramtype intent: str
        :keyword call_topic: A very short description (max 48 chars) of the reason for the call. To be
         displayed in Teams CallNotification.
        :paramtype call_topic: str
        :keyword call_context: A summary of the call thus far. It will be displayed on a side panel in
         the Teams UI.
        :paramtype call_context: str
        :keyword transcript_url: Url for fetching the transcript of the call.
        :paramtype transcript_url: str
        :keyword call_sentiment: Sentiment of the call thus far.
        :paramtype call_sentiment: str
        :keyword suggested_actions: Recommendations for resolving the issue based on the customer’s
         intent and interaction history.
        :paramtype suggested_actions: str
        """
        super(TeamsPhoneCallDetails, self).__init__(**kwargs)
        self.teams_phone_caller_details = teams_phone_caller_details
        self.teams_phone_source_details = teams_phone_source_details
        self.session_id = session_id
        self.intent = intent
        self.call_topic = call_topic
        self.call_context = call_context
        self.transcript_url = transcript_url
        self.call_sentiment = call_sentiment
        self.suggested_actions = suggested_actions


class TeamsPhoneCallerDetails(msrest.serialization.Model):
    """Container for details relating to the original caller of the call.

    All required parameters must be populated in order to send to Azure.

    :ivar caller: Required. Caller's ID.
    :vartype caller: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar name: Required. Caller's name.
    :vartype name: str
    :ivar phone_number: Required. Caller's phone number.
    :vartype phone_number: str
    :ivar record_id: Caller's record ID (ex in CRM).
    :vartype record_id: str
    :ivar screen_pop_url: Caller's screen pop URL.
    :vartype screen_pop_url: str
    :ivar is_authenticated: Flag indicating whether the caller was authenticated.
    :vartype is_authenticated: bool
    :ivar additional_caller_information: A set of key value pairs (max 10, any additional entries
     would be ignored) which a bot author wants to pass to the Teams Client for display to the
     agent.
    :vartype additional_caller_information: dict[str, str]
    """

    _validation = {
        'caller': {'required': True},
        'name': {'required': True},
        'phone_number': {'required': True},
    }

    _attribute_map = {
        'caller': {'key': 'caller', 'type': 'CommunicationIdentifierModel'},
        'name': {'key': 'name', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'record_id': {'key': 'recordId', 'type': 'str'},
        'screen_pop_url': {'key': 'screenPopUrl', 'type': 'str'},
        'is_authenticated': {'key': 'isAuthenticated', 'type': 'bool'},
        'additional_caller_information': {'key': 'additionalCallerInformation', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        caller: "CommunicationIdentifierModel",
        name: str,
        phone_number: str,
        record_id: Optional[str] = None,
        screen_pop_url: Optional[str] = None,
        is_authenticated: Optional[bool] = None,
        additional_caller_information: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword caller: Required. Caller's ID.
        :paramtype caller: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword name: Required. Caller's name.
        :paramtype name: str
        :keyword phone_number: Required. Caller's phone number.
        :paramtype phone_number: str
        :keyword record_id: Caller's record ID (ex in CRM).
        :paramtype record_id: str
        :keyword screen_pop_url: Caller's screen pop URL.
        :paramtype screen_pop_url: str
        :keyword is_authenticated: Flag indicating whether the caller was authenticated.
        :paramtype is_authenticated: bool
        :keyword additional_caller_information: A set of key value pairs (max 10, any additional
         entries would be ignored) which a bot author wants to pass to the Teams Client for display to
         the agent.
        :paramtype additional_caller_information: dict[str, str]
        """
        super(TeamsPhoneCallerDetails, self).__init__(**kwargs)
        self.caller = caller
        self.name = name
        self.phone_number = phone_number
        self.record_id = record_id
        self.screen_pop_url = screen_pop_url
        self.is_authenticated = is_authenticated
        self.additional_caller_information = additional_caller_information


class TeamsPhoneSourceDetails(msrest.serialization.Model):
    """Container for details relating to the entity responsible for the creation of these call details.

    All required parameters must be populated in order to send to Azure.

    :ivar source: Required. ID of the source entity passing along the call details (ex. Application
     Instance ID of - CQ/AA).
    :vartype source: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar language: Required. Language of the source entity passing along the call details, passed
     in the ISO-639 standard.
    :vartype language: str
    :ivar status: Required. Status of the source entity passing along the call details.
    :vartype status: str
    :ivar intended_targets: Intended targets of the source entity passing along the call details.
    :vartype intended_targets: dict[str,
     ~azure.communication.callautomation.models.CommunicationIdentifierModel]
    """

    _validation = {
        'source': {'required': True},
        'language': {'required': True},
        'status': {'required': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'CommunicationIdentifierModel'},
        'language': {'key': 'language', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'intended_targets': {'key': 'intendedTargets', 'type': '{CommunicationIdentifierModel}'},
    }

    def __init__(
        self,
        *,
        source: "CommunicationIdentifierModel",
        language: str,
        status: str,
        intended_targets: Optional[Dict[str, "CommunicationIdentifierModel"]] = None,
        **kwargs
    ):
        """
        :keyword source: Required. ID of the source entity passing along the call details (ex.
         Application Instance ID of - CQ/AA).
        :paramtype source: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword language: Required. Language of the source entity passing along the call details,
         passed in the ISO-639 standard.
        :paramtype language: str
        :keyword status: Required. Status of the source entity passing along the call details.
        :paramtype status: str
        :keyword intended_targets: Intended targets of the source entity passing along the call
         details.
        :paramtype intended_targets: dict[str,
         ~azure.communication.callautomation.models.CommunicationIdentifierModel]
        """
        super(TeamsPhoneSourceDetails, self).__init__(**kwargs)
        self.source = source
        self.language = language
        self.status = status
        self.intended_targets = intended_targets


class TextSource(msrest.serialization.Model):
    """TextSource.

    All required parameters must be populated in order to send to Azure.

    :ivar text: Required. Text for the cognitive service to be played.
    :vartype text: str
    :ivar source_locale: Source language locale to be played
     Refer to available locales here: :code:`<seealso
     href="https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support?tabs=stt-tts"
     />`.
    :vartype source_locale: str
    :ivar voice_kind: Voice kind type. Possible values include: "male", "female".
    :vartype voice_kind: str or ~azure.communication.callautomation.models.VoiceKind
    :ivar voice_name: Voice name to be played
     Refer to available Text-to-speech voices here: :code:`<seealso
     href="https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support?tabs=stt-tts"
     />`.
    :vartype voice_name: str
    :ivar custom_voice_endpoint_id: Endpoint where the custom voice was deployed.
    :vartype custom_voice_endpoint_id: str
    """

    _validation = {
        'text': {'required': True},
    }

    _attribute_map = {
        'text': {'key': 'text', 'type': 'str'},
        'source_locale': {'key': 'sourceLocale', 'type': 'str'},
        'voice_kind': {'key': 'voiceKind', 'type': 'str'},
        'voice_name': {'key': 'voiceName', 'type': 'str'},
        'custom_voice_endpoint_id': {'key': 'customVoiceEndpointId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        text: str,
        source_locale: Optional[str] = None,
        voice_kind: Optional[Union[str, "VoiceKind"]] = None,
        voice_name: Optional[str] = None,
        custom_voice_endpoint_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword text: Required. Text for the cognitive service to be played.
        :paramtype text: str
        :keyword source_locale: Source language locale to be played
         Refer to available locales here: :code:`<seealso
         href="https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support?tabs=stt-tts"
         />`.
        :paramtype source_locale: str
        :keyword voice_kind: Voice kind type. Possible values include: "male", "female".
        :paramtype voice_kind: str or ~azure.communication.callautomation.models.VoiceKind
        :keyword voice_name: Voice name to be played
         Refer to available Text-to-speech voices here: :code:`<seealso
         href="https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support?tabs=stt-tts"
         />`.
        :paramtype voice_name: str
        :keyword custom_voice_endpoint_id: Endpoint where the custom voice was deployed.
        :paramtype custom_voice_endpoint_id: str
        """
        super(TextSource, self).__init__(**kwargs)
        self.text = text
        self.source_locale = source_locale
        self.voice_kind = voice_kind
        self.voice_name = voice_name
        self.custom_voice_endpoint_id = custom_voice_endpoint_id


class Transcription(msrest.serialization.Model):
    """Transcription.

    All required parameters must be populated in order to send to Azure.

    :ivar enable_transcription: Required. Determine if the Transcription should be enabled for the
     post recording processing.
    :vartype enable_transcription: bool
    """

    _validation = {
        'enable_transcription': {'required': True},
    }

    _attribute_map = {
        'enable_transcription': {'key': 'enableTranscription', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        enable_transcription: bool,
        **kwargs
    ):
        """
        :keyword enable_transcription: Required. Determine if the Transcription should be enabled for
         the post recording processing.
        :paramtype enable_transcription: bool
        """
        super(Transcription, self).__init__(**kwargs)
        self.enable_transcription = enable_transcription


class TranscriptionFailed(msrest.serialization.Model):
    """TranscriptionFailed.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar transcription_update: Defines the result for TranscriptionUpdate with the current status
     and the details about the status.
    :vartype transcription_update: ~azure.communication.callautomation.models.TranscriptionUpdate
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'transcription_update': {'readonly': True},
    }

    _attribute_map = {
        'transcription_update': {'key': 'transcriptionUpdate', 'type': 'TranscriptionUpdate'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(TranscriptionFailed, self).__init__(**kwargs)
        self.transcription_update = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class TranscriptionOptions(msrest.serialization.Model):
    """Configuration of live transcription.

    All required parameters must be populated in order to send to Azure.

    :ivar transport_url: Required. Transport URL for live transcription.
    :vartype transport_url: str
    :ivar transport_type: Required. The type of transport to be used for live transcription, eg.
     Websocket. Possible values include: "websocket".
    :vartype transport_type: str or
     ~azure.communication.callautomation.models.TranscriptionTransportType
    :ivar locale: Required. Defines the locale for the data e.g en-CA, en-AU.
    :vartype locale: str
    :ivar speech_model_endpoint_id: Endpoint where the custom model was deployed.
    :vartype speech_model_endpoint_id: str
    :ivar start_transcription: Required. Determines if the transcription should be started
     immediately after call is answered or not.
    :vartype start_transcription: bool
    :ivar enable_intermediate_results: Enables intermediate results for the transcribed speech.
    :vartype enable_intermediate_results: bool
    """

    _validation = {
        'transport_url': {'required': True},
        'transport_type': {'required': True},
        'locale': {'required': True},
        'start_transcription': {'required': True},
    }

    _attribute_map = {
        'transport_url': {'key': 'transportUrl', 'type': 'str'},
        'transport_type': {'key': 'transportType', 'type': 'str'},
        'locale': {'key': 'locale', 'type': 'str'},
        'speech_model_endpoint_id': {'key': 'speechModelEndpointId', 'type': 'str'},
        'start_transcription': {'key': 'startTranscription', 'type': 'bool'},
        'enable_intermediate_results': {'key': 'enableIntermediateResults', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        transport_url: str,
        transport_type: Union[str, "TranscriptionTransportType"],
        locale: str,
        start_transcription: bool,
        speech_model_endpoint_id: Optional[str] = None,
        enable_intermediate_results: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword transport_url: Required. Transport URL for live transcription.
        :paramtype transport_url: str
        :keyword transport_type: Required. The type of transport to be used for live transcription, eg.
         Websocket. Possible values include: "websocket".
        :paramtype transport_type: str or
         ~azure.communication.callautomation.models.TranscriptionTransportType
        :keyword locale: Required. Defines the locale for the data e.g en-CA, en-AU.
        :paramtype locale: str
        :keyword speech_model_endpoint_id: Endpoint where the custom model was deployed.
        :paramtype speech_model_endpoint_id: str
        :keyword start_transcription: Required. Determines if the transcription should be started
         immediately after call is answered or not.
        :paramtype start_transcription: bool
        :keyword enable_intermediate_results: Enables intermediate results for the transcribed speech.
        :paramtype enable_intermediate_results: bool
        """
        super(TranscriptionOptions, self).__init__(**kwargs)
        self.transport_url = transport_url
        self.transport_type = transport_type
        self.locale = locale
        self.speech_model_endpoint_id = speech_model_endpoint_id
        self.start_transcription = start_transcription
        self.enable_intermediate_results = enable_intermediate_results


class TranscriptionStarted(msrest.serialization.Model):
    """TranscriptionStarted.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar transcription_update: Defines the result for TranscriptionUpdate with the current status
     and the details about the status.
    :vartype transcription_update: ~azure.communication.callautomation.models.TranscriptionUpdate
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'transcription_update': {'readonly': True},
    }

    _attribute_map = {
        'transcription_update': {'key': 'transcriptionUpdate', 'type': 'TranscriptionUpdate'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(TranscriptionStarted, self).__init__(**kwargs)
        self.transcription_update = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class TranscriptionStopped(msrest.serialization.Model):
    """TranscriptionStopped.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar transcription_update: Defines the result for TranscriptionUpdate with the current status
     and the details about the status.
    :vartype transcription_update: ~azure.communication.callautomation.models.TranscriptionUpdate
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'transcription_update': {'readonly': True},
    }

    _attribute_map = {
        'transcription_update': {'key': 'transcriptionUpdate', 'type': 'TranscriptionUpdate'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(TranscriptionStopped, self).__init__(**kwargs)
        self.transcription_update = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class TranscriptionSubscription(msrest.serialization.Model):
    """Transcription Subscription Object.

    :ivar id: Subscription Id.
    :vartype id: str
    :ivar state: Transcription subscription state. Possible values include: "disabled", "inactive",
     "active".
    :vartype state: str or
     ~azure.communication.callautomation.models.TranscriptionSubscriptionState
    :ivar subscribed_result_types: Subscribed transcription result types.
    :vartype subscribed_result_types: list[str or
     ~azure.communication.callautomation.models.TranscriptionResultType]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'subscribed_result_types': {'key': 'subscribedResultTypes', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        state: Optional[Union[str, "TranscriptionSubscriptionState"]] = None,
        subscribed_result_types: Optional[List[Union[str, "TranscriptionResultType"]]] = None,
        **kwargs
    ):
        """
        :keyword id: Subscription Id.
        :paramtype id: str
        :keyword state: Transcription subscription state. Possible values include: "disabled",
         "inactive", "active".
        :paramtype state: str or
         ~azure.communication.callautomation.models.TranscriptionSubscriptionState
        :keyword subscribed_result_types: Subscribed transcription result types.
        :paramtype subscribed_result_types: list[str or
         ~azure.communication.callautomation.models.TranscriptionResultType]
        """
        super(TranscriptionSubscription, self).__init__(**kwargs)
        self.id = id
        self.state = state
        self.subscribed_result_types = subscribed_result_types


class TranscriptionUpdate(msrest.serialization.Model):
    """TranscriptionUpdate.

    :ivar transcription_status: Possible values include: "transcriptionStarted",
     "transcriptionFailed", "transcriptionResumed", "transcriptionUpdated", "transcriptionStopped",
     "unspecifiedError".
    :vartype transcription_status: str or
     ~azure.communication.callautomation.models.TranscriptionStatus
    :ivar transcription_status_details: Possible values include: "subscriptionStarted",
     "streamConnectionReestablished", "streamConnectionUnsuccessful", "streamUrlMissing",
     "serviceShutdown", "streamConnectionInterrupted", "speechServicesConnectionError",
     "subscriptionStopped", "unspecifiedError", "authenticationFailure", "badRequest",
     "tooManyRequests", "forbidden", "serviceTimeout", "transcriptionLocaleUpdated".
    :vartype transcription_status_details: str or
     ~azure.communication.callautomation.models.TranscriptionStatusDetails
    """

    _attribute_map = {
        'transcription_status': {'key': 'transcriptionStatus', 'type': 'str'},
        'transcription_status_details': {'key': 'transcriptionStatusDetails', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        transcription_status: Optional[Union[str, "TranscriptionStatus"]] = None,
        transcription_status_details: Optional[Union[str, "TranscriptionStatusDetails"]] = None,
        **kwargs
    ):
        """
        :keyword transcription_status: Possible values include: "transcriptionStarted",
         "transcriptionFailed", "transcriptionResumed", "transcriptionUpdated", "transcriptionStopped",
         "unspecifiedError".
        :paramtype transcription_status: str or
         ~azure.communication.callautomation.models.TranscriptionStatus
        :keyword transcription_status_details: Possible values include: "subscriptionStarted",
         "streamConnectionReestablished", "streamConnectionUnsuccessful", "streamUrlMissing",
         "serviceShutdown", "streamConnectionInterrupted", "speechServicesConnectionError",
         "subscriptionStopped", "unspecifiedError", "authenticationFailure", "badRequest",
         "tooManyRequests", "forbidden", "serviceTimeout", "transcriptionLocaleUpdated".
        :paramtype transcription_status_details: str or
         ~azure.communication.callautomation.models.TranscriptionStatusDetails
        """
        super(TranscriptionUpdate, self).__init__(**kwargs)
        self.transcription_status = transcription_status
        self.transcription_status_details = transcription_status_details


class TranscriptionUpdated(msrest.serialization.Model):
    """TranscriptionUpdated.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar transcription_update: Defines the result for TranscriptionUpdate with the current status
     and the details about the status.
    :vartype transcription_update: ~azure.communication.callautomation.models.TranscriptionUpdate
    :ivar call_connection_id: Call connection ID.
    :vartype call_connection_id: str
    :ivar server_call_id: Server call ID.
    :vartype server_call_id: str
    :ivar correlation_id: Correlation ID for event to call correlation. Also called ChainId for
     skype chain ID.
    :vartype correlation_id: str
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar result_information: Contains the resulting SIP code, sub-code and message.
    :vartype result_information: ~azure.communication.callautomation.models.ResultInformation
    """

    _validation = {
        'transcription_update': {'readonly': True},
    }

    _attribute_map = {
        'transcription_update': {'key': 'transcriptionUpdate', 'type': 'TranscriptionUpdate'},
        'call_connection_id': {'key': 'callConnectionId', 'type': 'str'},
        'server_call_id': {'key': 'serverCallId', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'result_information': {'key': 'resultInformation', 'type': 'ResultInformation'},
    }

    def __init__(
        self,
        *,
        call_connection_id: Optional[str] = None,
        server_call_id: Optional[str] = None,
        correlation_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        result_information: Optional["ResultInformation"] = None,
        **kwargs
    ):
        """
        :keyword call_connection_id: Call connection ID.
        :paramtype call_connection_id: str
        :keyword server_call_id: Server call ID.
        :paramtype server_call_id: str
        :keyword correlation_id: Correlation ID for event to call correlation. Also called ChainId for
         skype chain ID.
        :paramtype correlation_id: str
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword result_information: Contains the resulting SIP code, sub-code and message.
        :paramtype result_information: ~azure.communication.callautomation.models.ResultInformation
        """
        super(TranscriptionUpdated, self).__init__(**kwargs)
        self.transcription_update = None
        self.call_connection_id = call_connection_id
        self.server_call_id = server_call_id
        self.correlation_id = correlation_id
        self.operation_context = operation_context
        self.result_information = result_information


class TransferCallResponse(msrest.serialization.Model):
    """The response payload for transferring the call.

    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    """

    _attribute_map = {
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        """
        super(TransferCallResponse, self).__init__(**kwargs)
        self.operation_context = operation_context


class TransferToParticipantRequest(msrest.serialization.Model):
    """The request payload for transferring call to a participant.

    All required parameters must be populated in order to send to Azure.

    :ivar target_participant: Required. The identity of the target where call should be transferred
     to.
    :vartype target_participant:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    :ivar transferee: Transferee is the participant who is transferred away.
    :vartype transferee: ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    :ivar custom_calling_context: Used by customer to send custom calling context to targets.
    :vartype custom_calling_context:
     ~azure.communication.callautomation.models.CustomCallingContext
    :ivar source_caller_id_number: The source caller Id, a phone number, that will be used as the
     transferor's caller Id when transferring a call to a Pstn target.
    :vartype source_caller_id_number:
     ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
    """

    _validation = {
        'target_participant': {'required': True},
    }

    _attribute_map = {
        'target_participant': {'key': 'targetParticipant', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'transferee': {'key': 'transferee', 'type': 'CommunicationIdentifierModel'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
        'custom_calling_context': {'key': 'customCallingContext', 'type': 'CustomCallingContext'},
        'source_caller_id_number': {'key': 'sourceCallerIdNumber', 'type': 'PhoneNumberIdentifierModel'},
    }

    def __init__(
        self,
        *,
        target_participant: "CommunicationIdentifierModel",
        operation_context: Optional[str] = None,
        transferee: Optional["CommunicationIdentifierModel"] = None,
        operation_callback_uri: Optional[str] = None,
        custom_calling_context: Optional["CustomCallingContext"] = None,
        source_caller_id_number: Optional["PhoneNumberIdentifierModel"] = None,
        **kwargs
    ):
        """
        :keyword target_participant: Required. The identity of the target where call should be
         transferred to.
        :paramtype target_participant:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        :keyword transferee: Transferee is the participant who is transferred away.
        :paramtype transferee: ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        :keyword custom_calling_context: Used by customer to send custom calling context to targets.
        :paramtype custom_calling_context:
         ~azure.communication.callautomation.models.CustomCallingContext
        :keyword source_caller_id_number: The source caller Id, a phone number, that will be used as
         the transferor's caller Id when transferring a call to a Pstn target.
        :paramtype source_caller_id_number:
         ~azure.communication.callautomation.models.PhoneNumberIdentifierModel
        """
        super(TransferToParticipantRequest, self).__init__(**kwargs)
        self.target_participant = target_participant
        self.operation_context = operation_context
        self.transferee = transferee
        self.operation_callback_uri = operation_callback_uri
        self.custom_calling_context = custom_calling_context
        self.source_caller_id_number = source_caller_id_number


class UnholdRequest(msrest.serialization.Model):
    """The request payload for holding participant from the call.

    All required parameters must be populated in order to send to Azure.

    :ivar target_participant: Required. Participants to be hold from the call.
     Only ACS Users are supported.
    :vartype target_participant:
     ~azure.communication.callautomation.models.CommunicationIdentifierModel
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    """

    _validation = {
        'target_participant': {'required': True},
    }

    _attribute_map = {
        'target_participant': {'key': 'targetParticipant', 'type': 'CommunicationIdentifierModel'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_participant: "CommunicationIdentifierModel",
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword target_participant: Required. Participants to be hold from the call.
         Only ACS Users are supported.
        :paramtype target_participant:
         ~azure.communication.callautomation.models.CommunicationIdentifierModel
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        """
        super(UnholdRequest, self).__init__(**kwargs)
        self.target_participant = target_participant
        self.operation_context = operation_context


class UnmuteParticipantsRequest(msrest.serialization.Model):
    """The request payload for unmuting participant from the call.

    All required parameters must be populated in order to send to Azure.

    :ivar target_participants: Required. Participants to be unmuted from the call.
     Only ACS Users are supported.
    :vartype target_participants:
     list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
    :ivar operation_context: Used by customers when calling mid-call actions to correlate the
     request to the response event.
    :vartype operation_context: str
    """

    _validation = {
        'target_participants': {'required': True},
    }

    _attribute_map = {
        'target_participants': {'key': 'targetParticipants', 'type': '[CommunicationIdentifierModel]'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_participants: List["CommunicationIdentifierModel"],
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword target_participants: Required. Participants to be unmuted from the call.
         Only ACS Users are supported.
        :paramtype target_participants:
         list[~azure.communication.callautomation.models.CommunicationIdentifierModel]
        :keyword operation_context: Used by customers when calling mid-call actions to correlate the
         request to the response event.
        :paramtype operation_context: str
        """
        super(UnmuteParticipantsRequest, self).__init__(**kwargs)
        self.target_participants = target_participants
        self.operation_context = operation_context


class UnmuteParticipantsResponse(msrest.serialization.Model):
    """The response payload for unmuting participants from the call.

    :ivar operation_context: The operation context provided by client.
    :vartype operation_context: str
    """

    _attribute_map = {
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_context: The operation context provided by client.
        :paramtype operation_context: str
        """
        super(UnmuteParticipantsResponse, self).__init__(**kwargs)
        self.operation_context = operation_context


class UpdateDialogRequest(msrest.serialization.Model):
    """UpdateDialogRequest.

    All required parameters must be populated in order to send to Azure.

    :ivar dialog: Required. Dialog context.
    :vartype dialog: ~azure.communication.callautomation.models.DialogUpdateBase
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    """

    _validation = {
        'dialog': {'required': True},
    }

    _attribute_map = {
        'dialog': {'key': 'dialog', 'type': 'DialogUpdateBase'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dialog: "DialogUpdateBase",
        operation_callback_uri: Optional[str] = None,
        operation_context: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword dialog: Required. Dialog context.
        :paramtype dialog: ~azure.communication.callautomation.models.DialogUpdateBase
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        """
        super(UpdateDialogRequest, self).__init__(**kwargs)
        self.dialog = dialog
        self.operation_callback_uri = operation_callback_uri
        self.operation_context = operation_context


class UpdateTranscriptionRequest(msrest.serialization.Model):
    """UpdateTranscriptionRequest.

    :ivar locale: Defines new locale for transcription.
    :vartype locale: str
    :ivar speech_model_endpoint_id: Sets Endpoint id where the custom model was deployed.
    :vartype speech_model_endpoint_id: str
    :ivar operation_context: The value to identify context of the operation.
    :vartype operation_context: str
    :ivar operation_callback_uri: Set a callback URI that overrides the default callback URI set by
     CreateCall/AnswerCall for this operation.
     This setup is per-action. If this is not set, the default callback URI set by
     CreateCall/AnswerCall will be used.
    :vartype operation_callback_uri: str
    """

    _attribute_map = {
        'locale': {'key': 'locale', 'type': 'str'},
        'speech_model_endpoint_id': {'key': 'speechModelEndpointId', 'type': 'str'},
        'operation_context': {'key': 'operationContext', 'type': 'str'},
        'operation_callback_uri': {'key': 'operationCallbackUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        locale: Optional[str] = None,
        speech_model_endpoint_id: Optional[str] = None,
        operation_context: Optional[str] = None,
        operation_callback_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword locale: Defines new locale for transcription.
        :paramtype locale: str
        :keyword speech_model_endpoint_id: Sets Endpoint id where the custom model was deployed.
        :paramtype speech_model_endpoint_id: str
        :keyword operation_context: The value to identify context of the operation.
        :paramtype operation_context: str
        :keyword operation_callback_uri: Set a callback URI that overrides the default callback URI set
         by CreateCall/AnswerCall for this operation.
         This setup is per-action. If this is not set, the default callback URI set by
         CreateCall/AnswerCall will be used.
        :paramtype operation_callback_uri: str
        """
        super(UpdateTranscriptionRequest, self).__init__(**kwargs)
        self.locale = locale
        self.speech_model_endpoint_id = speech_model_endpoint_id
        self.operation_context = operation_context
        self.operation_callback_uri = operation_callback_uri


class UserConsent(msrest.serialization.Model):
    """UserConsent.

    :ivar recording:
    :vartype recording: int
    """

    _attribute_map = {
        'recording': {'key': 'recording', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        recording: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword recording:
        :paramtype recording: int
        """
        super(UserConsent, self).__init__(**kwargs)
        self.recording = recording
