# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
# fmt: off

def build_start_dialog_request(
    call_connection_id,  # type: str
    dialog_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}/dialogs/{dialogId}')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
        "dialogId": _SERIALIZER.url("dialog_id", dialog_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_stop_dialog_request(
    call_connection_id,  # type: str
    dialog_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    operation_callback_uri = kwargs.pop('operation_callback_uri', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}/dialogs/{dialogId}')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
        "dialogId": _SERIALIZER.url("dialog_id", dialog_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if operation_callback_uri is not None:
        query_parameters['operationCallbackUri'] = _SERIALIZER.query("operation_callback_uri", operation_callback_uri, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_update_dialog_request(
    call_connection_id,  # type: str
    dialog_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}/dialogs/{dialogId}')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
        "dialogId": _SERIALIZER.url("dialog_id", dialog_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class CallDialogOperations(object):
    """CallDialogOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.communication.callautomation.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def start_dialog(
        self,
        call_connection_id,  # type: str
        dialog_id,  # type: str
        start_dialog_request,  # type: "_models.StartDialogRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.DialogStateResponse"
        """Start a dialog targeting a particular participant on the call.

        Start a dialog.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param dialog_id: The dialog id.
        :type dialog_id: str
        :param start_dialog_request: The start dialog request.
        :type start_dialog_request: ~azure.communication.callautomation.models.StartDialogRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DialogStateResponse, or the result of cls(response)
        :rtype: ~azure.communication.callautomation.models.DialogStateResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DialogStateResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(start_dialog_request, 'StartDialogRequest')

        request = build_start_dialog_request(
            call_connection_id=call_connection_id,
            dialog_id=dialog_id,
            content_type=content_type,
            json=json,
            template_url=self.start_dialog.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('DialogStateResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    start_dialog.metadata = {'url': '/calling/callConnections/{callConnectionId}/dialogs/{dialogId}'}  # type: ignore


    @distributed_trace
    def stop_dialog(
        self,
        call_connection_id,  # type: str
        dialog_id,  # type: str
        operation_callback_uri=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """stop_dialog.

        :param call_connection_id:
        :type call_connection_id: str
        :param dialog_id:
        :type dialog_id: str
        :param operation_callback_uri:
        :type operation_callback_uri: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_stop_dialog_request(
            call_connection_id=call_connection_id,
            dialog_id=dialog_id,
            operation_callback_uri=operation_callback_uri,
            template_url=self.stop_dialog.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    stop_dialog.metadata = {'url': '/calling/callConnections/{callConnectionId}/dialogs/{dialogId}'}  # type: ignore


    @distributed_trace
    def update_dialog(
        self,
        call_connection_id,  # type: str
        dialog_id,  # type: str
        update_dialog_request,  # type: "_models.UpdateDialogRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Update an ongoing dialog in a call.

        Update a dialog.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param dialog_id: The dialog id.
        :type dialog_id: str
        :param update_dialog_request: The update dialog request.
        :type update_dialog_request: ~azure.communication.callautomation.models.UpdateDialogRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(update_dialog_request, 'UpdateDialogRequest')

        request = build_update_dialog_request(
            call_connection_id=call_connection_id,
            dialog_id=dialog_id,
            content_type=content_type,
            json=json,
            template_url=self.update_dialog.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_dialog.metadata = {'url': '/calling/callConnections/{callConnectionId}/dialogs/{dialogId}'}  # type: ignore

