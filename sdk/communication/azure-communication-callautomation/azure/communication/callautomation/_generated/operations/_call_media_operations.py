# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
# fmt: off

def build_play_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:play')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_start_transcription_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:startTranscription')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_stop_transcription_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:stopTranscription')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_cancel_all_media_operations_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:cancelAllMediaOperations')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_recognize_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:recognize')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_start_continuous_dtmf_recognition_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:startContinuousDtmfRecognition')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_stop_continuous_dtmf_recognition_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:stopContinuousDtmfRecognition')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_send_dtmf_tones_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    repeatability_request_id = kwargs.pop('repeatability_request_id', None)  # type: Optional[str]
    repeatability_first_sent = kwargs.pop('repeatability_first_sent', None)  # type: Optional[datetime.datetime]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:sendDtmfTones')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if repeatability_request_id is not None:
        header_parameters['Repeatability-Request-ID'] = _SERIALIZER.header("repeatability_request_id", repeatability_request_id, 'str')
    if repeatability_first_sent is not None:
        header_parameters['Repeatability-First-Sent'] = _SERIALIZER.header("repeatability_first_sent", repeatability_first_sent, 'rfc-1123')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_update_transcription_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:updateTranscription')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_hold_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:hold')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_unhold_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:unhold')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_start_media_streaming_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:startMediaStreaming')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_stop_media_streaming_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:stopMediaStreaming')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_interrupt_audio_and_announce_request(
    call_connection_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections/{callConnectionId}:interruptAudioAndAnnounce')
    path_format_arguments = {
        "callConnectionId": _SERIALIZER.url("call_connection_id", call_connection_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class CallMediaOperations(object):
    """CallMediaOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.communication.callautomation.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def play(
        self,
        call_connection_id,  # type: str
        play_request,  # type: "_models.PlayRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Plays audio to participants in the call.

        Plays audio to participants in the call.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param play_request: play request payload.
        :type play_request: ~azure.communication.callautomation.models.PlayRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(play_request, 'PlayRequest')

        request = build_play_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.play.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    play.metadata = {'url': '/calling/callConnections/{callConnectionId}:play'}  # type: ignore


    @distributed_trace
    def start_transcription(
        self,
        call_connection_id,  # type: str
        start_transcription_request,  # type: "_models.StartTranscriptionRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Starts transcription in the call.

        Starts transcription in the call.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param start_transcription_request:
        :type start_transcription_request:
         ~azure.communication.callautomation.models.StartTranscriptionRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(start_transcription_request, 'StartTranscriptionRequest')

        request = build_start_transcription_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.start_transcription.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    start_transcription.metadata = {'url': '/calling/callConnections/{callConnectionId}:startTranscription'}  # type: ignore


    @distributed_trace
    def stop_transcription(
        self,
        call_connection_id,  # type: str
        stop_transcription_request,  # type: "_models.StopTranscriptionRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Stops transcription in the call.

        Stops transcription in the call.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param stop_transcription_request: stop transcription request payload.
        :type stop_transcription_request:
         ~azure.communication.callautomation.models.StopTranscriptionRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(stop_transcription_request, 'StopTranscriptionRequest')

        request = build_stop_transcription_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.stop_transcription.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    stop_transcription.metadata = {'url': '/calling/callConnections/{callConnectionId}:stopTranscription'}  # type: ignore


    @distributed_trace
    def cancel_all_media_operations(
        self,
        call_connection_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Cancel all media operations in a call.

        Cancel all media operations in a call.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_cancel_all_media_operations_request(
            call_connection_id=call_connection_id,
            template_url=self.cancel_all_media_operations.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    cancel_all_media_operations.metadata = {'url': '/calling/callConnections/{callConnectionId}:cancelAllMediaOperations'}  # type: ignore


    @distributed_trace
    def recognize(
        self,
        call_connection_id,  # type: str
        recognize_request,  # type: "_models.RecognizeRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Recognize media from call.

        Recognize media from call.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param recognize_request: The media recognize request.
        :type recognize_request: ~azure.communication.callautomation.models.RecognizeRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(recognize_request, 'RecognizeRequest')

        request = build_recognize_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.recognize.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    recognize.metadata = {'url': '/calling/callConnections/{callConnectionId}:recognize'}  # type: ignore


    @distributed_trace
    def start_continuous_dtmf_recognition(
        self,
        call_connection_id,  # type: str
        continuous_dtmf_recognition_request,  # type: "_models.ContinuousDtmfRecognitionRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Start continuous Dtmf recognition by subscribing to tones.

        Start continuous Dtmf recognition by subscribing to tones.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param continuous_dtmf_recognition_request: The continuous recognize request.
        :type continuous_dtmf_recognition_request:
         ~azure.communication.callautomation.models.ContinuousDtmfRecognitionRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(continuous_dtmf_recognition_request, 'ContinuousDtmfRecognitionRequest')

        request = build_start_continuous_dtmf_recognition_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.start_continuous_dtmf_recognition.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    start_continuous_dtmf_recognition.metadata = {'url': '/calling/callConnections/{callConnectionId}:startContinuousDtmfRecognition'}  # type: ignore


    @distributed_trace
    def stop_continuous_dtmf_recognition(
        self,
        call_connection_id,  # type: str
        continuous_dtmf_recognition_request,  # type: "_models.ContinuousDtmfRecognitionRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Stop continuous Dtmf recognition by unsubscribing to tones.

        Stop continuous Dtmf recognition by unsubscribing to tones.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param continuous_dtmf_recognition_request: The continuous recognize request.
        :type continuous_dtmf_recognition_request:
         ~azure.communication.callautomation.models.ContinuousDtmfRecognitionRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(continuous_dtmf_recognition_request, 'ContinuousDtmfRecognitionRequest')

        request = build_stop_continuous_dtmf_recognition_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.stop_continuous_dtmf_recognition.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    stop_continuous_dtmf_recognition.metadata = {'url': '/calling/callConnections/{callConnectionId}:stopContinuousDtmfRecognition'}  # type: ignore


    @distributed_trace
    def send_dtmf_tones(
        self,
        call_connection_id,  # type: str
        send_dtmf_tones_request,  # type: "_models.SendDtmfTonesRequest"
        repeatability_request_id=None,  # type: Optional[str]
        repeatability_first_sent=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.SendDtmfTonesResult"
        """Send dtmf tones.

        Send dtmf tones.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param send_dtmf_tones_request: The send dtmf tones request.
        :type send_dtmf_tones_request: ~azure.communication.callautomation.models.SendDtmfTonesRequest
        :param repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated unique identifier for the request. It is a version 4 (random)
         UUID.
        :type repeatability_request_id: str
        :param repeatability_first_sent: If Repeatability-Request-ID header is specified, then
         Repeatability-First-Sent header must also be specified. The value should be the date and time
         at which the request was first created, expressed using the IMF-fixdate form of HTTP-date.
         Example: Sun, 06 Nov 1994 08:49:37 GMT.
        :type repeatability_first_sent: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SendDtmfTonesResult, or the result of cls(response)
        :rtype: ~azure.communication.callautomation.models.SendDtmfTonesResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SendDtmfTonesResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(send_dtmf_tones_request, 'SendDtmfTonesRequest')

        request = build_send_dtmf_tones_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            repeatability_request_id=repeatability_request_id,
            repeatability_first_sent=repeatability_first_sent,
            json=json,
            template_url=self.send_dtmf_tones.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('SendDtmfTonesResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    send_dtmf_tones.metadata = {'url': '/calling/callConnections/{callConnectionId}:sendDtmfTones'}  # type: ignore


    @distributed_trace
    def update_transcription(
        self,
        call_connection_id,  # type: str
        update_transcription_request,  # type: "_models.UpdateTranscriptionRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """UpdateTranscription Api.

        API to change transcription language.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param update_transcription_request: The UpdateTranscription request.
        :type update_transcription_request:
         ~azure.communication.callautomation.models.UpdateTranscriptionRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(update_transcription_request, 'UpdateTranscriptionRequest')

        request = build_update_transcription_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.update_transcription.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_transcription.metadata = {'url': '/calling/callConnections/{callConnectionId}:updateTranscription'}  # type: ignore


    @distributed_trace
    def hold(
        self,
        call_connection_id,  # type: str
        hold_request,  # type: "_models.HoldRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Hold participant from the call using identifier.

        Hold participant from the call using identifier.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param hold_request: The participants to be hold from the call.
        :type hold_request: ~azure.communication.callautomation.models.HoldRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(hold_request, 'HoldRequest')

        request = build_hold_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.hold.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    hold.metadata = {'url': '/calling/callConnections/{callConnectionId}:hold'}  # type: ignore


    @distributed_trace
    def unhold(
        self,
        call_connection_id,  # type: str
        unhold_request,  # type: "_models.UnholdRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Unhold participants from the call using identifier.

        Unhold participants from the call using identifier.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param unhold_request: The participants to be hold from the call.
        :type unhold_request: ~azure.communication.callautomation.models.UnholdRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(unhold_request, 'UnholdRequest')

        request = build_unhold_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.unhold.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    unhold.metadata = {'url': '/calling/callConnections/{callConnectionId}:unhold'}  # type: ignore


    @distributed_trace
    def start_media_streaming(
        self,
        call_connection_id,  # type: str
        start_media_streaming_request,  # type: "_models.StartMediaStreamingRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Starts media streaming in the call.

        Starts media streaming in the call.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param start_media_streaming_request:
        :type start_media_streaming_request:
         ~azure.communication.callautomation.models.StartMediaStreamingRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(start_media_streaming_request, 'StartMediaStreamingRequest')

        request = build_start_media_streaming_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.start_media_streaming.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    start_media_streaming.metadata = {'url': '/calling/callConnections/{callConnectionId}:startMediaStreaming'}  # type: ignore


    @distributed_trace
    def stop_media_streaming(
        self,
        call_connection_id,  # type: str
        stop_media_streaming_request,  # type: "_models.StopMediaStreamingRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Stops media streaming in the call.

        Stops media streaming in the call.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param stop_media_streaming_request: stop media streaming request payload.
        :type stop_media_streaming_request:
         ~azure.communication.callautomation.models.StopMediaStreamingRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(stop_media_streaming_request, 'StopMediaStreamingRequest')

        request = build_stop_media_streaming_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.stop_media_streaming.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    stop_media_streaming.metadata = {'url': '/calling/callConnections/{callConnectionId}:stopMediaStreaming'}  # type: ignore


    @distributed_trace
    def interrupt_audio_and_announce(
        self,
        call_connection_id,  # type: str
        interrupt_request,  # type: "_models.InterruptAudioAndAnnounceRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Plays audio to participants in the call.

        Plays audio to participants in the call.

        :param call_connection_id: The call connection id.
        :type call_connection_id: str
        :param interrupt_request: play request payload.
        :type interrupt_request:
         ~azure.communication.callautomation.models.InterruptAudioAndAnnounceRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(interrupt_request, 'InterruptAudioAndAnnounceRequest')

        request = build_interrupt_audio_and_announce_request(
            call_connection_id=call_connection_id,
            content_type=content_type,
            json=json,
            template_url=self.interrupt_audio_and_announce.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    interrupt_audio_and_announce.metadata = {'url': '/calling/callConnections/{callConnectionId}:interruptAudioAndAnnounce'}  # type: ignore

