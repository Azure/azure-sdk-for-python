# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
# fmt: off

def build_create_call_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    repeatability_request_id = kwargs.pop('repeatability_request_id', None)  # type: Optional[str]
    repeatability_first_sent = kwargs.pop('repeatability_first_sent', None)  # type: Optional[datetime.datetime]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if repeatability_request_id is not None:
        header_parameters['Repeatability-Request-ID'] = _SERIALIZER.header("repeatability_request_id", repeatability_request_id, 'str')
    if repeatability_first_sent is not None:
        header_parameters['Repeatability-First-Sent'] = _SERIALIZER.header("repeatability_first_sent", repeatability_first_sent, 'rfc-1123')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_answer_call_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    repeatability_request_id = kwargs.pop('repeatability_request_id', None)  # type: Optional[str]
    repeatability_first_sent = kwargs.pop('repeatability_first_sent', None)  # type: Optional[datetime.datetime]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections:answer')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if repeatability_request_id is not None:
        header_parameters['Repeatability-Request-ID'] = _SERIALIZER.header("repeatability_request_id", repeatability_request_id, 'str')
    if repeatability_first_sent is not None:
        header_parameters['Repeatability-First-Sent'] = _SERIALIZER.header("repeatability_first_sent", repeatability_first_sent, 'rfc-1123')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_redirect_call_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    repeatability_request_id = kwargs.pop('repeatability_request_id', None)  # type: Optional[str]
    repeatability_first_sent = kwargs.pop('repeatability_first_sent', None)  # type: Optional[datetime.datetime]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections:redirect')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if repeatability_request_id is not None:
        header_parameters['Repeatability-Request-ID'] = _SERIALIZER.header("repeatability_request_id", repeatability_request_id, 'str')
    if repeatability_first_sent is not None:
        header_parameters['Repeatability-First-Sent'] = _SERIALIZER.header("repeatability_first_sent", repeatability_first_sent, 'rfc-1123')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_reject_call_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    repeatability_request_id = kwargs.pop('repeatability_request_id', None)  # type: Optional[str]
    repeatability_first_sent = kwargs.pop('repeatability_first_sent', None)  # type: Optional[datetime.datetime]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections:reject')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if repeatability_request_id is not None:
        header_parameters['Repeatability-Request-ID'] = _SERIALIZER.header("repeatability_request_id", repeatability_request_id, 'str')
    if repeatability_first_sent is not None:
        header_parameters['Repeatability-First-Sent'] = _SERIALIZER.header("repeatability_first_sent", repeatability_first_sent, 'rfc-1123')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_connect_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]
    repeatability_request_id = kwargs.pop('repeatability_request_id', None)  # type: Optional[str]
    repeatability_first_sent = kwargs.pop('repeatability_first_sent', None)  # type: Optional[datetime.datetime]

    api_version = "2024-09-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/calling/callConnections:connect')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if repeatability_request_id is not None:
        header_parameters['Repeatability-Request-ID'] = _SERIALIZER.header("repeatability_request_id", repeatability_request_id, 'str')
    if repeatability_first_sent is not None:
        header_parameters['Repeatability-First-Sent'] = _SERIALIZER.header("repeatability_first_sent", repeatability_first_sent, 'rfc-1123')
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class AzureCommunicationCallAutomationServiceOperationsMixin(object):

    @distributed_trace
    def create_call(
        self,
        create_call_request,  # type: "_models.CreateCallRequest"
        repeatability_request_id=None,  # type: Optional[str]
        repeatability_first_sent=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.CallConnectionProperties"
        """Create an outbound call.

        Create an outbound call.

        :param create_call_request: The create call request.
        :type create_call_request: ~azure.communication.callautomation.models.CreateCallRequest
        :param repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated unique identifier for the request. It is a version 4 (random)
         UUID.
        :type repeatability_request_id: str
        :param repeatability_first_sent: If Repeatability-Request-ID header is specified, then
         Repeatability-First-Sent header must also be specified. The value should be the date and time
         at which the request was first created, expressed using the IMF-fixdate form of HTTP-date.
         Example: Sun, 06 Nov 1994 08:49:37 GMT.
        :type repeatability_first_sent: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CallConnectionProperties, or the result of cls(response)
        :rtype: ~azure.communication.callautomation.models.CallConnectionProperties
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.CallConnectionProperties"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(create_call_request, 'CreateCallRequest')

        request = build_create_call_request(
            content_type=content_type,
            repeatability_request_id=repeatability_request_id,
            repeatability_first_sent=repeatability_first_sent,
            json=json,
            template_url=self.create_call.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('CallConnectionProperties', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_call.metadata = {'url': '/calling/callConnections'}  # type: ignore


    @distributed_trace
    def answer_call(
        self,
        answer_call_request,  # type: "_models.AnswerCallRequest"
        repeatability_request_id=None,  # type: Optional[str]
        repeatability_first_sent=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.CallConnectionProperties"
        """Answer a Call.

        Answer a call using the IncomingCallContext from Event Grid.

        :param answer_call_request: The answer call request.
        :type answer_call_request: ~azure.communication.callautomation.models.AnswerCallRequest
        :param repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated unique identifier for the request. It is a version 4 (random)
         UUID.
        :type repeatability_request_id: str
        :param repeatability_first_sent: If Repeatability-Request-ID header is specified, then
         Repeatability-First-Sent header must also be specified. The value should be the date and time
         at which the request was first created, expressed using the IMF-fixdate form of HTTP-date.
         Example: Sun, 06 Nov 1994 08:49:37 GMT.
        :type repeatability_first_sent: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CallConnectionProperties, or the result of cls(response)
        :rtype: ~azure.communication.callautomation.models.CallConnectionProperties
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.CallConnectionProperties"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(answer_call_request, 'AnswerCallRequest')

        request = build_answer_call_request(
            content_type=content_type,
            repeatability_request_id=repeatability_request_id,
            repeatability_first_sent=repeatability_first_sent,
            json=json,
            template_url=self.answer_call.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('CallConnectionProperties', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    answer_call.metadata = {'url': '/calling/callConnections:answer'}  # type: ignore


    @distributed_trace
    def redirect_call(
        self,
        redirect_call_request,  # type: "_models.RedirectCallRequest"
        repeatability_request_id=None,  # type: Optional[str]
        repeatability_first_sent=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Redirect a call.

        Redirect a call.

        :param redirect_call_request: The redirect call request.
        :type redirect_call_request: ~azure.communication.callautomation.models.RedirectCallRequest
        :param repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated unique identifier for the request. It is a version 4 (random)
         UUID.
        :type repeatability_request_id: str
        :param repeatability_first_sent: If Repeatability-Request-ID header is specified, then
         Repeatability-First-Sent header must also be specified. The value should be the date and time
         at which the request was first created, expressed using the IMF-fixdate form of HTTP-date.
         Example: Sun, 06 Nov 1994 08:49:37 GMT.
        :type repeatability_first_sent: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(redirect_call_request, 'RedirectCallRequest')

        request = build_redirect_call_request(
            content_type=content_type,
            repeatability_request_id=repeatability_request_id,
            repeatability_first_sent=repeatability_first_sent,
            json=json,
            template_url=self.redirect_call.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    redirect_call.metadata = {'url': '/calling/callConnections:redirect'}  # type: ignore


    @distributed_trace
    def reject_call(
        self,
        reject_call_request,  # type: "_models.RejectCallRequest"
        repeatability_request_id=None,  # type: Optional[str]
        repeatability_first_sent=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Reject the call.

        Reject the call.

        :param reject_call_request: The reject call request.
        :type reject_call_request: ~azure.communication.callautomation.models.RejectCallRequest
        :param repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated unique identifier for the request. It is a version 4 (random)
         UUID.
        :type repeatability_request_id: str
        :param repeatability_first_sent: If Repeatability-Request-ID header is specified, then
         Repeatability-First-Sent header must also be specified. The value should be the date and time
         at which the request was first created, expressed using the IMF-fixdate form of HTTP-date.
         Example: Sun, 06 Nov 1994 08:49:37 GMT.
        :type repeatability_first_sent: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(reject_call_request, 'RejectCallRequest')

        request = build_reject_call_request(
            content_type=content_type,
            repeatability_request_id=repeatability_request_id,
            repeatability_first_sent=repeatability_first_sent,
            json=json,
            template_url=self.reject_call.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    reject_call.metadata = {'url': '/calling/callConnections:reject'}  # type: ignore


    @distributed_trace
    def connect(
        self,
        connect_request,  # type: "_models.ConnectRequest"
        repeatability_request_id=None,  # type: Optional[str]
        repeatability_first_sent=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.CallConnectionProperties"
        """Create a Connection to a CallLocator.

        Create a connection to a CallLocator.

        :param connect_request: The create connection request.
        :type connect_request: ~azure.communication.callautomation.models.ConnectRequest
        :param repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated unique identifier for the request. It is a version 4 (random)
         UUID.
        :type repeatability_request_id: str
        :param repeatability_first_sent: If Repeatability-Request-ID header is specified, then
         Repeatability-First-Sent header must also be specified. The value should be the date and time
         at which the request was first created, expressed using the IMF-fixdate form of HTTP-date.
         Example: Sun, 06 Nov 1994 08:49:37 GMT.
        :type repeatability_first_sent: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CallConnectionProperties, or the result of cls(response)
        :rtype: ~azure.communication.callautomation.models.CallConnectionProperties
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.CallConnectionProperties"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(connect_request, 'ConnectRequest')

        request = build_connect_request(
            content_type=content_type,
            repeatability_request_id=repeatability_request_id,
            repeatability_first_sent=repeatability_first_sent,
            json=json,
            template_url=self.connect.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CommunicationErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('CallConnectionProperties', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    connect.metadata = {'url': '/calling/callConnections:connect'}  # type: ignore

