# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ...operations._operations import (
    build_delivery_reports_get_request,
    build_opt_outs_add_request,
    build_opt_outs_check_request,
    build_opt_outs_remove_request,
    build_sms_send_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class SmsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.communication.sms.aio.AzureCommunicationSMSService`'s
        :attr:`sms` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def send(self, send_message_request: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Sends a SMS message from a phone number that belongs to the authenticated account.

        Sends a SMS message from a phone number that belongs to the authenticated account.

        :param send_message_request: Represents the body of the send message request. Required.
        :type send_message_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_message_request = {
                    "from": "str",  # The sender's phone number in E.164 format that is owned by
                      the authenticated account. Required.
                    "message": "str",  # The contents of the message that will be sent to the
                      recipient. The allowable content is defined by RFC 5724. Required.
                    "smsRecipients": [
                        {
                            "to": "str",  # The recipient's phone number in E.164 format.
                              Required.
                            "repeatabilityFirstSent": "str",  # Optional. MUST be sent by
                              clients to specify that a request is repeatable. Repeatability-First-Sent
                              is used to specify the date and time at which the request was first
                              created.eg- Tue, 26 Mar 2019 16:06:51 GMT.
                            "repeatabilityRequestId": "str"  # Optional. If specified,
                              the client directs that the request is repeatable; that is, the client
                              can make the request multiple times with the same
                              Repeatability-Request-ID and get back an appropriate response without the
                              server executing the request multiple times. The value of the
                              Repeatability-Request-ID is an opaque string representing a
                              client-generated, 36-character hexadecimal case-insensitive encoding of a
                              UUID (GUID), identifier for the request.
                        }
                    ],
                    "smsSendOptions": {
                        "enableDeliveryReport": bool,  # Enable this flag to receive a
                          delivery report for this message on the Azure Resource EventGrid. Required.
                        "deliveryReportTimeoutInSeconds": 0,  # Optional. Time to wait for a
                          delivery report. After this time a delivery report with timeout error code is
                          generated.
                        "messagingConnect": {
                            "apiKey": "str",  # Represents the API key associated with
                              the customer's account in the Messaging Connect Partner portal. Required.
                            "partner": "str"  # Specifies the partner associated with the
                              API key. Required.
                        },
                        "tag": "str"  # Optional. Use this field to provide metadata that
                          will then be sent back in the corresponding Delivery Report.
                    }
                }

                # response body for status code(s): 202
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # HTTP Status code. Required.
                            "successful": bool,  # Indicates if the message is processed
                              successfully or not. Required.
                            "to": "str",  # The recipient's phone number in E.164 format.
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx/repeatable errors.
                            "messageId": "str",  # Optional. The identifier of the
                              outgoing Sms message. Only present if message processed.
                            "repeatabilityResult": "str"  # Optional. The result of a
                              repeatable request with one of the case-insensitive values accepted or
                              rejected. Known values are: "accepted" and "rejected".
                        }
                    ]
                }
        """

    @overload
    async def send(self, send_message_request: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Sends a SMS message from a phone number that belongs to the authenticated account.

        Sends a SMS message from a phone number that belongs to the authenticated account.

        :param send_message_request: Represents the body of the send message request. Required.
        :type send_message_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # HTTP Status code. Required.
                            "successful": bool,  # Indicates if the message is processed
                              successfully or not. Required.
                            "to": "str",  # The recipient's phone number in E.164 format.
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx/repeatable errors.
                            "messageId": "str",  # Optional. The identifier of the
                              outgoing Sms message. Only present if message processed.
                            "repeatabilityResult": "str"  # Optional. The result of a
                              repeatable request with one of the case-insensitive values accepted or
                              rejected. Known values are: "accepted" and "rejected".
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def send(self, send_message_request: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Sends a SMS message from a phone number that belongs to the authenticated account.

        Sends a SMS message from a phone number that belongs to the authenticated account.

        :param send_message_request: Represents the body of the send message request. Is either a model
         type or a IO type. Required.
        :type send_message_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # HTTP Status code. Required.
                            "successful": bool,  # Indicates if the message is processed
                              successfully or not. Required.
                            "to": "str",  # The recipient's phone number in E.164 format.
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx/repeatable errors.
                            "messageId": "str",  # Optional. The identifier of the
                              outgoing Sms message. Only present if message processed.
                            "repeatabilityResult": "str"  # Optional. The result of a
                              repeatable request with one of the case-insensitive values accepted or
                              rejected. Known values are: "accepted" and "rejected".
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(send_message_request, (IO, bytes)):
            _content = send_message_request
        else:
            _json = send_message_request

        request = build_sms_send_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class OptOutsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.communication.sms.aio.AzureCommunicationSMSService`'s
        :attr:`opt_outs` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def add(self, body: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Add phone numbers to the optouts list which shall stop receiving messages from a sender number.

        Add phone numbers to the optouts list which shall stop receiving messages from a sender number.

        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "from": "str",  # The sender's identifier (typically phone number in E.164
                      format) that is owned by the authenticated account. Required.
                    "recipients": [
                        {
                            "to": "str"  # The recipient's phone number (in E.164
                              format). Required.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """

    @overload
    async def add(self, body: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Add phone numbers to the optouts list which shall stop receiving messages from a sender number.

        Add phone numbers to the optouts list which shall stop receiving messages from a sender number.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def add(self, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Add phone numbers to the optouts list which shall stop receiving messages from a sender number.

        Add phone numbers to the optouts list which shall stop receiving messages from a sender number.

        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_opt_outs_add_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    async def remove(self, body: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Remove phone numbers from the optouts list.

        Remove phone numbers from the optouts list.

        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "from": "str",  # The sender's identifier (typically phone number in E.164
                      format) that is owned by the authenticated account. Required.
                    "recipients": [
                        {
                            "to": "str"  # The recipient's phone number (in E.164
                              format). Required.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """

    @overload
    async def remove(self, body: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Remove phone numbers from the optouts list.

        Remove phone numbers from the optouts list.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def remove(self, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Remove phone numbers from the optouts list.

        Remove phone numbers from the optouts list.

        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_opt_outs_remove_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    async def check(self, body: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Check the opt out status for a recipient phone number with a sender phone number.

        Check the opt out status for a recipient phone number with a sender phone number.

        :param body: Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "from": "str",  # The sender's identifier (typically phone number in E.164
                      format) that is owned by the authenticated account. Required.
                    "recipients": [
                        {
                            "to": "str"  # The recipient's phone number (in E.164
                              format). Required.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """

    @overload
    async def check(self, body: IO, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Check the opt out status for a recipient phone number with a sender phone number.

        Check the opt out status for a recipient phone number with a sender phone number.

        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def check(self, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Check the opt out status for a recipient phone number with a sender phone number.

        Check the opt out status for a recipient phone number with a sender phone number.

        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "httpStatusCode": 0,  # Required.
                            "to": "str",  # The recipient phone number (in E.164 format).
                              Required.
                            "errorMessage": "str",  # Optional. Optional error message in
                              case of 4xx/5xx errors.
                            "isOptedOut": bool  # Optional. Optional flag specifying if
                              number was Opted Out from receiving messages.
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_opt_outs_check_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class DeliveryReportsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.communication.sms.aio.AzureCommunicationSMSService`'s
        :attr:`delivery_reports` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get(self, outgoing_message_id: str, **kwargs: Any) -> JSON:
        """Gets delivery report for a specific outgoing message.

        Gets delivery report for a specific outgoing message.

        :param outgoing_message_id: The identifier of the outgoing message. Required.
        :type outgoing_message_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "deliveryStatus": "str",  # The delivery status of the message. Required.
                      Known values are: "Delivered" and "Failed".
                    "from": "str",  # The sender's phone number in E.164 format. Required.
                    "messageId": "str",  # The identifier of the outgoing message. Required.
                    "to": "str",  # The recipient's phone number in E.164 format. Required.
                    "deliveryAttempts": [
                        {
                            "segmentsFailed": 0,  # Number of message segments that
                              failed to be delivered. Required.
                            "segmentsSucceeded": 0,  # Number of message segments that
                              were successfully delivered. Required.
                            "timestamp": "2020-02-20 00:00:00"  # The timestamp of the
                              delivery attempt. Required.
                        }
                    ],
                    "deliveryStatusDetails": "str",  # Optional. Detailed information about the
                      delivery status.
                    "receivedTimestamp": "2020-02-20 00:00:00",  # Optional. The timestamp when
                      the delivery report was received.
                    "tag": "str"  # Optional. Custom tag provided when sending the message.
                }
                # response body for status code(s): 404
                response == {
                    "status": 0,  # The HTTP status code. Required.
                    "title": "str",  # A short, human-readable summary of the problem type.
                      Required.
                    "type": "str",  # A URI reference that identifies the problem type. Required.
                    "traceId": "str"  # Optional. The trace identifier for the request.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_delivery_reports_get_request(
            outgoing_message_id=outgoing_message_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 404:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)
