# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class AcceptJobOfferResponse(msrest.serialization.Model):
    """Response containing Id's for the worker, job, and assignment from an accepted offer.

    All required parameters must be populated in order to send to Azure.

    :ivar assignment_id: Required. The assignment Id that assigns a worker that has accepted an
     offer to a job.
    :vartype assignment_id: str
    :ivar job_id: Required. The Id of the job assigned.
    :vartype job_id: str
    :ivar worker_id: Required. The Id of the worker that has been assigned this job.
    :vartype worker_id: str
    """

    _validation = {
        'assignment_id': {'required': True},
        'job_id': {'required': True},
        'worker_id': {'required': True},
    }

    _attribute_map = {
        'assignment_id': {'key': 'assignmentId', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'worker_id': {'key': 'workerId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword assignment_id: Required. The assignment Id that assigns a worker that has accepted an
         offer to a job.
        :paramtype assignment_id: str
        :keyword job_id: Required. The Id of the job assigned.
        :paramtype job_id: str
        :keyword worker_id: Required. The Id of the worker that has been assigned this job.
        :paramtype worker_id: str
        """
        super(AcceptJobOfferResponse, self).__init__(**kwargs)
        self.assignment_id = kwargs['assignment_id']
        self.job_id = kwargs['job_id']
        self.worker_id = kwargs['worker_id']


class RouterRule(msrest.serialization.Model):
    """A rule of one of the following types:

StaticRule:  A rule providing static rules that always return the same result, regardless of input.
DirectMapRule:  A rule that return the same labels as the input labels.
ExpressionRule: A rule providing inline expression rules.
AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureFunctionRule, DirectMapRule, ExpressionRule, StaticRule.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Rule.Constant filled by
     server.
    :vartype kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'azure-function-rule': 'AzureFunctionRule', 'direct-map-rule': 'DirectMapRule', 'expression-rule': 'ExpressionRule', 'static-rule': 'StaticRule'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(RouterRule, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class AzureFunctionRule(RouterRule):
    """A rule providing a binding to an HTTP Triggered Azure Function.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Rule.Constant filled by
     server.
    :vartype kind: str
    :ivar function_url: Required. URL for Azure Function.
    :vartype function_url: str
    :ivar credential: Credentials used to access Azure function rule.
    :vartype credential: ~azure.communication.jobrouter.models.AzureFunctionRuleCredential
    """

    _validation = {
        'kind': {'required': True},
        'function_url': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'function_url': {'key': 'functionUrl', 'type': 'str'},
        'credential': {'key': 'credential', 'type': 'AzureFunctionRuleCredential'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword function_url: Required. URL for Azure Function.
        :paramtype function_url: str
        :keyword credential: Credentials used to access Azure function rule.
        :paramtype credential: ~azure.communication.jobrouter.models.AzureFunctionRuleCredential
        """
        super(AzureFunctionRule, self).__init__(**kwargs)
        self.kind = 'azure-function-rule'  # type: str
        self.function_url = kwargs['function_url']
        self.credential = kwargs.get('credential', None)


class AzureFunctionRuleCredential(msrest.serialization.Model):
    """Credentials used to access Azure function rule.

    :ivar function_key: (Optional) Access key scoped to a particular function.
    :vartype function_key: str
    :ivar app_key: (Optional) Access key scoped to a Azure Function app.
     This key grants access to all functions under the app.
    :vartype app_key: str
    :ivar client_id: (Optional) Client id, when AppKey is provided
     In context of Azure function, this is usually the name of the key.
    :vartype client_id: str
    """

    _validation = {
        'function_key': {'max_length': 500, 'min_length': 0},
        'app_key': {'max_length': 500, 'min_length': 0},
        'client_id': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'function_key': {'key': 'functionKey', 'type': 'str'},
        'app_key': {'key': 'appKey', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword function_key: (Optional) Access key scoped to a particular function.
        :paramtype function_key: str
        :keyword app_key: (Optional) Access key scoped to a Azure Function app.
         This key grants access to all functions under the app.
        :paramtype app_key: str
        :keyword client_id: (Optional) Client id, when AppKey is provided
         In context of Azure function, this is usually the name of the key.
        :paramtype client_id: str
        """
        super(AzureFunctionRuleCredential, self).__init__(**kwargs)
        self.function_key = kwargs.get('function_key', None)
        self.app_key = kwargs.get('app_key', None)
        self.client_id = kwargs.get('client_id', None)


class DistributionMode(msrest.serialization.Model):
    """Abstract base class for defining a distribution mode.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: BestWorkerMode, LongestIdleMode, RoundRobinMode.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Mode.Constant filled by
     server.
    :vartype kind: str
    :ivar min_concurrent_offers: Required. Governs the minimum desired number of active concurrent
     offers a job can have.
    :vartype min_concurrent_offers: int
    :ivar max_concurrent_offers: Required. Governs the maximum number of active concurrent offers a
     job can have.
    :vartype max_concurrent_offers: int
    :ivar bypass_selectors: (Optional)
     If set to true, then router will match workers to jobs even if they don't match label
     selectors.
     Warning: You may get workers that are not qualified for the job they are matched with if you
     set this
     variable to true. This flag is intended more for temporary usage.
     By default, set to false.
    :vartype bypass_selectors: bool
    """

    _validation = {
        'kind': {'required': True},
        'min_concurrent_offers': {'required': True},
        'max_concurrent_offers': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'min_concurrent_offers': {'key': 'minConcurrentOffers', 'type': 'int'},
        'max_concurrent_offers': {'key': 'maxConcurrentOffers', 'type': 'int'},
        'bypass_selectors': {'key': 'bypassSelectors', 'type': 'bool'},
    }

    _subtype_map = {
        'kind': {'best-worker': 'BestWorkerMode', 'longest-idle': 'LongestIdleMode', 'round-robin': 'RoundRobinMode'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min_concurrent_offers: Required. Governs the minimum desired number of active
         concurrent offers a job can have.
        :paramtype min_concurrent_offers: int
        :keyword max_concurrent_offers: Required. Governs the maximum number of active concurrent
         offers a job can have.
        :paramtype max_concurrent_offers: int
        :keyword bypass_selectors: (Optional)
         If set to true, then router will match workers to jobs even if they don't match label
         selectors.
         Warning: You may get workers that are not qualified for the job they are matched with if you
         set this
         variable to true. This flag is intended more for temporary usage.
         By default, set to false.
        :paramtype bypass_selectors: bool
        """
        super(DistributionMode, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]
        self.min_concurrent_offers = kwargs['min_concurrent_offers']
        self.max_concurrent_offers = kwargs['max_concurrent_offers']
        self.bypass_selectors = kwargs.get('bypass_selectors', None)


class BestWorkerMode(DistributionMode):
    """Jobs are distributed to the worker with the strongest abilities available.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Mode.Constant filled by
     server.
    :vartype kind: str
    :ivar min_concurrent_offers: Required. Governs the minimum desired number of active concurrent
     offers a job can have.
    :vartype min_concurrent_offers: int
    :ivar max_concurrent_offers: Required. Governs the maximum number of active concurrent offers a
     job can have.
    :vartype max_concurrent_offers: int
    :ivar bypass_selectors: (Optional)
     If set to true, then router will match workers to jobs even if they don't match label
     selectors.
     Warning: You may get workers that are not qualified for the job they are matched with if you
     set this
     variable to true. This flag is intended more for temporary usage.
     By default, set to false.
    :vartype bypass_selectors: bool
    :ivar scoring_rule: A rule of one of the following types:
    
     StaticRule:  A rule providing static rules that always return the same result, regardless of
     input.
     DirectMapRule:  A rule that return the same labels as the input labels.
     ExpressionRule: A rule providing inline expression rules.
     AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
    :vartype scoring_rule: ~azure.communication.jobrouter.models.RouterRule
    :ivar scoring_rule_options: Encapsulates all options that can be passed as parameters for
     scoring rule with BestWorkerMode.
    :vartype scoring_rule_options: ~azure.communication.jobrouter.models.ScoringRuleOptions
    """

    _validation = {
        'kind': {'required': True},
        'min_concurrent_offers': {'required': True},
        'max_concurrent_offers': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'min_concurrent_offers': {'key': 'minConcurrentOffers', 'type': 'int'},
        'max_concurrent_offers': {'key': 'maxConcurrentOffers', 'type': 'int'},
        'bypass_selectors': {'key': 'bypassSelectors', 'type': 'bool'},
        'scoring_rule': {'key': 'scoringRule', 'type': 'RouterRule'},
        'scoring_rule_options': {'key': 'scoringRuleOptions', 'type': 'ScoringRuleOptions'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min_concurrent_offers: Required. Governs the minimum desired number of active
         concurrent offers a job can have.
        :paramtype min_concurrent_offers: int
        :keyword max_concurrent_offers: Required. Governs the maximum number of active concurrent
         offers a job can have.
        :paramtype max_concurrent_offers: int
        :keyword bypass_selectors: (Optional)
         If set to true, then router will match workers to jobs even if they don't match label
         selectors.
         Warning: You may get workers that are not qualified for the job they are matched with if you
         set this
         variable to true. This flag is intended more for temporary usage.
         By default, set to false.
        :paramtype bypass_selectors: bool
        :keyword scoring_rule: A rule of one of the following types:
        
         StaticRule:  A rule providing static rules that always return the same result, regardless of
         input.
         DirectMapRule:  A rule that return the same labels as the input labels.
         ExpressionRule: A rule providing inline expression rules.
         AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        :paramtype scoring_rule: ~azure.communication.jobrouter.models.RouterRule
        :keyword scoring_rule_options: Encapsulates all options that can be passed as parameters for
         scoring rule with BestWorkerMode.
        :paramtype scoring_rule_options: ~azure.communication.jobrouter.models.ScoringRuleOptions
        """
        super(BestWorkerMode, self).__init__(**kwargs)
        self.kind = 'best-worker'  # type: str
        self.scoring_rule = kwargs.get('scoring_rule', None)
        self.scoring_rule_options = kwargs.get('scoring_rule_options', None)


class ExceptionAction(msrest.serialization.Model):
    """The action to take when the exception is triggered.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: CancelExceptionAction, ManualReclassifyExceptionAction, ReclassifyExceptionAction.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of ExceptionAction.Constant
     filled by server.
    :vartype kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'cancel': 'CancelExceptionAction', 'manual-reclassify': 'ManualReclassifyExceptionAction', 'reclassify': 'ReclassifyExceptionAction'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ExceptionAction, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class CancelExceptionAction(ExceptionAction):
    """An action that marks a job as cancelled.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of ExceptionAction.Constant
     filled by server.
    :vartype kind: str
    :ivar note: (Optional) A note that will be appended to the jobs' Notes collection with th
     current timestamp.
    :vartype note: str
    :ivar disposition_code: (Optional) Indicates the outcome of the job, populate this field with
     your own custom values.
    :vartype disposition_code: str
    """

    _validation = {
        'kind': {'required': True},
        'note': {'max_length': 2000, 'min_length': 0},
        'disposition_code': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'note': {'key': 'note', 'type': 'str'},
        'disposition_code': {'key': 'dispositionCode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword note: (Optional) A note that will be appended to the jobs' Notes collection with th
         current timestamp.
        :paramtype note: str
        :keyword disposition_code: (Optional) Indicates the outcome of the job, populate this field
         with your own custom values.
        :paramtype disposition_code: str
        """
        super(CancelExceptionAction, self).__init__(**kwargs)
        self.kind = 'cancel'  # type: str
        self.note = kwargs.get('note', None)
        self.disposition_code = kwargs.get('disposition_code', None)


class CancelJobRequest(msrest.serialization.Model):
    """Request payload for deleting a job.

    :ivar note: (Optional) A note that will be appended to the jobs' Notes collection with th
     current timestamp.
    :vartype note: str
    :ivar disposition_code: Indicates the outcome of the job, populate this field with your own
     custom values.
     If not provided, default value of "Cancelled" is set.
    :vartype disposition_code: str
    """

    _validation = {
        'note': {'max_length': 2000, 'min_length': 0},
        'disposition_code': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'note': {'key': 'note', 'type': 'str'},
        'disposition_code': {'key': 'dispositionCode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword note: (Optional) A note that will be appended to the jobs' Notes collection with th
         current timestamp.
        :paramtype note: str
        :keyword disposition_code: Indicates the outcome of the job, populate this field with your own
         custom values.
         If not provided, default value of "Cancelled" is set.
        :paramtype disposition_code: str
        """
        super(CancelJobRequest, self).__init__(**kwargs)
        self.note = kwargs.get('note', None)
        self.disposition_code = kwargs.get('disposition_code', None)


class ChannelConfiguration(msrest.serialization.Model):
    """Represents the capacity a job in this channel will consume from a worker.

    All required parameters must be populated in order to send to Azure.

    :ivar capacity_cost_per_job: Required. The amount of capacity that an instance of a job of this
     channel will consume of the total worker capacity.
    :vartype capacity_cost_per_job: int
    """

    _validation = {
        'capacity_cost_per_job': {'required': True},
    }

    _attribute_map = {
        'capacity_cost_per_job': {'key': 'capacityCostPerJob', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword capacity_cost_per_job: Required. The amount of capacity that an instance of a job of
         this channel will consume of the total worker capacity.
        :paramtype capacity_cost_per_job: int
        """
        super(ChannelConfiguration, self).__init__(**kwargs)
        self.capacity_cost_per_job = kwargs['capacity_cost_per_job']


class ClassificationPolicy(msrest.serialization.Model):
    """A container for the rules that govern how jobs are classified.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique identifier of this policy.
    :vartype id: str
    :ivar name: Friendly name of this policy.
    :vartype name: str
    :ivar fallback_queue_id: The fallback queue to select if the queue selector doesn't find a
     match.
    :vartype fallback_queue_id: str
    :ivar queue_selectors: The queue selectors to resolve a queue for a given job.
    :vartype queue_selectors: list[~azure.communication.jobrouter.models.QueueSelectorAttachment]
    :ivar prioritization_rule: A rule of one of the following types:
    
     StaticRule:  A rule providing static rules that always return the same result, regardless of
     input.
     DirectMapRule:  A rule that return the same labels as the input labels.
     ExpressionRule: A rule providing inline expression rules.
     AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
    :vartype prioritization_rule: ~azure.communication.jobrouter.models.RouterRule
    :ivar worker_selectors: The worker label selectors to attach to a given job.
    :vartype worker_selectors: list[~azure.communication.jobrouter.models.WorkerSelectorAttachment]
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'fallback_queue_id': {'key': 'fallbackQueueId', 'type': 'str'},
        'queue_selectors': {'key': 'queueSelectors', 'type': '[QueueSelectorAttachment]'},
        'prioritization_rule': {'key': 'prioritizationRule', 'type': 'RouterRule'},
        'worker_selectors': {'key': 'workerSelectors', 'type': '[WorkerSelectorAttachment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Friendly name of this policy.
        :paramtype name: str
        :keyword fallback_queue_id: The fallback queue to select if the queue selector doesn't find a
         match.
        :paramtype fallback_queue_id: str
        :keyword queue_selectors: The queue selectors to resolve a queue for a given job.
        :paramtype queue_selectors: list[~azure.communication.jobrouter.models.QueueSelectorAttachment]
        :keyword prioritization_rule: A rule of one of the following types:
        
         StaticRule:  A rule providing static rules that always return the same result, regardless of
         input.
         DirectMapRule:  A rule that return the same labels as the input labels.
         ExpressionRule: A rule providing inline expression rules.
         AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        :paramtype prioritization_rule: ~azure.communication.jobrouter.models.RouterRule
        :keyword worker_selectors: The worker label selectors to attach to a given job.
        :paramtype worker_selectors:
         list[~azure.communication.jobrouter.models.WorkerSelectorAttachment]
        """
        super(ClassificationPolicy, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.fallback_queue_id = kwargs.get('fallback_queue_id', None)
        self.queue_selectors = kwargs.get('queue_selectors', None)
        self.prioritization_rule = kwargs.get('prioritization_rule', None)
        self.worker_selectors = kwargs.get('worker_selectors', None)


class ClassificationPolicyCollection(msrest.serialization.Model):
    """A paged collection of classification policies.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.communication.jobrouter.models.PagedClassificationPolicy]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PagedClassificationPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.communication.jobrouter.models.PagedClassificationPolicy]
        """
        super(ClassificationPolicyCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = None


class CloseJobRequest(msrest.serialization.Model):
    """Request payload for closing jobs.

    All required parameters must be populated in order to send to Azure.

    :ivar assignment_id: Required. The assignment within which the job is to be closed.
    :vartype assignment_id: str
    :ivar disposition_code: Indicates the outcome of the job, populate this field with your own
     custom values.
    :vartype disposition_code: str
    :ivar close_time: If not provided, worker capacity is released immediately along with a
     JobClosedEvent notification.
     If provided, worker capacity is released along with a JobClosedEvent notification at a future
     time.
    :vartype close_time: ~datetime.datetime
    :ivar note: (Optional) A note that will be appended to the jobs' Notes collection with th
     current timestamp.
    :vartype note: str
    """

    _validation = {
        'assignment_id': {'required': True, 'max_length': 50, 'min_length': 0},
        'disposition_code': {'max_length': 500, 'min_length': 0},
        'note': {'max_length': 2000, 'min_length': 0},
    }

    _attribute_map = {
        'assignment_id': {'key': 'assignmentId', 'type': 'str'},
        'disposition_code': {'key': 'dispositionCode', 'type': 'str'},
        'close_time': {'key': 'closeTime', 'type': 'iso-8601'},
        'note': {'key': 'note', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword assignment_id: Required. The assignment within which the job is to be closed.
        :paramtype assignment_id: str
        :keyword disposition_code: Indicates the outcome of the job, populate this field with your own
         custom values.
        :paramtype disposition_code: str
        :keyword close_time: If not provided, worker capacity is released immediately along with a
         JobClosedEvent notification.
         If provided, worker capacity is released along with a JobClosedEvent notification at a future
         time.
        :paramtype close_time: ~datetime.datetime
        :keyword note: (Optional) A note that will be appended to the jobs' Notes collection with th
         current timestamp.
        :paramtype note: str
        """
        super(CloseJobRequest, self).__init__(**kwargs)
        self.assignment_id = kwargs['assignment_id']
        self.disposition_code = kwargs.get('disposition_code', None)
        self.close_time = kwargs.get('close_time', None)
        self.note = kwargs.get('note', None)


class CommunicationErrorResponse(msrest.serialization.Model):
    """The Communication Services error.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required. The Communication Services error.
    :vartype error: ~azure.communication.jobrouter.models.JobRouterError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'JobRouterError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: Required. The Communication Services error.
        :paramtype error: ~azure.communication.jobrouter.models.JobRouterError
        """
        super(CommunicationErrorResponse, self).__init__(**kwargs)
        self.error = kwargs['error']


class CompleteJobRequest(msrest.serialization.Model):
    """Request payload for completing jobs.

    All required parameters must be populated in order to send to Azure.

    :ivar assignment_id: Required. The assignment within the job to complete.
    :vartype assignment_id: str
    :ivar note: (Optional) A note that will be appended to the jobs' Notes collection with th
     current timestamp.
    :vartype note: str
    """

    _validation = {
        'assignment_id': {'required': True, 'max_length': 50, 'min_length': 0},
        'note': {'max_length': 2000, 'min_length': 0},
    }

    _attribute_map = {
        'assignment_id': {'key': 'assignmentId', 'type': 'str'},
        'note': {'key': 'note', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword assignment_id: Required. The assignment within the job to complete.
        :paramtype assignment_id: str
        :keyword note: (Optional) A note that will be appended to the jobs' Notes collection with th
         current timestamp.
        :paramtype note: str
        """
        super(CompleteJobRequest, self).__init__(**kwargs)
        self.assignment_id = kwargs['assignment_id']
        self.note = kwargs.get('note', None)


class QueueSelectorAttachment(msrest.serialization.Model):
    """An attachment of label selectors to resolve a queue to a job from a classification policy.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ConditionalQueueSelector, PassThroughQueueSelector, RuleEngineQueueSelector, StaticQueueSelector, WeightedAllocationQueueSelector.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'conditional': 'ConditionalQueueSelector', 'pass-through': 'PassThroughQueueSelector', 'rule-engine': 'RuleEngineQueueSelector', 'static': 'StaticQueueSelector', 'weighted-allocation-queue-selector': 'WeightedAllocationQueueSelector'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(QueueSelectorAttachment, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class ConditionalQueueSelector(QueueSelectorAttachment):
    """Describes a set of label selectors that will be attached if the given condition resolves to true.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar condition: Required. A rule of one of the following types:
    
     StaticRule:  A rule providing static rules that always return the same result, regardless of
     input.
     DirectMapRule:  A rule that return the same labels as the input labels.
     ExpressionRule: A rule providing inline expression rules.
     AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
    :vartype condition: ~azure.communication.jobrouter.models.RouterRule
    :ivar label_selectors: Required. The label selectors to attach.
    :vartype label_selectors: list[~azure.communication.jobrouter.models.QueueSelector]
    """

    _validation = {
        'kind': {'required': True},
        'condition': {'required': True},
        'label_selectors': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'condition': {'key': 'condition', 'type': 'RouterRule'},
        'label_selectors': {'key': 'labelSelectors', 'type': '[QueueSelector]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword condition: Required. A rule of one of the following types:
        
         StaticRule:  A rule providing static rules that always return the same result, regardless of
         input.
         DirectMapRule:  A rule that return the same labels as the input labels.
         ExpressionRule: A rule providing inline expression rules.
         AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        :paramtype condition: ~azure.communication.jobrouter.models.RouterRule
        :keyword label_selectors: Required. The label selectors to attach.
        :paramtype label_selectors: list[~azure.communication.jobrouter.models.QueueSelector]
        """
        super(ConditionalQueueSelector, self).__init__(**kwargs)
        self.kind = 'conditional'  # type: str
        self.condition = kwargs['condition']
        self.label_selectors = kwargs['label_selectors']


class WorkerSelectorAttachment(msrest.serialization.Model):
    """An attachment which attaches WorkerSelectors to workers.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ConditionalWorkerSelector, PassThroughWorkerSelector, RuleEngineWorkerSelector, StaticWorkerSelector, WeightedAllocationWorkerSelector.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'conditional': 'ConditionalWorkerSelector', 'pass-through': 'PassThroughWorkerSelector', 'rule-engine': 'RuleEngineWorkerSelector', 'static': 'StaticWorkerSelector', 'weighted-allocation-worker-selector': 'WeightedAllocationWorkerSelector'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(WorkerSelectorAttachment, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class ConditionalWorkerSelector(WorkerSelectorAttachment):
    """Describes a set of label selectors that will be attached if the given condition resolves to true.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar condition: Required. A rule of one of the following types:
    
     StaticRule:  A rule providing static rules that always return the same result, regardless of
     input.
     DirectMapRule:  A rule that return the same labels as the input labels.
     ExpressionRule: A rule providing inline expression rules.
     AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
    :vartype condition: ~azure.communication.jobrouter.models.RouterRule
    :ivar label_selectors: Required. The label selectors to attach.
    :vartype label_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
    """

    _validation = {
        'kind': {'required': True},
        'condition': {'required': True},
        'label_selectors': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'condition': {'key': 'condition', 'type': 'RouterRule'},
        'label_selectors': {'key': 'labelSelectors', 'type': '[WorkerSelector]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword condition: Required. A rule of one of the following types:
        
         StaticRule:  A rule providing static rules that always return the same result, regardless of
         input.
         DirectMapRule:  A rule that return the same labels as the input labels.
         ExpressionRule: A rule providing inline expression rules.
         AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        :paramtype condition: ~azure.communication.jobrouter.models.RouterRule
        :keyword label_selectors: Required. The label selectors to attach.
        :paramtype label_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
        """
        super(ConditionalWorkerSelector, self).__init__(**kwargs)
        self.kind = 'conditional'  # type: str
        self.condition = kwargs['condition']
        self.label_selectors = kwargs['label_selectors']


class DirectMapRule(RouterRule):
    """A rule that return the same labels as the input labels.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Rule.Constant filled by
     server.
    :vartype kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DirectMapRule, self).__init__(**kwargs)
        self.kind = 'direct-map-rule'  # type: str


class DistributionPolicy(msrest.serialization.Model):
    """Policy governing how jobs are distributed to workers.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The unique identifier of the policy.
    :vartype id: str
    :ivar name: The human readable name of the policy.
    :vartype name: str
    :ivar offer_ttl_seconds: The expiry time of any offers created under this policy will be
     governed by the offer time to live.
    :vartype offer_ttl_seconds: float
    :ivar mode: Abstract base class for defining a distribution mode.
    :vartype mode: ~azure.communication.jobrouter.models.DistributionMode
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'offer_ttl_seconds': {'key': 'offerTtlSeconds', 'type': 'float'},
        'mode': {'key': 'mode', 'type': 'DistributionMode'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The human readable name of the policy.
        :paramtype name: str
        :keyword offer_ttl_seconds: The expiry time of any offers created under this policy will be
         governed by the offer time to live.
        :paramtype offer_ttl_seconds: float
        :keyword mode: Abstract base class for defining a distribution mode.
        :paramtype mode: ~azure.communication.jobrouter.models.DistributionMode
        """
        super(DistributionPolicy, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.offer_ttl_seconds = kwargs.get('offer_ttl_seconds', None)
        self.mode = kwargs.get('mode', None)


class DistributionPolicyCollection(msrest.serialization.Model):
    """A paged collection of distribution policies.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.communication.jobrouter.models.PagedDistributionPolicy]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PagedDistributionPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.communication.jobrouter.models.PagedDistributionPolicy]
        """
        super(DistributionPolicyCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = None


class ExceptionPolicy(msrest.serialization.Model):
    """A policy that defines actions to execute when exception are triggered.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Id of the exception policy.
    :vartype id: str
    :ivar name: (Optional) The name of the exception policy.
    :vartype name: str
    :ivar exception_rules: (Optional) A dictionary collection of exception rules on the exception
     policy. Key is the Id of each exception rule.
    :vartype exception_rules: dict[str, ~azure.communication.jobrouter.models.ExceptionRule]
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'exception_rules': {'key': 'exceptionRules', 'type': '{ExceptionRule}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: (Optional) The name of the exception policy.
        :paramtype name: str
        :keyword exception_rules: (Optional) A dictionary collection of exception rules on the
         exception policy. Key is the Id of each exception rule.
        :paramtype exception_rules: dict[str, ~azure.communication.jobrouter.models.ExceptionRule]
        """
        super(ExceptionPolicy, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.exception_rules = kwargs.get('exception_rules', None)


class ExceptionPolicyCollection(msrest.serialization.Model):
    """A paged collection of exception policies.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.communication.jobrouter.models.PagedExceptionPolicy]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PagedExceptionPolicy]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.communication.jobrouter.models.PagedExceptionPolicy]
        """
        super(ExceptionPolicyCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = None


class ExceptionRule(msrest.serialization.Model):
    """A rule that defines actions to execute upon a specific trigger.

    All required parameters must be populated in order to send to Azure.

    :ivar trigger: Required. The trigger for this exception rule.
    :vartype trigger: ~azure.communication.jobrouter.models.JobExceptionTrigger
    :ivar actions: Required. A dictionary collection of actions to perform once the exception is
     triggered. Key is the Id of each exception action.
    :vartype actions: dict[str, ~azure.communication.jobrouter.models.ExceptionAction]
    """

    _validation = {
        'trigger': {'required': True},
        'actions': {'required': True},
    }

    _attribute_map = {
        'trigger': {'key': 'trigger', 'type': 'JobExceptionTrigger'},
        'actions': {'key': 'actions', 'type': '{ExceptionAction}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword trigger: Required. The trigger for this exception rule.
        :paramtype trigger: ~azure.communication.jobrouter.models.JobExceptionTrigger
        :keyword actions: Required. A dictionary collection of actions to perform once the exception is
         triggered. Key is the Id of each exception action.
        :paramtype actions: dict[str, ~azure.communication.jobrouter.models.ExceptionAction]
        """
        super(ExceptionRule, self).__init__(**kwargs)
        self.trigger = kwargs['trigger']
        self.actions = kwargs['actions']


class ExpressionRule(RouterRule):
    """A rule providing inline expression rules.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Rule.Constant filled by
     server.
    :vartype kind: str
    :ivar language: The expression language to compile to and execute. Has constant value:
     "powerFx".
    :vartype language: str
    :ivar expression: Required. The string containing the expression to evaluate. Should contain
     return statement with calculated values.
    :vartype expression: str
    """

    _validation = {
        'kind': {'required': True},
        'language': {'required': True, 'constant': True},
        'expression': {'required': True, 'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'language': {'key': 'language', 'type': 'str'},
        'expression': {'key': 'expression', 'type': 'str'},
    }

    language = "powerFx"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword expression: Required. The string containing the expression to evaluate. Should contain
         return statement with calculated values.
        :paramtype expression: str
        """
        super(ExpressionRule, self).__init__(**kwargs)
        self.kind = 'expression-rule'  # type: str
        self.expression = kwargs['expression']


class JobAssignment(msrest.serialization.Model):
    """Assigns a job to a worker.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. The Id of the job assignment.
    :vartype id: str
    :ivar worker_id: The Id of the Worker assigned to the job.
    :vartype worker_id: str
    :ivar assign_time: Required. The assignment time of the job.
    :vartype assign_time: ~datetime.datetime
    :ivar complete_time: The time the job was marked as completed after being assigned.
    :vartype complete_time: ~datetime.datetime
    :ivar close_time: The time the job was marked as closed after being completed.
    :vartype close_time: ~datetime.datetime
    """

    _validation = {
        'id': {'required': True},
        'assign_time': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'worker_id': {'key': 'workerId', 'type': 'str'},
        'assign_time': {'key': 'assignTime', 'type': 'iso-8601'},
        'complete_time': {'key': 'completeTime', 'type': 'iso-8601'},
        'close_time': {'key': 'closeTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required. The Id of the job assignment.
        :paramtype id: str
        :keyword worker_id: The Id of the Worker assigned to the job.
        :paramtype worker_id: str
        :keyword assign_time: Required. The assignment time of the job.
        :paramtype assign_time: ~datetime.datetime
        :keyword complete_time: The time the job was marked as completed after being assigned.
        :paramtype complete_time: ~datetime.datetime
        :keyword close_time: The time the job was marked as closed after being completed.
        :paramtype close_time: ~datetime.datetime
        """
        super(JobAssignment, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.worker_id = kwargs.get('worker_id', None)
        self.assign_time = kwargs['assign_time']
        self.complete_time = kwargs.get('complete_time', None)
        self.close_time = kwargs.get('close_time', None)


class JobCollection(msrest.serialization.Model):
    """A paged collection of jobs.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.communication.jobrouter.models.PagedRouterJobInternal]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PagedRouterJobInternal]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.communication.jobrouter.models.PagedRouterJobInternal]
        """
        super(JobCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = None


class JobExceptionTrigger(msrest.serialization.Model):
    """The trigger for this exception rule.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: QueueLengthExceptionTrigger, WaitTimeExceptionTrigger.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of ExceptionTrigger.Constant
     filled by server.
    :vartype kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'queue-length': 'QueueLengthExceptionTrigger', 'wait-time': 'WaitTimeExceptionTrigger'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(JobExceptionTrigger, self).__init__(**kwargs)
        self.kind = None  # type: Optional[str]


class JobOffer(msrest.serialization.Model):
    """An offer of an assignment of work to a worker.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. The Id of the offer.
    :vartype id: str
    :ivar job_id: Required. The Id of the job.
    :vartype job_id: str
    :ivar capacity_cost: Required. The capacity cost consumed by the job offer.
    :vartype capacity_cost: int
    :ivar offer_time_utc: The time the offer was created.
    :vartype offer_time_utc: ~datetime.datetime
    :ivar expiry_time_utc: The time that the offer will expire.
    :vartype expiry_time_utc: ~datetime.datetime
    """

    _validation = {
        'id': {'required': True},
        'job_id': {'required': True},
        'capacity_cost': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'capacity_cost': {'key': 'capacityCost', 'type': 'int'},
        'offer_time_utc': {'key': 'offerTimeUtc', 'type': 'iso-8601'},
        'expiry_time_utc': {'key': 'expiryTimeUtc', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required. The Id of the offer.
        :paramtype id: str
        :keyword job_id: Required. The Id of the job.
        :paramtype job_id: str
        :keyword capacity_cost: Required. The capacity cost consumed by the job offer.
        :paramtype capacity_cost: int
        :keyword offer_time_utc: The time the offer was created.
        :paramtype offer_time_utc: ~datetime.datetime
        :keyword expiry_time_utc: The time that the offer will expire.
        :paramtype expiry_time_utc: ~datetime.datetime
        """
        super(JobOffer, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.job_id = kwargs['job_id']
        self.capacity_cost = kwargs['capacity_cost']
        self.offer_time_utc = kwargs.get('offer_time_utc', None)
        self.expiry_time_utc = kwargs.get('expiry_time_utc', None)


class JobPositionDetails(msrest.serialization.Model):
    """Dto for JobPositionDetails.

    All required parameters must be populated in order to send to Azure.

    :ivar job_id: Required. Id of the job these details are about.
    :vartype job_id: str
    :ivar position: Required. Position of the job in question within that queue.
    :vartype position: int
    :ivar queue_id: Required. Id of the queue this job is enqueued in.
    :vartype queue_id: str
    :ivar queue_length: Required. Length of the queue: total number of enqueued jobs.
    :vartype queue_length: int
    :ivar estimated_wait_time_minutes: Required. Estimated wait time of the job rounded up to the
     nearest minute.
    :vartype estimated_wait_time_minutes: float
    """

    _validation = {
        'job_id': {'required': True},
        'position': {'required': True},
        'queue_id': {'required': True},
        'queue_length': {'required': True},
        'estimated_wait_time_minutes': {'required': True},
    }

    _attribute_map = {
        'job_id': {'key': 'jobId', 'type': 'str'},
        'position': {'key': 'position', 'type': 'int'},
        'queue_id': {'key': 'queueId', 'type': 'str'},
        'queue_length': {'key': 'queueLength', 'type': 'int'},
        'estimated_wait_time_minutes': {'key': 'estimatedWaitTimeMinutes', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword job_id: Required. Id of the job these details are about.
        :paramtype job_id: str
        :keyword position: Required. Position of the job in question within that queue.
        :paramtype position: int
        :keyword queue_id: Required. Id of the queue this job is enqueued in.
        :paramtype queue_id: str
        :keyword queue_length: Required. Length of the queue: total number of enqueued jobs.
        :paramtype queue_length: int
        :keyword estimated_wait_time_minutes: Required. Estimated wait time of the job rounded up to
         the nearest minute.
        :paramtype estimated_wait_time_minutes: float
        """
        super(JobPositionDetails, self).__init__(**kwargs)
        self.job_id = kwargs['job_id']
        self.position = kwargs['position']
        self.queue_id = kwargs['queue_id']
        self.queue_length = kwargs['queue_length']
        self.estimated_wait_time_minutes = kwargs['estimated_wait_time_minutes']


class JobQueueInternal(msrest.serialization.Model):
    """A queue that can contain jobs to be routed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The Id of this queue.
    :vartype id: str
    :ivar name: The name of this queue.
    :vartype name: str
    :ivar distribution_policy_id: Required. The ID of the distribution policy that will determine
     how a job is distributed to workers.
    :vartype distribution_policy_id: str
    :ivar labels: A set of key/value pairs that are identifying attributes used by the rules
     engines to make decisions.
    :vartype labels: dict[str, any]
    :ivar exception_policy_id: (Optional) The ID of the exception policy that determines various
     job escalation rules.
    :vartype exception_policy_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'distribution_policy_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'distribution_policy_id': {'key': 'distributionPolicyId', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '{object}'},
        'exception_policy_id': {'key': 'exceptionPolicyId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of this queue.
        :paramtype name: str
        :keyword distribution_policy_id: Required. The ID of the distribution policy that will
         determine how a job is distributed to workers.
        :paramtype distribution_policy_id: str
        :keyword labels: A set of key/value pairs that are identifying attributes used by the rules
         engines to make decisions.
        :paramtype labels: dict[str, any]
        :keyword exception_policy_id: (Optional) The ID of the exception policy that determines various
         job escalation rules.
        :paramtype exception_policy_id: str
        """
        super(JobQueueInternal, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.distribution_policy_id = kwargs['distribution_policy_id']
        self.labels = kwargs.get('labels', None)
        self.exception_policy_id = kwargs.get('exception_policy_id', None)


class JobRouterError(msrest.serialization.Model):
    """The Communication Services error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. The error code.
    :vartype code: str
    :ivar message: Required. The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Further details about specific errors that led to this error.
    :vartype details: list[~azure.communication.jobrouter.models.JobRouterError]
    :ivar inner_error: The inner error if any.
    :vartype inner_error: ~azure.communication.jobrouter.models.JobRouterError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[JobRouterError]'},
        'inner_error': {'key': 'innererror', 'type': 'JobRouterError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Required. The error code.
        :paramtype code: str
        :keyword message: Required. The error message.
        :paramtype message: str
        """
        super(JobRouterError, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = None
        self.details = None
        self.inner_error = None


class LongestIdleMode(DistributionMode):
    """Jobs are directed to the worker who has been idle longest.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Mode.Constant filled by
     server.
    :vartype kind: str
    :ivar min_concurrent_offers: Required. Governs the minimum desired number of active concurrent
     offers a job can have.
    :vartype min_concurrent_offers: int
    :ivar max_concurrent_offers: Required. Governs the maximum number of active concurrent offers a
     job can have.
    :vartype max_concurrent_offers: int
    :ivar bypass_selectors: (Optional)
     If set to true, then router will match workers to jobs even if they don't match label
     selectors.
     Warning: You may get workers that are not qualified for the job they are matched with if you
     set this
     variable to true. This flag is intended more for temporary usage.
     By default, set to false.
    :vartype bypass_selectors: bool
    """

    _validation = {
        'kind': {'required': True},
        'min_concurrent_offers': {'required': True},
        'max_concurrent_offers': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'min_concurrent_offers': {'key': 'minConcurrentOffers', 'type': 'int'},
        'max_concurrent_offers': {'key': 'maxConcurrentOffers', 'type': 'int'},
        'bypass_selectors': {'key': 'bypassSelectors', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min_concurrent_offers: Required. Governs the minimum desired number of active
         concurrent offers a job can have.
        :paramtype min_concurrent_offers: int
        :keyword max_concurrent_offers: Required. Governs the maximum number of active concurrent
         offers a job can have.
        :paramtype max_concurrent_offers: int
        :keyword bypass_selectors: (Optional)
         If set to true, then router will match workers to jobs even if they don't match label
         selectors.
         Warning: You may get workers that are not qualified for the job they are matched with if you
         set this
         variable to true. This flag is intended more for temporary usage.
         By default, set to false.
        :paramtype bypass_selectors: bool
        """
        super(LongestIdleMode, self).__init__(**kwargs)
        self.kind = 'longest-idle'  # type: str


class ManualReclassifyExceptionAction(ExceptionAction):
    """An action that manually reclassifies a job by providing the queue, priority and worker selectors.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of ExceptionAction.Constant
     filled by server.
    :vartype kind: str
    :ivar queue_id: Updated QueueId.
    :vartype queue_id: str
    :ivar priority: Updated Priority.
    :vartype priority: int
    :ivar worker_selectors: Updated WorkerSelectors.
    :vartype worker_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
    """

    _validation = {
        'kind': {'required': True},
        'queue_id': {'max_length': 50, 'min_length': 0},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'queue_id': {'key': 'queueId', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'worker_selectors': {'key': 'workerSelectors', 'type': '[WorkerSelector]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword queue_id: Updated QueueId.
        :paramtype queue_id: str
        :keyword priority: Updated Priority.
        :paramtype priority: int
        :keyword worker_selectors: Updated WorkerSelectors.
        :paramtype worker_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
        """
        super(ManualReclassifyExceptionAction, self).__init__(**kwargs)
        self.kind = 'manual-reclassify'  # type: str
        self.queue_id = kwargs.get('queue_id', None)
        self.priority = kwargs.get('priority', None)
        self.worker_selectors = kwargs.get('worker_selectors', None)


class PagedClassificationPolicy(msrest.serialization.Model):
    """A classification policy returned from a pageable list.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique identifier of this policy.
    :vartype id: str
    :ivar name: Friendly name of this policy.
    :vartype name: str
    :ivar fallback_queue_id: The fallback queue to select if the queue selector doesn't find a
     match.
    :vartype fallback_queue_id: str
    :ivar queue_selectors: The queue selectors to resolve a queue for a given job.
    :vartype queue_selectors: list[~azure.communication.jobrouter.models.QueueSelectorAttachment]
    :ivar prioritization_rule: A rule of one of the following types:
    
     StaticRule:  A rule providing static rules that always return the same result, regardless of
     input.
     DirectMapRule:  A rule that return the same labels as the input labels.
     ExpressionRule: A rule providing inline expression rules.
     AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
    :vartype prioritization_rule: ~azure.communication.jobrouter.models.RouterRule
    :ivar worker_selectors: The worker label selectors to attach to a given job.
    :vartype worker_selectors: list[~azure.communication.jobrouter.models.WorkerSelectorAttachment]
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'fallback_queue_id': {'key': 'fallbackQueueId', 'type': 'str'},
        'queue_selectors': {'key': 'queueSelectors', 'type': '[QueueSelectorAttachment]'},
        'prioritization_rule': {'key': 'prioritizationRule', 'type': 'RouterRule'},
        'worker_selectors': {'key': 'workerSelectors', 'type': '[WorkerSelectorAttachment]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Friendly name of this policy.
        :paramtype name: str
        :keyword fallback_queue_id: The fallback queue to select if the queue selector doesn't find a
         match.
        :paramtype fallback_queue_id: str
        :keyword queue_selectors: The queue selectors to resolve a queue for a given job.
        :paramtype queue_selectors: list[~azure.communication.jobrouter.models.QueueSelectorAttachment]
        :keyword prioritization_rule: A rule of one of the following types:
        
         StaticRule:  A rule providing static rules that always return the same result, regardless of
         input.
         DirectMapRule:  A rule that return the same labels as the input labels.
         ExpressionRule: A rule providing inline expression rules.
         AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        :paramtype prioritization_rule: ~azure.communication.jobrouter.models.RouterRule
        :keyword worker_selectors: The worker label selectors to attach to a given job.
        :paramtype worker_selectors:
         list[~azure.communication.jobrouter.models.WorkerSelectorAttachment]
        """
        super(PagedClassificationPolicy, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.fallback_queue_id = kwargs.get('fallback_queue_id', None)
        self.queue_selectors = kwargs.get('queue_selectors', None)
        self.prioritization_rule = kwargs.get('prioritization_rule', None)
        self.worker_selectors = kwargs.get('worker_selectors', None)


class PagedDistributionPolicy(msrest.serialization.Model):
    """A distribution policy returned from a pageable list.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The unique identifier of the policy.
    :vartype id: str
    :ivar name: The human readable name of the policy.
    :vartype name: str
    :ivar offer_ttl_seconds: The expiry time of any offers created under this policy will be
     governed by the offer time to live.
    :vartype offer_ttl_seconds: float
    :ivar mode: Abstract base class for defining a distribution mode.
    :vartype mode: ~azure.communication.jobrouter.models.DistributionMode
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'offer_ttl_seconds': {'key': 'offerTtlSeconds', 'type': 'float'},
        'mode': {'key': 'mode', 'type': 'DistributionMode'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The human readable name of the policy.
        :paramtype name: str
        :keyword offer_ttl_seconds: The expiry time of any offers created under this policy will be
         governed by the offer time to live.
        :paramtype offer_ttl_seconds: float
        :keyword mode: Abstract base class for defining a distribution mode.
        :paramtype mode: ~azure.communication.jobrouter.models.DistributionMode
        """
        super(PagedDistributionPolicy, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.offer_ttl_seconds = kwargs.get('offer_ttl_seconds', None)
        self.mode = kwargs.get('mode', None)


class PagedExceptionPolicy(msrest.serialization.Model):
    """An exception policy returned from a pageable list.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Id of the exception policy.
    :vartype id: str
    :ivar name: (Optional) The name of the exception policy.
    :vartype name: str
    :ivar exception_rules: (Optional) A dictionary collection of exception rules on the exception
     policy. Key is the Id of each exception rule.
    :vartype exception_rules: dict[str, ~azure.communication.jobrouter.models.ExceptionRule]
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'exception_rules': {'key': 'exceptionRules', 'type': '{ExceptionRule}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: (Optional) The name of the exception policy.
        :paramtype name: str
        :keyword exception_rules: (Optional) A dictionary collection of exception rules on the
         exception policy. Key is the Id of each exception rule.
        :paramtype exception_rules: dict[str, ~azure.communication.jobrouter.models.ExceptionRule]
        """
        super(PagedExceptionPolicy, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.exception_rules = kwargs.get('exception_rules', None)


class PagedJobQueueInternal(msrest.serialization.Model):
    """A queue returned from a pageable list.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Id of this queue.
    :vartype id: str
    :ivar name: The name of this queue.
    :vartype name: str
    :ivar distribution_policy_id: The ID of the distribution policy that will determine how a job
     is distributed to workers.
    :vartype distribution_policy_id: str
    :ivar labels: A set of key/value pairs that are identifying attributes used by the rules
     engines to make decisions.
    :vartype labels: dict[str, any]
    :ivar exception_policy_id: (Optional) The ID of the exception policy that determines various
     job escalation rules.
    :vartype exception_policy_id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'distribution_policy_id': {'key': 'distributionPolicyId', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '{object}'},
        'exception_policy_id': {'key': 'exceptionPolicyId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: The name of this queue.
        :paramtype name: str
        :keyword distribution_policy_id: The ID of the distribution policy that will determine how a
         job is distributed to workers.
        :paramtype distribution_policy_id: str
        :keyword labels: A set of key/value pairs that are identifying attributes used by the rules
         engines to make decisions.
        :paramtype labels: dict[str, any]
        :keyword exception_policy_id: (Optional) The ID of the exception policy that determines various
         job escalation rules.
        :paramtype exception_policy_id: str
        """
        super(PagedJobQueueInternal, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.distribution_policy_id = kwargs.get('distribution_policy_id', None)
        self.labels = kwargs.get('labels', None)
        self.exception_policy_id = kwargs.get('exception_policy_id', None)


class PagedRouterJobInternal(msrest.serialization.Model):
    """A job returned from a pageable list.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The id of the job.
    :vartype id: str
    :ivar channel_reference: Reference to an external parent context, eg. call ID.
    :vartype channel_reference: str
    :ivar job_status: The state of the Job. Known values are: "pendingClassification", "queued",
     "assigned", "completed", "closed", "cancelled", "classificationFailed", "created".
    :vartype job_status: str or ~azure.communication.jobrouter.models.JobStatus
    :ivar enqueue_time_utc: The time a job was queued.
    :vartype enqueue_time_utc: ~datetime.datetime
    :ivar channel_id: The channel identifier. eg. voice, chat, etc.
    :vartype channel_id: str
    :ivar classification_policy_id: The Id of the Classification policy used for classifying a job.
    :vartype classification_policy_id: str
    :ivar queue_id: The Id of the Queue that this job is queued to.
    :vartype queue_id: str
    :ivar priority: The priority of this job.
    :vartype priority: int
    :ivar disposition_code: Reason code for cancelled or closed jobs.
    :vartype disposition_code: str
    :ivar requested_worker_selectors: A collection of manually specified label selectors, which a
     worker must satisfy in order to process this job.
    :vartype requested_worker_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
    :ivar attached_worker_selectors: A collection of label selectors attached by a classification
     policy, which a worker must satisfy in order to process this job.
    :vartype attached_worker_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
    :ivar labels: A set of key/value pairs that are identifying attributes used by the rules
     engines to make decisions.
    :vartype labels: dict[str, any]
    :ivar assignments: A collection of the assignments of the job.
     Key is AssignmentId.
    :vartype assignments: dict[str, ~azure.communication.jobrouter.models.JobAssignment]
    :ivar tags: A set of tags. A set of non-identifying attributes attached to this job.
    :vartype tags: dict[str, any]
    :ivar notes: Notes attached to a job, sorted by timestamp.
    :vartype notes: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'job_status': {'readonly': True},
        'enqueue_time_utc': {'readonly': True},
        'attached_worker_selectors': {'readonly': True},
        'assignments': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'channel_reference': {'key': 'channelReference', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'enqueue_time_utc': {'key': 'enqueueTimeUtc', 'type': 'iso-8601'},
        'channel_id': {'key': 'channelId', 'type': 'str'},
        'classification_policy_id': {'key': 'classificationPolicyId', 'type': 'str'},
        'queue_id': {'key': 'queueId', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'disposition_code': {'key': 'dispositionCode', 'type': 'str'},
        'requested_worker_selectors': {'key': 'requestedWorkerSelectors', 'type': '[WorkerSelector]'},
        'attached_worker_selectors': {'key': 'attachedWorkerSelectors', 'type': '[WorkerSelector]'},
        'labels': {'key': 'labels', 'type': '{object}'},
        'assignments': {'key': 'assignments', 'type': '{JobAssignment}'},
        'tags': {'key': 'tags', 'type': '{object}'},
        'notes': {'key': 'notes', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword channel_reference: Reference to an external parent context, eg. call ID.
        :paramtype channel_reference: str
        :keyword channel_id: The channel identifier. eg. voice, chat, etc.
        :paramtype channel_id: str
        :keyword classification_policy_id: The Id of the Classification policy used for classifying a
         job.
        :paramtype classification_policy_id: str
        :keyword queue_id: The Id of the Queue that this job is queued to.
        :paramtype queue_id: str
        :keyword priority: The priority of this job.
        :paramtype priority: int
        :keyword disposition_code: Reason code for cancelled or closed jobs.
        :paramtype disposition_code: str
        :keyword requested_worker_selectors: A collection of manually specified label selectors, which
         a worker must satisfy in order to process this job.
        :paramtype requested_worker_selectors:
         list[~azure.communication.jobrouter.models.WorkerSelector]
        :keyword labels: A set of key/value pairs that are identifying attributes used by the rules
         engines to make decisions.
        :paramtype labels: dict[str, any]
        :keyword tags: A set of tags. A set of non-identifying attributes attached to this job.
        :paramtype tags: dict[str, any]
        :keyword notes: Notes attached to a job, sorted by timestamp.
        :paramtype notes: dict[str, str]
        """
        super(PagedRouterJobInternal, self).__init__(**kwargs)
        self.id = None
        self.channel_reference = kwargs.get('channel_reference', None)
        self.job_status = None
        self.enqueue_time_utc = None
        self.channel_id = kwargs.get('channel_id', None)
        self.classification_policy_id = kwargs.get('classification_policy_id', None)
        self.queue_id = kwargs.get('queue_id', None)
        self.priority = kwargs.get('priority', None)
        self.disposition_code = kwargs.get('disposition_code', None)
        self.requested_worker_selectors = kwargs.get('requested_worker_selectors', None)
        self.attached_worker_selectors = None
        self.labels = kwargs.get('labels', None)
        self.assignments = None
        self.tags = kwargs.get('tags', None)
        self.notes = kwargs.get('notes', None)


class PagedRouterWorkerInternal(msrest.serialization.Model):
    """A worker returned from a pageable list.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id:
    :vartype id: str
    :ivar state: The current state of the worker. Known values are: "active", "draining",
     "inactive".
    :vartype state: str or ~azure.communication.jobrouter.models.PagedWorkerState
    :ivar queue_assignments: The queue(s) that this worker can receive work from.
    :vartype queue_assignments: dict[str, any]
    :ivar total_capacity: The total capacity score this worker has to manage multiple concurrent
     jobs.
    :vartype total_capacity: int
    :ivar labels: A set of key/value pairs that are identifying attributes used by the rules
     engines to make decisions.
    :vartype labels: dict[str, any]
    :ivar tags: A set of tags. A set of non-identifying attributes attached to this worker.
    :vartype tags: dict[str, any]
    :ivar channel_configurations: The channel(s) this worker can handle and their impact on the
     workers capacity.
    :vartype channel_configurations: dict[str,
     ~azure.communication.jobrouter.models.ChannelConfiguration]
    :ivar offers: A list of active offers issued to this worker.
    :vartype offers: list[~azure.communication.jobrouter.models.JobOffer]
    :ivar assigned_jobs: A list of assigned jobs attached to this worker.
    :vartype assigned_jobs: list[~azure.communication.jobrouter.models.WorkerAssignment]
    :ivar load_ratio: A value indicating the workers capacity. A value of '1' means all capacity is
     consumed. A value of '0' means no capacity is currently consumed.
    :vartype load_ratio: float
    :ivar available_for_offers: A flag indicating this worker is open to receive offers or not.
    :vartype available_for_offers: bool
    """

    _validation = {
        'id': {'readonly': True},
        'state': {'readonly': True},
        'offers': {'readonly': True},
        'assigned_jobs': {'readonly': True},
        'load_ratio': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'queue_assignments': {'key': 'queueAssignments', 'type': '{object}'},
        'total_capacity': {'key': 'totalCapacity', 'type': 'int'},
        'labels': {'key': 'labels', 'type': '{object}'},
        'tags': {'key': 'tags', 'type': '{object}'},
        'channel_configurations': {'key': 'channelConfigurations', 'type': '{ChannelConfiguration}'},
        'offers': {'key': 'offers', 'type': '[JobOffer]'},
        'assigned_jobs': {'key': 'assignedJobs', 'type': '[WorkerAssignment]'},
        'load_ratio': {'key': 'loadRatio', 'type': 'float'},
        'available_for_offers': {'key': 'availableForOffers', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword queue_assignments: The queue(s) that this worker can receive work from.
        :paramtype queue_assignments: dict[str, any]
        :keyword total_capacity: The total capacity score this worker has to manage multiple concurrent
         jobs.
        :paramtype total_capacity: int
        :keyword labels: A set of key/value pairs that are identifying attributes used by the rules
         engines to make decisions.
        :paramtype labels: dict[str, any]
        :keyword tags: A set of tags. A set of non-identifying attributes attached to this worker.
        :paramtype tags: dict[str, any]
        :keyword channel_configurations: The channel(s) this worker can handle and their impact on the
         workers capacity.
        :paramtype channel_configurations: dict[str,
         ~azure.communication.jobrouter.models.ChannelConfiguration]
        :keyword available_for_offers: A flag indicating this worker is open to receive offers or not.
        :paramtype available_for_offers: bool
        """
        super(PagedRouterWorkerInternal, self).__init__(**kwargs)
        self.id = None
        self.state = None
        self.queue_assignments = kwargs.get('queue_assignments', None)
        self.total_capacity = kwargs.get('total_capacity', None)
        self.labels = kwargs.get('labels', None)
        self.tags = kwargs.get('tags', None)
        self.channel_configurations = kwargs.get('channel_configurations', None)
        self.offers = None
        self.assigned_jobs = None
        self.load_ratio = None
        self.available_for_offers = kwargs.get('available_for_offers', None)


class PassThroughQueueSelector(QueueSelectorAttachment):
    """Attaches a label selector where the value is pass through from the job label with the same key.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar key: Required. The label key to query against.
    :vartype key: str
    :ivar label_operator: Required. Describes how the value of the label is compared to the value
     pass through. Known values are: "equal", "notEqual", "lessThan", "lessThanEqual",
     "greaterThan", "greaterThanEqual".
    :vartype label_operator: str or ~azure.communication.jobrouter.models.LabelOperator
    """

    _validation = {
        'kind': {'required': True},
        'key': {'required': True, 'max_length': 500, 'min_length': 0},
        'label_operator': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
        'label_operator': {'key': 'labelOperator', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key: Required. The label key to query against.
        :paramtype key: str
        :keyword label_operator: Required. Describes how the value of the label is compared to the
         value pass through. Known values are: "equal", "notEqual", "lessThan", "lessThanEqual",
         "greaterThan", "greaterThanEqual".
        :paramtype label_operator: str or ~azure.communication.jobrouter.models.LabelOperator
        """
        super(PassThroughQueueSelector, self).__init__(**kwargs)
        self.kind = 'pass-through'  # type: str
        self.key = kwargs['key']
        self.label_operator = kwargs['label_operator']


class PassThroughWorkerSelector(WorkerSelectorAttachment):
    """Attaches a label selector where the value is pass through from the job label with the same key.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar key: Required. The label key to query against.
    :vartype key: str
    :ivar label_operator: Required. Describes how the value of the label is compared to the value
     pass through. Known values are: "equal", "notEqual", "lessThan", "lessThanEqual",
     "greaterThan", "greaterThanEqual".
    :vartype label_operator: str or ~azure.communication.jobrouter.models.LabelOperator
    :ivar ttl_seconds: Describes how long the attached label selector is valid in seconds.
    :vartype ttl_seconds: float
    """

    _validation = {
        'kind': {'required': True},
        'key': {'required': True, 'max_length': 500, 'min_length': 0},
        'label_operator': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
        'label_operator': {'key': 'labelOperator', 'type': 'str'},
        'ttl_seconds': {'key': 'ttlSeconds', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key: Required. The label key to query against.
        :paramtype key: str
        :keyword label_operator: Required. Describes how the value of the label is compared to the
         value pass through. Known values are: "equal", "notEqual", "lessThan", "lessThanEqual",
         "greaterThan", "greaterThanEqual".
        :paramtype label_operator: str or ~azure.communication.jobrouter.models.LabelOperator
        :keyword ttl_seconds: Describes how long the attached label selector is valid in seconds.
        :paramtype ttl_seconds: float
        """
        super(PassThroughWorkerSelector, self).__init__(**kwargs)
        self.kind = 'pass-through'  # type: str
        self.key = kwargs['key']
        self.label_operator = kwargs['label_operator']
        self.ttl_seconds = kwargs.get('ttl_seconds', None)


class QueueCollection(msrest.serialization.Model):
    """A paged collection of queues.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.communication.jobrouter.models.PagedJobQueueInternal]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PagedJobQueueInternal]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.communication.jobrouter.models.PagedJobQueueInternal]
        """
        super(QueueCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = None


class QueueLengthExceptionTrigger(JobExceptionTrigger):
    """Trigger for an exception action on exceeding queue length.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of ExceptionTrigger.Constant
     filled by server.
    :vartype kind: str
    :ivar threshold: Required. Threshold of number of jobs ahead in the queue to for this trigger
     to fire.
    :vartype threshold: int
    """

    _validation = {
        'kind': {'required': True},
        'threshold': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'threshold': {'key': 'threshold', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword threshold: Required. Threshold of number of jobs ahead in the queue to for this
         trigger to fire.
        :paramtype threshold: int
        """
        super(QueueLengthExceptionTrigger, self).__init__(**kwargs)
        self.kind = 'queue-length'  # type: str
        self.threshold = kwargs['threshold']


class QueueSelector(msrest.serialization.Model):
    """Describes a condition that must be met against a set of labels for queue selection.

    All required parameters must be populated in order to send to Azure.

    :ivar key: Required. The label key to query against.
    :vartype key: str
    :ivar label_operator: Required. Describes how the value of the label is compared to the value
     defined on the label selector. Known values are: "equal", "notEqual", "lessThan",
     "lessThanEqual", "greaterThan", "greaterThanEqual".
    :vartype label_operator: str or ~azure.communication.jobrouter.models.LabelOperator
    :ivar value: The value to compare against the actual label value with the given operator.
    :vartype value: any
    """

    _validation = {
        'key': {'required': True, 'max_length': 500, 'min_length': 0},
        'label_operator': {'required': True},
    }

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'label_operator': {'key': 'labelOperator', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key: Required. The label key to query against.
        :paramtype key: str
        :keyword label_operator: Required. Describes how the value of the label is compared to the
         value defined on the label selector. Known values are: "equal", "notEqual", "lessThan",
         "lessThanEqual", "greaterThan", "greaterThanEqual".
        :paramtype label_operator: str or ~azure.communication.jobrouter.models.LabelOperator
        :keyword value: The value to compare against the actual label value with the given operator.
        :paramtype value: any
        """
        super(QueueSelector, self).__init__(**kwargs)
        self.key = kwargs['key']
        self.label_operator = kwargs['label_operator']
        self.value = kwargs.get('value', None)


class QueueStatistics(msrest.serialization.Model):
    """Statistics for the queue.

    All required parameters must be populated in order to send to Azure.

    :ivar queue_id: Required. Id of the queue these details are about.
    :vartype queue_id: str
    :ivar length: Required. Length of the queue: total number of enqueued jobs.
    :vartype length: int
    :ivar estimated_wait_time_minutes: The estimated wait time of this queue rounded up to the
     nearest minute, grouped by job priority.
    :vartype estimated_wait_time_minutes: dict[str, float]
    :ivar longest_job_wait_time_minutes: The wait time of the job that has been enqueued in this
     queue for the longest.
    :vartype longest_job_wait_time_minutes: float
    """

    _validation = {
        'queue_id': {'required': True},
        'length': {'required': True},
    }

    _attribute_map = {
        'queue_id': {'key': 'queueId', 'type': 'str'},
        'length': {'key': 'length', 'type': 'int'},
        'estimated_wait_time_minutes': {'key': 'estimatedWaitTimeMinutes', 'type': '{float}'},
        'longest_job_wait_time_minutes': {'key': 'longestJobWaitTimeMinutes', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword queue_id: Required. Id of the queue these details are about.
        :paramtype queue_id: str
        :keyword length: Required. Length of the queue: total number of enqueued jobs.
        :paramtype length: int
        :keyword estimated_wait_time_minutes: The estimated wait time of this queue rounded up to the
         nearest minute, grouped by job priority.
        :paramtype estimated_wait_time_minutes: dict[str, float]
        :keyword longest_job_wait_time_minutes: The wait time of the job that has been enqueued in this
         queue for the longest.
        :paramtype longest_job_wait_time_minutes: float
        """
        super(QueueStatistics, self).__init__(**kwargs)
        self.queue_id = kwargs['queue_id']
        self.length = kwargs['length']
        self.estimated_wait_time_minutes = kwargs.get('estimated_wait_time_minutes', None)
        self.longest_job_wait_time_minutes = kwargs.get('longest_job_wait_time_minutes', None)


class QueueWeightedAllocation(msrest.serialization.Model):
    """Contains the weight percentage and label selectors to be applied if selected for weighted distributions.

    All required parameters must be populated in order to send to Azure.

    :ivar weight: Required. The percentage of this weight, expressed as a fraction of 1.
    :vartype weight: float
    :ivar label_selectors: Required. A collection of label selectors that will be applied if this
     allocation is selected.
    :vartype label_selectors: list[~azure.communication.jobrouter.models.QueueSelector]
    """

    _validation = {
        'weight': {'required': True},
        'label_selectors': {'required': True},
    }

    _attribute_map = {
        'weight': {'key': 'weight', 'type': 'float'},
        'label_selectors': {'key': 'labelSelectors', 'type': '[QueueSelector]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword weight: Required. The percentage of this weight, expressed as a fraction of 1.
        :paramtype weight: float
        :keyword label_selectors: Required. A collection of label selectors that will be applied if
         this allocation is selected.
        :paramtype label_selectors: list[~azure.communication.jobrouter.models.QueueSelector]
        """
        super(QueueWeightedAllocation, self).__init__(**kwargs)
        self.weight = kwargs['weight']
        self.label_selectors = kwargs['label_selectors']


class ReclassifyExceptionAction(ExceptionAction):
    """An action that modifies labels on a job and then reclassifies it.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of ExceptionAction.Constant
     filled by server.
    :vartype kind: str
    :ivar classification_policy_id: (optional) The new classification policy that will determine
     queue, priority and worker selectors.
    :vartype classification_policy_id: str
    :ivar labels_to_upsert: (optional) Dictionary containing the labels to update (or add if not
     existing) in key-value pairs.
    :vartype labels_to_upsert: dict[str, any]
    """

    _validation = {
        'kind': {'required': True},
        'classification_policy_id': {'max_length': 50, 'min_length': 0},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'classification_policy_id': {'key': 'classificationPolicyId', 'type': 'str'},
        'labels_to_upsert': {'key': 'labelsToUpsert', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword classification_policy_id: (optional) The new classification policy that will determine
         queue, priority and worker selectors.
        :paramtype classification_policy_id: str
        :keyword labels_to_upsert: (optional) Dictionary containing the labels to update (or add if not
         existing) in key-value pairs.
        :paramtype labels_to_upsert: dict[str, any]
        """
        super(ReclassifyExceptionAction, self).__init__(**kwargs)
        self.kind = 'reclassify'  # type: str
        self.classification_policy_id = kwargs.get('classification_policy_id', None)
        self.labels_to_upsert = kwargs.get('labels_to_upsert', None)


class RoundRobinMode(DistributionMode):
    """Jobs are distributed in order to workers, starting with the worker that is after the last worker to receive a job.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Mode.Constant filled by
     server.
    :vartype kind: str
    :ivar min_concurrent_offers: Required. Governs the minimum desired number of active concurrent
     offers a job can have.
    :vartype min_concurrent_offers: int
    :ivar max_concurrent_offers: Required. Governs the maximum number of active concurrent offers a
     job can have.
    :vartype max_concurrent_offers: int
    :ivar bypass_selectors: (Optional)
     If set to true, then router will match workers to jobs even if they don't match label
     selectors.
     Warning: You may get workers that are not qualified for the job they are matched with if you
     set this
     variable to true. This flag is intended more for temporary usage.
     By default, set to false.
    :vartype bypass_selectors: bool
    """

    _validation = {
        'kind': {'required': True},
        'min_concurrent_offers': {'required': True},
        'max_concurrent_offers': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'min_concurrent_offers': {'key': 'minConcurrentOffers', 'type': 'int'},
        'max_concurrent_offers': {'key': 'maxConcurrentOffers', 'type': 'int'},
        'bypass_selectors': {'key': 'bypassSelectors', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min_concurrent_offers: Required. Governs the minimum desired number of active
         concurrent offers a job can have.
        :paramtype min_concurrent_offers: int
        :keyword max_concurrent_offers: Required. Governs the maximum number of active concurrent
         offers a job can have.
        :paramtype max_concurrent_offers: int
        :keyword bypass_selectors: (Optional)
         If set to true, then router will match workers to jobs even if they don't match label
         selectors.
         Warning: You may get workers that are not qualified for the job they are matched with if you
         set this
         variable to true. This flag is intended more for temporary usage.
         By default, set to false.
        :paramtype bypass_selectors: bool
        """
        super(RoundRobinMode, self).__init__(**kwargs)
        self.kind = 'round-robin'  # type: str


class RouterJobInternal(msrest.serialization.Model):
    """A unit of work to be routed.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The id of the job.
    :vartype id: str
    :ivar channel_reference: Reference to an external parent context, eg. call ID.
    :vartype channel_reference: str
    :ivar job_status: The state of the Job. Known values are: "pendingClassification", "queued",
     "assigned", "completed", "closed", "cancelled", "classificationFailed", "created".
    :vartype job_status: str or ~azure.communication.jobrouter.models.JobStatus
    :ivar enqueue_time_utc: The time a job was queued.
    :vartype enqueue_time_utc: ~datetime.datetime
    :ivar channel_id: The channel identifier. eg. voice, chat, etc.
    :vartype channel_id: str
    :ivar classification_policy_id: The Id of the Classification policy used for classifying a job.
    :vartype classification_policy_id: str
    :ivar queue_id: The Id of the Queue that this job is queued to.
    :vartype queue_id: str
    :ivar priority: The priority of this job.
    :vartype priority: int
    :ivar disposition_code: Reason code for cancelled or closed jobs.
    :vartype disposition_code: str
    :ivar requested_worker_selectors: A collection of manually specified label selectors, which a
     worker must satisfy in order to process this job.
    :vartype requested_worker_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
    :ivar attached_worker_selectors: A collection of label selectors attached by a classification
     policy, which a worker must satisfy in order to process this job.
    :vartype attached_worker_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
    :ivar labels: A set of key/value pairs that are identifying attributes used by the rules
     engines to make decisions.
    :vartype labels: dict[str, any]
    :ivar assignments: A collection of the assignments of the job.
     Key is AssignmentId.
    :vartype assignments: dict[str, ~azure.communication.jobrouter.models.JobAssignment]
    :ivar tags: A set of tags. A set of non-identifying attributes attached to this job.
    :vartype tags: dict[str, any]
    :ivar notes: Notes attached to a job, sorted by timestamp.
    :vartype notes: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'job_status': {'readonly': True},
        'enqueue_time_utc': {'readonly': True},
        'attached_worker_selectors': {'readonly': True},
        'assignments': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'channel_reference': {'key': 'channelReference', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'enqueue_time_utc': {'key': 'enqueueTimeUtc', 'type': 'iso-8601'},
        'channel_id': {'key': 'channelId', 'type': 'str'},
        'classification_policy_id': {'key': 'classificationPolicyId', 'type': 'str'},
        'queue_id': {'key': 'queueId', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'disposition_code': {'key': 'dispositionCode', 'type': 'str'},
        'requested_worker_selectors': {'key': 'requestedWorkerSelectors', 'type': '[WorkerSelector]'},
        'attached_worker_selectors': {'key': 'attachedWorkerSelectors', 'type': '[WorkerSelector]'},
        'labels': {'key': 'labels', 'type': '{object}'},
        'assignments': {'key': 'assignments', 'type': '{JobAssignment}'},
        'tags': {'key': 'tags', 'type': '{object}'},
        'notes': {'key': 'notes', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword channel_reference: Reference to an external parent context, eg. call ID.
        :paramtype channel_reference: str
        :keyword channel_id: The channel identifier. eg. voice, chat, etc.
        :paramtype channel_id: str
        :keyword classification_policy_id: The Id of the Classification policy used for classifying a
         job.
        :paramtype classification_policy_id: str
        :keyword queue_id: The Id of the Queue that this job is queued to.
        :paramtype queue_id: str
        :keyword priority: The priority of this job.
        :paramtype priority: int
        :keyword disposition_code: Reason code for cancelled or closed jobs.
        :paramtype disposition_code: str
        :keyword requested_worker_selectors: A collection of manually specified label selectors, which
         a worker must satisfy in order to process this job.
        :paramtype requested_worker_selectors:
         list[~azure.communication.jobrouter.models.WorkerSelector]
        :keyword labels: A set of key/value pairs that are identifying attributes used by the rules
         engines to make decisions.
        :paramtype labels: dict[str, any]
        :keyword tags: A set of tags. A set of non-identifying attributes attached to this job.
        :paramtype tags: dict[str, any]
        :keyword notes: Notes attached to a job, sorted by timestamp.
        :paramtype notes: dict[str, str]
        """
        super(RouterJobInternal, self).__init__(**kwargs)
        self.id = None
        self.channel_reference = kwargs.get('channel_reference', None)
        self.job_status = None
        self.enqueue_time_utc = None
        self.channel_id = kwargs.get('channel_id', None)
        self.classification_policy_id = kwargs.get('classification_policy_id', None)
        self.queue_id = kwargs.get('queue_id', None)
        self.priority = kwargs.get('priority', None)
        self.disposition_code = kwargs.get('disposition_code', None)
        self.requested_worker_selectors = kwargs.get('requested_worker_selectors', None)
        self.attached_worker_selectors = None
        self.labels = kwargs.get('labels', None)
        self.assignments = None
        self.tags = kwargs.get('tags', None)
        self.notes = kwargs.get('notes', None)


class RouterWorkerInternal(msrest.serialization.Model):
    """An entity for jobs to be routed to.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id:
    :vartype id: str
    :ivar state: The current state of the worker. Known values are: "active", "draining",
     "inactive".
    :vartype state: str or ~azure.communication.jobrouter.models.RouterWorkerState
    :ivar queue_assignments: The queue(s) that this worker can receive work from.
    :vartype queue_assignments: dict[str, any]
    :ivar total_capacity: The total capacity score this worker has to manage multiple concurrent
     jobs.
    :vartype total_capacity: int
    :ivar labels: A set of key/value pairs that are identifying attributes used by the rules
     engines to make decisions.
    :vartype labels: dict[str, any]
    :ivar tags: A set of tags. A set of non-identifying attributes attached to this worker.
    :vartype tags: dict[str, any]
    :ivar channel_configurations: The channel(s) this worker can handle and their impact on the
     workers capacity.
    :vartype channel_configurations: dict[str,
     ~azure.communication.jobrouter.models.ChannelConfiguration]
    :ivar offers: A list of active offers issued to this worker.
    :vartype offers: list[~azure.communication.jobrouter.models.JobOffer]
    :ivar assigned_jobs: A list of assigned jobs attached to this worker.
    :vartype assigned_jobs: list[~azure.communication.jobrouter.models.WorkerAssignment]
    :ivar load_ratio: A value indicating the workers capacity. A value of '1' means all capacity is
     consumed. A value of '0' means no capacity is currently consumed.
    :vartype load_ratio: float
    :ivar available_for_offers: A flag indicating this worker is open to receive offers or not.
    :vartype available_for_offers: bool
    """

    _validation = {
        'id': {'readonly': True},
        'state': {'readonly': True},
        'offers': {'readonly': True},
        'assigned_jobs': {'readonly': True},
        'load_ratio': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'queue_assignments': {'key': 'queueAssignments', 'type': '{object}'},
        'total_capacity': {'key': 'totalCapacity', 'type': 'int'},
        'labels': {'key': 'labels', 'type': '{object}'},
        'tags': {'key': 'tags', 'type': '{object}'},
        'channel_configurations': {'key': 'channelConfigurations', 'type': '{ChannelConfiguration}'},
        'offers': {'key': 'offers', 'type': '[JobOffer]'},
        'assigned_jobs': {'key': 'assignedJobs', 'type': '[WorkerAssignment]'},
        'load_ratio': {'key': 'loadRatio', 'type': 'float'},
        'available_for_offers': {'key': 'availableForOffers', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword queue_assignments: The queue(s) that this worker can receive work from.
        :paramtype queue_assignments: dict[str, any]
        :keyword total_capacity: The total capacity score this worker has to manage multiple concurrent
         jobs.
        :paramtype total_capacity: int
        :keyword labels: A set of key/value pairs that are identifying attributes used by the rules
         engines to make decisions.
        :paramtype labels: dict[str, any]
        :keyword tags: A set of tags. A set of non-identifying attributes attached to this worker.
        :paramtype tags: dict[str, any]
        :keyword channel_configurations: The channel(s) this worker can handle and their impact on the
         workers capacity.
        :paramtype channel_configurations: dict[str,
         ~azure.communication.jobrouter.models.ChannelConfiguration]
        :keyword available_for_offers: A flag indicating this worker is open to receive offers or not.
        :paramtype available_for_offers: bool
        """
        super(RouterWorkerInternal, self).__init__(**kwargs)
        self.id = None
        self.state = None
        self.queue_assignments = kwargs.get('queue_assignments', None)
        self.total_capacity = kwargs.get('total_capacity', None)
        self.labels = kwargs.get('labels', None)
        self.tags = kwargs.get('tags', None)
        self.channel_configurations = kwargs.get('channel_configurations', None)
        self.offers = None
        self.assigned_jobs = None
        self.load_ratio = None
        self.available_for_offers = kwargs.get('available_for_offers', None)


class RuleEngineQueueSelector(QueueSelectorAttachment):
    """Attaches labels to a worker when a RouterRule is resolved.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar rule: Required. A rule of one of the following types:
    
     StaticRule:  A rule providing static rules that always return the same result, regardless of
     input.
     DirectMapRule:  A rule that return the same labels as the input labels.
     ExpressionRule: A rule providing inline expression rules.
     AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
    :vartype rule: ~azure.communication.jobrouter.models.RouterRule
    """

    _validation = {
        'kind': {'required': True},
        'rule': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'rule': {'key': 'rule', 'type': 'RouterRule'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule: Required. A rule of one of the following types:
        
         StaticRule:  A rule providing static rules that always return the same result, regardless of
         input.
         DirectMapRule:  A rule that return the same labels as the input labels.
         ExpressionRule: A rule providing inline expression rules.
         AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        :paramtype rule: ~azure.communication.jobrouter.models.RouterRule
        """
        super(RuleEngineQueueSelector, self).__init__(**kwargs)
        self.kind = 'rule-engine'  # type: str
        self.rule = kwargs['rule']


class RuleEngineWorkerSelector(WorkerSelectorAttachment):
    """Attaches labels to a worker when a RouterRule is resolved.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar rule: Required. A rule of one of the following types:
    
     StaticRule:  A rule providing static rules that always return the same result, regardless of
     input.
     DirectMapRule:  A rule that return the same labels as the input labels.
     ExpressionRule: A rule providing inline expression rules.
     AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
    :vartype rule: ~azure.communication.jobrouter.models.RouterRule
    """

    _validation = {
        'kind': {'required': True},
        'rule': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'rule': {'key': 'rule', 'type': 'RouterRule'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword rule: Required. A rule of one of the following types:
        
         StaticRule:  A rule providing static rules that always return the same result, regardless of
         input.
         DirectMapRule:  A rule that return the same labels as the input labels.
         ExpressionRule: A rule providing inline expression rules.
         AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
        :paramtype rule: ~azure.communication.jobrouter.models.RouterRule
        """
        super(RuleEngineWorkerSelector, self).__init__(**kwargs)
        self.kind = 'rule-engine'  # type: str
        self.rule = kwargs['rule']


class ScoringRuleOptions(msrest.serialization.Model):
    """Encapsulates all options that can be passed as parameters for scoring rule with BestWorkerMode.

    :ivar batch_size: (Optional) Set batch size when AllowScoringBatchOfWorkers is set to true.
    :vartype batch_size: int
    :ivar scoring_parameters: (Optional) List of extra parameters from the job that will be sent as
     part of the payload to scoring rule.
     If not set, the job's labels (sent in the payload as ``job``\ ) and the job's worker selectors
     (sent in the payload as ``selectors``\ )
     are added to the payload of the scoring rule by default.
     Note: Worker labels are always sent with scoring payload.
    :vartype scoring_parameters: list[str or
     ~azure.communication.jobrouter.models.ScoringRuleParameterSelector]
    :ivar allow_scoring_batch_of_workers: (Optional)
     If set to true, will score workers in batches, and the parameter name of the worker labels
     will be sent as ``workers``.
     By default, set to false and the parameter name for the worker labels will be sent as
     ``worker``.
     Note: If enabled, use BatchSize to set batch size.
    :vartype allow_scoring_batch_of_workers: bool
    :ivar descending_order: (Optional)
     If false, will sort scores by ascending order. By default, set to true.
    :vartype descending_order: bool
    """

    _attribute_map = {
        'batch_size': {'key': 'batchSize', 'type': 'int'},
        'scoring_parameters': {'key': 'scoringParameters', 'type': '[str]'},
        'allow_scoring_batch_of_workers': {'key': 'allowScoringBatchOfWorkers', 'type': 'bool'},
        'descending_order': {'key': 'descendingOrder', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword batch_size: (Optional) Set batch size when AllowScoringBatchOfWorkers is set to true.
        :paramtype batch_size: int
        :keyword scoring_parameters: (Optional) List of extra parameters from the job that will be sent
         as part of the payload to scoring rule.
         If not set, the job's labels (sent in the payload as ``job``\ ) and the job's worker selectors
         (sent in the payload as ``selectors``\ )
         are added to the payload of the scoring rule by default.
         Note: Worker labels are always sent with scoring payload.
        :paramtype scoring_parameters: list[str or
         ~azure.communication.jobrouter.models.ScoringRuleParameterSelector]
        :keyword allow_scoring_batch_of_workers: (Optional)
         If set to true, will score workers in batches, and the parameter name of the worker labels
         will be sent as ``workers``.
         By default, set to false and the parameter name for the worker labels will be sent as
         ``worker``.
         Note: If enabled, use BatchSize to set batch size.
        :paramtype allow_scoring_batch_of_workers: bool
        :keyword descending_order: (Optional)
         If false, will sort scores by ascending order. By default, set to true.
        :paramtype descending_order: bool
        """
        super(ScoringRuleOptions, self).__init__(**kwargs)
        self.batch_size = kwargs.get('batch_size', None)
        self.scoring_parameters = kwargs.get('scoring_parameters', None)
        self.allow_scoring_batch_of_workers = kwargs.get('allow_scoring_batch_of_workers', None)
        self.descending_order = kwargs.get('descending_order', None)


class StaticQueueSelector(QueueSelectorAttachment):
    """Describes a label selector that will always be attached.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar label_selector: Required. Describes a condition that must be met against a set of labels
     for queue selection.
    :vartype label_selector: ~azure.communication.jobrouter.models.QueueSelector
    """

    _validation = {
        'kind': {'required': True},
        'label_selector': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'label_selector': {'key': 'labelSelector', 'type': 'QueueSelector'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword label_selector: Required. Describes a condition that must be met against a set of
         labels for queue selection.
        :paramtype label_selector: ~azure.communication.jobrouter.models.QueueSelector
        """
        super(StaticQueueSelector, self).__init__(**kwargs)
        self.kind = 'static'  # type: str
        self.label_selector = kwargs['label_selector']


class StaticRule(RouterRule):
    """A rule providing static rules that always return the same result, regardless of input.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of Rule.Constant filled by
     server.
    :vartype kind: str
    :ivar value: The static value this rule always returns.
    :vartype value: any
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The static value this rule always returns.
        :paramtype value: any
        """
        super(StaticRule, self).__init__(**kwargs)
        self.kind = 'static-rule'  # type: str
        self.value = kwargs.get('value', None)


class StaticWorkerSelector(WorkerSelectorAttachment):
    """Describes a label selector that will always be attached.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar label_selector: Required. Describes a condition that must be met against a set of labels
     for worker selection.
    :vartype label_selector: ~azure.communication.jobrouter.models.WorkerSelector
    """

    _validation = {
        'kind': {'required': True},
        'label_selector': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'label_selector': {'key': 'labelSelector', 'type': 'WorkerSelector'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword label_selector: Required. Describes a condition that must be met against a set of
         labels for worker selection.
        :paramtype label_selector: ~azure.communication.jobrouter.models.WorkerSelector
        """
        super(StaticWorkerSelector, self).__init__(**kwargs)
        self.kind = 'static'  # type: str
        self.label_selector = kwargs['label_selector']


class WaitTimeExceptionTrigger(JobExceptionTrigger):
    """Trigger for an exception action on exceeding wait time.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing a sub-type of ExceptionTrigger.Constant
     filled by server.
    :vartype kind: str
    :ivar threshold: Required. Threshold for wait time for this trigger. Requires input conforming
     to ISO8601 duration format.
    :vartype threshold: str
    """

    _validation = {
        'kind': {'required': True},
        'threshold': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'threshold': {'key': 'threshold', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword threshold: Required. Threshold for wait time for this trigger. Requires input
         conforming to ISO8601 duration format.
        :paramtype threshold: str
        """
        super(WaitTimeExceptionTrigger, self).__init__(**kwargs)
        self.kind = 'wait-time'  # type: str
        self.threshold = kwargs['threshold']


class WeightedAllocationQueueSelector(QueueSelectorAttachment):
    """Describes multiple sets of label selectors, of which one will be selected and attached according to a weighting.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar allocations: Required. A collection of percentage based weighted allocations.
    :vartype allocations: list[~azure.communication.jobrouter.models.QueueWeightedAllocation]
    """

    _validation = {
        'kind': {'required': True},
        'allocations': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'allocations': {'key': 'allocations', 'type': '[QueueWeightedAllocation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword allocations: Required. A collection of percentage based weighted allocations.
        :paramtype allocations: list[~azure.communication.jobrouter.models.QueueWeightedAllocation]
        """
        super(WeightedAllocationQueueSelector, self).__init__(**kwargs)
        self.kind = 'weighted-allocation-queue-selector'  # type: str
        self.allocations = kwargs['allocations']


class WeightedAllocationWorkerSelector(WorkerSelectorAttachment):
    """Describes multiple sets of label selectors, of which one will be selected and attached according to a weighting.

    All required parameters must be populated in order to send to Azure.

    :ivar kind: Required. The type discriminator describing the type of label selector
     attachment.Constant filled by server.
    :vartype kind: str
    :ivar allocations: Required. A collection of percentage based weighted allocations.
    :vartype allocations: list[~azure.communication.jobrouter.models.WorkerWeightedAllocation]
    """

    _validation = {
        'kind': {'required': True},
        'allocations': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'allocations': {'key': 'allocations', 'type': '[WorkerWeightedAllocation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword allocations: Required. A collection of percentage based weighted allocations.
        :paramtype allocations: list[~azure.communication.jobrouter.models.WorkerWeightedAllocation]
        """
        super(WeightedAllocationWorkerSelector, self).__init__(**kwargs)
        self.kind = 'weighted-allocation-worker-selector'  # type: str
        self.allocations = kwargs['allocations']


class WorkerAssignment(msrest.serialization.Model):
    """The assignment for a worker to a job.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. The Id of the assignment.
    :vartype id: str
    :ivar job_id: Required. The Id of the Job assigned.
    :vartype job_id: str
    :ivar capacity_cost: Required. The amount of capacity this assignment has consumed on the
     worker.
    :vartype capacity_cost: int
    :ivar assign_time: Required. The assignment time of the job.
    :vartype assign_time: ~datetime.datetime
    """

    _validation = {
        'id': {'required': True},
        'job_id': {'required': True},
        'capacity_cost': {'required': True},
        'assign_time': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'job_id': {'key': 'jobId', 'type': 'str'},
        'capacity_cost': {'key': 'capacityCost', 'type': 'int'},
        'assign_time': {'key': 'assignTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required. The Id of the assignment.
        :paramtype id: str
        :keyword job_id: Required. The Id of the Job assigned.
        :paramtype job_id: str
        :keyword capacity_cost: Required. The amount of capacity this assignment has consumed on the
         worker.
        :paramtype capacity_cost: int
        :keyword assign_time: Required. The assignment time of the job.
        :paramtype assign_time: ~datetime.datetime
        """
        super(WorkerAssignment, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.job_id = kwargs['job_id']
        self.capacity_cost = kwargs['capacity_cost']
        self.assign_time = kwargs['assign_time']


class WorkerCollection(msrest.serialization.Model):
    """A paged collection of workers.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.communication.jobrouter.models.PagedRouterWorkerInternal]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PagedRouterWorkerInternal]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.communication.jobrouter.models.PagedRouterWorkerInternal]
        """
        super(WorkerCollection, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.next_link = None


class WorkerSelector(msrest.serialization.Model):
    """Describes a condition that must be met against a set of labels for worker selection.

    All required parameters must be populated in order to send to Azure.

    :ivar key: Required. The label key to query against.
    :vartype key: str
    :ivar label_operator: Required. Describes how the value of the label is compared to the value
     defined on the label selector. Known values are: "equal", "notEqual", "lessThan",
     "lessThanEqual", "greaterThan", "greaterThanEqual".
    :vartype label_operator: str or ~azure.communication.jobrouter.models.LabelOperator
    :ivar value: The value to compare against the actual label value with the given operator.
    :vartype value: any
    :ivar ttl_seconds: Describes how long this label selector is valid in seconds.
    :vartype ttl_seconds: float
    :ivar expedite: Pushes the job to the front of the queue as long as this selector is active.
    :vartype expedite: bool
    """

    _validation = {
        'key': {'required': True, 'max_length': 500, 'min_length': 0},
        'label_operator': {'required': True},
    }

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'label_operator': {'key': 'labelOperator', 'type': 'str'},
        'value': {'key': 'value', 'type': 'object'},
        'ttl_seconds': {'key': 'ttlSeconds', 'type': 'float'},
        'expedite': {'key': 'expedite', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key: Required. The label key to query against.
        :paramtype key: str
        :keyword label_operator: Required. Describes how the value of the label is compared to the
         value defined on the label selector. Known values are: "equal", "notEqual", "lessThan",
         "lessThanEqual", "greaterThan", "greaterThanEqual".
        :paramtype label_operator: str or ~azure.communication.jobrouter.models.LabelOperator
        :keyword value: The value to compare against the actual label value with the given operator.
        :paramtype value: any
        :keyword ttl_seconds: Describes how long this label selector is valid in seconds.
        :paramtype ttl_seconds: float
        :keyword expedite: Pushes the job to the front of the queue as long as this selector is active.
        :paramtype expedite: bool
        """
        super(WorkerSelector, self).__init__(**kwargs)
        self.key = kwargs['key']
        self.label_operator = kwargs['label_operator']
        self.value = kwargs.get('value', None)
        self.ttl_seconds = kwargs.get('ttl_seconds', None)
        self.expedite = kwargs.get('expedite', None)


class WorkerWeightedAllocation(msrest.serialization.Model):
    """Contains the weight percentage and label selectors to be applied if selected for weighted distributions.

    All required parameters must be populated in order to send to Azure.

    :ivar weight: Required. The percentage of this weight, expressed as a fraction of 1.
    :vartype weight: float
    :ivar label_selectors: Required. A collection of label selectors that will be applied if this
     allocation is selected.
    :vartype label_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
    """

    _validation = {
        'weight': {'required': True},
        'label_selectors': {'required': True},
    }

    _attribute_map = {
        'weight': {'key': 'weight', 'type': 'float'},
        'label_selectors': {'key': 'labelSelectors', 'type': '[WorkerSelector]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword weight: Required. The percentage of this weight, expressed as a fraction of 1.
        :paramtype weight: float
        :keyword label_selectors: Required. A collection of label selectors that will be applied if
         this allocation is selected.
        :paramtype label_selectors: list[~azure.communication.jobrouter.models.WorkerSelector]
        """
        super(WorkerWeightedAllocation, self).__init__(**kwargs)
        self.weight = kwargs['weight']
        self.label_selectors = kwargs['label_selectors']
