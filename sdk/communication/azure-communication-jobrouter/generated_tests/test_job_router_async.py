# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import JobRouterPreparer
from testpreparer_async import JobRouterClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestJobRouterAsync(JobRouterClientTestBaseAsync):
    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_upsert_job(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.upsert_job(
            job_id="str",
            resource={
                "etag": "str",
                "id": "str",
                "assignments": {
                    "str": {
                        "assignedAt": "2020-02-20 00:00:00",
                        "assignmentId": "str",
                        "closedAt": "2020-02-20 00:00:00",
                        "completedAt": "2020-02-20 00:00:00",
                        "workerId": "str",
                    }
                },
                "attachedWorkerSelectors": [
                    {
                        "key": "str",
                        "labelOperator": "str",
                        "expedite": bool,
                        "expiresAfterSeconds": 0.0,
                        "expiresAt": "2020-02-20 00:00:00",
                        "status": "str",
                        "value": {},
                    }
                ],
                "channelId": "str",
                "channelReference": "str",
                "classificationPolicyId": "str",
                "dispositionCode": "str",
                "enqueuedAt": "2020-02-20 00:00:00",
                "labels": {"str": {}},
                "matchingMode": "job_matching_mode",
                "notes": [{"message": "str", "addedAt": "2020-02-20 00:00:00"}],
                "priority": 0,
                "queueId": "str",
                "requestedWorkerSelectors": [
                    {
                        "key": "str",
                        "labelOperator": "str",
                        "expedite": bool,
                        "expiresAfterSeconds": 0.0,
                        "expiresAt": "2020-02-20 00:00:00",
                        "status": "str",
                        "value": {},
                    }
                ],
                "scheduledAt": "2020-02-20 00:00:00",
                "status": "str",
                "tags": {"str": {}},
            },
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_get_job(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.get_job(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_delete_job(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.delete_job(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_list_jobs(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = client.list_jobs()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_get_queue_position(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.get_queue_position(
            job_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_unassign_job(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.unassign_job(
            job_id="str",
            assignment_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_accept_job_offer(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.accept_job_offer(
            worker_id="str",
            offer_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_get_queue_statistics(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.get_queue_statistics(
            queue_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_upsert_worker(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.upsert_worker(
            worker_id="str",
            resource={
                "etag": "str",
                "id": "str",
                "assignedJobs": [
                    {"assignedAt": "2020-02-20 00:00:00", "assignmentId": "str", "capacityCost": 0, "jobId": "str"}
                ],
                "availableForOffers": bool,
                "capacity": 0,
                "channels": [{"capacityCostPerJob": 0, "channelId": "str", "maxNumberOfJobs": 0}],
                "labels": {"str": {}},
                "loadRatio": 0.0,
                "maxConcurrentOffers": 0,
                "offers": [
                    {
                        "capacityCost": 0,
                        "jobId": "str",
                        "offerId": "str",
                        "expiresAt": "2020-02-20 00:00:00",
                        "offeredAt": "2020-02-20 00:00:00",
                    }
                ],
                "queues": ["str"],
                "state": "str",
                "tags": {"str": {}},
            },
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_get_worker(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.get_worker(
            worker_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_delete_worker(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = await client.delete_worker(
            worker_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @JobRouterPreparer()
    @recorded_by_proxy_async
    async def test_list_workers(self, jobrouter_endpoint):
        client = self.create_async_client(endpoint=jobrouter_endpoint)
        response = client.list_workers()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
