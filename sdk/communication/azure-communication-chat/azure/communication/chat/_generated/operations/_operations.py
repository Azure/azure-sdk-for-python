# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
import sys
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_chat_thread_list_chat_read_receipts_request(
    chat_thread_id: str, *, skip: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/readReceipts"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    if skip is not None:
        _params["skip"] = _SERIALIZER.query("skip", skip, "int")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_send_chat_read_receipt_request(chat_thread_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/readReceipts"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_send_chat_message_request(chat_thread_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/messages"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_list_chat_messages_request(
    chat_thread_id: str, *, start_time: Optional[datetime.datetime] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/messages"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    if start_time is not None:
        _params["startTime"] = _SERIALIZER.query("start_time", start_time, "iso-8601")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_get_chat_message_request(chat_thread_id: str, chat_message_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/messages/{chatMessageId}"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
        "chatMessageId": _SERIALIZER.url("chat_message_id", chat_message_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_update_chat_message_request(
    chat_thread_id: str, chat_message_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/messages/{chatMessageId}"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
        "chatMessageId": _SERIALIZER.url("chat_message_id", chat_message_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_delete_chat_message_request(
    chat_thread_id: str, chat_message_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/messages/{chatMessageId}"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
        "chatMessageId": _SERIALIZER.url("chat_message_id", chat_message_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_list_chat_participants_request(
    chat_thread_id: str, *, skip: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/participants"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    if skip is not None:
        _params["skip"] = _SERIALIZER.query("skip", skip, "int")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_remove_chat_participant_request(chat_thread_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/participants/:remove"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_add_chat_participants_request(chat_thread_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/participants/:add"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_update_chat_thread_properties_request(chat_thread_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_get_chat_thread_properties_request(chat_thread_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_thread_send_typing_notification_request(chat_thread_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}/typing"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_create_chat_thread_request(
    *, repeatability_request_id: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if repeatability_request_id is not None:
        _headers["repeatability-request-id"] = _SERIALIZER.header(
            "repeatability_request_id", repeatability_request_id, "str"
        )
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_list_chat_threads_request(
    *, start_time: Optional[datetime.datetime] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads"

    # Construct parameters
    if start_time is not None:
        _params["startTime"] = _SERIALIZER.query("start_time", start_time, "iso-8601")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_chat_delete_chat_thread_request(chat_thread_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Literal["2021-09-07"] = kwargs.pop("api_version", _params.pop("api-version", "2021-09-07"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/chat/threads/{chatThreadId}"
    path_format_arguments = {
        "chatThreadId": _SERIALIZER.url("chat_thread_id", chat_thread_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


class ChatThreadOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.communication.chat.AzureCommunicationChatService`'s
        :attr:`chat_thread` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_chat_read_receipts(
        self, chat_thread_id: str, *, skip: Optional[int] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets chat message read receipts for a thread.

        Gets chat message read receipts for a thread.

        :param chat_thread_id: Thread id to get the chat message read receipts for. Required.
        :type chat_thread_id: str
        :keyword skip: Skips chat message read receipts up to a specified position in response. Default
         value is None.
        :paramtype skip: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "chatMessageId": "str",  # Id of the chat message that has been read. This id
                      is generated by the server. Required.
                    "readOn": "2020-02-20 00:00:00",  # The time at which the message was read.
                      The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``. Required.
                    "senderCommunicationIdentifier": {
                        "communicationUser": {
                            "id": "str"  # The Id of the communication user. Required.
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",  # The Id of the Microsoft Teams user. If
                              not anonymous, this is the AAD object Id of the user. Required.
                            "cloud": "str",  # Optional. The cloud that the Microsoft
                              Teams user belongs to. By default 'public' if missing. Known values are:
                              "public", "dod", and "gcch".
                            "isAnonymous": bool  # Optional. True if the Microsoft Teams
                              user is anonymous. By default false if missing.
                        },
                        "phoneNumber": {
                            "value": "str"  # The phone number in E.164 format. Required.
                        },
                        "rawId": "str"  # Optional. Raw Id of the identifier. Optional in
                          requests, required in responses.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_chat_thread_list_chat_read_receipts_request(
                    chat_thread_id=chat_thread_id,
                    skip=skip,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @overload
    def send_chat_read_receipt(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        send_read_receipt_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Sends a read receipt event to a thread, on behalf of a user.

        Sends a read receipt event to a thread, on behalf of a user.

        :param chat_thread_id: Thread id to send the read receipt event to. Required.
        :type chat_thread_id: str
        :param send_read_receipt_request: Read receipt details. Required.
        :type send_read_receipt_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_read_receipt_request = {
                    "chatMessageId": "str"  # Id of the latest chat message read by the user.
                      Required.
                }
        """

    @overload
    def send_chat_read_receipt(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        send_read_receipt_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Sends a read receipt event to a thread, on behalf of a user.

        Sends a read receipt event to a thread, on behalf of a user.

        :param chat_thread_id: Thread id to send the read receipt event to. Required.
        :type chat_thread_id: str
        :param send_read_receipt_request: Read receipt details. Required.
        :type send_read_receipt_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def send_chat_read_receipt(  # pylint: disable=inconsistent-return-statements
        self, chat_thread_id: str, send_read_receipt_request: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Sends a read receipt event to a thread, on behalf of a user.

        Sends a read receipt event to a thread, on behalf of a user.

        :param chat_thread_id: Thread id to send the read receipt event to. Required.
        :type chat_thread_id: str
        :param send_read_receipt_request: Read receipt details. Is either a JSON type or a IO type.
         Required.
        :type send_read_receipt_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_read_receipt_request = {
                    "chatMessageId": "str"  # Id of the latest chat message read by the user.
                      Required.
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(send_read_receipt_request, (IO, bytes)):
            _content = send_read_receipt_request
        else:
            _json = send_read_receipt_request

        request = build_chat_thread_send_chat_read_receipt_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def send_chat_message(
        self,
        chat_thread_id: str,
        send_chat_message_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Sends a message to a thread.

        Sends a message to a thread.

        :param chat_thread_id: The thread id to send the message to. Required.
        :type chat_thread_id: str
        :param send_chat_message_request: Details of the message to send. Required.
        :type send_chat_message_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_chat_message_request = {
                    "content": "str",  # Chat message content. Required.
                    "metadata": {
                        "str": "str"  # Optional. Message metadata.
                    },
                    "senderDisplayName": "str",  # Optional. The display name of the chat message
                      sender. This property is used to populate sender name for push notifications.
                    "type": "str"  # Optional. The chat message type. Known values are: "text",
                      "html", "topicUpdated", "participantAdded", and "participantRemoved".
                }

                # response body for status code(s): 201
                response == {
                    "id": "str"  # A server-generated message id. Required.
                }
        """

    @overload
    def send_chat_message(
        self,
        chat_thread_id: str,
        send_chat_message_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Sends a message to a thread.

        Sends a message to a thread.

        :param chat_thread_id: The thread id to send the message to. Required.
        :type chat_thread_id: str
        :param send_chat_message_request: Details of the message to send. Required.
        :type send_chat_message_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "id": "str"  # A server-generated message id. Required.
                }
        """

    @distributed_trace
    def send_chat_message(self, chat_thread_id: str, send_chat_message_request: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Sends a message to a thread.

        Sends a message to a thread.

        :param chat_thread_id: The thread id to send the message to. Required.
        :type chat_thread_id: str
        :param send_chat_message_request: Details of the message to send. Is either a JSON type or a IO
         type. Required.
        :type send_chat_message_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_chat_message_request = {
                    "content": "str",  # Chat message content. Required.
                    "metadata": {
                        "str": "str"  # Optional. Message metadata.
                    },
                    "senderDisplayName": "str",  # Optional. The display name of the chat message
                      sender. This property is used to populate sender name for push notifications.
                    "type": "str"  # Optional. The chat message type. Known values are: "text",
                      "html", "topicUpdated", "participantAdded", and "participantRemoved".
                }

                # response body for status code(s): 201
                response == {
                    "id": "str"  # A server-generated message id. Required.
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(send_chat_message_request, (IO, bytes)):
            _content = send_chat_message_request
        else:
            _json = send_chat_message_request

        request = build_chat_thread_send_chat_message_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_chat_messages(
        self, chat_thread_id: str, *, start_time: Optional[datetime.datetime] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets a list of messages from a thread.

        Gets a list of messages from a thread.

        :param chat_thread_id: The thread id of the message. Required.
        :type chat_thread_id: str
        :keyword start_time: The earliest point in time to get messages up to. The timestamp should be
         in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``. Default value is None.
        :paramtype start_time: ~datetime.datetime
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdOn": "2020-02-20 00:00:00",  # The timestamp when the chat message
                      arrived at the server. The timestamp is in RFC3339 format:
                      ``yyyy-MM-ddTHH:mm:ssZ``. Required.
                    "id": "str",  # The id of the chat message. This id is server generated.
                      Required.
                    "sequenceId": "str",  # Sequence of the chat message in the conversation.
                      Required.
                    "type": "str",  # The chat message type. Required. Known values are: "text",
                      "html", "topicUpdated", "participantAdded", and "participantRemoved".
                    "version": "str",  # Version of the chat message. Required.
                    "content": {
                        "initiatorCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"  # The Id of the communication user.
                                  Required.
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",  # The Id of the Microsoft Teams
                                  user. If not anonymous, this is the AAD object Id of the user.
                                  Required.
                                "cloud": "str",  # Optional. The cloud that the
                                  Microsoft Teams user belongs to. By default 'public' if missing.
                                  Known values are: "public", "dod", and "gcch".
                                "isAnonymous": bool  # Optional. True if the
                                  Microsoft Teams user is anonymous. By default false if missing.
                            },
                            "phoneNumber": {
                                "value": "str"  # The phone number in E.164 format.
                                  Required.
                            },
                            "rawId": "str"  # Optional. Raw Id of the identifier.
                              Optional in requests, required in responses.
                        },
                        "message": "str",  # Optional. Chat message content for messages of
                          types text or html.
                        "participants": [
                            {
                                "communicationIdentifier": {
                                    "communicationUser": {
                                        "id": "str"  # The Id of the
                                          communication user. Required.
                                    },
                                    "microsoftTeamsUser": {
                                        "userId": "str",  # The Id of the
                                          Microsoft Teams user. If not anonymous, this is the AAD
                                          object Id of the user. Required.
                                        "cloud": "str",  # Optional. The
                                          cloud that the Microsoft Teams user belongs to. By default
                                          'public' if missing. Known values are: "public", "dod", and
                                          "gcch".
                                        "isAnonymous": bool  # Optional. True
                                          if the Microsoft Teams user is anonymous. By default false if
                                          missing.
                                    },
                                    "phoneNumber": {
                                        "value": "str"  # The phone number in
                                          E.164 format. Required.
                                    },
                                    "rawId": "str"  # Optional. Raw Id of the
                                      identifier. Optional in requests, required in responses.
                                },
                                "displayName": "str",  # Optional. Display name for
                                  the chat participant.
                                "shareHistoryTime": "2020-02-20 00:00:00"  #
                                  Optional. Time from which the chat history is shared with the
                                  participant. The timestamp is in RFC3339 format:
                                  ``yyyy-MM-ddTHH:mm:ssZ``.
                            }
                        ],
                        "topic": "str"  # Optional. Chat message content for messages of type
                          topicUpdated.
                    },
                    "deletedOn": "2020-02-20 00:00:00",  # Optional. The timestamp (if
                      applicable) when the message was deleted. The timestamp is in RFC3339 format:
                      ``yyyy-MM-ddTHH:mm:ssZ``.
                    "editedOn": "2020-02-20 00:00:00",  # Optional. The last timestamp (if
                      applicable) when the message was edited. The timestamp is in RFC3339 format:
                      ``yyyy-MM-ddTHH:mm:ssZ``.
                    "metadata": {
                        "str": "str"  # Optional. Message metadata.
                    },
                    "senderCommunicationIdentifier": {
                        "communicationUser": {
                            "id": "str"  # The Id of the communication user. Required.
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",  # The Id of the Microsoft Teams user. If
                              not anonymous, this is the AAD object Id of the user. Required.
                            "cloud": "str",  # Optional. The cloud that the Microsoft
                              Teams user belongs to. By default 'public' if missing. Known values are:
                              "public", "dod", and "gcch".
                            "isAnonymous": bool  # Optional. True if the Microsoft Teams
                              user is anonymous. By default false if missing.
                        },
                        "phoneNumber": {
                            "value": "str"  # The phone number in E.164 format. Required.
                        },
                        "rawId": "str"  # Optional. Raw Id of the identifier. Optional in
                          requests, required in responses.
                    },
                    "senderDisplayName": "str"  # Optional. The display name of the chat message
                      sender. This property is used to populate sender name for push notifications.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_chat_thread_list_chat_messages_request(
                    chat_thread_id=chat_thread_id,
                    start_time=start_time,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_chat_message(self, chat_thread_id: str, chat_message_id: str, **kwargs: Any) -> JSON:
        """Gets a message by id.

        Gets a message by id.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdOn": "2020-02-20 00:00:00",  # The timestamp when the chat message
                      arrived at the server. The timestamp is in RFC3339 format:
                      ``yyyy-MM-ddTHH:mm:ssZ``. Required.
                    "id": "str",  # The id of the chat message. This id is server generated.
                      Required.
                    "sequenceId": "str",  # Sequence of the chat message in the conversation.
                      Required.
                    "type": "str",  # The chat message type. Required. Known values are: "text",
                      "html", "topicUpdated", "participantAdded", and "participantRemoved".
                    "version": "str",  # Version of the chat message. Required.
                    "content": {
                        "initiatorCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"  # The Id of the communication user.
                                  Required.
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",  # The Id of the Microsoft Teams
                                  user. If not anonymous, this is the AAD object Id of the user.
                                  Required.
                                "cloud": "str",  # Optional. The cloud that the
                                  Microsoft Teams user belongs to. By default 'public' if missing.
                                  Known values are: "public", "dod", and "gcch".
                                "isAnonymous": bool  # Optional. True if the
                                  Microsoft Teams user is anonymous. By default false if missing.
                            },
                            "phoneNumber": {
                                "value": "str"  # The phone number in E.164 format.
                                  Required.
                            },
                            "rawId": "str"  # Optional. Raw Id of the identifier.
                              Optional in requests, required in responses.
                        },
                        "message": "str",  # Optional. Chat message content for messages of
                          types text or html.
                        "participants": [
                            {
                                "communicationIdentifier": {
                                    "communicationUser": {
                                        "id": "str"  # The Id of the
                                          communication user. Required.
                                    },
                                    "microsoftTeamsUser": {
                                        "userId": "str",  # The Id of the
                                          Microsoft Teams user. If not anonymous, this is the AAD
                                          object Id of the user. Required.
                                        "cloud": "str",  # Optional. The
                                          cloud that the Microsoft Teams user belongs to. By default
                                          'public' if missing. Known values are: "public", "dod", and
                                          "gcch".
                                        "isAnonymous": bool  # Optional. True
                                          if the Microsoft Teams user is anonymous. By default false if
                                          missing.
                                    },
                                    "phoneNumber": {
                                        "value": "str"  # The phone number in
                                          E.164 format. Required.
                                    },
                                    "rawId": "str"  # Optional. Raw Id of the
                                      identifier. Optional in requests, required in responses.
                                },
                                "displayName": "str",  # Optional. Display name for
                                  the chat participant.
                                "shareHistoryTime": "2020-02-20 00:00:00"  #
                                  Optional. Time from which the chat history is shared with the
                                  participant. The timestamp is in RFC3339 format:
                                  ``yyyy-MM-ddTHH:mm:ssZ``.
                            }
                        ],
                        "topic": "str"  # Optional. Chat message content for messages of type
                          topicUpdated.
                    },
                    "deletedOn": "2020-02-20 00:00:00",  # Optional. The timestamp (if
                      applicable) when the message was deleted. The timestamp is in RFC3339 format:
                      ``yyyy-MM-ddTHH:mm:ssZ``.
                    "editedOn": "2020-02-20 00:00:00",  # Optional. The last timestamp (if
                      applicable) when the message was edited. The timestamp is in RFC3339 format:
                      ``yyyy-MM-ddTHH:mm:ssZ``.
                    "metadata": {
                        "str": "str"  # Optional. Message metadata.
                    },
                    "senderCommunicationIdentifier": {
                        "communicationUser": {
                            "id": "str"  # The Id of the communication user. Required.
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",  # The Id of the Microsoft Teams user. If
                              not anonymous, this is the AAD object Id of the user. Required.
                            "cloud": "str",  # Optional. The cloud that the Microsoft
                              Teams user belongs to. By default 'public' if missing. Known values are:
                              "public", "dod", and "gcch".
                            "isAnonymous": bool  # Optional. True if the Microsoft Teams
                              user is anonymous. By default false if missing.
                        },
                        "phoneNumber": {
                            "value": "str"  # The phone number in E.164 format. Required.
                        },
                        "rawId": "str"  # Optional. Raw Id of the identifier. Optional in
                          requests, required in responses.
                    },
                    "senderDisplayName": "str"  # Optional. The display name of the chat message
                      sender. This property is used to populate sender name for push notifications.
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_chat_thread_get_chat_message_request(
            chat_thread_id=chat_thread_id,
            chat_message_id=chat_message_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def update_chat_message(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        chat_message_id: str,
        update_chat_message_request: JSON,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> None:
        """Updates a message.

        Updates a message.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :param update_chat_message_request: Details of the request to update the message. Required.
        :type update_chat_message_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                update_chat_message_request = {
                    "content": "str",  # Optional. Chat message content.
                    "metadata": {
                        "str": "str"  # Optional. Message metadata.
                    }
                }
        """

    @overload
    def update_chat_message(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        chat_message_id: str,
        update_chat_message_request: IO,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> None:
        """Updates a message.

        Updates a message.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :param update_chat_message_request: Details of the request to update the message. Required.
        :type update_chat_message_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_chat_message(  # pylint: disable=inconsistent-return-statements
        self, chat_thread_id: str, chat_message_id: str, update_chat_message_request: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Updates a message.

        Updates a message.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :param update_chat_message_request: Details of the request to update the message. Is either a
         JSON type or a IO type. Required.
        :type update_chat_message_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                update_chat_message_request = {
                    "content": "str",  # Optional. Chat message content.
                    "metadata": {
                        "str": "str"  # Optional. Message metadata.
                    }
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(update_chat_message_request, (IO, bytes)):
            _content = update_chat_message_request
        else:
            _json = update_chat_message_request

        request = build_chat_thread_update_chat_message_request(
            chat_thread_id=chat_thread_id,
            chat_message_id=chat_message_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def delete_chat_message(  # pylint: disable=inconsistent-return-statements
        self, chat_thread_id: str, chat_message_id: str, **kwargs: Any
    ) -> None:
        """Deletes a message.

        Deletes a message.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_chat_thread_delete_chat_message_request(
            chat_thread_id=chat_thread_id,
            chat_message_id=chat_message_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def list_chat_participants(
        self, chat_thread_id: str, *, skip: Optional[int] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Gets the participants of a thread.

        Gets the participants of a thread.

        :param chat_thread_id: Thread id to get participants for. Required.
        :type chat_thread_id: str
        :keyword skip: Skips participants up to a specified position in response. Default value is
         None.
        :paramtype skip: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "communicationIdentifier": {
                        "communicationUser": {
                            "id": "str"  # The Id of the communication user. Required.
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",  # The Id of the Microsoft Teams user. If
                              not anonymous, this is the AAD object Id of the user. Required.
                            "cloud": "str",  # Optional. The cloud that the Microsoft
                              Teams user belongs to. By default 'public' if missing. Known values are:
                              "public", "dod", and "gcch".
                            "isAnonymous": bool  # Optional. True if the Microsoft Teams
                              user is anonymous. By default false if missing.
                        },
                        "phoneNumber": {
                            "value": "str"  # The phone number in E.164 format. Required.
                        },
                        "rawId": "str"  # Optional. Raw Id of the identifier. Optional in
                          requests, required in responses.
                    },
                    "displayName": "str",  # Optional. Display name for the chat participant.
                    "shareHistoryTime": "2020-02-20 00:00:00"  # Optional. Time from which the
                      chat history is shared with the participant. The timestamp is in RFC3339 format:
                      ``yyyy-MM-ddTHH:mm:ssZ``.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_chat_thread_list_chat_participants_request(
                    chat_thread_id=chat_thread_id,
                    skip=skip,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @overload
    def remove_chat_participant(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        participant_communication_identifier: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Remove a participant from a thread.

        Remove a participant from a thread.

        :param chat_thread_id: Thread id to remove the participant from. Required.
        :type chat_thread_id: str
        :param participant_communication_identifier: Id of the thread participant to remove from the
         thread. Required.
        :type participant_communication_identifier: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                participant_communication_identifier = {
                    "communicationUser": {
                        "id": "str"  # The Id of the communication user. Required.
                    },
                    "microsoftTeamsUser": {
                        "userId": "str",  # The Id of the Microsoft Teams user. If not
                          anonymous, this is the AAD object Id of the user. Required.
                        "cloud": "str",  # Optional. The cloud that the Microsoft Teams user
                          belongs to. By default 'public' if missing. Known values are: "public",
                          "dod", and "gcch".
                        "isAnonymous": bool  # Optional. True if the Microsoft Teams user is
                          anonymous. By default false if missing.
                    },
                    "phoneNumber": {
                        "value": "str"  # The phone number in E.164 format. Required.
                    },
                    "rawId": "str"  # Optional. Raw Id of the identifier. Optional in requests,
                      required in responses.
                }
        """

    @overload
    def remove_chat_participant(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        participant_communication_identifier: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Remove a participant from a thread.

        Remove a participant from a thread.

        :param chat_thread_id: Thread id to remove the participant from. Required.
        :type chat_thread_id: str
        :param participant_communication_identifier: Id of the thread participant to remove from the
         thread. Required.
        :type participant_communication_identifier: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/json', 'application/merge-patch+json'. Default value is
         "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def remove_chat_participant(  # pylint: disable=inconsistent-return-statements
        self, chat_thread_id: str, participant_communication_identifier: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Remove a participant from a thread.

        Remove a participant from a thread.

        :param chat_thread_id: Thread id to remove the participant from. Required.
        :type chat_thread_id: str
        :param participant_communication_identifier: Id of the thread participant to remove from the
         thread. Is either a JSON type or a IO type. Required.
        :type participant_communication_identifier: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json',
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                participant_communication_identifier = {
                    "communicationUser": {
                        "id": "str"  # The Id of the communication user. Required.
                    },
                    "microsoftTeamsUser": {
                        "userId": "str",  # The Id of the Microsoft Teams user. If not
                          anonymous, this is the AAD object Id of the user. Required.
                        "cloud": "str",  # Optional. The cloud that the Microsoft Teams user
                          belongs to. By default 'public' if missing. Known values are: "public",
                          "dod", and "gcch".
                        "isAnonymous": bool  # Optional. True if the Microsoft Teams user is
                          anonymous. By default false if missing.
                    },
                    "phoneNumber": {
                        "value": "str"  # The phone number in E.164 format. Required.
                    },
                    "rawId": "str"  # Optional. Raw Id of the identifier. Optional in requests,
                      required in responses.
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(participant_communication_identifier, (IO, bytes)):
            _content = participant_communication_identifier
        else:
            _json = participant_communication_identifier

        request = build_chat_thread_remove_chat_participant_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def add_chat_participants(
        self,
        chat_thread_id: str,
        add_chat_participants_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Adds thread participants to a thread. If participants already exist, no change occurs.

        Adds thread participants to a thread. If participants already exist, no change occurs.

        :param chat_thread_id: Id of the thread to add participants to. Required.
        :type chat_thread_id: str
        :param add_chat_participants_request: Thread participants to be added to the thread. Required.
        :type add_chat_participants_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                add_chat_participants_request = {
                    "participants": [
                        {
                            "communicationIdentifier": {
                                "communicationUser": {
                                    "id": "str"  # The Id of the communication
                                      user. Required.
                                },
                                "microsoftTeamsUser": {
                                    "userId": "str",  # The Id of the Microsoft
                                      Teams user. If not anonymous, this is the AAD object Id of the
                                      user. Required.
                                    "cloud": "str",  # Optional. The cloud that
                                      the Microsoft Teams user belongs to. By default 'public' if
                                      missing. Known values are: "public", "dod", and "gcch".
                                    "isAnonymous": bool  # Optional. True if the
                                      Microsoft Teams user is anonymous. By default false if missing.
                                },
                                "phoneNumber": {
                                    "value": "str"  # The phone number in E.164
                                      format. Required.
                                },
                                "rawId": "str"  # Optional. Raw Id of the identifier.
                                  Optional in requests, required in responses.
                            },
                            "displayName": "str",  # Optional. Display name for the chat
                              participant.
                            "shareHistoryTime": "2020-02-20 00:00:00"  # Optional. Time
                              from which the chat history is shared with the participant. The timestamp
                              is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                        }
                    ]
                }

                # response body for status code(s): 201
                response == {
                    "invalidParticipants": [
                        {
                            "code": "str",  # The error code. Required.
                            "message": "str",  # The error message. Required.
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"  # Optional. The error target.
                        }
                    ]
                }
        """

    @overload
    def add_chat_participants(
        self,
        chat_thread_id: str,
        add_chat_participants_request: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Adds thread participants to a thread. If participants already exist, no change occurs.

        Adds thread participants to a thread. If participants already exist, no change occurs.

        :param chat_thread_id: Id of the thread to add participants to. Required.
        :type chat_thread_id: str
        :param add_chat_participants_request: Thread participants to be added to the thread. Required.
        :type add_chat_participants_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "invalidParticipants": [
                        {
                            "code": "str",  # The error code. Required.
                            "message": "str",  # The error message. Required.
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"  # Optional. The error target.
                        }
                    ]
                }
        """

    @distributed_trace
    def add_chat_participants(
        self, chat_thread_id: str, add_chat_participants_request: Union[JSON, IO], **kwargs: Any
    ) -> JSON:
        """Adds thread participants to a thread. If participants already exist, no change occurs.

        Adds thread participants to a thread. If participants already exist, no change occurs.

        :param chat_thread_id: Id of the thread to add participants to. Required.
        :type chat_thread_id: str
        :param add_chat_participants_request: Thread participants to be added to the thread. Is either
         a JSON type or a IO type. Required.
        :type add_chat_participants_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                add_chat_participants_request = {
                    "participants": [
                        {
                            "communicationIdentifier": {
                                "communicationUser": {
                                    "id": "str"  # The Id of the communication
                                      user. Required.
                                },
                                "microsoftTeamsUser": {
                                    "userId": "str",  # The Id of the Microsoft
                                      Teams user. If not anonymous, this is the AAD object Id of the
                                      user. Required.
                                    "cloud": "str",  # Optional. The cloud that
                                      the Microsoft Teams user belongs to. By default 'public' if
                                      missing. Known values are: "public", "dod", and "gcch".
                                    "isAnonymous": bool  # Optional. True if the
                                      Microsoft Teams user is anonymous. By default false if missing.
                                },
                                "phoneNumber": {
                                    "value": "str"  # The phone number in E.164
                                      format. Required.
                                },
                                "rawId": "str"  # Optional. Raw Id of the identifier.
                                  Optional in requests, required in responses.
                            },
                            "displayName": "str",  # Optional. Display name for the chat
                              participant.
                            "shareHistoryTime": "2020-02-20 00:00:00"  # Optional. Time
                              from which the chat history is shared with the participant. The timestamp
                              is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                        }
                    ]
                }

                # response body for status code(s): 201
                response == {
                    "invalidParticipants": [
                        {
                            "code": "str",  # The error code. Required.
                            "message": "str",  # The error message. Required.
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"  # Optional. The error target.
                        }
                    ]
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(add_chat_participants_request, (IO, bytes)):
            _content = add_chat_participants_request
        else:
            _json = add_chat_participants_request

        request = build_chat_thread_add_chat_participants_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def update_chat_thread_properties(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        update_chat_thread_request: JSON,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> None:
        """Updates a thread's properties.

        Updates a thread's properties.

        :param chat_thread_id: The id of the thread to update. Required.
        :type chat_thread_id: str
        :param update_chat_thread_request: Request payload for updating a chat thread. Required.
        :type update_chat_thread_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                update_chat_thread_request = {
                    "topic": "str"  # Optional. Chat thread topic.
                }
        """

    @overload
    def update_chat_thread_properties(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        update_chat_thread_request: IO,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> None:
        """Updates a thread's properties.

        Updates a thread's properties.

        :param chat_thread_id: The id of the thread to update. Required.
        :type chat_thread_id: str
        :param update_chat_thread_request: Request payload for updating a chat thread. Required.
        :type update_chat_thread_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_chat_thread_properties(  # pylint: disable=inconsistent-return-statements
        self, chat_thread_id: str, update_chat_thread_request: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Updates a thread's properties.

        Updates a thread's properties.

        :param chat_thread_id: The id of the thread to update. Required.
        :type chat_thread_id: str
        :param update_chat_thread_request: Request payload for updating a chat thread. Is either a JSON
         type or a IO type. Required.
        :type update_chat_thread_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                update_chat_thread_request = {
                    "topic": "str"  # Optional. Chat thread topic.
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(update_chat_thread_request, (IO, bytes)):
            _content = update_chat_thread_request
        else:
            _json = update_chat_thread_request

        request = build_chat_thread_update_chat_thread_properties_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_chat_thread_properties(self, chat_thread_id: str, **kwargs: Any) -> JSON:
        """Gets a chat thread's properties.

        Gets a chat thread's properties.

        :param chat_thread_id: Id of the thread. Required.
        :type chat_thread_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdByCommunicationIdentifier": {
                        "communicationUser": {
                            "id": "str"  # The Id of the communication user. Required.
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",  # The Id of the Microsoft Teams user. If
                              not anonymous, this is the AAD object Id of the user. Required.
                            "cloud": "str",  # Optional. The cloud that the Microsoft
                              Teams user belongs to. By default 'public' if missing. Known values are:
                              "public", "dod", and "gcch".
                            "isAnonymous": bool  # Optional. True if the Microsoft Teams
                              user is anonymous. By default false if missing.
                        },
                        "phoneNumber": {
                            "value": "str"  # The phone number in E.164 format. Required.
                        },
                        "rawId": "str"  # Optional. Raw Id of the identifier. Optional in
                          requests, required in responses.
                    },
                    "createdOn": "2020-02-20 00:00:00",  # The timestamp when the chat thread was
                      created. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``. Required.
                    "id": "str",  # Chat thread id. Required.
                    "topic": "str",  # Chat thread topic. Required.
                    "deletedOn": "2020-02-20 00:00:00"  # Optional. The timestamp when the chat
                      thread was deleted. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_chat_thread_get_chat_thread_properties_request(
            chat_thread_id=chat_thread_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def send_typing_notification(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        send_typing_notification_request: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Posts a typing event to a thread, on behalf of a user.

        Posts a typing event to a thread, on behalf of a user.

        :param chat_thread_id: Id of the thread. Required.
        :type chat_thread_id: str
        :param send_typing_notification_request: Details of the typing notification request. Default
         value is None.
        :type send_typing_notification_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_typing_notification_request = {
                    "senderDisplayName": "str"  # Optional. The display name of the typing
                      notification sender. This property is used to populate sender name for push
                      notifications.
                }
        """

    @overload
    def send_typing_notification(  # pylint: disable=inconsistent-return-statements
        self,
        chat_thread_id: str,
        send_typing_notification_request: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Posts a typing event to a thread, on behalf of a user.

        Posts a typing event to a thread, on behalf of a user.

        :param chat_thread_id: Id of the thread. Required.
        :type chat_thread_id: str
        :param send_typing_notification_request: Details of the typing notification request. Default
         value is None.
        :type send_typing_notification_request: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/json', 'application/merge-patch+json'. Default value is
         "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def send_typing_notification(  # pylint: disable=inconsistent-return-statements
        self, chat_thread_id: str, send_typing_notification_request: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> None:
        """Posts a typing event to a thread, on behalf of a user.

        Posts a typing event to a thread, on behalf of a user.

        :param chat_thread_id: Id of the thread. Required.
        :type chat_thread_id: str
        :param send_typing_notification_request: Details of the typing notification request. Is either
         a JSON type or a IO type. Default value is None.
        :type send_typing_notification_request: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json',
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_typing_notification_request = {
                    "senderDisplayName": "str"  # Optional. The display name of the typing
                      notification sender. This property is used to populate sender name for push
                      notifications.
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(send_typing_notification_request, (IO, bytes)):
            _content = send_typing_notification_request
        else:
            if send_typing_notification_request is not None:
                _json = send_typing_notification_request
            else:
                _json = None

        request = build_chat_thread_send_typing_notification_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})


class ChatOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.communication.chat.AzureCommunicationChatService`'s
        :attr:`chat` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def create_chat_thread(
        self,
        create_chat_thread_request: JSON,
        *,
        repeatability_request_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates a chat thread.

        Creates a chat thread.

        :param create_chat_thread_request: Request payload for creating a chat thread. Required.
        :type create_chat_thread_request: JSON
        :keyword repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated, globally unique for all time, identifier for the request. It
         is recommended to use version 4 (random) UUIDs. Default value is None.
        :paramtype repeatability_request_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                create_chat_thread_request = {
                    "topic": "str",  # The chat thread topic. Required.
                    "participants": [
                        {
                            "communicationIdentifier": {
                                "communicationUser": {
                                    "id": "str"  # The Id of the communication
                                      user. Required.
                                },
                                "microsoftTeamsUser": {
                                    "userId": "str",  # The Id of the Microsoft
                                      Teams user. If not anonymous, this is the AAD object Id of the
                                      user. Required.
                                    "cloud": "str",  # Optional. The cloud that
                                      the Microsoft Teams user belongs to. By default 'public' if
                                      missing. Known values are: "public", "dod", and "gcch".
                                    "isAnonymous": bool  # Optional. True if the
                                      Microsoft Teams user is anonymous. By default false if missing.
                                },
                                "phoneNumber": {
                                    "value": "str"  # The phone number in E.164
                                      format. Required.
                                },
                                "rawId": "str"  # Optional. Raw Id of the identifier.
                                  Optional in requests, required in responses.
                            },
                            "displayName": "str",  # Optional. Display name for the chat
                              participant.
                            "shareHistoryTime": "2020-02-20 00:00:00"  # Optional. Time
                              from which the chat history is shared with the participant. The timestamp
                              is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                        }
                    ]
                }

                # response body for status code(s): 201
                response == {
                    "chatThread": {
                        "createdByCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"  # The Id of the communication user.
                                  Required.
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",  # The Id of the Microsoft Teams
                                  user. If not anonymous, this is the AAD object Id of the user.
                                  Required.
                                "cloud": "str",  # Optional. The cloud that the
                                  Microsoft Teams user belongs to. By default 'public' if missing.
                                  Known values are: "public", "dod", and "gcch".
                                "isAnonymous": bool  # Optional. True if the
                                  Microsoft Teams user is anonymous. By default false if missing.
                            },
                            "phoneNumber": {
                                "value": "str"  # The phone number in E.164 format.
                                  Required.
                            },
                            "rawId": "str"  # Optional. Raw Id of the identifier.
                              Optional in requests, required in responses.
                        },
                        "createdOn": "2020-02-20 00:00:00",  # The timestamp when the chat
                          thread was created. The timestamp is in RFC3339 format:
                          ``yyyy-MM-ddTHH:mm:ssZ``. Required.
                        "id": "str",  # Chat thread id. Required.
                        "topic": "str",  # Chat thread topic. Required.
                        "deletedOn": "2020-02-20 00:00:00"  # Optional. The timestamp when
                          the chat thread was deleted. The timestamp is in RFC3339 format:
                          ``yyyy-MM-ddTHH:mm:ssZ``.
                    },
                    "invalidParticipants": [
                        {
                            "code": "str",  # The error code. Required.
                            "message": "str",  # The error message. Required.
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"  # Optional. The error target.
                        }
                    ]
                }
        """

    @overload
    def create_chat_thread(
        self,
        create_chat_thread_request: IO,
        *,
        repeatability_request_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Creates a chat thread.

        Creates a chat thread.

        :param create_chat_thread_request: Request payload for creating a chat thread. Required.
        :type create_chat_thread_request: IO
        :keyword repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated, globally unique for all time, identifier for the request. It
         is recommended to use version 4 (random) UUIDs. Default value is None.
        :paramtype repeatability_request_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "chatThread": {
                        "createdByCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"  # The Id of the communication user.
                                  Required.
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",  # The Id of the Microsoft Teams
                                  user. If not anonymous, this is the AAD object Id of the user.
                                  Required.
                                "cloud": "str",  # Optional. The cloud that the
                                  Microsoft Teams user belongs to. By default 'public' if missing.
                                  Known values are: "public", "dod", and "gcch".
                                "isAnonymous": bool  # Optional. True if the
                                  Microsoft Teams user is anonymous. By default false if missing.
                            },
                            "phoneNumber": {
                                "value": "str"  # The phone number in E.164 format.
                                  Required.
                            },
                            "rawId": "str"  # Optional. Raw Id of the identifier.
                              Optional in requests, required in responses.
                        },
                        "createdOn": "2020-02-20 00:00:00",  # The timestamp when the chat
                          thread was created. The timestamp is in RFC3339 format:
                          ``yyyy-MM-ddTHH:mm:ssZ``. Required.
                        "id": "str",  # Chat thread id. Required.
                        "topic": "str",  # Chat thread topic. Required.
                        "deletedOn": "2020-02-20 00:00:00"  # Optional. The timestamp when
                          the chat thread was deleted. The timestamp is in RFC3339 format:
                          ``yyyy-MM-ddTHH:mm:ssZ``.
                    },
                    "invalidParticipants": [
                        {
                            "code": "str",  # The error code. Required.
                            "message": "str",  # The error message. Required.
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"  # Optional. The error target.
                        }
                    ]
                }
        """

    @distributed_trace
    def create_chat_thread(
        self,
        create_chat_thread_request: Union[JSON, IO],
        *,
        repeatability_request_id: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Creates a chat thread.

        Creates a chat thread.

        :param create_chat_thread_request: Request payload for creating a chat thread. Is either a JSON
         type or a IO type. Required.
        :type create_chat_thread_request: JSON or IO
        :keyword repeatability_request_id: If specified, the client directs that the request is
         repeatable; that is, that the client can make the request multiple times with the same
         Repeatability-Request-Id and get back an appropriate response without the server executing the
         request multiple times. The value of the Repeatability-Request-Id is an opaque string
         representing a client-generated, globally unique for all time, identifier for the request. It
         is recommended to use version 4 (random) UUIDs. Default value is None.
        :paramtype repeatability_request_id: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                create_chat_thread_request = {
                    "topic": "str",  # The chat thread topic. Required.
                    "participants": [
                        {
                            "communicationIdentifier": {
                                "communicationUser": {
                                    "id": "str"  # The Id of the communication
                                      user. Required.
                                },
                                "microsoftTeamsUser": {
                                    "userId": "str",  # The Id of the Microsoft
                                      Teams user. If not anonymous, this is the AAD object Id of the
                                      user. Required.
                                    "cloud": "str",  # Optional. The cloud that
                                      the Microsoft Teams user belongs to. By default 'public' if
                                      missing. Known values are: "public", "dod", and "gcch".
                                    "isAnonymous": bool  # Optional. True if the
                                      Microsoft Teams user is anonymous. By default false if missing.
                                },
                                "phoneNumber": {
                                    "value": "str"  # The phone number in E.164
                                      format. Required.
                                },
                                "rawId": "str"  # Optional. Raw Id of the identifier.
                                  Optional in requests, required in responses.
                            },
                            "displayName": "str",  # Optional. Display name for the chat
                              participant.
                            "shareHistoryTime": "2020-02-20 00:00:00"  # Optional. Time
                              from which the chat history is shared with the participant. The timestamp
                              is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                        }
                    ]
                }

                # response body for status code(s): 201
                response == {
                    "chatThread": {
                        "createdByCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"  # The Id of the communication user.
                                  Required.
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",  # The Id of the Microsoft Teams
                                  user. If not anonymous, this is the AAD object Id of the user.
                                  Required.
                                "cloud": "str",  # Optional. The cloud that the
                                  Microsoft Teams user belongs to. By default 'public' if missing.
                                  Known values are: "public", "dod", and "gcch".
                                "isAnonymous": bool  # Optional. True if the
                                  Microsoft Teams user is anonymous. By default false if missing.
                            },
                            "phoneNumber": {
                                "value": "str"  # The phone number in E.164 format.
                                  Required.
                            },
                            "rawId": "str"  # Optional. Raw Id of the identifier.
                              Optional in requests, required in responses.
                        },
                        "createdOn": "2020-02-20 00:00:00",  # The timestamp when the chat
                          thread was created. The timestamp is in RFC3339 format:
                          ``yyyy-MM-ddTHH:mm:ssZ``. Required.
                        "id": "str",  # Chat thread id. Required.
                        "topic": "str",  # Chat thread topic. Required.
                        "deletedOn": "2020-02-20 00:00:00"  # Optional. The timestamp when
                          the chat thread was deleted. The timestamp is in RFC3339 format:
                          ``yyyy-MM-ddTHH:mm:ssZ``.
                    },
                    "invalidParticipants": [
                        {
                            "code": "str",  # The error code. Required.
                            "message": "str",  # The error message. Required.
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"  # Optional. The error target.
                        }
                    ]
                }
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(create_chat_thread_request, (IO, bytes)):
            _content = create_chat_thread_request
        else:
            _json = create_chat_thread_request

        request = build_chat_create_chat_thread_request(
            repeatability_request_id=repeatability_request_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_chat_threads(self, *, start_time: Optional[datetime.datetime] = None, **kwargs: Any) -> Iterable[JSON]:
        """Gets the list of chat threads of a user.

        Gets the list of chat threads of a user.

        :keyword start_time: The earliest point in time to get chat threads up to. The timestamp should
         be in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``. Default value is None.
        :paramtype start_time: ~datetime.datetime
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Chat thread id. Required.
                    "topic": "str",  # Chat thread topic. Required.
                    "deletedOn": "2020-02-20 00:00:00",  # Optional. The timestamp when the chat
                      thread was deleted. The timestamp is in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
                    "lastMessageReceivedOn": "2020-02-20 00:00:00"  # Optional. The timestamp
                      when the last message arrived at the server. The timestamp is in RFC3339 format:
                      ``yyyy-MM-ddTHH:mm:ssZ``.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_chat_list_chat_threads_request(
                    start_time=start_time,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def delete_chat_thread(  # pylint: disable=inconsistent-return-statements
        self, chat_thread_id: str, **kwargs: Any
    ) -> None:
        """Deletes a thread.

        Deletes a thread.

        :param chat_thread_id: Id of the thread to be deleted. Required.
        :type chat_thread_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
            401: lambda response: ClientAuthenticationError(response=response),
            403: HttpResponseError,
            429: HttpResponseError,
            503: HttpResponseError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_chat_delete_chat_thread_request(
            chat_thread_id=chat_thread_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
