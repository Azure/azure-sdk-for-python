# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models as _models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class ChatThreadOperations(object):
    """ChatThreadOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.communication.chat.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_chat_read_receipts(
        self,
        chat_thread_id,  # type: str
        maxpagesize=None,  # type: Optional[int]
        skip=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["_models.ChatMessageReadReceiptsCollection"]
        """Gets chat message read receipts for a thread.

        Gets chat message read receipts for a thread.

        :param chat_thread_id: Thread id to get the chat message read receipts for.
        :type chat_thread_id: str
        :param maxpagesize: The maximum number of chat message read receipts to be returned per page.
        :type maxpagesize: int
        :param skip: Skips chat message read receipts up to a specified position in response.
        :type skip: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ChatMessageReadReceiptsCollection or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.communication.chat.models.ChatMessageReadReceiptsCollection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ChatMessageReadReceiptsCollection"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_chat_read_receipts.metadata['url']  # type: ignore
                path_format_arguments = {
                    'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                    'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if maxpagesize is not None:
                    query_parameters['$maxpagesize'] = self._serialize.query("maxpagesize", maxpagesize, 'int')
                if skip is not None:
                    query_parameters['skip'] = self._serialize.query("skip", skip, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                    'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('ChatMessageReadReceiptsCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_chat_read_receipts.metadata = {'url': '/chat/threads/{chatThreadId}/readReceipts'}  # type: ignore

    def send_chat_read_receipt(
        self,
        chat_thread_id,  # type: str
        send_read_receipt_request,  # type: "_models.SendReadReceiptRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Sends a read receipt event to a thread, on behalf of a user.

        Sends a read receipt event to a thread, on behalf of a user.

        :param chat_thread_id: Thread id to send the read receipt event to.
        :type chat_thread_id: str
        :param send_read_receipt_request: Read receipt details.
        :type send_read_receipt_request: ~azure.communication.chat.models.SendReadReceiptRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.send_chat_read_receipt.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(send_read_receipt_request, 'SendReadReceiptRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    send_chat_read_receipt.metadata = {'url': '/chat/threads/{chatThreadId}/readReceipts'}  # type: ignore

    def send_chat_message(
        self,
        chat_thread_id,  # type: str
        send_chat_message_request,  # type: "_models.SendChatMessageRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.SendChatMessageResult"
        """Sends a message to a thread.

        Sends a message to a thread.

        :param chat_thread_id: The thread id to send the message to.
        :type chat_thread_id: str
        :param send_chat_message_request: Details of the message to send.
        :type send_chat_message_request: ~azure.communication.chat.models.SendChatMessageRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SendChatMessageResult, or the result of cls(response)
        :rtype: ~azure.communication.chat.models.SendChatMessageResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SendChatMessageResult"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.send_chat_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(send_chat_message_request, 'SendChatMessageRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('SendChatMessageResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    send_chat_message.metadata = {'url': '/chat/threads/{chatThreadId}/messages'}  # type: ignore

    def list_chat_messages(
        self,
        chat_thread_id,  # type: str
        maxpagesize=None,  # type: Optional[int]
        start_time=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["_models.ChatMessagesCollection"]
        """Gets a list of messages from a thread.

        Gets a list of messages from a thread.

        :param chat_thread_id: The thread id of the message.
        :type chat_thread_id: str
        :param maxpagesize: The maximum number of messages to be returned per page.
        :type maxpagesize: int
        :param start_time: The earliest point in time to get messages up to. The timestamp should be in
         RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``.
        :type start_time: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ChatMessagesCollection or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.communication.chat.models.ChatMessagesCollection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ChatMessagesCollection"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_chat_messages.metadata['url']  # type: ignore
                path_format_arguments = {
                    'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                    'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if maxpagesize is not None:
                    query_parameters['$maxpagesize'] = self._serialize.query("maxpagesize", maxpagesize, 'int')
                if start_time is not None:
                    query_parameters['startTime'] = self._serialize.query("start_time", start_time, 'iso-8601')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                    'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('ChatMessagesCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_chat_messages.metadata = {'url': '/chat/threads/{chatThreadId}/messages'}  # type: ignore

    def get_chat_message(
        self,
        chat_thread_id,  # type: str
        chat_message_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ChatMessage"
        """Gets a message by id.

        Gets a message by id.

        :param chat_thread_id: The thread id to which the message was sent.
        :type chat_thread_id: str
        :param chat_message_id: The message id.
        :type chat_message_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ChatMessage, or the result of cls(response)
        :rtype: ~azure.communication.chat.models.ChatMessage
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ChatMessage"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        accept = "application/json"

        # Construct URL
        url = self.get_chat_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
            'chatMessageId': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ChatMessage', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_chat_message.metadata = {'url': '/chat/threads/{chatThreadId}/messages/{chatMessageId}'}  # type: ignore

    def update_chat_message(
        self,
        chat_thread_id,  # type: str
        chat_message_id,  # type: str
        update_chat_message_request,  # type: "_models.UpdateChatMessageRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Updates a message.

        Updates a message.

        :param chat_thread_id: The thread id to which the message was sent.
        :type chat_thread_id: str
        :param chat_message_id: The message id.
        :type chat_message_id: str
        :param update_chat_message_request: Details of the request to update the message.
        :type update_chat_message_request: ~azure.communication.chat.models.UpdateChatMessageRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        content_type = kwargs.pop("content_type", "application/merge-patch+json")
        accept = "application/json"

        # Construct URL
        url = self.update_chat_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
            'chatMessageId': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(update_chat_message_request, 'UpdateChatMessageRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    update_chat_message.metadata = {'url': '/chat/threads/{chatThreadId}/messages/{chatMessageId}'}  # type: ignore

    def delete_chat_message(
        self,
        chat_thread_id,  # type: str
        chat_message_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a message.

        Deletes a message.

        :param chat_thread_id: The thread id to which the message was sent.
        :type chat_thread_id: str
        :param chat_message_id: The message id.
        :type chat_message_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        accept = "application/json"

        # Construct URL
        url = self.delete_chat_message.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
            'chatMessageId': self._serialize.url("chat_message_id", chat_message_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_chat_message.metadata = {'url': '/chat/threads/{chatThreadId}/messages/{chatMessageId}'}  # type: ignore

    def send_typing_notification(
        self,
        chat_thread_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Posts a typing event to a thread, on behalf of a user.

        Posts a typing event to a thread, on behalf of a user.

        :param chat_thread_id: Id of the thread.
        :type chat_thread_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        accept = "application/json"

        # Construct URL
        url = self.send_typing_notification.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    send_typing_notification.metadata = {'url': '/chat/threads/{chatThreadId}/typing'}  # type: ignore

    def list_chat_participants(
        self,
        chat_thread_id,  # type: str
        maxpagesize=None,  # type: Optional[int]
        skip=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["_models.ChatParticipantsCollection"]
        """Gets the participants of a thread.

        Gets the participants of a thread.

        :param chat_thread_id: Thread id to get participants for.
        :type chat_thread_id: str
        :param maxpagesize: The maximum number of participants to be returned per page.
        :type maxpagesize: int
        :param skip: Skips participants up to a specified position in response.
        :type skip: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ChatParticipantsCollection or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.communication.chat.models.ChatParticipantsCollection]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ChatParticipantsCollection"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_chat_participants.metadata['url']  # type: ignore
                path_format_arguments = {
                    'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                    'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if maxpagesize is not None:
                    query_parameters['$maxpagesize'] = self._serialize.query("maxpagesize", maxpagesize, 'int')
                if skip is not None:
                    query_parameters['skip'] = self._serialize.query("skip", skip, 'int')
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                    'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('ChatParticipantsCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_chat_participants.metadata = {'url': '/chat/threads/{chatThreadId}/participants'}  # type: ignore

    def add_chat_participants(
        self,
        chat_thread_id,  # type: str
        add_chat_participants_request,  # type: "_models.AddChatParticipantsRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.AddChatParticipantsResult"
        """Adds thread participants to a thread. If participants already exist, no change occurs.

        Adds thread participants to a thread. If participants already exist, no change occurs.

        :param chat_thread_id: Id of the thread to add participants to.
        :type chat_thread_id: str
        :param add_chat_participants_request: Thread participants to be added to the thread.
        :type add_chat_participants_request: ~azure.communication.chat.models.AddChatParticipantsRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AddChatParticipantsResult, or the result of cls(response)
        :rtype: ~azure.communication.chat.models.AddChatParticipantsResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AddChatParticipantsResult"]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.add_chat_participants.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(add_chat_participants_request, 'AddChatParticipantsRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AddChatParticipantsResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    add_chat_participants.metadata = {'url': '/chat/threads/{chatThreadId}/participants'}  # type: ignore

    def remove_chat_participant(
        self,
        chat_thread_id,  # type: str
        chat_participant_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Remove a participant from a thread.

        Remove a participant from a thread.

        :param chat_thread_id: Thread id to remove the participant from.
        :type chat_thread_id: str
        :param chat_participant_id: Id of the thread participant to remove from the thread.
        :type chat_participant_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        accept = "application/json"

        # Construct URL
        url = self.remove_chat_participant.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
            'chatParticipantId': self._serialize.url("chat_participant_id", chat_participant_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    remove_chat_participant.metadata = {'url': '/chat/threads/{chatThreadId}/participants/{chatParticipantId}'}  # type: ignore

    def update_chat_thread(
        self,
        chat_thread_id,  # type: str
        update_chat_thread_request,  # type: "_models.UpdateChatThreadRequest"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Updates a thread's properties.

        Updates a thread's properties.

        :param chat_thread_id: The id of the thread to update.
        :type chat_thread_id: str
        :param update_chat_thread_request: Request payload for updating a chat thread.
        :type update_chat_thread_request: ~azure.communication.chat.models.UpdateChatThreadRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            401: lambda response: ClientAuthenticationError(response=response, model=self._deserialize(_models.Error, response)),
            403: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            429: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
            503: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.Error, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-01-preview3"
        content_type = kwargs.pop("content_type", "application/merge-patch+json")
        accept = "application/json"

        # Construct URL
        url = self.update_chat_thread.metadata['url']  # type: ignore
        path_format_arguments = {
            'endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'chatThreadId': self._serialize.url("chat_thread_id", chat_thread_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(update_chat_thread_request, 'UpdateChatThreadRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    update_chat_thread.metadata = {'url': '/chat/threads/{chatThreadId}'}  # type: ignore
