# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
import datetime
from io import IOBase
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core import AsyncPipelineClient
from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ..._utils.serialization import Deserializer, Serializer
from ...operations._operations import (
    build_chat_create_chat_thread_request,
    build_chat_delete_chat_thread_request,
    build_chat_list_chat_threads_request,
    build_chat_thread_add_chat_participants_request,
    build_chat_thread_delete_chat_message_request,
    build_chat_thread_get_chat_message_request,
    build_chat_thread_get_chat_thread_properties_request,
    build_chat_thread_list_chat_messages_request,
    build_chat_thread_list_chat_participants_request,
    build_chat_thread_list_chat_read_receipts_request,
    build_chat_thread_remove_chat_participant_request,
    build_chat_thread_send_chat_message_request,
    build_chat_thread_send_chat_read_receipt_request,
    build_chat_thread_send_typing_notification_request,
    build_chat_thread_update_chat_message_request,
    build_chat_thread_update_chat_thread_properties_request,
)
from .._configuration import AzureCommunicationChatServiceConfiguration

JSON = MutableMapping[str, Any]
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ChatThreadOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.communication.chat.aio.AzureCommunicationChatService`'s
        :attr:`chat_thread` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: AsyncPipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: AzureCommunicationChatServiceConfiguration = (
            input_args.pop(0) if input_args else kwargs.pop("config")
        )
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_chat_read_receipts(
        self, chat_thread_id: str, *, max_page_size: Optional[int] = None, skip: Optional[int] = None, **kwargs: Any
    ) -> AsyncItemPaged[JSON]:
        """Gets chat message read receipts for a thread.

        Gets chat message read receipts for a thread.

        :param chat_thread_id: Thread id to get the chat message read receipts for. Required.
        :type chat_thread_id: str
        :keyword max_page_size: The maximum number of chat message read receipts to be returned per
         page. Default value is None.
        :paramtype max_page_size: int
        :keyword skip: Skips chat message read receipts up to a specified position in response. Default
         value is None.
        :paramtype skip: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "chatMessageId": "str",
                    "readOn": "2020-02-20 00:00:00",
                    "senderCommunicationIdentifier": {
                        "communicationUser": {
                            "id": "str"
                        },
                        "kind": "str",
                        "microsoftTeamsApp": {
                            "appId": "str",
                            "cloud": "str"
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",
                            "cloud": "str",
                            "isAnonymous": bool
                        },
                        "phoneNumber": {
                            "value": "str"
                        },
                        "rawId": "str"
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_chat_thread_list_chat_read_receipts_request(
                    chat_thread_id=chat_thread_id,
                    max_page_size=max_page_size,
                    skip=skip,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized.get("value", [])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @overload
    async def send_chat_read_receipt(
        self,
        chat_thread_id: str,
        send_read_receipt_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Sends a read receipt event to a thread, on behalf of a user.

        Sends a read receipt event to a thread, on behalf of a user.

        :param chat_thread_id: Thread id to send the read receipt event to. Required.
        :type chat_thread_id: str
        :param send_read_receipt_request: Read receipt details. Required.
        :type send_read_receipt_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_read_receipt_request = {
                    "chatMessageId": "str"
                }
        """

    @overload
    async def send_chat_read_receipt(
        self,
        chat_thread_id: str,
        send_read_receipt_request: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Sends a read receipt event to a thread, on behalf of a user.

        Sends a read receipt event to a thread, on behalf of a user.

        :param chat_thread_id: Thread id to send the read receipt event to. Required.
        :type chat_thread_id: str
        :param send_read_receipt_request: Read receipt details. Required.
        :type send_read_receipt_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def send_chat_read_receipt(
        self, chat_thread_id: str, send_read_receipt_request: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> None:
        """Sends a read receipt event to a thread, on behalf of a user.

        Sends a read receipt event to a thread, on behalf of a user.

        :param chat_thread_id: Thread id to send the read receipt event to. Required.
        :type chat_thread_id: str
        :param send_read_receipt_request: Read receipt details. Is either a JSON type or a IO[bytes]
         type. Required.
        :type send_read_receipt_request: JSON or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_read_receipt_request = {
                    "chatMessageId": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(send_read_receipt_request, (IOBase, bytes)):
            _content = send_read_receipt_request
        else:
            _json = send_read_receipt_request

        _request = build_chat_thread_send_chat_read_receipt_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    async def send_chat_message(
        self,
        chat_thread_id: str,
        send_chat_message_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Sends a message to a thread.

        Sends a message to a thread.

        :param chat_thread_id: The thread id to send the message to. Required.
        :type chat_thread_id: str
        :param send_chat_message_request: Details of the message to send. Required.
        :type send_chat_message_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_chat_message_request = {
                    "content": "str",
                    "metadata": {
                        "str": "str"
                    },
                    "senderDisplayName": "str",
                    "type": "str"
                }

                # response body for status code(s): 201
                response == {
                    "id": "str"
                }
        """

    @overload
    async def send_chat_message(
        self,
        chat_thread_id: str,
        send_chat_message_request: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Sends a message to a thread.

        Sends a message to a thread.

        :param chat_thread_id: The thread id to send the message to. Required.
        :type chat_thread_id: str
        :param send_chat_message_request: Details of the message to send. Required.
        :type send_chat_message_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "id": "str"
                }
        """

    @distributed_trace_async
    async def send_chat_message(
        self, chat_thread_id: str, send_chat_message_request: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> JSON:
        """Sends a message to a thread.

        Sends a message to a thread.

        :param chat_thread_id: The thread id to send the message to. Required.
        :type chat_thread_id: str
        :param send_chat_message_request: Details of the message to send. Is either a JSON type or a
         IO[bytes] type. Required.
        :type send_chat_message_request: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_chat_message_request = {
                    "content": "str",
                    "metadata": {
                        "str": "str"
                    },
                    "senderDisplayName": "str",
                    "type": "str"
                }

                # response body for status code(s): 201
                response == {
                    "id": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(send_chat_message_request, (IOBase, bytes)):
            _content = send_chat_message_request
        else:
            _json = send_chat_message_request

        _request = build_chat_thread_send_chat_message_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def list_chat_messages(
        self,
        chat_thread_id: str,
        *,
        max_page_size: Optional[int] = None,
        start_time: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> AsyncItemPaged[JSON]:
        """Gets a list of messages from a thread.

        Gets a list of messages from a thread.

        :param chat_thread_id: The thread id of the message. Required.
        :type chat_thread_id: str
        :keyword max_page_size: The maximum number of messages to be returned per page. Default value
         is None.
        :paramtype max_page_size: int
        :keyword start_time: The earliest point in time to get messages after. The timestamp should be
         in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``. Default value is None.
        :paramtype start_time: ~datetime.datetime
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdOn": "2020-02-20 00:00:00",
                    "id": "str",
                    "sequenceId": "str",
                    "type": "str",
                    "version": "str",
                    "content": {
                        "attachments": [
                            {
                                "attachmentType": "str",
                                "id": "str",
                                "name": "str",
                                "previewUrl": "str",
                                "url": "str"
                            }
                        ],
                        "initiatorCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"
                            },
                            "kind": "str",
                            "microsoftTeamsApp": {
                                "appId": "str",
                                "cloud": "str"
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",
                                "cloud": "str",
                                "isAnonymous": bool
                            },
                            "phoneNumber": {
                                "value": "str"
                            },
                            "rawId": "str"
                        },
                        "message": "str",
                        "participants": [
                            {
                                "communicationIdentifier": {
                                    "communicationUser": {
                                        "id": "str"
                                    },
                                    "kind": "str",
                                    "microsoftTeamsApp": {
                                        "appId": "str",
                                        "cloud": "str"
                                    },
                                    "microsoftTeamsUser": {
                                        "userId": "str",
                                        "cloud": "str",
                                        "isAnonymous": bool
                                    },
                                    "phoneNumber": {
                                        "value": "str"
                                    },
                                    "rawId": "str"
                                },
                                "displayName": "str",
                                "metadata": {
                                    "str": "str"
                                },
                                "shareHistoryTime": "2020-02-20 00:00:00"
                            }
                        ],
                        "topic": "str"
                    },
                    "deletedOn": "2020-02-20 00:00:00",
                    "editedOn": "2020-02-20 00:00:00",
                    "metadata": {
                        "str": "str"
                    },
                    "senderCommunicationIdentifier": {
                        "communicationUser": {
                            "id": "str"
                        },
                        "kind": "str",
                        "microsoftTeamsApp": {
                            "appId": "str",
                            "cloud": "str"
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",
                            "cloud": "str",
                            "isAnonymous": bool
                        },
                        "phoneNumber": {
                            "value": "str"
                        },
                        "rawId": "str"
                    },
                    "senderDisplayName": "str"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_chat_thread_list_chat_messages_request(
                    chat_thread_id=chat_thread_id,
                    max_page_size=max_page_size,
                    start_time=start_time,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized.get("value", [])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def get_chat_message(self, chat_thread_id: str, chat_message_id: str, **kwargs: Any) -> JSON:
        """Gets a message by id.

        Gets a message by id.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdOn": "2020-02-20 00:00:00",
                    "id": "str",
                    "sequenceId": "str",
                    "type": "str",
                    "version": "str",
                    "content": {
                        "attachments": [
                            {
                                "attachmentType": "str",
                                "id": "str",
                                "name": "str",
                                "previewUrl": "str",
                                "url": "str"
                            }
                        ],
                        "initiatorCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"
                            },
                            "kind": "str",
                            "microsoftTeamsApp": {
                                "appId": "str",
                                "cloud": "str"
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",
                                "cloud": "str",
                                "isAnonymous": bool
                            },
                            "phoneNumber": {
                                "value": "str"
                            },
                            "rawId": "str"
                        },
                        "message": "str",
                        "participants": [
                            {
                                "communicationIdentifier": {
                                    "communicationUser": {
                                        "id": "str"
                                    },
                                    "kind": "str",
                                    "microsoftTeamsApp": {
                                        "appId": "str",
                                        "cloud": "str"
                                    },
                                    "microsoftTeamsUser": {
                                        "userId": "str",
                                        "cloud": "str",
                                        "isAnonymous": bool
                                    },
                                    "phoneNumber": {
                                        "value": "str"
                                    },
                                    "rawId": "str"
                                },
                                "displayName": "str",
                                "metadata": {
                                    "str": "str"
                                },
                                "shareHistoryTime": "2020-02-20 00:00:00"
                            }
                        ],
                        "topic": "str"
                    },
                    "deletedOn": "2020-02-20 00:00:00",
                    "editedOn": "2020-02-20 00:00:00",
                    "metadata": {
                        "str": "str"
                    },
                    "senderCommunicationIdentifier": {
                        "communicationUser": {
                            "id": "str"
                        },
                        "kind": "str",
                        "microsoftTeamsApp": {
                            "appId": "str",
                            "cloud": "str"
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",
                            "cloud": "str",
                            "isAnonymous": bool
                        },
                        "phoneNumber": {
                            "value": "str"
                        },
                        "rawId": "str"
                    },
                    "senderDisplayName": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_chat_thread_get_chat_message_request(
            chat_thread_id=chat_thread_id,
            chat_message_id=chat_message_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def update_chat_message(
        self,
        chat_thread_id: str,
        chat_message_id: str,
        update_chat_message_request: JSON,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> None:
        """Updates a message.

        Updates a message.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :param update_chat_message_request: Details of the request to update the message. Required.
        :type update_chat_message_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                update_chat_message_request = {
                    "content": "str",
                    "metadata": {
                        "str": "str"
                    }
                }
        """

    @overload
    async def update_chat_message(
        self,
        chat_thread_id: str,
        chat_message_id: str,
        update_chat_message_request: IO[bytes],
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> None:
        """Updates a message.

        Updates a message.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :param update_chat_message_request: Details of the request to update the message. Required.
        :type update_chat_message_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update_chat_message(
        self,
        chat_thread_id: str,
        chat_message_id: str,
        update_chat_message_request: Union[JSON, IO[bytes]],
        **kwargs: Any
    ) -> None:
        """Updates a message.

        Updates a message.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :param update_chat_message_request: Details of the request to update the message. Is either a
         JSON type or a IO[bytes] type. Required.
        :type update_chat_message_request: JSON or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                update_chat_message_request = {
                    "content": "str",
                    "metadata": {
                        "str": "str"
                    }
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(update_chat_message_request, (IOBase, bytes)):
            _content = update_chat_message_request
        else:
            _json = update_chat_message_request

        _request = build_chat_thread_update_chat_message_request(
            chat_thread_id=chat_thread_id,
            chat_message_id=chat_message_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def delete_chat_message(self, chat_thread_id: str, chat_message_id: str, **kwargs: Any) -> None:
        """Deletes a message.

        Deletes a message.

        :param chat_thread_id: The thread id to which the message was sent. Required.
        :type chat_thread_id: str
        :param chat_message_id: The message id. Required.
        :type chat_message_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_chat_thread_delete_chat_message_request(
            chat_thread_id=chat_thread_id,
            chat_message_id=chat_message_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_chat_participants(
        self, chat_thread_id: str, *, max_page_size: Optional[int] = None, skip: Optional[int] = None, **kwargs: Any
    ) -> AsyncItemPaged[JSON]:
        """Gets the participants of a thread.

        Gets the participants of a thread.

        :param chat_thread_id: Thread id to get participants for. Required.
        :type chat_thread_id: str
        :keyword max_page_size: The maximum number of participants to be returned per page. Default
         value is None.
        :paramtype max_page_size: int
        :keyword skip: Skips participants up to a specified position in response. Default value is
         None.
        :paramtype skip: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "communicationIdentifier": {
                        "communicationUser": {
                            "id": "str"
                        },
                        "kind": "str",
                        "microsoftTeamsApp": {
                            "appId": "str",
                            "cloud": "str"
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",
                            "cloud": "str",
                            "isAnonymous": bool
                        },
                        "phoneNumber": {
                            "value": "str"
                        },
                        "rawId": "str"
                    },
                    "displayName": "str",
                    "metadata": {
                        "str": "str"
                    },
                    "shareHistoryTime": "2020-02-20 00:00:00"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_chat_thread_list_chat_participants_request(
                    chat_thread_id=chat_thread_id,
                    max_page_size=max_page_size,
                    skip=skip,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized.get("value", [])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @overload
    async def remove_chat_participant(
        self,
        chat_thread_id: str,
        participant_communication_identifier: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Remove a participant from a thread.

        Remove a participant from a thread.

        :param chat_thread_id: Thread id to remove the participant from. Required.
        :type chat_thread_id: str
        :param participant_communication_identifier: Id of the thread participant to remove from the
         thread. Required.
        :type participant_communication_identifier: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                participant_communication_identifier = {
                    "communicationUser": {
                        "id": "str"
                    },
                    "kind": "str",
                    "microsoftTeamsApp": {
                        "appId": "str",
                        "cloud": "str"
                    },
                    "microsoftTeamsUser": {
                        "userId": "str",
                        "cloud": "str",
                        "isAnonymous": bool
                    },
                    "phoneNumber": {
                        "value": "str"
                    },
                    "rawId": "str"
                }
        """

    @overload
    async def remove_chat_participant(
        self,
        chat_thread_id: str,
        participant_communication_identifier: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Remove a participant from a thread.

        Remove a participant from a thread.

        :param chat_thread_id: Thread id to remove the participant from. Required.
        :type chat_thread_id: str
        :param participant_communication_identifier: Id of the thread participant to remove from the
         thread. Required.
        :type participant_communication_identifier: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/json', 'application/merge-patch+json'. Default value is
         "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def remove_chat_participant(
        self, chat_thread_id: str, participant_communication_identifier: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> None:
        """Remove a participant from a thread.

        Remove a participant from a thread.

        :param chat_thread_id: Thread id to remove the participant from. Required.
        :type chat_thread_id: str
        :param participant_communication_identifier: Id of the thread participant to remove from the
         thread. Is either a JSON type or a IO[bytes] type. Required.
        :type participant_communication_identifier: JSON or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                participant_communication_identifier = {
                    "communicationUser": {
                        "id": "str"
                    },
                    "kind": "str",
                    "microsoftTeamsApp": {
                        "appId": "str",
                        "cloud": "str"
                    },
                    "microsoftTeamsUser": {
                        "userId": "str",
                        "cloud": "str",
                        "isAnonymous": bool
                    },
                    "phoneNumber": {
                        "value": "str"
                    },
                    "rawId": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(participant_communication_identifier, (IOBase, bytes)):
            _content = participant_communication_identifier
        else:
            _json = participant_communication_identifier

        _request = build_chat_thread_remove_chat_participant_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    async def add_chat_participants(
        self,
        chat_thread_id: str,
        add_chat_participants_request: JSON,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Adds thread participants to a thread. If participants already exist, no change occurs.

        Adds thread participants to a thread. If participants already exist, no change occurs.

        :param chat_thread_id: Id of the thread to add participants to. Required.
        :type chat_thread_id: str
        :param add_chat_participants_request: Thread participants to be added to the thread. Required.
        :type add_chat_participants_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                add_chat_participants_request = {
                    "participants": [
                        {
                            "communicationIdentifier": {
                                "communicationUser": {
                                    "id": "str"
                                },
                                "kind": "str",
                                "microsoftTeamsApp": {
                                    "appId": "str",
                                    "cloud": "str"
                                },
                                "microsoftTeamsUser": {
                                    "userId": "str",
                                    "cloud": "str",
                                    "isAnonymous": bool
                                },
                                "phoneNumber": {
                                    "value": "str"
                                },
                                "rawId": "str"
                            },
                            "displayName": "str",
                            "metadata": {
                                "str": "str"
                            },
                            "shareHistoryTime": "2020-02-20 00:00:00"
                        }
                    ]
                }

                # response body for status code(s): 201
                response == {
                    "invalidParticipants": [
                        {
                            "code": "str",
                            "message": "str",
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"
                        }
                    ]
                }
        """

    @overload
    async def add_chat_participants(
        self,
        chat_thread_id: str,
        add_chat_participants_request: IO[bytes],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Adds thread participants to a thread. If participants already exist, no change occurs.

        Adds thread participants to a thread. If participants already exist, no change occurs.

        :param chat_thread_id: Id of the thread to add participants to. Required.
        :type chat_thread_id: str
        :param add_chat_participants_request: Thread participants to be added to the thread. Required.
        :type add_chat_participants_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "invalidParticipants": [
                        {
                            "code": "str",
                            "message": "str",
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def add_chat_participants(
        self, chat_thread_id: str, add_chat_participants_request: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> JSON:
        """Adds thread participants to a thread. If participants already exist, no change occurs.

        Adds thread participants to a thread. If participants already exist, no change occurs.

        :param chat_thread_id: Id of the thread to add participants to. Required.
        :type chat_thread_id: str
        :param add_chat_participants_request: Thread participants to be added to the thread. Is either
         a JSON type or a IO[bytes] type. Required.
        :type add_chat_participants_request: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                add_chat_participants_request = {
                    "participants": [
                        {
                            "communicationIdentifier": {
                                "communicationUser": {
                                    "id": "str"
                                },
                                "kind": "str",
                                "microsoftTeamsApp": {
                                    "appId": "str",
                                    "cloud": "str"
                                },
                                "microsoftTeamsUser": {
                                    "userId": "str",
                                    "cloud": "str",
                                    "isAnonymous": bool
                                },
                                "phoneNumber": {
                                    "value": "str"
                                },
                                "rawId": "str"
                            },
                            "displayName": "str",
                            "metadata": {
                                "str": "str"
                            },
                            "shareHistoryTime": "2020-02-20 00:00:00"
                        }
                    ]
                }

                # response body for status code(s): 201
                response == {
                    "invalidParticipants": [
                        {
                            "code": "str",
                            "message": "str",
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"
                        }
                    ]
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(add_chat_participants_request, (IOBase, bytes)):
            _content = add_chat_participants_request
        else:
            _json = add_chat_participants_request

        _request = build_chat_thread_add_chat_participants_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def update_chat_thread_properties(
        self,
        chat_thread_id: str,
        update_chat_thread_request: JSON,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> None:
        """Updates a thread's properties.

        Updates a thread's properties.

        :param chat_thread_id: The id of the thread to update. Required.
        :type chat_thread_id: str
        :param update_chat_thread_request: Request payload for updating a chat thread. Required.
        :type update_chat_thread_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "kind":

                # JSON input template for discriminator value "none":
                chat_retention_policy = {
                    "kind": "none"
                }

                # JSON input template for discriminator value "threadCreationDate":
                chat_retention_policy = {
                    "deleteThreadAfterDays": 0,
                    "kind": "threadCreationDate"
                }

                # JSON input template you can fill out and use as your body input.
                update_chat_thread_request = {
                    "metadata": {
                        "str": "str"
                    },
                    "retentionPolicy": chat_retention_policy,
                    "topic": "str"
                }
        """

    @overload
    async def update_chat_thread_properties(
        self,
        chat_thread_id: str,
        update_chat_thread_request: IO[bytes],
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> None:
        """Updates a thread's properties.

        Updates a thread's properties.

        :param chat_thread_id: The id of the thread to update. Required.
        :type chat_thread_id: str
        :param update_chat_thread_request: Request payload for updating a chat thread. Required.
        :type update_chat_thread_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def update_chat_thread_properties(
        self, chat_thread_id: str, update_chat_thread_request: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> None:
        """Updates a thread's properties.

        Updates a thread's properties.

        :param chat_thread_id: The id of the thread to update. Required.
        :type chat_thread_id: str
        :param update_chat_thread_request: Request payload for updating a chat thread. Is either a JSON
         type or a IO[bytes] type. Required.
        :type update_chat_thread_request: JSON or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "kind":

                # JSON input template for discriminator value "none":
                chat_retention_policy = {
                    "kind": "none"
                }

                # JSON input template for discriminator value "threadCreationDate":
                chat_retention_policy = {
                    "deleteThreadAfterDays": 0,
                    "kind": "threadCreationDate"
                }

                # JSON input template you can fill out and use as your body input.
                update_chat_thread_request = {
                    "metadata": {
                        "str": "str"
                    },
                    "retentionPolicy": chat_retention_policy,
                    "topic": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(update_chat_thread_request, (IOBase, bytes)):
            _content = update_chat_thread_request
        else:
            _json = update_chat_thread_request

        _request = build_chat_thread_update_chat_thread_properties_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def get_chat_thread_properties(self, chat_thread_id: str, **kwargs: Any) -> JSON:
        """Gets a chat thread's properties.

        Gets a chat thread's properties.

        :param chat_thread_id: Id of the thread. Required.
        :type chat_thread_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "none":
                chat_retention_policy = {
                    "kind": "none"
                }

                # JSON input template for discriminator value "threadCreationDate":
                chat_retention_policy = {
                    "deleteThreadAfterDays": 0,
                    "kind": "threadCreationDate"
                }

                # response body for status code(s): 200
                response == {
                    "createdByCommunicationIdentifier": {
                        "communicationUser": {
                            "id": "str"
                        },
                        "kind": "str",
                        "microsoftTeamsApp": {
                            "appId": "str",
                            "cloud": "str"
                        },
                        "microsoftTeamsUser": {
                            "userId": "str",
                            "cloud": "str",
                            "isAnonymous": bool
                        },
                        "phoneNumber": {
                            "value": "str"
                        },
                        "rawId": "str"
                    },
                    "createdOn": "2020-02-20 00:00:00",
                    "id": "str",
                    "topic": "str",
                    "deletedOn": "2020-02-20 00:00:00",
                    "metadata": {
                        "str": "str"
                    },
                    "retentionPolicy": chat_retention_policy
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_chat_thread_get_chat_thread_properties_request(
            chat_thread_id=chat_thread_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def send_typing_notification(
        self,
        chat_thread_id: str,
        send_typing_notification_request: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Posts a typing event to a thread, on behalf of a user.

        Posts a typing event to a thread, on behalf of a user.

        :param chat_thread_id: Id of the thread. Required.
        :type chat_thread_id: str
        :param send_typing_notification_request: Details of the typing notification request. Default
         value is None.
        :type send_typing_notification_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_typing_notification_request = {
                    "senderDisplayName": "str"
                }
        """

    @overload
    async def send_typing_notification(
        self,
        chat_thread_id: str,
        send_typing_notification_request: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Posts a typing event to a thread, on behalf of a user.

        Posts a typing event to a thread, on behalf of a user.

        :param chat_thread_id: Id of the thread. Required.
        :type chat_thread_id: str
        :param send_typing_notification_request: Details of the typing notification request. Default
         value is None.
        :type send_typing_notification_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def send_typing_notification(
        self,
        chat_thread_id: str,
        send_typing_notification_request: Optional[Union[JSON, IO[bytes]]] = None,
        **kwargs: Any
    ) -> None:
        """Posts a typing event to a thread, on behalf of a user.

        Posts a typing event to a thread, on behalf of a user.

        :param chat_thread_id: Id of the thread. Required.
        :type chat_thread_id: str
        :param send_typing_notification_request: Details of the typing notification request. Is either
         a JSON type or a IO[bytes] type. Default value is None.
        :type send_typing_notification_request: JSON or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                send_typing_notification_request = {
                    "senderDisplayName": "str"
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(send_typing_notification_request, (IOBase, bytes)):
            _content = send_typing_notification_request
        else:
            if send_typing_notification_request is not None:
                _json = send_typing_notification_request
            else:
                _json = None

        _request = build_chat_thread_send_typing_notification_request(
            chat_thread_id=chat_thread_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore


class ChatOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.communication.chat.aio.AzureCommunicationChatService`'s
        :attr:`chat` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: AsyncPipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: AzureCommunicationChatServiceConfiguration = (
            input_args.pop(0) if input_args else kwargs.pop("config")
        )
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def create_chat_thread(
        self, create_chat_thread_request: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Creates a chat thread.

        Creates a chat thread.

        :param create_chat_thread_request: Request payload for creating a chat thread. Required.
        :type create_chat_thread_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "kind":

                # JSON input template for discriminator value "none":
                chat_retention_policy = {
                    "kind": "none"
                }

                # JSON input template for discriminator value "threadCreationDate":
                chat_retention_policy = {
                    "deleteThreadAfterDays": 0,
                    "kind": "threadCreationDate"
                }

                # JSON input template you can fill out and use as your body input.
                create_chat_thread_request = {
                    "topic": "str",
                    "metadata": {
                        "str": "str"
                    },
                    "participants": [
                        {
                            "communicationIdentifier": {
                                "communicationUser": {
                                    "id": "str"
                                },
                                "kind": "str",
                                "microsoftTeamsApp": {
                                    "appId": "str",
                                    "cloud": "str"
                                },
                                "microsoftTeamsUser": {
                                    "userId": "str",
                                    "cloud": "str",
                                    "isAnonymous": bool
                                },
                                "phoneNumber": {
                                    "value": "str"
                                },
                                "rawId": "str"
                            },
                            "displayName": "str",
                            "metadata": {
                                "str": "str"
                            },
                            "shareHistoryTime": "2020-02-20 00:00:00"
                        }
                    ],
                    "retentionPolicy": chat_retention_policy
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "none":
                chat_retention_policy = {
                    "kind": "none"
                }

                # JSON input template for discriminator value "threadCreationDate":
                chat_retention_policy = {
                    "deleteThreadAfterDays": 0,
                    "kind": "threadCreationDate"
                }

                # response body for status code(s): 201
                response == {
                    "chatThread": {
                        "createdByCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"
                            },
                            "kind": "str",
                            "microsoftTeamsApp": {
                                "appId": "str",
                                "cloud": "str"
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",
                                "cloud": "str",
                                "isAnonymous": bool
                            },
                            "phoneNumber": {
                                "value": "str"
                            },
                            "rawId": "str"
                        },
                        "createdOn": "2020-02-20 00:00:00",
                        "id": "str",
                        "topic": "str",
                        "deletedOn": "2020-02-20 00:00:00",
                        "metadata": {
                            "str": "str"
                        },
                        "retentionPolicy": chat_retention_policy
                    },
                    "invalidParticipants": [
                        {
                            "code": "str",
                            "message": "str",
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"
                        }
                    ]
                }
        """

    @overload
    async def create_chat_thread(
        self, create_chat_thread_request: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Creates a chat thread.

        Creates a chat thread.

        :param create_chat_thread_request: Request payload for creating a chat thread. Required.
        :type create_chat_thread_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "none":
                chat_retention_policy = {
                    "kind": "none"
                }

                # JSON input template for discriminator value "threadCreationDate":
                chat_retention_policy = {
                    "deleteThreadAfterDays": 0,
                    "kind": "threadCreationDate"
                }

                # response body for status code(s): 201
                response == {
                    "chatThread": {
                        "createdByCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"
                            },
                            "kind": "str",
                            "microsoftTeamsApp": {
                                "appId": "str",
                                "cloud": "str"
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",
                                "cloud": "str",
                                "isAnonymous": bool
                            },
                            "phoneNumber": {
                                "value": "str"
                            },
                            "rawId": "str"
                        },
                        "createdOn": "2020-02-20 00:00:00",
                        "id": "str",
                        "topic": "str",
                        "deletedOn": "2020-02-20 00:00:00",
                        "metadata": {
                            "str": "str"
                        },
                        "retentionPolicy": chat_retention_policy
                    },
                    "invalidParticipants": [
                        {
                            "code": "str",
                            "message": "str",
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def create_chat_thread(self, create_chat_thread_request: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        """Creates a chat thread.

        Creates a chat thread.

        :param create_chat_thread_request: Request payload for creating a chat thread. Is either a JSON
         type or a IO[bytes] type. Required.
        :type create_chat_thread_request: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # The input is polymorphic. The following are possible polymorphic inputs based off
                  discriminator "kind":

                # JSON input template for discriminator value "none":
                chat_retention_policy = {
                    "kind": "none"
                }

                # JSON input template for discriminator value "threadCreationDate":
                chat_retention_policy = {
                    "deleteThreadAfterDays": 0,
                    "kind": "threadCreationDate"
                }

                # JSON input template you can fill out and use as your body input.
                create_chat_thread_request = {
                    "topic": "str",
                    "metadata": {
                        "str": "str"
                    },
                    "participants": [
                        {
                            "communicationIdentifier": {
                                "communicationUser": {
                                    "id": "str"
                                },
                                "kind": "str",
                                "microsoftTeamsApp": {
                                    "appId": "str",
                                    "cloud": "str"
                                },
                                "microsoftTeamsUser": {
                                    "userId": "str",
                                    "cloud": "str",
                                    "isAnonymous": bool
                                },
                                "phoneNumber": {
                                    "value": "str"
                                },
                                "rawId": "str"
                            },
                            "displayName": "str",
                            "metadata": {
                                "str": "str"
                            },
                            "shareHistoryTime": "2020-02-20 00:00:00"
                        }
                    ],
                    "retentionPolicy": chat_retention_policy
                }

                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "none":
                chat_retention_policy = {
                    "kind": "none"
                }

                # JSON input template for discriminator value "threadCreationDate":
                chat_retention_policy = {
                    "deleteThreadAfterDays": 0,
                    "kind": "threadCreationDate"
                }

                # response body for status code(s): 201
                response == {
                    "chatThread": {
                        "createdByCommunicationIdentifier": {
                            "communicationUser": {
                                "id": "str"
                            },
                            "kind": "str",
                            "microsoftTeamsApp": {
                                "appId": "str",
                                "cloud": "str"
                            },
                            "microsoftTeamsUser": {
                                "userId": "str",
                                "cloud": "str",
                                "isAnonymous": bool
                            },
                            "phoneNumber": {
                                "value": "str"
                            },
                            "rawId": "str"
                        },
                        "createdOn": "2020-02-20 00:00:00",
                        "id": "str",
                        "topic": "str",
                        "deletedOn": "2020-02-20 00:00:00",
                        "metadata": {
                            "str": "str"
                        },
                        "retentionPolicy": chat_retention_policy
                    },
                    "invalidParticipants": [
                        {
                            "code": "str",
                            "message": "str",
                            "details": [
                                ...
                            ],
                            "innererror": ...,
                            "target": "str"
                        }
                    ]
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(create_chat_thread_request, (IOBase, bytes)):
            _content = create_chat_thread_request
        else:
            _json = create_chat_thread_request

        _request = build_chat_create_chat_thread_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def list_chat_threads(
        self, *, max_page_size: Optional[int] = None, start_time: Optional[datetime.datetime] = None, **kwargs: Any
    ) -> AsyncItemPaged[JSON]:
        """Gets the list of chat threads of a user.

        Gets the list of chat threads of a user.

        :keyword max_page_size: The maximum number of chat threads returned per page. Default value is
         None.
        :paramtype max_page_size: int
        :keyword start_time: The earliest point in time to get chat threads up to. The timestamp should
         be in RFC3339 format: ``yyyy-MM-ddTHH:mm:ssZ``. Default value is None.
        :paramtype start_time: ~datetime.datetime
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",
                    "topic": "str",
                    "deletedOn": "2020-02-20 00:00:00",
                    "lastMessageReceivedOn": "2020-02-20 00:00:00"
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_chat_list_chat_threads_request(
                    max_page_size=max_page_size,
                    start_time=start_time,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized.get("value", [])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def delete_chat_thread(self, chat_thread_id: str, **kwargs: Any) -> None:
        """Deletes a thread.

        Deletes a thread.

        :param chat_thread_id: Id of the thread to be deleted. Required.
        :type chat_thread_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_chat_delete_chat_thread_request(
            chat_thread_id=chat_thread_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore
