# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AssignmentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type that the phone number can be assigned to.
    """

    PERSON = "person"
    APPLICATION = "application"

class CapabilityValue(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The possible values for a phone number capability.
    """

    INBOUND = "inbound"
    OUTBOUND = "outbound"
    INBOUND_OUTBOUND = "inbound+outbound"
    NONE = "none"

class OperationKind(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Kind of the operation.
    """

    SEARCH = "search"
    PURCHASE = "purchase"
    RELEASE_PHONE_NUMBER = "releasePhoneNumber"
    UPDATE_PHONE_NUMBER = "updatePhoneNumber"

class OperationStatusCodes(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Status code of the operation.
    """

    NOT_STARTED = "notStarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class PhoneNumberType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of a phone number.
    """

    TOLL_FREE = "tollFree"
    GEOGRAPHIC = "geographic"
