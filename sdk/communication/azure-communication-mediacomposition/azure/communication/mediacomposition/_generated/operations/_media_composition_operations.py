# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar, Union
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_get_request(
    media_composition_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/mediaCompositions/{mediaCompositionId}')
    path_format_arguments = {
        "mediaCompositionId": _SERIALIZER.url("media_composition_id", media_composition_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_create_request(
    media_composition_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/mediaCompositions/{mediaCompositionId}')
    path_format_arguments = {
        "mediaCompositionId": _SERIALIZER.url("media_composition_id", media_composition_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_update_request(
    media_composition_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/mediaCompositions/{mediaCompositionId}')
    path_format_arguments = {
        "mediaCompositionId": _SERIALIZER.url("media_composition_id", media_composition_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_request(
    media_composition_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    url = kwargs.pop("template_url", '/mediaCompositions/{mediaCompositionId}')
    path_format_arguments = {
        "mediaCompositionId": _SERIALIZER.url("media_composition_id", media_composition_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    return HttpRequest(
        method="DELETE",
        url=url,
        **kwargs
    )


def build_start_request(
    media_composition_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "text/plain, application/json, text/json"
    # Construct URL
    url = kwargs.pop("template_url", '/mediaCompositions/{mediaCompositionId}/start')
    path_format_arguments = {
        "mediaCompositionId": _SERIALIZER.url("media_composition_id", media_composition_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_stop_request(
    media_composition_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "text/plain, application/json, text/json"
    # Construct URL
    url = kwargs.pop("template_url", '/mediaCompositions/{mediaCompositionId}/stop')
    path_format_arguments = {
        "mediaCompositionId": _SERIALIZER.url("media_composition_id", media_composition_id, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class MediaCompositionOperations(object):
    """MediaCompositionOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.communication.mediacomposition.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get(
        self,
        media_composition_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["_models.MediaCompositionBody"]
        """get.

        :param media_composition_id:
        :type media_composition_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MediaCompositionBody, or the result of cls(response)
        :rtype: ~azure.communication.mediacomposition.models.MediaCompositionBody or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.MediaCompositionBody"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_request(
            media_composition_id=media_composition_id,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('MediaCompositionBody', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/mediaCompositions/{mediaCompositionId}'}  # type: ignore


    @distributed_trace
    def create(
        self,
        media_composition_id,  # type: str
        body=None,  # type: Optional["_models.MediaCompositionBody"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["_models.MediaCompositionBody"]
        """create.

        :param media_composition_id:
        :type media_composition_id: str
        :param body:
        :type body: ~azure.communication.mediacomposition.models.MediaCompositionBody
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MediaCompositionBody, or the result of cls(response)
        :rtype: ~azure.communication.mediacomposition.models.MediaCompositionBody or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.MediaCompositionBody"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            json = self._serialize.body(body, 'MediaCompositionBody')
        else:
            json = None

        request = build_create_request(
            media_composition_id=media_composition_id,
            content_type=content_type,
            json=json,
            template_url=self.create.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('MediaCompositionBody', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create.metadata = {'url': '/mediaCompositions/{mediaCompositionId}'}  # type: ignore


    @distributed_trace
    def update(
        self,
        media_composition_id,  # type: str
        body=None,  # type: Optional["_models.MediaCompositionBody"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["_models.MediaCompositionBody"]
        """update.

        :param media_composition_id:
        :type media_composition_id: str
        :param body:
        :type body: ~azure.communication.mediacomposition.models.MediaCompositionBody
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MediaCompositionBody, or the result of cls(response)
        :rtype: ~azure.communication.mediacomposition.models.MediaCompositionBody or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.MediaCompositionBody"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            json = self._serialize.body(body, 'MediaCompositionBody')
        else:
            json = None

        request = build_update_request(
            media_composition_id=media_composition_id,
            content_type=content_type,
            json=json,
            template_url=self.update.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('MediaCompositionBody', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update.metadata = {'url': '/mediaCompositions/{mediaCompositionId}'}  # type: ignore


    @distributed_trace
    def delete(
        self,
        media_composition_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """delete.

        :param media_composition_id:
        :type media_composition_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_request(
            media_composition_id=media_composition_id,
            template_url=self.delete.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/mediaCompositions/{mediaCompositionId}'}  # type: ignore


    @distributed_trace
    def start(
        self,
        media_composition_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[Union[str, "_models.CompositionStreamState"]]
        """start.

        :param media_composition_id:
        :type media_composition_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CompositionStreamState, or the result of cls(response)
        :rtype: str or ~azure.communication.mediacomposition.models.CompositionStreamState or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Union[str, "_models.CompositionStreamState"]]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_start_request(
            media_composition_id=media_composition_id,
            template_url=self.start.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    start.metadata = {'url': '/mediaCompositions/{mediaCompositionId}/start'}  # type: ignore


    @distributed_trace
    def stop(
        self,
        media_composition_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[Union[str, "_models.CompositionStreamState"]]
        """stop.

        :param media_composition_id:
        :type media_composition_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CompositionStreamState, or the result of cls(response)
        :rtype: str or ~azure.communication.mediacomposition.models.CompositionStreamState or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Union[str, "_models.CompositionStreamState"]]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_stop_request(
            media_composition_id=media_composition_id,
            template_url=self.stop.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    stop.metadata = {'url': '/mediaCompositions/{mediaCompositionId}/stop'}  # type: ignore

