# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._communication_media_composition_client_enums import *


class CommunicationError(msrest.serialization.Model):
    """The Communication Services error.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required. The error code.
    :vartype code: str
    :ivar message: Required. The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Further details about specific errors that led to this error.
    :vartype details: list[~azure.communication.mediacomposition.models.CommunicationError]
    :ivar inner_error: The inner error if any.
    :vartype inner_error: ~azure.communication.mediacomposition.models.CommunicationError
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CommunicationError]'},
        'inner_error': {'key': 'innererror', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        **kwargs
    ):
        """
        :keyword code: Required. The error code.
        :paramtype code: str
        :keyword message: Required. The error message.
        :paramtype message: str
        """
        super(CommunicationError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = None
        self.details = None
        self.inner_error = None


class CommunicationErrorResponse(msrest.serialization.Model):
    """The Communication Services error.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required. The Communication Services error.
    :vartype error: ~azure.communication.mediacomposition.models.CommunicationError
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CommunicationError'},
    }

    def __init__(
        self,
        *,
        error: "CommunicationError",
        **kwargs
    ):
        """
        :keyword error: Required. The Communication Services error.
        :paramtype error: ~azure.communication.mediacomposition.models.CommunicationError
        """
        super(CommunicationErrorResponse, self).__init__(**kwargs)
        self.error = error


class CommunicationUserIdentifierModel(msrest.serialization.Model):
    """CommunicationUserIdentifierModel.

    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        """
        super(CommunicationUserIdentifierModel, self).__init__(**kwargs)
        self.id = id


class Container(msrest.serialization.Model):
    """Container.

    :ivar position:
    :vartype position: ~azure.communication.mediacomposition.models.Position
    :ivar width:
    :vartype width: int
    :ivar height:
    :vartype height: int
    :ivar source_ids:
    :vartype source_ids: list[str]
    """

    _attribute_map = {
        'position': {'key': 'position', 'type': 'Position'},
        'width': {'key': 'width', 'type': 'int'},
        'height': {'key': 'height', 'type': 'int'},
        'source_ids': {'key': 'sourceIds', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        position: Optional["Position"] = None,
        width: Optional[int] = None,
        height: Optional[int] = None,
        source_ids: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword position:
        :paramtype position: ~azure.communication.mediacomposition.models.Position
        :keyword width:
        :paramtype width: int
        :keyword height:
        :paramtype height: int
        :keyword source_ids:
        :paramtype source_ids: list[str]
        """
        super(Container, self).__init__(**kwargs)
        self.position = position
        self.width = width
        self.height = height
        self.source_ids = source_ids


class GridLayoutOptions(msrest.serialization.Model):
    """GridLayoutOptions.

    :ivar columns:
    :vartype columns: int
    :ivar rows:
    :vartype rows: int
    """

    _attribute_map = {
        'columns': {'key': 'columns', 'type': 'int'},
        'rows': {'key': 'rows', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        columns: Optional[int] = None,
        rows: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword columns:
        :paramtype columns: int
        :keyword rows:
        :paramtype rows: int
        """
        super(GridLayoutOptions, self).__init__(**kwargs)
        self.columns = columns
        self.rows = rows


class GroupCall(msrest.serialization.Model):
    """GroupCall.

    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        """
        super(GroupCall, self).__init__(**kwargs)
        self.id = id


class Layout(msrest.serialization.Model):
    """Layout.

    :ivar type: Possible values include: "grid", "dynamicGrid", "presentation", "presenter",
     "weatherPerson", "together", "custom", "presentationWithContent", "warhol".
    :vartype type: str or ~azure.communication.mediacomposition.models.LayoutType
    :ivar resolution:
    :vartype resolution: ~azure.communication.mediacomposition.models.Resolution
    :ivar track_active_speaker:
    :vartype track_active_speaker: bool
    :ivar presentation_with_content_layout_options:
    :vartype presentation_with_content_layout_options:
     ~azure.communication.mediacomposition.models.PresentationWithContentLayoutOptions
    :ivar grid_options:
    :vartype grid_options: ~azure.communication.mediacomposition.models.GridLayoutOptions
    :ivar presentation_options:
    :vartype presentation_options:
     ~azure.communication.mediacomposition.models.PresentationLayoutOptions
    :ivar presenter_options:
    :vartype presenter_options: ~azure.communication.mediacomposition.models.PresenterLayoutOptions
    :ivar containers:
    :vartype containers: list[~azure.communication.mediacomposition.models.Container]
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'resolution': {'key': 'resolution', 'type': 'Resolution'},
        'track_active_speaker': {'key': 'trackActiveSpeaker', 'type': 'bool'},
        'presentation_with_content_layout_options': {'key': 'presentationWithContentLayoutOptions', 'type': 'PresentationWithContentLayoutOptions'},
        'grid_options': {'key': 'gridOptions', 'type': 'GridLayoutOptions'},
        'presentation_options': {'key': 'presentationOptions', 'type': 'PresentationLayoutOptions'},
        'presenter_options': {'key': 'presenterOptions', 'type': 'PresenterLayoutOptions'},
        'containers': {'key': 'containers', 'type': '[Container]'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "LayoutType"]] = None,
        resolution: Optional["Resolution"] = None,
        track_active_speaker: Optional[bool] = None,
        presentation_with_content_layout_options: Optional["PresentationWithContentLayoutOptions"] = None,
        grid_options: Optional["GridLayoutOptions"] = None,
        presentation_options: Optional["PresentationLayoutOptions"] = None,
        presenter_options: Optional["PresenterLayoutOptions"] = None,
        containers: Optional[List["Container"]] = None,
        **kwargs
    ):
        """
        :keyword type: Possible values include: "grid", "dynamicGrid", "presentation", "presenter",
         "weatherPerson", "together", "custom", "presentationWithContent", "warhol".
        :paramtype type: str or ~azure.communication.mediacomposition.models.LayoutType
        :keyword resolution:
        :paramtype resolution: ~azure.communication.mediacomposition.models.Resolution
        :keyword track_active_speaker:
        :paramtype track_active_speaker: bool
        :keyword presentation_with_content_layout_options:
        :paramtype presentation_with_content_layout_options:
         ~azure.communication.mediacomposition.models.PresentationWithContentLayoutOptions
        :keyword grid_options:
        :paramtype grid_options: ~azure.communication.mediacomposition.models.GridLayoutOptions
        :keyword presentation_options:
        :paramtype presentation_options:
         ~azure.communication.mediacomposition.models.PresentationLayoutOptions
        :keyword presenter_options:
        :paramtype presenter_options:
         ~azure.communication.mediacomposition.models.PresenterLayoutOptions
        :keyword containers:
        :paramtype containers: list[~azure.communication.mediacomposition.models.Container]
        """
        super(Layout, self).__init__(**kwargs)
        self.type = type
        self.resolution = resolution
        self.track_active_speaker = track_active_speaker
        self.presentation_with_content_layout_options = presentation_with_content_layout_options
        self.grid_options = grid_options
        self.presentation_options = presentation_options
        self.presenter_options = presenter_options
        self.containers = containers


class MediaCompositionBody(msrest.serialization.Model):
    """MediaCompositionBody.

    :ivar id:
    :vartype id: str
    :ivar layout:
    :vartype layout: ~azure.communication.mediacomposition.models.Layout
    :ivar media_inputs: Dictionary of :code:`<MediaInput>`.
    :vartype media_inputs: dict[str, ~azure.communication.mediacomposition.models.MediaInput]
    :ivar media_outputs: Dictionary of :code:`<MediaOutput>`.
    :vartype media_outputs: dict[str, ~azure.communication.mediacomposition.models.MediaOutput]
    :ivar sources: Dictionary of :code:`<Source>`.
    :vartype sources: dict[str, ~azure.communication.mediacomposition.models.Source]
    :ivar stream_state: Possible values include: "notStarted", "running", "stopped".
    :vartype stream_state: str or
     ~azure.communication.mediacomposition.models.CompositionStreamState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'layout': {'key': 'layout', 'type': 'Layout'},
        'media_inputs': {'key': 'mediaInputs', 'type': '{MediaInput}'},
        'media_outputs': {'key': 'mediaOutputs', 'type': '{MediaOutput}'},
        'sources': {'key': 'sources', 'type': '{Source}'},
        'stream_state': {'key': 'streamState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        layout: Optional["Layout"] = None,
        media_inputs: Optional[Dict[str, "MediaInput"]] = None,
        media_outputs: Optional[Dict[str, "MediaOutput"]] = None,
        sources: Optional[Dict[str, "Source"]] = None,
        stream_state: Optional[Union[str, "CompositionStreamState"]] = None,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: str
        :keyword layout:
        :paramtype layout: ~azure.communication.mediacomposition.models.Layout
        :keyword media_inputs: Dictionary of :code:`<MediaInput>`.
        :paramtype media_inputs: dict[str, ~azure.communication.mediacomposition.models.MediaInput]
        :keyword media_outputs: Dictionary of :code:`<MediaOutput>`.
        :paramtype media_outputs: dict[str, ~azure.communication.mediacomposition.models.MediaOutput]
        :keyword sources: Dictionary of :code:`<Source>`.
        :paramtype sources: dict[str, ~azure.communication.mediacomposition.models.Source]
        :keyword stream_state: Possible values include: "notStarted", "running", "stopped".
        :paramtype stream_state: str or
         ~azure.communication.mediacomposition.models.CompositionStreamState
        """
        super(MediaCompositionBody, self).__init__(**kwargs)
        self.id = id
        self.layout = layout
        self.media_inputs = media_inputs
        self.media_outputs = media_outputs
        self.sources = sources
        self.stream_state = stream_state


class MediaInput(msrest.serialization.Model):
    """MediaInput.

    :ivar media_type: Possible values include: "groupCall", "teamsMeeting", "srt", "rtmp".
    :vartype media_type: str or ~azure.communication.mediacomposition.models.MediaType
    :ivar group_call:
    :vartype group_call: ~azure.communication.mediacomposition.models.GroupCall
    :ivar teams_meeting:
    :vartype teams_meeting: ~azure.communication.mediacomposition.models.TeamsMeeting
    :ivar rtmp:
    :vartype rtmp: ~azure.communication.mediacomposition.models.RtmpStream
    :ivar srt:
    :vartype srt: ~azure.communication.mediacomposition.models.SrtStream
    """

    _attribute_map = {
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'group_call': {'key': 'groupCall', 'type': 'GroupCall'},
        'teams_meeting': {'key': 'teamsMeeting', 'type': 'TeamsMeeting'},
        'rtmp': {'key': 'rtmp', 'type': 'RtmpStream'},
        'srt': {'key': 'srt', 'type': 'SrtStream'},
    }

    def __init__(
        self,
        *,
        media_type: Optional[Union[str, "MediaType"]] = None,
        group_call: Optional["GroupCall"] = None,
        teams_meeting: Optional["TeamsMeeting"] = None,
        rtmp: Optional["RtmpStream"] = None,
        srt: Optional["SrtStream"] = None,
        **kwargs
    ):
        """
        :keyword media_type: Possible values include: "groupCall", "teamsMeeting", "srt", "rtmp".
        :paramtype media_type: str or ~azure.communication.mediacomposition.models.MediaType
        :keyword group_call:
        :paramtype group_call: ~azure.communication.mediacomposition.models.GroupCall
        :keyword teams_meeting:
        :paramtype teams_meeting: ~azure.communication.mediacomposition.models.TeamsMeeting
        :keyword rtmp:
        :paramtype rtmp: ~azure.communication.mediacomposition.models.RtmpStream
        :keyword srt:
        :paramtype srt: ~azure.communication.mediacomposition.models.SrtStream
        """
        super(MediaInput, self).__init__(**kwargs)
        self.media_type = media_type
        self.group_call = group_call
        self.teams_meeting = teams_meeting
        self.rtmp = rtmp
        self.srt = srt


class MediaOutput(msrest.serialization.Model):
    """MediaOutput.

    :ivar media_type: Possible values include: "groupCall", "teamsMeeting", "srt", "rtmp".
    :vartype media_type: str or ~azure.communication.mediacomposition.models.MediaType
    :ivar group_call:
    :vartype group_call: ~azure.communication.mediacomposition.models.GroupCall
    :ivar teams_meeting:
    :vartype teams_meeting: ~azure.communication.mediacomposition.models.TeamsMeeting
    :ivar rtmp:
    :vartype rtmp: ~azure.communication.mediacomposition.models.RtmpStream
    :ivar srt:
    :vartype srt: ~azure.communication.mediacomposition.models.SrtStream
    """

    _attribute_map = {
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'group_call': {'key': 'groupCall', 'type': 'GroupCall'},
        'teams_meeting': {'key': 'teamsMeeting', 'type': 'TeamsMeeting'},
        'rtmp': {'key': 'rtmp', 'type': 'RtmpStream'},
        'srt': {'key': 'srt', 'type': 'SrtStream'},
    }

    def __init__(
        self,
        *,
        media_type: Optional[Union[str, "MediaType"]] = None,
        group_call: Optional["GroupCall"] = None,
        teams_meeting: Optional["TeamsMeeting"] = None,
        rtmp: Optional["RtmpStream"] = None,
        srt: Optional["SrtStream"] = None,
        **kwargs
    ):
        """
        :keyword media_type: Possible values include: "groupCall", "teamsMeeting", "srt", "rtmp".
        :paramtype media_type: str or ~azure.communication.mediacomposition.models.MediaType
        :keyword group_call:
        :paramtype group_call: ~azure.communication.mediacomposition.models.GroupCall
        :keyword teams_meeting:
        :paramtype teams_meeting: ~azure.communication.mediacomposition.models.TeamsMeeting
        :keyword rtmp:
        :paramtype rtmp: ~azure.communication.mediacomposition.models.RtmpStream
        :keyword srt:
        :paramtype srt: ~azure.communication.mediacomposition.models.SrtStream
        """
        super(MediaOutput, self).__init__(**kwargs)
        self.media_type = media_type
        self.group_call = group_call
        self.teams_meeting = teams_meeting
        self.rtmp = rtmp
        self.srt = srt


class Position(msrest.serialization.Model):
    """Position.

    :ivar x:
    :vartype x: int
    :ivar y:
    :vartype y: int
    :ivar z:
    :vartype z: int
    """

    _attribute_map = {
        'x': {'key': 'x', 'type': 'int'},
        'y': {'key': 'y', 'type': 'int'},
        'z': {'key': 'z', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        x: Optional[int] = None,
        y: Optional[int] = None,
        z: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword x:
        :paramtype x: int
        :keyword y:
        :paramtype y: int
        :keyword z:
        :paramtype z: int
        """
        super(Position, self).__init__(**kwargs)
        self.x = x
        self.y = y
        self.z = z


class PresentationLayoutOptions(msrest.serialization.Model):
    """PresentationLayoutOptions.

    :ivar presenter_source_id:
    :vartype presenter_source_id: str
    :ivar audience_position: Possible values include: "top", "right", "bottom", "left".
    :vartype audience_position: str or
     ~azure.communication.mediacomposition.models.AudiencePosition
    """

    _attribute_map = {
        'presenter_source_id': {'key': 'presenterSourceId', 'type': 'str'},
        'audience_position': {'key': 'audiencePosition', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        presenter_source_id: Optional[str] = None,
        audience_position: Optional[Union[str, "AudiencePosition"]] = None,
        **kwargs
    ):
        """
        :keyword presenter_source_id:
        :paramtype presenter_source_id: str
        :keyword audience_position: Possible values include: "top", "right", "bottom", "left".
        :paramtype audience_position: str or
         ~azure.communication.mediacomposition.models.AudiencePosition
        """
        super(PresentationLayoutOptions, self).__init__(**kwargs)
        self.presenter_source_id = presenter_source_id
        self.audience_position = audience_position


class PresentationWithContentLayoutOptions(msrest.serialization.Model):
    """PresentationWithContentLayoutOptions.

    :ivar content_source_id:
    :vartype content_source_id: str
    :ivar presenter_source_id:
    :vartype presenter_source_id: str
    """

    _attribute_map = {
        'content_source_id': {'key': 'contentSourceId', 'type': 'str'},
        'presenter_source_id': {'key': 'presenterSourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        content_source_id: Optional[str] = None,
        presenter_source_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword content_source_id:
        :paramtype content_source_id: str
        :keyword presenter_source_id:
        :paramtype presenter_source_id: str
        """
        super(PresentationWithContentLayoutOptions, self).__init__(**kwargs)
        self.content_source_id = content_source_id
        self.presenter_source_id = presenter_source_id


class PresenterLayoutOptions(msrest.serialization.Model):
    """PresenterLayoutOptions.

    :ivar presenter_source_id:
    :vartype presenter_source_id: str
    :ivar support_source_id:
    :vartype support_source_id: str
    :ivar support_position: Possible values include: "topLeft", "topRight", "bottomLeft",
     "bottomRight".
    :vartype support_position: str or ~azure.communication.mediacomposition.models.SupportPosition
    :ivar support_aspect_ratio:
    :vartype support_aspect_ratio: float
    """

    _attribute_map = {
        'presenter_source_id': {'key': 'presenterSourceId', 'type': 'str'},
        'support_source_id': {'key': 'supportSourceId', 'type': 'str'},
        'support_position': {'key': 'supportPosition', 'type': 'str'},
        'support_aspect_ratio': {'key': 'supportAspectRatio', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        presenter_source_id: Optional[str] = None,
        support_source_id: Optional[str] = None,
        support_position: Optional[Union[str, "SupportPosition"]] = None,
        support_aspect_ratio: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword presenter_source_id:
        :paramtype presenter_source_id: str
        :keyword support_source_id:
        :paramtype support_source_id: str
        :keyword support_position: Possible values include: "topLeft", "topRight", "bottomLeft",
         "bottomRight".
        :paramtype support_position: str or
         ~azure.communication.mediacomposition.models.SupportPosition
        :keyword support_aspect_ratio:
        :paramtype support_aspect_ratio: float
        """
        super(PresenterLayoutOptions, self).__init__(**kwargs)
        self.presenter_source_id = presenter_source_id
        self.support_source_id = support_source_id
        self.support_position = support_position
        self.support_aspect_ratio = support_aspect_ratio


class Resolution(msrest.serialization.Model):
    """Resolution.

    :ivar width:
    :vartype width: int
    :ivar height:
    :vartype height: int
    """

    _attribute_map = {
        'width': {'key': 'width', 'type': 'int'},
        'height': {'key': 'height', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        width: Optional[int] = None,
        height: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword width:
        :paramtype width: int
        :keyword height:
        :paramtype height: int
        """
        super(Resolution, self).__init__(**kwargs)
        self.width = width
        self.height = height


class RtmpStream(msrest.serialization.Model):
    """RtmpStream.

    :ivar enable_ssl:
    :vartype enable_ssl: bool
    :ivar stream_url:
    :vartype stream_url: str
    :ivar stream_key:
    :vartype stream_key: str
    :ivar resolution:
    :vartype resolution: ~azure.communication.mediacomposition.models.Resolution
    :ivar mode: Possible values include: "push", "pull".
    :vartype mode: str or ~azure.communication.mediacomposition.models.RtmpMode
    """

    _attribute_map = {
        'enable_ssl': {'key': 'enableSsl', 'type': 'bool'},
        'stream_url': {'key': 'streamUrl', 'type': 'str'},
        'stream_key': {'key': 'streamKey', 'type': 'str'},
        'resolution': {'key': 'resolution', 'type': 'Resolution'},
        'mode': {'key': 'mode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enable_ssl: Optional[bool] = None,
        stream_url: Optional[str] = None,
        stream_key: Optional[str] = None,
        resolution: Optional["Resolution"] = None,
        mode: Optional[Union[str, "RtmpMode"]] = None,
        **kwargs
    ):
        """
        :keyword enable_ssl:
        :paramtype enable_ssl: bool
        :keyword stream_url:
        :paramtype stream_url: str
        :keyword stream_key:
        :paramtype stream_key: str
        :keyword resolution:
        :paramtype resolution: ~azure.communication.mediacomposition.models.Resolution
        :keyword mode: Possible values include: "push", "pull".
        :paramtype mode: str or ~azure.communication.mediacomposition.models.RtmpMode
        """
        super(RtmpStream, self).__init__(**kwargs)
        self.enable_ssl = enable_ssl
        self.stream_url = stream_url
        self.stream_key = stream_key
        self.resolution = resolution
        self.mode = mode


class Source(msrest.serialization.Model):
    """Source.

    :ivar description:
    :vartype description: str
    :ivar source_type: Possible values include: "participant", "sprite", "rtmp", "srt",
     "screenShare".
    :vartype source_type: str or ~azure.communication.mediacomposition.models.SourceType
    :ivar participant:
    :vartype participant:
     ~azure.communication.mediacomposition.models.CommunicationUserIdentifierModel
    :ivar location:
    :vartype location: str
    :ivar media_input_id:
    :vartype media_input_id: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'source_type': {'key': 'sourceType', 'type': 'str'},
        'participant': {'key': 'participant', 'type': 'CommunicationUserIdentifierModel'},
        'location': {'key': 'location', 'type': 'str'},
        'media_input_id': {'key': 'mediaInputId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        source_type: Optional[Union[str, "SourceType"]] = None,
        participant: Optional["CommunicationUserIdentifierModel"] = None,
        location: Optional[str] = None,
        media_input_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description:
        :paramtype description: str
        :keyword source_type: Possible values include: "participant", "sprite", "rtmp", "srt",
         "screenShare".
        :paramtype source_type: str or ~azure.communication.mediacomposition.models.SourceType
        :keyword participant:
        :paramtype participant:
         ~azure.communication.mediacomposition.models.CommunicationUserIdentifierModel
        :keyword location:
        :paramtype location: str
        :keyword media_input_id:
        :paramtype media_input_id: str
        """
        super(Source, self).__init__(**kwargs)
        self.description = description
        self.source_type = source_type
        self.participant = participant
        self.location = location
        self.media_input_id = media_input_id


class SrtStream(msrest.serialization.Model):
    """SrtStream.

    :ivar stream_url:
    :vartype stream_url: str
    :ivar resolution:
    :vartype resolution: ~azure.communication.mediacomposition.models.Resolution
    """

    _attribute_map = {
        'stream_url': {'key': 'streamUrl', 'type': 'str'},
        'resolution': {'key': 'resolution', 'type': 'Resolution'},
    }

    def __init__(
        self,
        *,
        stream_url: Optional[str] = None,
        resolution: Optional["Resolution"] = None,
        **kwargs
    ):
        """
        :keyword stream_url:
        :paramtype stream_url: str
        :keyword resolution:
        :paramtype resolution: ~azure.communication.mediacomposition.models.Resolution
        """
        super(SrtStream, self).__init__(**kwargs)
        self.stream_url = stream_url
        self.resolution = resolution


class TeamsMeeting(msrest.serialization.Model):
    """TeamsMeeting.

    :ivar teams_join_url:
    :vartype teams_join_url: str
    """

    _attribute_map = {
        'teams_join_url': {'key': 'teamsJoinUrl', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        teams_join_url: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword teams_join_url:
        :paramtype teams_join_url: str
        """
        super(TeamsMeeting, self).__init__(**kwargs)
        self.teams_join_url = teams_join_url
