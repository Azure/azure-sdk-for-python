# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class ManagedIdentityType(str, Enum):

    none = "None"  #: Indicates that no identity is associated with the resource.
    system_assigned = "SystemAssigned"  #: Indicates that system assigned identity is associated with the resource.
    user_assigned = "UserAssigned"  #: Indicates that user assigned identity is associated with the resource.
    system_assigned_user_assigned = "SystemAssigned, UserAssigned"  #: Indicates that both system assigned and user assigned identity are associated with the resource.


class FailureAction(str, Enum):

    rollback = "Rollback"  #: Indicates that a rollback of the upgrade will be performed by Service Fabric if the upgrade fails.
    manual = "Manual"  #: Indicates that a manual repair will need to be performed by the administrator if the upgrade fails. Service Fabric will not proceed to the next upgrade domain automatically.


class RollingUpgradeMode(str, Enum):

    monitored = "Monitored"  #: The upgrade will stop after completing each upgrade domain and automatically monitor health before proceeding. The value is 0.
    unmonitored_auto = "UnmonitoredAuto"  #: The upgrade will proceed automatically without performing any health monitoring. The value is 1.


class ServiceCorrelationScheme(str, Enum):

    aligned_affinity = "AlignedAffinity"  #: Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 0.
    non_aligned_affinity = "NonAlignedAffinity"  #: Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 1.


class MoveCost(str, Enum):

    zero = "Zero"  #: Zero move cost. This value is zero.
    low = "Low"  #: Specifies the move cost of the service as Low. The value is 1.
    medium = "Medium"  #: Specifies the move cost of the service as Medium. The value is 2.
    high = "High"  #: Specifies the move cost of the service as High. The value is 3.


class PartitionScheme(str, Enum):

    singleton = "Singleton"  #: Indicates that the partition is based on string names, and is a SingletonPartitionScheme object, The value is 0.
    uniform_int64_range = "UniformInt64Range"  #: Indicates that the partition is based on Int64 key ranges, and is a UniformInt64RangePartitionScheme object. The value is 1.
    named = "Named"  #: Indicates that the partition is based on string names, and is a NamedPartitionScheme object. The value is 2.


class CreatedByType(str, Enum):

    user = "User"
    application = "Application"
    managed_identity = "ManagedIdentity"
    key = "Key"


class ServiceKind(str, Enum):

    stateless = "Stateless"  #: Does not use Service Fabric to make its state highly available or reliable. The value is 0.
    stateful = "Stateful"  #: Uses Service Fabric to make its state or part of its state highly available and reliable. The value is 1.


class ServiceLoadMetricWeight(str, Enum):

    zero = "Zero"  #: Disables resource balancing for this metric. This value is zero.
    low = "Low"  #: Specifies the metric weight of the service load as Low. The value is 1.
    medium = "Medium"  #: Specifies the metric weight of the service load as Medium. The value is 2.
    high = "High"  #: Specifies the metric weight of the service load as High. The value is 3.


class ServicePlacementPolicyType(str, Enum):

    invalid_domain = "InvalidDomain"  #: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementInvalidDomainPolicyDescription, which indicates that a particular fault or upgrade domain cannot be used for placement of this service. The value is 0.
    required_domain = "RequiredDomain"  #: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription indicating that the replicas of the service must be placed in a specific domain. The value is 1.
    preferred_primary_domain = "PreferredPrimaryDomain"  #: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementPreferPrimaryDomainPolicyDescription, which indicates that if possible the Primary replica for the partitions of the service should be located in a particular domain as an optimization. The value is 2.
    required_domain_distribution = "RequiredDomainDistribution"  #: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementRequireDomainDistributionPolicyDescription, indicating that the system will disallow placement of any two replicas from the same partition in the same domain at any time. The value is 3.
    non_partially_place_service = "NonPartiallyPlaceService"  #: Indicates that the ServicePlacementPolicyDescription is of type ServicePlacementNonPartiallyPlaceServicePolicyDescription, which indicates that if possible all replicas of a particular partition of the service should be placed atomically. The value is 4.


class ServicePackageActivationMode(str, Enum):

    shared_process = "SharedProcess"  #: Indicates the application package activation mode will use shared process.
    exclusive_process = "ExclusiveProcess"  #: Indicates the application package activation mode will use exclusive process.


class ServiceScalingMechanismKind(str, Enum):

    scale_partition_instance_count = "ScalePartitionInstanceCount"  #: Represents a scaling mechanism for adding or removing instances of stateless service partition. The value is 0.
    add_remove_incremental_named_partition = "AddRemoveIncrementalNamedPartition"  #: Represents a scaling mechanism for adding or removing named partitions of a stateless service. The value is 1.


class ServiceScalingTriggerKind(str, Enum):

    average_partition_load = "AveragePartitionLoad"  #: Represents a scaling trigger related to an average load of a metric/resource of a partition. The value is 0.
    average_service_load = "AverageServiceLoad"  #: Represents a scaling policy related to an average load of a metric/resource of a service. The value is 1.


class Protocol(str, Enum):

    tcp = "tcp"
    udp = "udp"


class ProbeProtocol(str, Enum):

    tcp = "tcp"
    http = "http"
    https = "https"


class NsgProtocol(str, Enum):

    http = "http"
    https = "https"
    tcp = "tcp"
    udp = "udp"
    icmp = "icmp"
    ah = "ah"
    esp = "esp"


class Access(str, Enum):

    allow = "allow"
    deny = "deny"


class Direction(str, Enum):

    inbound = "inbound"
    outbound = "outbound"
