# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    import __init__ as _models


class AzureMonitorMetricsDestination(msrest.serialization.Model):
    """Azure Monitor Metrics destination.

    :ivar name: A friendly name for the destination.
     This name should be unique across all destinations (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: A friendly name for the destination.
         This name should be unique across all destinations (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(AzureMonitorMetricsDestination, self).__init__(**kwargs)
        self.name = name


class ColumnDefinition(msrest.serialization.Model):
    """Definition of custom data column.

    :ivar name: The name of the column.
    :vartype name: str
    :ivar type: The type of the column data. Known values are: "string", "int", "long", "real",
     "boolean", "datetime", "dynamic".
    :vartype type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownColumnDefinitionType
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.KnownColumnDefinitionType"]] = None,
        **kwargs
    ):
        """
        :keyword name: The name of the column.
        :paramtype name: str
        :keyword type: The type of the column data. Known values are: "string", "int", "long", "real",
         "boolean", "datetime", "dynamic".
        :paramtype type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownColumnDefinitionType
        """
        super(ColumnDefinition, self).__init__(**kwargs)
        self.name = name
        self.type = type


class ConfigurationAccessEndpointSpec(msrest.serialization.Model):
    """Definition of the endpoint used for accessing configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar endpoint: The endpoint. This property is READ-ONLY.
    :vartype endpoint: str
    """

    _validation = {
        'endpoint': {'readonly': True},
    }

    _attribute_map = {
        'endpoint': {'key': 'endpoint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ConfigurationAccessEndpointSpec, self).__init__(**kwargs)
        self.endpoint = None


class DataCollectionEndpoint(msrest.serialization.Model):
    """Definition of data collection endpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the data collection endpoint.
    :vartype description: str
    :ivar immutable_id: The immutable ID of this data collection endpoint resource. This property
     is READ-ONLY.
    :vartype immutable_id: str
    :ivar configuration_access: The endpoint used by clients to access their configuration.
    :vartype configuration_access:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointConfigurationAccess
    :ivar logs_ingestion: The endpoint used by clients to ingest logs.
    :vartype logs_ingestion:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointLogsIngestion
    :ivar network_acls: Network access control rules for the endpoints.
    :vartype network_acls:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointNetworkAcls
    :ivar provisioning_state: The resource provisioning state. This property is READ-ONLY. Known
     values are: "Creating", "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionEndpointProvisioningState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'immutable_id': {'key': 'immutableId', 'type': 'str'},
        'configuration_access': {'key': 'configurationAccess', 'type': 'DataCollectionEndpointConfigurationAccess'},
        'logs_ingestion': {'key': 'logsIngestion', 'type': 'DataCollectionEndpointLogsIngestion'},
        'network_acls': {'key': 'networkAcls', 'type': 'DataCollectionEndpointNetworkAcls'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        immutable_id: Optional[str] = None,
        configuration_access: Optional["_models.DataCollectionEndpointConfigurationAccess"] = None,
        logs_ingestion: Optional["_models.DataCollectionEndpointLogsIngestion"] = None,
        network_acls: Optional["_models.DataCollectionEndpointNetworkAcls"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the data collection endpoint.
        :paramtype description: str
        :keyword immutable_id: The immutable ID of this data collection endpoint resource. This
         property is READ-ONLY.
        :paramtype immutable_id: str
        :keyword configuration_access: The endpoint used by clients to access their configuration.
        :paramtype configuration_access:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointConfigurationAccess
        :keyword logs_ingestion: The endpoint used by clients to ingest logs.
        :paramtype logs_ingestion:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointLogsIngestion
        :keyword network_acls: Network access control rules for the endpoints.
        :paramtype network_acls:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointNetworkAcls
        """
        super(DataCollectionEndpoint, self).__init__(**kwargs)
        self.description = description
        self.immutable_id = immutable_id
        self.configuration_access = configuration_access
        self.logs_ingestion = logs_ingestion
        self.network_acls = network_acls
        self.provisioning_state = None


class DataCollectionEndpointConfigurationAccess(ConfigurationAccessEndpointSpec):
    """The endpoint used by clients to access their configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar endpoint: The endpoint. This property is READ-ONLY.
    :vartype endpoint: str
    """

    _validation = {
        'endpoint': {'readonly': True},
    }

    _attribute_map = {
        'endpoint': {'key': 'endpoint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DataCollectionEndpointConfigurationAccess, self).__init__(**kwargs)


class LogsIngestionEndpointSpec(msrest.serialization.Model):
    """Definition of the endpoint used for ingesting logs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar endpoint: The endpoint. This property is READ-ONLY.
    :vartype endpoint: str
    """

    _validation = {
        'endpoint': {'readonly': True},
    }

    _attribute_map = {
        'endpoint': {'key': 'endpoint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(LogsIngestionEndpointSpec, self).__init__(**kwargs)
        self.endpoint = None


class DataCollectionEndpointLogsIngestion(LogsIngestionEndpointSpec):
    """The endpoint used by clients to ingest logs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar endpoint: The endpoint. This property is READ-ONLY.
    :vartype endpoint: str
    """

    _validation = {
        'endpoint': {'readonly': True},
    }

    _attribute_map = {
        'endpoint': {'key': 'endpoint', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DataCollectionEndpointLogsIngestion, self).__init__(**kwargs)


class NetworkRuleSet(msrest.serialization.Model):
    """Definition of the network rules.

    :ivar public_network_access: The configuration to set whether network access from public
     internet to the endpoints are allowed. Known values are: "Enabled", "Disabled".
    :vartype public_network_access: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownPublicNetworkAccessOptions
    """

    _attribute_map = {
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        public_network_access: Optional[Union[str, "_models.KnownPublicNetworkAccessOptions"]] = None,
        **kwargs
    ):
        """
        :keyword public_network_access: The configuration to set whether network access from public
         internet to the endpoints are allowed. Known values are: "Enabled", "Disabled".
        :paramtype public_network_access: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownPublicNetworkAccessOptions
        """
        super(NetworkRuleSet, self).__init__(**kwargs)
        self.public_network_access = public_network_access


class DataCollectionEndpointNetworkAcls(NetworkRuleSet):
    """Network access control rules for the endpoints.

    :ivar public_network_access: The configuration to set whether network access from public
     internet to the endpoints are allowed. Known values are: "Enabled", "Disabled".
    :vartype public_network_access: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownPublicNetworkAccessOptions
    """

    _attribute_map = {
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        public_network_access: Optional[Union[str, "_models.KnownPublicNetworkAccessOptions"]] = None,
        **kwargs
    ):
        """
        :keyword public_network_access: The configuration to set whether network access from public
         internet to the endpoints are allowed. Known values are: "Enabled", "Disabled".
        :paramtype public_network_access: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownPublicNetworkAccessOptions
        """
        super(DataCollectionEndpointNetworkAcls, self).__init__(public_network_access=public_network_access, **kwargs)


class DataCollectionEndpointResource(msrest.serialization.Model):
    """Definition of ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar kind: The kind of the resource. Known values are: "Linux", "Windows".
    :vartype kind: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionEndpointResourceKind
    :ivar id: Fully qualified ID of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar etag: Resource entity tag (ETag).
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointResourceSystemData
    :ivar description: Description of the data collection endpoint.
    :vartype description: str
    :ivar immutable_id: The immutable ID of this data collection endpoint resource. This property
     is READ-ONLY.
    :vartype immutable_id: str
    :ivar configuration_access: The endpoint used by clients to access their configuration.
    :vartype configuration_access:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointConfigurationAccess
    :ivar logs_ingestion: The endpoint used by clients to ingest logs.
    :vartype logs_ingestion:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointLogsIngestion
    :ivar network_acls: Network access control rules for the endpoints.
    :vartype network_acls:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointNetworkAcls
    :ivar provisioning_state: The resource provisioning state. This property is READ-ONLY. Known
     values are: "Creating", "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionEndpointProvisioningState
    """

    _validation = {
        'location': {'required': True},
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'kind': {'key': 'kind', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'DataCollectionEndpointResourceSystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'immutable_id': {'key': 'properties.immutableId', 'type': 'str'},
        'configuration_access': {'key': 'properties.configurationAccess', 'type': 'DataCollectionEndpointConfigurationAccess'},
        'logs_ingestion': {'key': 'properties.logsIngestion', 'type': 'DataCollectionEndpointLogsIngestion'},
        'network_acls': {'key': 'properties.networkAcls', 'type': 'DataCollectionEndpointNetworkAcls'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        kind: Optional[Union[str, "_models.KnownDataCollectionEndpointResourceKind"]] = None,
        description: Optional[str] = None,
        immutable_id: Optional[str] = None,
        configuration_access: Optional["_models.DataCollectionEndpointConfigurationAccess"] = None,
        logs_ingestion: Optional["_models.DataCollectionEndpointLogsIngestion"] = None,
        network_acls: Optional["_models.DataCollectionEndpointNetworkAcls"] = None,
        **kwargs
    ):
        """
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword kind: The kind of the resource. Known values are: "Linux", "Windows".
        :paramtype kind: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionEndpointResourceKind
        :keyword description: Description of the data collection endpoint.
        :paramtype description: str
        :keyword immutable_id: The immutable ID of this data collection endpoint resource. This
         property is READ-ONLY.
        :paramtype immutable_id: str
        :keyword configuration_access: The endpoint used by clients to access their configuration.
        :paramtype configuration_access:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointConfigurationAccess
        :keyword logs_ingestion: The endpoint used by clients to ingest logs.
        :paramtype logs_ingestion:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointLogsIngestion
        :keyword network_acls: Network access control rules for the endpoints.
        :paramtype network_acls:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointNetworkAcls
        """
        super(DataCollectionEndpointResource, self).__init__(**kwargs)
        self.location = location
        self.tags = tags
        self.kind = kind
        self.id = None
        self.name = None
        self.type = None
        self.etag = None
        self.system_data = None
        self.description = description
        self.immutable_id = immutable_id
        self.configuration_access = configuration_access
        self.logs_ingestion = logs_ingestion
        self.network_acls = network_acls
        self.provisioning_state = None


class DataCollectionEndpointResourceListResult(msrest.serialization.Model):
    """A pageable list of resources.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. A list of resources.
    :vartype value:
     list[~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointResource]
    :ivar next_link: The URL to use for getting the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DataCollectionEndpointResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["_models.DataCollectionEndpointResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. A list of resources.
        :paramtype value:
         list[~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointResource]
        :keyword next_link: The URL to use for getting the next set of results.
        :paramtype next_link: str
        """
        super(DataCollectionEndpointResourceListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DataCollectionEndpointResourceProperties(DataCollectionEndpoint):
    """Resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the data collection endpoint.
    :vartype description: str
    :ivar immutable_id: The immutable ID of this data collection endpoint resource. This property
     is READ-ONLY.
    :vartype immutable_id: str
    :ivar configuration_access: The endpoint used by clients to access their configuration.
    :vartype configuration_access:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointConfigurationAccess
    :ivar logs_ingestion: The endpoint used by clients to ingest logs.
    :vartype logs_ingestion:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointLogsIngestion
    :ivar network_acls: Network access control rules for the endpoints.
    :vartype network_acls:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointNetworkAcls
    :ivar provisioning_state: The resource provisioning state. This property is READ-ONLY. Known
     values are: "Creating", "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionEndpointProvisioningState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'immutable_id': {'key': 'immutableId', 'type': 'str'},
        'configuration_access': {'key': 'configurationAccess', 'type': 'DataCollectionEndpointConfigurationAccess'},
        'logs_ingestion': {'key': 'logsIngestion', 'type': 'DataCollectionEndpointLogsIngestion'},
        'network_acls': {'key': 'networkAcls', 'type': 'DataCollectionEndpointNetworkAcls'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        immutable_id: Optional[str] = None,
        configuration_access: Optional["_models.DataCollectionEndpointConfigurationAccess"] = None,
        logs_ingestion: Optional["_models.DataCollectionEndpointLogsIngestion"] = None,
        network_acls: Optional["_models.DataCollectionEndpointNetworkAcls"] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the data collection endpoint.
        :paramtype description: str
        :keyword immutable_id: The immutable ID of this data collection endpoint resource. This
         property is READ-ONLY.
        :paramtype immutable_id: str
        :keyword configuration_access: The endpoint used by clients to access their configuration.
        :paramtype configuration_access:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointConfigurationAccess
        :keyword logs_ingestion: The endpoint used by clients to ingest logs.
        :paramtype logs_ingestion:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointLogsIngestion
        :keyword network_acls: Network access control rules for the endpoints.
        :paramtype network_acls:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionEndpointNetworkAcls
        """
        super(DataCollectionEndpointResourceProperties, self).__init__(description=description, immutable_id=immutable_id, configuration_access=configuration_access, logs_ingestion=logs_ingestion, network_acls=network_acls, **kwargs)


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class DataCollectionEndpointResourceSystemData(SystemData):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(DataCollectionEndpointResourceSystemData, self).__init__(created_by=created_by, created_by_type=created_by_type, created_at=created_at, last_modified_by=last_modified_by, last_modified_by_type=last_modified_by_type, last_modified_at=last_modified_at, **kwargs)


class DataCollectionRule(msrest.serialization.Model):
    """Definition of what monitoring data to collect and where that data should be sent.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the data collection rule.
    :vartype description: str
    :ivar immutable_id: The immutable ID of this data collection rule. This property is READ-ONLY.
    :vartype immutable_id: str
    :ivar data_collection_endpoint_id: The resource ID of the data collection endpoint that this
     rule can be used with.
    :vartype data_collection_endpoint_id: str
    :ivar metadata: Metadata about the resource.
    :vartype metadata:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleMetadata
    :ivar stream_declarations: Declaration of custom streams used in this rule.
    :vartype stream_declarations: dict[str,
     ~$(python-base-namespace).v2022_02_01_preview.models.StreamDeclaration]
    :ivar data_sources: The specification of data sources.
     This property is optional and can be omitted if the rule is meant to be used via direct calls
     to the provisioned endpoint.
    :vartype data_sources:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDataSources
    :ivar destinations: The specification of destinations.
    :vartype destinations:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDestinations
    :ivar data_flows: The specification of data flows.
    :vartype data_flows: list[~$(python-base-namespace).v2022_02_01_preview.models.DataFlow]
    :ivar provisioning_state: The resource provisioning state. Known values are: "Creating",
     "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionRuleProvisioningState
    """

    _validation = {
        'immutable_id': {'readonly': True},
        'metadata': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'immutable_id': {'key': 'immutableId', 'type': 'str'},
        'data_collection_endpoint_id': {'key': 'dataCollectionEndpointId', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': 'DataCollectionRuleMetadata'},
        'stream_declarations': {'key': 'streamDeclarations', 'type': '{StreamDeclaration}'},
        'data_sources': {'key': 'dataSources', 'type': 'DataCollectionRuleDataSources'},
        'destinations': {'key': 'destinations', 'type': 'DataCollectionRuleDestinations'},
        'data_flows': {'key': 'dataFlows', 'type': '[DataFlow]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        data_collection_endpoint_id: Optional[str] = None,
        stream_declarations: Optional[Dict[str, "_models.StreamDeclaration"]] = None,
        data_sources: Optional["_models.DataCollectionRuleDataSources"] = None,
        destinations: Optional["_models.DataCollectionRuleDestinations"] = None,
        data_flows: Optional[List["_models.DataFlow"]] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the data collection rule.
        :paramtype description: str
        :keyword data_collection_endpoint_id: The resource ID of the data collection endpoint that this
         rule can be used with.
        :paramtype data_collection_endpoint_id: str
        :keyword stream_declarations: Declaration of custom streams used in this rule.
        :paramtype stream_declarations: dict[str,
         ~$(python-base-namespace).v2022_02_01_preview.models.StreamDeclaration]
        :keyword data_sources: The specification of data sources.
         This property is optional and can be omitted if the rule is meant to be used via direct calls
         to the provisioned endpoint.
        :paramtype data_sources:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDataSources
        :keyword destinations: The specification of destinations.
        :paramtype destinations:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDestinations
        :keyword data_flows: The specification of data flows.
        :paramtype data_flows: list[~$(python-base-namespace).v2022_02_01_preview.models.DataFlow]
        """
        super(DataCollectionRule, self).__init__(**kwargs)
        self.description = description
        self.immutable_id = None
        self.data_collection_endpoint_id = data_collection_endpoint_id
        self.metadata = None
        self.stream_declarations = stream_declarations
        self.data_sources = data_sources
        self.destinations = destinations
        self.data_flows = data_flows
        self.provisioning_state = None


class DataCollectionRuleAssociation(msrest.serialization.Model):
    """Definition of association of a data collection rule with a monitored Azure resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the association.
    :vartype description: str
    :ivar data_collection_rule_id: The resource ID of the data collection rule that is to be
     associated.
    :vartype data_collection_rule_id: str
    :ivar data_collection_endpoint_id: The resource ID of the data collection endpoint that is to
     be associated.
    :vartype data_collection_endpoint_id: str
    :ivar provisioning_state: The resource provisioning state. Known values are: "Creating",
     "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionRuleAssociationProvisioningState
    :ivar metadata: Metadata about the resource.
    :vartype metadata:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleAssociationMetadata
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'metadata': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'data_collection_rule_id': {'key': 'dataCollectionRuleId', 'type': 'str'},
        'data_collection_endpoint_id': {'key': 'dataCollectionEndpointId', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': 'DataCollectionRuleAssociationMetadata'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        data_collection_rule_id: Optional[str] = None,
        data_collection_endpoint_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the association.
        :paramtype description: str
        :keyword data_collection_rule_id: The resource ID of the data collection rule that is to be
         associated.
        :paramtype data_collection_rule_id: str
        :keyword data_collection_endpoint_id: The resource ID of the data collection endpoint that is
         to be associated.
        :paramtype data_collection_endpoint_id: str
        """
        super(DataCollectionRuleAssociation, self).__init__(**kwargs)
        self.description = description
        self.data_collection_rule_id = data_collection_rule_id
        self.data_collection_endpoint_id = data_collection_endpoint_id
        self.provisioning_state = None
        self.metadata = None


class Metadata(msrest.serialization.Model):
    """Metadata about the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioned_by: Azure offering managing this resource on-behalf-of customer.
    :vartype provisioned_by: str
    """

    _validation = {
        'provisioned_by': {'readonly': True},
    }

    _attribute_map = {
        'provisioned_by': {'key': 'provisionedBy', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Metadata, self).__init__(**kwargs)
        self.provisioned_by = None


class DataCollectionRuleAssociationMetadata(Metadata):
    """Metadata about the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioned_by: Azure offering managing this resource on-behalf-of customer.
    :vartype provisioned_by: str
    """

    _validation = {
        'provisioned_by': {'readonly': True},
    }

    _attribute_map = {
        'provisioned_by': {'key': 'provisionedBy', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DataCollectionRuleAssociationMetadata, self).__init__(**kwargs)


class DataCollectionRuleAssociationProxyOnlyResource(msrest.serialization.Model):
    """Definition of generic ARM proxy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified ID of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar etag: Resource entity tag (ETag).
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleAssociationProxyOnlyResourceSystemData
    :ivar description: Description of the association.
    :vartype description: str
    :ivar data_collection_rule_id: The resource ID of the data collection rule that is to be
     associated.
    :vartype data_collection_rule_id: str
    :ivar data_collection_endpoint_id: The resource ID of the data collection endpoint that is to
     be associated.
    :vartype data_collection_endpoint_id: str
    :ivar provisioning_state: The resource provisioning state. Known values are: "Creating",
     "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionRuleAssociationProvisioningState
    :ivar metadata: Metadata about the resource.
    :vartype metadata:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleAssociationMetadata
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'metadata': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'DataCollectionRuleAssociationProxyOnlyResourceSystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'data_collection_rule_id': {'key': 'properties.dataCollectionRuleId', 'type': 'str'},
        'data_collection_endpoint_id': {'key': 'properties.dataCollectionEndpointId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'metadata': {'key': 'properties.metadata', 'type': 'DataCollectionRuleAssociationMetadata'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        data_collection_rule_id: Optional[str] = None,
        data_collection_endpoint_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the association.
        :paramtype description: str
        :keyword data_collection_rule_id: The resource ID of the data collection rule that is to be
         associated.
        :paramtype data_collection_rule_id: str
        :keyword data_collection_endpoint_id: The resource ID of the data collection endpoint that is
         to be associated.
        :paramtype data_collection_endpoint_id: str
        """
        super(DataCollectionRuleAssociationProxyOnlyResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = None
        self.system_data = None
        self.description = description
        self.data_collection_rule_id = data_collection_rule_id
        self.data_collection_endpoint_id = data_collection_endpoint_id
        self.provisioning_state = None
        self.metadata = None


class DataCollectionRuleAssociationProxyOnlyResourceListResult(msrest.serialization.Model):
    """A pageable list of resources.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. A list of resources.
    :vartype value:
     list[~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleAssociationProxyOnlyResource]
    :ivar next_link: The URL to use for getting the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DataCollectionRuleAssociationProxyOnlyResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["_models.DataCollectionRuleAssociationProxyOnlyResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. A list of resources.
        :paramtype value:
         list[~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleAssociationProxyOnlyResource]
        :keyword next_link: The URL to use for getting the next set of results.
        :paramtype next_link: str
        """
        super(DataCollectionRuleAssociationProxyOnlyResourceListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DataCollectionRuleAssociationProxyOnlyResourceProperties(DataCollectionRuleAssociation):
    """Resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the association.
    :vartype description: str
    :ivar data_collection_rule_id: The resource ID of the data collection rule that is to be
     associated.
    :vartype data_collection_rule_id: str
    :ivar data_collection_endpoint_id: The resource ID of the data collection endpoint that is to
     be associated.
    :vartype data_collection_endpoint_id: str
    :ivar provisioning_state: The resource provisioning state. Known values are: "Creating",
     "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionRuleAssociationProvisioningState
    :ivar metadata: Metadata about the resource.
    :vartype metadata:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleAssociationMetadata
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'metadata': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'data_collection_rule_id': {'key': 'dataCollectionRuleId', 'type': 'str'},
        'data_collection_endpoint_id': {'key': 'dataCollectionEndpointId', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': 'DataCollectionRuleAssociationMetadata'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        data_collection_rule_id: Optional[str] = None,
        data_collection_endpoint_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the association.
        :paramtype description: str
        :keyword data_collection_rule_id: The resource ID of the data collection rule that is to be
         associated.
        :paramtype data_collection_rule_id: str
        :keyword data_collection_endpoint_id: The resource ID of the data collection endpoint that is
         to be associated.
        :paramtype data_collection_endpoint_id: str
        """
        super(DataCollectionRuleAssociationProxyOnlyResourceProperties, self).__init__(description=description, data_collection_rule_id=data_collection_rule_id, data_collection_endpoint_id=data_collection_endpoint_id, **kwargs)


class DataCollectionRuleAssociationProxyOnlyResourceSystemData(SystemData):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(DataCollectionRuleAssociationProxyOnlyResourceSystemData, self).__init__(created_by=created_by, created_by_type=created_by_type, created_at=created_at, last_modified_by=last_modified_by, last_modified_by_type=last_modified_by_type, last_modified_at=last_modified_at, **kwargs)


class DataSourcesSpec(msrest.serialization.Model):
    """Specification of data sources that will be collected.

    :ivar performance_counters: The list of performance counter data source configurations.
    :vartype performance_counters:
     list[~$(python-base-namespace).v2022_02_01_preview.models.PerfCounterDataSource]
    :ivar windows_event_logs: The list of Windows Event Log data source configurations.
    :vartype windows_event_logs:
     list[~$(python-base-namespace).v2022_02_01_preview.models.WindowsEventLogDataSource]
    :ivar syslog: The list of Syslog data source configurations.
    :vartype syslog: list[~$(python-base-namespace).v2022_02_01_preview.models.SyslogDataSource]
    :ivar extensions: The list of Azure VM extension data source configurations.
    :vartype extensions:
     list[~$(python-base-namespace).v2022_02_01_preview.models.ExtensionDataSource]
    :ivar log_files: The list of Log files source configurations.
    :vartype log_files:
     list[~$(python-base-namespace).v2022_02_01_preview.models.LogFilesDataSource]
    :ivar iis_logs: The list of IIS logs source configurations.
    :vartype iis_logs: list[~$(python-base-namespace).v2022_02_01_preview.models.IisLogsDataSource]
    """

    _attribute_map = {
        'performance_counters': {'key': 'performanceCounters', 'type': '[PerfCounterDataSource]'},
        'windows_event_logs': {'key': 'windowsEventLogs', 'type': '[WindowsEventLogDataSource]'},
        'syslog': {'key': 'syslog', 'type': '[SyslogDataSource]'},
        'extensions': {'key': 'extensions', 'type': '[ExtensionDataSource]'},
        'log_files': {'key': 'logFiles', 'type': '[LogFilesDataSource]'},
        'iis_logs': {'key': 'iisLogs', 'type': '[IisLogsDataSource]'},
    }

    def __init__(
        self,
        *,
        performance_counters: Optional[List["_models.PerfCounterDataSource"]] = None,
        windows_event_logs: Optional[List["_models.WindowsEventLogDataSource"]] = None,
        syslog: Optional[List["_models.SyslogDataSource"]] = None,
        extensions: Optional[List["_models.ExtensionDataSource"]] = None,
        log_files: Optional[List["_models.LogFilesDataSource"]] = None,
        iis_logs: Optional[List["_models.IisLogsDataSource"]] = None,
        **kwargs
    ):
        """
        :keyword performance_counters: The list of performance counter data source configurations.
        :paramtype performance_counters:
         list[~$(python-base-namespace).v2022_02_01_preview.models.PerfCounterDataSource]
        :keyword windows_event_logs: The list of Windows Event Log data source configurations.
        :paramtype windows_event_logs:
         list[~$(python-base-namespace).v2022_02_01_preview.models.WindowsEventLogDataSource]
        :keyword syslog: The list of Syslog data source configurations.
        :paramtype syslog: list[~$(python-base-namespace).v2022_02_01_preview.models.SyslogDataSource]
        :keyword extensions: The list of Azure VM extension data source configurations.
        :paramtype extensions:
         list[~$(python-base-namespace).v2022_02_01_preview.models.ExtensionDataSource]
        :keyword log_files: The list of Log files source configurations.
        :paramtype log_files:
         list[~$(python-base-namespace).v2022_02_01_preview.models.LogFilesDataSource]
        :keyword iis_logs: The list of IIS logs source configurations.
        :paramtype iis_logs:
         list[~$(python-base-namespace).v2022_02_01_preview.models.IisLogsDataSource]
        """
        super(DataSourcesSpec, self).__init__(**kwargs)
        self.performance_counters = performance_counters
        self.windows_event_logs = windows_event_logs
        self.syslog = syslog
        self.extensions = extensions
        self.log_files = log_files
        self.iis_logs = iis_logs


class DataCollectionRuleDataSources(DataSourcesSpec):
    """The specification of data sources. 
This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.

    :ivar performance_counters: The list of performance counter data source configurations.
    :vartype performance_counters:
     list[~$(python-base-namespace).v2022_02_01_preview.models.PerfCounterDataSource]
    :ivar windows_event_logs: The list of Windows Event Log data source configurations.
    :vartype windows_event_logs:
     list[~$(python-base-namespace).v2022_02_01_preview.models.WindowsEventLogDataSource]
    :ivar syslog: The list of Syslog data source configurations.
    :vartype syslog: list[~$(python-base-namespace).v2022_02_01_preview.models.SyslogDataSource]
    :ivar extensions: The list of Azure VM extension data source configurations.
    :vartype extensions:
     list[~$(python-base-namespace).v2022_02_01_preview.models.ExtensionDataSource]
    :ivar log_files: The list of Log files source configurations.
    :vartype log_files:
     list[~$(python-base-namespace).v2022_02_01_preview.models.LogFilesDataSource]
    :ivar iis_logs: The list of IIS logs source configurations.
    :vartype iis_logs: list[~$(python-base-namespace).v2022_02_01_preview.models.IisLogsDataSource]
    """

    _attribute_map = {
        'performance_counters': {'key': 'performanceCounters', 'type': '[PerfCounterDataSource]'},
        'windows_event_logs': {'key': 'windowsEventLogs', 'type': '[WindowsEventLogDataSource]'},
        'syslog': {'key': 'syslog', 'type': '[SyslogDataSource]'},
        'extensions': {'key': 'extensions', 'type': '[ExtensionDataSource]'},
        'log_files': {'key': 'logFiles', 'type': '[LogFilesDataSource]'},
        'iis_logs': {'key': 'iisLogs', 'type': '[IisLogsDataSource]'},
    }

    def __init__(
        self,
        *,
        performance_counters: Optional[List["_models.PerfCounterDataSource"]] = None,
        windows_event_logs: Optional[List["_models.WindowsEventLogDataSource"]] = None,
        syslog: Optional[List["_models.SyslogDataSource"]] = None,
        extensions: Optional[List["_models.ExtensionDataSource"]] = None,
        log_files: Optional[List["_models.LogFilesDataSource"]] = None,
        iis_logs: Optional[List["_models.IisLogsDataSource"]] = None,
        **kwargs
    ):
        """
        :keyword performance_counters: The list of performance counter data source configurations.
        :paramtype performance_counters:
         list[~$(python-base-namespace).v2022_02_01_preview.models.PerfCounterDataSource]
        :keyword windows_event_logs: The list of Windows Event Log data source configurations.
        :paramtype windows_event_logs:
         list[~$(python-base-namespace).v2022_02_01_preview.models.WindowsEventLogDataSource]
        :keyword syslog: The list of Syslog data source configurations.
        :paramtype syslog: list[~$(python-base-namespace).v2022_02_01_preview.models.SyslogDataSource]
        :keyword extensions: The list of Azure VM extension data source configurations.
        :paramtype extensions:
         list[~$(python-base-namespace).v2022_02_01_preview.models.ExtensionDataSource]
        :keyword log_files: The list of Log files source configurations.
        :paramtype log_files:
         list[~$(python-base-namespace).v2022_02_01_preview.models.LogFilesDataSource]
        :keyword iis_logs: The list of IIS logs source configurations.
        :paramtype iis_logs:
         list[~$(python-base-namespace).v2022_02_01_preview.models.IisLogsDataSource]
        """
        super(DataCollectionRuleDataSources, self).__init__(performance_counters=performance_counters, windows_event_logs=windows_event_logs, syslog=syslog, extensions=extensions, log_files=log_files, iis_logs=iis_logs, **kwargs)


class DestinationsSpec(msrest.serialization.Model):
    """Specification of destinations that can be used in data flows.

    :ivar log_analytics: List of Log Analytics destinations.
    :vartype log_analytics:
     list[~$(python-base-namespace).v2022_02_01_preview.models.LogAnalyticsDestination]
    :ivar azure_monitor_metrics: Azure Monitor Metrics destination.
    :vartype azure_monitor_metrics:
     ~$(python-base-namespace).v2022_02_01_preview.models.DestinationsSpecAzureMonitorMetrics
    """

    _attribute_map = {
        'log_analytics': {'key': 'logAnalytics', 'type': '[LogAnalyticsDestination]'},
        'azure_monitor_metrics': {'key': 'azureMonitorMetrics', 'type': 'DestinationsSpecAzureMonitorMetrics'},
    }

    def __init__(
        self,
        *,
        log_analytics: Optional[List["_models.LogAnalyticsDestination"]] = None,
        azure_monitor_metrics: Optional["_models.DestinationsSpecAzureMonitorMetrics"] = None,
        **kwargs
    ):
        """
        :keyword log_analytics: List of Log Analytics destinations.
        :paramtype log_analytics:
         list[~$(python-base-namespace).v2022_02_01_preview.models.LogAnalyticsDestination]
        :keyword azure_monitor_metrics: Azure Monitor Metrics destination.
        :paramtype azure_monitor_metrics:
         ~$(python-base-namespace).v2022_02_01_preview.models.DestinationsSpecAzureMonitorMetrics
        """
        super(DestinationsSpec, self).__init__(**kwargs)
        self.log_analytics = log_analytics
        self.azure_monitor_metrics = azure_monitor_metrics


class DataCollectionRuleDestinations(DestinationsSpec):
    """The specification of destinations.

    :ivar log_analytics: List of Log Analytics destinations.
    :vartype log_analytics:
     list[~$(python-base-namespace).v2022_02_01_preview.models.LogAnalyticsDestination]
    :ivar azure_monitor_metrics: Azure Monitor Metrics destination.
    :vartype azure_monitor_metrics:
     ~$(python-base-namespace).v2022_02_01_preview.models.DestinationsSpecAzureMonitorMetrics
    """

    _attribute_map = {
        'log_analytics': {'key': 'logAnalytics', 'type': '[LogAnalyticsDestination]'},
        'azure_monitor_metrics': {'key': 'azureMonitorMetrics', 'type': 'DestinationsSpecAzureMonitorMetrics'},
    }

    def __init__(
        self,
        *,
        log_analytics: Optional[List["_models.LogAnalyticsDestination"]] = None,
        azure_monitor_metrics: Optional["_models.DestinationsSpecAzureMonitorMetrics"] = None,
        **kwargs
    ):
        """
        :keyword log_analytics: List of Log Analytics destinations.
        :paramtype log_analytics:
         list[~$(python-base-namespace).v2022_02_01_preview.models.LogAnalyticsDestination]
        :keyword azure_monitor_metrics: Azure Monitor Metrics destination.
        :paramtype azure_monitor_metrics:
         ~$(python-base-namespace).v2022_02_01_preview.models.DestinationsSpecAzureMonitorMetrics
        """
        super(DataCollectionRuleDestinations, self).__init__(log_analytics=log_analytics, azure_monitor_metrics=azure_monitor_metrics, **kwargs)


class DataCollectionRuleMetadata(Metadata):
    """Metadata about the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioned_by: Azure offering managing this resource on-behalf-of customer.
    :vartype provisioned_by: str
    """

    _validation = {
        'provisioned_by': {'readonly': True},
    }

    _attribute_map = {
        'provisioned_by': {'key': 'provisionedBy', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DataCollectionRuleMetadata, self).__init__(**kwargs)


class DataCollectionRuleResource(msrest.serialization.Model):
    """Definition of ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar kind: The kind of the resource. Known values are: "Linux", "Windows".
    :vartype kind: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionRuleResourceKind
    :ivar id: Fully qualified ID of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar etag: Resource entity tag (ETag).
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleResourceSystemData
    :ivar description: Description of the data collection rule.
    :vartype description: str
    :ivar immutable_id: The immutable ID of this data collection rule. This property is READ-ONLY.
    :vartype immutable_id: str
    :ivar data_collection_endpoint_id: The resource ID of the data collection endpoint that this
     rule can be used with.
    :vartype data_collection_endpoint_id: str
    :ivar metadata: Metadata about the resource.
    :vartype metadata:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleMetadata
    :ivar stream_declarations: Declaration of custom streams used in this rule.
    :vartype stream_declarations: dict[str,
     ~$(python-base-namespace).v2022_02_01_preview.models.StreamDeclaration]
    :ivar data_sources: The specification of data sources.
     This property is optional and can be omitted if the rule is meant to be used via direct calls
     to the provisioned endpoint.
    :vartype data_sources:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDataSources
    :ivar destinations: The specification of destinations.
    :vartype destinations:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDestinations
    :ivar data_flows: The specification of data flows.
    :vartype data_flows: list[~$(python-base-namespace).v2022_02_01_preview.models.DataFlow]
    :ivar provisioning_state: The resource provisioning state. Known values are: "Creating",
     "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionRuleProvisioningState
    """

    _validation = {
        'location': {'required': True},
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'immutable_id': {'readonly': True},
        'metadata': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'kind': {'key': 'kind', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'DataCollectionRuleResourceSystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'immutable_id': {'key': 'properties.immutableId', 'type': 'str'},
        'data_collection_endpoint_id': {'key': 'properties.dataCollectionEndpointId', 'type': 'str'},
        'metadata': {'key': 'properties.metadata', 'type': 'DataCollectionRuleMetadata'},
        'stream_declarations': {'key': 'properties.streamDeclarations', 'type': '{StreamDeclaration}'},
        'data_sources': {'key': 'properties.dataSources', 'type': 'DataCollectionRuleDataSources'},
        'destinations': {'key': 'properties.destinations', 'type': 'DataCollectionRuleDestinations'},
        'data_flows': {'key': 'properties.dataFlows', 'type': '[DataFlow]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        kind: Optional[Union[str, "_models.KnownDataCollectionRuleResourceKind"]] = None,
        description: Optional[str] = None,
        data_collection_endpoint_id: Optional[str] = None,
        stream_declarations: Optional[Dict[str, "_models.StreamDeclaration"]] = None,
        data_sources: Optional["_models.DataCollectionRuleDataSources"] = None,
        destinations: Optional["_models.DataCollectionRuleDestinations"] = None,
        data_flows: Optional[List["_models.DataFlow"]] = None,
        **kwargs
    ):
        """
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword kind: The kind of the resource. Known values are: "Linux", "Windows".
        :paramtype kind: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionRuleResourceKind
        :keyword description: Description of the data collection rule.
        :paramtype description: str
        :keyword data_collection_endpoint_id: The resource ID of the data collection endpoint that this
         rule can be used with.
        :paramtype data_collection_endpoint_id: str
        :keyword stream_declarations: Declaration of custom streams used in this rule.
        :paramtype stream_declarations: dict[str,
         ~$(python-base-namespace).v2022_02_01_preview.models.StreamDeclaration]
        :keyword data_sources: The specification of data sources.
         This property is optional and can be omitted if the rule is meant to be used via direct calls
         to the provisioned endpoint.
        :paramtype data_sources:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDataSources
        :keyword destinations: The specification of destinations.
        :paramtype destinations:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDestinations
        :keyword data_flows: The specification of data flows.
        :paramtype data_flows: list[~$(python-base-namespace).v2022_02_01_preview.models.DataFlow]
        """
        super(DataCollectionRuleResource, self).__init__(**kwargs)
        self.location = location
        self.tags = tags
        self.kind = kind
        self.id = None
        self.name = None
        self.type = None
        self.etag = None
        self.system_data = None
        self.description = description
        self.immutable_id = None
        self.data_collection_endpoint_id = data_collection_endpoint_id
        self.metadata = None
        self.stream_declarations = stream_declarations
        self.data_sources = data_sources
        self.destinations = destinations
        self.data_flows = data_flows
        self.provisioning_state = None


class DataCollectionRuleResourceListResult(msrest.serialization.Model):
    """A pageable list of resources.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. A list of resources.
    :vartype value:
     list[~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleResource]
    :ivar next_link: The URL to use for getting the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DataCollectionRuleResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["_models.DataCollectionRuleResource"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: Required. A list of resources.
        :paramtype value:
         list[~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleResource]
        :keyword next_link: The URL to use for getting the next set of results.
        :paramtype next_link: str
        """
        super(DataCollectionRuleResourceListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DataCollectionRuleResourceProperties(DataCollectionRule):
    """Resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the data collection rule.
    :vartype description: str
    :ivar immutable_id: The immutable ID of this data collection rule. This property is READ-ONLY.
    :vartype immutable_id: str
    :ivar data_collection_endpoint_id: The resource ID of the data collection endpoint that this
     rule can be used with.
    :vartype data_collection_endpoint_id: str
    :ivar metadata: Metadata about the resource.
    :vartype metadata:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleMetadata
    :ivar stream_declarations: Declaration of custom streams used in this rule.
    :vartype stream_declarations: dict[str,
     ~$(python-base-namespace).v2022_02_01_preview.models.StreamDeclaration]
    :ivar data_sources: The specification of data sources.
     This property is optional and can be omitted if the rule is meant to be used via direct calls
     to the provisioned endpoint.
    :vartype data_sources:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDataSources
    :ivar destinations: The specification of destinations.
    :vartype destinations:
     ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDestinations
    :ivar data_flows: The specification of data flows.
    :vartype data_flows: list[~$(python-base-namespace).v2022_02_01_preview.models.DataFlow]
    :ivar provisioning_state: The resource provisioning state. Known values are: "Creating",
     "Updating", "Deleting", "Succeeded", "Failed".
    :vartype provisioning_state: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataCollectionRuleProvisioningState
    """

    _validation = {
        'immutable_id': {'readonly': True},
        'metadata': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'immutable_id': {'key': 'immutableId', 'type': 'str'},
        'data_collection_endpoint_id': {'key': 'dataCollectionEndpointId', 'type': 'str'},
        'metadata': {'key': 'metadata', 'type': 'DataCollectionRuleMetadata'},
        'stream_declarations': {'key': 'streamDeclarations', 'type': '{StreamDeclaration}'},
        'data_sources': {'key': 'dataSources', 'type': 'DataCollectionRuleDataSources'},
        'destinations': {'key': 'destinations', 'type': 'DataCollectionRuleDestinations'},
        'data_flows': {'key': 'dataFlows', 'type': '[DataFlow]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        data_collection_endpoint_id: Optional[str] = None,
        stream_declarations: Optional[Dict[str, "_models.StreamDeclaration"]] = None,
        data_sources: Optional["_models.DataCollectionRuleDataSources"] = None,
        destinations: Optional["_models.DataCollectionRuleDestinations"] = None,
        data_flows: Optional[List["_models.DataFlow"]] = None,
        **kwargs
    ):
        """
        :keyword description: Description of the data collection rule.
        :paramtype description: str
        :keyword data_collection_endpoint_id: The resource ID of the data collection endpoint that this
         rule can be used with.
        :paramtype data_collection_endpoint_id: str
        :keyword stream_declarations: Declaration of custom streams used in this rule.
        :paramtype stream_declarations: dict[str,
         ~$(python-base-namespace).v2022_02_01_preview.models.StreamDeclaration]
        :keyword data_sources: The specification of data sources.
         This property is optional and can be omitted if the rule is meant to be used via direct calls
         to the provisioned endpoint.
        :paramtype data_sources:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDataSources
        :keyword destinations: The specification of destinations.
        :paramtype destinations:
         ~$(python-base-namespace).v2022_02_01_preview.models.DataCollectionRuleDestinations
        :keyword data_flows: The specification of data flows.
        :paramtype data_flows: list[~$(python-base-namespace).v2022_02_01_preview.models.DataFlow]
        """
        super(DataCollectionRuleResourceProperties, self).__init__(description=description, data_collection_endpoint_id=data_collection_endpoint_id, stream_declarations=stream_declarations, data_sources=data_sources, destinations=destinations, data_flows=data_flows, **kwargs)


class DataCollectionRuleResourceSystemData(SystemData):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(DataCollectionRuleResourceSystemData, self).__init__(created_by=created_by, created_by_type=created_by_type, created_at=created_at, last_modified_by=last_modified_by, last_modified_by_type=last_modified_by_type, last_modified_at=last_modified_at, **kwargs)


class DataFlow(msrest.serialization.Model):
    """Definition of which streams are sent to which destinations.

    :ivar streams: List of streams for this data flow.
    :vartype streams: list[str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataFlowStreams]
    :ivar destinations: List of destinations for this data flow.
    :vartype destinations: list[str]
    :ivar transform_kql: The KQL query to transform stream data.
    :vartype transform_kql: str
    :ivar output_stream: The output stream of the transform. Only required if the transform changes
     data to a different stream.
    :vartype output_stream: str
    """

    _attribute_map = {
        'streams': {'key': 'streams', 'type': '[str]'},
        'destinations': {'key': 'destinations', 'type': '[str]'},
        'transform_kql': {'key': 'transformKql', 'type': 'str'},
        'output_stream': {'key': 'outputStream', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        streams: Optional[List[Union[str, "_models.KnownDataFlowStreams"]]] = None,
        destinations: Optional[List[str]] = None,
        transform_kql: Optional[str] = None,
        output_stream: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword streams: List of streams for this data flow.
        :paramtype streams: list[str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownDataFlowStreams]
        :keyword destinations: List of destinations for this data flow.
        :paramtype destinations: list[str]
        :keyword transform_kql: The KQL query to transform stream data.
        :paramtype transform_kql: str
        :keyword output_stream: The output stream of the transform. Only required if the transform
         changes data to a different stream.
        :paramtype output_stream: str
        """
        super(DataFlow, self).__init__(**kwargs)
        self.streams = streams
        self.destinations = destinations
        self.transform_kql = transform_kql
        self.output_stream = output_stream


class DestinationsSpecAzureMonitorMetrics(AzureMonitorMetricsDestination):
    """Azure Monitor Metrics destination.

    :ivar name: A friendly name for the destination.
     This name should be unique across all destinations (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: A friendly name for the destination.
         This name should be unique across all destinations (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(DestinationsSpecAzureMonitorMetrics, self).__init__(name=name, **kwargs)


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~$(python-base-namespace).v2022_02_01_preview.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~$(python-base-namespace).v2022_02_01_preview.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponseCommonV2(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~$(python-base-namespace).v2022_02_01_preview.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
        **kwargs
    ):
        """
        :keyword error: The error object.
        :paramtype error: ~$(python-base-namespace).v2022_02_01_preview.models.ErrorDetail
        """
        super(ErrorResponseCommonV2, self).__init__(**kwargs)
        self.error = error


class ExtensionDataSource(msrest.serialization.Model):
    """Definition of which data will be collected from a separate VM extension that integrates with the Azure Monitor Agent.
Collected from either Windows and Linux machines, depending on which extension is defined.

    All required parameters must be populated in order to send to Azure.

    :ivar streams: List of streams that this data source will be sent to.
     A stream indicates what schema will be used for this data and usually what table in Log
     Analytics the data will be sent to.
    :vartype streams: list[str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownExtensionDataSourceStreams]
    :ivar extension_name: Required. The name of the VM extension.
    :vartype extension_name: str
    :ivar extension_settings: The extension settings. The format is specific for particular
     extension.
    :vartype extension_settings: any
    :ivar input_data_sources: The list of data sources this extension needs data from.
    :vartype input_data_sources: list[str]
    :ivar name: A friendly name for the data source.
     This name should be unique across all data sources (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _validation = {
        'extension_name': {'required': True},
    }

    _attribute_map = {
        'streams': {'key': 'streams', 'type': '[str]'},
        'extension_name': {'key': 'extensionName', 'type': 'str'},
        'extension_settings': {'key': 'extensionSettings', 'type': 'object'},
        'input_data_sources': {'key': 'inputDataSources', 'type': '[str]'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        extension_name: str,
        streams: Optional[List[Union[str, "_models.KnownExtensionDataSourceStreams"]]] = None,
        extension_settings: Optional[Any] = None,
        input_data_sources: Optional[List[str]] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword streams: List of streams that this data source will be sent to.
         A stream indicates what schema will be used for this data and usually what table in Log
         Analytics the data will be sent to.
        :paramtype streams: list[str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownExtensionDataSourceStreams]
        :keyword extension_name: Required. The name of the VM extension.
        :paramtype extension_name: str
        :keyword extension_settings: The extension settings. The format is specific for particular
         extension.
        :paramtype extension_settings: any
        :keyword input_data_sources: The list of data sources this extension needs data from.
        :paramtype input_data_sources: list[str]
        :keyword name: A friendly name for the data source.
         This name should be unique across all data sources (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(ExtensionDataSource, self).__init__(**kwargs)
        self.streams = streams
        self.extension_name = extension_name
        self.extension_settings = extension_settings
        self.input_data_sources = input_data_sources
        self.name = name


class IisLogsDataSource(msrest.serialization.Model):
    """Enables IIS logs to be collected by this data collection rule.

    All required parameters must be populated in order to send to Azure.

    :ivar streams: Required. IIS streams.
    :vartype streams: list[str]
    :ivar log_directories: Absolute paths file location.
    :vartype log_directories: list[str]
    :ivar name: A friendly name for the data source.
     This name should be unique across all data sources (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _validation = {
        'streams': {'required': True},
    }

    _attribute_map = {
        'streams': {'key': 'streams', 'type': '[str]'},
        'log_directories': {'key': 'logDirectories', 'type': '[str]'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        streams: List[str],
        log_directories: Optional[List[str]] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword streams: Required. IIS streams.
        :paramtype streams: list[str]
        :keyword log_directories: Absolute paths file location.
        :paramtype log_directories: list[str]
        :keyword name: A friendly name for the data source.
         This name should be unique across all data sources (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(IisLogsDataSource, self).__init__(**kwargs)
        self.streams = streams
        self.log_directories = log_directories
        self.name = name


class LogAnalyticsDestination(msrest.serialization.Model):
    """Log Analytics destination.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar workspace_resource_id: The resource ID of the Log Analytics workspace.
    :vartype workspace_resource_id: str
    :ivar workspace_id: The Customer ID of the Log Analytics workspace.
    :vartype workspace_id: str
    :ivar name: A friendly name for the destination.
     This name should be unique across all destinations (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _validation = {
        'workspace_id': {'readonly': True},
    }

    _attribute_map = {
        'workspace_resource_id': {'key': 'workspaceResourceId', 'type': 'str'},
        'workspace_id': {'key': 'workspaceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        workspace_resource_id: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword workspace_resource_id: The resource ID of the Log Analytics workspace.
        :paramtype workspace_resource_id: str
        :keyword name: A friendly name for the destination.
         This name should be unique across all destinations (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(LogAnalyticsDestination, self).__init__(**kwargs)
        self.workspace_resource_id = workspace_resource_id
        self.workspace_id = None
        self.name = name


class LogFilesDataSource(msrest.serialization.Model):
    """Definition of which custom log files will be collected by this data collection rule.

    All required parameters must be populated in order to send to Azure.

    :ivar streams: Required. List of streams that this data source will be sent to.
     A stream indicates what schema will be used for this data source.
    :vartype streams: list[str]
    :ivar file_patterns: Required. File Patterns where the log files are located.
    :vartype file_patterns: list[str]
    :ivar format: Required. The data format of the log files. Known values are: "text".
    :vartype format: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownLogFilesDataSourceFormat
    :ivar settings: The log files specific settings.
    :vartype settings:
     ~$(python-base-namespace).v2022_02_01_preview.models.LogFilesDataSourceSettings
    :ivar name: A friendly name for the data source.
     This name should be unique across all data sources (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _validation = {
        'streams': {'required': True},
        'file_patterns': {'required': True},
        'format': {'required': True},
    }

    _attribute_map = {
        'streams': {'key': 'streams', 'type': '[str]'},
        'file_patterns': {'key': 'filePatterns', 'type': '[str]'},
        'format': {'key': 'format', 'type': 'str'},
        'settings': {'key': 'settings', 'type': 'LogFilesDataSourceSettings'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        streams: List[str],
        file_patterns: List[str],
        format: Union[str, "_models.KnownLogFilesDataSourceFormat"],
        settings: Optional["_models.LogFilesDataSourceSettings"] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword streams: Required. List of streams that this data source will be sent to.
         A stream indicates what schema will be used for this data source.
        :paramtype streams: list[str]
        :keyword file_patterns: Required. File Patterns where the log files are located.
        :paramtype file_patterns: list[str]
        :keyword format: Required. The data format of the log files. Known values are: "text".
        :paramtype format: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownLogFilesDataSourceFormat
        :keyword settings: The log files specific settings.
        :paramtype settings:
         ~$(python-base-namespace).v2022_02_01_preview.models.LogFilesDataSourceSettings
        :keyword name: A friendly name for the data source.
         This name should be unique across all data sources (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(LogFilesDataSource, self).__init__(**kwargs)
        self.streams = streams
        self.file_patterns = file_patterns
        self.format = format
        self.settings = settings
        self.name = name


class LogFileSettings(msrest.serialization.Model):
    """Settings for different log file formats.

    :ivar text: Text settings.
    :vartype text: ~$(python-base-namespace).v2022_02_01_preview.models.LogFileSettingsText
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'LogFileSettingsText'},
    }

    def __init__(
        self,
        *,
        text: Optional["_models.LogFileSettingsText"] = None,
        **kwargs
    ):
        """
        :keyword text: Text settings.
        :paramtype text: ~$(python-base-namespace).v2022_02_01_preview.models.LogFileSettingsText
        """
        super(LogFileSettings, self).__init__(**kwargs)
        self.text = text


class LogFilesDataSourceSettings(LogFileSettings):
    """The log files specific settings.

    :ivar text: Text settings.
    :vartype text: ~$(python-base-namespace).v2022_02_01_preview.models.LogFileSettingsText
    """

    _attribute_map = {
        'text': {'key': 'text', 'type': 'LogFileSettingsText'},
    }

    def __init__(
        self,
        *,
        text: Optional["_models.LogFileSettingsText"] = None,
        **kwargs
    ):
        """
        :keyword text: Text settings.
        :paramtype text: ~$(python-base-namespace).v2022_02_01_preview.models.LogFileSettingsText
        """
        super(LogFilesDataSourceSettings, self).__init__(text=text, **kwargs)


class LogFileTextSettings(msrest.serialization.Model):
    """Settings for text log files.

    All required parameters must be populated in order to send to Azure.

    :ivar record_start_timestamp_format: Required. One of the supported timestamp formats. Known
     values are: "ISO 8601", "YYYY-MM-DD HH:MM:SS", "M/D/YYYY HH:MM:SS AM/PM", "Mon DD, YYYY
     HH:MM:SS", "yyMMdd HH:mm:ss", "ddMMyy HH:mm:ss", "MMM d hh:mm:ss", "dd/MMM/yyyy:HH:mm:ss zzz",
     "yyyy-MM-ddTHH:mm:ssK".
    :vartype record_start_timestamp_format: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownLogFileTextSettingsRecordStartTimestampFormat
    """

    _validation = {
        'record_start_timestamp_format': {'required': True},
    }

    _attribute_map = {
        'record_start_timestamp_format': {'key': 'recordStartTimestampFormat', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        record_start_timestamp_format: Union[str, "_models.KnownLogFileTextSettingsRecordStartTimestampFormat"],
        **kwargs
    ):
        """
        :keyword record_start_timestamp_format: Required. One of the supported timestamp formats. Known
         values are: "ISO 8601", "YYYY-MM-DD HH:MM:SS", "M/D/YYYY HH:MM:SS AM/PM", "Mon DD, YYYY
         HH:MM:SS", "yyMMdd HH:mm:ss", "ddMMyy HH:mm:ss", "MMM d hh:mm:ss", "dd/MMM/yyyy:HH:mm:ss zzz",
         "yyyy-MM-ddTHH:mm:ssK".
        :paramtype record_start_timestamp_format: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownLogFileTextSettingsRecordStartTimestampFormat
        """
        super(LogFileTextSettings, self).__init__(**kwargs)
        self.record_start_timestamp_format = record_start_timestamp_format


class LogFileSettingsText(LogFileTextSettings):
    """Text settings.

    All required parameters must be populated in order to send to Azure.

    :ivar record_start_timestamp_format: Required. One of the supported timestamp formats. Known
     values are: "ISO 8601", "YYYY-MM-DD HH:MM:SS", "M/D/YYYY HH:MM:SS AM/PM", "Mon DD, YYYY
     HH:MM:SS", "yyMMdd HH:mm:ss", "ddMMyy HH:mm:ss", "MMM d hh:mm:ss", "dd/MMM/yyyy:HH:mm:ss zzz",
     "yyyy-MM-ddTHH:mm:ssK".
    :vartype record_start_timestamp_format: str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownLogFileTextSettingsRecordStartTimestampFormat
    """

    _validation = {
        'record_start_timestamp_format': {'required': True},
    }

    _attribute_map = {
        'record_start_timestamp_format': {'key': 'recordStartTimestampFormat', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        record_start_timestamp_format: Union[str, "_models.KnownLogFileTextSettingsRecordStartTimestampFormat"],
        **kwargs
    ):
        """
        :keyword record_start_timestamp_format: Required. One of the supported timestamp formats. Known
         values are: "ISO 8601", "YYYY-MM-DD HH:MM:SS", "M/D/YYYY HH:MM:SS AM/PM", "Mon DD, YYYY
         HH:MM:SS", "yyMMdd HH:mm:ss", "ddMMyy HH:mm:ss", "MMM d hh:mm:ss", "dd/MMM/yyyy:HH:mm:ss zzz",
         "yyyy-MM-ddTHH:mm:ssK".
        :paramtype record_start_timestamp_format: str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownLogFileTextSettingsRecordStartTimestampFormat
        """
        super(LogFileSettingsText, self).__init__(record_start_timestamp_format=record_start_timestamp_format, **kwargs)


class PerfCounterDataSource(msrest.serialization.Model):
    """Definition of which performance counters will be collected and how they will be collected by this data collection rule.
Collected from both Windows and Linux machines where the counter is present.

    :ivar streams: List of streams that this data source will be sent to.
     A stream indicates what schema will be used for this data and usually what table in Log
     Analytics the data will be sent to.
    :vartype streams: list[str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownPerfCounterDataSourceStreams]
    :ivar sampling_frequency_in_seconds: The number of seconds between consecutive counter
     measurements (samples).
    :vartype sampling_frequency_in_seconds: int
    :ivar counter_specifiers: A list of specifier names of the performance counters you want to
     collect.
     Use a wildcard (*) to collect a counter for all instances.
     To get a list of performance counters on Windows, run the command 'typeperf'.
    :vartype counter_specifiers: list[str]
    :ivar name: A friendly name for the data source.
     This name should be unique across all data sources (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _attribute_map = {
        'streams': {'key': 'streams', 'type': '[str]'},
        'sampling_frequency_in_seconds': {'key': 'samplingFrequencyInSeconds', 'type': 'int'},
        'counter_specifiers': {'key': 'counterSpecifiers', 'type': '[str]'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        streams: Optional[List[Union[str, "_models.KnownPerfCounterDataSourceStreams"]]] = None,
        sampling_frequency_in_seconds: Optional[int] = None,
        counter_specifiers: Optional[List[str]] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword streams: List of streams that this data source will be sent to.
         A stream indicates what schema will be used for this data and usually what table in Log
         Analytics the data will be sent to.
        :paramtype streams: list[str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownPerfCounterDataSourceStreams]
        :keyword sampling_frequency_in_seconds: The number of seconds between consecutive counter
         measurements (samples).
        :paramtype sampling_frequency_in_seconds: int
        :keyword counter_specifiers: A list of specifier names of the performance counters you want to
         collect.
         Use a wildcard (*) to collect a counter for all instances.
         To get a list of performance counters on Windows, run the command 'typeperf'.
        :paramtype counter_specifiers: list[str]
        :keyword name: A friendly name for the data source.
         This name should be unique across all data sources (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(PerfCounterDataSource, self).__init__(**kwargs)
        self.streams = streams
        self.sampling_frequency_in_seconds = sampling_frequency_in_seconds
        self.counter_specifiers = counter_specifiers
        self.name = name


class ResourceForUpdate(msrest.serialization.Model):
    """Definition of ARM tracked top level resource properties for update operation.

    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(ResourceForUpdate, self).__init__(**kwargs)
        self.tags = tags


class StreamDeclaration(msrest.serialization.Model):
    """Declaration of a custom stream.

    :ivar columns: List of columns used by data in this stream.
    :vartype columns: list[~$(python-base-namespace).v2022_02_01_preview.models.ColumnDefinition]
    """

    _attribute_map = {
        'columns': {'key': 'columns', 'type': '[ColumnDefinition]'},
    }

    def __init__(
        self,
        *,
        columns: Optional[List["_models.ColumnDefinition"]] = None,
        **kwargs
    ):
        """
        :keyword columns: List of columns used by data in this stream.
        :paramtype columns: list[~$(python-base-namespace).v2022_02_01_preview.models.ColumnDefinition]
        """
        super(StreamDeclaration, self).__init__(**kwargs)
        self.columns = columns


class SyslogDataSource(msrest.serialization.Model):
    """Definition of which syslog data will be collected and how it will be collected.
Only collected from Linux machines.

    :ivar streams: List of streams that this data source will be sent to.
     A stream indicates what schema will be used for this data and usually what table in Log
     Analytics the data will be sent to.
    :vartype streams: list[str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownSyslogDataSourceStreams]
    :ivar facility_names: The list of facility names.
    :vartype facility_names: list[str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownSyslogDataSourceFacilityNames]
    :ivar log_levels: The log levels to collect.
    :vartype log_levels: list[str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownSyslogDataSourceLogLevels]
    :ivar name: A friendly name for the data source.
     This name should be unique across all data sources (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _attribute_map = {
        'streams': {'key': 'streams', 'type': '[str]'},
        'facility_names': {'key': 'facilityNames', 'type': '[str]'},
        'log_levels': {'key': 'logLevels', 'type': '[str]'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        streams: Optional[List[Union[str, "_models.KnownSyslogDataSourceStreams"]]] = None,
        facility_names: Optional[List[Union[str, "_models.KnownSyslogDataSourceFacilityNames"]]] = None,
        log_levels: Optional[List[Union[str, "_models.KnownSyslogDataSourceLogLevels"]]] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword streams: List of streams that this data source will be sent to.
         A stream indicates what schema will be used for this data and usually what table in Log
         Analytics the data will be sent to.
        :paramtype streams: list[str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownSyslogDataSourceStreams]
        :keyword facility_names: The list of facility names.
        :paramtype facility_names: list[str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownSyslogDataSourceFacilityNames]
        :keyword log_levels: The log levels to collect.
        :paramtype log_levels: list[str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownSyslogDataSourceLogLevels]
        :keyword name: A friendly name for the data source.
         This name should be unique across all data sources (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(SyslogDataSource, self).__init__(**kwargs)
        self.streams = streams
        self.facility_names = facility_names
        self.log_levels = log_levels
        self.name = name


class WindowsEventLogDataSource(msrest.serialization.Model):
    """Definition of which Windows Event Log events will be collected and how they will be collected.
Only collected from Windows machines.

    :ivar streams: List of streams that this data source will be sent to.
     A stream indicates what schema will be used for this data and usually what table in Log
     Analytics the data will be sent to.
    :vartype streams: list[str or
     ~$(python-base-namespace).v2022_02_01_preview.models.KnownWindowsEventLogDataSourceStreams]
    :ivar x_path_queries: A list of Windows Event Log queries in XPATH format.
    :vartype x_path_queries: list[str]
    :ivar name: A friendly name for the data source.
     This name should be unique across all data sources (regardless of type) within the data
     collection rule.
    :vartype name: str
    """

    _attribute_map = {
        'streams': {'key': 'streams', 'type': '[str]'},
        'x_path_queries': {'key': 'xPathQueries', 'type': '[str]'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        streams: Optional[List[Union[str, "_models.KnownWindowsEventLogDataSourceStreams"]]] = None,
        x_path_queries: Optional[List[str]] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword streams: List of streams that this data source will be sent to.
         A stream indicates what schema will be used for this data and usually what table in Log
         Analytics the data will be sent to.
        :paramtype streams: list[str or
         ~$(python-base-namespace).v2022_02_01_preview.models.KnownWindowsEventLogDataSourceStreams]
        :keyword x_path_queries: A list of Windows Event Log queries in XPATH format.
        :paramtype x_path_queries: list[str]
        :keyword name: A friendly name for the data source.
         This name should be unique across all data sources (regardless of type) within the data
         collection rule.
        :paramtype name: str
        """
        super(WindowsEventLogDataSource, self).__init__(**kwargs)
        self.streams = streams
        self.x_path_queries = x_path_queries
        self.name = name
