# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import AutoscaleErrorResponse
from ._models_py3 import AutoscaleErrorResponseError
from ._models_py3 import AutoscaleNotification
from ._models_py3 import AutoscaleProfile
from ._models_py3 import AutoscaleSettingResource
from ._models_py3 import AutoscaleSettingResourceCollection
from ._models_py3 import AutoscaleSettingResourcePatch
from ._models_py3 import DiagnosticSettingsCategoryResource
from ._models_py3 import DiagnosticSettingsCategoryResourceCollection
from ._models_py3 import DiagnosticSettingsResource
from ._models_py3 import DiagnosticSettingsResourceCollection
from ._models_py3 import EmailNotification
from ._models_py3 import ErrorResponse
from ._models_py3 import LogSettings
from ._models_py3 import ManagementGroupDiagnosticSettingsResource
from ._models_py3 import ManagementGroupDiagnosticSettingsResourceCollection
from ._models_py3 import ManagementGroupLogSettings
from ._models_py3 import MetricSettings
from ._models_py3 import MetricTrigger
from ._models_py3 import PredictiveAutoscalePolicy
from ._models_py3 import PredictiveResponse
from ._models_py3 import PredictiveValue
from ._models_py3 import Recurrence
from ._models_py3 import RecurrentSchedule
from ._models_py3 import Resource
from ._models_py3 import RetentionPolicy
from ._models_py3 import ScaleAction
from ._models_py3 import ScaleCapacity
from ._models_py3 import ScaleRule
from ._models_py3 import ScaleRuleMetricDimension
from ._models_py3 import SubscriptionDiagnosticSettingsResource
from ._models_py3 import SubscriptionDiagnosticSettingsResourceCollection
from ._models_py3 import SubscriptionLogSettings
from ._models_py3 import SystemData
from ._models_py3 import TimeWindow
from ._models_py3 import WebhookNotification


from ._monitor_management_client_enums import (
    CategoryType,
    ComparisonOperationType,
    CreatedByType,
    MetricStatisticType,
    PredictiveAutoscalePolicyScaleMode,
    RecurrenceFrequency,
    ScaleDirection,
    ScaleRuleMetricDimensionOperationType,
    ScaleType,
    TimeAggregationType,
)
from ._patch import __all__ as _patch_all
from ._patch import *  # type: ignore # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk
__all__ = [
    'AutoscaleErrorResponse',
    'AutoscaleErrorResponseError',
    'AutoscaleNotification',
    'AutoscaleProfile',
    'AutoscaleSettingResource',
    'AutoscaleSettingResourceCollection',
    'AutoscaleSettingResourcePatch',
    'DiagnosticSettingsCategoryResource',
    'DiagnosticSettingsCategoryResourceCollection',
    'DiagnosticSettingsResource',
    'DiagnosticSettingsResourceCollection',
    'EmailNotification',
    'ErrorResponse',
    'LogSettings',
    'ManagementGroupDiagnosticSettingsResource',
    'ManagementGroupDiagnosticSettingsResourceCollection',
    'ManagementGroupLogSettings',
    'MetricSettings',
    'MetricTrigger',
    'PredictiveAutoscalePolicy',
    'PredictiveResponse',
    'PredictiveValue',
    'Recurrence',
    'RecurrentSchedule',
    'Resource',
    'RetentionPolicy',
    'ScaleAction',
    'ScaleCapacity',
    'ScaleRule',
    'ScaleRuleMetricDimension',
    'SubscriptionDiagnosticSettingsResource',
    'SubscriptionDiagnosticSettingsResourceCollection',
    'SubscriptionLogSettings',
    'SystemData',
    'TimeWindow',
    'WebhookNotification',
    'CategoryType',
    'ComparisonOperationType',
    'CreatedByType',
    'MetricStatisticType',
    'PredictiveAutoscalePolicyScaleMode',
    'RecurrenceFrequency',
    'ScaleDirection',
    'ScaleRuleMetricDimensionOperationType',
    'ScaleType',
    'TimeAggregationType',
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()