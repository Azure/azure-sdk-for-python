# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import AlertRuleResource
from ._models_py3 import AlertRuleResourceCollection
from ._models_py3 import AlertRuleResourcePatch
from ._models_py3 import AutoscaleNotification
from ._models_py3 import AutoscaleProfile
from ._models_py3 import AutoscaleSettingResource
from ._models_py3 import AutoscaleSettingResourceCollection
from ._models_py3 import AutoscaleSettingResourcePatch
from ._models_py3 import EmailNotification
from ._models_py3 import ErrorResponse
from ._models_py3 import EventCategoryCollection
from ._models_py3 import EventData
from ._models_py3 import EventDataCollection
from ._models_py3 import HttpRequestInfo
from ._models_py3 import LocalizableString
from ._models_py3 import LocationThresholdRuleCondition
from ._models_py3 import ManagementEventAggregationCondition
from ._models_py3 import ManagementEventRuleCondition
from ._models_py3 import MetricTrigger
from ._models_py3 import Operation
from ._models_py3 import OperationDisplay
from ._models_py3 import OperationListResult
from ._models_py3 import Recurrence
from ._models_py3 import RecurrentSchedule
from ._models_py3 import Resource
from ._models_py3 import RuleAction
from ._models_py3 import RuleCondition
from ._models_py3 import RuleDataSource
from ._models_py3 import RuleEmailAction
from ._models_py3 import RuleManagementEventClaimsDataSource
from ._models_py3 import RuleManagementEventDataSource
from ._models_py3 import RuleMetricDataSource
from ._models_py3 import RuleWebhookAction
from ._models_py3 import ScaleAction
from ._models_py3 import ScaleCapacity
from ._models_py3 import ScaleRule
from ._models_py3 import ScaleRuleMetricDimension
from ._models_py3 import SenderAuthorization
from ._models_py3 import ThresholdRuleCondition
from ._models_py3 import TimeWindow
from ._models_py3 import WebhookNotification


from ._monitor_management_client_enums import (
    ComparisonOperationType,
    ConditionOperator,
    EventLevel,
    MetricStatisticType,
    RecurrenceFrequency,
    ScaleDirection,
    ScaleRuleMetricDimensionOperationType,
    ScaleType,
    TimeAggregationOperator,
    TimeAggregationType,
)
from ._patch import __all__ as _patch_all
from ._patch import *  # type: ignore # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk
__all__ = [
    'AlertRuleResource',
    'AlertRuleResourceCollection',
    'AlertRuleResourcePatch',
    'AutoscaleNotification',
    'AutoscaleProfile',
    'AutoscaleSettingResource',
    'AutoscaleSettingResourceCollection',
    'AutoscaleSettingResourcePatch',
    'EmailNotification',
    'ErrorResponse',
    'EventCategoryCollection',
    'EventData',
    'EventDataCollection',
    'HttpRequestInfo',
    'LocalizableString',
    'LocationThresholdRuleCondition',
    'ManagementEventAggregationCondition',
    'ManagementEventRuleCondition',
    'MetricTrigger',
    'Operation',
    'OperationDisplay',
    'OperationListResult',
    'Recurrence',
    'RecurrentSchedule',
    'Resource',
    'RuleAction',
    'RuleCondition',
    'RuleDataSource',
    'RuleEmailAction',
    'RuleManagementEventClaimsDataSource',
    'RuleManagementEventDataSource',
    'RuleMetricDataSource',
    'RuleWebhookAction',
    'ScaleAction',
    'ScaleCapacity',
    'ScaleRule',
    'ScaleRuleMetricDimension',
    'SenderAuthorization',
    'ThresholdRuleCondition',
    'TimeWindow',
    'WebhookNotification',
    'ComparisonOperationType',
    'ConditionOperator',
    'EventLevel',
    'MetricStatisticType',
    'RecurrenceFrequency',
    'ScaleDirection',
    'ScaleRuleMetricDimensionOperationType',
    'ScaleType',
    'TimeAggregationOperator',
    'TimeAggregationType',
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()