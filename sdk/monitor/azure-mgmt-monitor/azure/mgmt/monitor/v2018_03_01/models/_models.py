# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class ActionGroupPatchBody(Model):
    """An action group object for the body of patch operations.

    :param tags: Resource tags
    :type tags: dict[str, str]
    :param enabled: Indicates whether this action group is enabled. If an
     action group is not enabled, then none of its actions will be activated.
     Default value: True .
    :type enabled: bool
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(ActionGroupPatchBody, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.enabled = kwargs.get('enabled', True)


class Resource(Model):
    """An azure resource object.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param location: Required. Resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)


class ActionGroupResource(Resource):
    """An action group resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param location: Required. Resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param group_short_name: Required. The short name of the action group.
     This will be used in SMS messages.
    :type group_short_name: str
    :param enabled: Required. Indicates whether this action group is enabled.
     If an action group is not enabled, then none of its receivers will receive
     communications. Default value: True .
    :type enabled: bool
    :param email_receivers: The list of email receivers that are part of this
     action group.
    :type email_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.EmailReceiver]
    :param sms_receivers: The list of SMS receivers that are part of this
     action group.
    :type sms_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.SmsReceiver]
    :param webhook_receivers: The list of webhook receivers that are part of
     this action group.
    :type webhook_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.WebhookReceiver]
    :param itsm_receivers: The list of ITSM receivers that are part of this
     action group.
    :type itsm_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.ItsmReceiver]
    :param azure_app_push_receivers: The list of AzureAppPush receivers that
     are part of this action group.
    :type azure_app_push_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.AzureAppPushReceiver]
    :param automation_runbook_receivers: The list of AutomationRunbook
     receivers that are part of this action group.
    :type automation_runbook_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.AutomationRunbookReceiver]
    :param voice_receivers: The list of voice receivers that are part of this
     action group.
    :type voice_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.VoiceReceiver]
    :param logic_app_receivers: The list of logic app receivers that are part
     of this action group.
    :type logic_app_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.LogicAppReceiver]
    :param azure_function_receivers: The list of azure function receivers that
     are part of this action group.
    :type azure_function_receivers:
     list[~azure.mgmt.monitor.v2018_03_01.models.AzureFunctionReceiver]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'group_short_name': {'required': True, 'max_length': 12},
        'enabled': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'group_short_name': {'key': 'properties.groupShortName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'email_receivers': {'key': 'properties.emailReceivers', 'type': '[EmailReceiver]'},
        'sms_receivers': {'key': 'properties.smsReceivers', 'type': '[SmsReceiver]'},
        'webhook_receivers': {'key': 'properties.webhookReceivers', 'type': '[WebhookReceiver]'},
        'itsm_receivers': {'key': 'properties.itsmReceivers', 'type': '[ItsmReceiver]'},
        'azure_app_push_receivers': {'key': 'properties.azureAppPushReceivers', 'type': '[AzureAppPushReceiver]'},
        'automation_runbook_receivers': {'key': 'properties.automationRunbookReceivers', 'type': '[AutomationRunbookReceiver]'},
        'voice_receivers': {'key': 'properties.voiceReceivers', 'type': '[VoiceReceiver]'},
        'logic_app_receivers': {'key': 'properties.logicAppReceivers', 'type': '[LogicAppReceiver]'},
        'azure_function_receivers': {'key': 'properties.azureFunctionReceivers', 'type': '[AzureFunctionReceiver]'},
    }

    def __init__(self, **kwargs):
        super(ActionGroupResource, self).__init__(**kwargs)
        self.group_short_name = kwargs.get('group_short_name', None)
        self.enabled = kwargs.get('enabled', True)
        self.email_receivers = kwargs.get('email_receivers', None)
        self.sms_receivers = kwargs.get('sms_receivers', None)
        self.webhook_receivers = kwargs.get('webhook_receivers', None)
        self.itsm_receivers = kwargs.get('itsm_receivers', None)
        self.azure_app_push_receivers = kwargs.get('azure_app_push_receivers', None)
        self.automation_runbook_receivers = kwargs.get('automation_runbook_receivers', None)
        self.voice_receivers = kwargs.get('voice_receivers', None)
        self.logic_app_receivers = kwargs.get('logic_app_receivers', None)
        self.azure_function_receivers = kwargs.get('azure_function_receivers', None)


class AutomationRunbookReceiver(Model):
    """The Azure Automation Runbook notification receiver.

    All required parameters must be populated in order to send to Azure.

    :param automation_account_id: Required. The Azure automation account Id
     which holds this runbook and authenticate to Azure resource.
    :type automation_account_id: str
    :param runbook_name: Required. The name for this runbook.
    :type runbook_name: str
    :param webhook_resource_id: Required. The resource id for webhook linked
     to this runbook.
    :type webhook_resource_id: str
    :param is_global_runbook: Required. Indicates whether this instance is
     global runbook.
    :type is_global_runbook: bool
    :param name: Indicates name of the webhook.
    :type name: str
    :param service_uri: The URI where webhooks should be sent.
    :type service_uri: str
    """

    _validation = {
        'automation_account_id': {'required': True},
        'runbook_name': {'required': True},
        'webhook_resource_id': {'required': True},
        'is_global_runbook': {'required': True},
    }

    _attribute_map = {
        'automation_account_id': {'key': 'automationAccountId', 'type': 'str'},
        'runbook_name': {'key': 'runbookName', 'type': 'str'},
        'webhook_resource_id': {'key': 'webhookResourceId', 'type': 'str'},
        'is_global_runbook': {'key': 'isGlobalRunbook', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'service_uri': {'key': 'serviceUri', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AutomationRunbookReceiver, self).__init__(**kwargs)
        self.automation_account_id = kwargs.get('automation_account_id', None)
        self.runbook_name = kwargs.get('runbook_name', None)
        self.webhook_resource_id = kwargs.get('webhook_resource_id', None)
        self.is_global_runbook = kwargs.get('is_global_runbook', None)
        self.name = kwargs.get('name', None)
        self.service_uri = kwargs.get('service_uri', None)


class AzureAppPushReceiver(Model):
    """The Azure mobile App push notification receiver.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the Azure mobile app push receiver.
     Names must be unique across all receivers within an action group.
    :type name: str
    :param email_address: Required. The email address registered for the Azure
     mobile app.
    :type email_address: str
    """

    _validation = {
        'name': {'required': True},
        'email_address': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AzureAppPushReceiver, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.email_address = kwargs.get('email_address', None)


class AzureFunctionReceiver(Model):
    """An azure function receiver.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the azure function receiver. Names must
     be unique across all receivers within an action group.
    :type name: str
    :param function_app_resource_id: Required. The azure resource id of the
     function app.
    :type function_app_resource_id: str
    :param function_name: Required. The function name in the function app.
    :type function_name: str
    :param http_trigger_url: Required. The http trigger url where http request
     sent to.
    :type http_trigger_url: str
    """

    _validation = {
        'name': {'required': True},
        'function_app_resource_id': {'required': True},
        'function_name': {'required': True},
        'http_trigger_url': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'function_app_resource_id': {'key': 'functionAppResourceId', 'type': 'str'},
        'function_name': {'key': 'functionName', 'type': 'str'},
        'http_trigger_url': {'key': 'httpTriggerUrl', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AzureFunctionReceiver, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.function_app_resource_id = kwargs.get('function_app_resource_id', None)
        self.function_name = kwargs.get('function_name', None)
        self.http_trigger_url = kwargs.get('http_trigger_url', None)


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class MultiMetricCriteria(Model):
    """The types of conditions for a multi resource alert.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MetricCriteria, DynamicMetricCriteria

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param name: Required. Name of the criteria.
    :type name: str
    :param metric_name: Required. Name of the metric.
    :type metric_name: str
    :param metric_namespace: Namespace of the metric.
    :type metric_namespace: str
    :param time_aggregation: Required. the criteria time aggregation types.
    :type time_aggregation: object
    :param dimensions: List of dimension conditions.
    :type dimensions:
     list[~azure.mgmt.monitor.v2018_03_01.models.MetricDimension]
    :param criterion_type: Required. Constant filled by server.
    :type criterion_type: str
    """

    _validation = {
        'name': {'required': True},
        'metric_name': {'required': True},
        'time_aggregation': {'required': True},
        'criterion_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'metric_name': {'key': 'metricName', 'type': 'str'},
        'metric_namespace': {'key': 'metricNamespace', 'type': 'str'},
        'time_aggregation': {'key': 'timeAggregation', 'type': 'object'},
        'dimensions': {'key': 'dimensions', 'type': '[MetricDimension]'},
        'criterion_type': {'key': 'criterionType', 'type': 'str'},
    }

    _subtype_map = {
        'criterion_type': {'StaticThresholdCriterion': 'MetricCriteria', 'DynamicThresholdCriterion': 'DynamicMetricCriteria'}
    }

    def __init__(self, **kwargs):
        super(MultiMetricCriteria, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.name = kwargs.get('name', None)
        self.metric_name = kwargs.get('metric_name', None)
        self.metric_namespace = kwargs.get('metric_namespace', None)
        self.time_aggregation = kwargs.get('time_aggregation', None)
        self.dimensions = kwargs.get('dimensions', None)
        self.criterion_type = None


class DynamicMetricCriteria(MultiMetricCriteria):
    """Criterion for dynamic threshold.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param name: Required. Name of the criteria.
    :type name: str
    :param metric_name: Required. Name of the metric.
    :type metric_name: str
    :param metric_namespace: Namespace of the metric.
    :type metric_namespace: str
    :param time_aggregation: Required. the criteria time aggregation types.
    :type time_aggregation: object
    :param dimensions: List of dimension conditions.
    :type dimensions:
     list[~azure.mgmt.monitor.v2018_03_01.models.MetricDimension]
    :param criterion_type: Required. Constant filled by server.
    :type criterion_type: str
    :param operator: Required. The operator used to compare the metric value
     against the threshold.
    :type operator: object
    :param alert_sensitivity: Required. The extent of deviation required to
     trigger an alert. This will affect how tight the threshold is to the
     metric series pattern.
    :type alert_sensitivity: object
    :param failing_periods: Required. The minimum number of violations
     required within the selected lookback time window required to raise an
     alert.
    :type failing_periods:
     ~azure.mgmt.monitor.v2018_03_01.models.DynamicThresholdFailingPeriods
    :param ignore_data_before: Use this option to set the date from which to
     start learning the metric historical data and calculate the dynamic
     thresholds (in ISO8601 format)
    :type ignore_data_before: datetime
    """

    _validation = {
        'name': {'required': True},
        'metric_name': {'required': True},
        'time_aggregation': {'required': True},
        'criterion_type': {'required': True},
        'operator': {'required': True},
        'alert_sensitivity': {'required': True},
        'failing_periods': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'metric_name': {'key': 'metricName', 'type': 'str'},
        'metric_namespace': {'key': 'metricNamespace', 'type': 'str'},
        'time_aggregation': {'key': 'timeAggregation', 'type': 'object'},
        'dimensions': {'key': 'dimensions', 'type': '[MetricDimension]'},
        'criterion_type': {'key': 'criterionType', 'type': 'str'},
        'operator': {'key': 'operator', 'type': 'object'},
        'alert_sensitivity': {'key': 'alertSensitivity', 'type': 'object'},
        'failing_periods': {'key': 'failingPeriods', 'type': 'DynamicThresholdFailingPeriods'},
        'ignore_data_before': {'key': 'ignoreDataBefore', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(DynamicMetricCriteria, self).__init__(**kwargs)
        self.operator = kwargs.get('operator', None)
        self.alert_sensitivity = kwargs.get('alert_sensitivity', None)
        self.failing_periods = kwargs.get('failing_periods', None)
        self.ignore_data_before = kwargs.get('ignore_data_before', None)
        self.criterion_type = 'DynamicThresholdCriterion'


class DynamicThresholdFailingPeriods(Model):
    """The minimum number of violations required within the selected lookback time
    window required to raise an alert.

    All required parameters must be populated in order to send to Azure.

    :param number_of_evaluation_periods: Required. The number of aggregated
     lookback points. The lookback time window is calculated based on the
     aggregation granularity (windowSize) and the selected number of aggregated
     points.
    :type number_of_evaluation_periods: float
    :param min_failing_periods_to_alert: Required. The number of violations to
     trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
    :type min_failing_periods_to_alert: float
    """

    _validation = {
        'number_of_evaluation_periods': {'required': True},
        'min_failing_periods_to_alert': {'required': True},
    }

    _attribute_map = {
        'number_of_evaluation_periods': {'key': 'numberOfEvaluationPeriods', 'type': 'float'},
        'min_failing_periods_to_alert': {'key': 'minFailingPeriodsToAlert', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(DynamicThresholdFailingPeriods, self).__init__(**kwargs)
        self.number_of_evaluation_periods = kwargs.get('number_of_evaluation_periods', None)
        self.min_failing_periods_to_alert = kwargs.get('min_failing_periods_to_alert', None)


class EmailReceiver(Model):
    """An email receiver.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the email receiver. Names must be
     unique across all receivers within an action group.
    :type name: str
    :param email_address: Required. The email address of this receiver.
    :type email_address: str
    :ivar status: The receiver status of the e-mail. Possible values include:
     'NotSpecified', 'Enabled', 'Disabled'
    :vartype status: str or
     ~azure.mgmt.monitor.v2018_03_01.models.ReceiverStatus
    """

    _validation = {
        'name': {'required': True},
        'email_address': {'required': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'status': {'key': 'status', 'type': 'ReceiverStatus'},
    }

    def __init__(self, **kwargs):
        super(EmailReceiver, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.email_address = kwargs.get('email_address', None)
        self.status = None


class EnableRequest(Model):
    """Describes a receiver that should be resubscribed.

    All required parameters must be populated in order to send to Azure.

    :param receiver_name: Required. The name of the receiver to resubscribe.
    :type receiver_name: str
    """

    _validation = {
        'receiver_name': {'required': True},
    }

    _attribute_map = {
        'receiver_name': {'key': 'receiverName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EnableRequest, self).__init__(**kwargs)
        self.receiver_name = kwargs.get('receiver_name', None)


class ErrorResponse(Model):
    """Describes the format of Error response.

    :param code: Error code
    :type code: str
    :param message: Error message indicating why the operation failed.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class ItsmReceiver(Model):
    """An Itsm receiver.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the Itsm receiver. Names must be unique
     across all receivers within an action group.
    :type name: str
    :param workspace_id: Required. OMS LA instance identifier.
    :type workspace_id: str
    :param connection_id: Required. Unique identification of ITSM connection
     among multiple defined in above workspace.
    :type connection_id: str
    :param ticket_configuration: Required. JSON blob for the configurations of
     the ITSM action. CreateMultipleWorkItems option will be part of this blob
     as well.
    :type ticket_configuration: str
    :param region: Required. Region in which workspace resides. Supported
     values:'centralindia','japaneast','southeastasia','australiasoutheast','uksouth','westcentralus','canadacentral','eastus','westeurope'
    :type region: str
    """

    _validation = {
        'name': {'required': True},
        'workspace_id': {'required': True},
        'connection_id': {'required': True},
        'ticket_configuration': {'required': True},
        'region': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'workspace_id': {'key': 'workspaceId', 'type': 'str'},
        'connection_id': {'key': 'connectionId', 'type': 'str'},
        'ticket_configuration': {'key': 'ticketConfiguration', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ItsmReceiver, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.workspace_id = kwargs.get('workspace_id', None)
        self.connection_id = kwargs.get('connection_id', None)
        self.ticket_configuration = kwargs.get('ticket_configuration', None)
        self.region = kwargs.get('region', None)


class LogicAppReceiver(Model):
    """A logic app receiver.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the logic app receiver. Names must be
     unique across all receivers within an action group.
    :type name: str
    :param resource_id: Required. The azure resource id of the logic app
     receiver.
    :type resource_id: str
    :param callback_url: Required. The callback url where http request sent
     to.
    :type callback_url: str
    """

    _validation = {
        'name': {'required': True},
        'resource_id': {'required': True},
        'callback_url': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'callback_url': {'key': 'callbackUrl', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(LogicAppReceiver, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.callback_url = kwargs.get('callback_url', None)


class MetricAlertAction(Model):
    """An alert action.

    :param action_group_id: the id of the action group to use.
    :type action_group_id: str
    :param web_hook_properties: The properties of a webhook object.
    :type web_hook_properties: dict[str, str]
    """

    _attribute_map = {
        'action_group_id': {'key': 'actionGroupId', 'type': 'str'},
        'web_hook_properties': {'key': 'webHookProperties', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MetricAlertAction, self).__init__(**kwargs)
        self.action_group_id = kwargs.get('action_group_id', None)
        self.web_hook_properties = kwargs.get('web_hook_properties', None)


class MetricAlertCriteria(Model):
    """The rule criteria that defines the conditions of the alert rule.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MetricAlertSingleResourceMultipleMetricCriteria,
    MetricAlertMultipleResourceMultipleMetricCriteria

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param odatatype: Required. Constant filled by server.
    :type odatatype: str
    """

    _validation = {
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'odatatype': {'key': 'odata\\.type', 'type': 'str'},
    }

    _subtype_map = {
        'odatatype': {'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria': 'MetricAlertSingleResourceMultipleMetricCriteria', 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria': 'MetricAlertMultipleResourceMultipleMetricCriteria'}
    }

    def __init__(self, **kwargs):
        super(MetricAlertCriteria, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.odatatype = None


class MetricAlertMultipleResourceMultipleMetricCriteria(MetricAlertCriteria):
    """Specifies the metric alert criteria for multiple resource that has multiple
    metric criteria.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param odatatype: Required. Constant filled by server.
    :type odatatype: str
    :param all_of: the list of multiple metric criteria for this 'all of'
     operation.
    :type all_of:
     list[~azure.mgmt.monitor.v2018_03_01.models.MultiMetricCriteria]
    """

    _validation = {
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'odatatype': {'key': 'odata\\.type', 'type': 'str'},
        'all_of': {'key': 'allOf', 'type': '[MultiMetricCriteria]'},
    }

    def __init__(self, **kwargs):
        super(MetricAlertMultipleResourceMultipleMetricCriteria, self).__init__(**kwargs)
        self.all_of = kwargs.get('all_of', None)
        self.odatatype = 'Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria'


class MetricAlertResource(Resource):
    """The metric alert resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param location: Required. Resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param description: Required. the description of the metric alert that
     will be included in the alert email.
    :type description: str
    :param severity: Required. Alert severity {0, 1, 2, 3, 4}
    :type severity: int
    :param enabled: Required. the flag that indicates whether the metric alert
     is enabled.
    :type enabled: bool
    :param scopes: the list of resource id's that this metric alert is scoped
     to.
    :type scopes: list[str]
    :param evaluation_frequency: Required. how often the metric alert is
     evaluated represented in ISO 8601 duration format.
    :type evaluation_frequency: timedelta
    :param window_size: Required. the period of time (in ISO 8601 duration
     format) that is used to monitor alert activity based on the threshold.
    :type window_size: timedelta
    :param target_resource_type: the resource type of the target resource(s)
     on which the alert is created/updated. Mandatory for
     MultipleResourceMultipleMetricCriteria.
    :type target_resource_type: str
    :param target_resource_region: the region of the target resource(s) on
     which the alert is created/updated. Mandatory for
     MultipleResourceMultipleMetricCriteria.
    :type target_resource_region: str
    :param criteria: Required. defines the specific alert criteria
     information.
    :type criteria: ~azure.mgmt.monitor.v2018_03_01.models.MetricAlertCriteria
    :param auto_mitigate: the flag that indicates whether the alert should be
     auto resolved or not.
    :type auto_mitigate: bool
    :param actions: the array of actions that are performed when the alert
     rule becomes active, and when an alert condition is resolved.
    :type actions:
     list[~azure.mgmt.monitor.v2018_03_01.models.MetricAlertAction]
    :ivar last_updated_time: Last time the rule was updated in ISO8601 format.
    :vartype last_updated_time: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'description': {'required': True},
        'severity': {'required': True},
        'enabled': {'required': True},
        'evaluation_frequency': {'required': True},
        'window_size': {'required': True},
        'criteria': {'required': True},
        'last_updated_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'severity': {'key': 'properties.severity', 'type': 'int'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'scopes': {'key': 'properties.scopes', 'type': '[str]'},
        'evaluation_frequency': {'key': 'properties.evaluationFrequency', 'type': 'duration'},
        'window_size': {'key': 'properties.windowSize', 'type': 'duration'},
        'target_resource_type': {'key': 'properties.targetResourceType', 'type': 'str'},
        'target_resource_region': {'key': 'properties.targetResourceRegion', 'type': 'str'},
        'criteria': {'key': 'properties.criteria', 'type': 'MetricAlertCriteria'},
        'auto_mitigate': {'key': 'properties.autoMitigate', 'type': 'bool'},
        'actions': {'key': 'properties.actions', 'type': '[MetricAlertAction]'},
        'last_updated_time': {'key': 'properties.lastUpdatedTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(MetricAlertResource, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.severity = kwargs.get('severity', None)
        self.enabled = kwargs.get('enabled', None)
        self.scopes = kwargs.get('scopes', None)
        self.evaluation_frequency = kwargs.get('evaluation_frequency', None)
        self.window_size = kwargs.get('window_size', None)
        self.target_resource_type = kwargs.get('target_resource_type', None)
        self.target_resource_region = kwargs.get('target_resource_region', None)
        self.criteria = kwargs.get('criteria', None)
        self.auto_mitigate = kwargs.get('auto_mitigate', None)
        self.actions = kwargs.get('actions', None)
        self.last_updated_time = None


class MetricAlertResourcePatch(Model):
    """The metric alert resource for patch operations.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param tags: Resource tags
    :type tags: dict[str, str]
    :param description: Required. the description of the metric alert that
     will be included in the alert email.
    :type description: str
    :param severity: Required. Alert severity {0, 1, 2, 3, 4}
    :type severity: int
    :param enabled: Required. the flag that indicates whether the metric alert
     is enabled.
    :type enabled: bool
    :param scopes: the list of resource id's that this metric alert is scoped
     to.
    :type scopes: list[str]
    :param evaluation_frequency: Required. how often the metric alert is
     evaluated represented in ISO 8601 duration format.
    :type evaluation_frequency: timedelta
    :param window_size: Required. the period of time (in ISO 8601 duration
     format) that is used to monitor alert activity based on the threshold.
    :type window_size: timedelta
    :param target_resource_type: the resource type of the target resource(s)
     on which the alert is created/updated. Mandatory for
     MultipleResourceMultipleMetricCriteria.
    :type target_resource_type: str
    :param target_resource_region: the region of the target resource(s) on
     which the alert is created/updated. Mandatory for
     MultipleResourceMultipleMetricCriteria.
    :type target_resource_region: str
    :param criteria: Required. defines the specific alert criteria
     information.
    :type criteria: ~azure.mgmt.monitor.v2018_03_01.models.MetricAlertCriteria
    :param auto_mitigate: the flag that indicates whether the alert should be
     auto resolved or not.
    :type auto_mitigate: bool
    :param actions: the array of actions that are performed when the alert
     rule becomes active, and when an alert condition is resolved.
    :type actions:
     list[~azure.mgmt.monitor.v2018_03_01.models.MetricAlertAction]
    :ivar last_updated_time: Last time the rule was updated in ISO8601 format.
    :vartype last_updated_time: datetime
    """

    _validation = {
        'description': {'required': True},
        'severity': {'required': True},
        'enabled': {'required': True},
        'evaluation_frequency': {'required': True},
        'window_size': {'required': True},
        'criteria': {'required': True},
        'last_updated_time': {'readonly': True},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'severity': {'key': 'properties.severity', 'type': 'int'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'scopes': {'key': 'properties.scopes', 'type': '[str]'},
        'evaluation_frequency': {'key': 'properties.evaluationFrequency', 'type': 'duration'},
        'window_size': {'key': 'properties.windowSize', 'type': 'duration'},
        'target_resource_type': {'key': 'properties.targetResourceType', 'type': 'str'},
        'target_resource_region': {'key': 'properties.targetResourceRegion', 'type': 'str'},
        'criteria': {'key': 'properties.criteria', 'type': 'MetricAlertCriteria'},
        'auto_mitigate': {'key': 'properties.autoMitigate', 'type': 'bool'},
        'actions': {'key': 'properties.actions', 'type': '[MetricAlertAction]'},
        'last_updated_time': {'key': 'properties.lastUpdatedTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(MetricAlertResourcePatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.description = kwargs.get('description', None)
        self.severity = kwargs.get('severity', None)
        self.enabled = kwargs.get('enabled', None)
        self.scopes = kwargs.get('scopes', None)
        self.evaluation_frequency = kwargs.get('evaluation_frequency', None)
        self.window_size = kwargs.get('window_size', None)
        self.target_resource_type = kwargs.get('target_resource_type', None)
        self.target_resource_region = kwargs.get('target_resource_region', None)
        self.criteria = kwargs.get('criteria', None)
        self.auto_mitigate = kwargs.get('auto_mitigate', None)
        self.actions = kwargs.get('actions', None)
        self.last_updated_time = None


class MetricAlertSingleResourceMultipleMetricCriteria(MetricAlertCriteria):
    """Specifies the metric alert criteria for a single resource that has multiple
    metric criteria.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param odatatype: Required. Constant filled by server.
    :type odatatype: str
    :param all_of: The list of metric criteria for this 'all of' operation.
    :type all_of: list[~azure.mgmt.monitor.v2018_03_01.models.MetricCriteria]
    """

    _validation = {
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'odatatype': {'key': 'odata\\.type', 'type': 'str'},
        'all_of': {'key': 'allOf', 'type': '[MetricCriteria]'},
    }

    def __init__(self, **kwargs):
        super(MetricAlertSingleResourceMultipleMetricCriteria, self).__init__(**kwargs)
        self.all_of = kwargs.get('all_of', None)
        self.odatatype = 'Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria'


class MetricAlertStatus(Model):
    """An alert status.

    :param name: The status name.
    :type name: str
    :param id: The alert rule arm id.
    :type id: str
    :param type: The extended resource type name.
    :type type: str
    :param properties: The alert status properties of the metric alert status.
    :type properties:
     ~azure.mgmt.monitor.v2018_03_01.models.MetricAlertStatusProperties
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'MetricAlertStatusProperties'},
    }

    def __init__(self, **kwargs):
        super(MetricAlertStatus, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.properties = kwargs.get('properties', None)


class MetricAlertStatusCollection(Model):
    """Represents a collection of alert rule resources.

    :param value: the values for the alert rule resources.
    :type value:
     list[~azure.mgmt.monitor.v2018_03_01.models.MetricAlertStatus]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MetricAlertStatus]'},
    }

    def __init__(self, **kwargs):
        super(MetricAlertStatusCollection, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class MetricAlertStatusProperties(Model):
    """An alert status properties.

    :param dimensions: An object describing the type of the dimensions.
    :type dimensions: dict[str, str]
    :param status: status value
    :type status: str
    :param timestamp: UTC time when the status was checked.
    :type timestamp: datetime
    """

    _attribute_map = {
        'dimensions': {'key': 'dimensions', 'type': '{str}'},
        'status': {'key': 'status', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(MetricAlertStatusProperties, self).__init__(**kwargs)
        self.dimensions = kwargs.get('dimensions', None)
        self.status = kwargs.get('status', None)
        self.timestamp = kwargs.get('timestamp', None)


class MetricCriteria(MultiMetricCriteria):
    """Criterion to filter metrics.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param name: Required. Name of the criteria.
    :type name: str
    :param metric_name: Required. Name of the metric.
    :type metric_name: str
    :param metric_namespace: Namespace of the metric.
    :type metric_namespace: str
    :param time_aggregation: Required. the criteria time aggregation types.
    :type time_aggregation: object
    :param dimensions: List of dimension conditions.
    :type dimensions:
     list[~azure.mgmt.monitor.v2018_03_01.models.MetricDimension]
    :param criterion_type: Required. Constant filled by server.
    :type criterion_type: str
    :param operator: Required. the criteria operator.
    :type operator: object
    :param threshold: Required. the criteria threshold value that activates
     the alert.
    :type threshold: float
    """

    _validation = {
        'name': {'required': True},
        'metric_name': {'required': True},
        'time_aggregation': {'required': True},
        'criterion_type': {'required': True},
        'operator': {'required': True},
        'threshold': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'metric_name': {'key': 'metricName', 'type': 'str'},
        'metric_namespace': {'key': 'metricNamespace', 'type': 'str'},
        'time_aggregation': {'key': 'timeAggregation', 'type': 'object'},
        'dimensions': {'key': 'dimensions', 'type': '[MetricDimension]'},
        'criterion_type': {'key': 'criterionType', 'type': 'str'},
        'operator': {'key': 'operator', 'type': 'object'},
        'threshold': {'key': 'threshold', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(MetricCriteria, self).__init__(**kwargs)
        self.operator = kwargs.get('operator', None)
        self.threshold = kwargs.get('threshold', None)
        self.criterion_type = 'StaticThresholdCriterion'


class MetricDimension(Model):
    """Specifies a metric dimension.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of the dimension.
    :type name: str
    :param operator: Required. the dimension operator. Only 'Include' and
     'Exclude' are supported
    :type operator: str
    :param values: Required. list of dimension values.
    :type values: list[str]
    """

    _validation = {
        'name': {'required': True},
        'operator': {'required': True},
        'values': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'operator': {'key': 'operator', 'type': 'str'},
        'values': {'key': 'values', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(MetricDimension, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.operator = kwargs.get('operator', None)
        self.values = kwargs.get('values', None)


class SmsReceiver(Model):
    """An SMS receiver.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the SMS receiver. Names must be unique
     across all receivers within an action group.
    :type name: str
    :param country_code: Required. The country code of the SMS receiver.
    :type country_code: str
    :param phone_number: Required. The phone number of the SMS receiver.
    :type phone_number: str
    :ivar status: The status of the receiver. Possible values include:
     'NotSpecified', 'Enabled', 'Disabled'
    :vartype status: str or
     ~azure.mgmt.monitor.v2018_03_01.models.ReceiverStatus
    """

    _validation = {
        'name': {'required': True},
        'country_code': {'required': True},
        'phone_number': {'required': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'country_code': {'key': 'countryCode', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'status': {'key': 'status', 'type': 'ReceiverStatus'},
    }

    def __init__(self, **kwargs):
        super(SmsReceiver, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.country_code = kwargs.get('country_code', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.status = None


class VoiceReceiver(Model):
    """A voice receiver.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the voice receiver. Names must be
     unique across all receivers within an action group.
    :type name: str
    :param country_code: Required. The country code of the voice receiver.
    :type country_code: str
    :param phone_number: Required. The phone number of the voice receiver.
    :type phone_number: str
    """

    _validation = {
        'name': {'required': True},
        'country_code': {'required': True},
        'phone_number': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'country_code': {'key': 'countryCode', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VoiceReceiver, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.country_code = kwargs.get('country_code', None)
        self.phone_number = kwargs.get('phone_number', None)


class WebhookReceiver(Model):
    """A webhook receiver.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the webhook receiver. Names must be
     unique across all receivers within an action group.
    :type name: str
    :param service_uri: Required. The URI where webhooks should be sent.
    :type service_uri: str
    """

    _validation = {
        'name': {'required': True},
        'service_uri': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'service_uri': {'key': 'serviceUri', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(WebhookReceiver, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.service_uri = kwargs.get('service_uri', None)
