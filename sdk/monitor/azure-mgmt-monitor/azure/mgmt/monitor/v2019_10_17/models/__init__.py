# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import AzureMonitorPrivateLinkScope
from ._models_py3 import AzureMonitorPrivateLinkScopeListResult
from ._models_py3 import ErrorAdditionalInfo
from ._models_py3 import ErrorResponse
from ._models_py3 import ErrorResponseCommon
from ._models_py3 import OperationStatus
from ._models_py3 import PrivateEndpointConnection
from ._models_py3 import PrivateEndpointConnectionListResult
from ._models_py3 import PrivateEndpointProperty
from ._models_py3 import PrivateLinkResource
from ._models_py3 import PrivateLinkResourceListResult
from ._models_py3 import PrivateLinkScopesResource
from ._models_py3 import PrivateLinkServiceConnectionStateProperty
from ._models_py3 import ProxyResource
from ._models_py3 import ScopedResource
from ._models_py3 import ScopedResourceListResult
from ._models_py3 import TagsResource

from ._patch import __all__ as _patch_all
from ._patch import *  # type: ignore # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk
__all__ = [
    'AzureMonitorPrivateLinkScope',
    'AzureMonitorPrivateLinkScopeListResult',
    'ErrorAdditionalInfo',
    'ErrorResponse',
    'ErrorResponseCommon',
    'OperationStatus',
    'PrivateEndpointConnection',
    'PrivateEndpointConnectionListResult',
    'PrivateEndpointProperty',
    'PrivateLinkResource',
    'PrivateLinkResourceListResult',
    'PrivateLinkScopesResource',
    'PrivateLinkServiceConnectionStateProperty',
    'ProxyResource',
    'ScopedResource',
    'ScopedResourceListResult',
    'TagsResource',
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()