# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class BatchQueryRequest(msrest.serialization.Model):
    """An single request in a batch.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The error details.
    :type id: str
    :param headers: Dictionary of :code:`<string>`.
    :type headers: dict[str, str]
    :param body: Required. The Analytics query. Learn more about the `Analytics query syntax
     <https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/>`_.
    :type body: ~monitor_query_client.models.QueryBody
    :ivar path:  Default value: "/query".
    :vartype path: str
    :ivar method:  Default value: "POST".
    :vartype method: str
    :param workspace: Required. Workspace Id to be included in the query.
    :type workspace: str
    """

    _validation = {
        'id': {'required': True},
        'body': {'required': True},
        'path': {'constant': True},
        'method': {'constant': True},
        'workspace': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'headers': {'key': 'headers', 'type': '{str}'},
        'body': {'key': 'body', 'type': 'QueryBody'},
        'path': {'key': 'path', 'type': 'str'},
        'method': {'key': 'method', 'type': 'str'},
        'workspace': {'key': 'workspace', 'type': 'str'},
    }

    path = "/query"
    method = "POST"

    def __init__(
        self,
        **kwargs
    ):
        super(BatchQueryRequest, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.headers = kwargs.get('headers', None)
        self.body = kwargs['body']
        self.workspace = kwargs['workspace']


class BatchQueryResponse(msrest.serialization.Model):
    """BatchQueryResponse.

    :param id:
    :type id: str
    :param status:
    :type status: int
    :param body: Contains the tables, columns & rows resulting from a query.
    :type body: ~monitor_query_client.models.BatchQueryResults
    :param headers: Dictionary of :code:`<string>`.
    :type headers: dict[str, str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'int'},
        'body': {'key': 'body', 'type': 'BatchQueryResults'},
        'headers': {'key': 'headers', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BatchQueryResponse, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.status = kwargs.get('status', None)
        self.body = kwargs.get('body', None)
        self.headers = kwargs.get('headers', None)


class BatchQueryResults(msrest.serialization.Model):
    """Contains the tables, columns & rows resulting from a query.

    :param tables: The list of tables, columns and rows.
    :type tables: list[~monitor_query_client.models.Table]
    :param statistics: Statistics represented in JSON format.
    :type statistics: object
    :param render: Visualization data in JSON format.
    :type render: object
    :param error: The code and message for an error.
    :type error: ~monitor_query_client.models.ErrorInfo
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[Table]'},
        'statistics': {'key': 'statistics', 'type': 'object'},
        'render': {'key': 'render', 'type': 'object'},
        'error': {'key': 'error', 'type': 'ErrorInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BatchQueryResults, self).__init__(**kwargs)
        self.tables = kwargs.get('tables', None)
        self.statistics = kwargs.get('statistics', None)
        self.render = kwargs.get('render', None)
        self.error = kwargs.get('error', None)


class BatchRequest(msrest.serialization.Model):
    """An array of requests.

    All required parameters must be populated in order to send to Azure.

    :param requests: Required. An single request in a batch.
    :type requests: list[~monitor_query_client.models.BatchQueryRequest]
    """

    _validation = {
        'requests': {'required': True},
    }

    _attribute_map = {
        'requests': {'key': 'requests', 'type': '[BatchQueryRequest]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BatchRequest, self).__init__(**kwargs)
        self.requests = kwargs['requests']


class BatchResponse(msrest.serialization.Model):
    """Response to a batch query.

    :param responses: An array of responses corresponding to each individual request in a batch.
    :type responses: list[~monitor_query_client.models.BatchQueryResponse]
    """

    _attribute_map = {
        'responses': {'key': 'responses', 'type': '[BatchQueryResponse]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BatchResponse, self).__init__(**kwargs)
        self.responses = kwargs.get('responses', None)


class Column(msrest.serialization.Model):
    """A column in a table.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of this column.
    :type name: str
    :param type: Required. The data type of this column. Possible values include: "bool",
     "datetime", "dynamic", "int", "long", "real", "string", "guid", "decimal", "timespan".
    :type type: str or ~monitor_query_client.models.LogsColumnType
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Column, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.type = kwargs['type']


class ErrorDetail(msrest.serialization.Model):
    """Error details.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. The error's code.
    :type code: str
    :param message: Required. A human readable error message.
    :type message: str
    :param target: Indicates which property in the request is responsible for the error.
    :type target: str
    :param value: Indicates which value in 'target' is responsible for the error.
    :type value: str
    :param resources: Indicates resources which were responsible for the error.
    :type resources: list[str]
    :param additional_properties: Additional properties that can be provided on the error details
     object.
    :type additional_properties: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'resources': {'key': 'resources', 'type': '[str]'},
        'additional_properties': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.target = kwargs.get('target', None)
        self.value = kwargs.get('value', None)
        self.resources = kwargs.get('resources', None)
        self.additional_properties = kwargs.get('additional_properties', None)


class ErrorInfo(msrest.serialization.Model):
    """The code and message for an error.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. A machine readable error code.
    :type code: str
    :param message: Required. A human readable error message.
    :type message: str
    :param details: error details.
    :type details: list[~monitor_query_client.models.ErrorDetail]
    :param innererror: Inner error details if they exist.
    :type innererror: ~monitor_query_client.models.ErrorInfo
    :param additional_properties: Additional properties that can be provided on the error info
     object.
    :type additional_properties: object
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'ErrorInfo'},
        'additional_properties': {'key': 'additionalProperties', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorInfo, self).__init__(**kwargs)
        self.code = kwargs['code']
        self.message = kwargs['message']
        self.details = kwargs.get('details', None)
        self.innererror = kwargs.get('innererror', None)
        self.additional_properties = kwargs.get('additional_properties', None)


class ErrorResponse(msrest.serialization.Model):
    """Contains details when the response code indicates an error.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. The error details.
    :type error: ~monitor_query_client.models.ErrorInfo
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs['error']


class ErrorResponseAutoGenerated(msrest.serialization.Model):
    """Describes the format of Error response.

    :param code: Error code.
    :type code: str
    :param message: Error message indicating why the operation failed.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponseAutoGenerated, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class LocalizableString(msrest.serialization.Model):
    """The localizable string class.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. the invariant value.
    :type value: str
    :param localized_value: the locale specific value.
    :type localized_value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(LocalizableString, self).__init__(**kwargs)
        self.value = kwargs['value']
        self.localized_value = kwargs.get('localized_value', None)


class MetadataApplication(msrest.serialization.Model):
    """Application Insights apps that were part of the metadata request and that the user has access to.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the Application Insights app.
    :type id: str
    :param resource_id: Required. The ARM resource ID of the Application Insights app.
    :type resource_id: str
    :param name: Required. The name of the Application Insights app.
    :type name: str
    :param region: Required. The Azure region of the Application Insights app.
    :type region: str
    :param related: The related metadata items for the Application Insights app.
    :type related: ~monitor_query_client.models.MetadataApplicationRelated
    """

    _validation = {
        'id': {'required': True},
        'resource_id': {'required': True},
        'name': {'required': True},
        'region': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataApplicationRelated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataApplication, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.resource_id = kwargs['resource_id']
        self.name = kwargs['name']
        self.region = kwargs['region']
        self.related = kwargs.get('related', None)


class MetadataApplicationRelated(msrest.serialization.Model):
    """The related metadata items for the Application Insights app.

    :param tables: The related tables for the Application Insights app.
    :type tables: list[str]
    :param functions: The related functions for the Application Insights app.
    :type functions: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataApplicationRelated, self).__init__(**kwargs)
        self.tables = kwargs.get('tables', None)
        self.functions = kwargs.get('functions', None)


class MetadataCategory(msrest.serialization.Model):
    """Categories are used to group other metadata entities.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the category.
    :type id: str
    :param display_name: Required. The display name of the category.
    :type display_name: str
    :param description: The description of the category.
    :type description: str
    :param related: The related metadata items for the category.
    :type related: ~monitor_query_client.models.MetadataCategoryRelated
    """

    _validation = {
        'id': {'required': True},
        'display_name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataCategoryRelated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataCategory, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.display_name = kwargs['display_name']
        self.description = kwargs.get('description', None)
        self.related = kwargs.get('related', None)


class MetadataCategoryRelated(msrest.serialization.Model):
    """The related metadata items for the category.

    :param tables: The tables related to the category.
    :type tables: list[str]
    :param functions: The functions related to the category.
    :type functions: list[str]
    :param resource_types: The resource types related to the category.
    :type resource_types: list[str]
    :param queries: The saved queries related to the category.
    :type queries: list[str]
    :param solutions: The Log Analytics solutions related to the category.
    :type solutions: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataCategoryRelated, self).__init__(**kwargs)
        self.tables = kwargs.get('tables', None)
        self.functions = kwargs.get('functions', None)
        self.resource_types = kwargs.get('resource_types', None)
        self.queries = kwargs.get('queries', None)
        self.solutions = kwargs.get('solutions', None)


class MetadataFunction(msrest.serialization.Model):
    """Functions are stored Kusto queries that can be specified as part of queries by using their name.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the function.
    :type id: str
    :param name: Required. The name of the function, to be used in queries.
    :type name: str
    :param parameters: The parameters/arguments of the function, if any.
    :type parameters: str
    :param display_name: The display name of the function.
    :type display_name: str
    :param description: The description of the function.
    :type description: str
    :param body: Required. The KQL body of the function.
    :type body: str
    :param tags: A set of tags. The tags associated with the function.
    :type tags: object
    :param properties: The properties of the function.
    :type properties: object
    :param related: The related metadata items for the function.
    :type related: ~monitor_query_client.models.MetadataFunctionRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataFunctionRelated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataFunction, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.name = kwargs['name']
        self.parameters = kwargs.get('parameters', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.body = kwargs['body']
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)
        self.related = kwargs.get('related', None)


class MetadataFunctionRelated(msrest.serialization.Model):
    """The related metadata items for the function.

    :param tables: The related tables for the function.
    :type tables: list[str]
    :param solutions: The related Log Analytics solutions for the function.
    :type solutions: list[str]
    :param resource_types: The related resource types for the function.
    :type resource_types: list[str]
    :param categories: The related categories for the function.
    :type categories: list[str]
    :param workspaces: The related workspaces for the function.
    :type workspaces: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataFunctionRelated, self).__init__(**kwargs)
        self.tables = kwargs.get('tables', None)
        self.solutions = kwargs.get('solutions', None)
        self.resource_types = kwargs.get('resource_types', None)
        self.categories = kwargs.get('categories', None)
        self.workspaces = kwargs.get('workspaces', None)


class MetadataPermissions(msrest.serialization.Model):
    """Permission information for the metadata call, includes apps/workspaces/resource the user didn't have access to.

    All required parameters must be populated in order to send to Azure.

    :param workspaces: Required. The permission indication for the workspaces on the metadata
     request.
    :type workspaces: list[~monitor_query_client.models.MetadataPermissionsWorkspacesItem]
    :param resources: The permission indication for the Azure resources on the metadata request.
    :type resources: list[~monitor_query_client.models.MetadataPermissionsResourcesItem]
    :param applications: The permission indication for the Application Insights apps on the
     metadata request.
    :type applications: list[~monitor_query_client.models.MetadataPermissionsApplicationsItem]
    """

    _validation = {
        'workspaces': {'required': True},
    }

    _attribute_map = {
        'workspaces': {'key': 'workspaces', 'type': '[MetadataPermissionsWorkspacesItem]'},
        'resources': {'key': 'resources', 'type': '[MetadataPermissionsResourcesItem]'},
        'applications': {'key': 'applications', 'type': '[MetadataPermissionsApplicationsItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataPermissions, self).__init__(**kwargs)
        self.workspaces = kwargs['workspaces']
        self.resources = kwargs.get('resources', None)
        self.applications = kwargs.get('applications', None)


class MetadataPermissionsApplicationsItem(msrest.serialization.Model):
    """MetadataPermissionsApplicationsItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required. The resource ID on the permission indication.
    :type resource_id: str
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataPermissionsApplicationsItem, self).__init__(**kwargs)
        self.resource_id = kwargs['resource_id']


class MetadataPermissionsResourcesItem(msrest.serialization.Model):
    """MetadataPermissionsResourcesItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required. The resource ID on the permission indication.
    :type resource_id: str
    :param deny_tables: The list of tables that were denied access for the resource ID.
    :type deny_tables: list[str]
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'deny_tables': {'key': 'denyTables', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataPermissionsResourcesItem, self).__init__(**kwargs)
        self.resource_id = kwargs['resource_id']
        self.deny_tables = kwargs.get('deny_tables', None)


class MetadataPermissionsWorkspacesItem(msrest.serialization.Model):
    """MetadataPermissionsWorkspacesItem.

    All required parameters must be populated in order to send to Azure.

    :param resource_id: Required. The resource ID on the permission indication.
    :type resource_id: str
    :param deny_tables: The list of tables that were denied access for the resource ID.
    :type deny_tables: list[str]
    """

    _validation = {
        'resource_id': {'required': True},
    }

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'deny_tables': {'key': 'denyTables', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataPermissionsWorkspacesItem, self).__init__(**kwargs)
        self.resource_id = kwargs['resource_id']
        self.deny_tables = kwargs.get('deny_tables', None)


class MetadataQuery(msrest.serialization.Model):
    """Queries are stored pieces of KQL, along with a list of relevant metadata items.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the query.
    :type id: str
    :param display_name: The display name of the query.
    :type display_name: str
    :param description: The description of the query.
    :type description: str
    :param body: Required. The KQL body of the query.
    :type body: str
    :param labels: The user defined labels associated with the query.
    :type labels: list[str]
    :param tags: A set of tags. The tags associated with the query.
    :type tags: object
    :param properties: The properties of the query.
    :type properties: object
    :param related: The related metadata items for the query.
    :type related: ~monitor_query_client.models.MetadataQueryRelated
    """

    _validation = {
        'id': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataQueryRelated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataQuery, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.body = kwargs['body']
        self.labels = kwargs.get('labels', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)
        self.related = kwargs.get('related', None)


class MetadataQueryRelated(msrest.serialization.Model):
    """The related metadata items for the query.

    :param categories: The related categories for the query.
    :type categories: list[str]
    :param solutions: The related Log Analytics solutions for the query.
    :type solutions: list[str]
    :param resource_types: The related resource types for the query.
    :type resource_types: list[str]
    :param tables: The related tables for the query.
    :type tables: list[str]
    """

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'tables': {'key': 'tables', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataQueryRelated, self).__init__(**kwargs)
        self.categories = kwargs.get('categories', None)
        self.solutions = kwargs.get('solutions', None)
        self.resource_types = kwargs.get('resource_types', None)
        self.tables = kwargs.get('tables', None)


class MetadataResourceType(msrest.serialization.Model):
    """Metadata about types of Azure resources, containing relevant tables, functions, etc.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the resource-type.
    :type id: str
    :param type: Required. The type of the resource-type.
    :type type: str
    :param display_name: The display name of the resource-type.
    :type display_name: str
    :param description: The description of the resource-type.
    :type description: str
    :param labels: The user-defined labels of the resource-type.
    :type labels: list[str]
    :param tags: A set of tags. The tags associated with the resource-type.
    :type tags: object
    :param properties: The properties of the resource-type.
    :type properties: object
    :param related: The related metadata items for the resource-type.
    :type related: ~monitor_query_client.models.MetadataResourceTypeRelated
    """

    _validation = {
        'id': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataResourceTypeRelated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataResourceType, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.type = kwargs['type']
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.labels = kwargs.get('labels', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)
        self.related = kwargs.get('related', None)


class MetadataResourceTypeRelated(msrest.serialization.Model):
    """The related metadata items for the resource-type.

    :param tables: The tables related to the resource-type.
    :type tables: list[str]
    :param functions: The functions related to the resource-type.
    :type functions: list[str]
    :param categories: The categories related to the resource-type.
    :type categories: list[str]
    :param queries: The queries related to the resource-type.
    :type queries: list[str]
    :param workspaces: The Log Analytics workspaces related to the resource-type.
    :type workspaces: list[str]
    :param resources: The Azure resources related to the resource-type.
    :type resources: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
        'resources': {'key': 'resources', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataResourceTypeRelated, self).__init__(**kwargs)
        self.tables = kwargs.get('tables', None)
        self.functions = kwargs.get('functions', None)
        self.categories = kwargs.get('categories', None)
        self.queries = kwargs.get('queries', None)
        self.workspaces = kwargs.get('workspaces', None)
        self.resources = kwargs.get('resources', None)


class MetadataResults(msrest.serialization.Model):
    """The metadata response for the app, including available tables, etc.

    :param categories: The list of categories that are referenced in this metadata response.
    :type categories: list[~monitor_query_client.models.MetadataCategory]
    :param resource_types: The list of resource types that are referenced in this metadata
     response.
    :type resource_types: list[~monitor_query_client.models.MetadataResourceType]
    :param solutions: The list of Log Analytics solutions installed on the workspace.
    :type solutions: list[~monitor_query_client.models.MetadataSolution]
    :param tables: The list of tables and columns that comprise the schema of the workspace.
    :type tables: list[~monitor_query_client.models.MetadataTable]
    :param functions: The list of functions stored on the workspace, or introduced by solutions
     etc.
    :type functions: list[~monitor_query_client.models.MetadataFunction]
    :param queries: The list of saved queries stored on the workspace, or introduced by solutions,
     resource types, etc.
    :type queries: list[~monitor_query_client.models.MetadataQuery]
    :param applications: The list of Application Insights apps that were referenced in the metadata
     request.
    :type applications: list[~monitor_query_client.models.MetadataApplication]
    :param workspaces: The list of Log Analytics workspaces that were referenced in the metadata
     request.
    :type workspaces: list[~monitor_query_client.models.MetadataWorkspace]
    :param resources: The list of Azure resources that were referenced in the metadata request.
    :type resources: list[object]
    :param permissions: The list of permission rules that affected the metadata request.
    :type permissions: list[~monitor_query_client.models.MetadataPermissions]
    """

    _validation = {
        'categories': {'unique': True},
        'resource_types': {'unique': True},
        'solutions': {'unique': True},
        'tables': {'unique': True},
        'functions': {'unique': True},
        'queries': {'unique': True},
        'applications': {'unique': True},
        'workspaces': {'unique': True},
        'resources': {'unique': True},
        'permissions': {'unique': True},
    }

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[MetadataCategory]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[MetadataResourceType]'},
        'solutions': {'key': 'solutions', 'type': '[MetadataSolution]'},
        'tables': {'key': 'tables', 'type': '[MetadataTable]'},
        'functions': {'key': 'functions', 'type': '[MetadataFunction]'},
        'queries': {'key': 'queries', 'type': '[MetadataQuery]'},
        'applications': {'key': 'applications', 'type': '[MetadataApplication]'},
        'workspaces': {'key': 'workspaces', 'type': '[MetadataWorkspace]'},
        'resources': {'key': 'resources', 'type': '[object]'},
        'permissions': {'key': 'permissions', 'type': '[MetadataPermissions]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataResults, self).__init__(**kwargs)
        self.categories = kwargs.get('categories', None)
        self.resource_types = kwargs.get('resource_types', None)
        self.solutions = kwargs.get('solutions', None)
        self.tables = kwargs.get('tables', None)
        self.functions = kwargs.get('functions', None)
        self.queries = kwargs.get('queries', None)
        self.applications = kwargs.get('applications', None)
        self.workspaces = kwargs.get('workspaces', None)
        self.resources = kwargs.get('resources', None)
        self.permissions = kwargs.get('permissions', None)


class MetadataSolution(msrest.serialization.Model):
    """Solutions can group tables and functions that are associated with a certain Azure Log Analytics offering.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the Log Analytics solution.
    :type id: str
    :param name: Required. The name of the Log Analytics solution.
    :type name: str
    :param display_name: The display name of the Log Analytics solution.
    :type display_name: str
    :param description: The description of the Log Analytics solution.
    :type description: str
    :param tags: A set of tags. The tags that are associated with the Log Analytics solution.
    :type tags: object
    :param properties: The properties of the Log Analytics solution.
    :type properties: object
    :param related: Required. The related metadata items for the Log Analytics solution.
    :type related: ~monitor_query_client.models.MetadataSolutionRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'related': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'related': {'key': 'related', 'type': 'MetadataSolutionRelated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataSolution, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.name = kwargs['name']
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)
        self.related = kwargs['related']


class MetadataSolutionRelated(msrest.serialization.Model):
    """The related metadata items for the Log Analytics solution.

    All required parameters must be populated in order to send to Azure.

    :param tables: Required. The tables related to the Log Analytics solution.
    :type tables: list[str]
    :param functions: The functions related to the Log Analytics solution.
    :type functions: list[str]
    :param categories: The categories related to the Log Analytics solution.
    :type categories: list[str]
    :param queries: The saved queries related to the Log Analytics solution.
    :type queries: list[str]
    :param workspaces: The Workspaces referenced in the metadata request that are related to the
     Log Analytics solution.
    :type workspaces: list[str]
    """

    _validation = {
        'tables': {'required': True},
    }

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataSolutionRelated, self).__init__(**kwargs)
        self.tables = kwargs['tables']
        self.functions = kwargs.get('functions', None)
        self.categories = kwargs.get('categories', None)
        self.queries = kwargs.get('queries', None)
        self.workspaces = kwargs.get('workspaces', None)


class MetadataTable(msrest.serialization.Model):
    """Tables are part of the workspace schema, and contain a list of columns and a reference to other relevant metadata items.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the table.
    :type id: str
    :param name: Required. The name of the table.
    :type name: str
    :param description: The description of the table.
    :type description: str
    :param timespan_column: The column associated with the timespan query parameter for the table.
    :type timespan_column: str
    :param labels: The user defined labels of the table.
    :type labels: list[str]
    :param tags: A set of tags. The tags associated with the table.
    :type tags: object
    :param properties: The properties of the table.
    :type properties: object
    :param columns: The list of columns defined on the table.
    :type columns: list[~monitor_query_client.models.MetadataTableColumnsItem]
    :param related: The related metadata items for the table.
    :type related: ~monitor_query_client.models.MetadataTableRelated
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'timespan_column': {'key': 'timespanColumn', 'type': 'str'},
        'labels': {'key': 'labels', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'properties': {'key': 'properties', 'type': 'object'},
        'columns': {'key': 'columns', 'type': '[MetadataTableColumnsItem]'},
        'related': {'key': 'related', 'type': 'MetadataTableRelated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataTable, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.name = kwargs['name']
        self.description = kwargs.get('description', None)
        self.timespan_column = kwargs.get('timespan_column', None)
        self.labels = kwargs.get('labels', None)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)
        self.columns = kwargs.get('columns', None)
        self.related = kwargs.get('related', None)


class MetadataTableColumnsItem(msrest.serialization.Model):
    """MetadataTableColumnsItem.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the column.
    :type name: str
    :param description: The description of the column.
    :type description: str
    :param type: Required. The data type of the column. Possible values include: "bool",
     "datetime", "dynamic", "int", "long", "real", "string", "guid", "decimal", "timespan".
    :type type: str or ~monitor_query_client.models.MetadataColumnDataType
    :param is_preferred_facet: A flag indicating this column is a preferred facet.
    :type is_preferred_facet: bool
    :param source: an indication of the source of the column, used only when multiple workspaces
     have conflicting definition for the column.
    :type source: object
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'is_preferred_facet': {'key': 'isPreferredFacet', 'type': 'bool'},
        'source': {'key': 'source', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataTableColumnsItem, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.description = kwargs.get('description', None)
        self.type = kwargs['type']
        self.is_preferred_facet = kwargs.get('is_preferred_facet', None)
        self.source = kwargs.get('source', None)


class MetadataTableRelated(msrest.serialization.Model):
    """The related metadata items for the table.

    :param categories: The related categories for the table.
    :type categories: list[str]
    :param solutions: The related Log Analytics solutions for the table.
    :type solutions: list[str]
    :param resource_types: The related resource types for the table.
    :type resource_types: list[str]
    :param workspaces: The related Log Analytics workspaces for the table.
    :type workspaces: list[str]
    :param functions: The related functions for the table.
    :type functions: list[str]
    :param queries: The related saved queries for the table.
    :type queries: list[str]
    """

    _attribute_map = {
        'categories': {'key': 'categories', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'queries': {'key': 'queries', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataTableRelated, self).__init__(**kwargs)
        self.categories = kwargs.get('categories', None)
        self.solutions = kwargs.get('solutions', None)
        self.resource_types = kwargs.get('resource_types', None)
        self.workspaces = kwargs.get('workspaces', None)
        self.functions = kwargs.get('functions', None)
        self.queries = kwargs.get('queries', None)


class MetadataValue(msrest.serialization.Model):
    """Represents a metric metadata value.

    :param name: the name of the metadata.
    :type name: ~monitor_query_client.models.LocalizableString
    :param value: the value of the metadata.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'LocalizableString'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataValue, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class MetadataWorkspace(msrest.serialization.Model):
    """Log Analytics workspaces that were part of the metadata request and that the user has access to.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The ID of the Log Analytics workspace.
    :type id: str
    :param resource_id: Required. The ARM resource ID of the Log Analytics workspace.
    :type resource_id: str
    :param name: Required. The name of the Log Analytics workspace.
    :type name: str
    :param region: Required. The Azure region of the Log Analytics workspace.
    :type region: str
    :param related: The related metadata items for the Log Analytics workspace.
    :type related: ~monitor_query_client.models.MetadataWorkspaceRelated
    """

    _validation = {
        'id': {'required': True},
        'resource_id': {'required': True},
        'name': {'required': True},
        'region': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'region': {'key': 'region', 'type': 'str'},
        'related': {'key': 'related', 'type': 'MetadataWorkspaceRelated'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataWorkspace, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.resource_id = kwargs['resource_id']
        self.name = kwargs['name']
        self.region = kwargs['region']
        self.related = kwargs.get('related', None)


class MetadataWorkspaceRelated(msrest.serialization.Model):
    """The related metadata items for the Log Analytics workspace.

    :param tables: The related tables for the Log Analytics workspace.
    :type tables: list[str]
    :param solutions: The related Log Analytics solutions for the Log Analytics workspace.
    :type solutions: list[str]
    :param resource_types: The related resource types for the Log Analytics workspace.
    :type resource_types: list[str]
    :param functions: The related functions for the Log Analytics workspace.
    :type functions: list[str]
    :param resources: The related Azure resources for the Log Analytics workspace.
    :type resources: list[str]
    """

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[str]'},
        'solutions': {'key': 'solutions', 'type': '[str]'},
        'resource_types': {'key': 'resourceTypes', 'type': '[str]'},
        'functions': {'key': 'functions', 'type': '[str]'},
        'resources': {'key': 'resources', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetadataWorkspaceRelated, self).__init__(**kwargs)
        self.tables = kwargs.get('tables', None)
        self.solutions = kwargs.get('solutions', None)
        self.resource_types = kwargs.get('resource_types', None)
        self.functions = kwargs.get('functions', None)
        self.resources = kwargs.get('resources', None)


class Metric(msrest.serialization.Model):
    """The result data of a query.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. the metric Id.
    :type id: str
    :param type: Required. the resource type of the metric resource.
    :type type: str
    :param name: Required. the name and the display name of the metric, i.e. it is localizable
     string.
    :type name: ~monitor_query_client.models.LocalizableString
    :param display_description: Detailed description of this metric.
    :type display_description: str
    :param error_code: 'Success' or the error details on query failures for this metric.
    :type error_code: str
    :param error_message: Error message encountered querying this specific metric.
    :type error_message: str
    :param unit: Required. The unit of the metric. Possible values include: "Count", "Bytes",
     "Seconds", "CountPerSecond", "BytesPerSecond", "Percent", "MilliSeconds", "ByteSeconds",
     "Unspecified", "Cores", "MilliCores", "NanoCores", "BitsPerSecond".
    :type unit: str or ~monitor_query_client.models.MetricUnit
    :param timeseries: Required. the time series returned when a data query is performed.
    :type timeseries: list[~monitor_query_client.models.TimeSeriesElement]
    """

    _validation = {
        'id': {'required': True},
        'type': {'required': True},
        'name': {'required': True},
        'unit': {'required': True},
        'timeseries': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'LocalizableString'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'timeseries': {'key': 'timeseries', 'type': '[TimeSeriesElement]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Metric, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.type = kwargs['type']
        self.name = kwargs['name']
        self.display_description = kwargs.get('display_description', None)
        self.error_code = kwargs.get('error_code', None)
        self.error_message = kwargs.get('error_message', None)
        self.unit = kwargs['unit']
        self.timeseries = kwargs['timeseries']


class MetricAvailability(msrest.serialization.Model):
    """Metric availability specifies the time grain (aggregation interval or frequency) and the retention period for that time grain.

    :param time_grain: the time grain specifies the aggregation interval for the metric. Expressed
     as a duration 'PT1M', 'P1D', etc.
    :type time_grain: ~datetime.timedelta
    :param retention: the retention period for the metric at the specified timegrain.  Expressed as
     a duration 'PT1M', 'P1D', etc.
    :type retention: ~datetime.timedelta
    """

    _attribute_map = {
        'time_grain': {'key': 'timeGrain', 'type': 'duration'},
        'retention': {'key': 'retention', 'type': 'duration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetricAvailability, self).__init__(**kwargs)
        self.time_grain = kwargs.get('time_grain', None)
        self.retention = kwargs.get('retention', None)


class MetricDefinition(msrest.serialization.Model):
    """Metric definition class specifies the metadata for a metric.

    :param is_dimension_required: Flag to indicate whether the dimension is required.
    :type is_dimension_required: bool
    :param resource_id: the resource identifier of the resource that emitted the metric.
    :type resource_id: str
    :param namespace: the namespace the metric belongs to.
    :type namespace: str
    :param name: the name and the display name of the metric, i.e. it is a localizable string.
    :type name: ~monitor_query_client.models.LocalizableString
    :param display_description: Detailed description of this metric.
    :type display_description: str
    :param category: Custom category name for this metric.
    :type category: str
    :param metric_class: The class of the metric. Possible values include: "Availability",
     "Transactions", "Errors", "Latency", "Saturation".
    :type metric_class: str or ~monitor_query_client.models.MetricClass
    :param unit: The unit of the metric. Possible values include: "Count", "Bytes", "Seconds",
     "CountPerSecond", "BytesPerSecond", "Percent", "MilliSeconds", "ByteSeconds", "Unspecified",
     "Cores", "MilliCores", "NanoCores", "BitsPerSecond".
    :type unit: str or ~monitor_query_client.models.MetricUnit
    :param primary_aggregation_type: the primary aggregation type value defining how to use the
     values for display. Possible values include: "None", "Average", "Count", "Minimum", "Maximum",
     "Total".
    :type primary_aggregation_type: str or ~monitor_query_client.models.AggregationType
    :param supported_aggregation_types: the collection of what aggregation types are supported.
    :type supported_aggregation_types: list[str or ~monitor_query_client.models.AggregationType]
    :param metric_availabilities: the collection of what aggregation intervals are available to be
     queried.
    :type metric_availabilities: list[~monitor_query_client.models.MetricAvailability]
    :param id: the resource identifier of the metric definition.
    :type id: str
    :param dimensions: the name and the display name of the dimension, i.e. it is a localizable
     string.
    :type dimensions: list[~monitor_query_client.models.LocalizableString]
    """

    _attribute_map = {
        'is_dimension_required': {'key': 'isDimensionRequired', 'type': 'bool'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'name': {'key': 'name', 'type': 'LocalizableString'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'metric_class': {'key': 'metricClass', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'primary_aggregation_type': {'key': 'primaryAggregationType', 'type': 'str'},
        'supported_aggregation_types': {'key': 'supportedAggregationTypes', 'type': '[str]'},
        'metric_availabilities': {'key': 'metricAvailabilities', 'type': '[MetricAvailability]'},
        'id': {'key': 'id', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[LocalizableString]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetricDefinition, self).__init__(**kwargs)
        self.is_dimension_required = kwargs.get('is_dimension_required', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.namespace = kwargs.get('namespace', None)
        self.name = kwargs.get('name', None)
        self.display_description = kwargs.get('display_description', None)
        self.category = kwargs.get('category', None)
        self.metric_class = kwargs.get('metric_class', None)
        self.unit = kwargs.get('unit', None)
        self.primary_aggregation_type = kwargs.get('primary_aggregation_type', None)
        self.supported_aggregation_types = kwargs.get('supported_aggregation_types', None)
        self.metric_availabilities = kwargs.get('metric_availabilities', None)
        self.id = kwargs.get('id', None)
        self.dimensions = kwargs.get('dimensions', None)


class MetricDefinitionCollection(msrest.serialization.Model):
    """Represents collection of metric definitions.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. the values for the metric definitions.
    :type value: list[~monitor_query_client.models.MetricDefinition]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MetricDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetricDefinitionCollection, self).__init__(**kwargs)
        self.value = kwargs['value']


class MetricNamespace(msrest.serialization.Model):
    """Metric namespace class specifies the metadata for a metric namespace.

    :param id: The ID of the metric namespace.
    :type id: str
    :param type: The type of the namespace.
    :type type: str
    :param name: The escaped name of the namespace.
    :type name: str
    :param classification: Kind of namespace. Possible values include: "Platform", "Custom", "Qos".
    :type classification: str or ~monitor_query_client.models.NamespaceClassification
    :param properties: Properties which include the fully qualified namespace name.
    :type properties: ~monitor_query_client.models.MetricNamespaceName
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'classification': {'key': 'classification', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'MetricNamespaceName'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetricNamespace, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)
        self.classification = kwargs.get('classification', None)
        self.properties = kwargs.get('properties', None)


class MetricNamespaceCollection(msrest.serialization.Model):
    """Represents collection of metric namespaces.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The values for the metric namespaces.
    :type value: list[~monitor_query_client.models.MetricNamespace]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MetricNamespace]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetricNamespaceCollection, self).__init__(**kwargs)
        self.value = kwargs['value']


class MetricNamespaceName(msrest.serialization.Model):
    """The fully qualified metric namespace name.

    :param metric_namespace_name: The metric namespace name.
    :type metric_namespace_name: str
    """

    _attribute_map = {
        'metric_namespace_name': {'key': 'metricNamespaceName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetricNamespaceName, self).__init__(**kwargs)
        self.metric_namespace_name = kwargs.get('metric_namespace_name', None)


class MetricValue(msrest.serialization.Model):
    """Represents a metric value.

    All required parameters must be populated in order to send to Azure.

    :param time_stamp: Required. the timestamp for the metric value in ISO 8601 format.
    :type time_stamp: ~datetime.datetime
    :param average: the average value in the time range.
    :type average: float
    :param minimum: the least value in the time range.
    :type minimum: float
    :param maximum: the greatest value in the time range.
    :type maximum: float
    :param total: the sum of all of the values in the time range.
    :type total: float
    :param count: the number of samples in the time range. Can be used to determine the number of
     values that contributed to the average value.
    :type count: float
    """

    _validation = {
        'time_stamp': {'required': True},
    }

    _attribute_map = {
        'time_stamp': {'key': 'timeStamp', 'type': 'iso-8601'},
        'average': {'key': 'average', 'type': 'float'},
        'minimum': {'key': 'minimum', 'type': 'float'},
        'maximum': {'key': 'maximum', 'type': 'float'},
        'total': {'key': 'total', 'type': 'float'},
        'count': {'key': 'count', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MetricValue, self).__init__(**kwargs)
        self.time_stamp = kwargs['time_stamp']
        self.average = kwargs.get('average', None)
        self.minimum = kwargs.get('minimum', None)
        self.maximum = kwargs.get('maximum', None)
        self.total = kwargs.get('total', None)
        self.count = kwargs.get('count', None)


class QueryBody(msrest.serialization.Model):
    """The Analytics query. Learn more about the `Analytics query syntax <https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/>`_.

    All required parameters must be populated in order to send to Azure.

    :param query: Required. The query to execute.
    :type query: str
    :param timespan: Optional. The timespan over which to query data. This is an ISO8601 time
     period value.  This timespan is applied in addition to any that are specified in the query
     expression.
    :type timespan: str
    :param workspaces: A list of workspaces that are included in the query.
    :type workspaces: list[str]
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'timespan': {'key': 'timespan', 'type': 'str'},
        'workspaces': {'key': 'workspaces', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(QueryBody, self).__init__(**kwargs)
        self.query = kwargs['query']
        self.timespan = kwargs.get('timespan', None)
        self.workspaces = kwargs.get('workspaces', None)


class QueryResults(msrest.serialization.Model):
    """Contains the tables, columns & rows resulting from a query.

    All required parameters must be populated in order to send to Azure.

    :param tables: Required. The list of tables, columns and rows.
    :type tables: list[~monitor_query_client.models.Table]
    :param statistics: Any object.
    :type statistics: object
    :param render: Any object.
    :type render: object
    :param error: The code and message for an error.
    :type error: ~monitor_query_client.models.ErrorInfo
    """

    _validation = {
        'tables': {'required': True},
    }

    _attribute_map = {
        'tables': {'key': 'tables', 'type': '[Table]'},
        'statistics': {'key': 'statistics', 'type': 'object'},
        'render': {'key': 'render', 'type': 'object'},
        'error': {'key': 'error', 'type': 'ErrorInfo'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(QueryResults, self).__init__(**kwargs)
        self.tables = kwargs['tables']
        self.statistics = kwargs.get('statistics', None)
        self.render = kwargs.get('render', None)
        self.error = kwargs.get('error', None)


class Response(msrest.serialization.Model):
    """The response to a metrics query.

    All required parameters must be populated in order to send to Azure.

    :param cost: The integer value representing the relative cost of the query.
    :type cost: int
    :param timespan: Required. The timespan for which the data was retrieved. Its value consists of
     two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned
     back from what was originally requested.
    :type timespan: str
    :param interval: The interval (window size) for which the metric data was returned in.  This
     may be adjusted in the future and returned back from what was originally requested.  This is
     not present if a metadata request was made.
    :type interval: ~datetime.timedelta
    :param namespace: The namespace of the metrics being queried.
    :type namespace: str
    :param resourceregion: The region of the resource being queried for metrics.
    :type resourceregion: str
    :param value: Required. the value of the collection.
    :type value: list[~monitor_query_client.models.Metric]
    """

    _validation = {
        'cost': {'minimum': 0},
        'timespan': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'cost': {'key': 'cost', 'type': 'int'},
        'timespan': {'key': 'timespan', 'type': 'str'},
        'interval': {'key': 'interval', 'type': 'duration'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'resourceregion': {'key': 'resourceregion', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Metric]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Response, self).__init__(**kwargs)
        self.cost = kwargs.get('cost', None)
        self.timespan = kwargs['timespan']
        self.interval = kwargs.get('interval', None)
        self.namespace = kwargs.get('namespace', None)
        self.resourceregion = kwargs.get('resourceregion', None)
        self.value = kwargs['value']


class Table(msrest.serialization.Model):
    """Contains the columns and rows for one table in a query response.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the table.
    :type name: str
    :param columns: Required. The list of columns in this table.
    :type columns: list[~monitor_query_client.models.Column]
    :param rows: Required. The resulting rows from this query.
    :type rows: list[list[object]]
    """

    _validation = {
        'name': {'required': True},
        'columns': {'required': True},
        'rows': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'columns': {'key': 'columns', 'type': '[Column]'},
        'rows': {'key': 'rows', 'type': '[[object]]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Table, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.columns = kwargs['columns']
        self.rows = kwargs['rows']


class TimeSeriesElement(msrest.serialization.Model):
    """A time series result type. The discriminator value is always TimeSeries in this case.

    :param metadatavalues: the metadata values returned if $filter was specified in the call.
    :type metadatavalues: list[~monitor_query_client.models.MetadataValue]
    :param data: An array of data points representing the metric values.  This is only returned if
     a result type of data is specified.
    :type data: list[~monitor_query_client.models.MetricValue]
    """

    _attribute_map = {
        'metadatavalues': {'key': 'metadatavalues', 'type': '[MetadataValue]'},
        'data': {'key': 'data', 'type': '[MetricValue]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TimeSeriesElement, self).__init__(**kwargs)
        self.metadatavalues = kwargs.get('metadatavalues', None)
        self.data = kwargs.get('data', None)
