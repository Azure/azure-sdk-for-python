# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_discriminator, rest_field
from ._enums import AddonType, RoleTypes, TriggerEventType

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    """


class Addon(ProxyResource):
    """Role Addon.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ArcAddon, IoTAddon

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar kind: Addon type. Known values are: "IotEdge" and "ArcForKubernetes".
    :vartype kind: str or ~azure.mgmt.databoxedge.models.AddonType
    """

    __mapping__: dict[str, _Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create"])
    """Addon type. Known values are: \"IotEdge\" and \"ArcForKubernetes\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Address(_Model):
    """The shipping address of the customer.

    :ivar address_line1: The address line1.
    :vartype address_line1: str
    :ivar address_line2: The address line2.
    :vartype address_line2: str
    :ivar address_line3: The address line3.
    :vartype address_line3: str
    :ivar postal_code: The postal code.
    :vartype postal_code: str
    :ivar city: The city name.
    :vartype city: str
    :ivar state: The state name.
    :vartype state: str
    :ivar country: The country name. Required.
    :vartype country: str
    """

    address_line1: Optional[str] = rest_field(
        name="addressLine1", visibility=["read", "create", "update", "delete", "query"]
    )
    """The address line1."""
    address_line2: Optional[str] = rest_field(
        name="addressLine2", visibility=["read", "create", "update", "delete", "query"]
    )
    """The address line2."""
    address_line3: Optional[str] = rest_field(
        name="addressLine3", visibility=["read", "create", "update", "delete", "query"]
    )
    """The address line3."""
    postal_code: Optional[str] = rest_field(
        name="postalCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """The postal code."""
    city: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The city name."""
    state: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The state name."""
    country: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The country name. Required."""

    @overload
    def __init__(
        self,
        *,
        country: str,
        address_line1: Optional[str] = None,
        address_line2: Optional[str] = None,
        address_line3: Optional[str] = None,
        postal_code: Optional[str] = None,
        city: Optional[str] = None,
        state: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Alert(ProxyResource):
    """Alert on the data box edge/gateway device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: Properties of alert.
    :vartype properties: ~azure.mgmt.databoxedge.models.AlertProperties
    """

    properties: Optional["_models.AlertProperties"] = rest_field(visibility=["read"])
    """Properties of alert."""

    __flattened_items = [
        "title",
        "alert_type",
        "appeared_at_date_time",
        "recommendation",
        "severity",
        "error_details",
        "detailed_information",
    ]


class AlertErrorDetails(_Model):
    """Error details for the alert.

    :ivar error_code: Error code.
    :vartype error_code: str
    :ivar error_message: Error Message.
    :vartype error_message: str
    :ivar occurrences: Number of occurrences.
    :vartype occurrences: int
    """

    error_code: Optional[str] = rest_field(name="errorCode", visibility=["read"])
    """Error code."""
    error_message: Optional[str] = rest_field(name="errorMessage", visibility=["read"])
    """Error Message."""
    occurrences: Optional[int] = rest_field(visibility=["read"])
    """Number of occurrences."""


class AlertProperties(_Model):
    """Properties of alert.

    :ivar title: Alert title.
    :vartype title: str
    :ivar alert_type: Alert type.
    :vartype alert_type: str
    :ivar appeared_at_date_time: UTC time when the alert appeared.
    :vartype appeared_at_date_time: ~datetime.datetime
    :ivar recommendation: Alert recommendation.
    :vartype recommendation: str
    :ivar severity: Severity of the alert. Known values are: "Informational", "Warning", and
     "Critical".
    :vartype severity: str or ~azure.mgmt.databoxedge.models.AlertSeverity
    :ivar error_details: Error details of the alert.
    :vartype error_details: ~azure.mgmt.databoxedge.models.AlertErrorDetails
    :ivar detailed_information: Alert details.
    :vartype detailed_information: dict[str, str]
    """

    title: Optional[str] = rest_field(visibility=["read"])
    """Alert title."""
    alert_type: Optional[str] = rest_field(name="alertType", visibility=["read"])
    """Alert type."""
    appeared_at_date_time: Optional[datetime.datetime] = rest_field(
        name="appearedAtDateTime", visibility=["read"], format="rfc3339"
    )
    """UTC time when the alert appeared."""
    recommendation: Optional[str] = rest_field(visibility=["read"])
    """Alert recommendation."""
    severity: Optional[Union[str, "_models.AlertSeverity"]] = rest_field(visibility=["read"])
    """Severity of the alert. Known values are: \"Informational\", \"Warning\", and \"Critical\"."""
    error_details: Optional["_models.AlertErrorDetails"] = rest_field(name="errorDetails", visibility=["read"])
    """Error details of the alert."""
    detailed_information: Optional[dict[str, str]] = rest_field(name="detailedInformation", visibility=["read"])
    """Alert details."""


class ArcAddon(Addon, discriminator="ArcForKubernetes"):
    """Arc Addon.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: Properties specific to Arc addon. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.ArcAddonProperties
    :ivar kind: Addon type. Required.
    :vartype kind: str or ~azure.mgmt.databoxedge.models.ARC_FOR_KUBERNETES
    """

    properties: "_models.ArcAddonProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties specific to Arc addon. Required."""
    kind: Literal[AddonType.ARC_FOR_KUBERNETES] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Addon type. Required."""

    __flattened_items = [
        "subscription_id",
        "resource_group_name",
        "resource_name",
        "resource_location",
        "version",
        "host_platform",
        "host_platform_type",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ArcAddonProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ArcAddonProperties(_Model):
    """Arc addon properties.

    :ivar subscription_id: Arc resource subscription Id. Required.
    :vartype subscription_id: str
    :ivar resource_group_name: Arc resource group name. Required.
    :vartype resource_group_name: str
    :ivar resource_name: Arc resource Name. Required.
    :vartype resource_name: str
    :ivar resource_location: Arc resource location. Required.
    :vartype resource_location: str
    :ivar version: Arc resource version.
    :vartype version: str
    :ivar host_platform: Host OS supported by the Arc addon. Known values are: "Windows" and
     "Linux".
    :vartype host_platform: str or ~azure.mgmt.databoxedge.models.PlatformType
    :ivar host_platform_type: Platform where the runtime is hosted. Known values are:
     "KubernetesCluster" and "LinuxVM".
    :vartype host_platform_type: str or ~azure.mgmt.databoxedge.models.HostPlatformType
    :ivar provisioning_state: Addon Provisioning State. Known values are: "Invalid", "Creating",
     "Created", "Updating", "Reconfiguring", "Failed", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.databoxedge.models.AddonState
    """

    subscription_id: str = rest_field(name="subscriptionId", visibility=["read", "create", "update", "delete", "query"])
    """Arc resource subscription Id. Required."""
    resource_group_name: str = rest_field(
        name="resourceGroupName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Arc resource group name. Required."""
    resource_name: str = rest_field(name="resourceName", visibility=["read", "create", "update", "delete", "query"])
    """Arc resource Name. Required."""
    resource_location: str = rest_field(
        name="resourceLocation", visibility=["read", "create", "update", "delete", "query"]
    )
    """Arc resource location. Required."""
    version: Optional[str] = rest_field(visibility=["read"])
    """Arc resource version."""
    host_platform: Optional[Union[str, "_models.PlatformType"]] = rest_field(name="hostPlatform", visibility=["read"])
    """Host OS supported by the Arc addon. Known values are: \"Windows\" and \"Linux\"."""
    host_platform_type: Optional[Union[str, "_models.HostPlatformType"]] = rest_field(
        name="hostPlatformType", visibility=["read"]
    )
    """Platform where the runtime is hosted. Known values are: \"KubernetesCluster\" and \"LinuxVM\"."""
    provisioning_state: Optional[Union[str, "_models.AddonState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Addon Provisioning State. Known values are: \"Invalid\", \"Creating\", \"Created\",
     \"Updating\", \"Reconfiguring\", \"Failed\", and \"Deleting\"."""

    @overload
    def __init__(
        self,
        *,
        subscription_id: str,
        resource_group_name: str,
        resource_name: str,
        resource_location: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ARMBaseModel(_Model):
    """Represents the base class for all object models.

    :ivar id: The path ID that uniquely identifies the object.
    :vartype id: str
    :ivar name: The object name.
    :vartype name: str
    :ivar type: The hierarchical type of the object.
    :vartype type: str
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """The path ID that uniquely identifies the object."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The object name."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The hierarchical type of the object."""


class AsymmetricEncryptedSecret(_Model):
    """Represent the secrets intended for encryption with asymmetric key pair.

    :ivar value: The value of the secret. Required.
    :vartype value: str
    :ivar encryption_cert_thumbprint: Thumbprint certificate used to encrypt \\"Value\\". If the
     value is unencrypted, it will be null.
    :vartype encryption_cert_thumbprint: str
    :ivar encryption_algorithm: The algorithm used to encrypt "Value". Required. Known values are:
     "None", "AES256", and "RSAES_PKCS1_v_1_5".
    :vartype encryption_algorithm: str or ~azure.mgmt.databoxedge.models.EncryptionAlgorithm
    """

    value: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the secret. Required."""
    encryption_cert_thumbprint: Optional[str] = rest_field(
        name="encryptionCertThumbprint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Thumbprint certificate used to encrypt \\"Value\\". If the value is unencrypted, it will be
     null."""
    encryption_algorithm: Union[str, "_models.EncryptionAlgorithm"] = rest_field(
        name="encryptionAlgorithm", visibility=["read", "create", "update", "delete", "query"]
    )
    """The algorithm used to encrypt \"Value\". Required. Known values are: \"None\", \"AES256\", and
     \"RSAES_PKCS1_v_1_5\"."""

    @overload
    def __init__(
        self,
        *,
        value: str,
        encryption_algorithm: Union[str, "_models.EncryptionAlgorithm"],
        encryption_cert_thumbprint: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Authentication(_Model):
    """Authentication mechanism for IoT devices.

    :ivar symmetric_key: Symmetric key for authentication.
    :vartype symmetric_key: ~azure.mgmt.databoxedge.models.SymmetricKey
    """

    symmetric_key: Optional["_models.SymmetricKey"] = rest_field(
        name="symmetricKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Symmetric key for authentication."""

    @overload
    def __init__(
        self,
        *,
        symmetric_key: Optional["_models.SymmetricKey"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureContainerInfo(_Model):
    """Azure container mapping of the endpoint.

    :ivar storage_account_credential_id: ID of the storage account credential used to access
     storage. Required.
    :vartype storage_account_credential_id: str
    :ivar container_name: Container name (Based on the data format specified, this represents the
     name of Azure Files/Page blob/Block blob). Required.
    :vartype container_name: str
    :ivar data_format: Storage format used for the file represented by the share. Required. Known
     values are: "BlockBlob", "PageBlob", and "AzureFile".
    :vartype data_format: str or ~azure.mgmt.databoxedge.models.AzureContainerDataFormat
    """

    storage_account_credential_id: str = rest_field(
        name="storageAccountCredentialId", visibility=["read", "create", "update", "delete", "query"]
    )
    """ID of the storage account credential used to access storage. Required."""
    container_name: str = rest_field(name="containerName", visibility=["read", "create", "update", "delete", "query"])
    """Container name (Based on the data format specified, this represents the name of Azure
     Files/Page blob/Block blob). Required."""
    data_format: Union[str, "_models.AzureContainerDataFormat"] = rest_field(
        name="dataFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Storage format used for the file represented by the share. Required. Known values are:
     \"BlockBlob\", \"PageBlob\", and \"AzureFile\"."""

    @overload
    def __init__(
        self,
        *,
        storage_account_credential_id: str,
        container_name: str,
        data_format: Union[str, "_models.AzureContainerDataFormat"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BandwidthSchedule(ProxyResource):
    """The bandwidth schedule details.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The properties of the bandwidth schedule. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.BandwidthScheduleProperties
    """

    properties: "_models.BandwidthScheduleProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the bandwidth schedule. Required."""

    __flattened_items = ["start", "stop", "rate_in_mbps", "days"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.BandwidthScheduleProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class BandwidthScheduleProperties(_Model):
    """The properties of the bandwidth schedule.

    :ivar start: The start time of the schedule in UTC. Required.
    :vartype start: str
    :ivar stop: The stop time of the schedule in UTC. Required.
    :vartype stop: str
    :ivar rate_in_mbps: The bandwidth rate in Mbps. Required.
    :vartype rate_in_mbps: int
    :ivar days: The days of the week when this schedule is applicable. Required.
    :vartype days: list[str or ~azure.mgmt.databoxedge.models.DayOfWeek]
    """

    start: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The start time of the schedule in UTC. Required."""
    stop: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The stop time of the schedule in UTC. Required."""
    rate_in_mbps: int = rest_field(name="rateInMbps", visibility=["read", "create", "update", "delete", "query"])
    """The bandwidth rate in Mbps. Required."""
    days: list[Union[str, "_models.DayOfWeek"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The days of the week when this schedule is applicable. Required."""

    @overload
    def __init__(
        self,
        *,
        start: str,
        stop: str,
        rate_in_mbps: int,
        days: list[Union[str, "_models.DayOfWeek"]],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClientAccessRight(_Model):
    """The mapping between a particular client IP and the type of access client has on the NFS share.

    :ivar client: IP of the client. Required.
    :vartype client: str
    :ivar access_permission: Type of access to be allowed for the client. Required. Known values
     are: "NoAccess", "ReadOnly", and "ReadWrite".
    :vartype access_permission: str or ~azure.mgmt.databoxedge.models.ClientPermissionType
    """

    client: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """IP of the client. Required."""
    access_permission: Union[str, "_models.ClientPermissionType"] = rest_field(
        name="accessPermission", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of access to be allowed for the client. Required. Known values are: \"NoAccess\",
     \"ReadOnly\", and \"ReadWrite\"."""

    @overload
    def __init__(
        self,
        *,
        client: str,
        access_permission: Union[str, "_models.ClientPermissionType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Role(ProxyResource):
    """Compute role.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CloudEdgeManagementRole, IoTRole, KubernetesRole, MECRole

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar kind: Role type. Known values are: "IOT", "ASA", "Functions", "Cognitive", "MEC",
     "CloudEdgeManagement", and "Kubernetes".
    :vartype kind: str or ~azure.mgmt.databoxedge.models.RoleTypes
    """

    __mapping__: dict[str, _Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create"])
    """Role type. Known values are: \"IOT\", \"ASA\", \"Functions\", \"Cognitive\", \"MEC\",
     \"CloudEdgeManagement\", and \"Kubernetes\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CloudEdgeManagementRole(Role, discriminator="CloudEdgeManagement"):
    """The preview of Virtual Machine Cloud Management from the Azure supports deploying and managing
        VMs on your Azure Stack Edge device from Azure Portal.
    For more information, refer to:
        `https://docs.microsoft.com/en-us/azure/databox-online/azure-stack-edge-gpu-virtual-machine-overview
        <https://docs.microsoft.com/en-us/azure/databox-online/azure-stack-edge-gpu-virtual-machine-overview>`_
    By using this feature, you agree to the preview legal terms. See the
        `https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/
        <https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/>`_ for additional
        details.

        :ivar id: Fully qualified resource ID for the resource. Ex -
         /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
        :vartype id: str
        :ivar name: The name of the resource.
        :vartype name: str
        :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
         "Microsoft.Storage/storageAccounts".
        :vartype type: str
        :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
         information.
        :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
        :ivar properties: Properties specific to CloudEdgeManagementRole role.
        :vartype properties: ~azure.mgmt.databoxedge.models.CloudEdgeManagementRoleProperties
        :ivar kind: Role type. Required.
        :vartype kind: str or ~azure.mgmt.databoxedge.models.CLOUD_EDGE_MANAGEMENT
    """

    properties: Optional["_models.CloudEdgeManagementRoleProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to CloudEdgeManagementRole role."""
    kind: Literal[RoleTypes.CLOUD_EDGE_MANAGEMENT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Role type. Required."""

    __flattened_items = ["local_management_status", "edge_profile", "role_status"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.CloudEdgeManagementRoleProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CloudEdgeManagementRoleProperties(_Model):
    """CloudEdgeManagement Role properties.

    :ivar local_management_status: Local Edge Management Status. Known values are: "Enabled" and
     "Disabled".
    :vartype local_management_status: str or ~azure.mgmt.databoxedge.models.RoleStatus
    :ivar edge_profile: Edge Profile of the resource.
    :vartype edge_profile: ~azure.mgmt.databoxedge.models.EdgeProfile
    :ivar role_status: Role status. Required. Known values are: "Enabled" and "Disabled".
    :vartype role_status: str or ~azure.mgmt.databoxedge.models.RoleStatus
    """

    local_management_status: Optional[Union[str, "_models.RoleStatus"]] = rest_field(
        name="localManagementStatus", visibility=["read"]
    )
    """Local Edge Management Status. Known values are: \"Enabled\" and \"Disabled\"."""
    edge_profile: Optional["_models.EdgeProfile"] = rest_field(name="edgeProfile", visibility=["read"])
    """Edge Profile of the resource."""
    role_status: Union[str, "_models.RoleStatus"] = rest_field(
        name="roleStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Role status. Required. Known values are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        role_status: Union[str, "_models.RoleStatus"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CloudError(_Model):
    """An error response from the service.

    :ivar error: The error details.
    :vartype error: ~azure.mgmt.databoxedge.models.CloudErrorBody
    """

    error: Optional["_models.CloudErrorBody"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error details."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.CloudErrorBody"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CloudErrorBody(_Model):
    """An error response from the service.

    :ivar code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for display in a user
     interface.
    :vartype message: str
    :ivar details: A list of additional details about the error.
    :vartype details: list[~azure.mgmt.databoxedge.models.CloudErrorBody]
    """

    code: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A message describing the error, intended to be suitable for display in a user interface."""
    details: Optional[list["_models.CloudErrorBody"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """A list of additional details about the error."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        details: Optional[list["_models.CloudErrorBody"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterCapacityViewData(_Model):
    """Cluster Compute Data.

    :ivar fqdn: The FQDN of the cluster.
    :vartype fqdn: str
    :ivar gpu_capacity: The cluster's GPU capacity.
    :vartype gpu_capacity: ~azure.mgmt.databoxedge.models.ClusterGpuCapacity
    :ivar memory_capacity: The cluster's memory capacity.
    :vartype memory_capacity: ~azure.mgmt.databoxedge.models.ClusterMemoryCapacity
    :ivar last_refreshed_time: The last time at which the ClusterCapacityViewData was set.
    :vartype last_refreshed_time: ~datetime.datetime
    :ivar total_provisioned_non_hpn_cores: The total # of vCPUs provisioned by non-HPN VM per
     appliance.
    :vartype total_provisioned_non_hpn_cores: int
    """

    fqdn: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The FQDN of the cluster."""
    gpu_capacity: Optional["_models.ClusterGpuCapacity"] = rest_field(
        name="gpuCapacity", visibility=["read", "create", "update", "delete", "query"]
    )
    """The cluster's GPU capacity."""
    memory_capacity: Optional["_models.ClusterMemoryCapacity"] = rest_field(
        name="memoryCapacity", visibility=["read", "create", "update", "delete", "query"]
    )
    """The cluster's memory capacity."""
    last_refreshed_time: Optional[datetime.datetime] = rest_field(
        name="lastRefreshedTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The last time at which the ClusterCapacityViewData was set."""
    total_provisioned_non_hpn_cores: Optional[int] = rest_field(
        name="totalProvisionedNonHpnCores", visibility=["read", "create", "update", "delete", "query"]
    )
    """The total # of vCPUs provisioned by non-HPN VM per appliance."""

    @overload
    def __init__(
        self,
        *,
        fqdn: Optional[str] = None,
        gpu_capacity: Optional["_models.ClusterGpuCapacity"] = None,
        memory_capacity: Optional["_models.ClusterMemoryCapacity"] = None,
        last_refreshed_time: Optional[datetime.datetime] = None,
        total_provisioned_non_hpn_cores: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterGpuCapacity(_Model):
    """Cluster GPU Data.

    :ivar gpu_type: The cluster GPU Type.
    :vartype gpu_type: str
    :ivar gpu_used_units_count: The used GPU units count in the cluster.
    :vartype gpu_used_units_count: int
    :ivar gpu_free_units_count: The free GPU units count in the cluster.
    :vartype gpu_free_units_count: int
    :ivar gpu_reserved_for_failover_units_count: The GPU units count reserved for failover in the
     cluster.
    :vartype gpu_reserved_for_failover_units_count: int
    :ivar gpu_total_units_count: The total GPU units count in the cluster.
    :vartype gpu_total_units_count: int
    """

    gpu_type: Optional[str] = rest_field(name="gpuType", visibility=["read", "create", "update", "delete", "query"])
    """The cluster GPU Type."""
    gpu_used_units_count: Optional[int] = rest_field(
        name="gpuUsedUnitsCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The used GPU units count in the cluster."""
    gpu_free_units_count: Optional[int] = rest_field(
        name="gpuFreeUnitsCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The free GPU units count in the cluster."""
    gpu_reserved_for_failover_units_count: Optional[int] = rest_field(
        name="gpuReservedForFailoverUnitsCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The GPU units count reserved for failover in the cluster."""
    gpu_total_units_count: Optional[int] = rest_field(
        name="gpuTotalUnitsCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The total GPU units count in the cluster."""

    @overload
    def __init__(
        self,
        *,
        gpu_type: Optional[str] = None,
        gpu_used_units_count: Optional[int] = None,
        gpu_free_units_count: Optional[int] = None,
        gpu_reserved_for_failover_units_count: Optional[int] = None,
        gpu_total_units_count: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterMemoryCapacity(_Model):
    """NodeCapacityInfo defines the required information to determine the placement of a VM.

    :ivar cluster_free_memory_mb: The free memory in the cluster in MB.
    :vartype cluster_free_memory_mb: float
    :ivar cluster_used_memory_mb: The used memory in the cluster in MB.
    :vartype cluster_used_memory_mb: float
    :ivar cluster_failover_memory_mb: The failover memory in the cluster in MB.
    :vartype cluster_failover_memory_mb: float
    :ivar cluster_fragmentation_memory_mb: The fragmentation memory in the cluster in MB.
    :vartype cluster_fragmentation_memory_mb: float
    :ivar cluster_hyperv_reserve_memory_mb: The memory reserved for Hyper-V in the cluster in MB.
    :vartype cluster_hyperv_reserve_memory_mb: float
    :ivar cluster_infra_vm_memory_mb: The memory of the Infra VM in the cluster in MB.
    :vartype cluster_infra_vm_memory_mb: float
    :ivar cluster_total_memory_mb: The total memory in the cluster in MB.
    :vartype cluster_total_memory_mb: float
    :ivar cluster_non_failover_vm_mb: The non-failover memory in the cluster in MB.
    :vartype cluster_non_failover_vm_mb: float
    :ivar cluster_memory_used_by_vms_mb: The memory used by VMs in the cluster in MB.
    :vartype cluster_memory_used_by_vms_mb: float
    """

    cluster_free_memory_mb: Optional[float] = rest_field(
        name="clusterFreeMemoryMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The free memory in the cluster in MB."""
    cluster_used_memory_mb: Optional[float] = rest_field(
        name="clusterUsedMemoryMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The used memory in the cluster in MB."""
    cluster_failover_memory_mb: Optional[float] = rest_field(
        name="clusterFailoverMemoryMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The failover memory in the cluster in MB."""
    cluster_fragmentation_memory_mb: Optional[float] = rest_field(
        name="clusterFragmentationMemoryMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The fragmentation memory in the cluster in MB."""
    cluster_hyperv_reserve_memory_mb: Optional[float] = rest_field(
        name="clusterHypervReserveMemoryMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The memory reserved for Hyper-V in the cluster in MB."""
    cluster_infra_vm_memory_mb: Optional[float] = rest_field(
        name="clusterInfraVmMemoryMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The memory of the Infra VM in the cluster in MB."""
    cluster_total_memory_mb: Optional[float] = rest_field(
        name="clusterTotalMemoryMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The total memory in the cluster in MB."""
    cluster_non_failover_vm_mb: Optional[float] = rest_field(
        name="clusterNonFailoverVmMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The non-failover memory in the cluster in MB."""
    cluster_memory_used_by_vms_mb: Optional[float] = rest_field(
        name="clusterMemoryUsedByVmsMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The memory used by VMs in the cluster in MB."""

    @overload
    def __init__(
        self,
        *,
        cluster_free_memory_mb: Optional[float] = None,
        cluster_used_memory_mb: Optional[float] = None,
        cluster_failover_memory_mb: Optional[float] = None,
        cluster_fragmentation_memory_mb: Optional[float] = None,
        cluster_hyperv_reserve_memory_mb: Optional[float] = None,
        cluster_infra_vm_memory_mb: Optional[float] = None,
        cluster_total_memory_mb: Optional[float] = None,
        cluster_non_failover_vm_mb: Optional[float] = None,
        cluster_memory_used_by_vms_mb: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterStorageViewData(_Model):
    """Cluster Storage Data.

    :ivar cluster_total_storage_mb: Total storage on the cluster in MB.
    :vartype cluster_total_storage_mb: float
    :ivar cluster_free_storage_mb: The available or free storage on the cluster in MB.
    :vartype cluster_free_storage_mb: float
    """

    cluster_total_storage_mb: Optional[float] = rest_field(
        name="clusterTotalStorageMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """Total storage on the cluster in MB."""
    cluster_free_storage_mb: Optional[float] = rest_field(
        name="clusterFreeStorageMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The available or free storage on the cluster in MB."""

    @overload
    def __init__(
        self,
        *,
        cluster_total_storage_mb: Optional[float] = None,
        cluster_free_storage_mb: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CniConfig(_Model):
    """Cni configuration.

    :ivar type: Cni type.
    :vartype type: str
    :ivar version: Cni version.
    :vartype version: str
    :ivar pod_subnet: Pod Subnet.
    :vartype pod_subnet: str
    :ivar service_subnet: Service subnet.
    :vartype service_subnet: str
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """Cni type."""
    version: Optional[str] = rest_field(visibility=["read"])
    """Cni version."""
    pod_subnet: Optional[str] = rest_field(name="podSubnet", visibility=["read"])
    """Pod Subnet."""
    service_subnet: Optional[str] = rest_field(name="serviceSubnet", visibility=["read"])
    """Service subnet."""


class ComputeResource(_Model):
    """Compute infrastructure Resource.

    :ivar processor_count: Processor count. Required.
    :vartype processor_count: int
    :ivar memory_in_gb: Memory in GB. Required.
    :vartype memory_in_gb: int
    """

    processor_count: int = rest_field(name="processorCount", visibility=["read", "create", "update", "delete", "query"])
    """Processor count. Required."""
    memory_in_gb: int = rest_field(name="memoryInGB", visibility=["read", "create", "update", "delete", "query"])
    """Memory in GB. Required."""

    @overload
    def __init__(
        self,
        *,
        processor_count: int,
        memory_in_gb: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContactDetails(_Model):
    """Contains all the contact details of the customer.

    :ivar contact_person: The contact person name. Required.
    :vartype contact_person: str
    :ivar company_name: The name of the company. Required.
    :vartype company_name: str
    :ivar phone: The phone number. Required.
    :vartype phone: str
    :ivar email_list: The email list. Required.
    :vartype email_list: list[str]
    """

    contact_person: str = rest_field(name="contactPerson", visibility=["read", "create", "update", "delete", "query"])
    """The contact person name. Required."""
    company_name: str = rest_field(name="companyName", visibility=["read", "create", "update", "delete", "query"])
    """The name of the company. Required."""
    phone: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The phone number. Required."""
    email_list: list[str] = rest_field(name="emailList", visibility=["read", "create", "update", "delete", "query"])
    """The email list. Required."""

    @overload
    def __init__(
        self,
        *,
        contact_person: str,
        company_name: str,
        phone: str,
        email_list: list[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Container(ProxyResource):
    """Represents a container on the  Data Box Edge/Gateway device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The container properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.ContainerProperties
    """

    properties: "_models.ContainerProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The container properties. Required."""

    __flattened_items = ["container_status", "data_format", "refresh_details", "created_date_time"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ContainerProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ContainerProperties(_Model):
    """The container properties.

    :ivar container_status: Current status of the container. Known values are: "OK", "Offline",
     "Unknown", "Updating", and "NeedsAttention".
    :vartype container_status: str or ~azure.mgmt.databoxedge.models.ContainerStatus
    :ivar data_format: DataFormat for Container. Required. Known values are: "BlockBlob",
     "PageBlob", and "AzureFile".
    :vartype data_format: str or ~azure.mgmt.databoxedge.models.AzureContainerDataFormat
    :ivar refresh_details: Details of the refresh job on this container.
    :vartype refresh_details: ~azure.mgmt.databoxedge.models.RefreshDetails
    :ivar created_date_time: The UTC time when container got created.
    :vartype created_date_time: ~datetime.datetime
    """

    container_status: Optional[Union[str, "_models.ContainerStatus"]] = rest_field(
        name="containerStatus", visibility=["read"]
    )
    """Current status of the container. Known values are: \"OK\", \"Offline\", \"Unknown\",
     \"Updating\", and \"NeedsAttention\"."""
    data_format: Union[str, "_models.AzureContainerDataFormat"] = rest_field(
        name="dataFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """DataFormat for Container. Required. Known values are: \"BlockBlob\", \"PageBlob\", and
     \"AzureFile\"."""
    refresh_details: Optional["_models.RefreshDetails"] = rest_field(name="refreshDetails", visibility=["read"])
    """Details of the refresh job on this container."""
    created_date_time: Optional[datetime.datetime] = rest_field(
        name="createdDateTime", visibility=["read"], format="rfc3339"
    )
    """The UTC time when container got created."""

    @overload
    def __init__(
        self,
        *,
        data_format: Union[str, "_models.AzureContainerDataFormat"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataBoxEdgeDevice(TrackedResource):
    """The Data Box Edge/Gateway device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The properties of the Data Box Edge/Gateway device.
    :vartype properties: ~azure.mgmt.databoxedge.models.DataBoxEdgeDeviceProperties
    :ivar sku: The SKU type.
    :vartype sku: ~azure.mgmt.databoxedge.models.Sku
    :ivar etag: The etag for the devices.
    :vartype etag: str
    :ivar identity: Msi identity of the resource.
    :vartype identity: ~azure.mgmt.databoxedge.models.ResourceIdentity
    :ivar kind: The kind of the device. Known values are: "AzureDataBoxGateway", "AzureStackEdge",
     "AzureStackHub", and "AzureModularDataCentre".
    :vartype kind: str or ~azure.mgmt.databoxedge.models.DataBoxEdgeDeviceKind
    """

    properties: Optional["_models.DataBoxEdgeDeviceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the Data Box Edge/Gateway device."""
    sku: Optional["_models.Sku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The SKU type."""
    etag: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The etag for the devices."""
    identity: Optional["_models.ResourceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Msi identity of the resource."""
    kind: Optional[Union[str, "_models.DataBoxEdgeDeviceKind"]] = rest_field(visibility=["read"])
    """The kind of the device. Known values are: \"AzureDataBoxGateway\", \"AzureStackEdge\",
     \"AzureStackHub\", and \"AzureModularDataCentre\"."""

    __flattened_items = [
        "system_data",
        "data_box_edge_device_status",
        "serial_number",
        "description",
        "model_description",
        "device_type",
        "friendly_name",
        "culture",
        "device_model",
        "device_software_version",
        "device_local_capacity",
        "time_zone",
        "device_hcs_version",
        "configured_role_types",
        "node_count",
        "resource_move_details",
        "edge_profile",
        "data_residency",
        "kubernetes_workload_profile",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[dict[str, str]] = None,
        properties: Optional["_models.DataBoxEdgeDeviceProperties"] = None,
        sku: Optional["_models.Sku"] = None,
        etag: Optional[str] = None,
        identity: Optional["_models.ResourceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DataBoxEdgeDeviceExtendedInfo(ARMBaseModel):
    """The extended Info of the Data Box Edge/Gateway device.

    :ivar id: The path ID that uniquely identifies the object.
    :vartype id: str
    :ivar name: The object name.
    :vartype name: str
    :ivar type: The hierarchical type of the object.
    :vartype type: str
    :ivar properties: The extended info properties.
    :vartype properties: ~azure.mgmt.databoxedge.models.DataBoxEdgeDeviceExtendedInfoProperties
    :ivar system_data: Metadata pertaining to creation and last modification of DataBoxEdgeDevice.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    """

    properties: Optional["_models.DataBoxEdgeDeviceExtendedInfoProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The extended info properties."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Metadata pertaining to creation and last modification of DataBoxEdgeDevice."""

    __flattened_items = [
        "encryption_key_thumbprint",
        "encryption_key",
        "resource_key",
        "client_secret_store_id",
        "client_secret_store_url",
        "channel_integrity_key_name",
        "channel_integrity_key_version",
        "key_vault_sync_status",
        "device_secrets",
        "cluster_witness_type",
        "file_share_witness_location",
        "file_share_witness_username",
        "cloud_witness_storage_account_name",
        "cloud_witness_container_name",
        "cloud_witness_storage_endpoint",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DataBoxEdgeDeviceExtendedInfoProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DataBoxEdgeDeviceExtendedInfoPatch(_Model):
    """The Data Box Edge/Gateway device extended info patch.

    :ivar client_secret_store_id: The Key Vault ARM Id for client secrets.
    :vartype client_secret_store_id: str
    :ivar client_secret_store_url: The url to access the Client Key Vault.
    :vartype client_secret_store_url: str
    :ivar channel_integrity_key_name: The name for Channel Integrity Key stored in the Client Key
     Vault.
    :vartype channel_integrity_key_name: str
    :ivar channel_integrity_key_version: The version of Channel Integrity Key stored in the Client
     Key Vault.
    :vartype channel_integrity_key_version: str
    :ivar sync_status: For changing or to initiate the resync to key-vault set the status to
     KeyVaultSyncPending, rest of the status will not be applicable. Known values are:
     "KeyVaultSynced", "KeyVaultSyncFailed", "KeyVaultNotConfigured", "KeyVaultSyncPending",
     "KeyVaultSyncing", and "KeyVaultNotSynced".
    :vartype sync_status: str or ~azure.mgmt.databoxedge.models.KeyVaultSyncStatus
    """

    client_secret_store_id: Optional[str] = rest_field(
        name="clientSecretStoreId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Key Vault ARM Id for client secrets."""
    client_secret_store_url: Optional[str] = rest_field(
        name="clientSecretStoreUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """The url to access the Client Key Vault."""
    channel_integrity_key_name: Optional[str] = rest_field(
        name="channelIntegrityKeyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name for Channel Integrity Key stored in the Client Key Vault."""
    channel_integrity_key_version: Optional[str] = rest_field(
        name="channelIntegrityKeyVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The version of Channel Integrity Key stored in the Client Key Vault."""
    sync_status: Optional[Union[str, "_models.KeyVaultSyncStatus"]] = rest_field(
        name="syncStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """For changing or to initiate the resync to key-vault set the status to KeyVaultSyncPending, rest
     of the status will not be applicable. Known values are: \"KeyVaultSynced\",
     \"KeyVaultSyncFailed\", \"KeyVaultNotConfigured\", \"KeyVaultSyncPending\",
     \"KeyVaultSyncing\", and \"KeyVaultNotSynced\"."""

    @overload
    def __init__(
        self,
        *,
        client_secret_store_id: Optional[str] = None,
        client_secret_store_url: Optional[str] = None,
        channel_integrity_key_name: Optional[str] = None,
        channel_integrity_key_version: Optional[str] = None,
        sync_status: Optional[Union[str, "_models.KeyVaultSyncStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataBoxEdgeDeviceExtendedInfoProperties(_Model):
    """The properties of the Data Box Edge/Gateway device extended info.

    :ivar encryption_key_thumbprint: The digital signature of encrypted certificate.
    :vartype encryption_key_thumbprint: str
    :ivar encryption_key: The public part of the encryption certificate. Client uses this to
     encrypt any secret.
    :vartype encryption_key: str
    :ivar resource_key: The Resource ID of the Resource.
    :vartype resource_key: str
    :ivar client_secret_store_id: The Key Vault ARM Id for client secrets.
    :vartype client_secret_store_id: str
    :ivar client_secret_store_url: The url to access the Client Key Vault.
    :vartype client_secret_store_url: str
    :ivar channel_integrity_key_name: The name of Channel Integrity Key stored in the Client Key
     Vault.
    :vartype channel_integrity_key_name: str
    :ivar channel_integrity_key_version: The version of Channel Integrity Key stored in the Client
     Key Vault.
    :vartype channel_integrity_key_version: str
    :ivar key_vault_sync_status: Key vault sync status. Known values are: "KeyVaultSynced",
     "KeyVaultSyncFailed", "KeyVaultNotConfigured", "KeyVaultSyncPending", "KeyVaultSyncing", and
     "KeyVaultNotSynced".
    :vartype key_vault_sync_status: str or ~azure.mgmt.databoxedge.models.KeyVaultSyncStatus
    :ivar device_secrets: Device secrets, will be returned only with ODataFilter
     $expand=deviceSecrets.
    :vartype device_secrets: dict[str, ~azure.mgmt.databoxedge.models.Secret]
    :ivar cluster_witness_type: Cluster Witness Type. Known values are: "None", "Cloud", and
     "FileShare".
    :vartype cluster_witness_type: str or ~azure.mgmt.databoxedge.models.ClusterWitnessType
    :ivar file_share_witness_location: The witness location of file share.
    :vartype file_share_witness_location: str
    :ivar file_share_witness_username: The username of file share.
    :vartype file_share_witness_username: str
    :ivar cloud_witness_storage_account_name: The Cloud Witness Storage account name.
    :vartype cloud_witness_storage_account_name: str
    :ivar cloud_witness_container_name: The Container for cloud witness in the storage account.
    :vartype cloud_witness_container_name: str
    :ivar cloud_witness_storage_endpoint: The Azure service endpoint of the cloud witness storage
     account.
    :vartype cloud_witness_storage_endpoint: str
    """

    encryption_key_thumbprint: Optional[str] = rest_field(
        name="encryptionKeyThumbprint", visibility=["read", "create", "update", "delete", "query"]
    )
    """The digital signature of encrypted certificate."""
    encryption_key: Optional[str] = rest_field(
        name="encryptionKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """The public part of the encryption certificate. Client uses this to encrypt any secret."""
    resource_key: Optional[str] = rest_field(name="resourceKey", visibility=["read"])
    """The Resource ID of the Resource."""
    client_secret_store_id: Optional[str] = rest_field(
        name="clientSecretStoreId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Key Vault ARM Id for client secrets."""
    client_secret_store_url: Optional[str] = rest_field(
        name="clientSecretStoreUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """The url to access the Client Key Vault."""
    channel_integrity_key_name: Optional[str] = rest_field(
        name="channelIntegrityKeyName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name of Channel Integrity Key stored in the Client Key Vault."""
    channel_integrity_key_version: Optional[str] = rest_field(
        name="channelIntegrityKeyVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The version of Channel Integrity Key stored in the Client Key Vault."""
    key_vault_sync_status: Optional[Union[str, "_models.KeyVaultSyncStatus"]] = rest_field(
        name="keyVaultSyncStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Key vault sync status. Known values are: \"KeyVaultSynced\", \"KeyVaultSyncFailed\",
     \"KeyVaultNotConfigured\", \"KeyVaultSyncPending\", \"KeyVaultSyncing\", and
     \"KeyVaultNotSynced\"."""
    device_secrets: Optional[dict[str, "_models.Secret"]] = rest_field(name="deviceSecrets", visibility=["read"])
    """Device secrets, will be returned only with ODataFilter $expand=deviceSecrets."""
    cluster_witness_type: Optional[Union[str, "_models.ClusterWitnessType"]] = rest_field(
        name="clusterWitnessType", visibility=["read"]
    )
    """Cluster Witness Type. Known values are: \"None\", \"Cloud\", and \"FileShare\"."""
    file_share_witness_location: Optional[str] = rest_field(name="fileShareWitnessLocation", visibility=["read"])
    """The witness location of file share."""
    file_share_witness_username: Optional[str] = rest_field(name="fileShareWitnessUsername", visibility=["read"])
    """The username of file share."""
    cloud_witness_storage_account_name: Optional[str] = rest_field(
        name="cloudWitnessStorageAccountName", visibility=["read"]
    )
    """The Cloud Witness Storage account name."""
    cloud_witness_container_name: Optional[str] = rest_field(name="cloudWitnessContainerName", visibility=["read"])
    """The Container for cloud witness in the storage account."""
    cloud_witness_storage_endpoint: Optional[str] = rest_field(name="cloudWitnessStorageEndpoint", visibility=["read"])
    """The Azure service endpoint of the cloud witness storage account."""

    @overload
    def __init__(
        self,
        *,
        encryption_key_thumbprint: Optional[str] = None,
        encryption_key: Optional[str] = None,
        client_secret_store_id: Optional[str] = None,
        client_secret_store_url: Optional[str] = None,
        channel_integrity_key_name: Optional[str] = None,
        channel_integrity_key_version: Optional[str] = None,
        key_vault_sync_status: Optional[Union[str, "_models.KeyVaultSyncStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataBoxEdgeDevicePatch(_Model):
    """The Data Box Edge/Gateway device patch.

    :ivar tags: The tags attached to the Data Box Edge/Gateway resource.
    :vartype tags: dict[str, str]
    :ivar identity: Msi identity of the resource.
    :vartype identity: ~azure.mgmt.databoxedge.models.ResourceIdentity
    :ivar properties: The properties associated with the Data Box Edge/Gateway resource.
    :vartype properties: ~azure.mgmt.databoxedge.models.DataBoxEdgeDevicePropertiesPatch
    """

    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tags attached to the Data Box Edge/Gateway resource."""
    identity: Optional["_models.ResourceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Msi identity of the resource."""
    properties: Optional["_models.DataBoxEdgeDevicePropertiesPatch"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties associated with the Data Box Edge/Gateway resource."""

    __flattened_items = ["edge_profile"]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[dict[str, str]] = None,
        identity: Optional["_models.ResourceIdentity"] = None,
        properties: Optional["_models.DataBoxEdgeDevicePropertiesPatch"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DataBoxEdgeDeviceProperties(_Model):
    """The properties of the Data Box Edge/Gateway device.

    :ivar system_data: DataBoxEdge Device Properties.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar data_box_edge_device_status: The status of the Data Box Edge/Gateway device. Known values
     are: "ReadyToSetup", "Online", "Offline", "NeedsAttention", "Disconnected",
     "PartiallyDisconnected", and "Maintenance".
    :vartype data_box_edge_device_status: str or
     ~azure.mgmt.databoxedge.models.DataBoxEdgeDeviceStatus
    :ivar serial_number: The Serial Number of Data Box Edge/Gateway device.
    :vartype serial_number: str
    :ivar description: The Description of the Data Box Edge/Gateway device.
    :vartype description: str
    :ivar model_description: The description of the Data Box Edge/Gateway device model.
    :vartype model_description: str
    :ivar device_type: The type of the Data Box Edge/Gateway device. "DataBoxEdgeDevice"
    :vartype device_type: str or ~azure.mgmt.databoxedge.models.DeviceType
    :ivar friendly_name: The Data Box Edge/Gateway device name.
    :vartype friendly_name: str
    :ivar culture: The Data Box Edge/Gateway device culture.
    :vartype culture: str
    :ivar device_model: The Data Box Edge/Gateway device model.
    :vartype device_model: str
    :ivar device_software_version: The Data Box Edge/Gateway device software version.
    :vartype device_software_version: str
    :ivar device_local_capacity: The Data Box Edge/Gateway device local capacity in MB.
    :vartype device_local_capacity: int
    :ivar time_zone: The Data Box Edge/Gateway device timezone.
    :vartype time_zone: str
    :ivar device_hcs_version: The device software version number of the device (eg: 1.2.18105.6).
    :vartype device_hcs_version: str
    :ivar configured_role_types: Type of compute roles configured.
    :vartype configured_role_types: list[str or ~azure.mgmt.databoxedge.models.RoleTypes]
    :ivar node_count: The number of nodes in the cluster.
    :vartype node_count: int
    :ivar resource_move_details: The details of the move operation on this resource.
    :vartype resource_move_details: ~azure.mgmt.databoxedge.models.ResourceMoveDetails
    :ivar edge_profile: The details of Edge Profile for this resource.
    :vartype edge_profile: ~azure.mgmt.databoxedge.models.EdgeProfile
    :ivar data_residency: The details of data-residency related properties for this resource.
    :vartype data_residency: ~azure.mgmt.databoxedge.models.DataResidency
    :ivar kubernetes_workload_profile: Kubernetes Workload Profile.
    :vartype kubernetes_workload_profile: str
    """

    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """DataBoxEdge Device Properties."""
    data_box_edge_device_status: Optional[Union[str, "_models.DataBoxEdgeDeviceStatus"]] = rest_field(
        name="dataBoxEdgeDeviceStatus", visibility=["read"]
    )
    """The status of the Data Box Edge/Gateway device. Known values are: \"ReadyToSetup\", \"Online\",
     \"Offline\", \"NeedsAttention\", \"Disconnected\", \"PartiallyDisconnected\", and
     \"Maintenance\"."""
    serial_number: Optional[str] = rest_field(name="serialNumber", visibility=["read"])
    """The Serial Number of Data Box Edge/Gateway device."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The Description of the Data Box Edge/Gateway device."""
    model_description: Optional[str] = rest_field(name="modelDescription", visibility=["read"])
    """The description of the Data Box Edge/Gateway device model."""
    device_type: Optional[Union[str, "_models.DeviceType"]] = rest_field(name="deviceType", visibility=["read"])
    """The type of the Data Box Edge/Gateway device. \"DataBoxEdgeDevice\""""
    friendly_name: Optional[str] = rest_field(name="friendlyName", visibility=["read"])
    """The Data Box Edge/Gateway device name."""
    culture: Optional[str] = rest_field(visibility=["read"])
    """The Data Box Edge/Gateway device culture."""
    device_model: Optional[str] = rest_field(name="deviceModel", visibility=["read"])
    """The Data Box Edge/Gateway device model."""
    device_software_version: Optional[str] = rest_field(name="deviceSoftwareVersion", visibility=["read"])
    """The Data Box Edge/Gateway device software version."""
    device_local_capacity: Optional[int] = rest_field(name="deviceLocalCapacity", visibility=["read"])
    """The Data Box Edge/Gateway device local capacity in MB."""
    time_zone: Optional[str] = rest_field(name="timeZone", visibility=["read"])
    """The Data Box Edge/Gateway device timezone."""
    device_hcs_version: Optional[str] = rest_field(name="deviceHcsVersion", visibility=["read"])
    """The device software version number of the device (eg: 1.2.18105.6)."""
    configured_role_types: Optional[list[Union[str, "_models.RoleTypes"]]] = rest_field(
        name="configuredRoleTypes", visibility=["read"]
    )
    """Type of compute roles configured."""
    node_count: Optional[int] = rest_field(name="nodeCount", visibility=["read"])
    """The number of nodes in the cluster."""
    resource_move_details: Optional["_models.ResourceMoveDetails"] = rest_field(
        name="resourceMoveDetails", visibility=["read"]
    )
    """The details of the move operation on this resource."""
    edge_profile: Optional["_models.EdgeProfile"] = rest_field(name="edgeProfile", visibility=["read"])
    """The details of Edge Profile for this resource."""
    data_residency: Optional["_models.DataResidency"] = rest_field(
        name="dataResidency", visibility=["read", "create", "update", "delete", "query"]
    )
    """The details of data-residency related properties for this resource."""
    kubernetes_workload_profile: Optional[str] = rest_field(name="kubernetesWorkloadProfile", visibility=["read"])
    """Kubernetes Workload Profile."""

    @overload
    def __init__(
        self,
        *,
        data_residency: Optional["_models.DataResidency"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataBoxEdgeDevicePropertiesPatch(_Model):
    """The Data Box Edge/Gateway device properties patch.

    :ivar edge_profile: Edge Profile property of the Data Box Edge/Gateway device.
    :vartype edge_profile: ~azure.mgmt.databoxedge.models.EdgeProfilePatch
    """

    edge_profile: Optional["_models.EdgeProfilePatch"] = rest_field(
        name="edgeProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Edge Profile property of the Data Box Edge/Gateway device."""

    @overload
    def __init__(
        self,
        *,
        edge_profile: Optional["_models.EdgeProfilePatch"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataBoxEdgeSku(_Model):
    """The Sku information.

    :ivar resource_type: The type of the resource.
    :vartype resource_type: str
    :ivar name: The Sku name. Known values are: "Gateway", "Edge", "TEA_1Node", "TEA_1Node_UPS",
     "TEA_1Node_Heater", "TEA_1Node_UPS_Heater", "TEA_4Node_Heater", "TEA_4Node_UPS_Heater", "TMA",
     "TDC", "TCA_Small", "GPU", "TCA_Large", "EdgeP_Base", "EdgeP_High", "EdgePR_Base",
     "EdgePR_Base_UPS", "EP2_64_1VPU_W", "EP2_128_1T4_Mx1_W", "EP2_256_2T4_W", "EdgeMR_Mini",
     "RCA_Small", "RCA_Large", "RDC", "Management", "EP2_64_Mx1_W", "EP2_128_GPU1_Mx1_W",
     "EP2_256_GPU2_Mx1", and "EdgeMR_TCP".
    :vartype name: str or ~azure.mgmt.databoxedge.models.SkuName
    :ivar kind: The Sku kind.
    :vartype kind: str
    :ivar tier: The Sku tier. "Standard"
    :vartype tier: str or ~azure.mgmt.databoxedge.models.SkuTier
    :ivar size: The Sku kind.
    :vartype size: str
    :ivar family: The Sku family.
    :vartype family: str
    :ivar locations: Availability of the Sku for the region.
    :vartype locations: list[str]
    :ivar api_versions: The API versions in which Sku is available.
    :vartype api_versions: list[str]
    :ivar location_info: Availability of the Sku for the location/zone/site.
    :vartype location_info: list[~azure.mgmt.databoxedge.models.SkuLocationInfo]
    :ivar costs: The pricing info of the Sku.
    :vartype costs: list[~azure.mgmt.databoxedge.models.SkuCost]
    :ivar signup_option: Sku can be signed up by customer or not. Known values are: "None" and
     "Available".
    :vartype signup_option: str or ~azure.mgmt.databoxedge.models.SkuSignupOption
    :ivar version: Availability of the Sku as preview/stable. Known values are: "Stable" and
     "Preview".
    :vartype version: str or ~azure.mgmt.databoxedge.models.SkuVersion
    :ivar availability: Links to the next set of results. Known values are: "Available" and
     "Unavailable".
    :vartype availability: str or ~azure.mgmt.databoxedge.models.SkuAvailability
    :ivar shipment_types: List of Shipment Types supported by this SKU.
    :vartype shipment_types: list[str or ~azure.mgmt.databoxedge.models.ShipmentType]
    :ivar capabilities: The capability info of the SKU.
    :vartype capabilities: list[~azure.mgmt.databoxedge.models.SkuCapability]
    """

    resource_type: Optional[str] = rest_field(name="resourceType", visibility=["read"])
    """The type of the resource."""
    name: Optional[Union[str, "_models.SkuName"]] = rest_field(visibility=["read"])
    """The Sku name. Known values are: \"Gateway\", \"Edge\", \"TEA_1Node\", \"TEA_1Node_UPS\",
     \"TEA_1Node_Heater\", \"TEA_1Node_UPS_Heater\", \"TEA_4Node_Heater\", \"TEA_4Node_UPS_Heater\",
     \"TMA\", \"TDC\", \"TCA_Small\", \"GPU\", \"TCA_Large\", \"EdgeP_Base\", \"EdgeP_High\",
     \"EdgePR_Base\", \"EdgePR_Base_UPS\", \"EP2_64_1VPU_W\", \"EP2_128_1T4_Mx1_W\",
     \"EP2_256_2T4_W\", \"EdgeMR_Mini\", \"RCA_Small\", \"RCA_Large\", \"RDC\", \"Management\",
     \"EP2_64_Mx1_W\", \"EP2_128_GPU1_Mx1_W\", \"EP2_256_GPU2_Mx1\", and \"EdgeMR_TCP\"."""
    kind: Optional[str] = rest_field(visibility=["read"])
    """The Sku kind."""
    tier: Optional[Union[str, "_models.SkuTier"]] = rest_field(visibility=["read"])
    """The Sku tier. \"Standard\""""
    size: Optional[str] = rest_field(visibility=["read"])
    """The Sku kind."""
    family: Optional[str] = rest_field(visibility=["read"])
    """The Sku family."""
    locations: Optional[list[str]] = rest_field(visibility=["read"])
    """Availability of the Sku for the region."""
    api_versions: Optional[list[str]] = rest_field(name="apiVersions", visibility=["read"])
    """The API versions in which Sku is available."""
    location_info: Optional[list["_models.SkuLocationInfo"]] = rest_field(name="locationInfo", visibility=["read"])
    """Availability of the Sku for the location/zone/site."""
    costs: Optional[list["_models.SkuCost"]] = rest_field(visibility=["read"])
    """The pricing info of the Sku."""
    signup_option: Optional[Union[str, "_models.SkuSignupOption"]] = rest_field(
        name="signupOption", visibility=["read"]
    )
    """Sku can be signed up by customer or not. Known values are: \"None\" and \"Available\"."""
    version: Optional[Union[str, "_models.SkuVersion"]] = rest_field(visibility=["read"])
    """Availability of the Sku as preview/stable. Known values are: \"Stable\" and \"Preview\"."""
    availability: Optional[Union[str, "_models.SkuAvailability"]] = rest_field(visibility=["read"])
    """Links to the next set of results. Known values are: \"Available\" and \"Unavailable\"."""
    shipment_types: Optional[list[Union[str, "_models.ShipmentType"]]] = rest_field(
        name="shipmentTypes", visibility=["read"]
    )
    """List of Shipment Types supported by this SKU."""
    capabilities: Optional[list["_models.SkuCapability"]] = rest_field(visibility=["read"])
    """The capability info of the SKU."""


class DataResidency(_Model):
    """Wraps data-residency related information for edge-resource and this should be used with ARM
    layer.

    :ivar type: DataResidencyType enum. Known values are: "GeoZoneReplication" and
     "ZoneReplication".
    :vartype type: str or ~azure.mgmt.databoxedge.models.DataResidencyType
    """

    type: Optional[Union[str, "_models.DataResidencyType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """DataResidencyType enum. Known values are: \"GeoZoneReplication\" and \"ZoneReplication\"."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.DataResidencyType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DCAccessCode(_Model):
    """DC Access code in the case of Self Managed Shipping.

    :ivar properties: DCAccessCode properties.
    :vartype properties: ~azure.mgmt.databoxedge.models.DCAccessCodeProperties
    """

    properties: Optional["_models.DCAccessCodeProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """DCAccessCode properties."""

    __flattened_items = ["auth_code"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DCAccessCodeProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DCAccessCodeProperties(_Model):
    """DCAccessCode Properties.

    :ivar auth_code: DCAccess Code for the Self Managed shipment.
    :vartype auth_code: str
    """

    auth_code: Optional[str] = rest_field(name="authCode", visibility=["read", "create", "update", "delete", "query"])
    """DCAccess Code for the Self Managed shipment."""

    @overload
    def __init__(
        self,
        *,
        auth_code: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DeviceCapacityInfo(ProxyResource):
    """Object for Capturing DeviceCapacityInfo.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The device capacity properties.
    :vartype properties: ~azure.mgmt.databoxedge.models.DeviceCapacityInfoProperties
    """

    properties: Optional["_models.DeviceCapacityInfoProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The device capacity properties."""

    __flattened_items = [
        "time_stamp",
        "cluster_storage_capacity_info",
        "cluster_compute_capacity_info",
        "node_capacity_infos",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DeviceCapacityInfoProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DeviceCapacityInfoProperties(_Model):
    """The properties of Device Capacity Info.

    :ivar time_stamp: Timestamp of request in UTC.
    :vartype time_stamp: ~datetime.datetime
    :ivar cluster_storage_capacity_info: Cluster capacity data for storage resources (CSV).
    :vartype cluster_storage_capacity_info: ~azure.mgmt.databoxedge.models.ClusterStorageViewData
    :ivar cluster_compute_capacity_info: Cluster capacity data for compute resources (Memory and
     GPU).
    :vartype cluster_compute_capacity_info: ~azure.mgmt.databoxedge.models.ClusterCapacityViewData
    :ivar node_capacity_infos: The dictionary of individual node names and node capacities in the
     cluster.
    :vartype node_capacity_infos: dict[str, ~azure.mgmt.databoxedge.models.HostCapacity]
    """

    time_stamp: Optional[datetime.datetime] = rest_field(
        name="timeStamp", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Timestamp of request in UTC."""
    cluster_storage_capacity_info: Optional["_models.ClusterStorageViewData"] = rest_field(
        name="clusterStorageCapacityInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Cluster capacity data for storage resources (CSV)."""
    cluster_compute_capacity_info: Optional["_models.ClusterCapacityViewData"] = rest_field(
        name="clusterComputeCapacityInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Cluster capacity data for compute resources (Memory and GPU)."""
    node_capacity_infos: Optional[dict[str, "_models.HostCapacity"]] = rest_field(
        name="nodeCapacityInfos", visibility=["read", "create", "update", "delete", "query"]
    )
    """The dictionary of individual node names and node capacities in the cluster."""

    @overload
    def __init__(
        self,
        *,
        time_stamp: Optional[datetime.datetime] = None,
        cluster_storage_capacity_info: Optional["_models.ClusterStorageViewData"] = None,
        cluster_compute_capacity_info: Optional["_models.ClusterCapacityViewData"] = None,
        node_capacity_infos: Optional[dict[str, "_models.HostCapacity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DeviceCapacityRequestInfo(_Model):
    """Object for Capturing DeviceCapacityRequestInfo.

    :ivar properties: The properties of the Device Capacity Request. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.DeviceCapacityRequestInfoProperties
    """

    properties: "_models.DeviceCapacityRequestInfoProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the Device Capacity Request. Required."""

    __flattened_items = ["vm_placement_query", "vm_placement_results"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.DeviceCapacityRequestInfoProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DeviceCapacityRequestInfoProperties(_Model):
    """Properties of Device Capacity Request Info containing VM's to be checked and their
    corresponding results.

    :ivar vm_placement_query: Array containing the sizes of the VMs for checking if its feasible to
     create them on the appliance. Required.
    :vartype vm_placement_query: list[list[str]]
    :ivar vm_placement_results: Array of the VMs of the sizes in VmSizes can be provisioned on the
     appliance.
    :vartype vm_placement_results: list[~azure.mgmt.databoxedge.models.VmPlacementRequestResult]
    """

    vm_placement_query: list[list[str]] = rest_field(
        name="vmPlacementQuery", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array containing the sizes of the VMs for checking if its feasible to create them on the
     appliance. Required."""
    vm_placement_results: Optional[list["_models.VmPlacementRequestResult"]] = rest_field(
        name="vmPlacementResults", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of the VMs of the sizes in VmSizes can be provisioned on the appliance."""

    @overload
    def __init__(
        self,
        *,
        vm_placement_query: list[list[str]],
        vm_placement_results: Optional[list["_models.VmPlacementRequestResult"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiagnosticProactiveLogCollectionSettings(ProxyResource):
    """The diagnostic proactive log collection settings of a device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: Properties of the diagnostic proactive log collection settings. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.ProactiveLogCollectionSettingsProperties
    """

    properties: "_models.ProactiveLogCollectionSettingsProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the diagnostic proactive log collection settings. Required."""

    __flattened_items = ["user_consent"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ProactiveLogCollectionSettingsProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DiagnosticRemoteSupportSettings(ProxyResource):
    """The remote support settings of a device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: Properties of the remote support  settings. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.DiagnosticRemoteSupportSettingsProperties
    """

    properties: "_models.DiagnosticRemoteSupportSettingsProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the remote support  settings. Required."""

    __flattened_items = ["remote_support_settings_list"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.DiagnosticRemoteSupportSettingsProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DiagnosticRemoteSupportSettingsProperties(_Model):  # pylint: disable=name-too-long
    """The properties of remote support settings.

    :ivar remote_support_settings_list: Remote support settings list according to the
     RemoteApplicationType.
    :vartype remote_support_settings_list:
     list[~azure.mgmt.databoxedge.models.RemoteSupportSettings]
    """

    remote_support_settings_list: Optional[list["_models.RemoteSupportSettings"]] = rest_field(
        name="remoteSupportSettingsList", visibility=["read", "create", "update", "delete", "query"]
    )
    """Remote support settings list according to the RemoteApplicationType."""

    @overload
    def __init__(
        self,
        *,
        remote_support_settings_list: Optional[list["_models.RemoteSupportSettings"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EdgeProfile(_Model):
    """Details about Edge Profile for the resource.

    :ivar subscription: Edge Profile Subscription.
    :vartype subscription: ~azure.mgmt.databoxedge.models.EdgeProfileSubscription
    """

    subscription: Optional["_models.EdgeProfileSubscription"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Edge Profile Subscription."""

    @overload
    def __init__(
        self,
        *,
        subscription: Optional["_models.EdgeProfileSubscription"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EdgeProfilePatch(_Model):
    """The Data Box Edge/Gateway Edge Profile patch.

    :ivar subscription: The Data Box Edge/Gateway Edge Profile Subscription patch.
    :vartype subscription: ~azure.mgmt.databoxedge.models.EdgeProfileSubscriptionPatch
    """

    subscription: Optional["_models.EdgeProfileSubscriptionPatch"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The Data Box Edge/Gateway Edge Profile Subscription patch."""

    @overload
    def __init__(
        self,
        *,
        subscription: Optional["_models.EdgeProfileSubscriptionPatch"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EdgeProfileSubscription(_Model):
    """Subscription details for the Edge Profile.

    :ivar registration_id: Edge Subscription Registration ID.
    :vartype registration_id: str
    :ivar id: ARM ID of the subscription.
    :vartype id: str
    :ivar state: Known values are: "Registered", "Warned", "Suspended", "Deleted", and
     "Unregistered".
    :vartype state: str or ~azure.mgmt.databoxedge.models.SubscriptionState
    :ivar registration_date:
    :vartype registration_date: str
    :ivar subscription_id:
    :vartype subscription_id: str
    :ivar properties:
    :vartype properties: ~azure.mgmt.databoxedge.models.SubscriptionProperties
    """

    registration_id: Optional[str] = rest_field(
        name="registrationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Edge Subscription Registration ID."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ARM ID of the subscription."""
    state: Optional[Union[str, "_models.SubscriptionState"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Known values are: \"Registered\", \"Warned\", \"Suspended\", \"Deleted\", and \"Unregistered\"."""
    registration_date: Optional[str] = rest_field(
        name="registrationDate", visibility=["read", "create", "update", "delete", "query"]
    )
    subscription_id: Optional[str] = rest_field(
        name="subscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    properties: Optional["_models.SubscriptionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    __flattened_items = ["tenant_id", "location_placement_id", "quota_id", "serialized_details", "registered_features"]

    @overload
    def __init__(
        self,
        *,
        registration_id: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        state: Optional[Union[str, "_models.SubscriptionState"]] = None,
        registration_date: Optional[str] = None,
        subscription_id: Optional[str] = None,
        properties: Optional["_models.SubscriptionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class EdgeProfileSubscriptionPatch(_Model):
    """The Data Box Edge/Gateway Edge Profile Subscription patch.

    :ivar id: The path ID that uniquely identifies the subscription of the edge profile.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The path ID that uniquely identifies the subscription of the edge profile."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EtcdInfo(_Model):
    """Etcd configuration.

    :ivar type: Etcd type.
    :vartype type: str
    :ivar version: Etcd version.
    :vartype version: str
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """Etcd type."""
    version: Optional[str] = rest_field(visibility=["read"])
    """Etcd version."""


class Trigger(ProxyResource):
    """Trigger details.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    FileEventTrigger, PeriodicTimerEventTrigger

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar kind: Trigger Kind. Known values are: "FileEvent" and "PeriodicTimerEvent".
    :vartype kind: str or ~azure.mgmt.databoxedge.models.TriggerEventType
    """

    __mapping__: dict[str, _Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create"])
    """Trigger Kind. Known values are: \"FileEvent\" and \"PeriodicTimerEvent\"."""

    @overload
    def __init__(
        self,
        *,
        kind: str = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileEventTrigger(Trigger, discriminator="FileEvent"):
    """Trigger details.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: File trigger properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.FileTriggerProperties
    :ivar kind: Trigger Kind. Required.
    :vartype kind: str or ~azure.mgmt.databoxedge.models.FILE_EVENT
    """

    properties: "_models.FileTriggerProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """File trigger properties. Required."""
    kind: Literal[TriggerEventType.FILE_EVENT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Trigger Kind. Required."""

    __flattened_items = ["source_info", "sink_info", "custom_context_tag"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.FileTriggerProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FileSourceInfo(_Model):
    """File source details.

    :ivar share_id: File share ID. Required.
    :vartype share_id: str
    """

    share_id: str = rest_field(name="shareId", visibility=["read", "create", "update", "delete", "query"])
    """File share ID. Required."""

    @overload
    def __init__(
        self,
        *,
        share_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FileTriggerProperties(_Model):
    """File trigger properties.

    :ivar source_info: File event source details. Required.
    :vartype source_info: ~azure.mgmt.databoxedge.models.FileSourceInfo
    :ivar sink_info: Role sink info. Required.
    :vartype sink_info: ~azure.mgmt.databoxedge.models.RoleSinkInfo
    :ivar custom_context_tag: A custom context tag typically used to correlate the trigger against
     its usage. For example, if a periodic timer trigger is intended for certain specific IoT
     modules in the device, the tag can be the name or the image URL of the module.
    :vartype custom_context_tag: str
    """

    source_info: "_models.FileSourceInfo" = rest_field(
        name="sourceInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """File event source details. Required."""
    sink_info: "_models.RoleSinkInfo" = rest_field(
        name="sinkInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Role sink info. Required."""
    custom_context_tag: Optional[str] = rest_field(
        name="customContextTag", visibility=["read", "create", "update", "delete", "query"]
    )
    """A custom context tag typically used to correlate the trigger against its usage. For example, if
     a periodic timer trigger is intended for certain specific IoT modules in the device, the tag
     can be the name or the image URL of the module."""

    @overload
    def __init__(
        self,
        *,
        source_info: "_models.FileSourceInfo",
        sink_info: "_models.RoleSinkInfo",
        custom_context_tag: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GenerateCertResponse(_Model):
    """Used in activation key generation flow.

       :ivar public_key: Gets or sets base64 encoded certificate raw data,
    this is the public part needed to be uploaded to cert vault.
       :vartype public_key: str
       :ivar private_key: Gets or sets base64 encoded private part of the certificate,
    needed to form the activation key.
       :vartype private_key: str
       :ivar expiry_time_in_utc: Gets or sets expiry time in UTC.
       :vartype expiry_time_in_utc: str
    """

    public_key: Optional[str] = rest_field(name="publicKey", visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets base64 encoded certificate raw data,
 this is the public part needed to be uploaded to cert vault."""
    private_key: Optional[str] = rest_field(
        name="privateKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets base64 encoded private part of the certificate,
 needed to form the activation key."""
    expiry_time_in_utc: Optional[str] = rest_field(
        name="expiryTimeInUTC", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets or sets expiry time in UTC."""

    @overload
    def __init__(
        self,
        *,
        public_key: Optional[str] = None,
        private_key: Optional[str] = None,
        expiry_time_in_utc: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HostCapacity(_Model):
    """Host Capacity Data.

    :ivar host_name: The name of the host.
    :vartype host_name: str
    :ivar effective_available_memory_mb_on_host: The available memory on the host accounting for VM
     placement size and any host VM reservations.
    :vartype effective_available_memory_mb_on_host: int
    :ivar available_gpu_count: The available amount of GPUs on the host to use after accounting for
     GPUS used by reservations on the host.
    :vartype available_gpu_count: int
    :ivar vm_used_memory: The VM used memory per VmId.
    :vartype vm_used_memory: dict[str, ~azure.mgmt.databoxedge.models.VmMemory]
    :ivar gpu_type: The GPU type of the VM.
    :vartype gpu_type: str
    :ivar numa_nodes_data: The numa nodes information for Hpn VMs.
    :vartype numa_nodes_data: list[~azure.mgmt.databoxedge.models.NumaNodeData]
    """

    host_name: Optional[str] = rest_field(name="hostName", visibility=["read", "create", "update", "delete", "query"])
    """The name of the host."""
    effective_available_memory_mb_on_host: Optional[int] = rest_field(
        name="effectiveAvailableMemoryMbOnHost", visibility=["read", "create", "update", "delete", "query"]
    )
    """The available memory on the host accounting for VM placement size and any host VM reservations."""
    available_gpu_count: Optional[int] = rest_field(
        name="availableGpuCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The available amount of GPUs on the host to use after accounting for GPUS used by reservations
     on the host."""
    vm_used_memory: Optional[dict[str, "_models.VmMemory"]] = rest_field(
        name="vmUsedMemory", visibility=["read", "create", "update", "delete", "query"]
    )
    """The VM used memory per VmId."""
    gpu_type: Optional[str] = rest_field(name="gpuType", visibility=["read", "create", "update", "delete", "query"])
    """The GPU type of the VM."""
    numa_nodes_data: Optional[list["_models.NumaNodeData"]] = rest_field(
        name="numaNodesData", visibility=["read", "create", "update", "delete", "query"]
    )
    """The numa nodes information for Hpn VMs."""

    @overload
    def __init__(
        self,
        *,
        host_name: Optional[str] = None,
        effective_available_memory_mb_on_host: Optional[int] = None,
        available_gpu_count: Optional[int] = None,
        vm_used_memory: Optional[dict[str, "_models.VmMemory"]] = None,
        gpu_type: Optional[str] = None,
        numa_nodes_data: Optional[list["_models.NumaNodeData"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageRepositoryCredential(_Model):
    """Image repository credential.

    :ivar image_repository_url: Image repository url (e.g.: mcr.microsoft.com). Required.
    :vartype image_repository_url: str
    :ivar user_name: Repository user name. Required.
    :vartype user_name: str
    :ivar password: Repository user password.
    :vartype password: ~azure.mgmt.databoxedge.models.AsymmetricEncryptedSecret
    """

    image_repository_url: str = rest_field(
        name="imageRepositoryUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """Image repository url (e.g.: mcr.microsoft.com). Required."""
    user_name: str = rest_field(name="userName", visibility=["read", "create", "update", "delete", "query"])
    """Repository user name. Required."""
    password: Optional["_models.AsymmetricEncryptedSecret"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Repository user password."""

    @overload
    def __init__(
        self,
        *,
        image_repository_url: str,
        user_name: str,
        password: Optional["_models.AsymmetricEncryptedSecret"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IoTAddon(Addon, discriminator="IotEdge"):
    """IoT Addon.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: Properties specific to IOT addon. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.IoTAddonProperties
    :ivar kind: Addon type. Required.
    :vartype kind: str or ~azure.mgmt.databoxedge.models.IOT_EDGE
    """

    properties: "_models.IoTAddonProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties specific to IOT addon. Required."""
    kind: Literal[AddonType.IOT_EDGE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Addon type. Required."""

    __flattened_items = [
        "io_t_device_details",
        "io_t_edge_device_details",
        "version",
        "host_platform",
        "host_platform_type",
        "provisioning_state",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.IoTAddonProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class IoTAddonProperties(_Model):
    """IoT addon properties.

    :ivar io_t_device_details: IoT device metadata to which appliance needs to be connected.
     Required.
    :vartype io_t_device_details: ~azure.mgmt.databoxedge.models.IoTDeviceInfo
    :ivar io_t_edge_device_details: IoT edge device to which the IoT Addon needs to be configured.
     Required.
    :vartype io_t_edge_device_details: ~azure.mgmt.databoxedge.models.IoTDeviceInfo
    :ivar version: Version of IoT running on the appliance.
    :vartype version: str
    :ivar host_platform: Host OS supported by the IoT addon. Known values are: "Windows" and
     "Linux".
    :vartype host_platform: str or ~azure.mgmt.databoxedge.models.PlatformType
    :ivar host_platform_type: Platform where the runtime is hosted. Known values are:
     "KubernetesCluster" and "LinuxVM".
    :vartype host_platform_type: str or ~azure.mgmt.databoxedge.models.HostPlatformType
    :ivar provisioning_state: Addon Provisioning State. Known values are: "Invalid", "Creating",
     "Created", "Updating", "Reconfiguring", "Failed", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.databoxedge.models.AddonState
    """

    io_t_device_details: "_models.IoTDeviceInfo" = rest_field(
        name="ioTDeviceDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """IoT device metadata to which appliance needs to be connected. Required."""
    io_t_edge_device_details: "_models.IoTDeviceInfo" = rest_field(
        name="ioTEdgeDeviceDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """IoT edge device to which the IoT Addon needs to be configured. Required."""
    version: Optional[str] = rest_field(visibility=["read"])
    """Version of IoT running on the appliance."""
    host_platform: Optional[Union[str, "_models.PlatformType"]] = rest_field(name="hostPlatform", visibility=["read"])
    """Host OS supported by the IoT addon. Known values are: \"Windows\" and \"Linux\"."""
    host_platform_type: Optional[Union[str, "_models.HostPlatformType"]] = rest_field(
        name="hostPlatformType", visibility=["read"]
    )
    """Platform where the runtime is hosted. Known values are: \"KubernetesCluster\" and \"LinuxVM\"."""
    provisioning_state: Optional[Union[str, "_models.AddonState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Addon Provisioning State. Known values are: \"Invalid\", \"Creating\", \"Created\",
     \"Updating\", \"Reconfiguring\", \"Failed\", and \"Deleting\"."""

    @overload
    def __init__(
        self,
        *,
        io_t_device_details: "_models.IoTDeviceInfo",
        io_t_edge_device_details: "_models.IoTDeviceInfo",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IoTDeviceInfo(_Model):
    """Metadata of IoT device/IoT Edge device to be configured.

    :ivar device_id: ID of the IoT device/edge device. Required.
    :vartype device_id: str
    :ivar io_t_host_hub: Host name for the IoT hub associated to the device. Required.
    :vartype io_t_host_hub: str
    :ivar io_t_host_hub_id: Id for the IoT hub associated to the device.
    :vartype io_t_host_hub_id: str
    :ivar authentication: Encrypted IoT device/IoT edge device connection string.
    :vartype authentication: ~azure.mgmt.databoxedge.models.Authentication
    """

    device_id: str = rest_field(name="deviceId", visibility=["read", "create", "update", "delete", "query"])
    """ID of the IoT device/edge device. Required."""
    io_t_host_hub: str = rest_field(name="ioTHostHub", visibility=["read", "create", "update", "delete", "query"])
    """Host name for the IoT hub associated to the device. Required."""
    io_t_host_hub_id: Optional[str] = rest_field(
        name="ioTHostHubId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Id for the IoT hub associated to the device."""
    authentication: Optional["_models.Authentication"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Encrypted IoT device/IoT edge device connection string."""

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        io_t_host_hub: str,
        io_t_host_hub_id: Optional[str] = None,
        authentication: Optional["_models.Authentication"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IoTEdgeAgentInfo(_Model):
    """IoT edge agent details is optional, this will be used for download system Agent module while
    bootstrapping IoT Role if specified.

    :ivar image_name: Name of the IoT edge agent image. Required.
    :vartype image_name: str
    :ivar tag: Image Tag. Required.
    :vartype tag: str
    :ivar image_repository: Image repository details.
    :vartype image_repository: ~azure.mgmt.databoxedge.models.ImageRepositoryCredential
    """

    image_name: str = rest_field(name="imageName", visibility=["read", "create", "update", "delete", "query"])
    """Name of the IoT edge agent image. Required."""
    tag: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Image Tag. Required."""
    image_repository: Optional["_models.ImageRepositoryCredential"] = rest_field(
        name="imageRepository", visibility=["read", "create", "update", "delete", "query"]
    )
    """Image repository details."""

    @overload
    def __init__(
        self,
        *,
        image_name: str,
        tag: str,
        image_repository: Optional["_models.ImageRepositoryCredential"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IoTRole(Role, discriminator="IOT"):
    """Compute role.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: Properties specific to IoT role.
    :vartype properties: ~azure.mgmt.databoxedge.models.IoTRoleProperties
    :ivar kind: Role type. Required.
    :vartype kind: str or ~azure.mgmt.databoxedge.models.IOT
    """

    properties: Optional["_models.IoTRoleProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to IoT role."""
    kind: Literal[RoleTypes.IOT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Role type. Required."""

    __flattened_items = [
        "host_platform",
        "io_t_device_details",
        "io_t_edge_device_details",
        "share_mappings",
        "io_t_edge_agent_info",
        "host_platform_type",
        "compute_resource",
        "role_status",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.IoTRoleProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class IoTRoleProperties(_Model):
    """IoT role properties.

    :ivar host_platform: Host OS supported by the IoT role. Required. Known values are: "Windows"
     and "Linux".
    :vartype host_platform: str or ~azure.mgmt.databoxedge.models.PlatformType
    :ivar io_t_device_details: IoT device metadata to which data box edge device needs to be
     connected. Required.
    :vartype io_t_device_details: ~azure.mgmt.databoxedge.models.IoTDeviceInfo
    :ivar io_t_edge_device_details: IoT edge device to which the IoT role needs to be configured.
     Required.
    :vartype io_t_edge_device_details: ~azure.mgmt.databoxedge.models.IoTDeviceInfo
    :ivar share_mappings: Mount points of shares in role(s).
    :vartype share_mappings: list[~azure.mgmt.databoxedge.models.MountPointMap]
    :ivar io_t_edge_agent_info: Iot edge agent details to download the agent and bootstrap iot
     runtime.
    :vartype io_t_edge_agent_info: ~azure.mgmt.databoxedge.models.IoTEdgeAgentInfo
    :ivar host_platform_type: Platform where the Iot runtime is hosted. Known values are:
     "KubernetesCluster" and "LinuxVM".
    :vartype host_platform_type: str or ~azure.mgmt.databoxedge.models.HostPlatformType
    :ivar compute_resource: Resource allocation.
    :vartype compute_resource: ~azure.mgmt.databoxedge.models.ComputeResource
    :ivar role_status: Role status. Required. Known values are: "Enabled" and "Disabled".
    :vartype role_status: str or ~azure.mgmt.databoxedge.models.RoleStatus
    """

    host_platform: Union[str, "_models.PlatformType"] = rest_field(
        name="hostPlatform", visibility=["read", "create", "update", "delete", "query"]
    )
    """Host OS supported by the IoT role. Required. Known values are: \"Windows\" and \"Linux\"."""
    io_t_device_details: "_models.IoTDeviceInfo" = rest_field(
        name="ioTDeviceDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """IoT device metadata to which data box edge device needs to be connected. Required."""
    io_t_edge_device_details: "_models.IoTDeviceInfo" = rest_field(
        name="ioTEdgeDeviceDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """IoT edge device to which the IoT role needs to be configured. Required."""
    share_mappings: Optional[list["_models.MountPointMap"]] = rest_field(
        name="shareMappings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mount points of shares in role(s)."""
    io_t_edge_agent_info: Optional["_models.IoTEdgeAgentInfo"] = rest_field(
        name="ioTEdgeAgentInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Iot edge agent details to download the agent and bootstrap iot runtime."""
    host_platform_type: Optional[Union[str, "_models.HostPlatformType"]] = rest_field(
        name="hostPlatformType", visibility=["read"]
    )
    """Platform where the Iot runtime is hosted. Known values are: \"KubernetesCluster\" and
     \"LinuxVM\"."""
    compute_resource: Optional["_models.ComputeResource"] = rest_field(
        name="computeResource", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource allocation."""
    role_status: Union[str, "_models.RoleStatus"] = rest_field(
        name="roleStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Role status. Required. Known values are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        host_platform: Union[str, "_models.PlatformType"],
        io_t_device_details: "_models.IoTDeviceInfo",
        io_t_edge_device_details: "_models.IoTDeviceInfo",
        role_status: Union[str, "_models.RoleStatus"],
        share_mappings: Optional[list["_models.MountPointMap"]] = None,
        io_t_edge_agent_info: Optional["_models.IoTEdgeAgentInfo"] = None,
        compute_resource: Optional["_models.ComputeResource"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Ipv4Config(_Model):
    """Details related to the IPv4 address configuration.

    :ivar ip_address: The IPv4 address of the network adapter.
    :vartype ip_address: str
    :ivar subnet: The IPv4 subnet of the network adapter.
    :vartype subnet: str
    :ivar gateway: The IPv4 gateway of the network adapter.
    :vartype gateway: str
    """

    ip_address: Optional[str] = rest_field(name="ipAddress", visibility=["read"])
    """The IPv4 address of the network adapter."""
    subnet: Optional[str] = rest_field(visibility=["read"])
    """The IPv4 subnet of the network adapter."""
    gateway: Optional[str] = rest_field(visibility=["read"])
    """The IPv4 gateway of the network adapter."""


class Ipv6Config(_Model):
    """Details related to the IPv6 address configuration.

    :ivar ip_address: The IPv6 address of the network adapter.
    :vartype ip_address: str
    :ivar prefix_length: The IPv6 prefix of the network adapter.
    :vartype prefix_length: int
    :ivar gateway: The IPv6 gateway of the network adapter.
    :vartype gateway: str
    """

    ip_address: Optional[str] = rest_field(name="ipAddress", visibility=["read"])
    """The IPv6 address of the network adapter."""
    prefix_length: Optional[int] = rest_field(name="prefixLength", visibility=["read"])
    """The IPv6 prefix of the network adapter."""
    gateway: Optional[str] = rest_field(visibility=["read"])
    """The IPv6 gateway of the network adapter."""


class Job(ProxyResource):
    """A device job.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The properties of the job.
    :vartype properties: ~azure.mgmt.databoxedge.models.JobProperties
    :ivar status: The current status of the job. Known values are: "Invalid", "Running",
     "Succeeded", "Failed", "Canceled", "Paused", and "Scheduled".
    :vartype status: str or ~azure.mgmt.databoxedge.models.JobStatus
    :ivar start_time: The UTC date and time at which the job started.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The UTC date and time at which the job completed.
    :vartype end_time: ~datetime.datetime
    :ivar percent_complete: The percentage of the job that is complete.
    :vartype percent_complete: int
    :ivar error: The error details.
    :vartype error: ~azure.mgmt.databoxedge.models.JobErrorDetails
    """

    properties: Optional["_models.JobProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the job."""
    status: Optional[Union[str, "_models.JobStatus"]] = rest_field(visibility=["read"])
    """The current status of the job. Known values are: \"Invalid\", \"Running\", \"Succeeded\",
     \"Failed\", \"Canceled\", \"Paused\", and \"Scheduled\"."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """The UTC date and time at which the job started."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", visibility=["read"], format="rfc3339")
    """The UTC date and time at which the job completed."""
    percent_complete: Optional[int] = rest_field(name="percentComplete", visibility=["read"])
    """The percentage of the job that is complete."""
    error: Optional["_models.JobErrorDetails"] = rest_field(visibility=["read"])
    """The error details."""

    __flattened_items = [
        "job_type",
        "current_stage",
        "download_progress",
        "install_progress",
        "total_refresh_errors",
        "error_manifest_file",
        "refreshed_entity_id",
        "folder",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.JobProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class JobErrorDetails(_Model):
    """The job error information containing the list of job errors.

    :ivar error_details: The error details.
    :vartype error_details: list[~azure.mgmt.databoxedge.models.JobErrorItem]
    :ivar code: The code intended for programmatic access.
    :vartype code: str
    :ivar message: The message that describes the error in detail.
    :vartype message: str
    """

    error_details: Optional[list["_models.JobErrorItem"]] = rest_field(name="errorDetails", visibility=["read"])
    """The error details."""
    code: Optional[str] = rest_field(visibility=["read"])
    """The code intended for programmatic access."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The message that describes the error in detail."""


class JobErrorItem(_Model):
    """The job error items.

    :ivar recommendations: The recommended actions.
    :vartype recommendations: list[str]
    :ivar code: The code intended for programmatic access.
    :vartype code: str
    :ivar message: The message that describes the error in detail.
    :vartype message: str
    """

    recommendations: Optional[list[str]] = rest_field(visibility=["read"])
    """The recommended actions."""
    code: Optional[str] = rest_field(visibility=["read"])
    """The code intended for programmatic access."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The message that describes the error in detail."""


class JobProperties(_Model):
    """The properties for the job.

    :ivar job_type: The type of the job. Known values are: "Invalid", "ScanForUpdates",
     "DownloadUpdates", "InstallUpdates", "RefreshShare", "RefreshContainer", "Backup", "Restore",
     and "TriggerSupportPackage".
    :vartype job_type: str or ~azure.mgmt.databoxedge.models.JobType
    :ivar current_stage: Current stage of the update operation. Known values are: "Unknown",
     "Initial", "ScanStarted", "ScanComplete", "ScanFailed", "DownloadStarted", "DownloadComplete",
     "DownloadFailed", "InstallStarted", "InstallComplete", "InstallFailed", "RebootInitiated",
     "Success", "Failure", "RescanStarted", "RescanComplete", and "RescanFailed".
    :vartype current_stage: str or ~azure.mgmt.databoxedge.models.UpdateOperationStage
    :ivar download_progress: The download progress.
    :vartype download_progress: ~azure.mgmt.databoxedge.models.UpdateDownloadProgress
    :ivar install_progress: The install progress.
    :vartype install_progress: ~azure.mgmt.databoxedge.models.UpdateInstallProgress
    :ivar total_refresh_errors: Total number of errors encountered during the refresh process.
    :vartype total_refresh_errors: int
    :ivar error_manifest_file: Local share/remote container relative path to the error manifest
     file of the refresh.
    :vartype error_manifest_file: str
    :ivar refreshed_entity_id: ARM ID of the entity that was refreshed.
    :vartype refreshed_entity_id: str
    :ivar folder: If only subfolders need to be refreshed, then the subfolder path inside the share
     or container. (The path is empty if there are no subfolders.).
    :vartype folder: str
    """

    job_type: Optional[Union[str, "_models.JobType"]] = rest_field(name="jobType", visibility=["read"])
    """The type of the job. Known values are: \"Invalid\", \"ScanForUpdates\", \"DownloadUpdates\",
     \"InstallUpdates\", \"RefreshShare\", \"RefreshContainer\", \"Backup\", \"Restore\", and
     \"TriggerSupportPackage\"."""
    current_stage: Optional[Union[str, "_models.UpdateOperationStage"]] = rest_field(
        name="currentStage", visibility=["read"]
    )
    """Current stage of the update operation. Known values are: \"Unknown\", \"Initial\",
     \"ScanStarted\", \"ScanComplete\", \"ScanFailed\", \"DownloadStarted\", \"DownloadComplete\",
     \"DownloadFailed\", \"InstallStarted\", \"InstallComplete\", \"InstallFailed\",
     \"RebootInitiated\", \"Success\", \"Failure\", \"RescanStarted\", \"RescanComplete\", and
     \"RescanFailed\"."""
    download_progress: Optional["_models.UpdateDownloadProgress"] = rest_field(
        name="downloadProgress", visibility=["read"]
    )
    """The download progress."""
    install_progress: Optional["_models.UpdateInstallProgress"] = rest_field(
        name="installProgress", visibility=["read"]
    )
    """The install progress."""
    total_refresh_errors: Optional[int] = rest_field(name="totalRefreshErrors", visibility=["read"])
    """Total number of errors encountered during the refresh process."""
    error_manifest_file: Optional[str] = rest_field(name="errorManifestFile", visibility=["read"])
    """Local share/remote container relative path to the error manifest file of the refresh."""
    refreshed_entity_id: Optional[str] = rest_field(name="refreshedEntityId", visibility=["read"])
    """ARM ID of the entity that was refreshed."""
    folder: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """If only subfolders need to be refreshed, then the subfolder path inside the share or container.
     (The path is empty if there are no subfolders.)."""

    @overload
    def __init__(
        self,
        *,
        folder: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KubernetesClusterInfo(_Model):
    """Kubernetes cluster configuration.

    :ivar etcd_info: Etcd configuration.
    :vartype etcd_info: ~azure.mgmt.databoxedge.models.EtcdInfo
    :ivar nodes: Kubernetes cluster nodes.
    :vartype nodes: list[~azure.mgmt.databoxedge.models.NodeInfo]
    :ivar version: Kubernetes cluster version. Required.
    :vartype version: str
    """

    etcd_info: Optional["_models.EtcdInfo"] = rest_field(name="etcdInfo", visibility=["read"])
    """Etcd configuration."""
    nodes: Optional[list["_models.NodeInfo"]] = rest_field(visibility=["read"])
    """Kubernetes cluster nodes."""
    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kubernetes cluster version. Required."""

    @overload
    def __init__(
        self,
        *,
        version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KubernetesIPConfiguration(_Model):
    """Kubernetes node IP configuration.

    :ivar port: Port of the Kubernetes node.
    :vartype port: str
    :ivar ip_address: IP address of the Kubernetes node.
    :vartype ip_address: str
    """

    port: Optional[str] = rest_field(visibility=["read"])
    """Port of the Kubernetes node."""
    ip_address: Optional[str] = rest_field(name="ipAddress", visibility=["read", "create", "update", "delete", "query"])
    """IP address of the Kubernetes node."""

    @overload
    def __init__(
        self,
        *,
        ip_address: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KubernetesRole(Role, discriminator="Kubernetes"):
    """The limited preview of Kubernetes Cluster Management from the Azure supports:
    1. Using a simple turn-key option in Azure Portal, deploy a Kubernetes cluster on your Azure
        Stack Edge device.
    2. Configure Kubernetes cluster running on your device with Arc enabled Kubernetes with a click
        of a button in the Azure Portal.
    Azure Arc enables organizations to view, manage, and govern their on-premises Kubernetes
        clusters using the Azure Portal, command line tools, and APIs.
    3. Easily configure Persistent Volumes using SMB and NFS shares for storing container data.
    For more information, refer to the document here:
        https://databoxupdatepackages.blob.core.windows.net/documentation/Microsoft-Azure-Stack-Edge-K8-Cloud-Management-20210323.pdf
    Or Demo:
        https://databoxupdatepackages.blob.core.windows.net/documentation/Microsoft-Azure-Stack-Edge-K8S-Cloud-Management-20210323.mp4
    By using this feature, you agree to the preview legal terms. See the
        https://azure.microsoft.com/en-us/support/legal/preview-supplemental-terms/.

        :ivar id: Fully qualified resource ID for the resource. Ex -
         /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
        :vartype id: str
        :ivar name: The name of the resource.
        :vartype name: str
        :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
         "Microsoft.Storage/storageAccounts".
        :vartype type: str
        :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
         information.
        :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
        :ivar properties: Properties specific to Kubernetes role.
        :vartype properties: ~azure.mgmt.databoxedge.models.KubernetesRoleProperties
        :ivar kind: Role type. Required.
        :vartype kind: str or ~azure.mgmt.databoxedge.models.KUBERNETES
    """

    properties: Optional["_models.KubernetesRoleProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to Kubernetes role."""
    kind: Literal[RoleTypes.KUBERNETES] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Role type. Required."""

    __flattened_items = [
        "host_platform",
        "provisioning_state",
        "host_platform_type",
        "kubernetes_cluster_info",
        "kubernetes_role_resources",
        "role_status",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.KubernetesRoleProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class KubernetesRoleCompute(_Model):
    """Kubernetes role compute resource.

    :ivar vm_profile: VM profile. Required.
    :vartype vm_profile: str
    :ivar memory_in_bytes: Memory in bytes.
    :vartype memory_in_bytes: int
    :ivar processor_count: Processor count.
    :vartype processor_count: int
    """

    vm_profile: str = rest_field(name="vmProfile", visibility=["read", "create", "update", "delete", "query"])
    """VM profile. Required."""
    memory_in_bytes: Optional[int] = rest_field(name="memoryInBytes", visibility=["read"])
    """Memory in bytes."""
    processor_count: Optional[int] = rest_field(name="processorCount", visibility=["read"])
    """Processor count."""

    @overload
    def __init__(
        self,
        *,
        vm_profile: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KubernetesRoleNetwork(_Model):
    """Kubernetes role network resource.

    :ivar cni_config: Cni configuration.
    :vartype cni_config: ~azure.mgmt.databoxedge.models.CniConfig
    :ivar load_balancer_config: Load balancer configuration.
    :vartype load_balancer_config: ~azure.mgmt.databoxedge.models.LoadBalancerConfig
    """

    cni_config: Optional["_models.CniConfig"] = rest_field(name="cniConfig", visibility=["read"])
    """Cni configuration."""
    load_balancer_config: Optional["_models.LoadBalancerConfig"] = rest_field(
        name="loadBalancerConfig", visibility=["read"]
    )
    """Load balancer configuration."""


class KubernetesRoleProperties(_Model):
    """Kubernetes role properties.

    :ivar host_platform: Host OS supported by the Kubernetes role. Required. Known values are:
     "Windows" and "Linux".
    :vartype host_platform: str or ~azure.mgmt.databoxedge.models.PlatformType
    :ivar provisioning_state: State of Kubernetes deployment. Known values are: "Invalid",
     "Creating", "Created", "Updating", "Reconfiguring", "Failed", and "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.databoxedge.models.KubernetesState
    :ivar host_platform_type: Platform where the runtime is hosted. Known values are:
     "KubernetesCluster" and "LinuxVM".
    :vartype host_platform_type: str or ~azure.mgmt.databoxedge.models.HostPlatformType
    :ivar kubernetes_cluster_info: Kubernetes cluster configuration. Required.
    :vartype kubernetes_cluster_info: ~azure.mgmt.databoxedge.models.KubernetesClusterInfo
    :ivar kubernetes_role_resources: Kubernetes role resources. Required.
    :vartype kubernetes_role_resources: ~azure.mgmt.databoxedge.models.KubernetesRoleResources
    :ivar role_status: Role status. Required. Known values are: "Enabled" and "Disabled".
    :vartype role_status: str or ~azure.mgmt.databoxedge.models.RoleStatus
    """

    host_platform: Union[str, "_models.PlatformType"] = rest_field(
        name="hostPlatform", visibility=["read", "create", "update", "delete", "query"]
    )
    """Host OS supported by the Kubernetes role. Required. Known values are: \"Windows\" and
     \"Linux\"."""
    provisioning_state: Optional[Union[str, "_models.KubernetesState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """State of Kubernetes deployment. Known values are: \"Invalid\", \"Creating\", \"Created\",
     \"Updating\", \"Reconfiguring\", \"Failed\", and \"Deleting\"."""
    host_platform_type: Optional[Union[str, "_models.HostPlatformType"]] = rest_field(
        name="hostPlatformType", visibility=["read"]
    )
    """Platform where the runtime is hosted. Known values are: \"KubernetesCluster\" and \"LinuxVM\"."""
    kubernetes_cluster_info: "_models.KubernetesClusterInfo" = rest_field(
        name="kubernetesClusterInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kubernetes cluster configuration. Required."""
    kubernetes_role_resources: "_models.KubernetesRoleResources" = rest_field(
        name="kubernetesRoleResources", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kubernetes role resources. Required."""
    role_status: Union[str, "_models.RoleStatus"] = rest_field(
        name="roleStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Role status. Required. Known values are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        host_platform: Union[str, "_models.PlatformType"],
        kubernetes_cluster_info: "_models.KubernetesClusterInfo",
        kubernetes_role_resources: "_models.KubernetesRoleResources",
        role_status: Union[str, "_models.RoleStatus"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KubernetesRoleResources(_Model):
    """Kubernetes role resources.

    :ivar storage: Kubernetes role storage resource.
    :vartype storage: ~azure.mgmt.databoxedge.models.KubernetesRoleStorage
    :ivar compute: Kubernetes role compute resource. Required.
    :vartype compute: ~azure.mgmt.databoxedge.models.KubernetesRoleCompute
    :ivar network: Kubernetes role network resource.
    :vartype network: ~azure.mgmt.databoxedge.models.KubernetesRoleNetwork
    """

    storage: Optional["_models.KubernetesRoleStorage"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Kubernetes role storage resource."""
    compute: "_models.KubernetesRoleCompute" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kubernetes role compute resource. Required."""
    network: Optional["_models.KubernetesRoleNetwork"] = rest_field(visibility=["read"])
    """Kubernetes role network resource."""

    @overload
    def __init__(
        self,
        *,
        compute: "_models.KubernetesRoleCompute",
        storage: Optional["_models.KubernetesRoleStorage"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KubernetesRoleStorage(_Model):
    """Kubernetes role storage resource.

    :ivar storage_classes: Kubernetes storage class info.
    :vartype storage_classes: list[~azure.mgmt.databoxedge.models.KubernetesRoleStorageClassInfo]
    :ivar endpoints: Mount points of shares in role(s).
    :vartype endpoints: list[~azure.mgmt.databoxedge.models.MountPointMap]
    """

    storage_classes: Optional[list["_models.KubernetesRoleStorageClassInfo"]] = rest_field(
        name="storageClasses", visibility=["read"]
    )
    """Kubernetes storage class info."""
    endpoints: Optional[list["_models.MountPointMap"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Mount points of shares in role(s)."""

    @overload
    def __init__(
        self,
        *,
        endpoints: Optional[list["_models.MountPointMap"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KubernetesRoleStorageClassInfo(_Model):
    """Kubernetes storage class info.

    :ivar name: Storage class name.
    :vartype name: str
    :ivar type: Storage class type.
    :vartype type: str
    :ivar posix_compliant: If provisioned storage is posix compliant. Known values are: "Invalid",
     "Enabled", and "Disabled".
    :vartype posix_compliant: str or ~azure.mgmt.databoxedge.models.PosixComplianceStatus
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Storage class name."""
    type: Optional[str] = rest_field(visibility=["read"])
    """Storage class type."""
    posix_compliant: Optional[Union[str, "_models.PosixComplianceStatus"]] = rest_field(
        name="posixCompliant", visibility=["read"]
    )
    """If provisioned storage is posix compliant. Known values are: \"Invalid\", \"Enabled\", and
     \"Disabled\"."""


class LoadBalancerConfig(_Model):
    """Load balancer configuration.

    :ivar type: Load balancer type.
    :vartype type: str
    :ivar version: Load balancer version.
    :vartype version: str
    :ivar ip_range: Load balancer ipconfig.
    :vartype ip_range: list[str]
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """Load balancer type."""
    version: Optional[str] = rest_field(visibility=["read"])
    """Load balancer version."""
    ip_range: Optional[list[str]] = rest_field(
        name="ipRange", visibility=["read", "create", "update", "delete", "query"]
    )
    """Load balancer ipconfig."""

    @overload
    def __init__(
        self,
        *,
        ip_range: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MECRole(Role, discriminator="MEC"):
    """MEC role.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: Properties specific to MEC role.
    :vartype properties: ~azure.mgmt.databoxedge.models.MECRoleProperties
    :ivar kind: Role type. Required.
    :vartype kind: str or ~azure.mgmt.databoxedge.models.MEC
    """

    properties: Optional["_models.MECRoleProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties specific to MEC role."""
    kind: Literal[RoleTypes.MEC] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Role type. Required."""

    __flattened_items = ["connection_string", "controller_endpoint", "resource_unique_id", "role_status"]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.MECRoleProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class MECRoleProperties(_Model):
    """MEC role properties.

    :ivar connection_string: Activation key of the MEC.
    :vartype connection_string: ~azure.mgmt.databoxedge.models.AsymmetricEncryptedSecret
    :ivar controller_endpoint: Controller Endpoint.
    :vartype controller_endpoint: str
    :ivar resource_unique_id: Unique Id of the Resource.
    :vartype resource_unique_id: str
    :ivar role_status: Role status. Required. Known values are: "Enabled" and "Disabled".
    :vartype role_status: str or ~azure.mgmt.databoxedge.models.RoleStatus
    """

    connection_string: Optional["_models.AsymmetricEncryptedSecret"] = rest_field(
        name="connectionString", visibility=["read", "create", "update", "delete", "query"]
    )
    """Activation key of the MEC."""
    controller_endpoint: Optional[str] = rest_field(
        name="controllerEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Controller Endpoint."""
    resource_unique_id: Optional[str] = rest_field(
        name="resourceUniqueId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unique Id of the Resource."""
    role_status: Union[str, "_models.RoleStatus"] = rest_field(
        name="roleStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Role status. Required. Known values are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        role_status: Union[str, "_models.RoleStatus"],
        connection_string: Optional["_models.AsymmetricEncryptedSecret"] = None,
        controller_endpoint: Optional[str] = None,
        resource_unique_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricConfiguration(_Model):
    """Metric configuration.

    :ivar resource_id: The Resource ID on which the metrics should be pushed. Required.
    :vartype resource_id: str
    :ivar mdm_account: The MDM account to which the counters should be pushed.
    :vartype mdm_account: str
    :ivar metric_name_space: The MDM namespace to which the counters should be pushed. This is
     required if MDMAccount is specified.
    :vartype metric_name_space: str
    :ivar counter_sets: Host name for the IoT hub associated to the device. Required.
    :vartype counter_sets: list[~azure.mgmt.databoxedge.models.MetricCounterSet]
    """

    resource_id: str = rest_field(name="resourceId", visibility=["read", "create", "update", "delete", "query"])
    """The Resource ID on which the metrics should be pushed. Required."""
    mdm_account: Optional[str] = rest_field(
        name="mdmAccount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The MDM account to which the counters should be pushed."""
    metric_name_space: Optional[str] = rest_field(
        name="metricNameSpace", visibility=["read", "create", "update", "delete", "query"]
    )
    """The MDM namespace to which the counters should be pushed. This is required if MDMAccount is
     specified."""
    counter_sets: list["_models.MetricCounterSet"] = rest_field(
        name="counterSets", visibility=["read", "create", "update", "delete", "query"]
    )
    """Host name for the IoT hub associated to the device. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_id: str,
        counter_sets: list["_models.MetricCounterSet"],
        mdm_account: Optional[str] = None,
        metric_name_space: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricCounter(_Model):
    """The metric counter.

    :ivar name: The counter name. Required.
    :vartype name: str
    :ivar instance: The instance from which counter should be collected.
    :vartype instance: str
    :ivar dimension_filter: The dimension filter.
    :vartype dimension_filter: list[~azure.mgmt.databoxedge.models.MetricDimension]
    :ivar additional_dimensions: The additional dimensions to be added to metric.
    :vartype additional_dimensions: list[~azure.mgmt.databoxedge.models.MetricDimension]
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The counter name. Required."""
    instance: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The instance from which counter should be collected."""
    dimension_filter: Optional[list["_models.MetricDimension"]] = rest_field(
        name="dimensionFilter", visibility=["read", "create", "update", "delete", "query"]
    )
    """The dimension filter."""
    additional_dimensions: Optional[list["_models.MetricDimension"]] = rest_field(
        name="additionalDimensions", visibility=["read", "create", "update", "delete", "query"]
    )
    """The additional dimensions to be added to metric."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        instance: Optional[str] = None,
        dimension_filter: Optional[list["_models.MetricDimension"]] = None,
        additional_dimensions: Optional[list["_models.MetricDimension"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricCounterSet(_Model):
    """The metric counter set.

    :ivar counters: The counters that should be collected in this set. Required.
    :vartype counters: list[~azure.mgmt.databoxedge.models.MetricCounter]
    """

    counters: list["_models.MetricCounter"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The counters that should be collected in this set. Required."""

    @overload
    def __init__(
        self,
        *,
        counters: list["_models.MetricCounter"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricDimension(_Model):
    """The metric dimension.

    :ivar source_type: The dimension type. Required.
    :vartype source_type: str
    :ivar source_name: The dimension value. Required.
    :vartype source_name: str
    """

    source_type: str = rest_field(name="sourceType", visibility=["read", "create", "update", "delete", "query"])
    """The dimension type. Required."""
    source_name: str = rest_field(name="sourceName", visibility=["read", "create", "update", "delete", "query"])
    """The dimension value. Required."""

    @overload
    def __init__(
        self,
        *,
        source_type: str,
        source_name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricDimension_V1(_Model):
    """Metric Dimension v1.

    :ivar name: Name of the metrics dimension.
    :vartype name: str
    :ivar display_name: Display name of the metrics dimension.
    :vartype display_name: str
    :ivar to_be_exported_for_shoebox: To be exported to shoe box.
    :vartype to_be_exported_for_shoebox: bool
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the metrics dimension."""
    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name of the metrics dimension."""
    to_be_exported_for_shoebox: Optional[bool] = rest_field(
        name="toBeExportedForShoebox", visibility=["read", "create", "update", "delete", "query"]
    )
    """To be exported to shoe box."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        to_be_exported_for_shoebox: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetricSpecification_V1(_Model):
    """Metric specification version 1.

    :ivar name: Name of the metric.
    :vartype name: str
    :ivar display_name: Display name of the metric.
    :vartype display_name: str
    :ivar display_description: Description of the metric to be displayed.
    :vartype display_description: str
    :ivar unit: Metric units. Known values are: "NotSpecified", "Percent", "Count", "Seconds",
     "Milliseconds", "Bytes", "BytesPerSecond", and "CountPerSecond".
    :vartype unit: str or ~azure.mgmt.databoxedge.models.MetricUnit
    :ivar aggregation_type: Metric aggregation type. Known values are: "NotSpecified", "None",
     "Average", "Minimum", "Maximum", "Total", and "Count".
    :vartype aggregation_type: str or ~azure.mgmt.databoxedge.models.MetricAggregationType
    :ivar dimensions: Metric dimensions, other than default dimension which is resource.
    :vartype dimensions: list[~azure.mgmt.databoxedge.models.MetricDimension_V1]
    :ivar fill_gap_with_zero: Set true to fill the gaps with zero.
    :vartype fill_gap_with_zero: bool
    :ivar category: Metric category. Known values are: "Capacity" and "Transaction".
    :vartype category: str or ~azure.mgmt.databoxedge.models.MetricCategory
    :ivar resource_id_dimension_name_override: Resource name override.
    :vartype resource_id_dimension_name_override: str
    :ivar supported_time_grain_types: Support granularity of metrics.
    :vartype supported_time_grain_types: list[str or ~azure.mgmt.databoxedge.models.TimeGrain]
    :ivar supported_aggregation_types:
    :vartype supported_aggregation_types: list[str or
     ~azure.mgmt.databoxedge.models.MetricAggregationType]
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the metric."""
    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Display name of the metric."""
    display_description: Optional[str] = rest_field(
        name="displayDescription", visibility=["read", "create", "update", "delete", "query"]
    )
    """Description of the metric to be displayed."""
    unit: Optional[Union[str, "_models.MetricUnit"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metric units. Known values are: \"NotSpecified\", \"Percent\", \"Count\", \"Seconds\",
     \"Milliseconds\", \"Bytes\", \"BytesPerSecond\", and \"CountPerSecond\"."""
    aggregation_type: Optional[Union[str, "_models.MetricAggregationType"]] = rest_field(
        name="aggregationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Metric aggregation type. Known values are: \"NotSpecified\", \"None\", \"Average\",
     \"Minimum\", \"Maximum\", \"Total\", and \"Count\"."""
    dimensions: Optional[list["_models.MetricDimension_V1"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metric dimensions, other than default dimension which is resource."""
    fill_gap_with_zero: Optional[bool] = rest_field(
        name="fillGapWithZero", visibility=["read", "create", "update", "delete", "query"]
    )
    """Set true to fill the gaps with zero."""
    category: Optional[Union[str, "_models.MetricCategory"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metric category. Known values are: \"Capacity\" and \"Transaction\"."""
    resource_id_dimension_name_override: Optional[str] = rest_field(
        name="resourceIdDimensionNameOverride", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource name override."""
    supported_time_grain_types: Optional[list[Union[str, "_models.TimeGrain"]]] = rest_field(
        name="supportedTimeGrainTypes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Support granularity of metrics."""
    supported_aggregation_types: Optional[list[Union[str, "_models.MetricAggregationType"]]] = rest_field(
        name="supportedAggregationTypes", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        display_description: Optional[str] = None,
        unit: Optional[Union[str, "_models.MetricUnit"]] = None,
        aggregation_type: Optional[Union[str, "_models.MetricAggregationType"]] = None,
        dimensions: Optional[list["_models.MetricDimension_V1"]] = None,
        fill_gap_with_zero: Optional[bool] = None,
        category: Optional[Union[str, "_models.MetricCategory"]] = None,
        resource_id_dimension_name_override: Optional[str] = None,
        supported_time_grain_types: Optional[list[Union[str, "_models.TimeGrain"]]] = None,
        supported_aggregation_types: Optional[list[Union[str, "_models.MetricAggregationType"]]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MonitoringMetricConfiguration(ProxyResource):
    """The metric setting details for the role.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The metric setting properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.MonitoringMetricConfigurationProperties
    """

    properties: "_models.MonitoringMetricConfigurationProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The metric setting properties. Required."""

    __flattened_items = ["metric_configurations"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.MonitoringMetricConfigurationProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class MonitoringMetricConfigurationProperties(_Model):
    """Metrics properties.

    :ivar metric_configurations: The metrics configuration details. Required.
    :vartype metric_configurations: list[~azure.mgmt.databoxedge.models.MetricConfiguration]
    """

    metric_configurations: list["_models.MetricConfiguration"] = rest_field(
        name="metricConfigurations", visibility=["read", "create", "update", "delete", "query"]
    )
    """The metrics configuration details. Required."""

    @overload
    def __init__(
        self,
        *,
        metric_configurations: list["_models.MetricConfiguration"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MountPointMap(_Model):
    """The share mount point.

    :ivar share_id: ID of the share mounted to the role VM. Required.
    :vartype share_id: str
    :ivar role_id: ID of the role to which share is mounted.
    :vartype role_id: str
    :ivar mount_point: Mount point for the share.
    :vartype mount_point: str
    :ivar mount_type: Mounting type. Known values are: "Volume" and "HostPath".
    :vartype mount_type: str or ~azure.mgmt.databoxedge.models.MountType
    :ivar role_type: Role type. Known values are: "IOT", "ASA", "Functions", "Cognitive", "MEC",
     "CloudEdgeManagement", and "Kubernetes".
    :vartype role_type: str or ~azure.mgmt.databoxedge.models.RoleTypes
    """

    share_id: str = rest_field(name="shareId", visibility=["read", "create", "update", "delete", "query"])
    """ID of the share mounted to the role VM. Required."""
    role_id: Optional[str] = rest_field(name="roleId", visibility=["read"])
    """ID of the role to which share is mounted."""
    mount_point: Optional[str] = rest_field(name="mountPoint", visibility=["read"])
    """Mount point for the share."""
    mount_type: Optional[Union[str, "_models.MountType"]] = rest_field(name="mountType", visibility=["read"])
    """Mounting type. Known values are: \"Volume\" and \"HostPath\"."""
    role_type: Optional[Union[str, "_models.RoleTypes"]] = rest_field(name="roleType", visibility=["read"])
    """Role type. Known values are: \"IOT\", \"ASA\", \"Functions\", \"Cognitive\", \"MEC\",
     \"CloudEdgeManagement\", and \"Kubernetes\"."""

    @overload
    def __init__(
        self,
        *,
        share_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkAdapter(_Model):
    """Represents the networkAdapter on a device.

    :ivar adapter_id: Instance ID of network adapter.
    :vartype adapter_id: str
    :ivar adapter_position: Hardware position of network adapter.
    :vartype adapter_position: ~azure.mgmt.databoxedge.models.NetworkAdapterPosition
    :ivar index: Logical index of the adapter.
    :vartype index: int
    :ivar node_id: Node ID of the network adapter.
    :vartype node_id: str
    :ivar network_adapter_name: Network adapter name.
    :vartype network_adapter_name: str
    :ivar label: Hardware label for the adapter.
    :vartype label: str
    :ivar mac_address: MAC address.
    :vartype mac_address: str
    :ivar link_speed: Link speed.
    :vartype link_speed: int
    :ivar status: Value indicating whether this adapter is valid. Known values are: "Inactive" and
     "Active".
    :vartype status: str or ~azure.mgmt.databoxedge.models.NetworkAdapterStatus
    :ivar rdma_status: Value indicating whether this adapter is RDMA capable. Known values are:
     "Incapable" and "Capable".
    :vartype rdma_status: str or ~azure.mgmt.databoxedge.models.NetworkAdapterRDMAStatus
    :ivar dhcp_status: Value indicating whether this adapter has DHCP enabled. Known values are:
     "Disabled" and "Enabled".
    :vartype dhcp_status: str or ~azure.mgmt.databoxedge.models.NetworkAdapterDHCPStatus
    :ivar ipv4_configuration: The IPv4 configuration of the network adapter.
    :vartype ipv4_configuration: ~azure.mgmt.databoxedge.models.Ipv4Config
    :ivar ipv6_configuration: The IPv6 configuration of the network adapter.
    :vartype ipv6_configuration: ~azure.mgmt.databoxedge.models.Ipv6Config
    :ivar ipv6_link_local_address: The IPv6 local address.
    :vartype ipv6_link_local_address: str
    :ivar dns_servers: The list of DNS Servers of the device.
    :vartype dns_servers: list[str]
    """

    adapter_id: Optional[str] = rest_field(name="adapterId", visibility=["read"])
    """Instance ID of network adapter."""
    adapter_position: Optional["_models.NetworkAdapterPosition"] = rest_field(
        name="adapterPosition", visibility=["read"]
    )
    """Hardware position of network adapter."""
    index: Optional[int] = rest_field(visibility=["read"])
    """Logical index of the adapter."""
    node_id: Optional[str] = rest_field(name="nodeId", visibility=["read"])
    """Node ID of the network adapter."""
    network_adapter_name: Optional[str] = rest_field(name="networkAdapterName", visibility=["read"])
    """Network adapter name."""
    label: Optional[str] = rest_field(visibility=["read"])
    """Hardware label for the adapter."""
    mac_address: Optional[str] = rest_field(name="macAddress", visibility=["read"])
    """MAC address."""
    link_speed: Optional[int] = rest_field(name="linkSpeed", visibility=["read"])
    """Link speed."""
    status: Optional[Union[str, "_models.NetworkAdapterStatus"]] = rest_field(visibility=["read"])
    """Value indicating whether this adapter is valid. Known values are: \"Inactive\" and \"Active\"."""
    rdma_status: Optional[Union[str, "_models.NetworkAdapterRDMAStatus"]] = rest_field(
        name="rdmaStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value indicating whether this adapter is RDMA capable. Known values are: \"Incapable\" and
     \"Capable\"."""
    dhcp_status: Optional[Union[str, "_models.NetworkAdapterDHCPStatus"]] = rest_field(
        name="dhcpStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Value indicating whether this adapter has DHCP enabled. Known values are: \"Disabled\" and
     \"Enabled\"."""
    ipv4_configuration: Optional["_models.Ipv4Config"] = rest_field(name="ipv4Configuration", visibility=["read"])
    """The IPv4 configuration of the network adapter."""
    ipv6_configuration: Optional["_models.Ipv6Config"] = rest_field(name="ipv6Configuration", visibility=["read"])
    """The IPv6 configuration of the network adapter."""
    ipv6_link_local_address: Optional[str] = rest_field(name="ipv6LinkLocalAddress", visibility=["read"])
    """The IPv6 local address."""
    dns_servers: Optional[list[str]] = rest_field(name="dnsServers", visibility=["read"])
    """The list of DNS Servers of the device."""

    @overload
    def __init__(
        self,
        *,
        rdma_status: Optional[Union[str, "_models.NetworkAdapterRDMAStatus"]] = None,
        dhcp_status: Optional[Union[str, "_models.NetworkAdapterDHCPStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkAdapterPosition(_Model):
    """The network adapter position.

    :ivar network_group: The network group. Known values are: "None", "NonRDMA", and "RDMA".
    :vartype network_group: str or ~azure.mgmt.databoxedge.models.NetworkGroup
    :ivar port: The port.
    :vartype port: int
    """

    network_group: Optional[Union[str, "_models.NetworkGroup"]] = rest_field(name="networkGroup", visibility=["read"])
    """The network group. Known values are: \"None\", \"NonRDMA\", and \"RDMA\"."""
    port: Optional[int] = rest_field(visibility=["read"])
    """The port."""


class NetworkSettings(ProxyResource):
    """The network settings of a device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The properties of network settings of a device.
    :vartype properties: ~azure.mgmt.databoxedge.models.NetworkSettingsProperties
    """

    properties: Optional["_models.NetworkSettingsProperties"] = rest_field(visibility=["read"])
    """The properties of network settings of a device."""

    __flattened_items = ["network_adapters"]


class NetworkSettingsProperties(_Model):
    """The properties of network settings.

    :ivar network_adapters: The network adapter list on the device.
    :vartype network_adapters: list[~azure.mgmt.databoxedge.models.NetworkAdapter]
    """

    network_adapters: Optional[list["_models.NetworkAdapter"]] = rest_field(name="networkAdapters", visibility=["read"])
    """The network adapter list on the device."""


class Node(ARMBaseModel):
    """Represents a single node in a Data box Edge/Gateway device
    Gateway devices, standalone Edge devices and a single node cluster Edge device will all have 1
        node
    Multi-node Edge devices will have more than 1 nodes.

        :ivar id: The path ID that uniquely identifies the object.
        :vartype id: str
        :ivar name: The object name.
        :vartype name: str
        :ivar type: The hierarchical type of the object.
        :vartype type: str
        :ivar properties: The properties of the node.
        :vartype properties: ~azure.mgmt.databoxedge.models.NodeProperties
    """

    properties: Optional["_models.NodeProperties"] = rest_field(visibility=["read"])
    """The properties of the node."""

    __flattened_items = [
        "node_status",
        "node_chassis_serial_number",
        "node_serial_number",
        "node_display_name",
        "node_friendly_software_version",
        "node_hcs_version",
        "node_instance_id",
    ]


class NodeInfo(_Model):
    """Kubernetes node info.

    :ivar name: Node name.
    :vartype name: str
    :ivar type: Node type - Master/Worker. Known values are: "Invalid", "Master", and "Worker".
    :vartype type: str or ~azure.mgmt.databoxedge.models.KubernetesNodeType
    :ivar ip_configuration: IP Configuration of the Kubernetes node.
    :vartype ip_configuration: list[~azure.mgmt.databoxedge.models.KubernetesIPConfiguration]
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """Node name."""
    type: Optional[Union[str, "_models.KubernetesNodeType"]] = rest_field(visibility=["read"])
    """Node type - Master/Worker. Known values are: \"Invalid\", \"Master\", and \"Worker\"."""
    ip_configuration: Optional[list["_models.KubernetesIPConfiguration"]] = rest_field(
        name="ipConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """IP Configuration of the Kubernetes node."""

    @overload
    def __init__(
        self,
        *,
        ip_configuration: Optional[list["_models.KubernetesIPConfiguration"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NodeProperties(_Model):
    """This class represents the nodes in a highly available cluster.

    :ivar node_status: The current status of the individual node. Known values are: "Unknown",
     "Up", "Down", "Rebooting", and "ShuttingDown".
    :vartype node_status: str or ~azure.mgmt.databoxedge.models.NodeStatus
    :ivar node_chassis_serial_number: Serial number of the Chassis.
    :vartype node_chassis_serial_number: str
    :ivar node_serial_number: Serial number of the individual node.
    :vartype node_serial_number: str
    :ivar node_display_name: Display Name of the individual node.
    :vartype node_display_name: str
    :ivar node_friendly_software_version: Friendly software version name that is currently
     installed on the node.
    :vartype node_friendly_software_version: str
    :ivar node_hcs_version: HCS version that is currently installed on the node.
    :vartype node_hcs_version: str
    :ivar node_instance_id: Guid instance id of the node.
    :vartype node_instance_id: str
    """

    node_status: Optional[Union[str, "_models.NodeStatus"]] = rest_field(name="nodeStatus", visibility=["read"])
    """The current status of the individual node. Known values are: \"Unknown\", \"Up\", \"Down\",
     \"Rebooting\", and \"ShuttingDown\"."""
    node_chassis_serial_number: Optional[str] = rest_field(name="nodeChassisSerialNumber", visibility=["read"])
    """Serial number of the Chassis."""
    node_serial_number: Optional[str] = rest_field(name="nodeSerialNumber", visibility=["read"])
    """Serial number of the individual node."""
    node_display_name: Optional[str] = rest_field(name="nodeDisplayName", visibility=["read"])
    """Display Name of the individual node."""
    node_friendly_software_version: Optional[str] = rest_field(name="nodeFriendlySoftwareVersion", visibility=["read"])
    """Friendly software version name that is currently installed on the node."""
    node_hcs_version: Optional[str] = rest_field(name="nodeHcsVersion", visibility=["read"])
    """HCS version that is currently installed on the node."""
    node_instance_id: Optional[str] = rest_field(name="nodeInstanceId", visibility=["read"])
    """Guid instance id of the node."""


class NumaNodeData(_Model):
    """NUMA node data.

    :ivar numa_node_index: The NUMA node index.
    :vartype numa_node_index: int
    :ivar total_memory_in_mb: The total memory on the NUMA node.
    :vartype total_memory_in_mb: int
    :ivar logical_core_count_per_core: The logical cores per core count.
    :vartype logical_core_count_per_core: int
    :ivar effective_available_memory_in_mb: The effective available memory on the NUMA node in MB.
    :vartype effective_available_memory_in_mb: int
    :ivar free_v_cpu_indexes_for_hpn: The free VCPU indices for the Hpn VMs.
    :vartype free_v_cpu_indexes_for_hpn: list[int]
    :ivar v_cpu_indexes_for_hpn: The VCPU indices for Hpn VMs.
    :vartype v_cpu_indexes_for_hpn: list[int]
    :ivar v_cpu_indexes_for_root: The VCPU indices for the root.
    :vartype v_cpu_indexes_for_root: list[int]
    """

    numa_node_index: Optional[int] = rest_field(
        name="numaNodeIndex", visibility=["read", "create", "update", "delete", "query"]
    )
    """The NUMA node index."""
    total_memory_in_mb: Optional[int] = rest_field(
        name="totalMemoryInMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The total memory on the NUMA node."""
    logical_core_count_per_core: Optional[int] = rest_field(
        name="logicalCoreCountPerCore", visibility=["read", "create", "update", "delete", "query"]
    )
    """The logical cores per core count."""
    effective_available_memory_in_mb: Optional[int] = rest_field(
        name="effectiveAvailableMemoryInMb", visibility=["read", "create", "update", "delete", "query"]
    )
    """The effective available memory on the NUMA node in MB."""
    free_v_cpu_indexes_for_hpn: Optional[list[int]] = rest_field(
        name="freeVCpuIndexesForHpn", visibility=["read", "create", "update", "delete", "query"]
    )
    """The free VCPU indices for the Hpn VMs."""
    v_cpu_indexes_for_hpn: Optional[list[int]] = rest_field(
        name="vCpuIndexesForHpn", visibility=["read", "create", "update", "delete", "query"]
    )
    """The VCPU indices for Hpn VMs."""
    v_cpu_indexes_for_root: Optional[list[int]] = rest_field(
        name="vCpuIndexesForRoot", visibility=["read", "create", "update", "delete", "query"]
    )
    """The VCPU indices for the root."""

    @overload
    def __init__(
        self,
        *,
        numa_node_index: Optional[int] = None,
        total_memory_in_mb: Optional[int] = None,
        logical_core_count_per_core: Optional[int] = None,
        effective_available_memory_in_mb: Optional[int] = None,
        free_v_cpu_indexes_for_hpn: Optional[list[int]] = None,
        v_cpu_indexes_for_hpn: Optional[list[int]] = None,
        v_cpu_indexes_for_root: Optional[list[int]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """Operations.

    :ivar name: Name of the operation.
    :vartype name: str
    :ivar is_data_action: Is data action.
    :vartype is_data_action: bool
    :ivar display: Properties displayed for the operation.
    :vartype display: ~azure.mgmt.databoxedge.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    :ivar properties: Operation properties.
    :vartype properties: ~azure.mgmt.databoxedge.models.OperationProperties
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the operation."""
    is_data_action: Optional[bool] = rest_field(
        name="isDataAction", visibility=["read", "create", "update", "delete", "query"]
    )
    """Is data action."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties displayed for the operation."""
    origin: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Origin of the operation."""
    properties: Optional["_models.OperationProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Operation properties."""

    __flattened_items = ["service_specification"]

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        is_data_action: Optional[bool] = None,
        display: Optional["_models.OperationDisplay"] = None,
        origin: Optional[str] = None,
        properties: Optional["_models.OperationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class OperationDisplay(_Model):
    """Operation display properties.

    :ivar provider: Provider name.
    :vartype provider: str
    :ivar resource: The type of resource in which the operation is performed.
    :vartype resource: str
    :ivar operation: Operation to be performed on the resource.
    :vartype operation: str
    :ivar description: Description of the operation to be performed.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Provider name."""
    resource: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of resource in which the operation is performed."""
    operation: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Operation to be performed on the resource."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the operation to be performed."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationProperties(_Model):
    """Operation properties.

    :ivar service_specification: Service specification.
    :vartype service_specification: ~azure.mgmt.databoxedge.models.ServiceSpecification
    """

    service_specification: Optional["_models.ServiceSpecification"] = rest_field(
        name="serviceSpecification", visibility=["read", "create", "update", "delete", "query"]
    )
    """Service specification."""

    @overload
    def __init__(
        self,
        *,
        service_specification: Optional["_models.ServiceSpecification"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Order(ProxyResource):
    """The order details.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The order properties.
    :vartype properties: ~azure.mgmt.databoxedge.models.OrderProperties
    :ivar kind: It specify the order api version.
    :vartype kind: str
    """

    properties: Optional["_models.OrderProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The order properties."""
    kind: Optional[str] = rest_field(visibility=["read"])
    """It specify the order api version."""

    __flattened_items = [
        "order_id",
        "contact_information",
        "shipping_address",
        "current_status",
        "order_history",
        "serial_number",
        "delivery_tracking_info",
        "return_tracking_info",
        "shipment_type",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.OrderProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class OrderProperties(_Model):
    """Order properties.

    :ivar order_id: It specify the order resource id.
    :vartype order_id: str
    :ivar contact_information: The contact details. Required.
    :vartype contact_information: ~azure.mgmt.databoxedge.models.ContactDetails
    :ivar shipping_address: The shipping address.
    :vartype shipping_address: ~azure.mgmt.databoxedge.models.Address
    :ivar current_status: Current status of the order.
    :vartype current_status: ~azure.mgmt.databoxedge.models.OrderStatus
    :ivar order_history: List of status changes in the order.
    :vartype order_history: list[~azure.mgmt.databoxedge.models.OrderStatus]
    :ivar serial_number: Serial number of the device.
    :vartype serial_number: str
    :ivar delivery_tracking_info: Tracking information for the package delivered to the customer
     whether it has an original or a replacement device.
    :vartype delivery_tracking_info: list[~azure.mgmt.databoxedge.models.TrackingInfo]
    :ivar return_tracking_info: Tracking information for the package returned from the customer
     whether it has an original or a replacement device.
    :vartype return_tracking_info: list[~azure.mgmt.databoxedge.models.TrackingInfo]
    :ivar shipment_type: ShipmentType of the order. Known values are: "NotApplicable",
     "ShippedToCustomer", and "SelfPickup".
    :vartype shipment_type: str or ~azure.mgmt.databoxedge.models.ShipmentType
    """

    order_id: Optional[str] = rest_field(name="orderId", visibility=["read"])
    """It specify the order resource id."""
    contact_information: "_models.ContactDetails" = rest_field(
        name="contactInformation", visibility=["read", "create", "update", "delete", "query"]
    )
    """The contact details. Required."""
    shipping_address: Optional["_models.Address"] = rest_field(
        name="shippingAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """The shipping address."""
    current_status: Optional["_models.OrderStatus"] = rest_field(name="currentStatus", visibility=["read"])
    """Current status of the order."""
    order_history: Optional[list["_models.OrderStatus"]] = rest_field(name="orderHistory", visibility=["read"])
    """List of status changes in the order."""
    serial_number: Optional[str] = rest_field(name="serialNumber", visibility=["read"])
    """Serial number of the device."""
    delivery_tracking_info: Optional[list["_models.TrackingInfo"]] = rest_field(
        name="deliveryTrackingInfo", visibility=["read"]
    )
    """Tracking information for the package delivered to the customer whether it has an original or a
     replacement device."""
    return_tracking_info: Optional[list["_models.TrackingInfo"]] = rest_field(
        name="returnTrackingInfo", visibility=["read"]
    )
    """Tracking information for the package returned from the customer whether it has an original or a
     replacement device."""
    shipment_type: Optional[Union[str, "_models.ShipmentType"]] = rest_field(
        name="shipmentType", visibility=["read", "create", "update", "delete", "query"]
    )
    """ShipmentType of the order. Known values are: \"NotApplicable\", \"ShippedToCustomer\", and
     \"SelfPickup\"."""

    @overload
    def __init__(
        self,
        *,
        contact_information: "_models.ContactDetails",
        shipping_address: Optional["_models.Address"] = None,
        shipment_type: Optional[Union[str, "_models.ShipmentType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OrderStatus(_Model):
    """Represents a single status change.

       :ivar status: Status of the order as per the allowed status types. Required. Known values are:
        "Untracked", "AwaitingFulfillment", "AwaitingPreparation", "AwaitingShipment", "Shipped",
        "Arriving", "Delivered", "ReplacementRequested", "LostDevice", "Declined", "ReturnInitiated",
        "AwaitingReturnShipment", "ShippedBack", "CollectedAtMicrosoft", "AwaitingPickup",
        "PickupCompleted", and "AwaitingDrop".
       :vartype status: str or ~azure.mgmt.databoxedge.models.OrderState
       :ivar update_date_time: Time of status update.
       :vartype update_date_time: ~datetime.datetime
       :ivar comments: Comments related to this status change.
       :vartype comments: str
       :ivar tracking_information: Tracking information related to the state in the ordering flow.
       :vartype tracking_information: ~azure.mgmt.databoxedge.models.TrackingInfo
       :ivar additional_order_details: Dictionary to hold generic information which is not stored
    by the already existing properties.
       :vartype additional_order_details: dict[str, str]
    """

    status: Union[str, "_models.OrderState"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status of the order as per the allowed status types. Required. Known values are: \"Untracked\",
     \"AwaitingFulfillment\", \"AwaitingPreparation\", \"AwaitingShipment\", \"Shipped\",
     \"Arriving\", \"Delivered\", \"ReplacementRequested\", \"LostDevice\", \"Declined\",
     \"ReturnInitiated\", \"AwaitingReturnShipment\", \"ShippedBack\", \"CollectedAtMicrosoft\",
     \"AwaitingPickup\", \"PickupCompleted\", and \"AwaitingDrop\"."""
    update_date_time: Optional[datetime.datetime] = rest_field(
        name="updateDateTime", visibility=["read"], format="rfc3339"
    )
    """Time of status update."""
    comments: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Comments related to this status change."""
    tracking_information: Optional["_models.TrackingInfo"] = rest_field(name="trackingInformation", visibility=["read"])
    """Tracking information related to the state in the ordering flow."""
    additional_order_details: Optional[dict[str, str]] = rest_field(name="additionalOrderDetails", visibility=["read"])
    """Dictionary to hold generic information which is not stored
 by the already existing properties."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.OrderState"],
        comments: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PeriodicTimerEventTrigger(Trigger, discriminator="PeriodicTimerEvent"):
    """Trigger details.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: Periodic timer trigger properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.PeriodicTimerProperties
    :ivar kind: Trigger Kind. Required.
    :vartype kind: str or ~azure.mgmt.databoxedge.models.PERIODIC_TIMER_EVENT
    """

    properties: "_models.PeriodicTimerProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Periodic timer trigger properties. Required."""
    kind: Literal[TriggerEventType.PERIODIC_TIMER_EVENT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Trigger Kind. Required."""

    __flattened_items = ["source_info", "sink_info", "custom_context_tag"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.PeriodicTimerProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PeriodicTimerProperties(_Model):
    """Periodic timer trigger properties.

    :ivar source_info: Periodic timer details. Required.
    :vartype source_info: ~azure.mgmt.databoxedge.models.PeriodicTimerSourceInfo
    :ivar sink_info: Role Sink information. Required.
    :vartype sink_info: ~azure.mgmt.databoxedge.models.RoleSinkInfo
    :ivar custom_context_tag: A custom context tag typically used to correlate the trigger against
     its usage. For example, if a periodic timer trigger is intended for certain specific IoT
     modules in the device, the tag can be the name or the image URL of the module.
    :vartype custom_context_tag: str
    """

    source_info: "_models.PeriodicTimerSourceInfo" = rest_field(
        name="sourceInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Periodic timer details. Required."""
    sink_info: "_models.RoleSinkInfo" = rest_field(
        name="sinkInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Role Sink information. Required."""
    custom_context_tag: Optional[str] = rest_field(
        name="customContextTag", visibility=["read", "create", "update", "delete", "query"]
    )
    """A custom context tag typically used to correlate the trigger against its usage. For example, if
     a periodic timer trigger is intended for certain specific IoT modules in the device, the tag
     can be the name or the image URL of the module."""

    @overload
    def __init__(
        self,
        *,
        source_info: "_models.PeriodicTimerSourceInfo",
        sink_info: "_models.RoleSinkInfo",
        custom_context_tag: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PeriodicTimerSourceInfo(_Model):
    """Periodic timer event source.

    :ivar start_time: The time of the day that results in a valid trigger. Schedule is computed
     with reference to the time specified upto seconds. If timezone is not specified the time will
     considered to be in device timezone. The value will always be returned as UTC time. Required.
    :vartype start_time: ~datetime.datetime
    :ivar schedule: Periodic frequency at which timer event needs to be raised. Supports daily,
     hourly, minutes, and seconds. Required.
    :vartype schedule: str
    :ivar topic: Topic where periodic events are published to IoT device.
    :vartype topic: str
    """

    start_time: datetime.datetime = rest_field(
        name="startTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The time of the day that results in a valid trigger. Schedule is computed with reference to the
     time specified upto seconds. If timezone is not specified the time will considered to be in
     device timezone. The value will always be returned as UTC time. Required."""
    schedule: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes,
     and seconds. Required."""
    topic: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Topic where periodic events are published to IoT device."""

    @overload
    def __init__(
        self,
        *,
        start_time: datetime.datetime,
        schedule: str,
        topic: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProactiveLogCollectionSettingsProperties(_Model):
    """The properties of proactive log collection settings.

    :ivar user_consent: Proactive diagnostic collection consent flag. Required. Known values are:
     "Enabled" and "Disabled".
    :vartype user_consent: str or ~azure.mgmt.databoxedge.models.ProactiveDiagnosticsConsent
    """

    user_consent: Union[str, "_models.ProactiveDiagnosticsConsent"] = rest_field(
        name="userConsent", visibility=["read", "create", "update", "delete", "query"]
    )
    """Proactive diagnostic collection consent flag. Required. Known values are: \"Enabled\" and
     \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        user_consent: Union[str, "_models.ProactiveDiagnosticsConsent"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RawCertificateData(_Model):
    """Raw Certificate Data.

    :ivar authentication_type: The authentication type. Known values are: "Invalid" and
     "AzureActiveDirectory".
    :vartype authentication_type: str or ~azure.mgmt.databoxedge.models.AuthenticationType
    :ivar certificate: The base64 encoded certificate raw data. Required.
    :vartype certificate: str
    """

    authentication_type: Optional[Union[str, "_models.AuthenticationType"]] = rest_field(
        name="authenticationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The authentication type. Known values are: \"Invalid\" and \"AzureActiveDirectory\"."""
    certificate: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The base64 encoded certificate raw data. Required."""

    @overload
    def __init__(
        self,
        *,
        certificate: str,
        authentication_type: Optional[Union[str, "_models.AuthenticationType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RefreshDetails(_Model):
    """Fields for tracking refresh job on the share or container.

    :ivar in_progress_refresh_job_id: If a refresh job is currently in progress on this share or
     container, this field indicates the ARM resource ID of that job. The field is empty if no job
     is in progress.
    :vartype in_progress_refresh_job_id: str
    :ivar last_completed_refresh_job_time_in_utc: Indicates the completed time for the last refresh
     job on this particular share or container, if any.This could be a failed job or a successful
     job.
    :vartype last_completed_refresh_job_time_in_utc: ~datetime.datetime
    :ivar error_manifest_file: Indicates the relative path of the error xml for the last refresh
     job on this particular share or container, if any. This could be a failed job or a successful
     job.
    :vartype error_manifest_file: str
    :ivar last_job: Indicates the id of the last refresh job on this particular share or
     container,if any. This could be a failed job or a successful job.
    :vartype last_job: str
    """

    in_progress_refresh_job_id: Optional[str] = rest_field(
        name="inProgressRefreshJobId", visibility=["read", "create", "update", "delete", "query"]
    )
    """If a refresh job is currently in progress on this share or container, this field indicates the
     ARM resource ID of that job. The field is empty if no job is in progress."""
    last_completed_refresh_job_time_in_utc: Optional[datetime.datetime] = rest_field(
        name="lastCompletedRefreshJobTimeInUTC",
        visibility=["read", "create", "update", "delete", "query"],
        format="rfc3339",
    )
    """Indicates the completed time for the last refresh job on this particular share or container, if
     any.This could be a failed job or a successful job."""
    error_manifest_file: Optional[str] = rest_field(
        name="errorManifestFile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates the relative path of the error xml for the last refresh job on this particular share
     or container, if any. This could be a failed job or a successful job."""
    last_job: Optional[str] = rest_field(name="lastJob", visibility=["read", "create", "update", "delete", "query"])
    """Indicates the id of the last refresh job on this particular share or container,if any. This
     could be a failed job or a successful job."""

    @overload
    def __init__(
        self,
        *,
        in_progress_refresh_job_id: Optional[str] = None,
        last_completed_refresh_job_time_in_utc: Optional[datetime.datetime] = None,
        error_manifest_file: Optional[str] = None,
        last_job: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RemoteSupportSettings(_Model):
    """RemoteApplicationType for which remote support settings is being modified.

    :ivar remote_application_type: Remote application type. Known values are: "Powershell", "WAC",
     "LocalUI", and "AllApplications".
    :vartype remote_application_type: str or ~azure.mgmt.databoxedge.models.RemoteApplicationType
    :ivar access_level: Access level allowed for this remote application type. Known values are:
     "None", "ReadOnly", "ReadWrite", and "FullAccess".
    :vartype access_level: str or ~azure.mgmt.databoxedge.models.AccessLevel
    :ivar expiration_time_stamp_in_utc: Expiration time stamp.
    :vartype expiration_time_stamp_in_utc: ~datetime.datetime
    """

    remote_application_type: Optional[Union[str, "_models.RemoteApplicationType"]] = rest_field(
        name="remoteApplicationType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Remote application type. Known values are: \"Powershell\", \"WAC\", \"LocalUI\", and
     \"AllApplications\"."""
    access_level: Optional[Union[str, "_models.AccessLevel"]] = rest_field(
        name="accessLevel", visibility=["read", "create", "update", "delete", "query"]
    )
    """Access level allowed for this remote application type. Known values are: \"None\",
     \"ReadOnly\", \"ReadWrite\", and \"FullAccess\"."""
    expiration_time_stamp_in_utc: Optional[datetime.datetime] = rest_field(
        name="expirationTimeStampInUTC", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Expiration time stamp."""

    @overload
    def __init__(
        self,
        *,
        remote_application_type: Optional[Union[str, "_models.RemoteApplicationType"]] = None,
        access_level: Optional[Union[str, "_models.AccessLevel"]] = None,
        expiration_time_stamp_in_utc: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceIdentity(_Model):
    """Msi identity details of the resource.

    :ivar type: Identity type. Known values are: "None", "SystemAssigned", and "UserAssigned".
    :vartype type: str or ~azure.mgmt.databoxedge.models.MsiIdentityType
    :ivar principal_id: Service Principal Id backing the Msi.
    :vartype principal_id: str
    :ivar tenant_id: Home Tenant Id.
    :vartype tenant_id: str
    """

    type: Optional[Union[str, "_models.MsiIdentityType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Identity type. Known values are: \"None\", \"SystemAssigned\", and \"UserAssigned\"."""
    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """Service Principal Id backing the Msi."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """Home Tenant Id."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.MsiIdentityType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceMoveDetails(_Model):
    """Fields for tracking resource move.

    :ivar operation_in_progress: Denotes whether move operation is in progress. Known values are:
     "None", "ResourceMoveInProgress", and "ResourceMoveFailed".
    :vartype operation_in_progress: str or ~azure.mgmt.databoxedge.models.ResourceMoveStatus
    :ivar operation_in_progress_lock_timeout_in_utc: Denotes the timeout of the operation to
     finish.
    :vartype operation_in_progress_lock_timeout_in_utc: ~datetime.datetime
    """

    operation_in_progress: Optional[Union[str, "_models.ResourceMoveStatus"]] = rest_field(
        name="operationInProgress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Denotes whether move operation is in progress. Known values are: \"None\",
     \"ResourceMoveInProgress\", and \"ResourceMoveFailed\"."""
    operation_in_progress_lock_timeout_in_utc: Optional[datetime.datetime] = rest_field(
        name="operationInProgressLockTimeoutInUTC",
        visibility=["read", "create", "update", "delete", "query"],
        format="rfc3339",
    )
    """Denotes the timeout of the operation to finish."""

    @overload
    def __init__(
        self,
        *,
        operation_in_progress: Optional[Union[str, "_models.ResourceMoveStatus"]] = None,
        operation_in_progress_lock_timeout_in_utc: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RoleSinkInfo(_Model):
    """Compute role against which events will be raised.

    :ivar role_id: Compute role ID. Required.
    :vartype role_id: str
    """

    role_id: str = rest_field(name="roleId", visibility=["read", "create", "update", "delete", "query"])
    """Compute role ID. Required."""

    @overload
    def __init__(
        self,
        *,
        role_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Secret(_Model):
    """Holds device secret either as a KeyVault reference or as an encrypted value.

    :ivar encrypted_secret: Encrypted (using device public key) secret value.
    :vartype encrypted_secret: ~azure.mgmt.databoxedge.models.AsymmetricEncryptedSecret
    :ivar key_vault_id: Id of the Key-Vault where secret is stored (ex:
     secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740).
    :vartype key_vault_id: str
    """

    encrypted_secret: Optional["_models.AsymmetricEncryptedSecret"] = rest_field(
        name="encryptedSecret", visibility=["read", "create", "update", "delete", "query"]
    )
    """Encrypted (using device public key) secret value."""
    key_vault_id: Optional[str] = rest_field(
        name="keyVaultId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Id of the Key-Vault where secret is stored (ex:
     secrets/AuthClientSecret/82ef4346187a4033a10d629cde07d740)."""

    @overload
    def __init__(
        self,
        *,
        encrypted_secret: Optional["_models.AsymmetricEncryptedSecret"] = None,
        key_vault_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecuritySettings(ARMBaseModel):
    """The security settings of a device.

    :ivar id: The path ID that uniquely identifies the object.
    :vartype id: str
    :ivar name: The object name.
    :vartype name: str
    :ivar type: The hierarchical type of the object.
    :vartype type: str
    :ivar properties: Properties of the security settings. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.SecuritySettingsProperties
    """

    properties: "_models.SecuritySettingsProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties of the security settings. Required."""

    __flattened_items = ["device_admin_password"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.SecuritySettingsProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SecuritySettingsProperties(_Model):
    """The properties of security settings.

    :ivar device_admin_password: Device administrator password as an encrypted string (encrypted
     using RSA PKCS #1) is used to sign into the  local web UI of the device. The Actual password
     should have at least 8 characters that are a combination of  uppercase, lowercase, numeric, and
     special characters. Required.
    :vartype device_admin_password: ~azure.mgmt.databoxedge.models.AsymmetricEncryptedSecret
    """

    device_admin_password: "_models.AsymmetricEncryptedSecret" = rest_field(
        name="deviceAdminPassword", visibility=["read", "create", "update", "delete", "query"]
    )
    """Device administrator password as an encrypted string (encrypted using RSA PKCS #1) is used to
     sign into the  local web UI of the device. The Actual password should have at least 8
     characters that are a combination of  uppercase, lowercase, numeric, and special characters.
     Required."""

    @overload
    def __init__(
        self,
        *,
        device_admin_password: "_models.AsymmetricEncryptedSecret",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ServiceSpecification(_Model):
    """Service specification.

    :ivar metric_specifications: Metric specification as defined by shoebox.
    :vartype metric_specifications: list[~azure.mgmt.databoxedge.models.MetricSpecification_V1]
    """

    metric_specifications: Optional[list["_models.MetricSpecification_V1"]] = rest_field(
        name="metricSpecifications", visibility=["read", "create", "update", "delete", "query"]
    )
    """Metric specification as defined by shoebox."""

    @overload
    def __init__(
        self,
        *,
        metric_specifications: Optional[list["_models.MetricSpecification_V1"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Share(ProxyResource):
    """Represents a share on the  Data Box Edge/Gateway device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The share properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.ShareProperties
    """

    properties: "_models.ShareProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The share properties. Required."""

    __flattened_items = [
        "description",
        "share_status",
        "monitoring_status",
        "azure_container_info",
        "access_protocol",
        "user_access_rights",
        "client_access_rights",
        "refresh_details",
        "share_mappings",
        "data_policy",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ShareProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ShareAccessRight(_Model):
    """Specifies the mapping between this particular user and the type of access he has on shares on
    this device.

    :ivar share_id: The share ID. Required.
    :vartype share_id: str
    :ivar access_type: Type of access to be allowed on the share for this user. Required. Known
     values are: "Change", "Read", and "Custom".
    :vartype access_type: str or ~azure.mgmt.databoxedge.models.ShareAccessType
    """

    share_id: str = rest_field(name="shareId", visibility=["read", "create", "update", "delete", "query"])
    """The share ID. Required."""
    access_type: Union[str, "_models.ShareAccessType"] = rest_field(
        name="accessType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of access to be allowed on the share for this user. Required. Known values are:
     \"Change\", \"Read\", and \"Custom\"."""

    @overload
    def __init__(
        self,
        *,
        share_id: str,
        access_type: Union[str, "_models.ShareAccessType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ShareProperties(_Model):
    """The share properties.

    :ivar description: Description for the share.
    :vartype description: str
    :ivar share_status: Current status of the share. Required. Known values are: "Offline",
     "Unknown", "OK", "Updating", and "NeedsAttention".
    :vartype share_status: str or ~azure.mgmt.databoxedge.models.ShareStatus
    :ivar monitoring_status: Current monitoring status of the share. Required. Known values are:
     "Enabled" and "Disabled".
    :vartype monitoring_status: str or ~azure.mgmt.databoxedge.models.MonitoringStatus
    :ivar azure_container_info: Azure container mapping for the share.
    :vartype azure_container_info: ~azure.mgmt.databoxedge.models.AzureContainerInfo
    :ivar access_protocol: Access protocol to be used by the share. Required. Known values are:
     "SMB" and "NFS".
    :vartype access_protocol: str or ~azure.mgmt.databoxedge.models.ShareAccessProtocol
    :ivar user_access_rights: Mapping of users and corresponding access rights on the share
     (required for SMB protocol).
    :vartype user_access_rights: list[~azure.mgmt.databoxedge.models.UserAccessRight]
    :ivar client_access_rights: List of IP addresses and corresponding access rights on the
     share(required for NFS protocol).
    :vartype client_access_rights: list[~azure.mgmt.databoxedge.models.ClientAccessRight]
    :ivar refresh_details: Details of the refresh job on this share.
    :vartype refresh_details: ~azure.mgmt.databoxedge.models.RefreshDetails
    :ivar share_mappings: Share mount point to the role.
    :vartype share_mappings: list[~azure.mgmt.databoxedge.models.MountPointMap]
    :ivar data_policy: Data policy of the share. Known values are: "Cloud" and "Local".
    :vartype data_policy: str or ~azure.mgmt.databoxedge.models.DataPolicy
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description for the share."""
    share_status: Union[str, "_models.ShareStatus"] = rest_field(
        name="shareStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Current status of the share. Required. Known values are: \"Offline\", \"Unknown\", \"OK\",
     \"Updating\", and \"NeedsAttention\"."""
    monitoring_status: Union[str, "_models.MonitoringStatus"] = rest_field(
        name="monitoringStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Current monitoring status of the share. Required. Known values are: \"Enabled\" and
     \"Disabled\"."""
    azure_container_info: Optional["_models.AzureContainerInfo"] = rest_field(
        name="azureContainerInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure container mapping for the share."""
    access_protocol: Union[str, "_models.ShareAccessProtocol"] = rest_field(
        name="accessProtocol", visibility=["read", "create", "update", "delete", "query"]
    )
    """Access protocol to be used by the share. Required. Known values are: \"SMB\" and \"NFS\"."""
    user_access_rights: Optional[list["_models.UserAccessRight"]] = rest_field(
        name="userAccessRights", visibility=["read", "create", "update", "delete", "query"]
    )
    """Mapping of users and corresponding access rights on the share (required for SMB protocol)."""
    client_access_rights: Optional[list["_models.ClientAccessRight"]] = rest_field(
        name="clientAccessRights", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of IP addresses and corresponding access rights on the share(required for NFS protocol)."""
    refresh_details: Optional["_models.RefreshDetails"] = rest_field(
        name="refreshDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the refresh job on this share."""
    share_mappings: Optional[list["_models.MountPointMap"]] = rest_field(name="shareMappings", visibility=["read"])
    """Share mount point to the role."""
    data_policy: Optional[Union[str, "_models.DataPolicy"]] = rest_field(
        name="dataPolicy", visibility=["read", "create", "update", "delete", "query"]
    )
    """Data policy of the share. Known values are: \"Cloud\" and \"Local\"."""

    @overload
    def __init__(
        self,
        *,
        share_status: Union[str, "_models.ShareStatus"],
        monitoring_status: Union[str, "_models.MonitoringStatus"],
        access_protocol: Union[str, "_models.ShareAccessProtocol"],
        description: Optional[str] = None,
        azure_container_info: Optional["_models.AzureContainerInfo"] = None,
        user_access_rights: Optional[list["_models.UserAccessRight"]] = None,
        client_access_rights: Optional[list["_models.ClientAccessRight"]] = None,
        refresh_details: Optional["_models.RefreshDetails"] = None,
        data_policy: Optional[Union[str, "_models.DataPolicy"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Sku(_Model):
    """The SKU type.

    :ivar name: SKU name. Known values are: "Gateway", "Edge", "TEA_1Node", "TEA_1Node_UPS",
     "TEA_1Node_Heater", "TEA_1Node_UPS_Heater", "TEA_4Node_Heater", "TEA_4Node_UPS_Heater", "TMA",
     "TDC", "TCA_Small", "GPU", "TCA_Large", "EdgeP_Base", "EdgeP_High", "EdgePR_Base",
     "EdgePR_Base_UPS", "EP2_64_1VPU_W", "EP2_128_1T4_Mx1_W", "EP2_256_2T4_W", "EdgeMR_Mini",
     "RCA_Small", "RCA_Large", "RDC", "Management", "EP2_64_Mx1_W", "EP2_128_GPU1_Mx1_W",
     "EP2_256_GPU2_Mx1", and "EdgeMR_TCP".
    :vartype name: str or ~azure.mgmt.databoxedge.models.SkuName
    :ivar tier: The SKU tier. This is based on the SKU name. "Standard"
    :vartype tier: str or ~azure.mgmt.databoxedge.models.SkuTier
    """

    name: Optional[Union[str, "_models.SkuName"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """SKU name. Known values are: \"Gateway\", \"Edge\", \"TEA_1Node\", \"TEA_1Node_UPS\",
     \"TEA_1Node_Heater\", \"TEA_1Node_UPS_Heater\", \"TEA_4Node_Heater\", \"TEA_4Node_UPS_Heater\",
     \"TMA\", \"TDC\", \"TCA_Small\", \"GPU\", \"TCA_Large\", \"EdgeP_Base\", \"EdgeP_High\",
     \"EdgePR_Base\", \"EdgePR_Base_UPS\", \"EP2_64_1VPU_W\", \"EP2_128_1T4_Mx1_W\",
     \"EP2_256_2T4_W\", \"EdgeMR_Mini\", \"RCA_Small\", \"RCA_Large\", \"RDC\", \"Management\",
     \"EP2_64_Mx1_W\", \"EP2_128_GPU1_Mx1_W\", \"EP2_256_GPU2_Mx1\", and \"EdgeMR_TCP\"."""
    tier: Optional[Union[str, "_models.SkuTier"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The SKU tier. This is based on the SKU name. \"Standard\""""

    @overload
    def __init__(
        self,
        *,
        name: Optional[Union[str, "_models.SkuName"]] = None,
        tier: Optional[Union[str, "_models.SkuTier"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SkuCapability(_Model):
    """The metadata to describe the capability.

    :ivar name: An invariant to describe the feature.
    :vartype name: str
    :ivar value: An invariant if the feature is measured by quantity.
    :vartype value: str
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """An invariant to describe the feature."""
    value: Optional[str] = rest_field(visibility=["read"])
    """An invariant if the feature is measured by quantity."""


class SkuCost(_Model):
    """The metadata for retrieving price info.

    :ivar meter_id: Used for querying price from commerce.
    :vartype meter_id: str
    :ivar quantity: The cost quantity.
    :vartype quantity: int
    :ivar extended_unit: The extended unit.
    :vartype extended_unit: str
    """

    meter_id: Optional[str] = rest_field(name="meterId", visibility=["read"])
    """Used for querying price from commerce."""
    quantity: Optional[int] = rest_field(visibility=["read"])
    """The cost quantity."""
    extended_unit: Optional[str] = rest_field(name="extendedUnit", visibility=["read"])
    """The extended unit."""


class SkuLocationInfo(_Model):
    """The location info.

    :ivar location: The location.
    :vartype location: str
    :ivar zones: The zones.
    :vartype zones: list[str]
    :ivar sites: The sites.
    :vartype sites: list[str]
    """

    location: Optional[str] = rest_field(visibility=["read"])
    """The location."""
    zones: Optional[list[str]] = rest_field(visibility=["read"])
    """The zones."""
    sites: Optional[list[str]] = rest_field(visibility=["read"])
    """The sites."""


class StorageAccount(ProxyResource):
    """Represents a Storage Account on the  Data Box Edge/Gateway device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The Storage Account properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.StorageAccountProperties
    """

    properties: "_models.StorageAccountProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The Storage Account properties. Required."""

    __flattened_items = [
        "description",
        "storage_account_status",
        "data_policy",
        "storage_account_credential_id",
        "blob_endpoint",
        "container_count",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.StorageAccountProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class StorageAccountCredential(ProxyResource):
    """The storage account credential.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The storage account credential properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.StorageAccountCredentialProperties
    """

    properties: "_models.StorageAccountCredentialProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The storage account credential properties. Required."""

    __flattened_items = [
        "alias",
        "user_name",
        "account_key",
        "connection_string",
        "ssl_status",
        "blob_domain_name",
        "account_type",
        "storage_account_id",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.StorageAccountCredentialProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class StorageAccountCredentialProperties(_Model):
    """The storage account credential properties.

    :ivar alias: Alias for the storage account. Required.
    :vartype alias: str
    :ivar user_name: Username for the storage account.
    :vartype user_name: str
    :ivar account_key: Encrypted storage key.
    :vartype account_key: ~azure.mgmt.databoxedge.models.AsymmetricEncryptedSecret
    :ivar connection_string: Connection string for the storage account. Use this string if username
     and account key are not specified.
    :vartype connection_string: str
    :ivar ssl_status: Signifies whether SSL needs to be enabled or not. Required. Known values are:
     "Enabled" and "Disabled".
    :vartype ssl_status: str or ~azure.mgmt.databoxedge.models.SSLStatus
    :ivar blob_domain_name: Blob end point for private clouds.
    :vartype blob_domain_name: str
    :ivar account_type: Type of storage accessed on the storage account. Required. Known values
     are: "GeneralPurposeStorage" and "BlobStorage".
    :vartype account_type: str or ~azure.mgmt.databoxedge.models.AccountType
    :ivar storage_account_id: Id of the storage account.
    :vartype storage_account_id: str
    """

    alias: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Alias for the storage account. Required."""
    user_name: Optional[str] = rest_field(name="userName", visibility=["read", "create", "update", "delete", "query"])
    """Username for the storage account."""
    account_key: Optional["_models.AsymmetricEncryptedSecret"] = rest_field(
        name="accountKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Encrypted storage key."""
    connection_string: Optional[str] = rest_field(
        name="connectionString", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connection string for the storage account. Use this string if username and account key are not
     specified."""
    ssl_status: Union[str, "_models.SSLStatus"] = rest_field(
        name="sslStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Signifies whether SSL needs to be enabled or not. Required. Known values are: \"Enabled\" and
     \"Disabled\"."""
    blob_domain_name: Optional[str] = rest_field(
        name="blobDomainName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Blob end point for private clouds."""
    account_type: Union[str, "_models.AccountType"] = rest_field(
        name="accountType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of storage accessed on the storage account. Required. Known values are:
     \"GeneralPurposeStorage\" and \"BlobStorage\"."""
    storage_account_id: Optional[str] = rest_field(
        name="storageAccountId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Id of the storage account."""

    @overload
    def __init__(
        self,
        *,
        alias: str,
        ssl_status: Union[str, "_models.SSLStatus"],
        account_type: Union[str, "_models.AccountType"],
        user_name: Optional[str] = None,
        account_key: Optional["_models.AsymmetricEncryptedSecret"] = None,
        connection_string: Optional[str] = None,
        blob_domain_name: Optional[str] = None,
        storage_account_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StorageAccountProperties(_Model):
    """The storage account properties.

    :ivar description: Description for the storage Account.
    :vartype description: str
    :ivar storage_account_status: Current status of the storage account. Known values are: "OK",
     "Offline", "Unknown", "Updating", and "NeedsAttention".
    :vartype storage_account_status: str or ~azure.mgmt.databoxedge.models.StorageAccountStatus
    :ivar data_policy: Data policy of the storage Account. Required. Known values are: "Cloud" and
     "Local".
    :vartype data_policy: str or ~azure.mgmt.databoxedge.models.DataPolicy
    :ivar storage_account_credential_id: Storage Account Credential Id.
    :vartype storage_account_credential_id: str
    :ivar blob_endpoint: BlobEndpoint of Storage Account.
    :vartype blob_endpoint: str
    :ivar container_count: The Container Count. Present only for Storage Accounts with DataPolicy
     set to Cloud.
    :vartype container_count: int
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description for the storage Account."""
    storage_account_status: Optional[Union[str, "_models.StorageAccountStatus"]] = rest_field(
        name="storageAccountStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Current status of the storage account. Known values are: \"OK\", \"Offline\", \"Unknown\",
     \"Updating\", and \"NeedsAttention\"."""
    data_policy: Union[str, "_models.DataPolicy"] = rest_field(
        name="dataPolicy", visibility=["read", "create", "update", "delete", "query"]
    )
    """Data policy of the storage Account. Required. Known values are: \"Cloud\" and \"Local\"."""
    storage_account_credential_id: Optional[str] = rest_field(
        name="storageAccountCredentialId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Storage Account Credential Id."""
    blob_endpoint: Optional[str] = rest_field(name="blobEndpoint", visibility=["read"])
    """BlobEndpoint of Storage Account."""
    container_count: Optional[int] = rest_field(name="containerCount", visibility=["read"])
    """The Container Count. Present only for Storage Accounts with DataPolicy set to Cloud."""

    @overload
    def __init__(
        self,
        *,
        data_policy: Union[str, "_models.DataPolicy"],
        description: Optional[str] = None,
        storage_account_status: Optional[Union[str, "_models.StorageAccountStatus"]] = None,
        storage_account_credential_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubscriptionProperties(_Model):
    """SubscriptionProperties.

    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar location_placement_id:
    :vartype location_placement_id: str
    :ivar quota_id:
    :vartype quota_id: str
    :ivar serialized_details:
    :vartype serialized_details: str
    :ivar registered_features:
    :vartype registered_features:
     list[~azure.mgmt.databoxedge.models.SubscriptionRegisteredFeatures]
    """

    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read", "create", "update", "delete", "query"])
    location_placement_id: Optional[str] = rest_field(
        name="locationPlacementId", visibility=["read", "create", "update", "delete", "query"]
    )
    quota_id: Optional[str] = rest_field(name="quotaId", visibility=["read", "create", "update", "delete", "query"])
    serialized_details: Optional[str] = rest_field(
        name="serializedDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    registered_features: Optional[list["_models.SubscriptionRegisteredFeatures"]] = rest_field(
        name="registeredFeatures", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        location_placement_id: Optional[str] = None,
        quota_id: Optional[str] = None,
        serialized_details: Optional[str] = None,
        registered_features: Optional[list["_models.SubscriptionRegisteredFeatures"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubscriptionRegisteredFeatures(_Model):
    """SubscriptionRegisteredFeatures.

    :ivar name:
    :vartype name: str
    :ivar state:
    :vartype state: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    state: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        state: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SupportPackageRequestProperties(_Model):
    """The share properties.

       :ivar minimum_time_stamp: MinimumTimeStamp from where logs need to be collected.
       :vartype minimum_time_stamp: ~datetime.datetime
       :ivar maximum_time_stamp: Start of the timespan of the log collection.
       :vartype maximum_time_stamp: ~datetime.datetime
       :ivar include: Type of files, which need to be included in the logs
    This will contain the type of logs (Default/DefaultWithDumps/None/All/DefaultWithArchived)
    or a comma separated list of log types that are required.
       :vartype include: str
    """

    minimum_time_stamp: Optional[datetime.datetime] = rest_field(
        name="minimumTimeStamp", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """MinimumTimeStamp from where logs need to be collected."""
    maximum_time_stamp: Optional[datetime.datetime] = rest_field(
        name="maximumTimeStamp", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Start of the timespan of the log collection."""
    include: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of files, which need to be included in the logs
 This will contain the type of logs (Default/DefaultWithDumps/None/All/DefaultWithArchived)
 or a comma separated list of log types that are required."""

    @overload
    def __init__(
        self,
        *,
        minimum_time_stamp: Optional[datetime.datetime] = None,
        maximum_time_stamp: Optional[datetime.datetime] = None,
        include: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SymmetricKey(_Model):
    """Symmetric key for authentication.

    :ivar connection_string: Connection string based on the symmetric key.
    :vartype connection_string: ~azure.mgmt.databoxedge.models.AsymmetricEncryptedSecret
    """

    connection_string: Optional["_models.AsymmetricEncryptedSecret"] = rest_field(
        name="connectionString", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connection string based on the symmetric key."""

    @overload
    def __init__(
        self,
        *,
        connection_string: Optional["_models.AsymmetricEncryptedSecret"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.databoxedge.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.databoxedge.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackingInfo(_Model):
    """Tracking courier information.

    :ivar serial_number: Serial number of the device being tracked.
    :vartype serial_number: str
    :ivar carrier_name: Name of the carrier used in the delivery.
    :vartype carrier_name: str
    :ivar tracking_id: Tracking ID of the shipment.
    :vartype tracking_id: str
    :ivar tracking_url: Tracking URL of the shipment.
    :vartype tracking_url: str
    """

    serial_number: Optional[str] = rest_field(
        name="serialNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """Serial number of the device being tracked."""
    carrier_name: Optional[str] = rest_field(
        name="carrierName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of the carrier used in the delivery."""
    tracking_id: Optional[str] = rest_field(
        name="trackingId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Tracking ID of the shipment."""
    tracking_url: Optional[str] = rest_field(
        name="trackingUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """Tracking URL of the shipment."""

    @overload
    def __init__(
        self,
        *,
        serial_number: Optional[str] = None,
        carrier_name: Optional[str] = None,
        tracking_id: Optional[str] = None,
        tracking_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TriggerSupportPackageRequest(ARMBaseModel):
    """The request object for trigger support package.

    :ivar id: The path ID that uniquely identifies the object.
    :vartype id: str
    :ivar name: The object name.
    :vartype name: str
    :ivar type: The hierarchical type of the object.
    :vartype type: str
    :ivar properties: The TriggerSupportPackageRequest properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.SupportPackageRequestProperties
    """

    properties: "_models.SupportPackageRequestProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The TriggerSupportPackageRequest properties. Required."""

    __flattened_items = ["minimum_time_stamp", "maximum_time_stamp", "include"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.SupportPackageRequestProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class UpdateDetails(_Model):
    """Update Specific attributes.

    :ivar update_title: Title of the Update.
    :vartype update_title: str
    :ivar update_size: Size of the update(In Bytes).
    :vartype update_size: float
    :ivar update_type: Type of the Update. Known values are: "Software", "Kubernetes", and
     "Firmware".
    :vartype update_type: str or ~azure.mgmt.databoxedge.models.UpdateType
    :ivar target_version: Target Version number.
    :vartype target_version: str
    :ivar friendly_version_number: Friendly Version Number.
    :vartype friendly_version_number: str
    :ivar estimated_install_time_in_mins: Estimated Install Time for the update.
    :vartype estimated_install_time_in_mins: int
    :ivar reboot_behavior: Indicates if updates are available and at least one of the updates needs
     a reboot. Known values are: "NeverReboots", "RequiresReboot", and "RequestReboot".
    :vartype reboot_behavior: str or ~azure.mgmt.databoxedge.models.InstallRebootBehavior
    :ivar installation_impact: Impact of Installing an updateType. Known values are: "None",
     "DeviceRebooted", and "KubernetesWorkloadsDown".
    :vartype installation_impact: str or ~azure.mgmt.databoxedge.models.InstallationImpact
    :ivar status: Status of the update. Known values are: "DownloadPending", "DownloadStarted",
     "DownloadCompleted", "InstallStarted", and "InstallCompleted".
    :vartype status: str or ~azure.mgmt.databoxedge.models.UpdateStatus
    """

    update_title: Optional[str] = rest_field(
        name="updateTitle", visibility=["read", "create", "update", "delete", "query"]
    )
    """Title of the Update."""
    update_size: Optional[float] = rest_field(
        name="updateSize", visibility=["read", "create", "update", "delete", "query"]
    )
    """Size of the update(In Bytes)."""
    update_type: Optional[Union[str, "_models.UpdateType"]] = rest_field(
        name="updateType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of the Update. Known values are: \"Software\", \"Kubernetes\", and \"Firmware\"."""
    target_version: Optional[str] = rest_field(
        name="targetVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """Target Version number."""
    friendly_version_number: Optional[str] = rest_field(
        name="friendlyVersionNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """Friendly Version Number."""
    estimated_install_time_in_mins: Optional[int] = rest_field(
        name="estimatedInstallTimeInMins", visibility=["read", "create", "update", "delete", "query"]
    )
    """Estimated Install Time for the update."""
    reboot_behavior: Optional[Union[str, "_models.InstallRebootBehavior"]] = rest_field(
        name="rebootBehavior", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates if updates are available and at least one of the updates needs a reboot. Known values
     are: \"NeverReboots\", \"RequiresReboot\", and \"RequestReboot\"."""
    installation_impact: Optional[Union[str, "_models.InstallationImpact"]] = rest_field(
        name="installationImpact", visibility=["read", "create", "update", "delete", "query"]
    )
    """Impact of Installing an updateType. Known values are: \"None\", \"DeviceRebooted\", and
     \"KubernetesWorkloadsDown\"."""
    status: Optional[Union[str, "_models.UpdateStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Status of the update. Known values are: \"DownloadPending\", \"DownloadStarted\",
     \"DownloadCompleted\", \"InstallStarted\", and \"InstallCompleted\"."""

    @overload
    def __init__(
        self,
        *,
        update_title: Optional[str] = None,
        update_size: Optional[float] = None,
        update_type: Optional[Union[str, "_models.UpdateType"]] = None,
        target_version: Optional[str] = None,
        friendly_version_number: Optional[str] = None,
        estimated_install_time_in_mins: Optional[int] = None,
        reboot_behavior: Optional[Union[str, "_models.InstallRebootBehavior"]] = None,
        installation_impact: Optional[Union[str, "_models.InstallationImpact"]] = None,
        status: Optional[Union[str, "_models.UpdateStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpdateDownloadProgress(_Model):
    """Details about the download progress of update.

    :ivar download_phase: The download phase. Known values are: "Unknown", "Initializing",
     "Downloading", and "Verifying".
    :vartype download_phase: str or ~azure.mgmt.databoxedge.models.DownloadPhase
    :ivar percent_complete: Percentage of completion.
    :vartype percent_complete: int
    :ivar total_bytes_to_download: Total bytes to download.
    :vartype total_bytes_to_download: float
    :ivar total_bytes_downloaded: Total bytes downloaded.
    :vartype total_bytes_downloaded: float
    :ivar number_of_updates_to_download: Number of updates to download.
    :vartype number_of_updates_to_download: int
    :ivar number_of_updates_downloaded: Number of updates downloaded.
    :vartype number_of_updates_downloaded: int
    """

    download_phase: Optional[Union[str, "_models.DownloadPhase"]] = rest_field(
        name="downloadPhase", visibility=["read"]
    )
    """The download phase. Known values are: \"Unknown\", \"Initializing\", \"Downloading\", and
     \"Verifying\"."""
    percent_complete: Optional[int] = rest_field(name="percentComplete", visibility=["read"])
    """Percentage of completion."""
    total_bytes_to_download: Optional[float] = rest_field(name="totalBytesToDownload", visibility=["read"])
    """Total bytes to download."""
    total_bytes_downloaded: Optional[float] = rest_field(name="totalBytesDownloaded", visibility=["read"])
    """Total bytes downloaded."""
    number_of_updates_to_download: Optional[int] = rest_field(name="numberOfUpdatesToDownload", visibility=["read"])
    """Number of updates to download."""
    number_of_updates_downloaded: Optional[int] = rest_field(name="numberOfUpdatesDownloaded", visibility=["read"])
    """Number of updates downloaded."""


class UpdateInstallProgress(_Model):
    """Progress details during installation of updates.

    :ivar percent_complete: Percentage completed.
    :vartype percent_complete: int
    :ivar number_of_updates_to_install: Number of updates to install.
    :vartype number_of_updates_to_install: int
    :ivar number_of_updates_installed: Number of updates installed.
    :vartype number_of_updates_installed: int
    """

    percent_complete: Optional[int] = rest_field(name="percentComplete", visibility=["read"])
    """Percentage completed."""
    number_of_updates_to_install: Optional[int] = rest_field(name="numberOfUpdatesToInstall", visibility=["read"])
    """Number of updates to install."""
    number_of_updates_installed: Optional[int] = rest_field(name="numberOfUpdatesInstalled", visibility=["read"])
    """Number of updates installed."""


class UpdateSummary(ProxyResource):
    """Details about ongoing updates and availability of updates on the device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The device update information summary.
    :vartype properties: ~azure.mgmt.databoxedge.models.UpdateSummaryProperties
    """

    properties: Optional["_models.UpdateSummaryProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The device update information summary."""

    __flattened_items = [
        "device_version_number",
        "friendly_device_version_name",
        "device_last_scanned_date_time",
        "last_completed_scan_job_date_time",
        "last_successful_scan_job_time",
        "last_completed_download_job_date_time",
        "last_completed_download_job_id",
        "last_download_job_status",
        "last_successful_install_job_date_time",
        "last_completed_install_job_date_time",
        "last_completed_install_job_id",
        "last_install_job_status",
        "total_number_of_updates_available",
        "total_number_of_updates_pending_download",
        "total_number_of_updates_pending_install",
        "reboot_behavior",
        "ongoing_update_operation",
        "in_progress_download_job_id",
        "in_progress_install_job_id",
        "in_progress_download_job_started_date_time",
        "in_progress_install_job_started_date_time",
        "update_titles",
        "updates",
        "total_update_size_in_bytes",
        "total_time_in_minutes",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.UpdateSummaryProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class UpdateSummaryProperties(_Model):
    """The device update information summary.

    :ivar device_version_number: The current version of the device in format: 1.2.17312.13.",.
    :vartype device_version_number: str
    :ivar friendly_device_version_name: The current version of the device in text format.
    :vartype friendly_device_version_name: str
    :ivar device_last_scanned_date_time: The last time when a scan was done on the device.
    :vartype device_last_scanned_date_time: ~datetime.datetime
    :ivar last_completed_scan_job_date_time: The time when the last scan job was completed
     (success/cancelled/failed) on the appliance.
    :vartype last_completed_scan_job_date_time: ~datetime.datetime
    :ivar last_successful_scan_job_time: Time when the last scan job is successfully completed.
    :vartype last_successful_scan_job_time: ~datetime.datetime
    :ivar last_completed_download_job_date_time: The time when the last Download job was completed
     (success/cancelled/failed) on the appliance.
    :vartype last_completed_download_job_date_time: ~datetime.datetime
    :ivar last_completed_download_job_id: JobId of the last ran download job.(Can be
     success/cancelled/failed).
    :vartype last_completed_download_job_id: str
    :ivar last_download_job_status: JobStatus of the last ran download job. Known values are:
     "Invalid", "Running", "Succeeded", "Failed", "Canceled", "Paused", and "Scheduled".
    :vartype last_download_job_status: str or ~azure.mgmt.databoxedge.models.JobStatus
    :ivar last_successful_install_job_date_time: The time when the Last Install job was completed
     successfully on the appliance.
    :vartype last_successful_install_job_date_time: ~datetime.datetime
    :ivar last_completed_install_job_date_time: The time when the last Install job was completed
     (success/cancelled/failed) on the appliance.
    :vartype last_completed_install_job_date_time: ~datetime.datetime
    :ivar last_completed_install_job_id: JobId of the last ran install job.(Can be
     success/cancelled/failed).
    :vartype last_completed_install_job_id: str
    :ivar last_install_job_status: JobStatus of the last ran install job. Known values are:
     "Invalid", "Running", "Succeeded", "Failed", "Canceled", "Paused", and "Scheduled".
    :vartype last_install_job_status: str or ~azure.mgmt.databoxedge.models.JobStatus
    :ivar total_number_of_updates_available: The number of updates available for the current device
     version as per the last device scan.
    :vartype total_number_of_updates_available: int
    :ivar total_number_of_updates_pending_download: The total number of items pending download.
    :vartype total_number_of_updates_pending_download: int
    :ivar total_number_of_updates_pending_install: The total number of items pending install.
    :vartype total_number_of_updates_pending_install: int
    :ivar reboot_behavior: Indicates if updates are available and at least one of the updates needs
     a reboot. Known values are: "NeverReboots", "RequiresReboot", and "RequestReboot".
    :vartype reboot_behavior: str or ~azure.mgmt.databoxedge.models.InstallRebootBehavior
    :ivar ongoing_update_operation: The current update operation. Known values are: "None", "Scan",
     "Download", and "Install".
    :vartype ongoing_update_operation: str or ~azure.mgmt.databoxedge.models.UpdateOperation
    :ivar in_progress_download_job_id: The job ID of the download job in progress.
    :vartype in_progress_download_job_id: str
    :ivar in_progress_install_job_id: The job ID of the install job in progress.
    :vartype in_progress_install_job_id: str
    :ivar in_progress_download_job_started_date_time: The time when the currently running download
     (if any) started.
    :vartype in_progress_download_job_started_date_time: ~datetime.datetime
    :ivar in_progress_install_job_started_date_time: The time when the currently running install
     (if any) started.
    :vartype in_progress_install_job_started_date_time: ~datetime.datetime
    :ivar update_titles: The list of updates available for install.
    :vartype update_titles: list[str]
    :ivar updates: The list of updates available for install.
    :vartype updates: list[~azure.mgmt.databoxedge.models.UpdateDetails]
    :ivar total_update_size_in_bytes: The total size of updates available for download in bytes.
    :vartype total_update_size_in_bytes: float
    :ivar total_time_in_minutes: The total time in Minutes.
    :vartype total_time_in_minutes: int
    """

    device_version_number: Optional[str] = rest_field(
        name="deviceVersionNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """The current version of the device in format: 1.2.17312.13.\",."""
    friendly_device_version_name: Optional[str] = rest_field(
        name="friendlyDeviceVersionName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The current version of the device in text format."""
    device_last_scanned_date_time: Optional[datetime.datetime] = rest_field(
        name="deviceLastScannedDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The last time when a scan was done on the device."""
    last_completed_scan_job_date_time: Optional[datetime.datetime] = rest_field(
        name="lastCompletedScanJobDateTime",
        visibility=["read", "create", "update", "delete", "query"],
        format="rfc3339",
    )
    """The time when the last scan job was completed (success/cancelled/failed) on the appliance."""
    last_successful_scan_job_time: Optional[datetime.datetime] = rest_field(
        name="lastSuccessfulScanJobTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Time when the last scan job is successfully completed."""
    last_completed_download_job_date_time: Optional[datetime.datetime] = rest_field(
        name="lastCompletedDownloadJobDateTime", visibility=["read"], format="rfc3339"
    )
    """The time when the last Download job was completed (success/cancelled/failed) on the appliance."""
    last_completed_download_job_id: Optional[str] = rest_field(name="lastCompletedDownloadJobId", visibility=["read"])
    """JobId of the last ran download job.(Can be success/cancelled/failed)."""
    last_download_job_status: Optional[Union[str, "_models.JobStatus"]] = rest_field(
        name="lastDownloadJobStatus", visibility=["read"]
    )
    """JobStatus of the last ran download job. Known values are: \"Invalid\", \"Running\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Paused\", and \"Scheduled\"."""
    last_successful_install_job_date_time: Optional[datetime.datetime] = rest_field(
        name="lastSuccessfulInstallJobDateTime",
        visibility=["read", "create", "update", "delete", "query"],
        format="rfc3339",
    )
    """The time when the Last Install job was completed successfully on the appliance."""
    last_completed_install_job_date_time: Optional[datetime.datetime] = rest_field(
        name="lastCompletedInstallJobDateTime", visibility=["read"], format="rfc3339"
    )
    """The time when the last Install job was completed (success/cancelled/failed) on the appliance."""
    last_completed_install_job_id: Optional[str] = rest_field(name="lastCompletedInstallJobId", visibility=["read"])
    """JobId of the last ran install job.(Can be success/cancelled/failed)."""
    last_install_job_status: Optional[Union[str, "_models.JobStatus"]] = rest_field(
        name="lastInstallJobStatus", visibility=["read"]
    )
    """JobStatus of the last ran install job. Known values are: \"Invalid\", \"Running\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Paused\", and \"Scheduled\"."""
    total_number_of_updates_available: Optional[int] = rest_field(
        name="totalNumberOfUpdatesAvailable", visibility=["read"]
    )
    """The number of updates available for the current device version as per the last device scan."""
    total_number_of_updates_pending_download: Optional[int] = rest_field(
        name="totalNumberOfUpdatesPendingDownload", visibility=["read"]
    )
    """The total number of items pending download."""
    total_number_of_updates_pending_install: Optional[int] = rest_field(
        name="totalNumberOfUpdatesPendingInstall", visibility=["read"]
    )
    """The total number of items pending install."""
    reboot_behavior: Optional[Union[str, "_models.InstallRebootBehavior"]] = rest_field(
        name="rebootBehavior", visibility=["read"]
    )
    """Indicates if updates are available and at least one of the updates needs a reboot. Known values
     are: \"NeverReboots\", \"RequiresReboot\", and \"RequestReboot\"."""
    ongoing_update_operation: Optional[Union[str, "_models.UpdateOperation"]] = rest_field(
        name="ongoingUpdateOperation", visibility=["read"]
    )
    """The current update operation. Known values are: \"None\", \"Scan\", \"Download\", and
     \"Install\"."""
    in_progress_download_job_id: Optional[str] = rest_field(name="inProgressDownloadJobId", visibility=["read"])
    """The job ID of the download job in progress."""
    in_progress_install_job_id: Optional[str] = rest_field(name="inProgressInstallJobId", visibility=["read"])
    """The job ID of the install job in progress."""
    in_progress_download_job_started_date_time: Optional[datetime.datetime] = rest_field(
        name="inProgressDownloadJobStartedDateTime", visibility=["read"], format="rfc3339"
    )
    """The time when the currently running download (if any) started."""
    in_progress_install_job_started_date_time: Optional[datetime.datetime] = rest_field(
        name="inProgressInstallJobStartedDateTime", visibility=["read"], format="rfc3339"
    )
    """The time when the currently running install (if any) started."""
    update_titles: Optional[list[str]] = rest_field(name="updateTitles", visibility=["read"])
    """The list of updates available for install."""
    updates: Optional[list["_models.UpdateDetails"]] = rest_field(visibility=["read"])
    """The list of updates available for install."""
    total_update_size_in_bytes: Optional[float] = rest_field(name="totalUpdateSizeInBytes", visibility=["read"])
    """The total size of updates available for download in bytes."""
    total_time_in_minutes: Optional[int] = rest_field(name="totalTimeInMinutes", visibility=["read"])
    """The total time in Minutes."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        device_version_number: Optional[str] = None,
        friendly_device_version_name: Optional[str] = None,
        device_last_scanned_date_time: Optional[datetime.datetime] = None,
        last_completed_scan_job_date_time: Optional[datetime.datetime] = None,
        last_successful_scan_job_time: Optional[datetime.datetime] = None,
        last_successful_install_job_date_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UploadCertificateRequest(_Model):
    """The upload certificate request.

    :ivar properties: The Base 64 encoded certificate raw data. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.RawCertificateData
    """

    properties: "_models.RawCertificateData" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Base 64 encoded certificate raw data. Required."""

    __flattened_items = ["authentication_type", "certificate"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.RawCertificateData",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class UploadCertificateResponse(_Model):
    """The upload registration certificate response.

    :ivar auth_type: Specifies authentication type. Known values are: "Invalid" and
     "AzureActiveDirectory".
    :vartype auth_type: str or ~azure.mgmt.databoxedge.models.AuthenticationType
    :ivar resource_id: The resource ID of the Data Box Edge/Gateway device.
    :vartype resource_id: str
    :ivar aad_authority: Azure Active Directory tenant authority.
    :vartype aad_authority: str
    :ivar aad_tenant_id: Azure Active Directory tenant ID.
    :vartype aad_tenant_id: str
    :ivar service_principal_client_id: Azure Active Directory service principal client ID.
    :vartype service_principal_client_id: str
    :ivar service_principal_object_id: Azure Active Directory service principal object ID.
    :vartype service_principal_object_id: str
    :ivar azure_management_endpoint_audience: The azure management endpoint audience.
    :vartype azure_management_endpoint_audience: str
    :ivar aad_audience: Identifier of the target resource that is the recipient of the requested
     token.
    :vartype aad_audience: str
    """

    auth_type: Optional[Union[str, "_models.AuthenticationType"]] = rest_field(
        name="authType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Specifies authentication type. Known values are: \"Invalid\" and \"AzureActiveDirectory\"."""
    resource_id: Optional[str] = rest_field(name="resourceId", visibility=["read"])
    """The resource ID of the Data Box Edge/Gateway device."""
    aad_authority: Optional[str] = rest_field(name="aadAuthority", visibility=["read"])
    """Azure Active Directory tenant authority."""
    aad_tenant_id: Optional[str] = rest_field(name="aadTenantId", visibility=["read"])
    """Azure Active Directory tenant ID."""
    service_principal_client_id: Optional[str] = rest_field(name="servicePrincipalClientId", visibility=["read"])
    """Azure Active Directory service principal client ID."""
    service_principal_object_id: Optional[str] = rest_field(name="servicePrincipalObjectId", visibility=["read"])
    """Azure Active Directory service principal object ID."""
    azure_management_endpoint_audience: Optional[str] = rest_field(
        name="azureManagementEndpointAudience", visibility=["read"]
    )
    """The azure management endpoint audience."""
    aad_audience: Optional[str] = rest_field(name="aadAudience", visibility=["read"])
    """Identifier of the target resource that is the recipient of the requested token."""

    @overload
    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthenticationType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class User(ProxyResource):
    """Represents a user who has access to one or more shares on the Data Box Edge/Gateway device.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.databoxedge.models.SystemData
    :ivar properties: The storage account credential properties. Required.
    :vartype properties: ~azure.mgmt.databoxedge.models.UserProperties
    """

    properties: "_models.UserProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The storage account credential properties. Required."""

    __flattened_items = ["encrypted_password", "share_access_rights", "user_type"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.UserProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class UserAccessRight(_Model):
    """The mapping between a particular user and the access type on the SMB share.

    :ivar user_id: User ID (already existing in the device). Required.
    :vartype user_id: str
    :ivar access_type: Type of access to be allowed for the user. Required. Known values are:
     "Change", "Read", and "Custom".
    :vartype access_type: str or ~azure.mgmt.databoxedge.models.ShareAccessType
    """

    user_id: str = rest_field(name="userId", visibility=["read", "create", "update", "delete", "query"])
    """User ID (already existing in the device). Required."""
    access_type: Union[str, "_models.ShareAccessType"] = rest_field(
        name="accessType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of access to be allowed for the user. Required. Known values are: \"Change\", \"Read\",
     and \"Custom\"."""

    @overload
    def __init__(
        self,
        *,
        user_id: str,
        access_type: Union[str, "_models.ShareAccessType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserProperties(_Model):
    """The user properties.

    :ivar encrypted_password: The password details.
    :vartype encrypted_password: ~azure.mgmt.databoxedge.models.AsymmetricEncryptedSecret
    :ivar share_access_rights: List of shares that the user has rights on. This field should not be
     specified during user creation.
    :vartype share_access_rights: list[~azure.mgmt.databoxedge.models.ShareAccessRight]
    :ivar user_type: Type of the user. Required. Known values are: "Share", "LocalManagement", and
     "ARM".
    :vartype user_type: str or ~azure.mgmt.databoxedge.models.UserType
    """

    encrypted_password: Optional["_models.AsymmetricEncryptedSecret"] = rest_field(
        name="encryptedPassword", visibility=["read", "create", "update", "delete", "query"]
    )
    """The password details."""
    share_access_rights: Optional[list["_models.ShareAccessRight"]] = rest_field(
        name="shareAccessRights", visibility=["read"]
    )
    """List of shares that the user has rights on. This field should not be specified during user
     creation."""
    user_type: Union[str, "_models.UserType"] = rest_field(
        name="userType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of the user. Required. Known values are: \"Share\", \"LocalManagement\", and \"ARM\"."""

    @overload
    def __init__(
        self,
        *,
        user_type: Union[str, "_models.UserType"],
        encrypted_password: Optional["_models.AsymmetricEncryptedSecret"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VmMemory(_Model):
    """VmMemory Data.

    :ivar startup_memory_mb: The total amount of RAM in the virtual machine, as seen by the guest
     operating system. For a virtual machine with dynamic memory enabled, this represents the
     initial memory available at startup.
    :vartype startup_memory_mb: int
    :ivar current_memory_usage_mb: The current memory used by the virtual machine.
    :vartype current_memory_usage_mb: int
    """

    startup_memory_mb: Optional[int] = rest_field(
        name="startupMemoryMB", visibility=["read", "create", "update", "delete", "query"]
    )
    """The total amount of RAM in the virtual machine, as seen by the guest  operating system. For a
     virtual machine with dynamic memory enabled, this represents the initial memory available at
     startup."""
    current_memory_usage_mb: Optional[int] = rest_field(
        name="currentMemoryUsageMB", visibility=["read", "create", "update", "delete", "query"]
    )
    """The current memory used by the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        startup_memory_mb: Optional[int] = None,
        current_memory_usage_mb: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VmPlacementRequestResult(_Model):
    """List of VM sizes being checked for creation on appliance along with corresponding result.

    :ivar vm_size: List of VM sizes being checked.
    :vartype vm_size: list[str]
    :ivar is_feasible: Boolean value indicating if the VM(s) in VmSize can be created.
    :vartype is_feasible: bool
    :ivar message_code: MessageCode indicating reason for success or failure.
    :vartype message_code: str
    :ivar message: Localized message to be displayed to the user to explain the check result.
    :vartype message: str
    """

    vm_size: Optional[list[str]] = rest_field(name="vmSize", visibility=["read", "create", "update", "delete", "query"])
    """List of VM sizes being checked."""
    is_feasible: Optional[bool] = rest_field(
        name="isFeasible", visibility=["read", "create", "update", "delete", "query"]
    )
    """Boolean value indicating if the VM(s) in VmSize can be created."""
    message_code: Optional[str] = rest_field(
        name="messageCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """MessageCode indicating reason for success or failure."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Localized message to be displayed to the user to explain the check result."""

    @overload
    def __init__(
        self,
        *,
        vm_size: Optional[list[str]] = None,
        is_feasible: Optional[bool] = None,
        message_code: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
