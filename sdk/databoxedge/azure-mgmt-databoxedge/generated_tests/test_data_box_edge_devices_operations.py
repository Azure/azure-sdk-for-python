# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.databoxedge import DataBoxEdgeClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDataBoxEdgeDevicesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DataBoxEdgeClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_get_network_settings(self, resource_group):
        response = self.client.devices.get_network_settings(
            resource_group_name=resource_group.name,
            device_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_get(self, resource_group):
        response = self.client.devices.get(
            resource_group_name=resource_group.name,
            device_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_create_or_update(self, resource_group):
        response = self.client.devices.create_or_update(
            resource_group_name=resource_group.name,
            device_name="str",
            data_box_edge_device={
                "location": "str",
                "etag": "str",
                "id": "str",
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "kind": "str",
                "name": "str",
                "properties": {
                    "configuredRoleTypes": ["str"],
                    "culture": "str",
                    "dataBoxEdgeDeviceStatus": "str",
                    "dataResidency": {"type": "str"},
                    "description": "str",
                    "deviceHcsVersion": "str",
                    "deviceLocalCapacity": 0,
                    "deviceModel": "str",
                    "deviceSoftwareVersion": "str",
                    "deviceType": "str",
                    "edgeProfile": {
                        "subscription": {
                            "id": "str",
                            "properties": {
                                "locationPlacementId": "str",
                                "quotaId": "str",
                                "registeredFeatures": [{"name": "str", "state": "str"}],
                                "serializedDetails": "str",
                                "tenantId": "str",
                            },
                            "registrationDate": "str",
                            "registrationId": "str",
                            "state": "str",
                            "subscriptionId": "str",
                        }
                    },
                    "friendlyName": "str",
                    "kubernetesWorkloadProfile": "str",
                    "modelDescription": "str",
                    "nodeCount": 0,
                    "resourceMoveDetails": {
                        "operationInProgress": "str",
                        "operationInProgressLockTimeoutInUTC": "2020-02-20 00:00:00",
                    },
                    "serialNumber": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "timeZone": "str",
                },
                "sku": {"name": "str", "tier": "str"},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_update(self, resource_group):
        response = self.client.devices.update(
            resource_group_name=resource_group.name,
            device_name="str",
            parameters={
                "identity": {"principalId": "str", "tenantId": "str", "type": "str"},
                "properties": {"edgeProfile": {"subscription": {"id": "str"}}},
                "tags": {"str": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_begin_delete(self, resource_group):
        response = self.client.devices.begin_delete(
            resource_group_name=resource_group.name,
            device_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_list_by_resource_group(self, resource_group):
        response = self.client.devices.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_list_by_subscription(self, resource_group):
        response = self.client.devices.list_by_subscription()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_begin_download_updates(self, resource_group):
        response = self.client.devices.begin_download_updates(
            resource_group_name=resource_group.name,
            device_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_generate_certificate(self, resource_group):
        response = self.client.devices.generate_certificate(
            resource_group_name=resource_group.name,
            device_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_get_extended_information(self, resource_group):
        response = self.client.devices.get_extended_information(
            resource_group_name=resource_group.name,
            device_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_begin_install_updates(self, resource_group):
        response = self.client.devices.begin_install_updates(
            resource_group_name=resource_group.name,
            device_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_begin_scan_for_updates(self, resource_group):
        response = self.client.devices.begin_scan_for_updates(
            resource_group_name=resource_group.name,
            device_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_begin_create_or_update_security_settings(self, resource_group):
        response = self.client.devices.begin_create_or_update_security_settings(
            resource_group_name=resource_group.name,
            device_name="str",
            security_settings={
                "properties": {
                    "deviceAdminPassword": {
                        "encryptionAlgorithm": "str",
                        "value": "str",
                        "encryptionCertThumbprint": "str",
                    }
                },
                "id": "str",
                "name": "str",
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_update_extended_information(self, resource_group):
        response = self.client.devices.update_extended_information(
            resource_group_name=resource_group.name,
            device_name="str",
            parameters={
                "channelIntegrityKeyName": "str",
                "channelIntegrityKeyVersion": "str",
                "clientSecretStoreId": "str",
                "clientSecretStoreUrl": "str",
                "syncStatus": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_upload_certificate(self, resource_group):
        response = self.client.devices.upload_certificate(
            resource_group_name=resource_group.name,
            device_name="str",
            parameters={"properties": {"certificate": "str", "authenticationType": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_devices_get_update_summary(self, resource_group):
        response = self.client.devices.get_update_summary(
            resource_group_name=resource_group.name,
            device_name="str",
        )

        # please add some check logic here by yourself
        # ...
