# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class DatadogAgreementProperties(Model):
    """Terms properties.

    :param publisher: Publisher identifier string.
    :type publisher: str
    :param product: Product identifier string.
    :type product: str
    :param plan: Plan identifier string.
    :type plan: str
    :param license_text_link: Link to HTML with Microsoft and Publisher terms.
    :type license_text_link: str
    :param privacy_policy_link: Link to the privacy policy of the publisher.
    :type privacy_policy_link: str
    :param retrieve_datetime: Date and time in UTC of when the terms were
     accepted. This is empty if Accepted is false.
    :type retrieve_datetime: datetime
    :param signature: Terms signature.
    :type signature: str
    :param accepted: If any version of the terms have been accepted, otherwise
     false.
    :type accepted: bool
    """

    _attribute_map = {
        'publisher': {'key': 'publisher', 'type': 'str'},
        'product': {'key': 'product', 'type': 'str'},
        'plan': {'key': 'plan', 'type': 'str'},
        'license_text_link': {'key': 'licenseTextLink', 'type': 'str'},
        'privacy_policy_link': {'key': 'privacyPolicyLink', 'type': 'str'},
        'retrieve_datetime': {'key': 'retrieveDatetime', 'type': 'iso-8601'},
        'signature': {'key': 'signature', 'type': 'str'},
        'accepted': {'key': 'accepted', 'type': 'bool'},
    }

    def __init__(self, *, publisher: str=None, product: str=None, plan: str=None, license_text_link: str=None, privacy_policy_link: str=None, retrieve_datetime=None, signature: str=None, accepted: bool=None, **kwargs) -> None:
        super(DatadogAgreementProperties, self).__init__(**kwargs)
        self.publisher = publisher
        self.product = product
        self.plan = plan
        self.license_text_link = license_text_link
        self.privacy_policy_link = privacy_policy_link
        self.retrieve_datetime = retrieve_datetime
        self.signature = signature
        self.accepted = accepted


class DatadogAgreementResource(Model):
    """DatadogAgreementResource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: ARM id of the resource.
    :vartype id: str
    :ivar name: Name of the agreement.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Represents the properties of the resource.
    :type properties: ~azure.mgmt.datadog.models.DatadogAgreementProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DatadogAgreementProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(DatadogAgreementResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = properties


class DatadogApiKey(Model):
    """DatadogApiKey.

    All required parameters must be populated in order to send to Azure.

    :param created_by: The user that created the API key.
    :type created_by: str
    :param name: The name of the API key.
    :type name: str
    :param key: Required. The value of the API key.
    :type key: str
    :param created: The time of creation of the API key.
    :type created: str
    """

    _validation = {
        'key': {'required': True},
    }

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'key': {'key': 'key', 'type': 'str'},
        'created': {'key': 'created', 'type': 'str'},
    }

    def __init__(self, *, key: str, created_by: str=None, name: str=None, created: str=None, **kwargs) -> None:
        super(DatadogApiKey, self).__init__(**kwargs)
        self.created_by = created_by
        self.name = name
        self.key = key
        self.created = created


class DatadogHost(Model):
    """DatadogHost.

    :param name: The name of the host.
    :type name: str
    :param aliases: The aliases for the host.
    :type aliases: list[str]
    :param apps: The Datadog integrations reporting metrics for the host.
    :type apps: list[str]
    :param meta:
    :type meta: ~azure.mgmt.datadog.models.DatadogHostMetadata
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'aliases': {'key': 'aliases', 'type': '[str]'},
        'apps': {'key': 'apps', 'type': '[str]'},
        'meta': {'key': 'meta', 'type': 'DatadogHostMetadata'},
    }

    def __init__(self, *, name: str=None, aliases=None, apps=None, meta=None, **kwargs) -> None:
        super(DatadogHost, self).__init__(**kwargs)
        self.name = name
        self.aliases = aliases
        self.apps = apps
        self.meta = meta


class DatadogHostMetadata(Model):
    """DatadogHostMetadata.

    :param agent_version: The agent version.
    :type agent_version: str
    :param install_method:
    :type install_method: ~azure.mgmt.datadog.models.DatadogInstallMethod
    :param logs_agent:
    :type logs_agent: ~azure.mgmt.datadog.models.DatadogLogsAgent
    """

    _attribute_map = {
        'agent_version': {'key': 'agentVersion', 'type': 'str'},
        'install_method': {'key': 'installMethod', 'type': 'DatadogInstallMethod'},
        'logs_agent': {'key': 'logsAgent', 'type': 'DatadogLogsAgent'},
    }

    def __init__(self, *, agent_version: str=None, install_method=None, logs_agent=None, **kwargs) -> None:
        super(DatadogHostMetadata, self).__init__(**kwargs)
        self.agent_version = agent_version
        self.install_method = install_method
        self.logs_agent = logs_agent


class DatadogInstallMethod(Model):
    """DatadogInstallMethod.

    :param tool: The tool.
    :type tool: str
    :param tool_version: The tool version.
    :type tool_version: str
    :param installer_version: The installer version.
    :type installer_version: str
    """

    _attribute_map = {
        'tool': {'key': 'tool', 'type': 'str'},
        'tool_version': {'key': 'toolVersion', 'type': 'str'},
        'installer_version': {'key': 'installerVersion', 'type': 'str'},
    }

    def __init__(self, *, tool: str=None, tool_version: str=None, installer_version: str=None, **kwargs) -> None:
        super(DatadogInstallMethod, self).__init__(**kwargs)
        self.tool = tool
        self.tool_version = tool_version
        self.installer_version = installer_version


class DatadogLogsAgent(Model):
    """DatadogLogsAgent.

    :param transport: The transport.
    :type transport: str
    """

    _attribute_map = {
        'transport': {'key': 'transport', 'type': 'str'},
    }

    def __init__(self, *, transport: str=None, **kwargs) -> None:
        super(DatadogLogsAgent, self).__init__(**kwargs)
        self.transport = transport


class DatadogMonitorResource(Model):
    """DatadogMonitorResource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: ARM id of the monitor resource.
    :vartype id: str
    :ivar name: Name of the monitor resource.
    :vartype name: str
    :ivar type: The type of the monitor resource.
    :vartype type: str
    :param sku:
    :type sku: ~azure.mgmt.datadog.models.ResourceSku
    :param properties:
    :type properties: ~azure.mgmt.datadog.models.MonitorProperties
    :param identity:
    :type identity: ~azure.mgmt.datadog.models.IdentityProperties
    :param tags:
    :type tags: dict[str, str]
    :param location: Required.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'ResourceSku'},
        'properties': {'key': 'properties', 'type': 'MonitorProperties'},
        'identity': {'key': 'identity', 'type': 'IdentityProperties'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, *, location: str, sku=None, properties=None, identity=None, tags=None, **kwargs) -> None:
        super(DatadogMonitorResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.sku = sku
        self.properties = properties
        self.identity = identity
        self.tags = tags
        self.location = location


class DatadogMonitorResourceUpdateParameters(Model):
    """The parameters for a PATCH request to a monitor resource.

    :param properties:
    :type properties: ~azure.mgmt.datadog.models.MonitorUpdateProperties
    :param tags: The new tags of the monitor resource.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'MonitorUpdateProperties'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, properties=None, tags=None, **kwargs) -> None:
        super(DatadogMonitorResourceUpdateParameters, self).__init__(**kwargs)
        self.properties = properties
        self.tags = tags


class DatadogOrganizationProperties(Model):
    """Datadog organization properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the Datadog organization.
    :vartype name: str
    :ivar id: Id of the Datadog organization.
    :vartype id: str
    :param linking_auth_code: The auth code used to linking to an existing
     datadog organization.
    :type linking_auth_code: str
    :param linking_client_id: The client_id from an existing in exchange for
     an auth token to link organization.
    :type linking_client_id: str
    :param enterprise_app_id: The Id of the Enterprise App used for Single
     sign on.
    :type enterprise_app_id: str
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'linking_auth_code': {'key': 'linkingAuthCode', 'type': 'str'},
        'linking_client_id': {'key': 'linkingClientId', 'type': 'str'},
        'enterprise_app_id': {'key': 'enterpriseAppId', 'type': 'str'},
    }

    def __init__(self, *, linking_auth_code: str=None, linking_client_id: str=None, enterprise_app_id: str=None, **kwargs) -> None:
        super(DatadogOrganizationProperties, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.linking_auth_code = linking_auth_code
        self.linking_client_id = linking_client_id
        self.enterprise_app_id = enterprise_app_id


class DatadogSetPasswordLink(Model):
    """DatadogSetPasswordLink.

    :param set_password_link:
    :type set_password_link: str
    """

    _attribute_map = {
        'set_password_link': {'key': 'setPasswordLink', 'type': 'str'},
    }

    def __init__(self, *, set_password_link: str=None, **kwargs) -> None:
        super(DatadogSetPasswordLink, self).__init__(**kwargs)
        self.set_password_link = set_password_link


class DatadogSingleSignOnProperties(Model):
    """DatadogSingleSignOnProperties.

    :param single_sign_on_state: Possible values include: 'Initial', 'Enable',
     'Disable', 'Existing'
    :type single_sign_on_state: str or
     ~azure.mgmt.datadog.models.SingleSignOnStates
    :param enterprise_app_id: The Id of the Enterprise App used for Single
     sign-on.
    :type enterprise_app_id: str
    :param single_sign_on_url: The login URL specific to this Datadog
     Organization.
    :type single_sign_on_url: str
    """

    _attribute_map = {
        'single_sign_on_state': {'key': 'singleSignOnState', 'type': 'str'},
        'enterprise_app_id': {'key': 'enterpriseAppId', 'type': 'str'},
        'single_sign_on_url': {'key': 'singleSignOnUrl', 'type': 'str'},
    }

    def __init__(self, *, single_sign_on_state=None, enterprise_app_id: str=None, single_sign_on_url: str=None, **kwargs) -> None:
        super(DatadogSingleSignOnProperties, self).__init__(**kwargs)
        self.single_sign_on_state = single_sign_on_state
        self.enterprise_app_id = enterprise_app_id
        self.single_sign_on_url = single_sign_on_url


class DatadogSingleSignOnResource(Model):
    """DatadogSingleSignOnResource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: ARM id of the resource.
    :vartype id: str
    :ivar name: Name of the configuration.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties:
    :type properties: ~azure.mgmt.datadog.models.DatadogSingleSignOnProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DatadogSingleSignOnProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(DatadogSingleSignOnResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = properties


class ErrorResponseBody(Model):
    """ErrorResponseBody.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~azure.mgmt.datadog.models.ErrorResponseBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorResponseBody]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, details=None, **kwargs) -> None:
        super(ErrorResponseBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class FilteringTag(Model):
    """The definition of a filtering tag. Filtering tags are used for capturing
    resources and include/exclude them from being monitored.

    :param name: The name (also known as the key) of the tag.
    :type name: str
    :param value: The value of the tag.
    :type value: str
    :param action: Possible values include: 'Include', 'Exclude'
    :type action: str or ~azure.mgmt.datadog.models.TagAction
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, value: str=None, action=None, **kwargs) -> None:
        super(FilteringTag, self).__init__(**kwargs)
        self.name = name
        self.value = value
        self.action = action


class IdentityProperties(Model):
    """IdentityProperties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar principal_id: The identity ID.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of resource.
    :vartype tenant_id: str
    :param type: Possible values include: 'SystemAssigned', 'UserAssigned'
    :type type: str or ~azure.mgmt.datadog.models.ManagedIdentityTypes
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, type=None, **kwargs) -> None:
        super(IdentityProperties, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type


class LinkedResource(Model):
    """The definition of a linked resource.

    :param id: The ARM id of the linked resource.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, **kwargs) -> None:
        super(LinkedResource, self).__init__(**kwargs)
        self.id = id


class LogRules(Model):
    """Set of rules for sending logs for the Monitor resource.

    :param send_aad_logs: Flag specifying if AAD logs should be sent for the
     Monitor resource.
    :type send_aad_logs: bool
    :param send_subscription_logs: Flag specifying if Azure subscription logs
     should be sent for the Monitor resource.
    :type send_subscription_logs: bool
    :param send_resource_logs: Flag specifying if Azure resource logs should
     be sent for the Monitor resource.
    :type send_resource_logs: bool
    :param filtering_tags: List of filtering tags to be used for capturing
     logs. This only takes effect if SendResourceLogs flag is enabled. If
     empty, all resources will be captured. If only Exclude action is
     specified, the rules will apply to the list of all available resources. If
     Include actions are specified, the rules will only include resources with
     the associated tags.
    :type filtering_tags: list[~azure.mgmt.datadog.models.FilteringTag]
    """

    _attribute_map = {
        'send_aad_logs': {'key': 'sendAadLogs', 'type': 'bool'},
        'send_subscription_logs': {'key': 'sendSubscriptionLogs', 'type': 'bool'},
        'send_resource_logs': {'key': 'sendResourceLogs', 'type': 'bool'},
        'filtering_tags': {'key': 'filteringTags', 'type': '[FilteringTag]'},
    }

    def __init__(self, *, send_aad_logs: bool=None, send_subscription_logs: bool=None, send_resource_logs: bool=None, filtering_tags=None, **kwargs) -> None:
        super(LogRules, self).__init__(**kwargs)
        self.send_aad_logs = send_aad_logs
        self.send_subscription_logs = send_subscription_logs
        self.send_resource_logs = send_resource_logs
        self.filtering_tags = filtering_tags


class MetricRules(Model):
    """Set of rules for sending metrics for the Monitor resource.

    :param filtering_tags: List of filtering tags to be used for capturing
     metrics. If empty, all resources will be captured. If only Exclude action
     is specified, the rules will apply to the list of all available resources.
     If Include actions are specified, the rules will only include resources
     with the associated tags.
    :type filtering_tags: list[~azure.mgmt.datadog.models.FilteringTag]
    """

    _attribute_map = {
        'filtering_tags': {'key': 'filteringTags', 'type': '[FilteringTag]'},
    }

    def __init__(self, *, filtering_tags=None, **kwargs) -> None:
        super(MetricRules, self).__init__(**kwargs)
        self.filtering_tags = filtering_tags


class MonitoredResource(Model):
    """The properties of a resource currently being monitored by the Datadog
    monitor resource.

    :param id: The ARM id of the resource.
    :type id: str
    :param sending_metrics: Flag indicating if resource is sending metrics to
     Datadog.
    :type sending_metrics: bool
    :param reason_for_metrics_status: Reason for why the resource is sending
     metrics (or why it is not sending).
    :type reason_for_metrics_status: str
    :param sending_logs: Flag indicating if resource is sending logs to
     Datadog.
    :type sending_logs: bool
    :param reason_for_logs_status: Reason for why the resource is sending logs
     (or why it is not sending).
    :type reason_for_logs_status: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'sending_metrics': {'key': 'sendingMetrics', 'type': 'bool'},
        'reason_for_metrics_status': {'key': 'reasonForMetricsStatus', 'type': 'str'},
        'sending_logs': {'key': 'sendingLogs', 'type': 'bool'},
        'reason_for_logs_status': {'key': 'reasonForLogsStatus', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, sending_metrics: bool=None, reason_for_metrics_status: str=None, sending_logs: bool=None, reason_for_logs_status: str=None, **kwargs) -> None:
        super(MonitoredResource, self).__init__(**kwargs)
        self.id = id
        self.sending_metrics = sending_metrics
        self.reason_for_metrics_status = reason_for_metrics_status
        self.sending_logs = sending_logs
        self.reason_for_logs_status = reason_for_logs_status


class MonitoringTagRules(Model):
    """Capture logs and metrics of Azure resources based on ARM tags.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the rule set.
    :vartype name: str
    :ivar id: The id of the rule set.
    :vartype id: str
    :ivar type: The type of the rule set.
    :vartype type: str
    :param properties:
    :type properties: ~azure.mgmt.datadog.models.MonitoringTagRulesProperties
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'MonitoringTagRulesProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(MonitoringTagRules, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.type = None
        self.properties = properties


class MonitoringTagRulesProperties(Model):
    """Definition of the properties for a TagRules resource.

    :param log_rules:
    :type log_rules: ~azure.mgmt.datadog.models.LogRules
    :param metric_rules:
    :type metric_rules: ~azure.mgmt.datadog.models.MetricRules
    """

    _attribute_map = {
        'log_rules': {'key': 'logRules', 'type': 'LogRules'},
        'metric_rules': {'key': 'metricRules', 'type': 'MetricRules'},
    }

    def __init__(self, *, log_rules=None, metric_rules=None, **kwargs) -> None:
        super(MonitoringTagRulesProperties, self).__init__(**kwargs)
        self.log_rules = log_rules
        self.metric_rules = metric_rules


class MonitorProperties(Model):
    """Properties specific to the monitor resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param provisioning_state: Possible values include: 'Accepted',
     'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled',
     'Deleted', 'NotSpecified'
    :type provisioning_state: str or
     ~azure.mgmt.datadog.models.ProvisioningState
    :param monitoring_status: Possible values include: 'Enabled', 'Disabled'
    :type monitoring_status: str or
     ~azure.mgmt.datadog.models.MonitoringStatus
    :param marketplace_subscription_status: Possible values include: 'Active',
     'Suspended'
    :type marketplace_subscription_status: str or
     ~azure.mgmt.datadog.models.MarketplaceSubscriptionStatus
    :param datadog_organization_properties:
    :type datadog_organization_properties:
     ~azure.mgmt.datadog.models.DatadogOrganizationProperties
    :param user_info:
    :type user_info: ~azure.mgmt.datadog.models.UserInfo
    :param liftr_resource_category: Possible values include: 'Unknown',
     'MonitorLogs'
    :type liftr_resource_category: str or
     ~azure.mgmt.datadog.models.LiftrResourceCategories
    :ivar liftr_resource_preference: The priority of the resource.
    :vartype liftr_resource_preference: int
    """

    _validation = {
        'liftr_resource_preference': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'monitoring_status': {'key': 'monitoringStatus', 'type': 'str'},
        'marketplace_subscription_status': {'key': 'marketplaceSubscriptionStatus', 'type': 'str'},
        'datadog_organization_properties': {'key': 'datadogOrganizationProperties', 'type': 'DatadogOrganizationProperties'},
        'user_info': {'key': 'userInfo', 'type': 'UserInfo'},
        'liftr_resource_category': {'key': 'liftrResourceCategory', 'type': 'str'},
        'liftr_resource_preference': {'key': 'liftrResourcePreference', 'type': 'int'},
    }

    def __init__(self, *, provisioning_state=None, monitoring_status=None, marketplace_subscription_status=None, datadog_organization_properties=None, user_info=None, liftr_resource_category=None, **kwargs) -> None:
        super(MonitorProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.monitoring_status = monitoring_status
        self.marketplace_subscription_status = marketplace_subscription_status
        self.datadog_organization_properties = datadog_organization_properties
        self.user_info = user_info
        self.liftr_resource_category = liftr_resource_category
        self.liftr_resource_preference = None


class MonitorUpdateProperties(Model):
    """The set of properties that can be update in a PATCH request to a monitor
    resource.

    :param monitoring_status: Possible values include: 'Enabled', 'Disabled'
    :type monitoring_status: str or
     ~azure.mgmt.datadog.models.MonitoringStatus
    """

    _attribute_map = {
        'monitoring_status': {'key': 'monitoringStatus', 'type': 'str'},
    }

    def __init__(self, *, monitoring_status=None, **kwargs) -> None:
        super(MonitorUpdateProperties, self).__init__(**kwargs)
        self.monitoring_status = monitoring_status


class OperationDisplay(Model):
    """The object that represents the operation.

    :param provider: Service provider, i.e., Microsoft.Datadog.
    :type provider: str
    :param resource: Type on which the operation is performed, e.g.,
     'monitors'.
    :type resource: str
    :param operation: Operation type, e.g., read, write, delete, etc.
    :type operation: str
    :param description: Description of the operation, e.g., 'Write monitors'.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, resource: str=None, operation: str=None, description: str=None, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationResult(Model):
    """A Microsoft.Datadog REST API operation.

    :param name: Operation name, i.e., {provider}/{resource}/{operation}.
    :type name: str
    :param display:
    :type display: ~azure.mgmt.datadog.models.OperationDisplay
    :param is_data_action: Indicates whether the operation is a data action
    :type is_data_action: bool
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
    }

    def __init__(self, *, name: str=None, display=None, is_data_action: bool=None, **kwargs) -> None:
        super(OperationResult, self).__init__(**kwargs)
        self.name = name
        self.display = display
        self.is_data_action = is_data_action


class ResourceProviderDefaultErrorResponse(Model):
    """ResourceProviderDefaultErrorResponse.

    :param error:
    :type error: ~azure.mgmt.datadog.models.ErrorResponseBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponseBody'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ResourceProviderDefaultErrorResponse, self).__init__(**kwargs)
        self.error = error


class ResourceProviderDefaultErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ResourceProviderDefaultErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ResourceProviderDefaultErrorResponseException, self).__init__(deserialize, response, 'ResourceProviderDefaultErrorResponse', *args)


class ResourceSku(Model):
    """ResourceSku.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of the SKU.
    :type name: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, name: str, **kwargs) -> None:
        super(ResourceSku, self).__init__(**kwargs)
        self.name = name


class UserInfo(Model):
    """User info.

    :param name: Name of the user
    :type name: str
    :param email_address: Email of the user used by Datadog for contacting
     them if needed
    :type email_address: str
    :param phone_number: Phone number of the user used by Datadog for
     contacting them if needed
    :type phone_number: str
    """

    _validation = {
        'name': {'max_length': 50},
        'email_address': {'pattern': r'^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\.)+[A-Za-z]{2,}$'},
        'phone_number': {'max_length': 40},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'email_address': {'key': 'emailAddress', 'type': 'str'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, email_address: str=None, phone_number: str=None, **kwargs) -> None:
        super(UserInfo, self).__init__(**kwargs)
        self.name = name
        self.email_address = email_address
        self.phone_number = phone_number
