# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

_SERIALIZER = Serializer()

# fmt: off

def build_list_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List the tag rules for a given monitor resource.

    List the tag rules for a given monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "str", # optional.
                "value": [
                    {
                        "id": "str", # optional.
                        "name": "str", # optional.
                        "properties": {
                            "logRules": {
                                "filteringTags": [
                                    {
                                        "action": "str", # optional.
                                        "name": "str", # optional.
                                        "value": "str" # optional.
                                    }
                                ],
                                "sendAadLogs": "True", # optional.
                                "sendResourceLogs": "True", # optional.
                                "sendSubscriptionLogs": "True" # optional.
                            },
                            "metricRules": {
                                "filteringTags": [
                                    {
                                        "action": "str", # optional.
                                        "name": "str", # optional.
                                        "value": "str" # optional.
                                    }
                                ]
                            },
                            "provisioningState": "str" # optional.
                        },
                        "systemData": {
                            "createdAt": "datetime", # optional.
                            "createdBy": "str", # optional.
                            "createdByType": "str", # optional.
                            "lastModifiedAt": "datetime", # optional.
                            "lastModifiedBy": "str", # optional.
                            "lastModifiedByType": "str" # optional.
                        },
                        "type": "str" # optional.
                    }
                ]
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/tagRules')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    rule_set_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Create or update a tag rule set for a given monitor resource.

    Create or update a tag rule set for a given monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :param rule_set_name: Rule set name.
    :type rule_set_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str", # optional.
                "name": "str", # optional.
                "properties": {
                    "logRules": {
                        "filteringTags": [
                            {
                                "action": "str", # optional.
                                "name": "str", # optional.
                                "value": "str" # optional.
                            }
                        ],
                        "sendAadLogs": "True", # optional.
                        "sendResourceLogs": "True", # optional.
                        "sendSubscriptionLogs": "True" # optional.
                    },
                    "metricRules": {
                        "filteringTags": [
                            {
                                "action": "str", # optional.
                                "name": "str", # optional.
                                "value": "str" # optional.
                            }
                        ]
                    },
                    "provisioningState": "str" # optional.
                },
                "systemData": {
                    "createdAt": "datetime", # optional.
                    "createdBy": "str", # optional.
                    "createdByType": "str", # optional.
                    "lastModifiedAt": "datetime", # optional.
                    "lastModifiedBy": "str", # optional.
                    "lastModifiedByType": "str" # optional.
                },
                "type": "str" # optional.
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str", # optional.
                "name": "str", # optional.
                "properties": {
                    "logRules": {
                        "filteringTags": [
                            {
                                "action": "str", # optional.
                                "name": "str", # optional.
                                "value": "str" # optional.
                            }
                        ],
                        "sendAadLogs": "True", # optional.
                        "sendResourceLogs": "True", # optional.
                        "sendSubscriptionLogs": "True" # optional.
                    },
                    "metricRules": {
                        "filteringTags": [
                            {
                                "action": "str", # optional.
                                "name": "str", # optional.
                                "value": "str" # optional.
                            }
                        ]
                    },
                    "provisioningState": "str" # optional.
                },
                "systemData": {
                    "createdAt": "datetime", # optional.
                    "createdBy": "str", # optional.
                    "createdByType": "str", # optional.
                    "lastModifiedAt": "datetime", # optional.
                    "lastModifiedBy": "str", # optional.
                    "lastModifiedByType": "str" # optional.
                },
                "type": "str" # optional.
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/tagRules/{ruleSetName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
        "ruleSetName": _SERIALIZER.url("rule_set_name", rule_set_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    rule_set_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get a tag rule set for a given monitor resource.

    Get a tag rule set for a given monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :param rule_set_name: Rule set name.
    :type rule_set_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "id": "str", # optional.
                "name": "str", # optional.
                "properties": {
                    "logRules": {
                        "filteringTags": [
                            {
                                "action": "str", # optional.
                                "name": "str", # optional.
                                "value": "str" # optional.
                            }
                        ],
                        "sendAadLogs": "True", # optional.
                        "sendResourceLogs": "True", # optional.
                        "sendSubscriptionLogs": "True" # optional.
                    },
                    "metricRules": {
                        "filteringTags": [
                            {
                                "action": "str", # optional.
                                "name": "str", # optional.
                                "value": "str" # optional.
                            }
                        ]
                    },
                    "provisioningState": "str" # optional.
                },
                "systemData": {
                    "createdAt": "datetime", # optional.
                    "createdBy": "str", # optional.
                    "createdByType": "str", # optional.
                    "lastModifiedAt": "datetime", # optional.
                    "lastModifiedBy": "str", # optional.
                    "lastModifiedByType": "str" # optional.
                },
                "type": "str" # optional.
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/tagRules/{ruleSetName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
        "ruleSetName": _SERIALIZER.url("rule_set_name", rule_set_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

