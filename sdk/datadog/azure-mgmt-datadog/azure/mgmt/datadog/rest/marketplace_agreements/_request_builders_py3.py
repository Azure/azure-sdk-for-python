# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Optional

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

_SERIALIZER = Serializer()


def build_list_request(
    subscription_id: str,
    **kwargs: Any
) -> HttpRequest:
    """List Datadog marketplace agreements in the subscription.

    List Datadog marketplace agreements in the subscription.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "None", # optional.
                "value": [
                    {
                        "id": "None", # optional.
                        "name": "None", # optional.
                        "properties": {
                            "accepted": "None", # optional.
                            "licenseTextLink": "None", # optional.
                            "plan": "None", # optional.
                            "privacyPolicyLink": "None", # optional.
                            "product": "None", # optional.
                            "publisher": "None", # optional.
                            "retrieveDatetime": "None", # optional.
                            "signature": "None", # optional.
                        },
                        "systemData": {
                            "createdAt": "None", # optional.
                            "createdBy": "None", # optional.
                            "createdByType": "None", # optional.
                            "lastModifiedAt": "None", # optional.
                            "lastModifiedBy": "None", # optional.
                            "lastModifiedByType": "None", # optional.
                        },
                        "type": "None", # optional.
                    }
                ]
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_request(
    subscription_id: str,
    *,
    json: Any = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Create Datadog marketplace agreement in the subscription.

    Create Datadog marketplace agreement in the subscription.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "None", # optional.
                "name": "None", # optional.
                "properties": {
                    "accepted": "None", # optional.
                    "licenseTextLink": "None", # optional.
                    "plan": "None", # optional.
                    "privacyPolicyLink": "None", # optional.
                    "product": "None", # optional.
                    "publisher": "None", # optional.
                    "retrieveDatetime": "None", # optional.
                    "signature": "None", # optional.
                },
                "systemData": {
                    "createdAt": "None", # optional.
                    "createdBy": "None", # optional.
                    "createdByType": "None", # optional.
                    "lastModifiedAt": "None", # optional.
                    "lastModifiedBy": "None", # optional.
                    "lastModifiedByType": "None", # optional.
                },
                "type": "None", # optional.
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "None", # optional.
                "name": "None", # optional.
                "properties": {
                    "accepted": "None", # optional.
                    "licenseTextLink": "None", # optional.
                    "plan": "None", # optional.
                    "privacyPolicyLink": "None", # optional.
                    "product": "None", # optional.
                    "publisher": "None", # optional.
                    "retrieveDatetime": "None", # optional.
                    "signature": "None", # optional.
                },
                "systemData": {
                    "createdAt": "None", # optional.
                    "createdBy": "None", # optional.
                    "createdByType": "None", # optional.
                    "lastModifiedAt": "None", # optional.
                    "lastModifiedBy": "None", # optional.
                    "lastModifiedByType": "None", # optional.
                },
                "type": "None", # optional.
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements/default')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )

