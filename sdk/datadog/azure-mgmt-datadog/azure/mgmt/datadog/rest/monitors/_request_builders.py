# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

_SERIALIZER = Serializer()

# fmt: off

def build_list_api_keys_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List the api keys for a given monitor resource.

    List the api keys for a given monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "None", # optional.
                "value": [
                    {
                        "created": "None", # optional.
                        "createdBy": "None", # optional.
                        "key": "None",
                        "name": "None", # optional.
                    }
                ]
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listApiKeys')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_default_key_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get the default api key.

    Get the default api key.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "created": "None", # optional.
                "createdBy": "None", # optional.
                "key": "None",
                "name": "None", # optional.
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/getDefaultKey')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_set_default_key_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Set the default api key.

    Set the default api key.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "created": "None", # optional.
                "createdBy": "None", # optional.
                "key": "None",
                "name": "None", # optional.
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/setDefaultKey')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_hosts_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List the hosts for a given monitor resource.

    List the hosts for a given monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "None", # optional.
                "value": [
                    {
                        "aliases": [
                            "None", # optional.
                        ],
                        "apps": [
                            "None", # optional.
                        ],
                        "meta": {
                            "agentVersion": "None", # optional.
                            "installMethod": {
                                "installerVersion": "None", # optional.
                                "tool": "None", # optional.
                                "toolVersion": "None", # optional.
                            },
                            "logsAgent": {
                                "transport": "None", # optional.
                            }
                        },
                        "name": "None", # optional.
                    }
                ]
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listHosts')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_linked_resources_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List all Azure resources associated to the same Datadog organization as the target resource.

    List all Azure resources associated to the same Datadog organization as the target resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "None", # optional.
                "value": [
                    {
                        "id": "None", # optional.
                    }
                ]
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listLinkedResources')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_monitored_resources_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List the resources currently being monitored by the Datadog monitor resource.

    List the resources currently being monitored by the Datadog monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "None", # optional.
                "value": [
                    {
                        "id": "None", # optional.
                        "reasonForLogsStatus": "None", # optional.
                        "reasonForMetricsStatus": "None", # optional.
                        "sendingLogs": "None", # optional.
                        "sendingMetrics": "None", # optional.
                    }
                ]
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/listMonitoredResources')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_request(
    subscription_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List all monitors under the specified subscription.

    List all monitors under the specified subscription.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "None", # optional.
                "value": [
                    {
                        "id": "None", # optional.
                        "identity": {
                            "principalId": "None", # optional.
                            "tenantId": "None", # optional.
                            "type": "None", # optional.
                        },
                        "location": "None",
                        "name": "None", # optional.
                        "properties": {
                            "datadogOrganizationProperties": {
                                "apiKey": "None", # optional.
                                "applicationKey": "None", # optional.
                                "enterpriseAppId": "None", # optional.
                                "id": "None", # optional.
                                "linkingAuthCode": "None", # optional.
                                "linkingClientId": "None", # optional.
                                "name": "None", # optional.
                                "redirectUri": "None", # optional.
                            },
                            "liftrResourceCategory": "None", # optional.
                            "liftrResourcePreference": "None", # optional.
                            "marketplaceSubscriptionStatus": "None", # optional.
                            "monitoringStatus": "Enabled", # optional.
                            "provisioningState": "None", # optional.
                            "userInfo": {
                                "emailAddress": "None", # optional.
                                "name": "None", # optional.
                                "phoneNumber": "None", # optional.
                            }
                        },
                        "sku": {
                            "name": "None"
                        },
                        "systemData": {
                            "createdAt": "None", # optional.
                            "createdBy": "None", # optional.
                            "createdByType": "None", # optional.
                            "lastModifiedAt": "None", # optional.
                            "lastModifiedBy": "None", # optional.
                            "lastModifiedByType": "None", # optional.
                        },
                        "tags": {
                            "str": "None", # optional.
                        },
                        "type": "None", # optional.
                    }
                ]
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/monitors')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_by_resource_group_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List all monitors under the specified resource group.

    List all monitors under the specified resource group.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "None", # optional.
                "value": [
                    {
                        "id": "None", # optional.
                        "identity": {
                            "principalId": "None", # optional.
                            "tenantId": "None", # optional.
                            "type": "None", # optional.
                        },
                        "location": "None",
                        "name": "None", # optional.
                        "properties": {
                            "datadogOrganizationProperties": {
                                "apiKey": "None", # optional.
                                "applicationKey": "None", # optional.
                                "enterpriseAppId": "None", # optional.
                                "id": "None", # optional.
                                "linkingAuthCode": "None", # optional.
                                "linkingClientId": "None", # optional.
                                "name": "None", # optional.
                                "redirectUri": "None", # optional.
                            },
                            "liftrResourceCategory": "None", # optional.
                            "liftrResourcePreference": "None", # optional.
                            "marketplaceSubscriptionStatus": "None", # optional.
                            "monitoringStatus": "Enabled", # optional.
                            "provisioningState": "None", # optional.
                            "userInfo": {
                                "emailAddress": "None", # optional.
                                "name": "None", # optional.
                                "phoneNumber": "None", # optional.
                            }
                        },
                        "sku": {
                            "name": "None"
                        },
                        "systemData": {
                            "createdAt": "None", # optional.
                            "createdBy": "None", # optional.
                            "createdByType": "None", # optional.
                            "lastModifiedAt": "None", # optional.
                            "lastModifiedBy": "None", # optional.
                            "lastModifiedByType": "None", # optional.
                        },
                        "tags": {
                            "str": "None", # optional.
                        },
                        "type": "None", # optional.
                    }
                ]
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get the properties of a specific monitor resource.

    Get the properties of a specific monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "id": "None", # optional.
                "identity": {
                    "principalId": "None", # optional.
                    "tenantId": "None", # optional.
                    "type": "None", # optional.
                },
                "location": "None",
                "name": "None", # optional.
                "properties": {
                    "datadogOrganizationProperties": {
                        "apiKey": "None", # optional.
                        "applicationKey": "None", # optional.
                        "enterpriseAppId": "None", # optional.
                        "id": "None", # optional.
                        "linkingAuthCode": "None", # optional.
                        "linkingClientId": "None", # optional.
                        "name": "None", # optional.
                        "redirectUri": "None", # optional.
                    },
                    "liftrResourceCategory": "None", # optional.
                    "liftrResourcePreference": "None", # optional.
                    "marketplaceSubscriptionStatus": "None", # optional.
                    "monitoringStatus": "Enabled", # optional.
                    "provisioningState": "None", # optional.
                    "userInfo": {
                        "emailAddress": "None", # optional.
                        "name": "None", # optional.
                        "phoneNumber": "None", # optional.
                    }
                },
                "sku": {
                    "name": "None"
                },
                "systemData": {
                    "createdAt": "None", # optional.
                    "createdBy": "None", # optional.
                    "createdByType": "None", # optional.
                    "lastModifiedAt": "None", # optional.
                    "lastModifiedBy": "None", # optional.
                    "lastModifiedByType": "None", # optional.
                },
                "tags": {
                    "str": "None", # optional.
                },
                "type": "None", # optional.
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Create a monitor resource.

    Create a monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "None", # optional.
                "identity": {
                    "principalId": "None", # optional.
                    "tenantId": "None", # optional.
                    "type": "None", # optional.
                },
                "location": "None",
                "name": "None", # optional.
                "properties": {
                    "datadogOrganizationProperties": {
                        "apiKey": "None", # optional.
                        "applicationKey": "None", # optional.
                        "enterpriseAppId": "None", # optional.
                        "id": "None", # optional.
                        "linkingAuthCode": "None", # optional.
                        "linkingClientId": "None", # optional.
                        "name": "None", # optional.
                        "redirectUri": "None", # optional.
                    },
                    "liftrResourceCategory": "None", # optional.
                    "liftrResourcePreference": "None", # optional.
                    "marketplaceSubscriptionStatus": "None", # optional.
                    "monitoringStatus": "Enabled", # optional.
                    "provisioningState": "None", # optional.
                    "userInfo": {
                        "emailAddress": "None", # optional.
                        "name": "None", # optional.
                        "phoneNumber": "None", # optional.
                    }
                },
                "sku": {
                    "name": "None"
                },
                "systemData": {
                    "createdAt": "None", # optional.
                    "createdBy": "None", # optional.
                    "createdByType": "None", # optional.
                    "lastModifiedAt": "None", # optional.
                    "lastModifiedBy": "None", # optional.
                    "lastModifiedByType": "None", # optional.
                },
                "tags": {
                    "str": "None", # optional.
                },
                "type": "None", # optional.
            }

            # response body for status code(s): 200, 201
            response.json() == {
                "id": "None", # optional.
                "identity": {
                    "principalId": "None", # optional.
                    "tenantId": "None", # optional.
                    "type": "None", # optional.
                },
                "location": "None",
                "name": "None", # optional.
                "properties": {
                    "datadogOrganizationProperties": {
                        "apiKey": "None", # optional.
                        "applicationKey": "None", # optional.
                        "enterpriseAppId": "None", # optional.
                        "id": "None", # optional.
                        "linkingAuthCode": "None", # optional.
                        "linkingClientId": "None", # optional.
                        "name": "None", # optional.
                        "redirectUri": "None", # optional.
                    },
                    "liftrResourceCategory": "None", # optional.
                    "liftrResourcePreference": "None", # optional.
                    "marketplaceSubscriptionStatus": "None", # optional.
                    "monitoringStatus": "Enabled", # optional.
                    "provisioningState": "None", # optional.
                    "userInfo": {
                        "emailAddress": "None", # optional.
                        "name": "None", # optional.
                        "phoneNumber": "None", # optional.
                    }
                },
                "sku": {
                    "name": "None"
                },
                "systemData": {
                    "createdAt": "None", # optional.
                    "createdBy": "None", # optional.
                    "createdByType": "None", # optional.
                    "lastModifiedAt": "None", # optional.
                    "lastModifiedBy": "None", # optional.
                    "lastModifiedByType": "None", # optional.
                },
                "tags": {
                    "str": "None", # optional.
                },
                "type": "None", # optional.
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_update_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Update a monitor resource.

    Update a monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "properties": {
                    "monitoringStatus": "Enabled", # optional.
                },
                "sku": {
                    "name": "None"
                },
                "tags": {
                    "str": "None", # optional.
                }
            }

            # response body for status code(s): 200, 201
            response.json() == {
                "id": "None", # optional.
                "identity": {
                    "principalId": "None", # optional.
                    "tenantId": "None", # optional.
                    "type": "None", # optional.
                },
                "location": "None",
                "name": "None", # optional.
                "properties": {
                    "datadogOrganizationProperties": {
                        "apiKey": "None", # optional.
                        "applicationKey": "None", # optional.
                        "enterpriseAppId": "None", # optional.
                        "id": "None", # optional.
                        "linkingAuthCode": "None", # optional.
                        "linkingClientId": "None", # optional.
                        "name": "None", # optional.
                        "redirectUri": "None", # optional.
                    },
                    "liftrResourceCategory": "None", # optional.
                    "liftrResourcePreference": "None", # optional.
                    "marketplaceSubscriptionStatus": "None", # optional.
                    "monitoringStatus": "Enabled", # optional.
                    "provisioningState": "None", # optional.
                    "userInfo": {
                        "emailAddress": "None", # optional.
                        "name": "None", # optional.
                        "phoneNumber": "None", # optional.
                    }
                },
                "sku": {
                    "name": "None"
                },
                "systemData": {
                    "createdAt": "None", # optional.
                    "createdBy": "None", # optional.
                    "createdByType": "None", # optional.
                    "lastModifiedAt": "None", # optional.
                    "lastModifiedBy": "None", # optional.
                    "lastModifiedByType": "None", # optional.
                },
                "tags": {
                    "str": "None", # optional.
                },
                "type": "None", # optional.
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_delete_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Delete a monitor resource.

    Delete a monitor resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_refresh_set_password_link_request(
    subscription_id,  # type: str
    resource_group_name,  # type: str
    monitor_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Refresh the set password link and return a latest one.

    Refresh the set password link and return a latest one.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param resource_group_name: The name of the resource group. The name is case insensitive.
    :type resource_group_name: str
    :param monitor_name: Monitor resource name.
    :type monitor_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "setPasswordLink": "None", # optional.
            }
    """

    api_version = "2021-03-01"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Datadog/monitors/{monitorName}/refreshSetPasswordLink')
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
        "monitorName": _SERIALIZER.url("monitor_name", monitor_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

