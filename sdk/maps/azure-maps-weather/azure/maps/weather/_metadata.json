{
    "chosen_version": "1.0",
    "total_api_version_list": ["1.0"],
    "client": {
        "name": "WeatherClient",
        "filename": "_weather_client",
        "description": "WeatherClient.",
        "base_url": "\u0027https://atlas.microsoft.com\u0027",
        "custom_base_url": null,
        "azure_arm": false,
        "has_lro_operations": false,
        "client_side_validation": false
    },
    "global_parameters": {
        "sync": {
            "credential": {
                "signature": "credential,  # type: \"TokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials.TokenCredential",
                "required": true
            },
            "client_id": {
                "signature": "client_id=None,  # type: Optional[str]",
                "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles \u003chttps://aka.ms/amauthdetails\u003e`_ for guidance.",
                "docstring_type": "str",
                "required": false
            }
        },
        "async": {
            "credential": {
                "signature": "credential,  # type: \"AsyncTokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials_async.AsyncTokenCredential",
                "required": true
            },
            "client_id": {
                "signature": "client_id=None,  # type: Optional[str]",
                "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles \u003chttps://aka.ms/amauthdetails\u003e`_ for guidance.",
                "docstring_type": "str",
                "required": false
            }
        },
        "constant": {
        },
        "call": "credential, client_id"
    },
    "config": {
        "credential": true,
        "credential_scopes": ["https://atlas.microsoft.com/.default"],
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true,
        "credential_key_header_name": null
    },
    "operation_groups": {
    },
    "operation_mixins": {
        "get_hourly_forecast" : {
            "sync": {
                "signature": "def get_hourly_forecast(\n    self,\n    coordinates,  # type: List[float]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    unit=None,  # type: Optional[Union[str, \"models.WeatherDataUnit\"]]\n    duration=None,  # type: Optional[int]\n    language=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Get Hourly Forecast**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nRequest detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120\n(5 days), and 240 hours (10 days) for the given the given coordinate location.  The API returns\ndetails such as temperature, humidity, wind, precipitation, and ultraviolet (UV) index.\n\nIn S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3\ndays). In S1 you can also request hourly forecast for the next 120 (5 days) and 240 hours (10\ndays).\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param unit: Specifies to return the data in either metric units or imperial units. Default\n value is metric.\n:type unit: str or ~azure.maps.weather.models.WeatherDataUnit\n:param duration: Time frame of the returned weather forecast. By default, the forecast data for\n next hour will be returned. Available values are\n\n\n * ``1`` - Return forecast data for the next hour. Default value.\n * ``12`` - Return hourly forecast for next 12 hours.\n * ``24`` - Return hourly forecast for next 24 hours.\n * ``72`` - Return hourly forecast for next 72 hours (3 days).\n * ``120`` - Return hourly forecast for next 120 hours (5 days). Only available in S1 SKU.\n * ``240`` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.\n:type duration: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: HourlyForecastResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.HourlyForecastResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_hourly_forecast(\n    self,\n    coordinates: List[float],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    unit: Optional[Union[str, \"models.WeatherDataUnit\"]] = None,\n    duration: Optional[int] = None,\n    language: Optional[str] = None,\n    **kwargs\n) -\u003e \"models.HourlyForecastResponse\":\n",
                "doc": "\"\"\"**Get Hourly Forecast**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nRequest detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120\n(5 days), and 240 hours (10 days) for the given the given coordinate location.  The API returns\ndetails such as temperature, humidity, wind, precipitation, and ultraviolet (UV) index.\n\nIn S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3\ndays). In S1 you can also request hourly forecast for the next 120 (5 days) and 240 hours (10\ndays).\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param unit: Specifies to return the data in either metric units or imperial units. Default\n value is metric.\n:type unit: str or ~azure.maps.weather.models.WeatherDataUnit\n:param duration: Time frame of the returned weather forecast. By default, the forecast data for\n next hour will be returned. Available values are\n\n\n * ``1`` - Return forecast data for the next hour. Default value.\n * ``12`` - Return hourly forecast for next 12 hours.\n * ``24`` - Return hourly forecast for next 24 hours.\n * ``72`` - Return hourly forecast for next 72 hours (3 days).\n * ``120`` - Return hourly forecast for next 120 hours (5 days). Only available in S1 SKU.\n * ``240`` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU.\n:type duration: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: HourlyForecastResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.HourlyForecastResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "coordinates, format, unit, duration, language"
        },
        "get_minute_forecast" : {
            "sync": {
                "signature": "def get_minute_forecast(\n    self,\n    coordinates,  # type: List[float]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    interval=None,  # type: Optional[int]\n    language=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Get Minute Forecast**\n\n**Applies to**\\ : S1 pricing tier.\n\nGet Minute Forecast service returns minute-by-minute forecasts for a given location for the\nnext 120 minutes.  Users can request weather forecasts in the interval of 1, 5 and 15 minutes.\nThe response will include details such as the type of precipitation (including rain, snow, or a\nmixture of both), start time, and precipitation intensity value (dBZ).\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param interval: Specifies time interval in minutes for the returned weather forecast.\n Supported values are\n\n\n * ``1`` -  Retrieve forecast for 1-minute intervals. Returned by default.\n * ``5`` - Retrieve forecasts for 5-minute intervals.\n * ``15`` - Retrieve forecasts for 15-minute intervals.\n:type interval: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: MinuteForecastResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.MinuteForecastResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_minute_forecast(\n    self,\n    coordinates: List[float],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    interval: Optional[int] = None,\n    language: Optional[str] = None,\n    **kwargs\n) -\u003e \"models.MinuteForecastResponse\":\n",
                "doc": "\"\"\"**Get Minute Forecast**\n\n**Applies to**\\ : S1 pricing tier.\n\nGet Minute Forecast service returns minute-by-minute forecasts for a given location for the\nnext 120 minutes.  Users can request weather forecasts in the interval of 1, 5 and 15 minutes.\nThe response will include details such as the type of precipitation (including rain, snow, or a\nmixture of both), start time, and precipitation intensity value (dBZ).\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param interval: Specifies time interval in minutes for the returned weather forecast.\n Supported values are\n\n\n * ``1`` -  Retrieve forecast for 1-minute intervals. Returned by default.\n * ``5`` - Retrieve forecasts for 5-minute intervals.\n * ``15`` - Retrieve forecasts for 15-minute intervals.\n:type interval: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: MinuteForecastResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.MinuteForecastResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "coordinates, format, interval, language"
        },
        "get_quarter_day_forecast" : {
            "sync": {
                "signature": "def get_quarter_day_forecast(\n    self,\n    coordinates,  # type: List[float]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    unit=None,  # type: Optional[Union[str, \"models.WeatherDataUnit\"]]\n    duration=None,  # type: Optional[int]\n    language=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Get Quarter-Day Forecast**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nService returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for\na given location. Response data is presented by quarters of the day - morning, afternoon,\nevening, and overnight. Details such as temperature, humidity, wind, precipitation, and UV\nindex are returned.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param unit: Specifies to return the data in either metric units or imperial units. Default\n value is metric.\n:type unit: str or ~azure.maps.weather.models.WeatherDataUnit\n:param duration: Specifies for how many days the quester-day forecast responses are returned.\n Supported values are:\n\n\n * ``1`` - Return forecast data for the next day. Returned by default.\n * ``5`` - Return forecast data for the next 5 days.\n * ``10`` - Return forecast data for next 10 days.\n * ``15`` - Return forecast data for the next 15 days.\n:type duration: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: QuarterDayForecastResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.QuarterDayForecastResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_quarter_day_forecast(\n    self,\n    coordinates: List[float],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    unit: Optional[Union[str, \"models.WeatherDataUnit\"]] = None,\n    duration: Optional[int] = None,\n    language: Optional[str] = None,\n    **kwargs\n) -\u003e \"models.QuarterDayForecastResponse\":\n",
                "doc": "\"\"\"**Get Quarter-Day Forecast**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nService returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for\na given location. Response data is presented by quarters of the day - morning, afternoon,\nevening, and overnight. Details such as temperature, humidity, wind, precipitation, and UV\nindex are returned.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param unit: Specifies to return the data in either metric units or imperial units. Default\n value is metric.\n:type unit: str or ~azure.maps.weather.models.WeatherDataUnit\n:param duration: Specifies for how many days the quester-day forecast responses are returned.\n Supported values are:\n\n\n * ``1`` - Return forecast data for the next day. Returned by default.\n * ``5`` - Return forecast data for the next 5 days.\n * ``10`` - Return forecast data for next 10 days.\n * ``15`` - Return forecast data for the next 15 days.\n:type duration: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: QuarterDayForecastResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.QuarterDayForecastResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "coordinates, format, unit, duration, language"
        },
        "get_current_conditions" : {
            "sync": {
                "signature": "def get_current_conditions(\n    self,\n    coordinates,  # type: List[float]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    unit=None,  # type: Optional[Union[str, \"models.WeatherDataUnit\"]]\n    details=None,  # type: Optional[str]\n    duration=None,  # type: Optional[int]\n    language=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Get Current Conditions**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nGet Current Conditions service returns detailed current weather conditions such as\nprecipitation, temperature and wind for a given coordinate location. Also, observations from\nthe past 6 or 24 hours for a particular location can be retrieved. The basic information\nreturned with the response include details such as observation date and time, brief description\nof the weather conditions, weather icon, precipitation indicator flags, and temperature.\nAdditional details such as RealFeel\u2122 Temperature and UV index are also returned.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param unit: Specifies to return the data in either metric units or imperial units. Default\n value is metric.\n:type unit: str or ~azure.maps.weather.models.WeatherDataUnit\n:param details: Return full details for the current conditions. Available values are\n\n\n * ``true`` - Returns full details. By default all details are returned.\n * ``false`` - Returns a truncated version of the current condition data, which includes\n observation date time, weather phrase, icon code, precipitation indicator flag, and\n temperature.\n:type details: str\n:param duration: Time frame of the returned weather conditions. By default, the most current\n weather conditions will be returned. Default value is 0. Supported values are:\n\n\n * ``0`` - Return the most current weather conditions.\n * ``6`` - Return weather conditions from past 6 hours.\n * ``24`` - Return weather conditions from past 24 hours.\n:type duration: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CurrentConditionsResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.CurrentConditionsResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_current_conditions(\n    self,\n    coordinates: List[float],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    unit: Optional[Union[str, \"models.WeatherDataUnit\"]] = None,\n    details: Optional[str] = None,\n    duration: Optional[int] = None,\n    language: Optional[str] = None,\n    **kwargs\n) -\u003e \"models.CurrentConditionsResponse\":\n",
                "doc": "\"\"\"**Get Current Conditions**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nGet Current Conditions service returns detailed current weather conditions such as\nprecipitation, temperature and wind for a given coordinate location. Also, observations from\nthe past 6 or 24 hours for a particular location can be retrieved. The basic information\nreturned with the response include details such as observation date and time, brief description\nof the weather conditions, weather icon, precipitation indicator flags, and temperature.\nAdditional details such as RealFeel\u2122 Temperature and UV index are also returned.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param unit: Specifies to return the data in either metric units or imperial units. Default\n value is metric.\n:type unit: str or ~azure.maps.weather.models.WeatherDataUnit\n:param details: Return full details for the current conditions. Available values are\n\n\n * ``true`` - Returns full details. By default all details are returned.\n * ``false`` - Returns a truncated version of the current condition data, which includes\n observation date time, weather phrase, icon code, precipitation indicator flag, and\n temperature.\n:type details: str\n:param duration: Time frame of the returned weather conditions. By default, the most current\n weather conditions will be returned. Default value is 0. Supported values are:\n\n\n * ``0`` - Return the most current weather conditions.\n * ``6`` - Return weather conditions from past 6 hours.\n * ``24`` - Return weather conditions from past 24 hours.\n:type duration: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CurrentConditionsResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.CurrentConditionsResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "coordinates, format, unit, details, duration, language"
        },
        "get_daily_forecast" : {
            "sync": {
                "signature": "def get_daily_forecast(\n    self,\n    coordinates,  # type: List[float]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    unit=None,  # type: Optional[Union[str, \"models.WeatherDataUnit\"]]\n    duration=None,  # type: Optional[int]\n    language=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Get Daily Forecast**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe service returns detailed weather forecast such as temperature and wind by day for the next\n1, 5, 10, 15, 25, or 45 days for a given coordinate location.  The response include details\nsuch as temperature, wind, precipitation, air quality, and UV index.\n\nIn S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also\nrequest daily forecast for the next 25 days, and 45 days.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param unit: Specifies to return the data in either metric units or imperial units. Default\n value is metric.\n:type unit: str or ~azure.maps.weather.models.WeatherDataUnit\n:param duration: Specifies for how many days the daily forecast responses are returned.\n Available values are\n\n\n * ``1`` - Return forecast data for the next day. Returned by default.\n * ``5`` - Return forecast data for the next 5 days.\n * ``10`` - Return forecast data for the next 10 days.\n * ``25`` - Return forecast data for the next 25 days. Only available in S1 SKU.\n * ``45`` - Return forecast data for the next 45 days. Only available in S1 SKU.\n:type duration: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DailyForecastResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.DailyForecastResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_daily_forecast(\n    self,\n    coordinates: List[float],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    unit: Optional[Union[str, \"models.WeatherDataUnit\"]] = None,\n    duration: Optional[int] = None,\n    language: Optional[str] = None,\n    **kwargs\n) -\u003e \"models.DailyForecastResponse\":\n",
                "doc": "\"\"\"**Get Daily Forecast**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe service returns detailed weather forecast such as temperature and wind by day for the next\n1, 5, 10, 15, 25, or 45 days for a given coordinate location.  The response include details\nsuch as temperature, wind, precipitation, air quality, and UV index.\n\nIn S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also\nrequest daily forecast for the next 25 days, and 45 days.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param unit: Specifies to return the data in either metric units or imperial units. Default\n value is metric.\n:type unit: str or ~azure.maps.weather.models.WeatherDataUnit\n:param duration: Specifies for how many days the daily forecast responses are returned.\n Available values are\n\n\n * ``1`` - Return forecast data for the next day. Returned by default.\n * ``5`` - Return forecast data for the next 5 days.\n * ``10`` - Return forecast data for the next 10 days.\n * ``25`` - Return forecast data for the next 25 days. Only available in S1 SKU.\n * ``45`` - Return forecast data for the next 45 days. Only available in S1 SKU.\n:type duration: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DailyForecastResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.DailyForecastResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "coordinates, format, unit, duration, language"
        },
        "get_weather_along_route" : {
            "sync": {
                "signature": "def get_weather_along_route(\n    self,\n    query,  # type: str\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    language=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Get Weather along route**\n\n **Applies to**\\ : S1 pricing tier.\n\n Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute\nweather nowcasts, weather hazard assessments, and notifications along a route described as a\nsequence of waypoints.\n This includes a list of weather hazards affecting the waypoint or route, and the aggregated\nhazard index for each waypoint might be used to paint each portion of a route according to how\nsafe it is for the driver. When submitting the waypoints, it is recommended to stay within, or\nclose to, the distance that can be traveled within 120-mins or shortly after. Data is updated\nevery five minutes.\n\n The service supplements Azure Maps `Route Service\n\u003chttps://docs.microsoft.com/rest/api/maps/route\u003e`_ that allows you to first request a route\nbetween an origin and a destination and use that as an input for Weather Along Route endpoint.\n\n In addition, the service supports scenarios to generate weather notifications for waypoints\nthat experience an increase in intensity of a weather hazard. For example, if the vehicle is\nexpected to begin experiencing heavy rain as it reaches a waypoint, a weather notification for\nheavy rain will be generated for that waypoint allowing the end product to display a heavy rain\nnotification before the driver reaches that waypoint.\n The trigger for when to display the notification for a waypoint could be based, for example,\non a `geofence \u003chttps://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps\u003e`_\\ , or\nselectable distance to the waypoint.\n\n The API covers all regions of the planet except latitudes above Greenland and Antarctica.\n\n:param query: Coordinates through which the route is calculated, separated by colon (:) and\n entered in chronological order. A minimum of two waypoints is required. A single API call may\n contain up to 60 waypoints.\n A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading,\n where\n\n\n * ``Latitude`` - Latitude coordinate in decimal degrees.\n * ``Longitude`` - Longitude coordinate in decimal degrees.\n * ``ETA (estimated time of arrival)`` - The number of minutes from the present time that it\n will take for the vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes.\n * ``Heading`` - An optional value indicating the vehicle heading as it passes the waypoint.\n Expressed in clockwise degrees relative to true north. This is issued to calculate sun glare as\n a driving hazard. Allowed range is from 0.0 to 360.0 degrees. If not provided, a heading will\n automatically be derived based on the position of neighboring waypoints.\n\n It is recommended to stay within, or close to, the distance that can be traveled within\n 120-mins or shortly after. This way a more accurate assessment can be provided for the trip and\n prevent isolated events not being captured between waypoints.  Information can and should be\n updated along the route (especially for trips greater than 2 hours) to continuously pull new\n waypoints moving forward, but also to ensure that forecast information for content such as\n precipitation type and intensity is accurate as storms develop and dissipate over time.\n:type query: str\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: WeatherAlongRouteResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.WeatherAlongRouteResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_weather_along_route(\n    self,\n    query: str,\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    language: Optional[str] = None,\n    **kwargs\n) -\u003e \"models.WeatherAlongRouteResponse\":\n",
                "doc": "\"\"\"**Get Weather along route**\n\n **Applies to**\\ : S1 pricing tier.\n\n Weather along a route API returns hyper local (one kilometer or less), up-to-the-minute\nweather nowcasts, weather hazard assessments, and notifications along a route described as a\nsequence of waypoints.\n This includes a list of weather hazards affecting the waypoint or route, and the aggregated\nhazard index for each waypoint might be used to paint each portion of a route according to how\nsafe it is for the driver. When submitting the waypoints, it is recommended to stay within, or\nclose to, the distance that can be traveled within 120-mins or shortly after. Data is updated\nevery five minutes.\n\n The service supplements Azure Maps `Route Service\n\u003chttps://docs.microsoft.com/rest/api/maps/route\u003e`_ that allows you to first request a route\nbetween an origin and a destination and use that as an input for Weather Along Route endpoint.\n\n In addition, the service supports scenarios to generate weather notifications for waypoints\nthat experience an increase in intensity of a weather hazard. For example, if the vehicle is\nexpected to begin experiencing heavy rain as it reaches a waypoint, a weather notification for\nheavy rain will be generated for that waypoint allowing the end product to display a heavy rain\nnotification before the driver reaches that waypoint.\n The trigger for when to display the notification for a waypoint could be based, for example,\non a `geofence \u003chttps://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps\u003e`_\\ , or\nselectable distance to the waypoint.\n\n The API covers all regions of the planet except latitudes above Greenland and Antarctica.\n\n:param query: Coordinates through which the route is calculated, separated by colon (:) and\n entered in chronological order. A minimum of two waypoints is required. A single API call may\n contain up to 60 waypoints.\n A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading,\n where\n\n\n * ``Latitude`` - Latitude coordinate in decimal degrees.\n * ``Longitude`` - Longitude coordinate in decimal degrees.\n * ``ETA (estimated time of arrival)`` - The number of minutes from the present time that it\n will take for the vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes.\n * ``Heading`` - An optional value indicating the vehicle heading as it passes the waypoint.\n Expressed in clockwise degrees relative to true north. This is issued to calculate sun glare as\n a driving hazard. Allowed range is from 0.0 to 360.0 degrees. If not provided, a heading will\n automatically be derived based on the position of neighboring waypoints.\n\n It is recommended to stay within, or close to, the distance that can be traveled within\n 120-mins or shortly after. This way a more accurate assessment can be provided for the trip and\n prevent isolated events not being captured between waypoints.  Information can and should be\n updated along the route (especially for trips greater than 2 hours) to continuously pull new\n waypoints moving forward, but also to ensure that forecast information for content such as\n precipitation type and intensity is accurate as storms develop and dissipate over time.\n:type query: str\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: WeatherAlongRouteResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.WeatherAlongRouteResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "query, format, language"
        },
        "get_severe_weather_alerts" : {
            "sync": {
                "signature": "def get_severe_weather_alerts(\n    self,\n    coordinates,  # type: List[float]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    language=None,  # type: Optional[str]\n    details=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Get Severe Weather Alerts**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nSevere weather phenomenon can significantly impact our everyday life and business operations.\nFor example, severe weather conditions such as tropical storms, high winds or flooding can\nclose roads and force logistics companies to reroute their fleet causing delays in reaching\ndestinations and breaking the cold chain of refrigerated food products.\u202f Azure Maps\nSevere\u202fWeather\u202fAlerts API returns the severe\u202fweather\u202falerts that are available worldwide\nfrom\u202fboth\u202fofficial Government Meteorological Agencies and leading global\u202fto\nregional\u202fweather\u202falert providers. The service can return details such as alert type, category,\nlevel and detailed description about the active severe alerts for the requested location,\u202flike\nhurricanes, thunderstorms, lightning, heat waves or forest fires.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:param details: Return full details for the severe weather alerts. Available values are\n\n\n * ``true`` - Returns full details. By default all details are returned.\n * ``false`` - Returns a truncated version of the alerts data, which excludes the area-specific\n full description of alert details (\\ ``alertDetails``\\ ).\n:type details: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SevereWeatherAlertsResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.SevereWeatherAlertsResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_severe_weather_alerts(\n    self,\n    coordinates: List[float],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    language: Optional[str] = None,\n    details: Optional[str] = None,\n    **kwargs\n) -\u003e \"models.SevereWeatherAlertsResponse\":\n",
                "doc": "\"\"\"**Get Severe Weather Alerts**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nSevere weather phenomenon can significantly impact our everyday life and business operations.\nFor example, severe weather conditions such as tropical storms, high winds or flooding can\nclose roads and force logistics companies to reroute their fleet causing delays in reaching\ndestinations and breaking the cold chain of refrigerated food products.\u202f Azure Maps\nSevere\u202fWeather\u202fAlerts API returns the severe\u202fweather\u202falerts that are available worldwide\nfrom\u202fboth\u202fofficial Government Meteorological Agencies and leading global\u202fto\nregional\u202fweather\u202falert providers. The service can return details such as alert type, category,\nlevel and detailed description about the active severe alerts for the requested location,\u202flike\nhurricanes, thunderstorms, lightning, heat waves or forest fires.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:param details: Return full details for the severe weather alerts. Available values are\n\n\n * ``true`` - Returns full details. By default all details are returned.\n * ``false`` - Returns a truncated version of the alerts data, which excludes the area-specific\n full description of alert details (\\ ``alertDetails``\\ ).\n:type details: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: SevereWeatherAlertsResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.SevereWeatherAlertsResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "coordinates, format, language, details"
        },
        "get_daily_indices" : {
            "sync": {
                "signature": "def get_daily_indices(\n    self,\n    coordinates,  # type: List[float]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    language=None,  # type: Optional[str]\n    duration=None,  # type: Optional[int]\n    index_id=None,  # type: Optional[int]\n    index_group_id=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Get Daily Indices**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nThere may be times when you want to know if the weather conditions are optimal for a specific\nactivity, for example, for outdoor construction, indoor activities, running or farming\nincluding soil moisture information.  Azure Maps Indices API returns index values that will\nguide end users to plan future activities. For example, a health mobile application can notify\nusers that today is good weather for running or for other outdoors activities like for playing\ngolf, and retail stores can optimize their digital marketing campaigns based on predicted index\nvalues. The service returns in daily indices values for current and next 5, 10 and 15 days\nstarting from current day.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:param duration: Specifies for how many days the daily indices are returned. By default, the\n indices data for the current day will be returned. When requesting future indices data, the\n current day is included in the response as day 1. Available values are\n\n\n * ``1`` - Return daily index data for the current day. Default value.\n * ``5`` - Return 5 days of daily index data starting from the current day.\n * ``10`` - Return 10 days of daily index data starting from the current day.\n * ``15`` - Return 15 days of daily index data starting from the current day.\n:type duration: int\n:param index_id: Numeric index identifier that can be used for restricting returned results to\n the corresponding index type. Cannot be paired with ``indexGroupId``. Please refer to `Weather\n Service Concepts \u003chttps://aka.ms/AzureMapsWeatherConcepts\u003e`_ for details and to see the\n supported indices.\n:type index_id: int\n:param index_group_id: Numeric index group identifier that can be used for restricting returned\n results to the corresponding subset of indices (index group). Cannot be paired with\n ``indexId``. Please refer to `Weather Service Concepts\n \u003chttps://aka.ms/AzureMapsWeatherConcepts\u003e`_ for details and to see the supported index groups.\n:type index_group_id: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DailyIndicesResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.DailyIndicesResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_daily_indices(\n    self,\n    coordinates: List[float],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    language: Optional[str] = None,\n    duration: Optional[int] = None,\n    index_id: Optional[int] = None,\n    index_group_id: Optional[int] = None,\n    **kwargs\n) -\u003e \"models.DailyIndicesResponse\":\n",
                "doc": "\"\"\"**Get Daily Indices**\n\n**Applies to**\\ : S0 and S1 pricing tiers.\n\nThere may be times when you want to know if the weather conditions are optimal for a specific\nactivity, for example, for outdoor construction, indoor activities, running or farming\nincluding soil moisture information.  Azure Maps Indices API returns index values that will\nguide end users to plan future activities. For example, a health mobile application can notify\nusers that today is good weather for running or for other outdoors activities like for playing\ngolf, and retail stores can optimize their digital marketing campaigns based on predicted index\nvalues. The service returns in daily indices values for current and next 5, 10 and 15 days\nstarting from current day.\n\n:param coordinates: The applicable query specified as a comma separated string composed by\n latitude followed by longitude e.g. \"47.641268,-122.125679\".\n:type coordinates: list[float]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.weather.models.JsonFormat\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:param duration: Specifies for how many days the daily indices are returned. By default, the\n indices data for the current day will be returned. When requesting future indices data, the\n current day is included in the response as day 1. Available values are\n\n\n * ``1`` - Return daily index data for the current day. Default value.\n * ``5`` - Return 5 days of daily index data starting from the current day.\n * ``10`` - Return 10 days of daily index data starting from the current day.\n * ``15`` - Return 15 days of daily index data starting from the current day.\n:type duration: int\n:param index_id: Numeric index identifier that can be used for restricting returned results to\n the corresponding index type. Cannot be paired with ``indexGroupId``. Please refer to `Weather\n Service Concepts \u003chttps://aka.ms/AzureMapsWeatherConcepts\u003e`_ for details and to see the\n supported indices.\n:type index_id: int\n:param index_group_id: Numeric index group identifier that can be used for restricting returned\n results to the corresponding subset of indices (index group). Cannot be paired with\n ``indexId``. Please refer to `Weather Service Concepts\n \u003chttps://aka.ms/AzureMapsWeatherConcepts\u003e`_ for details and to see the supported index groups.\n:type index_group_id: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DailyIndicesResponse, or the result of cls(response)\n:rtype: ~azure.maps.weather.models.DailyIndicesResponse\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "coordinates, format, language, duration, index_id, index_group_id"
        }
    },
    "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"List\", \"Optional\", \"TypeVar\", \"Union\"]}}}",
    "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"List\", \"Optional\", \"TypeVar\", \"Union\"]}}}"
}