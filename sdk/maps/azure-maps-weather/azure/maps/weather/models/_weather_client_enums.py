# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class DayQuarter(with_metaclass(_CaseInsensitiveEnumMeta, int, Enum)):
    """Quarter of the day.
    """

    #: 7:00 am - 1:00 pm / 7:00- 13:00.
    ZERO = 0
    #: 1:00 pm - 7:00 pm/ 13:00- 19:00.
    ONE = 1
    #: 7:00 pm - 1:00 am/ 19:00 - 01:00.
    TWO = 2
    #: 1:00 am - 7:00 am/ 01:00 - 07:00.
    THREE = 3

class GeographicResourceLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Used to access an Azure Maps Creator resource in the United States.
    US = "us"
    #: Used to access an Azure Maps Creator resource in Europe.
    EU = "eu"

class Geography(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us
    and eu.
    """

    US = "us"
    EU = "eu"

class LatestStatusKeyword(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Keyword for the latest status of the alert.
    """

    #: "New" - the status of an alert upon initial issuance.
    NEW = "New"
    #: "Extend" - the alert has been extended in time, in area, or both since its initial issuance.
    EXTEND = "Extend"
    #: "Cancel" - the alert has been canceled prior to its original expiration time.
    CANCEL = "Cancel"
    #: "Correct" - the alert has been modified to correct a previous error.
    CORRECT = "Correct"
    #: "Expire" - the alert has expired and is no longer active.
    EXPIRE = "Expire"
    #: "Upgrade" - the alert has been upgraded to a higher class or category since its initial
    #: issuance.
    UPGRADE = "Upgrade"
    #: "Continue" - the alert has been updated since its initial issuance, but no changes were made to
    #: ``alertAreas``\ , ``startTime``\ , ``endTime``\ , or ``class``.
    CONTINUE_ENUM = "Continue"
    #: "Update" - the alert has been updated since its initial issuance.
    UPDATE = "Update"

class ResponseFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"

class WeatherDataUnit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return data in metric units. Some example units of metric system are Celsius and kilometer.
    METRIC = "metric"
    #: Return data in imperial units. Some example units of imperial system are Fahrenheit and mile.
    IMPERIAL = "imperial"
