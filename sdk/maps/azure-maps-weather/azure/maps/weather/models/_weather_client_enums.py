# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class DayQuarter(with_metaclass(_CaseInsensitiveEnumMeta, int, Enum)):
    """Quarter of the day.
    """

    FIRST_QUARTER = 0  #: 7:00 am - 1:00 pm / 7:00- 13:00.
    SECOND_QUARTER = 1  #: 1:00 pm - 7:00 pm/ 13:00- 19:00.
    THIRD_QUARTER = 2  #: 7:00 pm - 1:00 am/ 19:00 - 01:00.
    FORTH_QUARTER = 3  #: 1:00 am - 7:00 am/ 01:00 - 07:00.

class HazardIndex(with_metaclass(_CaseInsensitiveEnumMeta, int, Enum)):
    """A severity/hazard index.
    
    
    * ``0`` - No hazard.
    * ``1`` - Be informed, be aware.
    * ``2`` - Pay attention, be prepared.
    * ``3`` - Take action.
    * ``4`` - Life threatening, emergency.
    """

    NO_HAZARD = 0  #: No hazard.
    INFORMED = 1  #: Be informed.
    PAY_ATTENTION = 2  #: Pay attention.
    TAKE_ACTION = 3  #: Take action.
    EMERGENCY = 4  #: Emergency.

class IconCode(with_metaclass(_CaseInsensitiveEnumMeta, int, Enum)):
    """Numeric value representing an image that displays the ``iconPhrase``. Please refer to `Weather
    Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
    """

    SUNNY = 1  #: Sunny.
    MOSTLY_SUNNY = 2  #: Mostly Sunny.
    PARTLY_SUNNY = 3  #: Partly Sunny.
    INTERMITTENT_CLOUDS = 4  #: Intermittent Clouds.
    HAZY_SUNSHINE = 5  #: Hazy Sunshine.
    MOSTLY_CLOUDY = 6  #: Mostly Cloudy.
    CLOUDY = 7  #: Cloudy.
    DREARY = 8  #: Dreary (Overcast).
    FOG = 11  #: Fog.
    SHOWERS = 12  #: Showers.
    MOSTLY_CLOUDY_WITH_SHOWERS = 13  #: Mostly Cloudy with Showers.
    PARTLY_SUNNY_WITH_SHOWERS = 14  #: Partly Sunny with Showers.
    THUNDERSTORMS = 15  #: Thunderstorms.
    MOSTLY_CLOUDY_WITH_THUNDERSTORMS = 16  #: Mostly Cloudy with Thunderstorms.
    PARTLY_SUNNY_WITH_THUNDERSTORMS = 17  #: Partly Sunny with Thunderstorms.
    RAIN = 18  #: Rain.
    FLURRIES = 19  #: Flurries.
    MOSTLY_CLOUDY_WITH_FLURRIES = 20  #: Mostly Cloudy with Flurries.
    PARTLY_SUNNY_WITH_FLURRIES = 21  #: Partly Sunny with Flurries.
    SNOW = 22  #: Snow.
    MOSTLY_CLOUDY_WITH_SNOW = 23  #: Mostly Cloudy with Snow.
    ICE = 24  #: Ice.
    SLEET = 25  #: Sleet.
    FREEZING_RAIN = 26  #: Freezing Rain.
    RAIN_AND_SNOW = 29  #: Rain and Snow.
    HOT = 30  #: Hot.
    COLD = 31  #: Cold.
    WINDY = 32  #: Windy.
    CLEAR = 33  #: Clear.
    MOSTLY_CLEAR = 34  #: Mostly Clear.
    PARTLY_CLOUDY = 35  #: Partly Cloudy.
    HAZY_MOONLIGHT = 37  #: Hazy Moonlight.
    PARTLY_CLOUDY_WITH_SHOWERS = 39  #: Partly Cloudy with Showers.
    PARTLY_CLOUDY_WITH_THUNDERSTORMS = 41  #: Partly Cloudy with Thunderstorms.

class JsonFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    JSON = "json"  #: `The JavaScript Object Notation Data Interchange Format <https://tools.ietf.org/html/rfc8259>`_.

class LatestStatusKeyword(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Keyword for the latest status of the alert.
    """

    NEW = "New"  #: "New" - the status of an alert upon initial issuance.
    EXTEND = "Extend"  #: "Extend" - the alert has been extended in time, in area, or both since its initial issuance.
    CANCEL = "Cancel"  #: "Cancel" - the alert has been canceled prior to its original expiration time.
    CORRECT = "Correct"  #: "Correct" - the alert has been modified to correct a previous error.
    EXPIRE = "Expire"  #: "Expire" - the alert has expired and is no longer active.
    UPGRADE = "Upgrade"  #: "Upgrade" - the alert has been upgraded to a higher class or category since its initial issuance.
    CONTINUE_ENUM = "Continue"  #: "Continue" - the alert has been updated since its initial issuance, but no changes were made to ``alertDetails``\ , ``startTime``\ , ``endTime``\ , or ``class``.
    UPDATE = "Update"  #: "Update" - the alert has been updated since its initial issuance.

class PrecipitationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix"). If dbz is zero,
    precipitationType is not present in the response.
    """

    RAIN = "Rain"  #: Rain.
    SNOW = "Snow"  #: Snow.
    ICE = "Ice"  #: Ice.
    MIX = "Mix"  #: Mix.

class UnitType(with_metaclass(_CaseInsensitiveEnumMeta, int, Enum)):
    """Numeric ID value associated with the type of unit being displayed. Can be used for unit
    translation. Please refer to `Weather Service Concepts
    <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
    """

    FEET = 0  #: feet.
    INCHES = 1  #: inches.
    MILES = 2  #: miles.
    MILLIMETER = 3  #: millimeter.
    CENTIMETER = 4  #: centimeter.
    METER = 5  #: meter.
    KILOMETER = 6  #: kilometer.
    KILOMETERS_PER_HOUR = 7  #: kilometersPerHour.
    KNOTS = 8  #: knots.
    MILES_PER_HOUR = 9  #: milesPerHour.
    METERS_PER_SECOND = 10  #: metersPerSecond.
    HECTO_PASCALS = 11  #: hectoPascals.
    INCHES_OF_MERCURY = 12  #: inchesOfMercury.
    KILO_PASCALS = 13  #: kiloPascals.
    MILLIBARS = 14  #: millibars.
    MILLIMETERS_OF_MERCURY = 15  #: millimetersOfMercury.
    POUNDS_PER_SQUARE_INCH = 16  #: poundsPerSquareInch.
    CELSIUS = 17  #: celsius.
    FAHRENHEIT = 18  #: fahrenheit.
    KELVIN = 19  #: kelvin.
    PERCENT = 20  #: percent.
    FLOAT = 21  #: float.
    INTEGER = 22  #: integer.
    MICROGRAMS_PER_CUBIC_METER_OF_AIR = 31  #: MicrogramsPerCubicMeterOfAir.

class WeatherDataUnit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    METRIC = "metric"  #: Return data in metric units. Some example units of metric system are Celsius and kilometer.
    IMPERIAL = "imperial"  #: Return data in imperial units. Some example units of imperial system are Fahrenheit and mile.
