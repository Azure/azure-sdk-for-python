# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._weather_client_enums import *


class AirAndPollen(msrest.serialization.Model):
    """AirAndPollen.

    :param description: Name of the pollen or pollutant. For example, grass, mold, weed, air
     quality, tree and UV index.
    :type description: str
    :param value: Value of the given type above. Values associated with mold, grass, weed and tree
     are in units of parts per cubic meter. Both air quality and UV are indices, so they are
     unitless.
    :type value: int
    :param category: Category of the air quality or pollution type. For example, low, high, good,
     moderate, unhealthy, hazardous.
    :type category: str
    :param category_value: Value associated with the air quality or pollution category. These
     values range from 1 to 6. 1 implying good conditions, 6 implying hazardous conditions.
    :type category_value: int
    :param air_quality_type: Only exists for air quality. Examples include ozone and particle
     pollution.
    :type air_quality_type: str
    """

    _attribute_map = {
        'description': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'int'},
        'category': {'key': 'category', 'type': 'str'},
        'category_value': {'key': 'categoryValue', 'type': 'int'},
        'air_quality_type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        value: Optional[int] = None,
        category: Optional[str] = None,
        category_value: Optional[int] = None,
        air_quality_type: Optional[str] = None,
        **kwargs
    ):
        super(AirAndPollen, self).__init__(**kwargs)
        self.description = description
        self.value = value
        self.category = category
        self.category_value = category_value
        self.air_quality_type = air_quality_type


class AlertDetails(msrest.serialization.Model):
    """Information about a severe weather alert issued within an affected area(s). If multiple alerts are active for the same location, the alerts will be returned in order of ``priority`` within the API response, with the highest priority alert being returned at the top of the response.

    :param name: The name of an area which is affected by the alert. The location that was
     requested falls under the alert area.
    :type name: str
    :param description: Text summarizing the alert in the returned area.
    :type description: str
    :param start_time: The start date and time of the alert in ISO 8601 format, for example,
     2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned time in the
     response is the local time to the requested coordinate location.
    :type start_time: ~datetime.datetime
    :param end_time: The end date and time of the alert in ISO 8601 format, for example,
     2019-10-27T19:39:57-08:00. If the alert crosses multiple time zones the returned time in the
     response is the local time to the requested coordinate location.
    :type end_time: ~datetime.datetime
    :param latest_status: The latest status of the alert in the current area.
    :type latest_status: ~azure.maps.weather.models.LatestStatus
    :param details: Full details associated with the alert. Returned if ``details``\ =True. This
     field is always returned in the language(s) of choice by the issuing provider and Azure Maps
     only returns what is created by the provider. Please note, some countries/regions may offer
     their native language and English. Language parameter won’t apply to this field.
    :type details: str
    :param language: Language of the ``alertDetails``. This field  helps to point out that the
     language of the ``alertDetails`` may differ from the requested language parameter. Returned if
     ``details``\ =True. Language code has been derived from the ISO 639-1 Alpha-2 codes.
    :type language: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'summary', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'latest_status': {'key': 'latestStatus', 'type': 'LatestStatus'},
        'details': {'key': 'alertDetails', 'type': 'str'},
        'language': {'key': 'alertDetailsLanguageCode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        latest_status: Optional["LatestStatus"] = None,
        details: Optional[str] = None,
        language: Optional[str] = None,
        **kwargs
    ):
        super(AlertDetails, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.start_time = start_time
        self.end_time = end_time
        self.latest_status = latest_status
        self.details = details
        self.language = language


class ColorValue(msrest.serialization.Model):
    """ColorValue.

    :param red: Red component of the RGB value.
    :type red: int
    :param green: Green component of the RGB value.
    :type green: int
    :param blue: Blue component of the RGB value.
    :type blue: int
    :param hex: Hexadecimal color value.
    :type hex: str
    """

    _attribute_map = {
        'red': {'key': 'red', 'type': 'int'},
        'green': {'key': 'green', 'type': 'int'},
        'blue': {'key': 'blue', 'type': 'int'},
        'hex': {'key': 'hex', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        red: Optional[int] = None,
        green: Optional[int] = None,
        blue: Optional[int] = None,
        hex: Optional[str] = None,
        **kwargs
    ):
        super(ColorValue, self).__init__(**kwargs)
        self.red = red
        self.green = green
        self.blue = blue
        self.hex = hex


class CurrentConditions(msrest.serialization.Model):
    """CurrentConditions.

    :param date_time: Date and time of the current observation displayed in ISO 8601 format, for
     example, 2019-10-27T19:39:57-08:00.
    :type date_time: ~datetime.datetime
    :param description: Phrase description of the current weather condition.  Displayed in
     specified language.
    :type description: str
    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    :param has_precipitation: Indicates the presence or absence of precipitation. True indicates
     the presence of precipitation, false indicates the absence of precipitation.
    :type has_precipitation: bool
    :param is_daytime: Indicates the time of the day. True indicates 'day',', false indicates
     'night.
    :type is_daytime: bool
    :param temperature: Temperature being returned.
    :type temperature: ~azure.maps.weather.models.WeatherValue
    :param real_feel_temperature: RealFeel™ Temperature being returned.
    :type real_feel_temperature: ~azure.maps.weather.models.WeatherValue
    :param real_feel_temperature_shade: RealFeel™ Temperature being returned. Describes what the
     temperature really feels like in the shade.
    :type real_feel_temperature_shade: ~azure.maps.weather.models.WeatherValue
    :param relative_humidity: Relative humidity is the amount of water vapor present in air
     expressed as a percentage of the amount needed for saturation at the same temperature.
    :type relative_humidity: int
    :param dew_point: The dewpoint temperature in specified unit. The dewpoint temperature is the
     temperature that the air must be cooled to in order to reach saturation.
    :type dew_point: ~azure.maps.weather.models.WeatherValue
    :param wind: Wind details being returned including speed and direction.
    :type wind: ~azure.maps.weather.models.WindDetails
    :param wind_gust: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
    :type wind_gust: ~azure.maps.weather.models.WindDetails
    :param uv_index: Measure of the strength of the ultraviolet radiation from the sun. Supported
     values are:
    
    
     * ``0-2`` - Low danger from the sun's UV rays or the average person.
     * ``3-5`` - Moderate risk of harm from unprotected sun exposure.
     * ``6-7`` - High risk of harm from unprotected sun exposure.
     * ``8-10`` - Very high risk of harm from unprotected sun exposure.
     * ``11+`` - Extreme risk of harm from unprotected sun exposure.
    :type uv_index: int
    :param uv_index_description: Phrase associated with the ``uvIndex``.
    :type uv_index_description: str
    :param visibility: Visibility in specified unit. A measure of the distance at which an object
     or light can be clearly discerned.
    :type visibility: ~azure.maps.weather.models.WeatherValue
    :param obstructions_to_visibility: Cause of limited visibility.
    :type obstructions_to_visibility: str
    :param cloud_cover: Percent representing cloud cover.
    :type cloud_cover: int
    :param cloud_ceiling: Cloud ceiling in specified unit. The ceiling is a measurement of the
     height of the base of the lowest clouds.
    :type cloud_ceiling: ~azure.maps.weather.models.WeatherValue
    :param pressure: Atmospheric pressure in specified unit.
    :type pressure: ~azure.maps.weather.models.WeatherValue
    :param pressure_tendency: Atmospheric pressure change.
    :type pressure_tendency: ~azure.maps.weather.models.PressureTendency
    :param past_twenty_four_hour_temperature_departure: Departure from the temperature observed 24
     hours ago in specified unit.
    :type past_twenty_four_hour_temperature_departure: ~azure.maps.weather.models.WeatherValue
    :param apparent_temperature: Perceived outdoor temperature caused by the combination of air
     temperature, relative humidity, and wind speed in specified unit.
    :type apparent_temperature: ~azure.maps.weather.models.WeatherValue
    :param wind_chill_temperature: Perceived air temperature on exposed skin due to wind.
    :type wind_chill_temperature: ~azure.maps.weather.models.WeatherValue
    :param wet_bulb_temperature: The temperature to which air may be cooled by evaporating water
     into it at constant pressure until it reaches saturation.
    :type wet_bulb_temperature: ~azure.maps.weather.models.WeatherValue
    :param precipitation_summary: Summary of precipitation amounts over the past 24 hours.
    :type precipitation_summary: ~azure.maps.weather.models.PrecipitationSummary
    :param temperature_summary: Summary of temperature fluctuations over the past 6, 12, and 24
     hours.
    :type temperature_summary: ~azure.maps.weather.models.TemperatureSummary
    """

    _attribute_map = {
        'date_time': {'key': 'dateTime', 'type': 'iso-8601'},
        'description': {'key': 'phrase', 'type': 'str'},
        'icon_code': {'key': 'iconCode', 'type': 'int'},
        'has_precipitation': {'key': 'hasPrecipitation', 'type': 'bool'},
        'is_daytime': {'key': 'isDayTime', 'type': 'bool'},
        'temperature': {'key': 'temperature', 'type': 'WeatherValue'},
        'real_feel_temperature': {'key': 'realFeelTemperature', 'type': 'WeatherValue'},
        'real_feel_temperature_shade': {'key': 'realFeelTemperatureShade', 'type': 'WeatherValue'},
        'relative_humidity': {'key': 'relativeHumidity', 'type': 'int'},
        'dew_point': {'key': 'dewPoint', 'type': 'WeatherValue'},
        'wind': {'key': 'wind', 'type': 'WindDetails'},
        'wind_gust': {'key': 'windGust', 'type': 'WindDetails'},
        'uv_index': {'key': 'uvIndex', 'type': 'int'},
        'uv_index_description': {'key': 'uvIndexPhrase', 'type': 'str'},
        'visibility': {'key': 'visibility', 'type': 'WeatherValue'},
        'obstructions_to_visibility': {'key': 'obstructionsToVisibility', 'type': 'str'},
        'cloud_cover': {'key': 'cloudCover', 'type': 'int'},
        'cloud_ceiling': {'key': 'ceiling', 'type': 'WeatherValue'},
        'pressure': {'key': 'pressure', 'type': 'WeatherValue'},
        'pressure_tendency': {'key': 'pressureTendency', 'type': 'PressureTendency'},
        'past_twenty_four_hour_temperature_departure': {'key': 'pastTwentyFourHourTemperatureDeparture', 'type': 'WeatherValue'},
        'apparent_temperature': {'key': 'apparentTemperature', 'type': 'WeatherValue'},
        'wind_chill_temperature': {'key': 'windChillTemperature', 'type': 'WeatherValue'},
        'wet_bulb_temperature': {'key': 'wetBulbTemperature', 'type': 'WeatherValue'},
        'precipitation_summary': {'key': 'precipitationSummary', 'type': 'PrecipitationSummary'},
        'temperature_summary': {'key': 'temperatureSummary', 'type': 'TemperatureSummary'},
    }

    def __init__(
        self,
        *,
        date_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        has_precipitation: Optional[bool] = None,
        is_daytime: Optional[bool] = None,
        temperature: Optional["WeatherValue"] = None,
        real_feel_temperature: Optional["WeatherValue"] = None,
        real_feel_temperature_shade: Optional["WeatherValue"] = None,
        relative_humidity: Optional[int] = None,
        dew_point: Optional["WeatherValue"] = None,
        wind: Optional["WindDetails"] = None,
        wind_gust: Optional["WindDetails"] = None,
        uv_index: Optional[int] = None,
        uv_index_description: Optional[str] = None,
        visibility: Optional["WeatherValue"] = None,
        obstructions_to_visibility: Optional[str] = None,
        cloud_cover: Optional[int] = None,
        cloud_ceiling: Optional["WeatherValue"] = None,
        pressure: Optional["WeatherValue"] = None,
        pressure_tendency: Optional["PressureTendency"] = None,
        past_twenty_four_hour_temperature_departure: Optional["WeatherValue"] = None,
        apparent_temperature: Optional["WeatherValue"] = None,
        wind_chill_temperature: Optional["WeatherValue"] = None,
        wet_bulb_temperature: Optional["WeatherValue"] = None,
        precipitation_summary: Optional["PrecipitationSummary"] = None,
        temperature_summary: Optional["TemperatureSummary"] = None,
        **kwargs
    ):
        super(CurrentConditions, self).__init__(**kwargs)
        self.date_time = date_time
        self.description = description
        self.icon_code = icon_code
        self.has_precipitation = has_precipitation
        self.is_daytime = is_daytime
        self.temperature = temperature
        self.real_feel_temperature = real_feel_temperature
        self.real_feel_temperature_shade = real_feel_temperature_shade
        self.relative_humidity = relative_humidity
        self.dew_point = dew_point
        self.wind = wind
        self.wind_gust = wind_gust
        self.uv_index = uv_index
        self.uv_index_description = uv_index_description
        self.visibility = visibility
        self.obstructions_to_visibility = obstructions_to_visibility
        self.cloud_cover = cloud_cover
        self.cloud_ceiling = cloud_ceiling
        self.pressure = pressure
        self.pressure_tendency = pressure_tendency
        self.past_twenty_four_hour_temperature_departure = past_twenty_four_hour_temperature_departure
        self.apparent_temperature = apparent_temperature
        self.wind_chill_temperature = wind_chill_temperature
        self.wet_bulb_temperature = wet_bulb_temperature
        self.precipitation_summary = precipitation_summary
        self.temperature_summary = temperature_summary


class CurrentConditionsResponse(msrest.serialization.Model):
    """CurrentConditionsResponse.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar results: Detailed current weather conditions.
    :vartype results: list[~azure.maps.weather.models.CurrentConditions]
    """

    _validation = {
        'results': {'readonly': True},
    }

    _attribute_map = {
        'results': {'key': 'results', 'type': '[CurrentConditions]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CurrentConditionsResponse, self).__init__(**kwargs)
        self.results = None


class DailyForecast(msrest.serialization.Model):
    """DailyForecast.

    :param date_time: Date and time of the current observation displayed in ISO 8601 format, for
     example, 2019-10-27T19:39:57-08:00.
    :type date_time: ~datetime.datetime
    :param temperature: Temperature values for the day.
    :type temperature: ~azure.maps.weather.models.WeatherValueRange
    :param real_feel_temperature: RealFeel™ Temperature being returned.
    :type real_feel_temperature: ~azure.maps.weather.models.WeatherValueRange
    :param real_feel_temperature_shade: RealFeel™ Temperature being returned. Describes what the
     temperature really feels like in the shade.
    :type real_feel_temperature_shade: ~azure.maps.weather.models.WeatherValueRange
    :param hours_of_sun: Hours of sun.
    :type hours_of_sun: float
    :param mean_temperature_deviation: Summary for mean temperature of Heating Degree Day or
     Cooling Degree Day information.
    :type mean_temperature_deviation: ~azure.maps.weather.models.DegreeDaySummary
    :param air_quality: Air quality.
    :type air_quality: list[~azure.maps.weather.models.AirAndPollen]
    :param daytime_forecast: Day forecast detail.
    :type daytime_forecast: ~azure.maps.weather.models.DailyForecastDetail
    :param nighttime_forecast: Night forecast detail.
    :type nighttime_forecast: ~azure.maps.weather.models.DailyForecastDetail
    :param sources: Source(s) of the forecast data.
    :type sources: list[str]
    """

    _attribute_map = {
        'date_time': {'key': 'date', 'type': 'iso-8601'},
        'temperature': {'key': 'temperature', 'type': 'WeatherValueRange'},
        'real_feel_temperature': {'key': 'realFeelTemperature', 'type': 'WeatherValueRange'},
        'real_feel_temperature_shade': {'key': 'realFeelTemperatureShade', 'type': 'WeatherValueRange'},
        'hours_of_sun': {'key': 'hoursOfSun', 'type': 'float'},
        'mean_temperature_deviation': {'key': 'degreeDaySummary', 'type': 'DegreeDaySummary'},
        'air_quality': {'key': 'airAndPollen', 'type': '[AirAndPollen]'},
        'daytime_forecast': {'key': 'day', 'type': 'DailyForecastDetail'},
        'nighttime_forecast': {'key': 'night', 'type': 'DailyForecastDetail'},
        'sources': {'key': 'sources', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        date_time: Optional[datetime.datetime] = None,
        temperature: Optional["WeatherValueRange"] = None,
        real_feel_temperature: Optional["WeatherValueRange"] = None,
        real_feel_temperature_shade: Optional["WeatherValueRange"] = None,
        hours_of_sun: Optional[float] = None,
        mean_temperature_deviation: Optional["DegreeDaySummary"] = None,
        air_quality: Optional[List["AirAndPollen"]] = None,
        daytime_forecast: Optional["DailyForecastDetail"] = None,
        nighttime_forecast: Optional["DailyForecastDetail"] = None,
        sources: Optional[List[str]] = None,
        **kwargs
    ):
        super(DailyForecast, self).__init__(**kwargs)
        self.date_time = date_time
        self.temperature = temperature
        self.real_feel_temperature = real_feel_temperature
        self.real_feel_temperature_shade = real_feel_temperature_shade
        self.hours_of_sun = hours_of_sun
        self.mean_temperature_deviation = mean_temperature_deviation
        self.air_quality = air_quality
        self.daytime_forecast = daytime_forecast
        self.nighttime_forecast = nighttime_forecast
        self.sources = sources


class DailyForecastDetail(msrest.serialization.Model):
    """DailyForecastDetail.

    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    :param icon_phrase: Phrase description of the icon. Displayed in specified language. For
     example, 'Sunny'.
    :type icon_phrase: str
    :param local_source: Local weather data provider information.
    :type local_source: ~azure.maps.weather.models.LocalSource
    :param has_precipitation: Indicates the presence or absence of precipitation. True indicates
     the presence of precipitation, false indicates the absence of precipitation.
    :type has_precipitation: bool
    :param precipitation_type: Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix").
     If dbz is zero, precipitationType is not present in the response. Possible values include:
     "Rain", "Snow", "Ice", "Mix".
    :type precipitation_type: str or ~azure.maps.weather.models.PrecipitationType
    :param precipitation_intensity: Description of the intensity.
    :type precipitation_intensity: str
    :param short_description: Phrase description of the forecast in specified language. Azure Maps
     attempts to keep this phrase under 30 characters in length, but some languages/weather events
     may result in a longer phrase length, exceeding 30 characters.
    :type short_description: str
    :param long_phrase: Phrase description of the forecast in specified language. Azure Maps
     attempts to keep this phrase under 100 characters in length, but some languages/weather events
     may result in a longer phrase length, exceeding 100 characters.
    :type long_phrase: str
    :param precipitation_probability: Percent representing the probability of precipitation. For
     example, '20'.
    :type precipitation_probability: int
    :param thunderstorm_probability: Percent representing the probability of a thunderstorm. For
     example, '80'.
    :type thunderstorm_probability: int
    :param rain_probability: Percent representing the probability of rain. For example, '40'.
    :type rain_probability: int
    :param snow_probability: Percent representing the probability of snow. For example, '30'.
    :type snow_probability: int
    :param ice_probability: Percent representing the probability of ice. For example, '30'.
    :type ice_probability: int
    :param wind: Wind details being returned including speed and direction.
    :type wind: ~azure.maps.weather.models.WindDetails
    :param wind_gust: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
    :type wind_gust: ~azure.maps.weather.models.WindDetails
    :param total_liquid: Total liquid equivalent of precipitation during the forecast period.
    :type total_liquid: ~azure.maps.weather.models.WeatherValue
    :param rain: Rain.
    :type rain: ~azure.maps.weather.models.WeatherValue
    :param snow: Snow.
    :type snow: ~azure.maps.weather.models.WeatherValue
    :param ice: Ice.
    :type ice: ~azure.maps.weather.models.WeatherValue
    :param hours_of_precipitation: Hours of precipitation.
    :type hours_of_precipitation: float
    :param hours_of_rain: Hours of rain.
    :type hours_of_rain: float
    :param hours_of_snow: Hours of snow.
    :type hours_of_snow: float
    :param hours_of_ice: Hours of ice.
    :type hours_of_ice: float
    :param cloud_cover: Percent representing cloud cover.
    :type cloud_cover: int
    """

    _attribute_map = {
        'icon_code': {'key': 'iconCode', 'type': 'int'},
        'icon_phrase': {'key': 'iconPhrase', 'type': 'str'},
        'local_source': {'key': 'localSource', 'type': 'LocalSource'},
        'has_precipitation': {'key': 'hasPrecipitation', 'type': 'bool'},
        'precipitation_type': {'key': 'precipitationType', 'type': 'str'},
        'precipitation_intensity': {'key': 'precipitationIntensity', 'type': 'str'},
        'short_description': {'key': 'shortPhrase', 'type': 'str'},
        'long_phrase': {'key': 'longPhrase', 'type': 'str'},
        'precipitation_probability': {'key': 'precipitationProbability', 'type': 'int'},
        'thunderstorm_probability': {'key': 'thunderstormProbability', 'type': 'int'},
        'rain_probability': {'key': 'rainProbability', 'type': 'int'},
        'snow_probability': {'key': 'snowProbability', 'type': 'int'},
        'ice_probability': {'key': 'iceProbability', 'type': 'int'},
        'wind': {'key': 'wind', 'type': 'WindDetails'},
        'wind_gust': {'key': 'windGust', 'type': 'WindDetails'},
        'total_liquid': {'key': 'totalLiquid', 'type': 'WeatherValue'},
        'rain': {'key': 'rain', 'type': 'WeatherValue'},
        'snow': {'key': 'snow', 'type': 'WeatherValue'},
        'ice': {'key': 'ice', 'type': 'WeatherValue'},
        'hours_of_precipitation': {'key': 'hoursOfPrecipitation', 'type': 'float'},
        'hours_of_rain': {'key': 'hoursOfRain', 'type': 'float'},
        'hours_of_snow': {'key': 'hoursOfSnow', 'type': 'float'},
        'hours_of_ice': {'key': 'hoursOfIce', 'type': 'float'},
        'cloud_cover': {'key': 'cloudCover', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        icon_phrase: Optional[str] = None,
        local_source: Optional["LocalSource"] = None,
        has_precipitation: Optional[bool] = None,
        precipitation_type: Optional[Union[str, "PrecipitationType"]] = None,
        precipitation_intensity: Optional[str] = None,
        short_description: Optional[str] = None,
        long_phrase: Optional[str] = None,
        precipitation_probability: Optional[int] = None,
        thunderstorm_probability: Optional[int] = None,
        rain_probability: Optional[int] = None,
        snow_probability: Optional[int] = None,
        ice_probability: Optional[int] = None,
        wind: Optional["WindDetails"] = None,
        wind_gust: Optional["WindDetails"] = None,
        total_liquid: Optional["WeatherValue"] = None,
        rain: Optional["WeatherValue"] = None,
        snow: Optional["WeatherValue"] = None,
        ice: Optional["WeatherValue"] = None,
        hours_of_precipitation: Optional[float] = None,
        hours_of_rain: Optional[float] = None,
        hours_of_snow: Optional[float] = None,
        hours_of_ice: Optional[float] = None,
        cloud_cover: Optional[int] = None,
        **kwargs
    ):
        super(DailyForecastDetail, self).__init__(**kwargs)
        self.icon_code = icon_code
        self.icon_phrase = icon_phrase
        self.local_source = local_source
        self.has_precipitation = has_precipitation
        self.precipitation_type = precipitation_type
        self.precipitation_intensity = precipitation_intensity
        self.short_description = short_description
        self.long_phrase = long_phrase
        self.precipitation_probability = precipitation_probability
        self.thunderstorm_probability = thunderstorm_probability
        self.rain_probability = rain_probability
        self.snow_probability = snow_probability
        self.ice_probability = ice_probability
        self.wind = wind
        self.wind_gust = wind_gust
        self.total_liquid = total_liquid
        self.rain = rain
        self.snow = snow
        self.ice = ice
        self.hours_of_precipitation = hours_of_precipitation
        self.hours_of_rain = hours_of_rain
        self.hours_of_snow = hours_of_snow
        self.hours_of_ice = hours_of_ice
        self.cloud_cover = cloud_cover


class DailyForecastResponse(msrest.serialization.Model):
    """DailyForecastResponse.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar summary: Summary for the main conditions for the requested time period. Notice that
     summary can cover only part of the time period.
    :vartype summary: ~azure.maps.weather.models.DailyForecastSummary
    :ivar forecasts: Forecast data for each requested day.
    :vartype forecasts: list[~azure.maps.weather.models.DailyForecast]
    """

    _validation = {
        'summary': {'readonly': True},
        'forecasts': {'readonly': True},
    }

    _attribute_map = {
        'summary': {'key': 'summary', 'type': 'DailyForecastSummary'},
        'forecasts': {'key': 'forecasts', 'type': '[DailyForecast]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DailyForecastResponse, self).__init__(**kwargs)
        self.summary = None
        self.forecasts = None


class DailyForecastSummary(msrest.serialization.Model):
    """Summary for the main conditions for the requested time period. Notice that summary can cover only part of the time period.

    :param start_date: Date and time that the summary is in effect, displayed in ISO 8601 format,
     for example, 2019-10-27T19:39:57-08:00.
    :type start_date: ~datetime.datetime
    :param end_date: Date and time that the summary period ends, displayed in ISO 8601 format, for
     example, 2019-10-27T19:39:57-08:00.
    :type end_date: ~datetime.datetime
    :param severity: severity.
    :type severity: int
    :param phrase: Summary phrase of the daily forecast.  Displayed in specified language.
    :type phrase: str
    :param category: one or 2 word(s) to summarize the phrase.
    :type category: str
    """

    _attribute_map = {
        'start_date': {'key': 'startDate', 'type': 'iso-8601'},
        'end_date': {'key': 'endDate', 'type': 'iso-8601'},
        'severity': {'key': 'severity', 'type': 'int'},
        'phrase': {'key': 'phrase', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_date: Optional[datetime.datetime] = None,
        end_date: Optional[datetime.datetime] = None,
        severity: Optional[int] = None,
        phrase: Optional[str] = None,
        category: Optional[str] = None,
        **kwargs
    ):
        super(DailyForecastSummary, self).__init__(**kwargs)
        self.start_date = start_date
        self.end_date = end_date
        self.severity = severity
        self.phrase = phrase
        self.category = category


class DailyIndex(msrest.serialization.Model):
    """Information about a daily index.

    :param index_name: Name of the index, for example, "Construction", "Outdoor Activity", "Flight
     Delays".
    :type index_name: str
    :param index_id: Numeric ID used to identify the specific index. Please refer to `Weather
     Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details and to see the
     supported index IDs. For example, the index ID can support UI visualization scenarios.
    :type index_id: int
    :param date_time: Date and time of the current observation displayed in ISO 8601 format, for
     example, 2019-10-27T19:39:57-08:00.
    :type date_time: ~datetime.datetime
    :param value: Index value. Ranges from 0.0 to 10.0. Please refer to `Weather Service Concepts
     <https://aka.ms/AzureMapsWeatherConcepts>`_ for details and to see the supported ranges.
    :type value: float
    :param category_description: Textual description for ``categoryValue`` corresponding to the
     level that the index value falls under, for example "Very Good".
    :type category_description: str
    :param category_value: Level that the index value falls under, represented by an integer. This
     value can be 1 through 5 and should be used in combination with the ``ascending`` flag because
     it can differ among indices. For example, the following values apply for Mosquito Activity:
     Low=1, Moderate=2, High=3, Very High=4, and Extreme=5.
    :type category_value: int
    :param is_ascending: Describes the direction of the ``value`` and ``categoryValue``. For
     example, when set to ``true``\ , the poorest index value is 0 and the best index value is 10.
     When set to ``true``\ , the poorest index value is 10 and the best index value is 0.
    :type is_ascending: bool
    :param description: A textual explanation that can be used for display purposes to summarize
     the index value and category. For example, when the index value for Flight Delays is very good,
     the description will be "Conditions are excellent for flying!".
    :type description: str
    """

    _attribute_map = {
        'index_name': {'key': 'indexName', 'type': 'str'},
        'index_id': {'key': 'indexId', 'type': 'int'},
        'date_time': {'key': 'dateTime', 'type': 'iso-8601'},
        'value': {'key': 'value', 'type': 'float'},
        'category_description': {'key': 'category', 'type': 'str'},
        'category_value': {'key': 'categoryValue', 'type': 'int'},
        'is_ascending': {'key': 'ascending', 'type': 'bool'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        index_name: Optional[str] = None,
        index_id: Optional[int] = None,
        date_time: Optional[datetime.datetime] = None,
        value: Optional[float] = None,
        category_description: Optional[str] = None,
        category_value: Optional[int] = None,
        is_ascending: Optional[bool] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(DailyIndex, self).__init__(**kwargs)
        self.index_name = index_name
        self.index_id = index_id
        self.date_time = date_time
        self.value = value
        self.category_description = category_description
        self.category_value = category_value
        self.is_ascending = is_ascending
        self.description = description


class DailyIndicesResponse(msrest.serialization.Model):
    """This object is returned from a successful Get Daily Indices call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar results: A list of all daily indices for the queried location.
    :vartype results: list[~azure.maps.weather.models.DailyIndex]
    """

    _validation = {
        'results': {'readonly': True},
    }

    _attribute_map = {
        'results': {'key': 'results', 'type': '[DailyIndex]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DailyIndicesResponse, self).__init__(**kwargs)
        self.results = None


class DegreeDaySummary(msrest.serialization.Model):
    """DegreeDaySummary.

    :param heating: Number of degrees that the mean temperature is below 65 degrees F/ 18 degree C.
    :type heating: ~azure.maps.weather.models.WeatherValue
    :param cooling: Number of degrees that the mean temperature is above 65 degrees F/ 18 degree C.
    :type cooling: ~azure.maps.weather.models.WeatherValue
    """

    _attribute_map = {
        'heating': {'key': 'heating', 'type': 'WeatherValue'},
        'cooling': {'key': 'cooling', 'type': 'WeatherValue'},
    }

    def __init__(
        self,
        *,
        heating: Optional["WeatherValue"] = None,
        cooling: Optional["WeatherValue"] = None,
        **kwargs
    ):
        super(DegreeDaySummary, self).__init__(**kwargs)
        self.heating = heating
        self.cooling = cooling


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.maps.weather.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.maps.weather.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :param error: The error object.
    :type error: ~azure.maps.weather.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorDetail"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ForecastInterval(msrest.serialization.Model):
    """ForecastInterval.

    :param start_time: The date and time for the start of the interval in ISO 8601 format, for
     example, 2019-10-27T19:39:57-08:00.
    :type start_time: ~datetime.datetime
    :param minute: The first minute for the interval.
    :type minute: int
    :param decibel_relative_to_z: A unit that represents forecasted precipitation intensity.
    :type decibel_relative_to_z: float
    :param short_description: A short phrase describing precipitation condition for the interval.
    :type short_description: str
    :param threshold: Key that specifies the threshold value. Along with precipitationType, can be
     used to determine the simplifiedColor. If dbz is zero, not present in the response.
    :type threshold: str
    :param color: The full spectrum color that maps to the dBZ (decibel relative to Z). If dbz is
     zero, color is not present in the response.
    :type color: ~azure.maps.weather.models.ColorValue
    :param simplified_color: The band color that maps to the precipitation type and threshold. If
     dbz is zero, not present in the response.
    :type simplified_color: ~azure.maps.weather.models.ColorValue
    :param precipitation_type: Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix").
     If dbz is zero, precipitationType is not present in the response. Possible values include:
     "Rain", "Snow", "Ice", "Mix".
    :type precipitation_type: str or ~azure.maps.weather.models.PrecipitationType
    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    :param cloud_cover: Percent representing cloud cover.
    :type cloud_cover: int
    """

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'minute': {'key': 'minute', 'type': 'int'},
        'decibel_relative_to_z': {'key': 'dbz', 'type': 'float'},
        'short_description': {'key': 'shortPhrase', 'type': 'str'},
        'threshold': {'key': 'threshold', 'type': 'str'},
        'color': {'key': 'color', 'type': 'ColorValue'},
        'simplified_color': {'key': 'simplifiedColor', 'type': 'ColorValue'},
        'precipitation_type': {'key': 'precipitationType', 'type': 'str'},
        'icon_code': {'key': 'iconCode', 'type': 'int'},
        'cloud_cover': {'key': 'cloudCover', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        start_time: Optional[datetime.datetime] = None,
        minute: Optional[int] = None,
        decibel_relative_to_z: Optional[float] = None,
        short_description: Optional[str] = None,
        threshold: Optional[str] = None,
        color: Optional["ColorValue"] = None,
        simplified_color: Optional["ColorValue"] = None,
        precipitation_type: Optional[Union[str, "PrecipitationType"]] = None,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        cloud_cover: Optional[int] = None,
        **kwargs
    ):
        super(ForecastInterval, self).__init__(**kwargs)
        self.start_time = start_time
        self.minute = minute
        self.decibel_relative_to_z = decibel_relative_to_z
        self.short_description = short_description
        self.threshold = threshold
        self.color = color
        self.simplified_color = simplified_color
        self.precipitation_type = precipitation_type
        self.icon_code = icon_code
        self.cloud_cover = cloud_cover


class HazardDetail(msrest.serialization.Model):
    """HazardDetail.

    :param hazard_index: A severity/hazard index.
    
    
     * ``0`` - No hazard.
     * ``1`` - Be informed, be aware.
     * ``2`` - Pay attention, be prepared.
     * ``3`` - Take action.
     * ``4`` - Life threatening, emergency. Possible values include: 0, 1, 2, 3, 4.
    :type hazard_index: str or ~azure.maps.weather.models.HazardIndex
    :param hazard_code: A unique identifier (non-displayable) for each type of hazard: LightRain,
     ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow, HeavySnow,
     LightIce, ModerateIce, HeavyIce, Hail, LargeHail, SunGlare, SunGlareHigh, Lightning,
     SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning,
     TornadoWarning, TsunamiWarning, SevereThunderstormWarning.
    :type hazard_code: str
    :param short_description: A displayable short phrase describing the forecasted conditions and
     precipitation intensity/type.
    :type short_description: str
    """

    _attribute_map = {
        'hazard_index': {'key': 'hazardIndex', 'type': 'int'},
        'hazard_code': {'key': 'hazardCode', 'type': 'str'},
        'short_description': {'key': 'shortPhrase', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        hazard_index: Optional[Union[int, "HazardIndex"]] = None,
        hazard_code: Optional[str] = None,
        short_description: Optional[str] = None,
        **kwargs
    ):
        super(HazardDetail, self).__init__(**kwargs)
        self.hazard_index = hazard_index
        self.hazard_code = hazard_code
        self.short_description = short_description


class HourlyForecast(msrest.serialization.Model):
    """HourlyForecast.

    :param date_time: Date and time of the forecast in ISO 8601 format, for example,
     2019-10-27T19:39:57-08:00.
    :type date_time: ~datetime.datetime
    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    :param icon_phrase: Phrase description of the weather icon.
    :type icon_phrase: str
    :param has_precipitation: Indicates the presence or absence of precipitation. True indicates
     the presence of precipitation, false indicates the absence of precipitation.
    :type has_precipitation: bool
    :param is_daylight: Specifies whether or not it is daylight. True indicates day light.
    :type is_daylight: bool
    :param temperature: Temperature being returned.
    :type temperature: ~azure.maps.weather.models.WeatherValue
    :param real_feel_temperature: RealFeel™ Temperature being returned. Describes what the
     temperature really feels like in the shade.
    :type real_feel_temperature: ~azure.maps.weather.models.WeatherValue
    :param wet_bulb_temperature: The temperature to which air may be cooled by evaporating water
     into it at constant pressure until it reaches saturation.
    :type wet_bulb_temperature: ~azure.maps.weather.models.WeatherValue
    :param dew_point: The dewpoint temperature in specified unit. The dewpoint temperature is the
     temperature that the air must be cooled to in order to reach saturation.
    :type dew_point: ~azure.maps.weather.models.WeatherValue
    :param wind: Wind details being returned including speed and direction.
    :type wind: ~azure.maps.weather.models.WindDetails
    :param wind_gust: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
    :type wind_gust: ~azure.maps.weather.models.WindDetails
    :param relative_humidity: Relative humidity is the amount of water vapor present in air
     expressed as a percentage of the amount needed for saturation at the same temperature.
    :type relative_humidity: int
    :param visibility: Visibility in specified unit. A measure of the distance at which an object
     or light can be clearly discerned.
    :type visibility: ~azure.maps.weather.models.WeatherValue
    :param cloud_ceiling: Cloud ceiling in specified unit. The ceiling is a measurement of the
     height of the base of the lowest clouds.
    :type cloud_ceiling: ~azure.maps.weather.models.WeatherValue
    :param uv_index: Measure of the strength of the ultraviolet radiation from the sun. Supported
     values are:
    
    
     * ``0-2`` - Low danger from the sun's UV rays or the average person.
     * ``3-5`` - Moderate risk of harm from unprotected sun exposure.
     * ``6-7`` - High risk of harm from unprotected sun exposure.
     * ``8-10`` - Very high risk of harm from unprotected sun exposure.
     * ``11+`` - Extreme risk of harm from unprotected sun exposure.
    :type uv_index: int
    :param uv_index_description: Phrase associated with the ``uvIndex``.
    :type uv_index_description: str
    :param precipitation_probability: Percent representing the probability of precipitation. For
     example, '20'.
    :type precipitation_probability: int
    :param rain_probability: Percent representing the probability of rain. For example, '50'.
    :type rain_probability: int
    :param snow_probability: Percent representing the probability of snow. For example, '50'.
    :type snow_probability: int
    :param ice_probability: Percent representing the probability of snow. For example, '5'.
    :type ice_probability: int
    :param total_liquid: Total liquid equivalent of precipitation during the forecast period.
    :type total_liquid: ~azure.maps.weather.models.WeatherValue
    :param rain: Rain.
    :type rain: ~azure.maps.weather.models.WeatherValue
    :param snow: Snow.
    :type snow: ~azure.maps.weather.models.WeatherValue
    :param ice: Ice.
    :type ice: ~azure.maps.weather.models.WeatherValue
    :param cloud_cover: Percent representing cloud cover.
    :type cloud_cover: int
    """

    _attribute_map = {
        'date_time': {'key': 'date', 'type': 'iso-8601'},
        'icon_code': {'key': 'iconCode', 'type': 'int'},
        'icon_phrase': {'key': 'iconPhrase', 'type': 'str'},
        'has_precipitation': {'key': 'hasPrecipitation', 'type': 'bool'},
        'is_daylight': {'key': 'isDaylight', 'type': 'bool'},
        'temperature': {'key': 'temperature', 'type': 'WeatherValue'},
        'real_feel_temperature': {'key': 'realFeelTemperature', 'type': 'WeatherValue'},
        'wet_bulb_temperature': {'key': 'wetBulbTemperature', 'type': 'WeatherValue'},
        'dew_point': {'key': 'dewPoint', 'type': 'WeatherValue'},
        'wind': {'key': 'wind', 'type': 'WindDetails'},
        'wind_gust': {'key': 'windGust', 'type': 'WindDetails'},
        'relative_humidity': {'key': 'relativeHumidity', 'type': 'int'},
        'visibility': {'key': 'visibility', 'type': 'WeatherValue'},
        'cloud_ceiling': {'key': 'ceiling', 'type': 'WeatherValue'},
        'uv_index': {'key': 'uvIndex', 'type': 'int'},
        'uv_index_description': {'key': 'uvIndexPhrase', 'type': 'str'},
        'precipitation_probability': {'key': 'precipitationProbability', 'type': 'int'},
        'rain_probability': {'key': 'rainProbability', 'type': 'int'},
        'snow_probability': {'key': 'snowProbability', 'type': 'int'},
        'ice_probability': {'key': 'iceProbability', 'type': 'int'},
        'total_liquid': {'key': 'totalLiquid', 'type': 'WeatherValue'},
        'rain': {'key': 'rain', 'type': 'WeatherValue'},
        'snow': {'key': 'snow', 'type': 'WeatherValue'},
        'ice': {'key': 'ice', 'type': 'WeatherValue'},
        'cloud_cover': {'key': 'cloudCover', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        date_time: Optional[datetime.datetime] = None,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        icon_phrase: Optional[str] = None,
        has_precipitation: Optional[bool] = None,
        is_daylight: Optional[bool] = None,
        temperature: Optional["WeatherValue"] = None,
        real_feel_temperature: Optional["WeatherValue"] = None,
        wet_bulb_temperature: Optional["WeatherValue"] = None,
        dew_point: Optional["WeatherValue"] = None,
        wind: Optional["WindDetails"] = None,
        wind_gust: Optional["WindDetails"] = None,
        relative_humidity: Optional[int] = None,
        visibility: Optional["WeatherValue"] = None,
        cloud_ceiling: Optional["WeatherValue"] = None,
        uv_index: Optional[int] = None,
        uv_index_description: Optional[str] = None,
        precipitation_probability: Optional[int] = None,
        rain_probability: Optional[int] = None,
        snow_probability: Optional[int] = None,
        ice_probability: Optional[int] = None,
        total_liquid: Optional["WeatherValue"] = None,
        rain: Optional["WeatherValue"] = None,
        snow: Optional["WeatherValue"] = None,
        ice: Optional["WeatherValue"] = None,
        cloud_cover: Optional[int] = None,
        **kwargs
    ):
        super(HourlyForecast, self).__init__(**kwargs)
        self.date_time = date_time
        self.icon_code = icon_code
        self.icon_phrase = icon_phrase
        self.has_precipitation = has_precipitation
        self.is_daylight = is_daylight
        self.temperature = temperature
        self.real_feel_temperature = real_feel_temperature
        self.wet_bulb_temperature = wet_bulb_temperature
        self.dew_point = dew_point
        self.wind = wind
        self.wind_gust = wind_gust
        self.relative_humidity = relative_humidity
        self.visibility = visibility
        self.cloud_ceiling = cloud_ceiling
        self.uv_index = uv_index
        self.uv_index_description = uv_index_description
        self.precipitation_probability = precipitation_probability
        self.rain_probability = rain_probability
        self.snow_probability = snow_probability
        self.ice_probability = ice_probability
        self.total_liquid = total_liquid
        self.rain = rain
        self.snow = snow
        self.ice = ice
        self.cloud_cover = cloud_cover


class HourlyForecastResponse(msrest.serialization.Model):
    """HourlyForecastResponse.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar forecasts: Forecast data for each returned hour.
    :vartype forecasts: list[~azure.maps.weather.models.HourlyForecast]
    """

    _validation = {
        'forecasts': {'readonly': True},
    }

    _attribute_map = {
        'forecasts': {'key': 'forecasts', 'type': '[HourlyForecast]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HourlyForecastResponse, self).__init__(**kwargs)
        self.forecasts = None


class IntervalSummary(msrest.serialization.Model):
    """IntervalSummary.

    :param start_minute: The first minute to which the summary applies.
    :type start_minute: int
    :param end_minute: The last minute to which the summary applies.
    :type end_minute: int
    :param total_minutes: The number of minutes for which the summary applies.
    :type total_minutes: int
    :param short_description: Short summary phrase. Phrase length is approximately 25 characters.
    :type short_description: str
    :param brief_description: Brief summary phrase. Phrase length is approximately 60 characters.
    :type brief_description: str
    :param long_phrase: Long summary phrase. Phrase length is 60+ characters.
    :type long_phrase: str
    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    """

    _attribute_map = {
        'start_minute': {'key': 'startMinute', 'type': 'int'},
        'end_minute': {'key': 'endMinute', 'type': 'int'},
        'total_minutes': {'key': 'totalMinutes', 'type': 'int'},
        'short_description': {'key': 'shortPhrase', 'type': 'str'},
        'brief_description': {'key': 'briefPhrase', 'type': 'str'},
        'long_phrase': {'key': 'longPhrase', 'type': 'str'},
        'icon_code': {'key': 'iconCode', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        start_minute: Optional[int] = None,
        end_minute: Optional[int] = None,
        total_minutes: Optional[int] = None,
        short_description: Optional[str] = None,
        brief_description: Optional[str] = None,
        long_phrase: Optional[str] = None,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        **kwargs
    ):
        super(IntervalSummary, self).__init__(**kwargs)
        self.start_minute = start_minute
        self.end_minute = end_minute
        self.total_minutes = total_minutes
        self.short_description = short_description
        self.brief_description = brief_description
        self.long_phrase = long_phrase
        self.icon_code = icon_code


class LatestStatus(msrest.serialization.Model):
    """The latest status on the alert in the current area.

    :param localized: The latest status keyword for the alert, in the specified language. By
     default, returned in English (en-US).
    :type localized: str
    :param english: Latest status keyword for the alert, in English (en-US). Possible values
     include: "New", "Extend", "Cancel", "Correct", "Expire", "Upgrade", "Continue", "Update".
    :type english: str or ~azure.maps.weather.models.LatestStatusKeyword
    """

    _attribute_map = {
        'localized': {'key': 'localized', 'type': 'str'},
        'english': {'key': 'english', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        localized: Optional[str] = None,
        english: Optional[Union[str, "LatestStatusKeyword"]] = None,
        **kwargs
    ):
        super(LatestStatus, self).__init__(**kwargs)
        self.localized = localized
        self.english = english


class LocalSource(msrest.serialization.Model):
    """Local weather data provider information.

    :param id: Numeric identifier, unique to the local data provider.
    :type id: int
    :param name: Name of the local data provider. Name is displayed in the language specified by
     language code in URL, if available. Otherwise, Name is displayed in English or the language in
     which the name was provided.
    :type name: str
    :param weather_code: Weather code provided by the local data provider. This weather code allows
     the forecast to be matched to icons provided by the local data provider instead of Azure Maps
     icons.
    :type weather_code: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'weather_code': {'key': 'weatherCode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[int] = None,
        name: Optional[str] = None,
        weather_code: Optional[str] = None,
        **kwargs
    ):
        super(LocalSource, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.weather_code = weather_code


class MinuteForecastResponse(msrest.serialization.Model):
    """MinuteForecastResponse.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar summary: Phrase summaries for the entire forecast period.
    :vartype summary: ~azure.maps.weather.models.MinuteForecastSummary
    :ivar interval_summaries: Summary information for each interval in the forecast. The Summaries
     breaks down each potential interval where precipitation starts and stops.
    :vartype interval_summaries: list[~azure.maps.weather.models.IntervalSummary]
    :ivar intervals: Forecast data for each interval in the forecast.
    :vartype intervals: list[~azure.maps.weather.models.ForecastInterval]
    """

    _validation = {
        'summary': {'readonly': True},
        'interval_summaries': {'readonly': True},
        'intervals': {'readonly': True},
    }

    _attribute_map = {
        'summary': {'key': 'summary', 'type': 'MinuteForecastSummary'},
        'interval_summaries': {'key': 'intervalSummaries', 'type': '[IntervalSummary]'},
        'intervals': {'key': 'intervals', 'type': '[ForecastInterval]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MinuteForecastResponse, self).__init__(**kwargs)
        self.summary = None
        self.interval_summaries = None
        self.intervals = None


class MinuteForecastSummary(msrest.serialization.Model):
    """Phrase summaries for the entire forecast period.

    :param brief_phrase60: Summary phrase for the next 60 minutes. Phrase length is approximately
     60 characters.
    :type brief_phrase60: str
    :param short_description: Short summary phrase for the next 120 minutes. Phrase length is
     approximately 25 characters.
    :type short_description: str
    :param brief_description: Summary phrase for the next 120 minutes. Phrase length is
     approximately 60 characters.
    :type brief_description: str
    :param long_phrase: Long summary phrase for the next 120 minutes. Phrase length is 60+
     characters.
    :type long_phrase: str
    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    """

    _attribute_map = {
        'brief_phrase60': {'key': 'briefPhrase60', 'type': 'str'},
        'short_description': {'key': 'shortPhrase', 'type': 'str'},
        'brief_description': {'key': 'briefPhrase', 'type': 'str'},
        'long_phrase': {'key': 'longPhrase', 'type': 'str'},
        'icon_code': {'key': 'iconCode', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        brief_phrase60: Optional[str] = None,
        short_description: Optional[str] = None,
        brief_description: Optional[str] = None,
        long_phrase: Optional[str] = None,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        **kwargs
    ):
        super(MinuteForecastSummary, self).__init__(**kwargs)
        self.brief_phrase60 = brief_phrase60
        self.short_description = short_description
        self.brief_description = brief_description
        self.long_phrase = long_phrase
        self.icon_code = icon_code


class PastHoursTemperature(msrest.serialization.Model):
    """Summary of temperature fluctuations over the number of past hours.

    :param minimum: minimum.
    :type minimum: ~azure.maps.weather.models.WeatherValue
    :param maximum: maximum.
    :type maximum: ~azure.maps.weather.models.WeatherValue
    """

    _attribute_map = {
        'minimum': {'key': 'minimum', 'type': 'WeatherValue'},
        'maximum': {'key': 'maximum', 'type': 'WeatherValue'},
    }

    def __init__(
        self,
        *,
        minimum: Optional["WeatherValue"] = None,
        maximum: Optional["WeatherValue"] = None,
        **kwargs
    ):
        super(PastHoursTemperature, self).__init__(**kwargs)
        self.minimum = minimum
        self.maximum = maximum


class PrecipitationSummary(msrest.serialization.Model):
    """PrecipitationSummary.

    :param past_hour: The amount of precipitation (liquid equivalent) that has fallen in the past
     hour.
    :type past_hour: ~azure.maps.weather.models.WeatherValue
    :param past_three_hours: The amount of precipitation (liquid equivalent) that has fallen in the
     past three hours.
    :type past_three_hours: ~azure.maps.weather.models.WeatherValue
    :param past_six_hours: The amount of precipitation (liquid equivalent) that has fallen in the
     past six hours. Contains Metric and Imperial Values.
    :type past_six_hours: ~azure.maps.weather.models.WeatherValue
    :param past_nine_hours: The amount of precipitation (liquid equivalent) that has fallen in the
     past nine hours.
    :type past_nine_hours: ~azure.maps.weather.models.WeatherValue
    :param past_twelve_hours: The amount of precipitation (liquid equivalent) that has fallen in
     the past 12 hours.
    :type past_twelve_hours: ~azure.maps.weather.models.WeatherValue
    :param past_eighteen_hours: The amount of precipitation (liquid equivalent) that has fallen in
     the past 18 hours.
    :type past_eighteen_hours: ~azure.maps.weather.models.WeatherValue
    :param past_twenty_four_hours: The amount of precipitation (liquid equivalent) that has fallen
     in the past 24 hours.
    :type past_twenty_four_hours: ~azure.maps.weather.models.WeatherValue
    """

    _attribute_map = {
        'past_hour': {'key': 'pastHour', 'type': 'WeatherValue'},
        'past_three_hours': {'key': 'pastThreeHours', 'type': 'WeatherValue'},
        'past_six_hours': {'key': 'pastSixHours', 'type': 'WeatherValue'},
        'past_nine_hours': {'key': 'pastNineHours', 'type': 'WeatherValue'},
        'past_twelve_hours': {'key': 'pastTwelveHours', 'type': 'WeatherValue'},
        'past_eighteen_hours': {'key': 'pastEighteenHours', 'type': 'WeatherValue'},
        'past_twenty_four_hours': {'key': 'pastTwentyFourHours', 'type': 'WeatherValue'},
    }

    def __init__(
        self,
        *,
        past_hour: Optional["WeatherValue"] = None,
        past_three_hours: Optional["WeatherValue"] = None,
        past_six_hours: Optional["WeatherValue"] = None,
        past_nine_hours: Optional["WeatherValue"] = None,
        past_twelve_hours: Optional["WeatherValue"] = None,
        past_eighteen_hours: Optional["WeatherValue"] = None,
        past_twenty_four_hours: Optional["WeatherValue"] = None,
        **kwargs
    ):
        super(PrecipitationSummary, self).__init__(**kwargs)
        self.past_hour = past_hour
        self.past_three_hours = past_three_hours
        self.past_six_hours = past_six_hours
        self.past_nine_hours = past_nine_hours
        self.past_twelve_hours = past_twelve_hours
        self.past_eighteen_hours = past_eighteen_hours
        self.past_twenty_four_hours = past_twenty_four_hours


class PressureTendency(msrest.serialization.Model):
    """PressureTendency.

    :param description: Description of the pressure tendency in specified language.
    :type description: str
    :param code: Pressure tendency code regardless of language. One of F=Falling, S=Steady,
     R=Rising.
    :type code: str
    """

    _attribute_map = {
        'description': {'key': 'localizedDescription', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        code: Optional[str] = None,
        **kwargs
    ):
        super(PressureTendency, self).__init__(**kwargs)
        self.description = description
        self.code = code


class QuarterDayForecast(msrest.serialization.Model):
    """QuarterDayForecast.

    :param date_time: Date of the forecast as example, 2019-10-27T00:00:00.
    :type date_time: ~datetime.datetime
    :param effective_date: Date and time of the beginning of the forecast quarter displayed in ISO
     8601 format, for example, 2019-10-27T19:39:57-08:00.
    :type effective_date: ~datetime.datetime
    :param quarter: Quarter of the day. Possible values include: 0, 1, 2, 3.
    :type quarter: str or ~azure.maps.weather.models.DayQuarter
    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    :param icon_phrase: Phrase description of the icon. Displayed in specified language. For
     example, 'Sunny'.
    :type icon_phrase: str
    :param phrase: Short summary phrase summary for quarter.
    :type phrase: str
    :param temperature: Temperature values for the quarter.
    :type temperature: ~azure.maps.weather.models.WeatherValueRange
    :param real_feel_temperature: RealFeel™ Temperature values for the quarter.
    :type real_feel_temperature: ~azure.maps.weather.models.WeatherValueRange
    :param dew_point: The dewpoint temperature in specified unit. The dewpoint temperature is the
     temperature that the air must be cooled to in order to reach saturation.
    :type dew_point: ~azure.maps.weather.models.WeatherValue
    :param relative_humidity: Relative humidity is the amount of water vapor present in air
     expressed as a percentage of the amount needed for saturation at the same temperature.
    :type relative_humidity: int
    :param wind: Wind details being returned including speed and direction.
    :type wind: ~azure.maps.weather.models.WindDetails
    :param wind_gust: Wind gust. Wind gust is a sudden, brief increase in speed of the wind.
    :type wind_gust: ~azure.maps.weather.models.WindDetails
    :param visibility: Visibility in specified unit. A measure of the distance at which an object
     or light can be clearly discerned.
    :type visibility: ~azure.maps.weather.models.WeatherValue
    :param cloud_cover: Percent representing cloud cover.
    :type cloud_cover: int
    :param has_precipitation: Indicates the presence or absence of precipitation. True indicates
     the presence of precipitation, false indicates the absence of precipitation.
    :type has_precipitation: bool
    :param precipitation_type: Specifies the type of precipitation ("Rain" "Snow" "Ice" or "Mix").
     If dbz is zero, precipitationType is not present in the response. Possible values include:
     "Rain", "Snow", "Ice", "Mix".
    :type precipitation_type: str or ~azure.maps.weather.models.PrecipitationType
    :param precipitation_intensity: Description of the intensity.
    :type precipitation_intensity: str
    :param precipitation_probability: Percent representing the probability of precipitation. For
     example, '20'.
    :type precipitation_probability: int
    :param thunderstorm_probability: Percent representing the probability of a thunderstorm. For
     example, '10'.
    :type thunderstorm_probability: int
    :param total_liquid: Total liquid equivalent of precipitation during the forecast period.
    :type total_liquid: ~azure.maps.weather.models.WeatherValue
    :param rain: Rain.
    :type rain: ~azure.maps.weather.models.WeatherValue
    :param snow: Snow.
    :type snow: ~azure.maps.weather.models.WeatherValue
    :param ice: Ice.
    :type ice: ~azure.maps.weather.models.WeatherValue
    """

    _attribute_map = {
        'date_time': {'key': 'date', 'type': 'iso-8601'},
        'effective_date': {'key': 'effectiveDate', 'type': 'iso-8601'},
        'quarter': {'key': 'quarter', 'type': 'int'},
        'icon_code': {'key': 'iconCode', 'type': 'int'},
        'icon_phrase': {'key': 'iconPhrase', 'type': 'str'},
        'phrase': {'key': 'phrase', 'type': 'str'},
        'temperature': {'key': 'temperature', 'type': 'WeatherValueRange'},
        'real_feel_temperature': {'key': 'realFeelTemperature', 'type': 'WeatherValueRange'},
        'dew_point': {'key': 'dewPoint', 'type': 'WeatherValue'},
        'relative_humidity': {'key': 'relativeHumidity', 'type': 'int'},
        'wind': {'key': 'wind', 'type': 'WindDetails'},
        'wind_gust': {'key': 'windGust', 'type': 'WindDetails'},
        'visibility': {'key': 'visibility', 'type': 'WeatherValue'},
        'cloud_cover': {'key': 'cloudCover', 'type': 'int'},
        'has_precipitation': {'key': 'hasPrecipitation', 'type': 'bool'},
        'precipitation_type': {'key': 'precipitationType', 'type': 'str'},
        'precipitation_intensity': {'key': 'precipitationIntensity', 'type': 'str'},
        'precipitation_probability': {'key': 'precipitationProbability', 'type': 'int'},
        'thunderstorm_probability': {'key': 'thunderstormProbability', 'type': 'int'},
        'total_liquid': {'key': 'totalLiquid', 'type': 'WeatherValue'},
        'rain': {'key': 'rain', 'type': 'WeatherValue'},
        'snow': {'key': 'snow', 'type': 'WeatherValue'},
        'ice': {'key': 'ice', 'type': 'WeatherValue'},
    }

    def __init__(
        self,
        *,
        date_time: Optional[datetime.datetime] = None,
        effective_date: Optional[datetime.datetime] = None,
        quarter: Optional[Union[int, "DayQuarter"]] = None,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        icon_phrase: Optional[str] = None,
        phrase: Optional[str] = None,
        temperature: Optional["WeatherValueRange"] = None,
        real_feel_temperature: Optional["WeatherValueRange"] = None,
        dew_point: Optional["WeatherValue"] = None,
        relative_humidity: Optional[int] = None,
        wind: Optional["WindDetails"] = None,
        wind_gust: Optional["WindDetails"] = None,
        visibility: Optional["WeatherValue"] = None,
        cloud_cover: Optional[int] = None,
        has_precipitation: Optional[bool] = None,
        precipitation_type: Optional[Union[str, "PrecipitationType"]] = None,
        precipitation_intensity: Optional[str] = None,
        precipitation_probability: Optional[int] = None,
        thunderstorm_probability: Optional[int] = None,
        total_liquid: Optional["WeatherValue"] = None,
        rain: Optional["WeatherValue"] = None,
        snow: Optional["WeatherValue"] = None,
        ice: Optional["WeatherValue"] = None,
        **kwargs
    ):
        super(QuarterDayForecast, self).__init__(**kwargs)
        self.date_time = date_time
        self.effective_date = effective_date
        self.quarter = quarter
        self.icon_code = icon_code
        self.icon_phrase = icon_phrase
        self.phrase = phrase
        self.temperature = temperature
        self.real_feel_temperature = real_feel_temperature
        self.dew_point = dew_point
        self.relative_humidity = relative_humidity
        self.wind = wind
        self.wind_gust = wind_gust
        self.visibility = visibility
        self.cloud_cover = cloud_cover
        self.has_precipitation = has_precipitation
        self.precipitation_type = precipitation_type
        self.precipitation_intensity = precipitation_intensity
        self.precipitation_probability = precipitation_probability
        self.thunderstorm_probability = thunderstorm_probability
        self.total_liquid = total_liquid
        self.rain = rain
        self.snow = snow
        self.ice = ice


class QuarterDayForecastResponse(msrest.serialization.Model):
    """QuarterDayForecastResponse.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar forecasts: Forecast data for each quarter in the response.
    :vartype forecasts: list[~azure.maps.weather.models.QuarterDayForecast]
    """

    _validation = {
        'forecasts': {'readonly': True},
    }

    _attribute_map = {
        'forecasts': {'key': 'forecasts', 'type': '[QuarterDayForecast]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(QuarterDayForecastResponse, self).__init__(**kwargs)
        self.forecasts = None


class SevereWeatherAlert(msrest.serialization.Model):
    """Information about a severe weather alert.

    :param country_code: 2-character ISO 3166-1 Alpha-2 country code, for example, "US".
    :type country_code: str
    :param alert_id: A unique numerical identifier for a weather alert.
    :type alert_id: int
    :param description: Description of the alert.
    :type description: ~azure.maps.weather.models.SevereWeatherAlertDescription
    :param category: Category of the alert.
    :type category: str
    :param priority: Number signifying the importance or ranking order of the given alert within
     the country/region it has originated. A lower number signifies a higher priority. For example,
     1 is the highest priority. The number varies by country/region and can change over time as each
     country/region evolves their alert systems.
    :type priority: int
    :param classification: Classification of the alert. This field is not available for all
     countries and therefore not always returned.
    :type classification: str
    :param level: Severity level of the alert. This field is not available for all countries and
     therefore not always returned.
    :type level: str
    :param source: The provider of the alert information. By default the source is returned in
     English (en-US). The alerts are from official Government Meteorological Agencies and leading
     global weather alert providers.
    :type source: str
    :param source_id: A numerical identifier associated with the source provider name of the alert
     data.
    :type source_id: int
    :param disclaimer: A disclaimer regarding the source of the alert information. This field is
     not always available. For example, disclaimer may include details about the delays or potential
     issues related to the alarm.
    :type disclaimer: str
    :param alert_details: Information about the alert specific to the affected area(s).
    :type alert_details: list[~azure.maps.weather.models.AlertDetails]
    """

    _attribute_map = {
        'country_code': {'key': 'countryCode', 'type': 'str'},
        'alert_id': {'key': 'alertId', 'type': 'int'},
        'description': {'key': 'description', 'type': 'SevereWeatherAlertDescription'},
        'category': {'key': 'category', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'classification': {'key': 'class', 'type': 'str'},
        'level': {'key': 'level', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'source_id': {'key': 'sourceId', 'type': 'int'},
        'disclaimer': {'key': 'disclaimer', 'type': 'str'},
        'alert_details': {'key': 'alertAreas', 'type': '[AlertDetails]'},
    }

    def __init__(
        self,
        *,
        country_code: Optional[str] = None,
        alert_id: Optional[int] = None,
        description: Optional["SevereWeatherAlertDescription"] = None,
        category: Optional[str] = None,
        priority: Optional[int] = None,
        classification: Optional[str] = None,
        level: Optional[str] = None,
        source: Optional[str] = None,
        source_id: Optional[int] = None,
        disclaimer: Optional[str] = None,
        alert_details: Optional[List["AlertDetails"]] = None,
        **kwargs
    ):
        super(SevereWeatherAlert, self).__init__(**kwargs)
        self.country_code = country_code
        self.alert_id = alert_id
        self.description = description
        self.category = category
        self.priority = priority
        self.classification = classification
        self.level = level
        self.source = source
        self.source_id = source_id
        self.disclaimer = disclaimer
        self.alert_details = alert_details


class SevereWeatherAlertDescription(msrest.serialization.Model):
    """Description of a severe weather alert.

    :param description: Description of the alert in the specified language. By default English (en-
     US) is returned if the language parameter is not specified in the request.
    :type description: str
    :param status: Description of the alert in English (en-US).
    :type status: str
    """

    _attribute_map = {
        'description': {'key': 'localized', 'type': 'str'},
        'status': {'key': 'english', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs
    ):
        super(SevereWeatherAlertDescription, self).__init__(**kwargs)
        self.description = description
        self.status = status


class SevereWeatherAlertsResponse(msrest.serialization.Model):
    """This object is returned from a successful Get Severe Weather Alerts call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar results: A list of all severe weather alerts for the queried location.
    :vartype results: list[~azure.maps.weather.models.SevereWeatherAlert]
    """

    _validation = {
        'results': {'readonly': True},
    }

    _attribute_map = {
        'results': {'key': 'results', 'type': '[SevereWeatherAlert]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SevereWeatherAlertsResponse, self).__init__(**kwargs)
        self.results = None


class SunGlare(msrest.serialization.Model):
    """A rating that indicates how blinding the sun is for the driver.

    :param calculated_vehicle_heading: If the vehicle heading value is not provided for a waypoint,
     then the service will calculate a heading based upon the location of neighboring waypoints if
     provided.
    :type calculated_vehicle_heading: int
    :param glare_index: An index from 0 to 100 indicating sun glare intensity for a driver. A value
     of 50 and above can be considered a hazard for some drivers and a value of 100 signifies the
     driver is driving straight into the sun and atmospheric conditions are clear allowing for the
     full intensity of the sun to blind the driver.
    :type glare_index: int
    """

    _attribute_map = {
        'calculated_vehicle_heading': {'key': 'calculatedVehicleHeading', 'type': 'int'},
        'glare_index': {'key': 'glareIndex', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        calculated_vehicle_heading: Optional[int] = None,
        glare_index: Optional[int] = None,
        **kwargs
    ):
        super(SunGlare, self).__init__(**kwargs)
        self.calculated_vehicle_heading = calculated_vehicle_heading
        self.glare_index = glare_index


class TemperatureSummary(msrest.serialization.Model):
    """TemperatureSummary.

    :param past_six_hours: Summary of temperature fluctuations over the past 6 hours.
    :type past_six_hours: ~azure.maps.weather.models.PastHoursTemperature
    :param past_twelve_hours: Summary of temperature fluctuations over the past 12 hours.
    :type past_twelve_hours: ~azure.maps.weather.models.PastHoursTemperature
    :param past_twenty_four_hours: Summary of temperature fluctuations over the past 24 hours.
    :type past_twenty_four_hours: ~azure.maps.weather.models.PastHoursTemperature
    """

    _attribute_map = {
        'past_six_hours': {'key': 'pastSixHours', 'type': 'PastHoursTemperature'},
        'past_twelve_hours': {'key': 'pastTwelveHours', 'type': 'PastHoursTemperature'},
        'past_twenty_four_hours': {'key': 'pastTwentyFourHours', 'type': 'PastHoursTemperature'},
    }

    def __init__(
        self,
        *,
        past_six_hours: Optional["PastHoursTemperature"] = None,
        past_twelve_hours: Optional["PastHoursTemperature"] = None,
        past_twenty_four_hours: Optional["PastHoursTemperature"] = None,
        **kwargs
    ):
        super(TemperatureSummary, self).__init__(**kwargs)
        self.past_six_hours = past_six_hours
        self.past_twelve_hours = past_twelve_hours
        self.past_twenty_four_hours = past_twenty_four_hours


class WaypointForecast(msrest.serialization.Model):
    """WaypointForecast.

    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    :param short_description: A displayable short phrase describing the forecasted conditions and
     precipitation intensity/type.
    :type short_description: str
    :param is_daytime: Indicates the time of the day. True indicates 'day',', false indicates
     'night.
    :type is_daytime: bool
    :param cloud_cover: Percent representing cloud cover.
    :type cloud_cover: int
    :param temperature: Specific value of a given unit related to weather.
    :type temperature: ~azure.maps.weather.models.WeatherValue
    :param wind: Wind details being returned including speed and direction.
    :type wind: ~azure.maps.weather.models.WindDetails
    :param wind_gust: Wind details being returned including speed and direction.
    :type wind_gust: ~azure.maps.weather.models.WindDetails
    :param precipitation: Precipitation forecast of the weather along the route.
    :type precipitation: ~azure.maps.weather.models.WeatherAlongRoutePrecipitation
    :param lightning_count: Estimation of thunderstorm intensity on an open scale. A value of 0
     means there is no thunderstorm; values of 1 and higher mean there is a thunderstorm in
     increasing intensity.
    :type lightning_count: int
    :param sun_glare: A rating that indicates how blinding the sun is for the driver.
    :type sun_glare: ~azure.maps.weather.models.SunGlare
    :param hazards: Description of the weather hazard affecting the trip.
    :type hazards: ~azure.maps.weather.models.WeatherHazards
    :param notifications: List of weather hazard notifications.
    :type notifications: list[~azure.maps.weather.models.WeatherNotification]
    """

    _attribute_map = {
        'icon_code': {'key': 'iconCode', 'type': 'int'},
        'short_description': {'key': 'shortPhrase', 'type': 'str'},
        'is_daytime': {'key': 'isDayTime', 'type': 'bool'},
        'cloud_cover': {'key': 'cloudCover', 'type': 'int'},
        'temperature': {'key': 'temperature', 'type': 'WeatherValue'},
        'wind': {'key': 'wind', 'type': 'WindDetails'},
        'wind_gust': {'key': 'windGust', 'type': 'WindDetails'},
        'precipitation': {'key': 'precipitation', 'type': 'WeatherAlongRoutePrecipitation'},
        'lightning_count': {'key': 'lightningCount', 'type': 'int'},
        'sun_glare': {'key': 'sunGlare', 'type': 'SunGlare'},
        'hazards': {'key': 'hazards', 'type': 'WeatherHazards'},
        'notifications': {'key': 'notifications', 'type': '[WeatherNotification]'},
    }

    def __init__(
        self,
        *,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        short_description: Optional[str] = None,
        is_daytime: Optional[bool] = None,
        cloud_cover: Optional[int] = None,
        temperature: Optional["WeatherValue"] = None,
        wind: Optional["WindDetails"] = None,
        wind_gust: Optional["WindDetails"] = None,
        precipitation: Optional["WeatherAlongRoutePrecipitation"] = None,
        lightning_count: Optional[int] = None,
        sun_glare: Optional["SunGlare"] = None,
        hazards: Optional["WeatherHazards"] = None,
        notifications: Optional[List["WeatherNotification"]] = None,
        **kwargs
    ):
        super(WaypointForecast, self).__init__(**kwargs)
        self.icon_code = icon_code
        self.short_description = short_description
        self.is_daytime = is_daytime
        self.cloud_cover = cloud_cover
        self.temperature = temperature
        self.wind = wind
        self.wind_gust = wind_gust
        self.precipitation = precipitation
        self.lightning_count = lightning_count
        self.sun_glare = sun_glare
        self.hazards = hazards
        self.notifications = notifications


class WeatherAlongRoutePrecipitation(msrest.serialization.Model):
    """Precipitation forecast of the weather along the route.

    :param dbz: The forecasted precipitation intensity in dBZ (decibels relative to Z) from 0.0 to
     100.0.
    :type dbz: float
    :param type: Precipitation type. If precipitation should occur, the type that it will be:
     "RAIN," "HAIL," "SNOW," "ICE," or "MIX.".
    :type type: str
    """

    _attribute_map = {
        'dbz': {'key': 'dbz', 'type': 'float'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dbz: Optional[float] = None,
        type: Optional[str] = None,
        **kwargs
    ):
        super(WeatherAlongRoutePrecipitation, self).__init__(**kwargs)
        self.dbz = dbz
        self.type = type


class WeatherAlongRouteResponse(msrest.serialization.Model):
    """This object is returned from a successful Weather Along Route.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar summary: Short summary of the weather along the route.
    :vartype summary: ~azure.maps.weather.models.WeatherAlongRouteSummary
    :ivar waypoints: Data for each waypoint returned in the same order as specified in the request.
    :vartype waypoints: list[~azure.maps.weather.models.WaypointForecast]
    """

    _validation = {
        'summary': {'readonly': True},
        'waypoints': {'readonly': True},
    }

    _attribute_map = {
        'summary': {'key': 'summary', 'type': 'WeatherAlongRouteSummary'},
        'waypoints': {'key': 'waypoints', 'type': '[WaypointForecast]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(WeatherAlongRouteResponse, self).__init__(**kwargs)
        self.summary = None
        self.waypoints = None


class WeatherAlongRouteSummary(msrest.serialization.Model):
    """Short summary of the weather along the route.

    :param icon_code: Numeric value representing an image that displays the ``iconPhrase``. Please
     refer to `Weather Service Concepts <https://aka.ms/AzureMapsWeatherConcepts>`_ for details.
     Possible values include: 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
     22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 39, 41.
    :type icon_code: str or ~azure.maps.weather.models.IconCode
    :param hazards: Description of the weather hazard affecting the trip.
    :type hazards: ~azure.maps.weather.models.WeatherHazards
    """

    _attribute_map = {
        'icon_code': {'key': 'iconCode', 'type': 'int'},
        'hazards': {'key': 'hazards', 'type': 'WeatherHazards'},
    }

    def __init__(
        self,
        *,
        icon_code: Optional[Union[int, "IconCode"]] = None,
        hazards: Optional["WeatherHazards"] = None,
        **kwargs
    ):
        super(WeatherAlongRouteSummary, self).__init__(**kwargs)
        self.icon_code = icon_code
        self.hazards = hazards


class WeatherHazards(msrest.serialization.Model):
    """Description of the weather hazard affecting the trip.

    :param max_hazard_index: A severity/hazard index.
    
    
     * ``0`` - No hazard.
     * ``1`` - Be informed, be aware.
     * ``2`` - Pay attention, be prepared.
     * ``3`` - Take action.
     * ``4`` - Life threatening, emergency. Possible values include: 0, 1, 2, 3, 4.
    :type max_hazard_index: str or ~azure.maps.weather.models.HazardIndex
    :param details: Details of the weather hazards affecting the trip.
    :type details: list[~azure.maps.weather.models.HazardDetail]
    """

    _attribute_map = {
        'max_hazard_index': {'key': 'maxHazardIndex', 'type': 'int'},
        'details': {'key': 'hazardDetails', 'type': '[HazardDetail]'},
    }

    def __init__(
        self,
        *,
        max_hazard_index: Optional[Union[int, "HazardIndex"]] = None,
        details: Optional[List["HazardDetail"]] = None,
        **kwargs
    ):
        super(WeatherHazards, self).__init__(**kwargs)
        self.max_hazard_index = max_hazard_index
        self.details = details


class WeatherNotification(msrest.serialization.Model):
    """WeatherNotification.

    :param type: A type of notification generated to warn drivers of the onset of a hazard, or
     increase in intensity of a hazard.
    :type type: str
    :param hazard_index: A severity/hazard index.
    
    
     * ``0`` - No hazard.
     * ``1`` - Be informed, be aware.
     * ``2`` - Pay attention, be prepared.
     * ``3`` - Take action.
     * ``4`` - Life threatening, emergency. Possible values include: 0, 1, 2, 3, 4.
    :type hazard_index: str or ~azure.maps.weather.models.HazardIndex
    :param hazard_code: A unique identifier (non-displayable) for each type of hazard: LightRain,
     ModerateRain, HeavyRain, LightMix, ModerateMix, HeavyMix, LightSnow, ModerateSnow, HeavySnow,
     LightIce, ModerateIce, HeavyIce, Hail, LargeHail, SunGlare, SunGlareHigh, Lightning,
     SevereLightning, WindModerate, WindHigh, WindExtreme, FloodWarning, FlashFloodWarning,
     TornadoWarning, TsunamiWarning, SevereThunderstormWarning.
    :type hazard_code: str
    :param short_description: A displayable short phrase describing the forecasted conditions and
     precipitation intensity/type.
    :type short_description: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'hazard_index': {'key': 'hazardIndex', 'type': 'int'},
        'hazard_code': {'key': 'hazardCode', 'type': 'str'},
        'short_description': {'key': 'shortPhrase', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        hazard_index: Optional[Union[int, "HazardIndex"]] = None,
        hazard_code: Optional[str] = None,
        short_description: Optional[str] = None,
        **kwargs
    ):
        super(WeatherNotification, self).__init__(**kwargs)
        self.type = type
        self.hazard_index = hazard_index
        self.hazard_code = hazard_code
        self.short_description = short_description


class WeatherValue(msrest.serialization.Model):
    """Specific value of a given unit related to weather.

    :param value: Rounded value.
    :type value: float
    :param unit_label: Type of unit for the returned value.
    :type unit_label: str
    :param unit_type: Numeric ID value associated with the type of unit being displayed. Can be
     used for unit translation. Please refer to `Weather Service Concepts
     <https://aka.ms/AzureMapsWeatherConcepts>`_ for details. Possible values include: 0, 1, 2, 3,
     4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 31.
    :type unit_type: str or ~azure.maps.weather.models.UnitType
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'unit_label': {'key': 'unit', 'type': 'str'},
        'unit_type': {'key': 'unitType', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        value: Optional[float] = None,
        unit_label: Optional[str] = None,
        unit_type: Optional[Union[int, "UnitType"]] = None,
        **kwargs
    ):
        super(WeatherValue, self).__init__(**kwargs)
        self.value = value
        self.unit_label = unit_label
        self.unit_type = unit_type


class WeatherValueRange(msrest.serialization.Model):
    """Returned temperature values.

    :param minimum: Minimum temperature for the time period.
    :type minimum: ~azure.maps.weather.models.WeatherValue
    :param maximum: Maximum temperature for the time period.
    :type maximum: ~azure.maps.weather.models.WeatherValue
    """

    _attribute_map = {
        'minimum': {'key': 'minimum', 'type': 'WeatherValue'},
        'maximum': {'key': 'maximum', 'type': 'WeatherValue'},
    }

    def __init__(
        self,
        *,
        minimum: Optional["WeatherValue"] = None,
        maximum: Optional["WeatherValue"] = None,
        **kwargs
    ):
        super(WeatherValueRange, self).__init__(**kwargs)
        self.minimum = minimum
        self.maximum = maximum


class WindDetails(msrest.serialization.Model):
    """Wind details being returned including speed and direction.

    :param direction: Wind direction.
    :type direction: ~azure.maps.weather.models.WindDirection
    :param speed: Speed of the wind in specified unit.
    :type speed: ~azure.maps.weather.models.WindSpeed
    """

    _attribute_map = {
        'direction': {'key': 'direction', 'type': 'WindDirection'},
        'speed': {'key': 'speed', 'type': 'WindSpeed'},
    }

    def __init__(
        self,
        *,
        direction: Optional["WindDirection"] = None,
        speed: Optional["WindSpeed"] = None,
        **kwargs
    ):
        super(WindDetails, self).__init__(**kwargs)
        self.direction = direction
        self.speed = speed


class WindDirection(msrest.serialization.Model):
    """Wind direction.

    :param degrees: Wind direction in Azimuth degrees,  starting at true North and continuing in
     clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270
     degrees. Possible values 0-359.
    :type degrees: int
    :param description: Direction abbreviation in the specified language.
    :type description: str
    """

    _attribute_map = {
        'degrees': {'key': 'degrees', 'type': 'int'},
        'description': {'key': 'localizedDescription', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        degrees: Optional[int] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(WindDirection, self).__init__(**kwargs)
        self.degrees = degrees
        self.description = description


class WindSpeed(msrest.serialization.Model):
    """Speed of wind in specified unit.

    :param value: Rounded value of the speed.
    :type value: float
    :param unit: Type of unit for the speed value.
    :type unit: str
    :param unit_type: Numeric ID value associated with the type of unit being displayed. Can be
     used for unit translation. Please refer to `Weather Service Concepts
     <https://aka.ms/AzureMapsWeatherConcepts>`_ for details. Possible values include: 0, 1, 2, 3,
     4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 31.
    :type unit_type: str or ~azure.maps.weather.models.UnitType
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'float'},
        'unit': {'key': 'unit', 'type': 'str'},
        'unit_type': {'key': 'unitType', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        value: Optional[float] = None,
        unit: Optional[str] = None,
        unit_type: Optional[Union[int, "UnitType"]] = None,
        **kwargs
    ):
        super(WindSpeed, self).__init__(**kwargs)
        self.value = value
        self.unit = unit
        self.unit_type = unit_type
