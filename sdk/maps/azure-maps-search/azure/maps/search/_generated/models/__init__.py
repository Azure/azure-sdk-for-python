# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models import Address
from ._models import AddressAdminDistrictsItem
from ._models import AddressCountryRegion
from ._models import Boundary
from ._models import BoundaryProperties
from ._models import ErrorAdditionalInfo
from ._models import ErrorDetail
from ._models import ErrorResponse
from ._models import FeaturesItem
from ._models import FeaturesItemProperties
from ._models import GeoJsonFeature
from ._models import GeoJsonFeatureCollection
from ._models import GeoJsonFeatureCollectionData
from ._models import GeoJsonFeatureData
from ._models import GeoJsonGeometry
from ._models import GeoJsonGeometryCollection
from ._models import GeoJsonGeometryCollectionData
from ._models import GeoJsonLineString
from ._models import GeoJsonLineStringData
from ._models import GeoJsonMultiLineString
from ._models import GeoJsonMultiLineStringData
from ._models import GeoJsonMultiPoint
from ._models import GeoJsonMultiPointData
from ._models import GeoJsonMultiPolygon
from ._models import GeoJsonMultiPolygonData
from ._models import GeoJsonObject
from ._models import GeoJsonPoint
from ._models import GeoJsonPointData
from ._models import GeoJsonPolygon
from ._models import GeoJsonPolygonData
from ._models import GeocodePointsItem
from ._models import GeocodingBatchRequestBody
from ._models import GeocodingBatchRequestItem
from ._models import GeocodingBatchResponse
from ._models import GeocodingBatchResponseItem
from ._models import GeocodingBatchResponseSummary
from ._models import GeocodingResponse
from ._models import GeometryCopyright
from ._models import Intersection
from ._models import ReverseGeocodingBatchRequestBody
from ._models import ReverseGeocodingBatchRequestItem

from ._enums import BoundaryResultType
from ._enums import CalculationMethod
from ._enums import Confidence
from ._enums import FeatureCollection
from ._enums import FeatureType
from ._enums import GeoJsonObjectType
from ._enums import MatchCodes
from ._enums import Resolution
from ._enums import ResultType
from ._enums import ReverseGeocodingResultType
from ._enums import UsageType
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "Address",
    "AddressAdminDistrictsItem",
    "AddressCountryRegion",
    "Boundary",
    "BoundaryProperties",
    "ErrorAdditionalInfo",
    "ErrorDetail",
    "ErrorResponse",
    "FeaturesItem",
    "FeaturesItemProperties",
    "GeoJsonFeature",
    "GeoJsonFeatureCollection",
    "GeoJsonFeatureCollectionData",
    "GeoJsonFeatureData",
    "GeoJsonGeometry",
    "GeoJsonGeometryCollection",
    "GeoJsonGeometryCollectionData",
    "GeoJsonLineString",
    "GeoJsonLineStringData",
    "GeoJsonMultiLineString",
    "GeoJsonMultiLineStringData",
    "GeoJsonMultiPoint",
    "GeoJsonMultiPointData",
    "GeoJsonMultiPolygon",
    "GeoJsonMultiPolygonData",
    "GeoJsonObject",
    "GeoJsonPoint",
    "GeoJsonPointData",
    "GeoJsonPolygon",
    "GeoJsonPolygonData",
    "GeocodePointsItem",
    "GeocodingBatchRequestBody",
    "GeocodingBatchRequestItem",
    "GeocodingBatchResponse",
    "GeocodingBatchResponseItem",
    "GeocodingBatchResponseSummary",
    "GeocodingResponse",
    "GeometryCopyright",
    "Intersection",
    "ReverseGeocodingBatchRequestBody",
    "ReverseGeocodingBatchRequestItem",
    "BoundaryResultType",
    "CalculationMethod",
    "Confidence",
    "FeatureCollection",
    "FeatureType",
    "GeoJsonObjectType",
    "MatchCodes",
    "Resolution",
    "ResultType",
    "ReverseGeocodingResultType",
    "UsageType",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
