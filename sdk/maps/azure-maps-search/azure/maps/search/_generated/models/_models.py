# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Address(_serialization.Model):
    """The address of the result.

    :ivar address_line: AddressLine that includes Street Name and Number.
    :vartype address_line: str
    :ivar locality: locality property.
    :vartype locality: str
    :ivar neighborhood: neighborhood property.
    :vartype neighborhood: str
    :ivar admin_districts: The subdivision name in the country or region for an address. This
     element is typically treated as the first order administrative subdivision, but in some cases
     it also contains the second, third, or fourth order subdivision in a country, dependency, or
     region.
    :vartype admin_districts: list[~azure.maps.search.models.AddressAdminDistrictsItem]
    :ivar postal_code: Postal Code property.
    :vartype postal_code: str
    :ivar country_region:
    :vartype country_region: ~azure.maps.search.models.AddressCountryRegion
    :ivar formatted_address: Formatted Address property.
    :vartype formatted_address: str
    :ivar intersection: The address of the result.
    :vartype intersection: ~azure.maps.search.models.Intersection
    """

    _attribute_map = {
        "address_line": {"key": "addressLine", "type": "str"},
        "locality": {"key": "locality", "type": "str"},
        "neighborhood": {"key": "neighborhood", "type": "str"},
        "admin_districts": {"key": "adminDistricts", "type": "[AddressAdminDistrictsItem]"},
        "postal_code": {"key": "postalCode", "type": "str"},
        "country_region": {"key": "countryRegion", "type": "AddressCountryRegion"},
        "formatted_address": {"key": "formattedAddress", "type": "str"},
        "intersection": {"key": "intersection", "type": "Intersection"},
    }

    def __init__(
        self,
        *,
        address_line: Optional[str] = None,
        locality: Optional[str] = None,
        neighborhood: Optional[str] = None,
        admin_districts: Optional[List["_models.AddressAdminDistrictsItem"]] = None,
        postal_code: Optional[str] = None,
        country_region: Optional["_models.AddressCountryRegion"] = None,
        formatted_address: Optional[str] = None,
        intersection: Optional["_models.Intersection"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword address_line: AddressLine that includes Street Name and Number.
        :paramtype address_line: str
        :keyword locality: locality property.
        :paramtype locality: str
        :keyword neighborhood: neighborhood property.
        :paramtype neighborhood: str
        :keyword admin_districts: The subdivision name in the country or region for an address. This
         element is typically treated as the first order administrative subdivision, but in some cases
         it also contains the second, third, or fourth order subdivision in a country, dependency, or
         region.
        :paramtype admin_districts: list[~azure.maps.search.models.AddressAdminDistrictsItem]
        :keyword postal_code: Postal Code property.
        :paramtype postal_code: str
        :keyword country_region:
        :paramtype country_region: ~azure.maps.search.models.AddressCountryRegion
        :keyword formatted_address: Formatted Address property.
        :paramtype formatted_address: str
        :keyword intersection: The address of the result.
        :paramtype intersection: ~azure.maps.search.models.Intersection
        """
        super().__init__(**kwargs)
        self.address_line = address_line
        self.locality = locality
        self.neighborhood = neighborhood
        self.admin_districts = admin_districts
        self.postal_code = postal_code
        self.country_region = country_region
        self.formatted_address = formatted_address
        self.intersection = intersection


class AddressAdminDistrictsItem(_serialization.Model):
    """AddressAdminDistrictsItem.

    :ivar name: The name for the corresponding adminDistrict field,
     For adminDistrict[0], this could be full name of state such as Washington,
     For adminDistrict[1], this could be the full name of the county.
    :vartype name: str
    :ivar short_name: The short name for the corresponding adminDistrict field,
     For adminDistrict[0], this could be short name of state such as WA,
     For adminDistrict[1], this could be the short name of the county.
    :vartype short_name: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "short_name": {"key": "shortName", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, short_name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: The name for the corresponding adminDistrict field,
         For adminDistrict[0], this could be full name of state such as Washington,
         For adminDistrict[1], this could be the full name of the county.
        :paramtype name: str
        :keyword short_name: The short name for the corresponding adminDistrict field,
         For adminDistrict[0], this could be short name of state such as WA,
         For adminDistrict[1], this could be the short name of the county.
        :paramtype short_name: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.short_name = short_name


class AddressCountryRegion(_serialization.Model):
    """AddressCountryRegion.

    :ivar iso: ISO of country/region.
    :vartype iso: str
    :ivar name: name of country/region.
    :vartype name: str
    """

    _attribute_map = {
        "iso": {"key": "ISO", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, iso: Optional[str] = None, name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword iso: ISO of country/region.
        :paramtype iso: str
        :keyword name: name of country/region.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.iso = iso
        self.name = name


class BoundaryProperties(_serialization.Model):
    """Properties of a Boundary object.

    :ivar name: The name associated with the geographical area.
    :vartype name: str
    :ivar copyright: The copyright string.
    :vartype copyright: str
    :ivar copyright_url: A URL that lists many of the data providers for Azure Maps and their
     related copyright information.
    :vartype copyright_url: str
    :ivar geometries_copyright: A collection of copyright information for each geometry of the
     Boundary object in the same order they appear.
    :vartype geometries_copyright: list[~azure.maps.search.models.GeometryCopyright]
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "copyright": {"key": "copyright", "type": "str"},
        "copyright_url": {"key": "copyrightURL", "type": "str"},
        "geometries_copyright": {"key": "geometriesCopyright", "type": "[GeometryCopyright]"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        copyright: Optional[str] = None,
        copyright_url: Optional[str] = None,
        geometries_copyright: Optional[List["_models.GeometryCopyright"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name associated with the geographical area.
        :paramtype name: str
        :keyword copyright: The copyright string.
        :paramtype copyright: str
        :keyword copyright_url: A URL that lists many of the data providers for Azure Maps and their
         related copyright information.
        :paramtype copyright_url: str
        :keyword geometries_copyright: A collection of copyright information for each geometry of the
         Boundary object in the same order they appear.
        :paramtype geometries_copyright: list[~azure.maps.search.models.GeometryCopyright]
        """
        super().__init__(**kwargs)
        self.name = name
        self.copyright = copyright
        self.copyright_url = copyright_url
        self.geometries_copyright = geometries_copyright


class GeoJsonFeatureData(_serialization.Model):
    """GeoJsonFeatureData.

    All required parameters must be populated in order to send to server.

    :ivar geometry: A valid ``GeoJSON`` geometry object. The type must be one of the seven valid
     GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon
     and GeometryCollection. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details. Required.
    :vartype geometry: ~azure.maps.search.models.GeoJsonGeometry
    :ivar properties: Properties can contain any additional metadata about the ``Feature``. Value
     can be any JSON object or a JSON null value.
    :vartype properties: JSON
    :ivar id: Identifier for the feature.
    :vartype id: str
    :ivar feature_type: The type of the feature. The value depends on the data model the current
     feature is part of. Some data models may have an empty value.
    :vartype feature_type: str
    """

    _validation = {
        "geometry": {"required": True},
    }

    _attribute_map = {
        "geometry": {"key": "geometry", "type": "GeoJsonGeometry"},
        "properties": {"key": "properties", "type": "object"},
        "id": {"key": "id", "type": "str"},
        "feature_type": {"key": "featureType", "type": "str"},
    }

    def __init__(
        self,
        *,
        geometry: "_models.GeoJsonGeometry",
        properties: Optional[JSON] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        feature_type: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword geometry: A valid ``GeoJSON`` geometry object. The type must be one of the seven valid
         GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon
         and GeometryCollection. Please refer to `RFC 7946
         <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details. Required.
        :paramtype geometry: ~azure.maps.search.models.GeoJsonGeometry
        :keyword properties: Properties can contain any additional metadata about the ``Feature``.
         Value can be any JSON object or a JSON null value.
        :paramtype properties: JSON
        :keyword id: Identifier for the feature.
        :paramtype id: str
        :keyword feature_type: The type of the feature. The value depends on the data model the current
         feature is part of. Some data models may have an empty value.
        :paramtype feature_type: str
        """
        super().__init__(**kwargs)
        self.geometry = geometry
        self.properties = properties
        self.id = id
        self.feature_type = feature_type


class GeoJsonObject(_serialization.Model):
    """A valid ``GeoJSON`` object. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3>`_ for details.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    GeoJsonFeature, GeoJsonFeatureCollection, GeoJsonGeometry

    All required parameters must be populated in order to send to server.

    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    _subtype_map = {
        "type": {
            "Feature": "GeoJsonFeature",
            "FeatureCollection": "GeoJsonFeatureCollection",
            "GeoJsonGeometry": "GeoJsonGeometry",
        }
    }

    def __init__(self, *, bbox: Optional[List[float]] = None, **kwargs: Any) -> None:
        """
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.bbox = bbox


class GeoJsonFeature(GeoJsonObject, GeoJsonFeatureData):
    """A valid ``GeoJSON Feature`` object type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.2>`_ for details.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Boundary

    All required parameters must be populated in order to send to server.

    :ivar geometry: A valid ``GeoJSON`` geometry object. The type must be one of the seven valid
     GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon
     and GeometryCollection. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details. Required.
    :vartype geometry: ~azure.maps.search.models.GeoJsonGeometry
    :ivar properties: Properties can contain any additional metadata about the ``Feature``. Value
     can be any JSON object or a JSON null value.
    :vartype properties: JSON
    :ivar id: Identifier for the feature.
    :vartype id: str
    :ivar feature_type: The type of the feature. The value depends on the data model the current
     feature is part of. Some data models may have an empty value.
    :vartype feature_type: str
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "geometry": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "geometry": {"key": "geometry", "type": "GeoJsonGeometry"},
        "properties": {"key": "properties", "type": "object"},
        "id": {"key": "id", "type": "str"},
        "feature_type": {"key": "featureType", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    _subtype_map = {"type": {"Boundary": "Boundary"}}

    def __init__(
        self,
        *,
        geometry: "_models.GeoJsonGeometry",
        properties: Optional[JSON] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        feature_type: Optional[str] = None,
        bbox: Optional[List[float]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword geometry: A valid ``GeoJSON`` geometry object. The type must be one of the seven valid
         GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon
         and GeometryCollection. Please refer to `RFC 7946
         <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details. Required.
        :paramtype geometry: ~azure.maps.search.models.GeoJsonGeometry
        :keyword properties: Properties can contain any additional metadata about the ``Feature``.
         Value can be any JSON object or a JSON null value.
        :paramtype properties: JSON
        :keyword id: Identifier for the feature.
        :paramtype id: str
        :keyword feature_type: The type of the feature. The value depends on the data model the current
         feature is part of. Some data models may have an empty value.
        :paramtype feature_type: str
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(
            bbox=bbox, geometry=geometry, properties=properties, id=id, feature_type=feature_type, **kwargs
        )
        self.geometry = geometry
        self.properties = properties
        self.id = id
        self.feature_type = feature_type
        self.type: str = "Feature"
        self.bbox = bbox


class Boundary(GeoJsonFeature, BoundaryProperties):
    """``GeoJSON GeocodingFeature`` object that describe the boundaries of a geographical area.
    Geometry of the feature is described with ``GeoJSON GeometryCollection``.

    Please note, the service typically returns a GeometryCollection with Polygon or MultiPolygon
    sub-types.

    All required parameters must be populated in order to send to server.

    :ivar name: The name associated with the geographical area.
    :vartype name: str
    :ivar copyright: The copyright string.
    :vartype copyright: str
    :ivar copyright_url: A URL that lists many of the data providers for Azure Maps and their
     related copyright information.
    :vartype copyright_url: str
    :ivar geometries_copyright: A collection of copyright information for each geometry of the
     Boundary object in the same order they appear.
    :vartype geometries_copyright: list[~azure.maps.search.models.GeometryCopyright]
    :ivar geometry: A valid ``GeoJSON`` geometry object. The type must be one of the seven valid
     GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon
     and GeometryCollection. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details. Required.
    :vartype geometry: ~azure.maps.search.models.GeoJsonGeometry
    :ivar properties: Properties can contain any additional metadata about the ``Feature``. Value
     can be any JSON object or a JSON null value.
    :vartype properties: JSON
    :ivar id: Identifier for the feature.
    :vartype id: str
    :ivar feature_type: The type of the feature. The value depends on the data model the current
     feature is part of. Some data models may have an empty value.
    :vartype feature_type: str
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "geometry": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "copyright": {"key": "copyright", "type": "str"},
        "copyright_url": {"key": "copyrightURL", "type": "str"},
        "geometries_copyright": {"key": "geometriesCopyright", "type": "[GeometryCopyright]"},
        "geometry": {"key": "geometry", "type": "GeoJsonGeometry"},
        "properties": {"key": "properties", "type": "object"},
        "id": {"key": "id", "type": "str"},
        "feature_type": {"key": "featureType", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(
        self,
        *,
        geometry: "_models.GeoJsonGeometry",
        name: Optional[str] = None,
        copyright: Optional[str] = None,
        copyright_url: Optional[str] = None,
        geometries_copyright: Optional[List["_models.GeometryCopyright"]] = None,
        properties: Optional[JSON] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        feature_type: Optional[str] = None,
        bbox: Optional[List[float]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name associated with the geographical area.
        :paramtype name: str
        :keyword copyright: The copyright string.
        :paramtype copyright: str
        :keyword copyright_url: A URL that lists many of the data providers for Azure Maps and their
         related copyright information.
        :paramtype copyright_url: str
        :keyword geometries_copyright: A collection of copyright information for each geometry of the
         Boundary object in the same order they appear.
        :paramtype geometries_copyright: list[~azure.maps.search.models.GeometryCopyright]
        :keyword geometry: A valid ``GeoJSON`` geometry object. The type must be one of the seven valid
         GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon
         and GeometryCollection. Please refer to `RFC 7946
         <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details. Required.
        :paramtype geometry: ~azure.maps.search.models.GeoJsonGeometry
        :keyword properties: Properties can contain any additional metadata about the ``Feature``.
         Value can be any JSON object or a JSON null value.
        :paramtype properties: JSON
        :keyword id: Identifier for the feature.
        :paramtype id: str
        :keyword feature_type: The type of the feature. The value depends on the data model the current
         feature is part of. Some data models may have an empty value.
        :paramtype feature_type: str
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(
            geometry=geometry,
            properties=properties,
            id=id,
            feature_type=feature_type,
            bbox=bbox,
            name=name,
            copyright=copyright,
            copyright_url=copyright_url,
            geometries_copyright=geometries_copyright,
            **kwargs
        )
        self.name = name
        self.copyright = copyright
        self.copyright_url = copyright_url
        self.geometries_copyright = geometries_copyright
        self.type: str = "Boundary"
        self.geometry = geometry
        self.properties = properties
        self.id = id
        self.feature_type = feature_type
        self.bbox = bbox


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.maps.search.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.maps.search.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.maps.search.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.maps.search.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class FeaturesItem(_serialization.Model):
    """FeaturesItem.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of a feature must be Feature. "Feature"
    :vartype type: str or ~azure.maps.search.models.FeatureTypeEnum
    :ivar id: ID for feature returned.
    :vartype id: str
    :ivar properties:
    :vartype properties: ~azure.maps.search.models.FeaturesItemProperties
    :ivar geometry: A valid ``GeoJSON Point`` geometry type. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1.2>`_ for details. Required.
    :vartype geometry: ~azure.maps.search.models.GeoJsonPoint
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "geometry": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "properties": {"key": "properties", "type": "FeaturesItemProperties"},
        "geometry": {"key": "geometry", "type": "GeoJsonPoint"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(
        self,
        *,
        geometry: "_models.GeoJsonPoint",
        type: Optional[Union[str, "_models.FeatureTypeEnum"]] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        properties: Optional["_models.FeaturesItemProperties"] = None,
        bbox: Optional[List[float]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The type of a feature must be Feature. "Feature"
        :paramtype type: str or ~azure.maps.search.models.FeatureTypeEnum
        :keyword id: ID for feature returned.
        :paramtype id: str
        :keyword properties:
        :paramtype properties: ~azure.maps.search.models.FeaturesItemProperties
        :keyword geometry: A valid ``GeoJSON Point`` geometry type. Please refer to `RFC 7946
         <https://tools.ietf.org/html/rfc7946#section-3.1.2>`_ for details. Required.
        :paramtype geometry: ~azure.maps.search.models.GeoJsonPoint
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(**kwargs)
        self.type = type
        self.id = id
        self.properties = properties
        self.geometry = geometry
        self.bbox = bbox


class FeaturesItemProperties(_serialization.Model):
    """FeaturesItemProperties.

    :ivar type: One of:


     * Address
     * RoadBlock
     * RoadIntersection
     * Neighborhood
     * PopulatedPlace
     * Postcode1
     * AdminDivision1
     * AdminDivision2
     * CountryRegion.
    :vartype type: str
    :ivar confidence: The level of confidence that the geocoded location result is a match. Use
     this value with the match code to determine for more complete information about the match.

     The confidence of a geocoded location is based on many factors including the relative
     importance of the geocoded location and the user’s location, if specified. Known values are:
     "High", "Medium", and "Low".
    :vartype confidence: str or ~azure.maps.search.models.ConfidenceEnum
    :ivar match_codes: One or more match code values that represent the geocoding level for each
     location in the response.

     For example, a geocoded location with match codes of ``Good`` and ``Ambiguous`` means that
     more than one geocode location was found for the location information and that the geocode
     service did not have search up-hierarchy to find a match.

     Similarly, a geocoded location with match codes of ``Ambiguous`` and ``UpHierarchy`` implies
     that a geocode location could not be found that matched all the provided location information,
     so the geocode service had to search up-hierarchy and found multiple matches at that level. An
     example of up an ``Ambiguous`` and ``UpHierarchy`` result is when you provide complete address
     information, but the geocode service cannot locate a match for the street address and instead
     returns information for more than one RoadBlock value.

     The possible values are:

     ``Good``\ : The location has only one match or all returned matches are considered strong
     matches. For example, a query for New York returns several Good matches.

     ``Ambiguous``\ : The location is one of a set of possible matches. For example, when you query
     for the street address 128 Main St., the response may return two locations for 128 North Main
     St. and 128 South Main St. because there is not enough information to determine which option to
     choose.

     ``UpHierarchy``\ : The location represents a move up the geographic hierarchy. This occurs
     when a match for the location request was not found, so a less precise result is returned. For
     example, if a match for the requested address cannot be found, then a match code of
     ``UpHierarchy`` with a RoadBlock entity type may be returned.
    :vartype match_codes: list[str or ~azure.maps.search.models.MatchCodesEnum]
    :ivar address: The address of the result.
    :vartype address: ~azure.maps.search.models.Address
    :ivar geocode_points: A collection of geocode points that differ in how they were calculated
     and their suggested use.
    :vartype geocode_points: list[~azure.maps.search.models.GeocodePointsItem]
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "confidence": {"key": "confidence", "type": "str"},
        "match_codes": {"key": "matchCodes", "type": "[str]"},
        "address": {"key": "address", "type": "Address"},
        "geocode_points": {"key": "geocodePoints", "type": "[GeocodePointsItem]"},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        confidence: Optional[Union[str, "_models.ConfidenceEnum"]] = None,
        match_codes: Optional[List[Union[str, "_models.MatchCodesEnum"]]] = None,
        address: Optional["_models.Address"] = None,
        geocode_points: Optional[List["_models.GeocodePointsItem"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: One of:


         * Address
         * RoadBlock
         * RoadIntersection
         * Neighborhood
         * PopulatedPlace
         * Postcode1
         * AdminDivision1
         * AdminDivision2
         * CountryRegion.
        :paramtype type: str
        :keyword confidence: The level of confidence that the geocoded location result is a match. Use
         this value with the match code to determine for more complete information about the match.

         The confidence of a geocoded location is based on many factors including the relative
         importance of the geocoded location and the user’s location, if specified. Known values are:
         "High", "Medium", and "Low".
        :paramtype confidence: str or ~azure.maps.search.models.ConfidenceEnum
        :keyword match_codes: One or more match code values that represent the geocoding level for each
         location in the response.

         For example, a geocoded location with match codes of ``Good`` and ``Ambiguous`` means that
         more than one geocode location was found for the location information and that the geocode
         service did not have search up-hierarchy to find a match.

         Similarly, a geocoded location with match codes of ``Ambiguous`` and ``UpHierarchy`` implies
         that a geocode location could not be found that matched all the provided location information,
         so the geocode service had to search up-hierarchy and found multiple matches at that level. An
         example of up an ``Ambiguous`` and ``UpHierarchy`` result is when you provide complete address
         information, but the geocode service cannot locate a match for the street address and instead
         returns information for more than one RoadBlock value.

         The possible values are:

         ``Good``\ : The location has only one match or all returned matches are considered strong
         matches. For example, a query for New York returns several Good matches.

         ``Ambiguous``\ : The location is one of a set of possible matches. For example, when you query
         for the street address 128 Main St., the response may return two locations for 128 North Main
         St. and 128 South Main St. because there is not enough information to determine which option to
         choose.

         ``UpHierarchy``\ : The location represents a move up the geographic hierarchy. This occurs
         when a match for the location request was not found, so a less precise result is returned. For
         example, if a match for the requested address cannot be found, then a match code of
         ``UpHierarchy`` with a RoadBlock entity type may be returned.
        :paramtype match_codes: list[str or ~azure.maps.search.models.MatchCodesEnum]
        :keyword address: The address of the result.
        :paramtype address: ~azure.maps.search.models.Address
        :keyword geocode_points: A collection of geocode points that differ in how they were calculated
         and their suggested use.
        :paramtype geocode_points: list[~azure.maps.search.models.GeocodePointsItem]
        """
        super().__init__(**kwargs)
        self.type = type
        self.confidence = confidence
        self.match_codes = match_codes
        self.address = address
        self.geocode_points = geocode_points


class GeocodePointsItem(_serialization.Model):
    """GeocodePointsItem.

    :ivar geometry: A valid ``GeoJSON Point`` geometry type. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1.2>`_ for details.
    :vartype geometry: ~azure.maps.search.models.GeoJsonPoint
    :ivar calculation_method: The method that was used to compute the geocode point. Known values
     are: "Interpolation", "InterpolationOffset", "Parcel", and "Rooftop".
    :vartype calculation_method: str or ~azure.maps.search.models.CalculationMethodEnum
    :ivar usage_types: The best use for the geocode point.
     Each geocode point is defined as a ``Route`` point, a ``Display`` point or both.
     Use ``Route`` points if you are creating a route to the location. Use ``Display`` points if
     you are showing the location on a map. For example, if the location is a park, a ``Route``
     point may specify an entrance to the park where you can enter with a car, and a ``Display``
     point may be a point that specifies the center of the park.
    :vartype usage_types: list[str or ~azure.maps.search.models.UsageTypeEnum]
    """

    _attribute_map = {
        "geometry": {"key": "geometry", "type": "GeoJsonPoint"},
        "calculation_method": {"key": "calculationMethod", "type": "str"},
        "usage_types": {"key": "usageTypes", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        geometry: Optional["_models.GeoJsonPoint"] = None,
        calculation_method: Optional[Union[str, "_models.CalculationMethodEnum"]] = None,
        usage_types: Optional[List[Union[str, "_models.UsageTypeEnum"]]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword geometry: A valid ``GeoJSON Point`` geometry type. Please refer to `RFC 7946
         <https://tools.ietf.org/html/rfc7946#section-3.1.2>`_ for details.
        :paramtype geometry: ~azure.maps.search.models.GeoJsonPoint
        :keyword calculation_method: The method that was used to compute the geocode point. Known
         values are: "Interpolation", "InterpolationOffset", "Parcel", and "Rooftop".
        :paramtype calculation_method: str or ~azure.maps.search.models.CalculationMethodEnum
        :keyword usage_types: The best use for the geocode point.
         Each geocode point is defined as a ``Route`` point, a ``Display`` point or both.
         Use ``Route`` points if you are creating a route to the location. Use ``Display`` points if
         you are showing the location on a map. For example, if the location is a park, a ``Route``
         point may specify an entrance to the park where you can enter with a car, and a ``Display``
         point may be a point that specifies the center of the park.
        :paramtype usage_types: list[str or ~azure.maps.search.models.UsageTypeEnum]
        """
        super().__init__(**kwargs)
        self.geometry = geometry
        self.calculation_method = calculation_method
        self.usage_types = usage_types


class GeocodingBatchRequestBody(_serialization.Model):
    """The list of address geocoding queries/requests to process. The list can contain a max of 100
    queries and must contain at least 1 query.

    :ivar batch_items: The list of queries to process.
    :vartype batch_items: list[~azure.maps.search.models.GeocodingBatchRequestItem]
    """

    _attribute_map = {
        "batch_items": {"key": "batchItems", "type": "[GeocodingBatchRequestItem]"},
    }

    def __init__(
        self, *, batch_items: Optional[List["_models.GeocodingBatchRequestItem"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword batch_items: The list of queries to process.
        :paramtype batch_items: list[~azure.maps.search.models.GeocodingBatchRequestItem]
        """
        super().__init__(**kwargs)
        self.batch_items = batch_items


class GeocodingBatchRequestItem(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Batch Query object.

    :ivar optional_id: id of the request which would show in corresponding batchItem.
    :vartype optional_id: str
    :ivar top: Maximum number of responses that will be returned. Default: 5, minimum: 1 and
     maximum: 20.
    :vartype top: int
    :ivar query: A string that contains information about a location, such as an address or
     landmark name.
    :vartype query: str
    :ivar address_line: The official street line of an address relative to the area, as specified
     by the locality, or postalCode, properties. Typical use of this element would be to provide a
     street address or any official address.

     **If query is given, should not use this parameter.**.
    :vartype address_line: str
    :ivar country_region: Signal for the geocoding result to an `ISO 3166-1 Alpha-2 region/country
     code <https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_ that is specified e.g. FR./

     **If query is given, should not use this parameter.**.
    :vartype country_region: str
    :ivar bbox: A rectangular area on the earth defined as a bounding box object. The sides of the
     rectangles are defined by longitude and latitude values. For more information, see Location and
     Area Types. When you specify this parameter, the geographical area is taken into account when
     computing the results of a location query.

     Example: [lon1, lat1, lon2, lat2].
    :vartype bbox: list[float]
    :ivar view: A string that specifies an `ISO 3166-1 Alpha-2 region/country code
     <https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_. This will alter Geopolitical disputed
     borders and labels to align with the specified user region.
    :vartype view: str
    :ivar coordinates: A point on the earth specified as a longitude and latitude. When you specify
     this parameter, the user’s location is taken into account and the results returned may be more
     relevant to the user. Example: [lon, lat].
    :vartype coordinates: list[float]
    :ivar admin_district: The country subdivision portion of an address, such as WA.

     **If query is given, should not use this parameter.**.
    :vartype admin_district: str
    :ivar admin_district2: The county for the structured address, such as King.

     **If query is given, should not use this parameter.**.
    :vartype admin_district2: str
    :ivar admin_district3: The named area for the structured address.

     **If query is given, should not use this parameter.**.
    :vartype admin_district3: str
    :ivar locality: The locality portion of an address, such as Seattle.

     **If query is given, should not use this parameter.**.
    :vartype locality: str
    :ivar postal_code: The postal code portion of an address.

     **If query is given, should not use this parameter.**.
    :vartype postal_code: str
    """

    _validation = {
        "top": {"maximum": 20, "minimum": 1},
        "bbox": {"max_items": 4, "min_items": 4},
        "coordinates": {"max_items": 2, "min_items": 2},
    }

    _attribute_map = {
        "optional_id": {"key": "optionalId", "type": "str"},
        "top": {"key": "top", "type": "int"},
        "query": {"key": "query", "type": "str"},
        "address_line": {"key": "addressLine", "type": "str"},
        "country_region": {"key": "countryRegion", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
        "view": {"key": "view", "type": "str"},
        "coordinates": {"key": "coordinates", "type": "[float]"},
        "admin_district": {"key": "adminDistrict", "type": "str"},
        "admin_district2": {"key": "adminDistrict2", "type": "str"},
        "admin_district3": {"key": "adminDistrict3", "type": "str"},
        "locality": {"key": "locality", "type": "str"},
        "postal_code": {"key": "postalCode", "type": "str"},
    }

    def __init__(
        self,
        *,
        optional_id: Optional[str] = None,
        top: int = 5,
        query: Optional[str] = None,
        address_line: Optional[str] = None,
        country_region: Optional[str] = None,
        bbox: Optional[List[float]] = None,
        view: str = "auto",
        coordinates: Optional[List[float]] = None,
        admin_district: Optional[str] = None,
        admin_district2: Optional[str] = None,
        admin_district3: Optional[str] = None,
        locality: Optional[str] = None,
        postal_code: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword optional_id: id of the request which would show in corresponding batchItem.
        :paramtype optional_id: str
        :keyword top: Maximum number of responses that will be returned. Default: 5, minimum: 1 and
         maximum: 20.
        :paramtype top: int
        :keyword query: A string that contains information about a location, such as an address or
         landmark name.
        :paramtype query: str
        :keyword address_line: The official street line of an address relative to the area, as
         specified by the locality, or postalCode, properties. Typical use of this element would be to
         provide a street address or any official address.

         **If query is given, should not use this parameter.**.
        :paramtype address_line: str
        :keyword country_region: Signal for the geocoding result to an `ISO 3166-1 Alpha-2
         region/country code <https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_ that is specified e.g.
         FR./

         **If query is given, should not use this parameter.**.
        :paramtype country_region: str
        :keyword bbox: A rectangular area on the earth defined as a bounding box object. The sides of
         the rectangles are defined by longitude and latitude values. For more information, see Location
         and Area Types. When you specify this parameter, the geographical area is taken into account
         when computing the results of a location query.

         Example: [lon1, lat1, lon2, lat2].
        :paramtype bbox: list[float]
        :keyword view: A string that specifies an `ISO 3166-1 Alpha-2 region/country code
         <https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_. This will alter Geopolitical disputed
         borders and labels to align with the specified user region.
        :paramtype view: str
        :keyword coordinates: A point on the earth specified as a longitude and latitude. When you
         specify this parameter, the user’s location is taken into account and the results returned may
         be more relevant to the user. Example: [lon, lat].
        :paramtype coordinates: list[float]
        :keyword admin_district: The country subdivision portion of an address, such as WA.

         **If query is given, should not use this parameter.**.
        :paramtype admin_district: str
        :keyword admin_district2: The county for the structured address, such as King.

         **If query is given, should not use this parameter.**.
        :paramtype admin_district2: str
        :keyword admin_district3: The named area for the structured address.

         **If query is given, should not use this parameter.**.
        :paramtype admin_district3: str
        :keyword locality: The locality portion of an address, such as Seattle.

         **If query is given, should not use this parameter.**.
        :paramtype locality: str
        :keyword postal_code: The postal code portion of an address.

         **If query is given, should not use this parameter.**.
        :paramtype postal_code: str
        """
        super().__init__(**kwargs)
        self.optional_id = optional_id
        self.top = top
        self.query = query
        self.address_line = address_line
        self.country_region = country_region
        self.bbox = bbox
        self.view = view
        self.coordinates = coordinates
        self.admin_district = admin_district
        self.admin_district2 = admin_district2
        self.admin_district3 = admin_district3
        self.locality = locality
        self.postal_code = postal_code


class GeocodingBatchResponse(_serialization.Model):
    """This object is returned from a successful Geocoding Batch service call.

    :ivar summary: Summary for the batch request.
    :vartype summary: ~azure.maps.search.models.GeocodingBatchResponseSummary
    :ivar batch_items: Array containing the batch results.
    :vartype batch_items: list[~azure.maps.search.models.GeocodingBatchResponseItem]
    :ivar next_link: The is the link to the next page of the features returned. If it's the last
     page, no this field.
    :vartype next_link: str
    """

    _attribute_map = {
        "summary": {"key": "summary", "type": "GeocodingBatchResponseSummary"},
        "batch_items": {"key": "batchItems", "type": "[GeocodingBatchResponseItem]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        summary: Optional["_models.GeocodingBatchResponseSummary"] = None,
        batch_items: Optional[List["_models.GeocodingBatchResponseItem"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword summary: Summary for the batch request.
        :paramtype summary: ~azure.maps.search.models.GeocodingBatchResponseSummary
        :keyword batch_items: Array containing the batch results.
        :paramtype batch_items: list[~azure.maps.search.models.GeocodingBatchResponseItem]
        :keyword next_link: The is the link to the next page of the features returned. If it's the last
         page, no this field.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.summary = summary
        self.batch_items = batch_items
        self.next_link = next_link


class GeocodingBatchResponseItem(_serialization.Model):
    """GeocodingBatchResponseItem.

    :ivar optional_id: id of the batchItem which would be the same as the id in the request.
    :vartype optional_id: str
    :ivar type: The type of a FeatureCollection object must be FeatureCollection.
     "FeatureCollection"
    :vartype type: str or ~azure.maps.search.models.FeatureCollectionEnum
    :ivar features:
    :vartype features: list[~azure.maps.search.models.FeaturesItem]
    :ivar next_link: The is the link to the next page of the features returned. If it's the last
     page, no this field.
    :vartype next_link: str
    :ivar error: The error detail.
    :vartype error: ~azure.maps.search.models.ErrorDetail
    """

    _attribute_map = {
        "optional_id": {"key": "optionalId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "features": {"key": "features", "type": "[FeaturesItem]"},
        "next_link": {"key": "nextLink", "type": "str"},
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(
        self,
        *,
        optional_id: Optional[str] = None,
        type: Optional[Union[str, "_models.FeatureCollectionEnum"]] = None,
        features: Optional[List["_models.FeaturesItem"]] = None,
        next_link: Optional[str] = None,
        error: Optional["_models.ErrorDetail"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword optional_id: id of the batchItem which would be the same as the id in the request.
        :paramtype optional_id: str
        :keyword type: The type of a FeatureCollection object must be FeatureCollection.
         "FeatureCollection"
        :paramtype type: str or ~azure.maps.search.models.FeatureCollectionEnum
        :keyword features:
        :paramtype features: list[~azure.maps.search.models.FeaturesItem]
        :keyword next_link: The is the link to the next page of the features returned. If it's the last
         page, no this field.
        :paramtype next_link: str
        :keyword error: The error detail.
        :paramtype error: ~azure.maps.search.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.optional_id = optional_id
        self.type = type
        self.features = features
        self.next_link = next_link
        self.error = error


class GeocodingBatchResponseSummary(_serialization.Model):
    """Summary for the batch request.

    :ivar successful_requests: Number of successful requests in the batch.
    :vartype successful_requests: int
    :ivar total_requests: Total number of requests in the batch.
    :vartype total_requests: int
    """

    _attribute_map = {
        "successful_requests": {"key": "successfulRequests", "type": "int"},
        "total_requests": {"key": "totalRequests", "type": "int"},
    }

    def __init__(
        self, *, successful_requests: Optional[int] = None, total_requests: Optional[int] = None, **kwargs: Any
    ) -> None:
        """
        :keyword successful_requests: Number of successful requests in the batch.
        :paramtype successful_requests: int
        :keyword total_requests: Total number of requests in the batch.
        :paramtype total_requests: int
        """
        super().__init__(**kwargs)
        self.successful_requests = successful_requests
        self.total_requests = total_requests


class GeocodingResponse(_serialization.Model):
    """This object is returned from a successful Geocoding call.

    :ivar type: The type of a FeatureCollection object must be FeatureCollection.
     "FeatureCollection"
    :vartype type: str or ~azure.maps.search.models.FeatureCollectionEnum
    :ivar features:
    :vartype features: list[~azure.maps.search.models.FeaturesItem]
    :ivar next_link: The is the link to the next page of the features returned. If it's the last
     page, no this field.
    :vartype next_link: str
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "features": {"key": "features", "type": "[FeaturesItem]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.FeatureCollectionEnum"]] = None,
        features: Optional[List["_models.FeaturesItem"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The type of a FeatureCollection object must be FeatureCollection.
         "FeatureCollection"
        :paramtype type: str or ~azure.maps.search.models.FeatureCollectionEnum
        :keyword features:
        :paramtype features: list[~azure.maps.search.models.FeaturesItem]
        :keyword next_link: The is the link to the next page of the features returned. If it's the last
         page, no this field.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.type = type
        self.features = features
        self.next_link = next_link


class GeoJsonFeatureCollectionData(_serialization.Model):
    """GeoJsonFeatureCollectionData.

    All required parameters must be populated in order to send to server.

    :ivar features: Contains a list of valid ``GeoJSON Feature`` objects. Required.
    :vartype features: list[~azure.maps.search.models.GeoJsonFeature]
    """

    _validation = {
        "features": {"required": True},
    }

    _attribute_map = {
        "features": {"key": "features", "type": "[GeoJsonFeature]"},
    }

    def __init__(self, *, features: List["_models.GeoJsonFeature"], **kwargs: Any) -> None:
        """
        :keyword features: Contains a list of valid ``GeoJSON Feature`` objects. Required.
        :paramtype features: list[~azure.maps.search.models.GeoJsonFeature]
        """
        super().__init__(**kwargs)
        self.features = features


class GeoJsonFeatureCollection(GeoJsonObject, GeoJsonFeatureCollectionData):
    """A valid ``GeoJSON FeatureCollection`` object type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.3>`_ for details.

    All required parameters must be populated in order to send to server.

    :ivar features: Contains a list of valid ``GeoJSON Feature`` objects. Required.
    :vartype features: list[~azure.maps.search.models.GeoJsonFeature]
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "features": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "features": {"key": "features", "type": "[GeoJsonFeature]"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(
        self, *, features: List["_models.GeoJsonFeature"], bbox: Optional[List[float]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword features: Contains a list of valid ``GeoJSON Feature`` objects. Required.
        :paramtype features: list[~azure.maps.search.models.GeoJsonFeature]
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, features=features, **kwargs)
        self.features = features
        self.type: str = "FeatureCollection"
        self.bbox = bbox


class GeoJsonGeometry(GeoJsonObject):
    """A valid ``GeoJSON`` geometry object. The type must be one of the seven valid GeoJSON geometry
    types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and
    GeometryCollection. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.1>`_ for details.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    GeoJsonGeometryCollection, GeoJsonLineString, GeoJsonMultiLineString, GeoJsonMultiPoint,
    GeoJsonMultiPolygon, GeoJsonPoint, GeoJsonPolygon

    All required parameters must be populated in order to send to server.

    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    _subtype_map = {
        "type": {
            "GeometryCollection": "GeoJsonGeometryCollection",
            "LineString": "GeoJsonLineString",
            "MultiLineString": "GeoJsonMultiLineString",
            "MultiPoint": "GeoJsonMultiPoint",
            "MultiPolygon": "GeoJsonMultiPolygon",
            "Point": "GeoJsonPoint",
            "Polygon": "GeoJsonPolygon",
        }
    }

    def __init__(self, *, bbox: Optional[List[float]] = None, **kwargs: Any) -> None:
        """
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, **kwargs)
        self.type: str = "GeoJsonGeometry"


class GeoJsonGeometryCollectionData(_serialization.Model):
    """GeoJsonGeometryCollectionData.

    All required parameters must be populated in order to send to server.

    :ivar geometries: Contains a list of valid ``GeoJSON`` geometry objects. **Note** that
     coordinates in GeoJSON are in x, y order (longitude, latitude). Required.
    :vartype geometries: list[~azure.maps.search.models.GeoJsonGeometry]
    """

    _validation = {
        "geometries": {"required": True},
    }

    _attribute_map = {
        "geometries": {"key": "geometries", "type": "[GeoJsonGeometry]"},
    }

    def __init__(self, *, geometries: List["_models.GeoJsonGeometry"], **kwargs: Any) -> None:
        """
        :keyword geometries: Contains a list of valid ``GeoJSON`` geometry objects. **Note** that
         coordinates in GeoJSON are in x, y order (longitude, latitude). Required.
        :paramtype geometries: list[~azure.maps.search.models.GeoJsonGeometry]
        """
        super().__init__(**kwargs)
        self.geometries = geometries


class GeoJsonGeometryCollection(GeoJsonGeometry, GeoJsonGeometryCollectionData):
    """A valid ``GeoJSON GeometryCollection`` object type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.1.8>`_ for details.

    All required parameters must be populated in order to send to server.

    :ivar geometries: Contains a list of valid ``GeoJSON`` geometry objects. **Note** that
     coordinates in GeoJSON are in x, y order (longitude, latitude). Required.
    :vartype geometries: list[~azure.maps.search.models.GeoJsonGeometry]
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "geometries": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "geometries": {"key": "geometries", "type": "[GeoJsonGeometry]"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(
        self, *, geometries: List["_models.GeoJsonGeometry"], bbox: Optional[List[float]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword geometries: Contains a list of valid ``GeoJSON`` geometry objects. **Note** that
         coordinates in GeoJSON are in x, y order (longitude, latitude). Required.
        :paramtype geometries: list[~azure.maps.search.models.GeoJsonGeometry]
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, geometries=geometries, **kwargs)
        self.geometries = geometries
        self.type: str = "GeometryCollection"
        self.bbox = bbox


class GeoJsonLineStringData(_serialization.Model):
    """GeoJsonLineStringData.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Coordinates for the ``GeoJson LineString`` geometry. Required.
    :vartype coordinates: list[list[float]]
    """

    _validation = {
        "coordinates": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[float]]"},
    }

    def __init__(self, *, coordinates: List[List[float]], **kwargs: Any) -> None:
        """
        :keyword coordinates: Coordinates for the ``GeoJson LineString`` geometry. Required.
        :paramtype coordinates: list[list[float]]
        """
        super().__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonLineString(GeoJsonGeometry, GeoJsonLineStringData):
    """A valid ``GeoJSON LineString`` geometry type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.1.4>`_ for details.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Coordinates for the ``GeoJson LineString`` geometry. Required.
    :vartype coordinates: list[list[float]]
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "coordinates": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[float]]"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(self, *, coordinates: List[List[float]], bbox: Optional[List[float]] = None, **kwargs: Any) -> None:
        """
        :keyword coordinates: Coordinates for the ``GeoJson LineString`` geometry. Required.
        :paramtype coordinates: list[list[float]]
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type: str = "LineString"
        self.bbox = bbox


class GeoJsonMultiLineStringData(_serialization.Model):
    """GeoJsonMultiLineStringData.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Coordinates for the ``GeoJson MultiLineString`` geometry. Required.
    :vartype coordinates: list[list[list[float]]]
    """

    _validation = {
        "coordinates": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[[float]]]"},
    }

    def __init__(self, *, coordinates: List[List[List[float]]], **kwargs: Any) -> None:
        """
        :keyword coordinates: Coordinates for the ``GeoJson MultiLineString`` geometry. Required.
        :paramtype coordinates: list[list[list[float]]]
        """
        super().__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonMultiLineString(GeoJsonGeometry, GeoJsonMultiLineStringData):
    """A valid ``GeoJSON MultiLineString`` geometry type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.1.5>`_ for details.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Coordinates for the ``GeoJson MultiLineString`` geometry. Required.
    :vartype coordinates: list[list[list[float]]]
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "coordinates": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[[float]]]"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(
        self, *, coordinates: List[List[List[float]]], bbox: Optional[List[float]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword coordinates: Coordinates for the ``GeoJson MultiLineString`` geometry. Required.
        :paramtype coordinates: list[list[list[float]]]
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type: str = "MultiLineString"
        self.bbox = bbox


class GeoJsonMultiPointData(_serialization.Model):
    """Data contained by a ``GeoJson MultiPoint``.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Coordinates for the ``GeoJson MultiPoint`` geometry. Required.
    :vartype coordinates: list[list[float]]
    """

    _validation = {
        "coordinates": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[float]]"},
    }

    def __init__(self, *, coordinates: List[List[float]], **kwargs: Any) -> None:
        """
        :keyword coordinates: Coordinates for the ``GeoJson MultiPoint`` geometry. Required.
        :paramtype coordinates: list[list[float]]
        """
        super().__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonMultiPoint(GeoJsonGeometry, GeoJsonMultiPointData):
    """A valid ``GeoJSON MultiPoint`` geometry type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.1.3>`_ for details.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Coordinates for the ``GeoJson MultiPoint`` geometry. Required.
    :vartype coordinates: list[list[float]]
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "coordinates": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[float]]"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(self, *, coordinates: List[List[float]], bbox: Optional[List[float]] = None, **kwargs: Any) -> None:
        """
        :keyword coordinates: Coordinates for the ``GeoJson MultiPoint`` geometry. Required.
        :paramtype coordinates: list[list[float]]
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type: str = "MultiPoint"
        self.bbox = bbox


class GeoJsonMultiPolygonData(_serialization.Model):
    """GeoJsonMultiPolygonData.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Contains a list of valid ``GeoJSON Polygon`` objects. **Note** that
     coordinates in GeoJSON are in x, y order (longitude, latitude). Required.
    :vartype coordinates: list[list[list[list[float]]]]
    """

    _validation = {
        "coordinates": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[[[float]]]]"},
    }

    def __init__(self, *, coordinates: List[List[List[List[float]]]], **kwargs: Any) -> None:
        """
        :keyword coordinates: Contains a list of valid ``GeoJSON Polygon`` objects. **Note** that
         coordinates in GeoJSON are in x, y order (longitude, latitude). Required.
        :paramtype coordinates: list[list[list[list[float]]]]
        """
        super().__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonMultiPolygon(GeoJsonGeometry, GeoJsonMultiPolygonData):
    """A valid ``GeoJSON MultiPolygon`` object type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.1.7>`_ for details.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Contains a list of valid ``GeoJSON Polygon`` objects. **Note** that
     coordinates in GeoJSON are in x, y order (longitude, latitude). Required.
    :vartype coordinates: list[list[list[list[float]]]]
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "coordinates": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[[[float]]]]"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(
        self, *, coordinates: List[List[List[List[float]]]], bbox: Optional[List[float]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword coordinates: Contains a list of valid ``GeoJSON Polygon`` objects. **Note** that
         coordinates in GeoJSON are in x, y order (longitude, latitude). Required.
        :paramtype coordinates: list[list[list[list[float]]]]
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type: str = "MultiPolygon"
        self.bbox = bbox


class GeoJsonPointData(_serialization.Model):
    """Data contained by a ``GeoJson Point``.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: A ``Position`` is an array of numbers with two or more elements. The first
     two elements are *longitude* and *latitude*\ , precisely in that order. *Altitude/Elevation* is
     an optional third element. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1.1>`_ for details. Required.
    :vartype coordinates: list[float]
    """

    _validation = {
        "coordinates": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[float]"},
    }

    def __init__(self, *, coordinates: List[float], **kwargs: Any) -> None:
        """
        :keyword coordinates: A ``Position`` is an array of numbers with two or more elements. The
         first two elements are *longitude* and *latitude*\ , precisely in that order.
         *Altitude/Elevation* is an optional third element. Please refer to `RFC 7946
         <https://tools.ietf.org/html/rfc7946#section-3.1.1>`_ for details. Required.
        :paramtype coordinates: list[float]
        """
        super().__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonPoint(GeoJsonGeometry, GeoJsonPointData):
    """A valid ``GeoJSON Point`` geometry type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.1.2>`_ for details.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: A ``Position`` is an array of numbers with two or more elements. The first
     two elements are *longitude* and *latitude*\ , precisely in that order. *Altitude/Elevation* is
     an optional third element. Please refer to `RFC 7946
     <https://tools.ietf.org/html/rfc7946#section-3.1.1>`_ for details. Required.
    :vartype coordinates: list[float]
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "coordinates": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[float]"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(self, *, coordinates: List[float], bbox: Optional[List[float]] = None, **kwargs: Any) -> None:
        """
        :keyword coordinates: A ``Position`` is an array of numbers with two or more elements. The
         first two elements are *longitude* and *latitude*\ , precisely in that order.
         *Altitude/Elevation* is an optional third element. Please refer to `RFC 7946
         <https://tools.ietf.org/html/rfc7946#section-3.1.1>`_ for details. Required.
        :paramtype coordinates: list[float]
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type: str = "Point"
        self.bbox = bbox


class GeoJsonPolygonData(_serialization.Model):
    """GeoJsonPolygonData.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Coordinates for the ``GeoJson Polygon`` geometry type. Required.
    :vartype coordinates: list[list[list[float]]]
    """

    _validation = {
        "coordinates": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[[float]]]"},
    }

    def __init__(self, *, coordinates: List[List[List[float]]], **kwargs: Any) -> None:
        """
        :keyword coordinates: Coordinates for the ``GeoJson Polygon`` geometry type. Required.
        :paramtype coordinates: list[list[list[float]]]
        """
        super().__init__(**kwargs)
        self.coordinates = coordinates


class GeoJsonPolygon(GeoJsonGeometry, GeoJsonPolygonData):
    """A valid ``GeoJSON Polygon`` geometry type. Please refer to `RFC 7946
    <https://tools.ietf.org/html/rfc7946#section-3.1.6>`_ for details.

    All required parameters must be populated in order to send to server.

    :ivar coordinates: Coordinates for the ``GeoJson Polygon`` geometry type. Required.
    :vartype coordinates: list[list[list[float]]]
    :ivar type: Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types
     - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection,
     Feature and FeatureCollection. Required. Known values are: "Point", "MultiPoint", "LineString",
     "MultiLineString", "Polygon", "MultiPolygon", "GeometryCollection", "Feature", and
     "FeatureCollection".
    :vartype type: str or ~azure.maps.search.models.GeoJsonObjectType
    :ivar bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
     <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
    :vartype bbox: list[float]
    """

    _validation = {
        "coordinates": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "coordinates": {"key": "coordinates", "type": "[[[float]]]"},
        "type": {"key": "type", "type": "str"},
        "bbox": {"key": "bbox", "type": "[float]"},
    }

    def __init__(
        self, *, coordinates: List[List[List[float]]], bbox: Optional[List[float]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword coordinates: Coordinates for the ``GeoJson Polygon`` geometry type. Required.
        :paramtype coordinates: list[list[list[float]]]
        :keyword bbox: Bounding box. Projection used - EPSG:3857. Please refer to `RFC 7946
         <https://datatracker.ietf.org/doc/html/rfc7946#section-5>`_ for details.
        :paramtype bbox: list[float]
        """
        super().__init__(bbox=bbox, coordinates=coordinates, **kwargs)
        self.coordinates = coordinates
        self.type: str = "Polygon"
        self.bbox = bbox


class GeometryCopyright(_serialization.Model):
    """Copyright information of a geometry of a Boundary object.

    :ivar source_name: The name of the data provider.
    :vartype source_name: str
    :ivar copyright: The copyright string for the data provider.
    :vartype copyright: str
    """

    _attribute_map = {
        "source_name": {"key": "sourceName", "type": "str"},
        "copyright": {"key": "copyright", "type": "str"},
    }

    def __init__(self, *, source_name: Optional[str] = None, copyright: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword source_name: The name of the data provider.
        :paramtype source_name: str
        :keyword copyright: The copyright string for the data provider.
        :paramtype copyright: str
        """
        super().__init__(**kwargs)
        self.source_name = source_name
        self.copyright = copyright


class Intersection(_serialization.Model):
    """The address of the result.

    :ivar base_street: Primary street for the location.
    :vartype base_street: str
    :ivar secondary_street1: The first intersecting street.
    :vartype secondary_street1: str
    :ivar secondary_street2: If any, the second intersecting street.
    :vartype secondary_street2: str
    :ivar intersection_type: Type of intersection.
    :vartype intersection_type: str
    :ivar display_name: Complete name of the intersection.
    :vartype display_name: str
    """

    _attribute_map = {
        "base_street": {"key": "baseStreet", "type": "str"},
        "secondary_street1": {"key": "secondaryStreet1", "type": "str"},
        "secondary_street2": {"key": "secondaryStreet2", "type": "str"},
        "intersection_type": {"key": "intersectionType", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
    }

    def __init__(
        self,
        *,
        base_street: Optional[str] = None,
        secondary_street1: Optional[str] = None,
        secondary_street2: Optional[str] = None,
        intersection_type: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword base_street: Primary street for the location.
        :paramtype base_street: str
        :keyword secondary_street1: The first intersecting street.
        :paramtype secondary_street1: str
        :keyword secondary_street2: If any, the second intersecting street.
        :paramtype secondary_street2: str
        :keyword intersection_type: Type of intersection.
        :paramtype intersection_type: str
        :keyword display_name: Complete name of the intersection.
        :paramtype display_name: str
        """
        super().__init__(**kwargs)
        self.base_street = base_street
        self.secondary_street1 = secondary_street1
        self.secondary_street2 = secondary_street2
        self.intersection_type = intersection_type
        self.display_name = display_name


class ReverseGeocodingBatchRequestBody(_serialization.Model):
    """The list of reverse geocoding queries/requests to process. The list can contain a max of 100
    queries and must contain at least 1 query.

    :ivar batch_items: The list of queries to process.
    :vartype batch_items: list[~azure.maps.search.models.ReverseGeocodingBatchRequestItem]
    """

    _attribute_map = {
        "batch_items": {"key": "batchItems", "type": "[ReverseGeocodingBatchRequestItem]"},
    }

    def __init__(
        self, *, batch_items: Optional[List["_models.ReverseGeocodingBatchRequestItem"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword batch_items: The list of queries to process.
        :paramtype batch_items: list[~azure.maps.search.models.ReverseGeocodingBatchRequestItem]
        """
        super().__init__(**kwargs)
        self.batch_items = batch_items


class ReverseGeocodingBatchRequestItem(_serialization.Model):
    """Batch Query object.

    :ivar optional_id: id of the request which would show in corresponding batchItem.
    :vartype optional_id: str
    :ivar coordinates: The coordinates of the location that you want to reverse geocode. Example:
     [lon,lat].
    :vartype coordinates: list[float]
    :ivar result_types: Specify entity types that you want in the response. Only the types you
     specify will be returned. If the point cannot be mapped to the entity types you specify, no
     location information is returned in the response.
     Default value is all possible entities.
     A comma separated list of entity types selected from the following options.


     * Address
     * Neighborhood
     * PopulatedPlace
     * Postcode1
     * AdminDivision1
     * AdminDivision2
     * CountryRegion

     These entity types are ordered from the most specific entity to the least specific entity.
     When entities of more than one entity type are found, only the most specific entity is
     returned. For example, if you specify Address and AdminDistrict1 as entity types and entities
     were found for both types, only the Address entity information is returned in the response.
    :vartype result_types: list[str or ~azure.maps.search.models.ResultTypeEnum]
    :ivar view: A string that specifies an `ISO 3166-1 Alpha-2 region/country code
     <https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_. This will alter Geopolitical disputed
     borders and labels to align with the specified user region.
    :vartype view: str
    """

    _validation = {
        "coordinates": {"max_items": 2, "min_items": 2},
    }

    _attribute_map = {
        "optional_id": {"key": "optionalId", "type": "str"},
        "coordinates": {"key": "coordinates", "type": "[float]"},
        "result_types": {"key": "resultTypes", "type": "[str]"},
        "view": {"key": "view", "type": "str"},
    }

    def __init__(
        self,
        *,
        optional_id: Optional[str] = None,
        coordinates: Optional[List[float]] = None,
        result_types: Optional[List[Union[str, "_models.ResultTypeEnum"]]] = None,
        view: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword optional_id: id of the request which would show in corresponding batchItem.
        :paramtype optional_id: str
        :keyword coordinates: The coordinates of the location that you want to reverse geocode.
         Example: [lon,lat].
        :paramtype coordinates: list[float]
        :keyword result_types: Specify entity types that you want in the response. Only the types you
         specify will be returned. If the point cannot be mapped to the entity types you specify, no
         location information is returned in the response.
         Default value is all possible entities.
         A comma separated list of entity types selected from the following options.


         * Address
         * Neighborhood
         * PopulatedPlace
         * Postcode1
         * AdminDivision1
         * AdminDivision2
         * CountryRegion

         These entity types are ordered from the most specific entity to the least specific entity.
         When entities of more than one entity type are found, only the most specific entity is
         returned. For example, if you specify Address and AdminDistrict1 as entity types and entities
         were found for both types, only the Address entity information is returned in the response.
        :paramtype result_types: list[str or ~azure.maps.search.models.ResultTypeEnum]
        :keyword view: A string that specifies an `ISO 3166-1 Alpha-2 region/country code
         <https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2>`_. This will alter Geopolitical disputed
         borders and labels to align with the specified user region.
        :paramtype view: str
        """
        super().__init__(**kwargs)
        self.optional_id = optional_id
        self.coordinates = coordinates
        self.result_types = result_types
        self.view = view
