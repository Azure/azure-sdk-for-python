# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class ConnectorSet(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: These are the standard household connectors for a certain region. They are all AC single phase
    #: and the standard Voltage and standard Amperage.
    #: 
    #: See also: `Plug & socket types - World Standards
    #: <https://www.worldstandards.eu/electricity/plugs-and-sockets>`_.
    STANDARD_HOUSEHOLD_COUNTRY_SPECIFIC = "StandardHouseholdCountrySpecific"
    #: Type 1 connector as defined in the IEC 62196-2 standard. Also called Yazaki after the original
    #: manufacturer or SAE J1772 after the standard that first published it. Mostly used in
    #: combination with 120V single phase or up to 240V single phase infrastructure.
    IEC62196_TYPE1 = "IEC62196Type1"
    #: Type 1 based combo connector as defined in the IEC 62196-3 standard. The connector is based on
    #: the Type 1 connector – as defined in the IEC 62196-2 standard – with two additional direct
    #: current (DC) contacts to allow DC fast charging.
    IEC62196_TYPE1_CCS = "IEC62196Type1CCS"
    #: Type 2 connector as defined in the IEC 62196-2 standard. Provided as a cable and plug attached
    #: to the charging point.
    IEC62196_TYPE2_CABLE_ATTACHED = "IEC62196Type2CableAttached"
    #: Type 2 connector as defined in the IEC 62196-2 standard. Provided as a socket set into the
    #: charging point.
    IEC62196_TYPE2_OUTLET = "IEC62196Type2Outlet"
    #: Type 2 based combo connector as defined in the IEC 62196-3 standard. The connector is based on
    #: the Type 2 connector – as defined in the IEC 62196-2 standard – with two additional direct
    #: current (DC) contacts to allow DC fast charging.
    IEC62196_TYPE2_CCS = "IEC62196Type2CCS"
    #: Type 3 connector as defined in the IEC 62196-2 standard. Also called Scame after the original
    #: manufacturer. Mostly used in combination with up to 240V single phase or up to 420V three phase
    #: infrastructure.
    IEC62196_TYPE3 = "IEC62196Type3"
    #: CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and
    #: industrial partners. Because of this is is also known as the TEPCO's connector. It supports
    #: fast DC charging.
    CHADEMO = "Chademo"
    #: Industrial Blue connector is a connector defined in the IEC 60309 standard. It is sometime
    #: referred to as by some combination of the standard, the color and the fact that is a single
    #: phase connector. The connector usually has the "P+N+E, 6h" configuration.
    IEC60309_AC1_PHASE_BLUE = "IEC60309AC1PhaseBlue"
    #: Industrial White connector is a DC connector defined in the IEC 60309 standard.
    IEC60309_DC_WHITE = "IEC60309DCWhite"
    #: The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to
    #: either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to
    #: North America or the modified Type 2 (DC over Type 2) in Europe.
    TESLA = "Tesla"

class EntityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Geography entity type. Present only when entityType was requested and is available.
    """

    #: Country name.
    COUNTRY = "Country"
    #: State or Province.
    COUNTRY_SUBDIVISION = "CountrySubdivision"
    #: County.
    COUNTRY_SECONDARY_SUBDIVISION = "CountrySecondarySubdivision"
    #: Named Area.
    COUNTRY_TERTIARY_SUBDIVISION = "CountryTertiarySubdivision"
    #: City / Town.
    MUNICIPALITY = "Municipality"
    #: Sub / Super City.
    MUNICIPALITY_SUBDIVISION = "MunicipalitySubdivision"
    #: Neighbourhood.
    NEIGHBOURHOOD = "Neighbourhood"
    #: Postal Code / Zip Code.
    POSTAL_CODE_AREA = "PostalCodeArea"

class EntryPointType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of entry point. Value can be either *main* or *minor*.
    """

    MAIN = "main"
    MINOR = "minor"

class GeographicResourceLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Used to access an Azure Maps Creator resource in the United States.
    US = "us"
    #: Used to access an Azure Maps Creator resource in Europe.
    EU = "eu"

class Geography(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us
    and eu.
    """

    US = "us"
    EU = "eu"

class GeoJsonObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types - Point,
    MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and
    FeatureCollection.
    """

    #: ``GeoJSON Point`` geometry.
    GEO_JSON_POINT = "Point"
    #: ``GeoJSON MultiPoint`` geometry.
    GEO_JSON_MULTI_POINT = "MultiPoint"
    #: ``GeoJSON LineString`` geometry.
    GEO_JSON_LINE_STRING = "LineString"
    #: ``GeoJSON MultiLineString`` geometry.
    GEO_JSON_MULTI_LINE_STRING = "MultiLineString"
    #: ``GeoJSON Polygon`` geometry.
    GEO_JSON_POLYGON = "Polygon"
    #: ``GeoJSON MultiPolygon`` geometry.
    GEO_JSON_MULTI_POLYGON = "MultiPolygon"
    #: ``GeoJSON GeometryCollection`` geometry.
    GEO_JSON_GEOMETRY_COLLECTION = "GeometryCollection"
    #: ``GeoJSON Feature`` object.
    GEO_JSON_FEATURE = "Feature"
    #: ``GeoJSON FeatureCollection`` object.
    GEO_JSON_FEATURE_COLLECTION = "FeatureCollection"

class OpeningHours(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Shows the hours of operation for the next week, starting with the current day in the local time
    #: of the POI.
    NEXT_SEVEN_DAYS = "nextSevenDays"

class ResponseFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"

class SearchIndexSet(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Address range interpolation.
    ADDR = "Addr"
    #: Geographies.
    GEO = "Geo"
    #: Point Addresses.
    PAD = "PAD"
    #: Points of interest.
    POI = "POI"
    #: Streets.
    STR = "Str"
    #: Cross Streets (Intersections).
    XSTR = "Xstr"

class TextFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"
    #: `The Extensible Markup Language <https://www.w3.org/TR/xml/>`_.
    XML = "xml"
