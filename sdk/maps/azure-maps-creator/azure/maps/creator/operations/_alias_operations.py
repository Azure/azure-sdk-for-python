# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models as _models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class AliasOperations(object):
    """AliasOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.maps.creator.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def create(
        self,
        creator_data_item_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.AliasesCreateResponse"
        """**Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        Creator makes it possible to develop applications based on your private indoor map data using
        Azure Maps API and SDK. `This
        <https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps>`_ article introduces concepts
        and tools that apply to Azure Maps Creator.

        This API allows the caller to create an alias. You can also assign the alias during the create
        request. An alias can reference an ID generated by a creator service, but cannot reference
        another alias ID.

        Submit Create Request
        ^^^^^^^^^^^^^^^^^^^^^

        To create your alias, you will use a ``POST`` request. If you would like to assign the alias
        during the creation, you will pass the ``resourceId`` query parameter.

        Create Alias Response
        ^^^^^^^^^^^^^^^^^^^^^

        The Create API returns a HTTP ``201 Created`` response with the alias resource in the body.

        A sample response from creating an alias:

        .. code-block:: json

           {
             "createdTimestamp": "2020-02-13T21:19:11.123Z",
             "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
             "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
             "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z"
           }.

        :param creator_data_item_id: The unique id that references a creator data item to be aliased.
        :type creator_data_item_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AliasesCreateResponse, or the result of cls(response)
        :rtype: ~azure.maps.creator.models.AliasesCreateResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AliasesCreateResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2.0"
        accept = "application/json"

        # Construct URL
        url = self.create.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if creator_data_item_id is not None:
            query_parameters['creatorDataItemId'] = self._serialize.query("creator_data_item_id", creator_data_item_id, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['Access-Control-Expose-Headers']=self._deserialize('str', response.headers.get('Access-Control-Expose-Headers'))
        deserialized = self._deserialize('AliasesCreateResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    create.metadata = {'url': '/aliases'}  # type: ignore

    def list(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["_models.AliasListResponse"]
        """**Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        Creator makes it possible to develop applications based on your private indoor map data using
        Azure Maps API and SDK. `This
        <https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps>`_ article introduces concepts
        and tools that apply to Azure Maps Creator.

        This API allows the caller to fetch a list of all previously successfully created aliases.

        Submit List Request
        ^^^^^^^^^^^^^^^^^^^

        To list all your aliases, you will issue a ``GET`` request with no additional parameters.

        List Data Response
        ^^^^^^^^^^^^^^^^^^

        The List API returns the complete list of all aliases in ``json`` format. The response contains
        the following details for each alias resource:

        ..

           createdTimestamp - The timestamp that the alias was created. Format yyyy-MM-ddTHH:mm:ss.sssZ
           aliasId - The id for the alias.
           creatorDataItemId - The id for the creator data item that this alias references (could be
        null if the alias has not been assigned).
           lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format
        yyyy-MM-ddTHH:mm:ss.sssZ


        A sample response returning 2 alias resources:

        .. code-block:: json

           {
             "aliases": [
               {
                 "createdTimestamp": "2020-02-13T21:19:11.123Z",
                 "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
                 "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
                 "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z"
               },
               {
                 "createdTimestamp": "2020-02-18T19:53:33.123Z",
                 "aliasId": "1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6",
                 "creatorDataItemId": null,
                 "lastUpdatedTimestamp": "2020-02-18T19:53:33.123Z"
               }
             ]
           }.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either AliasListResponse or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.maps.creator.models.AliasListResponse]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AliasListResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2.0"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']  # type: ignore
                path_format_arguments = {
                    'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                path_format_arguments = {
                    'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('AliasListResponse', pipeline_response)
            list_of_elem = deserialized.aliases
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/aliases'}  # type: ignore

    def assign(
        self,
        alias_id,  # type: str
        creator_data_item_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.AliasListItem"
        """**Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        Creator makes it possible to develop applications based on your private indoor map data using
        Azure Maps API and SDK. `This
        <https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps>`_ article introduces concepts
        and tools that apply to Azure Maps Creator.

        This API allows the caller to assign an alias to reference a resource.

        Submit Assign Request
        ^^^^^^^^^^^^^^^^^^^^^

        To assign your alias to a resource, you will use a ``PUT`` request with the ``aliasId`` in the
        path and the ``creatorDataItemId`` passed as a query parameter.

        Assign Alias Response
        ^^^^^^^^^^^^^^^^^^^^^

        The Assign API returns a HTTP ``200 OK`` response with the updated alias resource in the body,
        if the alias was assigned successfully. A sample of the assign response is

        .. code-block:: json

           {
             "createdTimestamp": "2020-02-13T21:19:11.123Z",
             "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
             "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
             "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z"
           }.

        :param alias_id: The unique id that references an existing alias.
        :type alias_id: str
        :param creator_data_item_id: The unique id that references a creator data item to be aliased.
        :type creator_data_item_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AliasListItem, or the result of cls(response)
        :rtype: ~azure.maps.creator.models.AliasListItem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AliasListItem"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2.0"
        accept = "application/json"

        # Construct URL
        url = self.assign.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'aliasId': self._serialize.url("alias_id", alias_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['creatorDataItemId'] = self._serialize.query("creator_data_item_id", creator_data_item_id, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.put(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('AliasListItem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    assign.metadata = {'url': '/aliases/{aliasId}'}  # type: ignore

    def delete(
        self,
        alias_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """**Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        Creator makes it possible to develop applications based on your private indoor map data using
        Azure Maps API and SDK. `This
        <https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps>`_ article introduces concepts
        and tools that apply to Azure Maps Creator.

        This API allows the caller to delete a previously created alias. You can also use this API to
        delete old/unused aliases to create space for new content.This API does not delete the
        references resource, only the alias referencing the resource.

        Submit Delete Request
        ^^^^^^^^^^^^^^^^^^^^^

        To delete your alias you will issue a ``DELETE`` request where the path will contain the
        ``aliasId`` of the alias to delete.

        Delete Alias Response
        ^^^^^^^^^^^^^^^^^^^^^

        The Delete API returns a HTTP ``204 No Content`` response with an empty body, if the alias was
        deleted successfully.

        :param alias_id: The unique id that references an existing alias.
        :type alias_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2.0"
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'aliasId': self._serialize.url("alias_id", alias_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/aliases/{aliasId}'}  # type: ignore

    def get_details(
        self,
        alias_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.AliasListItem"
        """**Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        Creator makes it possible to develop applications based on your private indoor map data using
        Azure Maps API and SDK. `This
        <https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps>`_ article introduces concepts
        and tools that apply to Azure Maps Creator.

        This API allows the caller to fetch the details of a previously created alias.

        Submit Get Details Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^

        To get the details of your alias, you will issue a ``GET`` request with the ``aliasId`` in the
        path.

        Get Details Response
        ^^^^^^^^^^^^^^^^^^^^

        The Get Details API returns the previously created alias in ``json`` format. The response
        contains the following details for the alias resource:

        ..

           createdTimestamp - The timestamp that the alias was created.
           aliasId - The id for the alias.
           creatorDataItemId - The id for the creator data item that this alias references (could be
        null if the alias has not been assigned).
           lastUpdatedTimestamp - The last time the alias was assigned to a resource.


        Here's a sample response:

        .. code-block:: json

           {
             "createdTimestamp": "2020-02-13T21:19:11.123Z",
             "aliasId": "a8a4b8bb-ecf4-fb27-a618-f41721552766",
             "creatorDataItemId": "e89aebb9-70a3-8fe1-32bb-1fbd0c725f14",
             "lastUpdatedTimestamp": "2020-02-13T21:19:22.123Z"
           }.

        :param alias_id: The unique id that references an existing alias.
        :type alias_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AliasListItem, or the result of cls(response)
        :rtype: ~azure.maps.creator.models.AliasListItem
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AliasListItem"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2.0"
        accept = "application/json"

        # Construct URL
        url = self.get_details.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'aliasId': self._serialize.url("alias_id", alias_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('AliasListItem', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_details.metadata = {'url': '/aliases/{aliasId}'}  # type: ignore
