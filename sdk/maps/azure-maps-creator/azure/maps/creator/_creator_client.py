# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional, Union

    from azure.core.credentials import TokenCredential
    from azure.core.pipeline.transport import HttpRequest, HttpResponse

from ._configuration import CreatorClientConfiguration
from .operations import AliasOperations
from .operations import DataOperations
from .operations import DatasetOperations
from .operations import ConversionOperations
from .operations import FeatureStateOperations
from .operations import SpatialOperations
from .operations import TilesetOperations
from .operations import WFSOperations
from . import models


class CreatorClient(object):
    """APIs for managing aliases in Azure Maps.

    :ivar alias: AliasOperations operations
    :vartype alias: azure.maps.creator.operations.AliasOperations
    :ivar data: DataOperations operations
    :vartype data: azure.maps.creator.operations.DataOperations
    :ivar dataset: DatasetOperations operations
    :vartype dataset: azure.maps.creator.operations.DatasetOperations
    :ivar conversion: ConversionOperations operations
    :vartype conversion: azure.maps.creator.operations.ConversionOperations
    :ivar feature_state: FeatureStateOperations operations
    :vartype feature_state: azure.maps.creator.operations.FeatureStateOperations
    :ivar spatial: SpatialOperations operations
    :vartype spatial: azure.maps.creator.operations.SpatialOperations
    :ivar tileset: TilesetOperations operations
    :vartype tileset: azure.maps.creator.operations.TilesetOperations
    :ivar wfs: WFSOperations operations
    :vartype wfs: azure.maps.creator.operations.WFSOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param x_ms_client_id: Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles <https://aka.ms/amauthdetails>`_ for guidance.
    :type x_ms_client_id: str
    :param geography: This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu.
    :type geography: str or ~azure.maps.creator.models.Geography
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        x_ms_client_id=None,  # type: Optional[str]
        geography="us",  # type: Union[str, "_models.Geography"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        base_url = 'https://{geography}.atlas.microsoft.com'
        self._config = CreatorClientConfiguration(credential, x_ms_client_id, geography, **kwargs)
        self._client = PipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.alias = AliasOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.data = DataOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.dataset = DatasetOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.conversion = ConversionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.feature_state = FeatureStateOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.spatial = SpatialOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.tileset = TilesetOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.wfs = WFSOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def _send_request(self, http_request, **kwargs):
        # type: (HttpRequest, Any) -> HttpResponse
        """Runs the network request through the client's chained policies.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.pipeline.transport.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to True.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.pipeline.transport.HttpResponse
        """
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
        }
        http_request.url = self._client.format_url(http_request.url, **path_format_arguments)
        stream = kwargs.pop("stream", True)
        pipeline_response = self._client._pipeline.run(http_request, stream=stream, **kwargs)
        return pipeline_response.http_response

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> CreatorClient
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
