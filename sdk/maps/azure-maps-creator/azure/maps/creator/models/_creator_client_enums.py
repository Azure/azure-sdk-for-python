# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class DataFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    GEOJSON = "geojson"  #: `GeoJSON <https://tools.ietf.org/html/rfc7946>`_ is a JSON based geospatial data interchange format.
    ZIP = "zip"  #: Compressed data format.
    DWG_ZIP_PACKAGE = "dwgzippackage"  #: ZIP package containing DWG file.

class GeofenceMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ALL = "All"  #: Publish all the query results to Azure Maps account event subscription.
    ENTER_AND_EXIT = "EnterAndExit"  #: Only publish result when user location is considered as crossing geofencing boarder.

class GeographicResourceLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    US = "us"  #: Used to access an Azure Maps Creator resource in the United States.
    EU = "eu"  #: Used to access an Azure Maps Creator resource in Europe.

class Geography(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us
    and eu.
    """

    US = "us"
    EU = "eu"

class GeoJsonGeometryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """type of geometry returned
    """

    GEO_JSON_POINT = "Point"  #: ``GeoJSON Point`` geometry.
    GEO_JSON_MULTI_POINT = "MultiPoint"  #: ``GeoJSON MultiPoint`` geometry.
    GEO_JSON_LINE_STRING = "LineString"  #: ``GeoJSON LineString`` geometry.
    GEO_JSON_MULTI_LINE_STRING = "MultiLineString"  #: ``GeoJSON MultiLineString`` geometry.
    GEO_JSON_POLYGON = "Polygon"  #: ``GeoJSON Polygon`` geometry.
    GEO_JSON_MULTI_POLYGON = "MultiPolygon"  #: ``GeoJSON MultiPolygon`` geometry.
    GEO_JSON_GEOMETRY_COLLECTION = "GeometryCollection"  #: ``GeoJSON GeometryCollection`` geometry.

class GeoJsonObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types - Point,
    MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and
    FeatureCollection.
    """

    GEO_JSON_POINT = "Point"  #: ``GeoJSON Point`` geometry.
    GEO_JSON_MULTI_POINT = "MultiPoint"  #: ``GeoJSON MultiPoint`` geometry.
    GEO_JSON_LINE_STRING = "LineString"  #: ``GeoJSON LineString`` geometry.
    GEO_JSON_MULTI_LINE_STRING = "MultiLineString"  #: ``GeoJSON MultiLineString`` geometry.
    GEO_JSON_POLYGON = "Polygon"  #: ``GeoJSON Polygon`` geometry.
    GEO_JSON_MULTI_POLYGON = "MultiPolygon"  #: ``GeoJSON MultiPolygon`` geometry.
    GEO_JSON_GEOMETRY_COLLECTION = "GeometryCollection"  #: ``GeoJSON GeometryCollection`` geometry.
    GEO_JSON_FEATURE = "Feature"  #: ``GeoJSON Feature`` object.
    GEO_JSON_FEATURE_COLLECTION = "FeatureCollection"  #: ``GeoJSON FeatureCollection`` object.

class JsonFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    JSON = "json"  #: `The JavaScript Object Notation Data Interchange Format <https://tools.ietf.org/html/rfc8259>`_.

class LroStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The status state of the request.
    """

    NOT_STARTED = "NotStarted"  #: The request has not started processing yet.
    RUNNING = "Running"  #: The request has started processing.
    FAILED = "Failed"  #: The request has one or more failures.
    SUCCEEDED = "Succeeded"  #: The request has successfully completed.

class OutputOntology(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    FACILITY2_0 = "facility-2.0"  #: Facility ontology defines how Azure Maps Creator internally stores facility data in a Creator dataset.

class StyleRuleType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of stateset style.
    """

    BOOLEAN = "boolean"  #: Boolean type of stateset style.
    NUMBER = "number"  #: Number type of stateset style.
    STRING = "string"  #: String type of stateset style.

class UploadStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The current upload status of the content.
    """

    PENDING = "Pending"  #: Upload is processing.
    COMPLETED = "Completed"  #: Upload validation and processing completed.
    FAILED = "Failed"  #: Upload validation and/or processing failure.
