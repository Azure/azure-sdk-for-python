# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class GeofenceMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Publish all the query results to Azure Maps account event subscription.
    ALL = "All"
    #: Only publish result when user location is considered as crossing geofencing boarder.
    ENTER_AND_EXIT = "EnterAndExit"

class GeographicResourceLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Used to access an Azure Maps Creator resource in the United States.
    US = "us"
    #: Used to access an Azure Maps Creator resource in Europe.
    EU = "eu"

class Geography(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us
    and eu.
    """

    US = "us"
    EU = "eu"

class GeoJsonGeometryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """type of geometry returned
    """

    #: ``GeoJSON Point`` geometry.
    GEO_JSON_POINT = "Point"
    #: ``GeoJSON MultiPoint`` geometry.
    GEO_JSON_MULTI_POINT = "MultiPoint"
    #: ``GeoJSON LineString`` geometry.
    GEO_JSON_LINE_STRING = "LineString"
    #: ``GeoJSON MultiLineString`` geometry.
    GEO_JSON_MULTI_LINE_STRING = "MultiLineString"
    #: ``GeoJSON Polygon`` geometry.
    GEO_JSON_POLYGON = "Polygon"
    #: ``GeoJSON MultiPolygon`` geometry.
    GEO_JSON_MULTI_POLYGON = "MultiPolygon"
    #: ``GeoJSON GeometryCollection`` geometry.
    GEO_JSON_GEOMETRY_COLLECTION = "GeometryCollection"

class GeoJsonObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types - Point,
    MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and
    FeatureCollection.
    """

    #: ``GeoJSON Point`` geometry.
    GEO_JSON_POINT = "Point"
    #: ``GeoJSON MultiPoint`` geometry.
    GEO_JSON_MULTI_POINT = "MultiPoint"
    #: ``GeoJSON LineString`` geometry.
    GEO_JSON_LINE_STRING = "LineString"
    #: ``GeoJSON MultiLineString`` geometry.
    GEO_JSON_MULTI_LINE_STRING = "MultiLineString"
    #: ``GeoJSON Polygon`` geometry.
    GEO_JSON_POLYGON = "Polygon"
    #: ``GeoJSON MultiPolygon`` geometry.
    GEO_JSON_MULTI_POLYGON = "MultiPolygon"
    #: ``GeoJSON GeometryCollection`` geometry.
    GEO_JSON_GEOMETRY_COLLECTION = "GeometryCollection"
    #: ``GeoJSON Feature`` object.
    GEO_JSON_FEATURE = "Feature"
    #: ``GeoJSON FeatureCollection`` object.
    GEO_JSON_FEATURE_COLLECTION = "FeatureCollection"

class LroStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The status state of the request.
    """

    #: The request has not started processing yet.
    NOT_STARTED = "NotStarted"
    #: The request has started processing.
    RUNNING = "Running"
    #: The request has one or more failures.
    FAILED = "Failed"
    #: The request has successfully completed.
    SUCCEEDED = "Succeeded"

class ResponseFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"

class StyleObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of stateset style.
    """

    #: Boolean type of stateset style.
    BOOLEAN_TYPE_STYLE_RULE = "boolean"
    #: Number type of stateset style.
    NUMBER_TYPE_STYLE_RULE = "number"
    #: String type of stateset style.
    STRING_TYPE_STYLE_RULE = "string"

class UploadDataFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `GeoJSON <https://tools.ietf.org/html/rfc7946>`_ is a JSON based geospatial data interchange
    #: format.
    GEOJSON = "geojson"
    #: Compressed data format.
    ZIP = "zip"
    #: ZIP package containing DWG file.
    DWGZIPPACKAGE = "dwgzippackage"
