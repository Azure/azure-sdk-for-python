# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class GeographicResourceLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Used to access an Azure Maps Creator resource in the United States.
    US = "us"
    #: Used to access an Azure Maps Creator resource in Europe.
    EU = "eu"

class Geography(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us
    and eu.
    """

    US = "us"
    EU = "eu"

class IncidentGeometryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Places incidents precisely on the road.
    ORIGINAL = "original"
    #: Moves the incident slightly (depending on zoom level) to indicate specific road lanes.
    SHIFTED = "shifted"

class ProjectionStandard(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `EPSG900913 <http://docs.openlayers.org/library/spherical_mercator.html>`_.
    EPSG900913 = "EPSG900913"
    #: `EPSG4326 <http://spatialreference.org/ref/epsg/4326/>`_.
    EPSG4326 = "EPSG4326"

class SpeedUnit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Kilometers Per Hour.
    KMPH = "KMPH"
    #: Miles Per Hour.
    MPH = "MPH"

class TextFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"
    #: `The Extensible Markup Language <https://www.w3.org/TR/xml/>`_.
    XML = "xml"

class TileFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: An image in the png format. Supports zoom levels 0 through 18.
    PNG = "png"
    #: Vector graphic in the pbf format. Supports zoom levels 0 through 22.
    PBF = "pbf"

class TrafficFlowSegmentStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ABSOLUTE = "absolute"
    RELATIVE = "relative"
    RELATIVE_DELAY = "relative-delay"

class TrafficFlowTileStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Colors will reflect the absolute speed measured. Absolute speed is the capability to access the
    #: full speed.
    ABSOLUTE = "absolute"
    #: This is the speed relative to free-flow, highlighting areas of congestion visualizing the
    #: traffic flow. Free-flow refers to conditions where there is no congestion and traffic can
    #: follow the speed limits. The most used option to visualize traffic flow on a map.
    RELATIVE = "relative"
    #: Displays relative colors only where they are different from the free-flow speeds. This option
    #: will only highlights areas of congestion.
    RELATIVE_DELAY = "relative-delay"
    #: Displays relative colors but a larger difference from freeflow is required for segments to
    #: change the color. This mode only valid when format is png.
    REDUCED_SENSITIVITY = "reduced-sensitivity"

class TrafficIncidentDetailStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Creates traffic lines with colored chevrons indicating severity.
    S1 = "s1"
    #: Creates plain lines with certain degree of glow.
    S2 = "s2"
    #: Creates plain lines with certain degree of glow.
    S3 = "s3"
    #: Night style.
    NIGHT = "night"

class TrafficIncidentTileStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Creates traffic lines with colored chevrons indicating severity.
    S1 = "s1"
    #: Creates plain lines with certain degree of glow.
    S2 = "s2"
    #: Creates plain lines with certain degree of glow.
    S3 = "s3"
    #: Night style.
    NIGHT = "night"
