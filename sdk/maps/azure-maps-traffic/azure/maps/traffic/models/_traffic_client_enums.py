# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class DelayMagnitude(with_metaclass(_CaseInsensitiveEnumMeta, int, Enum)):
    """The magnitude of delay associated with incident. These values correspond to incident colors in
    the traffic tiles
    """

    UNKNOWN = 0  #: Unknown.
    MINOR = 1  #: Minor.
    MODERATE = 2  #: Moderate.
    MAJOR = 3  #: Major.
    INDEFINITE = 4  #: Indefinite (used for road closures and other indefinite delays).

class IconCategory(with_metaclass(_CaseInsensitiveEnumMeta, int, Enum)):
    """The icon category associated with this incident. Values are numbers in the range 0-13, with the
    following meanings -- 0: Unknown, 1: Accident, 2: Fog, 3: Dangerous Conditions, 4: Rain, 5:
    Ice, 6: Jam, 7: Lane Closed, 8: Road Closed, 9: Road Works, 10: Wind, 11: Flooding, 12: Detour,
    13: Cluster
    """

    UNKNOWN = 0  #: Unknown.
    ACCIDENT = 1  #: Accident.
    FOG = 2  #: Fog.
    DANGEROUS_CONDITIONS = 3  #: Dangerous Conditions.
    RAIN = 4  #: Rain.
    ICE = 5  #: Ice.
    JAM = 6  #: Jam.
    LANE_CLOSED = 7  #: Lane Closed.
    ROAD_CLOSED = 8  #: Road Closed.
    ROAD_WORKS = 9  #: Road Works.
    WIND = 10  #: Wind.
    FLOODING = 11  #: Flooding.
    DETOUR = 12  #: Detour.
    CLUSTER = 13  #: Cluster: Returned if a cluster contains incidents with different icon categories.
    BROKEN_DOWN_VEHICLE = 14  #: Broken Down Vehicle.

class IncidentDetailStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    S1 = "s1"  #: Creates traffic lines with colored chevrons indicating severity.
    S2 = "s2"  #: Creates plain lines with certain degree of glow.
    S3 = "s3"  #: Creates plain lines with certain degree of glow, different than the s2 style.
    NIGHT = "night"  #: Night style.

class IncidentGeometryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ORIGINAL = "original"  #: Places incidents precisely on the road.
    SHIFTED = "shifted"  #: Moves the incident slightly (depending on zoom level) to indicate specific road lanes.

class ProjectionStandard(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    EPSG900913 = "EPSG900913"  #: `EPSG900913 <http://docs.openlayers.org/library/spherical_mercator.html>`_.
    EPSG4326 = "EPSG4326"  #: `EPSG4326 <http://spatialreference.org/ref/epsg/4326/>`_.

class ResponseFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    JSON = "json"  #: `The JavaScript Object Notation Data Interchange Format <https://tools.ietf.org/html/rfc8259>`_.
    XML = "xml"  #: `The Extensible Markup Language <https://www.w3.org/TR/xml/>`_.

class SpeedUnit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    KMPH = "KMPH"  #: Kilometers Per Hour.
    MPH = "MPH"  #: Miles Per Hour.

class TileFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    PNG = "png"  #: An image in the png format. Supports zoom levels 0 through 18.
    PBF = "pbf"  #: Vector graphic in the pbf format. Supports zoom levels 0 through 22.

class TrafficFlowSegmentStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ABSOLUTE = "absolute"
    RELATIVE = "relative"
    RELATIVE_DELAY = "relative-delay"

class TrafficFlowTileStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    ABSOLUTE = "absolute"  #: Colors will reflect the absolute speed measured. Absolute speed is the capability to access the full speed.
    RELATIVE = "relative"  #: This is the speed relative to free-flow, highlighting areas of congestion visualizing the traffic flow. Free-flow refers to conditions where there is no congestion and traffic can follow the speed limits. The most used option to visualize traffic flow on a map.
    RELATIVE_DELAY = "relative-delay"  #: Displays relative colors only where they are different from the free-flow speeds. This option will only highlights areas of congestion.
    REDUCED_SENSITIVITY = "reduced-sensitivity"  #: Displays relative colors but a larger difference from freeflow is required for segments to change the color. This mode only valid when format is png.

class TrafficIncidentTileStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    S1 = "s1"  #: Creates traffic lines with colored chevrons indicating severity.
    S2 = "s2"  #: Creates plain lines with certain degree of glow.
    S3 = "s3"  #: Creates plain lines with certain degree of glow, different from the s2 style.
    NIGHT = "night"  #: Night style.
