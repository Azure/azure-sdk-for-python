{
    "chosen_version": "1.0",
    "total_api_version_list": ["1.0"],
    "client": {
        "name": "ElevationClient",
        "filename": "_elevation_client",
        "description": "The Azure Maps Elevation API provides an HTTP interface to query elevation data on the  surface of the Earth. Elevation data can be retrieved at specific locations by sending  lat/lon coordinates, by defining an ordered set of vertices that form a Polyline and a  number of sample points along the length of a Polyline, or by defining a bounding box  that consists of equally spaced vertices as rows and columns. The vertical datum is EPSG:3855.  This datum uses the EGM2008 geoid model applied to the WGS84 ellipsoid as its zero height  reference surface. The vertical unit is measured in meters, the spatial resolution of the  elevation data is 0.8 arc-second for global coverage (~24 meters).",
        "base_url": "\u0027https://atlas.microsoft.com\u0027",
        "custom_base_url": null,
        "azure_arm": false,
        "has_lro_operations": false,
        "client_side_validation": false
    },
    "global_parameters": {
        "sync": {
            "credential": {
                "signature": "credential,  # type: \"TokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials.TokenCredential",
                "required": true
            },
            "client_id": {
                "signature": "client_id=None,  # type: Optional[str]",
                "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles \u003chttps://aka.ms/amauthdetails\u003e`_ for guidance.",
                "docstring_type": "str",
                "required": false
            }
        },
        "async": {
            "credential": {
                "signature": "credential,  # type: \"AsyncTokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials_async.AsyncTokenCredential",
                "required": true
            },
            "client_id": {
                "signature": "client_id=None,  # type: Optional[str]",
                "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles \u003chttps://aka.ms/amauthdetails\u003e`_ for guidance.",
                "docstring_type": "str",
                "required": false
            }
        },
        "constant": {
        },
        "call": "credential, client_id"
    },
    "config": {
        "credential": true,
        "credential_scopes": ["https://atlas.microsoft.com/.default"],
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true,
        "credential_key_header_name": null
    },
    "operation_groups": {
    },
    "operation_mixins": {
        "get_data_for_points" : {
            "sync": {
                "signature": "def get_data_for_points(\n    self,\n    points,  # type: List[str]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Get Elevation Data on One or More Points.\n\n**Applies to**\\ : S1 pricing tier.\n\n The Get Data for Points API provides elevation data for one or more points.  A point is\ndefined in lat,long coordinate format.\n\n Due to the URL character  length limit of 2048, it\u0027s not possible to pass more than 100\ncoordinates  as a pipeline delimited string in a URL GET request. If you intend to pass  more\nthan 100 coordinates as a pipeline delimited string, use the `POST Data\n For Points \u003chttps://docs.microsoft.com/rest/api/maps/elevation/postdataforpoints\u003e`_.\n\n The result will be in the same sequence of points listed in the request.\n\n:param points: The string representation of a list of points. A point is defined in lon/lat\n WGS84 coordinate reference system format.  If multiple points are requested, each of the points\n in a list should be separated by the pipe (\u0027|\u0027) character.  The maximum number of points that\n can be requested in a single request is 2,000. The resolution of the elevation  data will be\n the highest for a single point and will decrease if multiple points are spread further apart.\n:type points: list[str]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_data_for_points(\n    self,\n    points: List[str],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    **kwargs\n) -\u003e \"models.ElevationResult\":\n",
                "doc": "\"\"\"Get Elevation Data on One or More Points.\n\n**Applies to**\\ : S1 pricing tier.\n\n The Get Data for Points API provides elevation data for one or more points.  A point is\ndefined in lat,long coordinate format.\n\n Due to the URL character  length limit of 2048, it\u0027s not possible to pass more than 100\ncoordinates  as a pipeline delimited string in a URL GET request. If you intend to pass  more\nthan 100 coordinates as a pipeline delimited string, use the `POST Data\n For Points \u003chttps://docs.microsoft.com/rest/api/maps/elevation/postdataforpoints\u003e`_.\n\n The result will be in the same sequence of points listed in the request.\n\n:param points: The string representation of a list of points. A point is defined in lon/lat\n WGS84 coordinate reference system format.  If multiple points are requested, each of the points\n in a list should be separated by the pipe (\u0027|\u0027) character.  The maximum number of points that\n can be requested in a single request is 2,000. The resolution of the elevation  data will be\n the highest for a single point and will decrease if multiple points are spread further apart.\n:type points: list[str]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "points, format"
        },
        "post_data_for_points" : {
            "sync": {
                "signature": "def post_data_for_points(\n    self,\n    points,  # type: List[\"models.LatLongPairAbbreviated\"]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Query Elevation Data for Multiple Points.\n\n**Applies to**\\ : S1 pricing tier.\n\n The Post Data for Points API provides elevation data for multiple points.  A point is defined\nlon/lat coordinate format.\n\n Use the POST endpoint only if you intend to pass multiple points in the request. If you intend\nto pass  a single coordinate into the API, use the `GET Data For Points API\n\u003chttps://docs.microsoft.com/rest/api/maps/elevation/getdataforpoints\u003e`_.\n\n The result will be in the same sequence of points listed in the request.\n\n:param points: The string representation of a list of points. A point is defined in lon/lat\n WGS84 coordinate reference system format.  Each points in a list should be separated by the\n pipe (\u0027|\u0027) character. The number of points that can be requested in  a POST request ranges from\n 2 to 2,000. The resolution of the elevation data will be the highest for a single point  and\n will decrease if multiple points are spread further apart.\n:type points: list[~azure.maps.elevation.models.LatLongPairAbbreviated]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def post_data_for_points(\n    self,\n    points: List[\"models.LatLongPairAbbreviated\"],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    **kwargs\n) -\u003e \"models.ElevationResult\":\n",
                "doc": "\"\"\"Query Elevation Data for Multiple Points.\n\n**Applies to**\\ : S1 pricing tier.\n\n The Post Data for Points API provides elevation data for multiple points.  A point is defined\nlon/lat coordinate format.\n\n Use the POST endpoint only if you intend to pass multiple points in the request. If you intend\nto pass  a single coordinate into the API, use the `GET Data For Points API\n\u003chttps://docs.microsoft.com/rest/api/maps/elevation/getdataforpoints\u003e`_.\n\n The result will be in the same sequence of points listed in the request.\n\n:param points: The string representation of a list of points. A point is defined in lon/lat\n WGS84 coordinate reference system format.  Each points in a list should be separated by the\n pipe (\u0027|\u0027) character. The number of points that can be requested in  a POST request ranges from\n 2 to 2,000. The resolution of the elevation data will be the highest for a single point  and\n will decrease if multiple points are spread further apart.\n:type points: list[~azure.maps.elevation.models.LatLongPairAbbreviated]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "points, format"
        },
        "get_data_for_polyline" : {
            "sync": {
                "signature": "def get_data_for_polyline(\n    self,\n    lines,  # type: List[str]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    samples=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Get Elevation Data Along a Polyline.\n\n**Applies to**\\ : S1 pricing tier.\n\n The Get Data for Polyline API provides elevation data along a polyline.\n\n A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe\n(\u0027|\u0027) character. In addition to passing in endpoints, customers can specify the number of\nsample points that will be used to divide polyline into equally spaced segments.\n\n Elevation data at both start and endpoints, as well as equally spaced points along the\npolyline will be returned. The results will be listed in the direction from the first endpoint\ntowards the last endpoint. A line between two endpoints is a straight Cartesian line, the\nshortest line between those two points in the coordinate reference system. Note that the point\nis  chosen based on Euclidean distance and may markedly differ from the geodesic path along the\ncurved  surface of the reference ellipsoid.\n\n:param lines: The string representation of a polyline path. A polyline is defined by endpoint\n coordinates,  with each endpoint separated by a pipe (\u0027|\u0027) character. The polyline should be\n defined in the  following format: ``[longitude_point1, latitude_point1 | longitude_point2,\n latitude_point2, ...,  longitude_pointN, latitude_pointN]``.\n\n  The longitude and latitude values refer to the World Geodetic  System (WGS84) coordinate\n reference system. The resolution of the data used to compute the  elevation depends on the\n distance between the endpoints.\n:type lines: list[str]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:param samples: The samples parameter specifies the number of equally spaced points at which\n elevation values  should be provided along a polyline path. The number of samples should range\n from 2 to 2,000. Default value is 10.\n:type samples: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_data_for_polyline(\n    self,\n    lines: List[str],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    samples: Optional[int] = None,\n    **kwargs\n) -\u003e \"models.ElevationResult\":\n",
                "doc": "\"\"\"Get Elevation Data Along a Polyline.\n\n**Applies to**\\ : S1 pricing tier.\n\n The Get Data for Polyline API provides elevation data along a polyline.\n\n A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe\n(\u0027|\u0027) character. In addition to passing in endpoints, customers can specify the number of\nsample points that will be used to divide polyline into equally spaced segments.\n\n Elevation data at both start and endpoints, as well as equally spaced points along the\npolyline will be returned. The results will be listed in the direction from the first endpoint\ntowards the last endpoint. A line between two endpoints is a straight Cartesian line, the\nshortest line between those two points in the coordinate reference system. Note that the point\nis  chosen based on Euclidean distance and may markedly differ from the geodesic path along the\ncurved  surface of the reference ellipsoid.\n\n:param lines: The string representation of a polyline path. A polyline is defined by endpoint\n coordinates,  with each endpoint separated by a pipe (\u0027|\u0027) character. The polyline should be\n defined in the  following format: ``[longitude_point1, latitude_point1 | longitude_point2,\n latitude_point2, ...,  longitude_pointN, latitude_pointN]``.\n\n  The longitude and latitude values refer to the World Geodetic  System (WGS84) coordinate\n reference system. The resolution of the data used to compute the  elevation depends on the\n distance between the endpoints.\n:type lines: list[str]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:param samples: The samples parameter specifies the number of equally spaced points at which\n elevation values  should be provided along a polyline path. The number of samples should range\n from 2 to 2,000. Default value is 10.\n:type samples: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "lines, format, samples"
        },
        "post_data_for_polyline" : {
            "sync": {
                "signature": "def post_data_for_polyline(\n    self,\n    polyline,  # type: List[\"models.LatLongPairAbbreviated\"]\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    samples=None,  # type: Optional[int]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Query Elevation Data Along a Polyline.\n\n**Applies to**\\ : S1 pricing tier.\n\n The Post Data for Polyline API provides elevation data along a polyline.\n\n A polyline is defined by  passing in between 2 and N endpoint coordinates separated by a pipe\n(\u0027|\u0027) character. In addition  to passing in endpoints, customers can specify the number of\nsample points that will be used to divide polyline into equally spaced segments.\n\n Elevation data at both start and end points, as well as equally spaced  points along the\npolyline will be returned. The results will be listed in the direction from the first endpoint\ntowards the last endpoint. A line between two endpoints is a straight Cartesian line, the\nshortest line between those two points in the coordinate reference system. Note that the point\nis  chosen based on Euclidean distance and may markedly differ from the geodesic path along the\ncurved surface of the reference ellipsoid.\n\n:param polyline: The string representation of a polyline path. A polyline is defined by\n endpoint coordinates,  with each endpoint separated by a pipe (\u0027|\u0027) character. The polyline\n should be defined in the  following format: ``[longitude_point1, latitude_point1 |\n longitude_point2, latitude_point2, ...,  longitude_pointN, latitude_pointN]``. The longitude\n and latitude values refer to the World Geodetic  System (WGS84) coordinate reference system.\n The resolution of the data used to compute the  elevation will depend on the distance between\n the endpoints.\n:type polyline: list[~azure.maps.elevation.models.LatLongPairAbbreviated]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:param samples: The samples parameter specifies the number of equally spaced points at which\n elevation values  should be provided along a polyline path. The number of samples should range\n from 2 to 2,000. Default value is 10.\n:type samples: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def post_data_for_polyline(\n    self,\n    polyline: List[\"models.LatLongPairAbbreviated\"],\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    samples: Optional[int] = None,\n    **kwargs\n) -\u003e \"models.ElevationResult\":\n",
                "doc": "\"\"\"Query Elevation Data Along a Polyline.\n\n**Applies to**\\ : S1 pricing tier.\n\n The Post Data for Polyline API provides elevation data along a polyline.\n\n A polyline is defined by  passing in between 2 and N endpoint coordinates separated by a pipe\n(\u0027|\u0027) character. In addition  to passing in endpoints, customers can specify the number of\nsample points that will be used to divide polyline into equally spaced segments.\n\n Elevation data at both start and end points, as well as equally spaced  points along the\npolyline will be returned. The results will be listed in the direction from the first endpoint\ntowards the last endpoint. A line between two endpoints is a straight Cartesian line, the\nshortest line between those two points in the coordinate reference system. Note that the point\nis  chosen based on Euclidean distance and may markedly differ from the geodesic path along the\ncurved surface of the reference ellipsoid.\n\n:param polyline: The string representation of a polyline path. A polyline is defined by\n endpoint coordinates,  with each endpoint separated by a pipe (\u0027|\u0027) character. The polyline\n should be defined in the  following format: ``[longitude_point1, latitude_point1 |\n longitude_point2, latitude_point2, ...,  longitude_pointN, latitude_pointN]``. The longitude\n and latitude values refer to the World Geodetic  System (WGS84) coordinate reference system.\n The resolution of the data used to compute the  elevation will depend on the distance between\n the endpoints.\n:type polyline: list[~azure.maps.elevation.models.LatLongPairAbbreviated]\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:param samples: The samples parameter specifies the number of equally spaced points at which\n elevation values  should be provided along a polyline path. The number of samples should range\n from 2 to 2,000. Default value is 10.\n:type samples: int\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "polyline, format, samples"
        },
        "get_data_for_bounding_box" : {
            "sync": {
                "signature": "def get_data_for_bounding_box(\n    self,\n    bounds,  # type: List[float]\n    rows,  # type: int\n    columns,  # type: int\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Get Elevation Data at Equally Spaced Locations Within a Bounding Box.\n\n**Applies to**\\ : S1 pricing tier.\n\nThe Get Data for Bounding Box API provides elevation data at equally spaced locations within a\nbounding box. A bounding box is defined by the coordinates for two corners (southwest,\nnortheast) and then subsequently  divided into rows and columns.\n\n Elevations are returned for the vertices of the grid created by the rows and  columns. Up to\n2,000 elevations can be returned in a single request. The returned elevation values are\nordered,  starting at the southwest corner, and then proceeding west to east along the row. At\nthe end of the row,  it moves north to the next row, and repeats the process until it reaches\nthe far northeast corner.\n\n:param bounds: The string that represents the rectangular area of a bounding box. The bounds\n parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of\n the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The\n string is presented in the following  format: ``[SouthwestCorner_Longitude,\n SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]``.\n:type bounds: list[float]\n:param rows: Specifies the number of rows to use to divide the bounding box area into a grid.\n The number of vertices (rows x columns) in the grid should be less than 2,000.\n:type rows: int\n:param columns: Specifies the number of columns to use to divide the bounding box area into a\n grid. The number of vertices (rows x columns) in the grid should be less than 2,000.\n:type columns: int\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_data_for_bounding_box(\n    self,\n    bounds: List[float],\n    rows: int,\n    columns: int,\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    **kwargs\n) -\u003e \"models.ElevationResult\":\n",
                "doc": "\"\"\"Get Elevation Data at Equally Spaced Locations Within a Bounding Box.\n\n**Applies to**\\ : S1 pricing tier.\n\nThe Get Data for Bounding Box API provides elevation data at equally spaced locations within a\nbounding box. A bounding box is defined by the coordinates for two corners (southwest,\nnortheast) and then subsequently  divided into rows and columns.\n\n Elevations are returned for the vertices of the grid created by the rows and  columns. Up to\n2,000 elevations can be returned in a single request. The returned elevation values are\nordered,  starting at the southwest corner, and then proceeding west to east along the row. At\nthe end of the row,  it moves north to the next row, and repeats the process until it reaches\nthe far northeast corner.\n\n:param bounds: The string that represents the rectangular area of a bounding box. The bounds\n parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of\n the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The\n string is presented in the following  format: ``[SouthwestCorner_Longitude,\n SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]``.\n:type bounds: list[float]\n:param rows: Specifies the number of rows to use to divide the bounding box area into a grid.\n The number of vertices (rows x columns) in the grid should be less than 2,000.\n:type rows: int\n:param columns: Specifies the number of columns to use to divide the bounding box area into a\n grid. The number of vertices (rows x columns) in the grid should be less than 2,000.\n:type columns: int\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.elevation.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ElevationResult, or the result of cls(response)\n:rtype: ~azure.maps.elevation.models.ElevationResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "bounds, rows, columns, format"
        }
    },
    "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"List\", \"Optional\", \"TypeVar\", \"Union\"]}}}",
    "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"List\", \"Optional\", \"TypeVar\", \"Union\"]}}}"
}