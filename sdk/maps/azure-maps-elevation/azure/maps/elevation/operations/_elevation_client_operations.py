# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class ElevationClientOperationsMixin(object):

    def get_data_for_points(
        self,
        points,  # type: List[str]
        format="json",  # type: Union[str, "models.JsonFormat"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ElevationResult"
        """Get Elevation Data on One or More Points.

        **Applies to**\ : S1 pricing tier.

         The Get Data for Points API provides elevation data for one or more points.  A point is
        defined in lat,long coordinate format.

         Due to the URL character  length limit of 2048, it's not possible to pass more than 100
        coordinates  as a pipeline delimited string in a URL GET request. If you intend to pass  more
        than 100 coordinates as a pipeline delimited string, use the `POST Data
         For Points <https://docs.microsoft.com/rest/api/maps/elevation/postdataforpoints>`_.

         The result will be in the same sequence of points listed in the request.

        :param points: The string representation of a list of points. A point is defined in lon/lat
         WGS84 coordinate reference system format.  If multiple points are requested, each of the points
         in a list should be separated by the pipe ('|') character.  The maximum number of points that
         can be requested in a single request is 2,000. The resolution of the elevation  data will be
         the highest for a single point and will decrease if multiple points are spread further apart.
        :type points: list[str]
        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.elevation.models.JsonFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ElevationResult, or the result of cls(response)
        :rtype: ~azure.maps.elevation.models.ElevationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ElevationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_data_for_points.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['points'] = self._serialize.query("points", points, '[str]', skip_quote=True, div='|')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ElevationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_data_for_points.metadata = {'url': '/elevation/point/{format}'}  # type: ignore

    def post_data_for_points(
        self,
        points,  # type: List["models.LatLongPairAbbreviated"]
        format="json",  # type: Union[str, "models.JsonFormat"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ElevationResult"
        """Query Elevation Data for Multiple Points.

        **Applies to**\ : S1 pricing tier.

         The Post Data for Points API provides elevation data for multiple points.  A point is defined
        lon/lat coordinate format.

         Use the POST endpoint only if you intend to pass multiple points in the request. If you intend
        to pass  a single coordinate into the API, use the `GET Data For Points API
        <https://docs.microsoft.com/rest/api/maps/elevation/getdataforpoints>`_.

         The result will be in the same sequence of points listed in the request.

        :param points: The string representation of a list of points. A point is defined in lon/lat
         WGS84 coordinate reference system format.  Each points in a list should be separated by the
         pipe ('|') character. The number of points that can be requested in  a POST request ranges from
         2 to 2,000. The resolution of the elevation data will be the highest for a single point  and
         will decrease if multiple points are spread further apart.
        :type points: list[~azure.maps.elevation.models.LatLongPairAbbreviated]
        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.elevation.models.JsonFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ElevationResult, or the result of cls(response)
        :rtype: ~azure.maps.elevation.models.ElevationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ElevationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.post_data_for_points.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(points, '[LatLongPairAbbreviated]')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ElevationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    post_data_for_points.metadata = {'url': '/elevation/point/{format}'}  # type: ignore

    def get_data_for_polyline(
        self,
        lines,  # type: List[str]
        format="json",  # type: Union[str, "models.JsonFormat"]
        samples=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ElevationResult"
        """Get Elevation Data Along a Polyline.

        **Applies to**\ : S1 pricing tier.

         The Get Data for Polyline API provides elevation data along a polyline.

         A polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe
        ('|') character. In addition to passing in endpoints, customers can specify the number of
        sample points that will be used to divide polyline into equally spaced segments.

         Elevation data at both start and endpoints, as well as equally spaced points along the
        polyline will be returned. The results will be listed in the direction from the first endpoint
        towards the last endpoint. A line between two endpoints is a straight Cartesian line, the
        shortest line between those two points in the coordinate reference system. Note that the point
        is  chosen based on Euclidean distance and may markedly differ from the geodesic path along the
        curved  surface of the reference ellipsoid.

        :param lines: The string representation of a polyline path. A polyline is defined by endpoint
         coordinates,  with each endpoint separated by a pipe ('|') character. The polyline should be
         defined in the  following format: ``[longitude_point1, latitude_point1 | longitude_point2,
         latitude_point2, ...,  longitude_pointN, latitude_pointN]``.

          The longitude and latitude values refer to the World Geodetic  System (WGS84) coordinate
         reference system. The resolution of the data used to compute the  elevation depends on the
         distance between the endpoints.
        :type lines: list[str]
        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.elevation.models.JsonFormat
        :param samples: The samples parameter specifies the number of equally spaced points at which
         elevation values  should be provided along a polyline path. The number of samples should range
         from 2 to 2,000. Default value is 10.
        :type samples: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ElevationResult, or the result of cls(response)
        :rtype: ~azure.maps.elevation.models.ElevationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ElevationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_data_for_polyline.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['lines'] = self._serialize.query("lines", lines, '[str]', skip_quote=True, div='|')
        if samples is not None:
            query_parameters['samples'] = self._serialize.query("samples", samples, 'int', maximum=2000, minimum=2)

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ElevationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_data_for_polyline.metadata = {'url': '/elevation/line/{format}'}  # type: ignore

    def post_data_for_polyline(
        self,
        polyline,  # type: List["models.LatLongPairAbbreviated"]
        format="json",  # type: Union[str, "models.JsonFormat"]
        samples=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ElevationResult"
        """Query Elevation Data Along a Polyline.

        **Applies to**\ : S1 pricing tier.

         The Post Data for Polyline API provides elevation data along a polyline.

         A polyline is defined by  passing in between 2 and N endpoint coordinates separated by a pipe
        ('|') character. In addition  to passing in endpoints, customers can specify the number of
        sample points that will be used to divide polyline into equally spaced segments.

         Elevation data at both start and end points, as well as equally spaced  points along the
        polyline will be returned. The results will be listed in the direction from the first endpoint
        towards the last endpoint. A line between two endpoints is a straight Cartesian line, the
        shortest line between those two points in the coordinate reference system. Note that the point
        is  chosen based on Euclidean distance and may markedly differ from the geodesic path along the
        curved surface of the reference ellipsoid.

        :param polyline: The string representation of a polyline path. A polyline is defined by
         endpoint coordinates,  with each endpoint separated by a pipe ('|') character. The polyline
         should be defined in the  following format: ``[longitude_point1, latitude_point1 |
         longitude_point2, latitude_point2, ...,  longitude_pointN, latitude_pointN]``. The longitude
         and latitude values refer to the World Geodetic  System (WGS84) coordinate reference system.
         The resolution of the data used to compute the  elevation will depend on the distance between
         the endpoints.
        :type polyline: list[~azure.maps.elevation.models.LatLongPairAbbreviated]
        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.elevation.models.JsonFormat
        :param samples: The samples parameter specifies the number of equally spaced points at which
         elevation values  should be provided along a polyline path. The number of samples should range
         from 2 to 2,000. Default value is 10.
        :type samples: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ElevationResult, or the result of cls(response)
        :rtype: ~azure.maps.elevation.models.ElevationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ElevationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.post_data_for_polyline.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if samples is not None:
            query_parameters['samples'] = self._serialize.query("samples", samples, 'int', maximum=2000, minimum=2)

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(polyline, '[LatLongPairAbbreviated]')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ElevationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    post_data_for_polyline.metadata = {'url': '/elevation/line/{format}'}  # type: ignore

    def get_data_for_bounding_box(
        self,
        bounds,  # type: List[float]
        rows,  # type: int
        columns,  # type: int
        format="json",  # type: Union[str, "models.JsonFormat"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.ElevationResult"
        """Get Elevation Data at Equally Spaced Locations Within a Bounding Box.

        **Applies to**\ : S1 pricing tier.

        The Get Data for Bounding Box API provides elevation data at equally spaced locations within a
        bounding box. A bounding box is defined by the coordinates for two corners (southwest,
        northeast) and then subsequently  divided into rows and columns.

         Elevations are returned for the vertices of the grid created by the rows and  columns. Up to
        2,000 elevations can be returned in a single request. The returned elevation values are
        ordered,  starting at the southwest corner, and then proceeding west to east along the row. At
        the end of the row,  it moves north to the next row, and repeats the process until it reaches
        the far northeast corner.

        :param bounds: The string that represents the rectangular area of a bounding box. The bounds
         parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of
         the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The
         string is presented in the following  format: ``[SouthwestCorner_Longitude,
         SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]``.
        :type bounds: list[float]
        :param rows: Specifies the number of rows to use to divide the bounding box area into a grid.
         The number of vertices (rows x columns) in the grid should be less than 2,000.
        :type rows: int
        :param columns: Specifies the number of columns to use to divide the bounding box area into a
         grid. The number of vertices (rows x columns) in the grid should be less than 2,000.
        :type columns: int
        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.elevation.models.JsonFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ElevationResult, or the result of cls(response)
        :rtype: ~azure.maps.elevation.models.ElevationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.ElevationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_data_for_bounding_box.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['bounds'] = self._serialize.query("bounds", bounds, '[float]', div=',')
        query_parameters['rows'] = self._serialize.query("rows", rows, 'int', maximum=1000, minimum=2)
        query_parameters['columns'] = self._serialize.query("columns", columns, 'int', maximum=1000, minimum=2)

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ElevationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_data_for_bounding_box.metadata = {'url': '/elevation/lattice/{format}'}  # type: ignore
