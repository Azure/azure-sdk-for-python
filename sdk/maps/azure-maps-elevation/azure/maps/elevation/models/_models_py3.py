# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Elevation(msrest.serialization.Model):
    """The elevation data.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param coordinate: A location represented as a latitude and longitude.
    :type coordinate: ~azure.maps.elevation.models.LatLongPair
    :ivar elevation_in_meter: The elevation value in meters.
    :vartype elevation_in_meter: float
    """

    _validation = {
        'elevation_in_meter': {'readonly': True},
    }

    _attribute_map = {
        'coordinate': {'key': 'coordinate', 'type': 'LatLongPair'},
        'elevation_in_meter': {'key': 'elevationInMeter', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        coordinate: Optional["LatLongPair"] = None,
        **kwargs
    ):
        super(Elevation, self).__init__(**kwargs)
        self.coordinate = coordinate
        self.elevation_in_meter = None


class ElevationResult(msrest.serialization.Model):
    """The response from a successful Get Data for Bounding Box API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar elevations: The response for point/points elevation API. The result will be in same
     sequence of points listed in request.
    :vartype elevations: list[~azure.maps.elevation.models.Elevation]
    """

    _validation = {
        'elevations': {'readonly': True},
    }

    _attribute_map = {
        'elevations': {'key': 'data', 'type': '[Elevation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ElevationResult, self).__init__(**kwargs)
        self.elevations = None


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.maps.elevation.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.maps.elevation.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :param error: The error object.
    :type error: ~azure.maps.elevation.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorDetail"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class LatLongPair(msrest.serialization.Model):
    """A location represented as a latitude and longitude.

    :param latitude: Latitude property.
    :type latitude: float
    :param longitude: Longitude property.
    :type longitude: float
    """

    _attribute_map = {
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        latitude: Optional[float] = None,
        longitude: Optional[float] = None,
        **kwargs
    ):
        super(LatLongPair, self).__init__(**kwargs)
        self.latitude = latitude
        self.longitude = longitude


class LatLongPairAbbreviated(msrest.serialization.Model):
    """A location represented as a latitude and longitude using short names 'lat' & 'lon'.

    :param lat: Latitude property.
    :type lat: float
    :param lon: Longitude property.
    :type lon: float
    """

    _attribute_map = {
        'lat': {'key': 'lat', 'type': 'float'},
        'lon': {'key': 'lon', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        lat: Optional[float] = None,
        lon: Optional[float] = None,
        **kwargs
    ):
        super(LatLongPairAbbreviated, self).__init__(**kwargs)
        self.lat = lat
        self.lon = lon
