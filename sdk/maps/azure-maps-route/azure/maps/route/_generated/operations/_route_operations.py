# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling

from .. import models as _models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class RouteOperations(object):
    """RouteOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.maps.route.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def _post_route_matrix_initial(
        self,
        format,  # type: Union[str, "_models.ResponseFormat"]
        post_route_matrix_request_body,  # type: "_models.PostRouteMatrixRequestBody"
        wait_for_results=None,  # type: Optional[bool]
        compute_travel_time_for=None,  # type: Optional[Union[str, "_models.ComputeTravelTimeFor"]]
        section_type=None,  # type: Optional[Union[str, "_models.SectionType"]]
        arrive_at=None,  # type: Optional[datetime.datetime]
        depart_at=None,  # type: Optional[datetime.datetime]
        vehicle_axle_weight=None,  # type: Optional[int]
        vehicle_length=None,  # type: Optional[float]
        vehicle_height=None,  # type: Optional[float]
        vehicle_width=None,  # type: Optional[float]
        vehicle_max_speed=None,  # type: Optional[int]
        vehicle_weight=None,  # type: Optional[int]
        windingness=None,  # type: Optional[Union[str, "_models.WindingnessLevel"]]
        hilliness=None,  # type: Optional[Union[str, "_models.HillinessDegree"]]
        travel_mode=None,  # type: Optional[Union[str, "_models.TravelMode"]]
        avoid=None,  # type: Optional[List[Union[str, "_models.RouteAvoidType"]]]
        traffic=None,  # type: Optional[bool]
        route_type=None,  # type: Optional[Union[str, "_models.RouteType"]]
        vehicle_load_type=None,  # type: Optional[Union[str, "_models.VehicleLoadType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["_models.RouteMatrixResponse"]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.RouteMatrixResponse"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self._post_route_matrix_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if wait_for_results is not None:
            query_parameters['waitForResults'] = self._serialize.query("wait_for_results", wait_for_results, 'bool')
        if compute_travel_time_for is not None:
            query_parameters['computeTravelTimeFor'] = self._serialize.query("compute_travel_time_for", compute_travel_time_for, 'str')
        if section_type is not None:
            query_parameters['sectionType'] = self._serialize.query("section_type", section_type, 'str')
        if arrive_at is not None:
            query_parameters['arriveAt'] = self._serialize.query("arrive_at", arrive_at, 'iso-8601')
        if depart_at is not None:
            query_parameters['departAt'] = self._serialize.query("depart_at", depart_at, 'iso-8601')
        if vehicle_axle_weight is not None:
            query_parameters['vehicleAxleWeight'] = self._serialize.query("vehicle_axle_weight", vehicle_axle_weight, 'int')
        if vehicle_length is not None:
            query_parameters['vehicleLength'] = self._serialize.query("vehicle_length", vehicle_length, 'float')
        if vehicle_height is not None:
            query_parameters['vehicleHeight'] = self._serialize.query("vehicle_height", vehicle_height, 'float')
        if vehicle_width is not None:
            query_parameters['vehicleWidth'] = self._serialize.query("vehicle_width", vehicle_width, 'float')
        if vehicle_max_speed is not None:
            query_parameters['vehicleMaxSpeed'] = self._serialize.query("vehicle_max_speed", vehicle_max_speed, 'int')
        if vehicle_weight is not None:
            query_parameters['vehicleWeight'] = self._serialize.query("vehicle_weight", vehicle_weight, 'int')
        if windingness is not None:
            query_parameters['windingness'] = self._serialize.query("windingness", windingness, 'str')
        if hilliness is not None:
            query_parameters['hilliness'] = self._serialize.query("hilliness", hilliness, 'str')
        if travel_mode is not None:
            query_parameters['travelMode'] = self._serialize.query("travel_mode", travel_mode, 'str')
        if avoid is not None:
            query_parameters['avoid'] = [self._serialize.query("avoid", q, 'str') if q is not None else '' for q in avoid]
        if traffic is not None:
            query_parameters['traffic'] = self._serialize.query("traffic", traffic, 'bool')
        if route_type is not None:
            query_parameters['routeType'] = self._serialize.query("route_type", route_type, 'str')
        if vehicle_load_type is not None:
            query_parameters['vehicleLoadType'] = self._serialize.query("vehicle_load_type", vehicle_load_type, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(post_route_matrix_request_body, 'PostRouteMatrixRequestBody')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('RouteMatrixResponse', pipeline_response)

        if response.status_code == 202:
            response_headers['Location']=self._deserialize('str', response.headers.get('Location'))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    _post_route_matrix_initial.metadata = {'url': '/route/matrix/{format}'}  # type: ignore

    def begin_post_route_matrix(
        self,
        format,  # type: Union[str, "_models.ResponseFormat"]
        post_route_matrix_request_body,  # type: "_models.PostRouteMatrixRequestBody"
        wait_for_results=None,  # type: Optional[bool]
        compute_travel_time_for=None,  # type: Optional[Union[str, "_models.ComputeTravelTimeFor"]]
        section_type=None,  # type: Optional[Union[str, "_models.SectionType"]]
        arrive_at=None,  # type: Optional[datetime.datetime]
        depart_at=None,  # type: Optional[datetime.datetime]
        vehicle_axle_weight=None,  # type: Optional[int]
        vehicle_length=None,  # type: Optional[float]
        vehicle_height=None,  # type: Optional[float]
        vehicle_width=None,  # type: Optional[float]
        vehicle_max_speed=None,  # type: Optional[int]
        vehicle_weight=None,  # type: Optional[int]
        windingness=None,  # type: Optional[Union[str, "_models.WindingnessLevel"]]
        hilliness=None,  # type: Optional[Union[str, "_models.HillinessDegree"]]
        travel_mode=None,  # type: Optional[Union[str, "_models.TravelMode"]]
        avoid=None,  # type: Optional[List[Union[str, "_models.RouteAvoidType"]]]
        traffic=None,  # type: Optional[bool]
        route_type=None,  # type: Optional[Union[str, "_models.RouteType"]]
        vehicle_load_type=None,  # type: Optional[Union[str, "_models.VehicleLoadType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["_models.RouteMatrixResponse"]
        """**Applies to**\ : S1 pricing tier.

        The Matrix Routing service allows calculation of a matrix of route summaries for a set of
        routes defined by origin and destination locations by using an asynchronous (async) or
        synchronous (sync) POST request. For every given origin, the service calculates the cost of
        routing from that origin to every given destination. The set of origins and the set of
        destinations can be thought of as the column and row headers of a table and each cell in the
        table contains the costs of routing from the origin to the destination for that cell. As an
        example, let's say a food delivery company has 20 drivers and they need to find the closest
        driver to pick up the delivery from the restaurant. To solve this use case, they can call
        Matrix Route API.

        For each route, the travel times and distances are returned. You can use the computed costs to
        determine which detailed routes to calculate using the Route Directions API.

        The maximum size of a matrix for async request is **700** and for sync request it's **100**
        (the number of origins multiplied by the number of destinations).

        Submit Synchronous Route Matrix Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        If your scenario requires synchronous requests and the maximum size of the matrix is less than
        or equal to 100, you might want to make synchronous request. The maximum size of a matrix for
        this API is **100** (the number of origins multiplied by the number of destinations). With that
        constraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not
        need to be square).

        .. code-block::

           POST
        https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&subscription-key={subscription-key}

        Submit Asynchronous Route Matrix Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        The Asynchronous API is appropriate for processing big volumes of relatively complex routing
        requests. When you make a request by using async request, by default the service returns a 202
        response code along a redirect URL in the Location field of the response header. This URL
        should be checked periodically until the response data or error information is available. If
        ``waitForResults`` parameter in the request is set to true, user will get a 200 response if the
        request is finished under 120 seconds.

        The maximum size of a matrix for this API is **700** (the number of origins multiplied by the
        number of destinations). With that constraint in mind, examples of possible matrix dimensions
        are: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).

        The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response
        if used after the expiration period.

        .. code-block::

           POST
        https://atlas.microsoft.com/route/matrix/json?api-version=1.0&subscription-key={subscription-key}

        Here's a typical sequence of asynchronous operations:


        #.
           Client sends a Route Matrix POST request to Azure Maps

        #.
           The server will respond with one of the following:

           ..

              HTTP ``202 Accepted`` -  Route Matrix request has been accepted.

              HTTP ``Error`` - There was an error processing your Route Matrix request. This could
        either be a 400 Bad Request or any other Error status code.



        #.
           If the Matrix Route request was accepted successfully, the Location header in the response
        contains the URL to download the results of the request. This status URI looks like the
        following:

           .. code-block::

               GET
        https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}


        #. Client issues a GET request on the download URL obtained in Step 3 to download the results

        Download Sync Results
        ^^^^^^^^^^^^^^^^^^^^^

        When you make a POST request for Route Matrix Sync API, the service returns 200 response code
        for successful request and a response array. The response body will contain the data and there
        will be no possibility to retrieve the results later.

        Download Async Results
        ^^^^^^^^^^^^^^^^^^^^^^

        When a request issues a ``202 Accepted`` response, the request is being processed using our
        async pipeline. You will be given a URL to check the progress of your  async request in the
        location header of the response. This status URI looks like the following:

        .. code-block::

             GET
        https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}

        The URL provided by the location header will return the following responses when a ``GET``
        request is issued.

        ..

           HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try
        again in some time.

           HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of
        the results.

        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.route.models.ResponseFormat
        :param post_route_matrix_request_body: The matrix of origin and destination coordinates to
         compute the route distance, travel time and other summary for each cell of the matrix based on
         the input parameters. The minimum and the maximum cell count supported are 1 and **700** for
         async and **100** for sync respectively. For example, it can be 35 origins and 20 destinations
         or 25 origins and 25 destinations for async API.
        :type post_route_matrix_request_body: ~azure.maps.route.models.PostRouteMatrixRequestBody
        :param wait_for_results: Boolean to indicate whether to execute the request synchronously. If
         set to true, user will get a 200 response if the request is finished under 120 seconds.
         Otherwise, user will get a 202 response right away. Please refer to the API description for
         more details on 202 response. **Supported only for async request**.
        :type wait_for_results: bool
        :param compute_travel_time_for: Specifies whether to return additional travel times using
         different types of traffic information (none, historic, live) as well as the default
         best-estimate travel time.
        :type compute_travel_time_for: str or ~azure.maps.route.models.ComputeTravelTimeFor
        :param section_type: Specifies which of the section types is reported in the route response.
         :code:`<br>`:code:`<br>`For example if sectionType = pedestrian the sections which are suited
         for pedestrians only are returned. Multiple types can be used. The default sectionType refers
         to the travelMode input. By default travelMode is set to car.
        :type section_type: str or ~azure.maps.route.models.SectionType
        :param arrive_at: The date and time of arrival at the destination point. It must be specified
         as a dateTime. When a time zone offset is not specified it will be assumed to be that of the
         destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be
         used in conjunction with departAt, minDeviationDistance or minDeviationTime.
        :type arrive_at: ~datetime.datetime
        :param depart_at: The date and time of departure from the origin point. Departure times apart
         from now must be specified as a dateTime. When a time zone offset is not specified, it will be
         assumed to be that of the origin point. The departAt value must be in the future in the
         date-time format (1996-12-19T16:39:57-08:00).
        :type depart_at: ~datetime.datetime
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that
         weight restrictions per axle are not considered.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters. A value of 0 means that length
         restrictions are not considered.
        :type vehicle_length: float
        :param vehicle_height: Height of the vehicle in meters. A value of 0 means that height
         restrictions are not considered.
        :type vehicle_height: float
        :param vehicle_width: Width of the vehicle in meters. A value of 0 means that width
         restrictions are not considered.
        :type vehicle_width: float
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle
         profile is used to check whether a vehicle is allowed on motorways.


         *
           A value of 0 means that an appropriate value for the vehicle will be determined and applied
         during route planning.

         *
           A non-zero value may be overridden during route planning. For example, the current traffic
         flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will
         consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is
         provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will
         again use 60 km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param windingness: Level of turns for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type windingness: str or ~azure.maps.route.models.WindingnessLevel
        :param hilliness: Degree of hilliness for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type hilliness: str or ~azure.maps.route.models.HillinessDegree
        :param travel_mode: The mode of travel for the requested route. If not defined, default is
         'car'. Note that the requested travelMode may not be available for the entire route. Where the
         requested travelMode is not available for a particular section, the travelMode element of the
         response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van
         are BETA functionality. Full restriction data is not available in all areas. In
         **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
        :type travel_mode: str or ~azure.maps.route.models.TravelMode
        :param avoid: Specifies something that the route calculation should try to avoid when
         determining the route. Can be specified multiple times in one request, for example,
         '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the
         value alreadyUsedRoads must not be used.
        :type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]
        :param traffic: Possible values:


         * true - Do consider all available traffic information during routing
         * false - Ignore current traffic data during routing. Note that although the current traffic
         data is ignored
           during routing, the effect of historic traffic on effective road speeds is still
         incorporated.
        :type traffic: bool
        :param route_type: The type of route requested.
        :type route_type: str or ~azure.maps.route.models.RouteType
        :param vehicle_load_type: Types of cargo that may be classified as hazardous materials and
         restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,
         plus generic classifications for use in other countries. Values beginning with USHazmat are for
         US routing while otherHazmat should be used for all other countries. vehicleLoadType can be
         specified multiple times. This parameter is currently only considered for travelMode=truck.
        :type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling.
         Pass in False for this operation to not poll, or pass in your own initialized polling object for a personal polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either RouteMatrixResponse or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~azure.maps.route.models.RouteMatrixResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RouteMatrixResponse"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._post_route_matrix_initial(
                format=format,
                post_route_matrix_request_body=post_route_matrix_request_body,
                wait_for_results=wait_for_results,
                compute_travel_time_for=compute_travel_time_for,
                section_type=section_type,
                arrive_at=arrive_at,
                depart_at=depart_at,
                vehicle_axle_weight=vehicle_axle_weight,
                vehicle_length=vehicle_length,
                vehicle_height=vehicle_height,
                vehicle_width=vehicle_width,
                vehicle_max_speed=vehicle_max_speed,
                vehicle_weight=vehicle_weight,
                windingness=windingness,
                hilliness=hilliness,
                travel_mode=travel_mode,
                avoid=avoid,
                traffic=traffic,
                route_type=route_type,
                vehicle_load_type=vehicle_load_type,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('RouteMatrixResponse', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }

        if polling is True: polling_method = LROBasePolling(lro_delay, lro_options={'final-state-via': 'location'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_post_route_matrix.metadata = {'url': '/route/matrix/{format}'}  # type: ignore

    def _get_route_matrix_initial(
        self,
        format,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["_models.RouteMatrixResponse"]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.RouteMatrixResponse"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self._get_route_matrix_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('RouteMatrixResponse', pipeline_response)

        if response.status_code == 202:
            response_headers['Location']=self._deserialize('str', response.headers.get('Location'))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    _get_route_matrix_initial.metadata = {'url': '/route/matrix/{format}'}  # type: ignore

    def begin_get_route_matrix(
        self,
        format,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["_models.RouteMatrixResponse"]
        """If the Matrix Route request was accepted successfully, the Location header in the response
        contains the URL to download the results of the request. This status URI looks like the
        following:

        .. code-block::

               GET
        https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}


        #. Client issues a GET request on the download URL obtained in Step 3 to download the results

        Download Sync Results
        ^^^^^^^^^^^^^^^^^^^^^

        When you make a POST request for Route Matrix Sync API, the service returns 200 response code
        for successful request and a response array. The response body will contain the data and there
        will be no possibility to retrieve the results later.

        Download Async Results
        ^^^^^^^^^^^^^^^^^^^^^^

        When a request issues a ``202 Accepted`` response, the request is being processed using our
        async pipeline. You will be given a URL to check the progress of your  async request in the
        location header of the response. This status URI looks like the following:

        .. code-block::

             GET
        https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}

        The URL provided by the location header will return the following responses when a ``GET``
        request is issued.

        ..

           HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try
        again in some time.

           HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of
        the results.

        :param format: Matrix id received after the Matrix Route request was accepted successfully.
        :type format: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling.
         Pass in False for this operation to not poll, or pass in your own initialized polling object for a personal polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either RouteMatrixResponse or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~azure.maps.route.models.RouteMatrixResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RouteMatrixResponse"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._get_route_matrix_initial(
                format=format,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('RouteMatrixResponse', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }

        if polling is True: polling_method = LROBasePolling(lro_delay, lro_options={'final-state-via': 'original-uri'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_get_route_matrix.metadata = {'url': '/route/matrix/{format}'}  # type: ignore

    def post_route_matrix_sync(
        self,
        format,  # type: Union[str, "_models.ResponseFormat"]
        post_route_matrix_request_body,  # type: "_models.PostRouteMatrixRequestBody"
        wait_for_results=None,  # type: Optional[bool]
        compute_travel_time_for=None,  # type: Optional[Union[str, "_models.ComputeTravelTimeFor"]]
        section_type=None,  # type: Optional[Union[str, "_models.SectionType"]]
        arrive_at=None,  # type: Optional[datetime.datetime]
        depart_at=None,  # type: Optional[datetime.datetime]
        vehicle_axle_weight=None,  # type: Optional[int]
        vehicle_length=None,  # type: Optional[float]
        vehicle_height=None,  # type: Optional[float]
        vehicle_width=None,  # type: Optional[float]
        vehicle_max_speed=None,  # type: Optional[int]
        vehicle_weight=None,  # type: Optional[int]
        windingness=None,  # type: Optional[Union[str, "_models.WindingnessLevel"]]
        hilliness=None,  # type: Optional[Union[str, "_models.HillinessDegree"]]
        travel_mode=None,  # type: Optional[Union[str, "_models.TravelMode"]]
        avoid=None,  # type: Optional[List[Union[str, "_models.RouteAvoidType"]]]
        traffic=None,  # type: Optional[bool]
        route_type=None,  # type: Optional[Union[str, "_models.RouteType"]]
        vehicle_load_type=None,  # type: Optional[Union[str, "_models.VehicleLoadType"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RouteMatrixResponse"
        """**Applies to**\ : S1 pricing tier.

        The Matrix Routing service allows calculation of a matrix of route summaries for a set of
        routes defined by origin and destination locations by using an asynchronous (async) or
        synchronous (sync) POST request. For every given origin, the service calculates the cost of
        routing from that origin to every given destination. The set of origins and the set of
        destinations can be thought of as the column and row headers of a table and each cell in the
        table contains the costs of routing from the origin to the destination for that cell. As an
        example, let's say a food delivery company has 20 drivers and they need to find the closest
        driver to pick up the delivery from the restaurant. To solve this use case, they can call
        Matrix Route API.

        For each route, the travel times and distances are returned. You can use the computed costs to
        determine which detailed routes to calculate using the Route Directions API.

        The maximum size of a matrix for async request is **700** and for sync request it's **100**
        (the number of origins multiplied by the number of destinations).

        Submit Synchronous Route Matrix Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        If your scenario requires synchronous requests and the maximum size of the matrix is less than
        or equal to 100, you might want to make synchronous request. The maximum size of a matrix for
        this API is **100** (the number of origins multiplied by the number of destinations). With that
        constraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not
        need to be square).

        .. code-block::

           POST
        https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0&subscription-key={subscription-key}

        Submit Asynchronous Route Matrix Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        The Asynchronous API is appropriate for processing big volumes of relatively complex routing
        requests. When you make a request by using async request, by default the service returns a 202
        response code along a redirect URL in the Location field of the response header. This URL
        should be checked periodically until the response data or error information is available. If
        ``waitForResults`` parameter in the request is set to true, user will get a 200 response if the
        request is finished under 120 seconds.

        The maximum size of a matrix for this API is **700** (the number of origins multiplied by the
        number of destinations). With that constraint in mind, examples of possible matrix dimensions
        are: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).

        The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response
        if used after the expiration period.

        .. code-block::

           POST
        https://atlas.microsoft.com/route/matrix/json?api-version=1.0&subscription-key={subscription-key}

        Here's a typical sequence of asynchronous operations:


        #.
           Client sends a Route Matrix POST request to Azure Maps

        #.
           The server will respond with one of the following:

           ..

              HTTP ``202 Accepted`` -  Route Matrix request has been accepted.

              HTTP ``Error`` - There was an error processing your Route Matrix request. This could
        either be a 400 Bad Request or any other Error status code.



        #.
           If the Matrix Route request was accepted successfully, the Location header in the response
        contains the URL to download the results of the request. This status URI looks like the
        following:

           .. code-block::

               GET
        https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}


        #. Client issues a GET request on the download URL obtained in Step 3 to download the results

        Download Sync Results
        ^^^^^^^^^^^^^^^^^^^^^

        When you make a POST request for Route Matrix Sync API, the service returns 200 response code
        for successful request and a response array. The response body will contain the data and there
        will be no possibility to retrieve the results later.

        Download Async Results
        ^^^^^^^^^^^^^^^^^^^^^^

        When a request issues a ``202 Accepted`` response, the request is being processed using our
        async pipeline. You will be given a URL to check the progress of your  async request in the
        location header of the response. This status URI looks like the following:

        .. code-block::

             GET
        https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}

        The URL provided by the location header will return the following responses when a ``GET``
        request is issued.

        ..

           HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try
        again in some time.

           HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of
        the results.

        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.route.models.ResponseFormat
        :param post_route_matrix_request_body: The matrix of origin and destination coordinates to
         compute the route distance, travel time and other summary for each cell of the matrix based on
         the input parameters. The minimum and the maximum cell count supported are 1 and **700** for
         async and **100** for sync respectively. For example, it can be 35 origins and 20 destinations
         or 25 origins and 25 destinations for async API.
        :type post_route_matrix_request_body: ~azure.maps.route.models.PostRouteMatrixRequestBody
        :param wait_for_results: Boolean to indicate whether to execute the request synchronously. If
         set to true, user will get a 200 response if the request is finished under 120 seconds.
         Otherwise, user will get a 202 response right away. Please refer to the API description for
         more details on 202 response. **Supported only for async request**.
        :type wait_for_results: bool
        :param compute_travel_time_for: Specifies whether to return additional travel times using
         different types of traffic information (none, historic, live) as well as the default
         best-estimate travel time.
        :type compute_travel_time_for: str or ~azure.maps.route.models.ComputeTravelTimeFor
        :param section_type: Specifies which of the section types is reported in the route response.
         :code:`<br>`:code:`<br>`For example if sectionType = pedestrian the sections which are suited
         for pedestrians only are returned. Multiple types can be used. The default sectionType refers
         to the travelMode input. By default travelMode is set to car.
        :type section_type: str or ~azure.maps.route.models.SectionType
        :param arrive_at: The date and time of arrival at the destination point. It must be specified
         as a dateTime. When a time zone offset is not specified it will be assumed to be that of the
         destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be
         used in conjunction with departAt, minDeviationDistance or minDeviationTime.
        :type arrive_at: ~datetime.datetime
        :param depart_at: The date and time of departure from the origin point. Departure times apart
         from now must be specified as a dateTime. When a time zone offset is not specified, it will be
         assumed to be that of the origin point. The departAt value must be in the future in the
         date-time format (1996-12-19T16:39:57-08:00).
        :type depart_at: ~datetime.datetime
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that
         weight restrictions per axle are not considered.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters. A value of 0 means that length
         restrictions are not considered.
        :type vehicle_length: float
        :param vehicle_height: Height of the vehicle in meters. A value of 0 means that height
         restrictions are not considered.
        :type vehicle_height: float
        :param vehicle_width: Width of the vehicle in meters. A value of 0 means that width
         restrictions are not considered.
        :type vehicle_width: float
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle
         profile is used to check whether a vehicle is allowed on motorways.


         *
           A value of 0 means that an appropriate value for the vehicle will be determined and applied
         during route planning.

         *
           A non-zero value may be overridden during route planning. For example, the current traffic
         flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will
         consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is
         provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will
         again use 60 km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param windingness: Level of turns for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type windingness: str or ~azure.maps.route.models.WindingnessLevel
        :param hilliness: Degree of hilliness for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type hilliness: str or ~azure.maps.route.models.HillinessDegree
        :param travel_mode: The mode of travel for the requested route. If not defined, default is
         'car'. Note that the requested travelMode may not be available for the entire route. Where the
         requested travelMode is not available for a particular section, the travelMode element of the
         response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van
         are BETA functionality. Full restriction data is not available in all areas. In
         **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
        :type travel_mode: str or ~azure.maps.route.models.TravelMode
        :param avoid: Specifies something that the route calculation should try to avoid when
         determining the route. Can be specified multiple times in one request, for example,
         '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the
         value alreadyUsedRoads must not be used.
        :type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]
        :param traffic: Possible values:


         * true - Do consider all available traffic information during routing
         * false - Ignore current traffic data during routing. Note that although the current traffic
         data is ignored
           during routing, the effect of historic traffic on effective road speeds is still
         incorporated.
        :type traffic: bool
        :param route_type: The type of route requested.
        :type route_type: str or ~azure.maps.route.models.RouteType
        :param vehicle_load_type: Types of cargo that may be classified as hazardous materials and
         restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,
         plus generic classifications for use in other countries. Values beginning with USHazmat are for
         US routing while otherHazmat should be used for all other countries. vehicleLoadType can be
         specified multiple times. This parameter is currently only considered for travelMode=truck.
        :type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RouteMatrixResponse, or the result of cls(response)
        :rtype: ~azure.maps.route.models.RouteMatrixResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RouteMatrixResponse"]
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            408: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.post_route_matrix_sync.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if wait_for_results is not None:
            query_parameters['waitForResults'] = self._serialize.query("wait_for_results", wait_for_results, 'bool')
        if compute_travel_time_for is not None:
            query_parameters['computeTravelTimeFor'] = self._serialize.query("compute_travel_time_for", compute_travel_time_for, 'str')
        if section_type is not None:
            query_parameters['sectionType'] = self._serialize.query("section_type", section_type, 'str')
        if arrive_at is not None:
            query_parameters['arriveAt'] = self._serialize.query("arrive_at", arrive_at, 'iso-8601')
        if depart_at is not None:
            query_parameters['departAt'] = self._serialize.query("depart_at", depart_at, 'iso-8601')
        if vehicle_axle_weight is not None:
            query_parameters['vehicleAxleWeight'] = self._serialize.query("vehicle_axle_weight", vehicle_axle_weight, 'int')
        if vehicle_length is not None:
            query_parameters['vehicleLength'] = self._serialize.query("vehicle_length", vehicle_length, 'float')
        if vehicle_height is not None:
            query_parameters['vehicleHeight'] = self._serialize.query("vehicle_height", vehicle_height, 'float')
        if vehicle_width is not None:
            query_parameters['vehicleWidth'] = self._serialize.query("vehicle_width", vehicle_width, 'float')
        if vehicle_max_speed is not None:
            query_parameters['vehicleMaxSpeed'] = self._serialize.query("vehicle_max_speed", vehicle_max_speed, 'int')
        if vehicle_weight is not None:
            query_parameters['vehicleWeight'] = self._serialize.query("vehicle_weight", vehicle_weight, 'int')
        if windingness is not None:
            query_parameters['windingness'] = self._serialize.query("windingness", windingness, 'str')
        if hilliness is not None:
            query_parameters['hilliness'] = self._serialize.query("hilliness", hilliness, 'str')
        if travel_mode is not None:
            query_parameters['travelMode'] = self._serialize.query("travel_mode", travel_mode, 'str')
        if avoid is not None:
            query_parameters['avoid'] = [self._serialize.query("avoid", q, 'str') if q is not None else '' for q in avoid]
        if traffic is not None:
            query_parameters['traffic'] = self._serialize.query("traffic", traffic, 'bool')
        if route_type is not None:
            query_parameters['routeType'] = self._serialize.query("route_type", route_type, 'str')
        if vehicle_load_type is not None:
            query_parameters['vehicleLoadType'] = self._serialize.query("vehicle_load_type", vehicle_load_type, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(post_route_matrix_request_body, 'PostRouteMatrixRequestBody')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('RouteMatrixResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    post_route_matrix_sync.metadata = {'url': '/route/matrix/sync/{format}'}  # type: ignore

    def get_route_directions(
        self,
        format,  # type: Union[str, "_models.TextFormat"]
        query,  # type: str
        max_alternatives=None,  # type: Optional[int]
        alternative_type=None,  # type: Optional[Union[str, "_models.AlternativeRouteType"]]
        min_deviation_distance=None,  # type: Optional[int]
        arrive_at=None,  # type: Optional[datetime.datetime]
        depart_at=None,  # type: Optional[datetime.datetime]
        min_deviation_time=None,  # type: Optional[int]
        instructions_type=None,  # type: Optional[Union[str, "_models.RouteInstructionsType"]]
        language=None,  # type: Optional[str]
        compute_best_order=None,  # type: Optional[bool]
        route_representation=None,  # type: Optional[Union[str, "_models.RouteRepresentation"]]
        compute_travel_time_for=None,  # type: Optional[Union[str, "_models.ComputeTravelTimeFor"]]
        vehicle_heading=None,  # type: Optional[int]
        report=None,  # type: Optional[str]
        section_type=None,  # type: Optional[Union[str, "_models.SectionType"]]
        vehicle_axle_weight=None,  # type: Optional[int]
        vehicle_width=None,  # type: Optional[float]
        vehicle_height=None,  # type: Optional[float]
        vehicle_length=None,  # type: Optional[float]
        vehicle_max_speed=None,  # type: Optional[int]
        vehicle_weight=None,  # type: Optional[int]
        vehicle_commercial=None,  # type: Optional[bool]
        windingness=None,  # type: Optional[Union[str, "_models.WindingnessLevel"]]
        hilliness=None,  # type: Optional[Union[str, "_models.HillinessDegree"]]
        travel_mode=None,  # type: Optional[Union[str, "_models.TravelMode"]]
        avoid=None,  # type: Optional[List[Union[str, "_models.RouteAvoidType"]]]
        traffic=None,  # type: Optional[bool]
        route_type=None,  # type: Optional[Union[str, "_models.RouteType"]]
        vehicle_load_type=None,  # type: Optional[Union[str, "_models.VehicleLoadType"]]
        vehicle_engine_type=None,  # type: Optional[Union[str, "_models.VehicleEngineType"]]
        constant_speed_consumption_in_liters_per_hundredkm=None,  # type: Optional[float]
        current_fuel_in_liters=None,  # type: Optional[float]
        auxiliary_power_in_liters_per_hour=None,  # type: Optional[float]
        fuel_energy_density_in_m_joules_per_liter=None,  # type: Optional[float]
        acceleration_efficiency=None,  # type: Optional[float]
        deceleration_efficiency=None,  # type: Optional[float]
        uphill_efficiency=None,  # type: Optional[float]
        downhill_efficiency=None,  # type: Optional[float]
        constant_speed_consumption_ink_wh_per_hundredkm=None,  # type: Optional[str]
        current_charge_ink_wh=None,  # type: Optional[str]
        max_charge_ink_wh=None,  # type: Optional[str]
        auxiliary_power_ink_w=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RouteDirectionsResponse"
        """**Applies to**\ : S0 and S1 pricing tiers.

        Returns  a route between an origin and a destination, passing through waypoints if they are
        specified. The route will take into account factors such as current traffic and the typical
        road speeds on the requested day of the week and time of day.

        Information returned includes the distance, estimated travel time, and a representation of the
        route geometry. Additional routing information such as optimized waypoint order or turn by turn
        instructions is also available, depending on the options selected.

        Routing service provides a set of parameters for a detailed description of vehicle-specific
        Consumption Model. Please check `Consumption Model
        <https://docs.microsoft.com/azure/azure-maps/consumption-model>`_ for detailed explanation of
        the concepts and parameters involved.

        :param format: Desired format of the response. Value can be either *json* or *xml*.
        :type format: str or ~azure.maps.route.models.TextFormat
        :param query: The Coordinates through which the route is calculated, delimited by a colon.  A
         minimum of two coordinates is required.  The first one is the origin and the last is the
         destination of the route. Optional coordinates in-between act as WayPoints in the route.  You
         can pass up to 150 WayPoints.
        :type query: str
        :param max_alternatives: Number of desired alternative routes to be calculated. Default: 0,
         minimum: 0 and maximum: 5.
        :type max_alternatives: int
        :param alternative_type: Controls the optimality, with respect to the given planning criteria,
         of the calculated alternatives compared to the reference route.
        :type alternative_type: str or ~azure.maps.route.models.AlternativeRouteType
        :param min_deviation_distance: All alternative routes returned will follow the reference route
         (see section POST Requests) from the origin point of the calculateRoute request for at least
         this number of meters. Can only be used when reconstructing a route. The minDeviationDistance
         parameter cannot be used in conjunction with arriveAt.
        :type min_deviation_distance: int
        :param arrive_at: The date and time of arrival at the destination point. It must be specified
         as a dateTime. When a time zone offset is not specified it will be assumed to be that of the
         destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be
         used in conjunction with departAt, minDeviationDistance or minDeviationTime.
        :type arrive_at: ~datetime.datetime
        :param depart_at: The date and time of departure from the origin point. Departure times apart
         from now must be specified as a dateTime. When a time zone offset is not specified, it will be
         assumed to be that of the origin point. The departAt value must be in the future in the
         date-time format (1996-12-19T16:39:57-08:00).
        :type depart_at: ~datetime.datetime
        :param min_deviation_time: All alternative routes returned will follow the reference route (see
         section POST Requests) from the origin point of the calculateRoute request for at least this
         number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter
         cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to
         a value greater than zero has the following consequences:


         * The origin point of the *calculateRoute* Request must be on
           (or very near) the input reference route.

           * If this is not the case, an error is returned.
           * However, the origin point does not need to be at the beginning
             of the input reference route (it can be thought of as the current
             vehicle position on the reference route).

         * The reference route, returned as the first route in the *calculateRoute*
           Response, will start at the origin point specified in the *calculateRoute*
           Request. The initial part of the input reference route up until the origin
           point will be excluded from the Response.
         * The values of *minDeviationDistance* and *minDeviationTime* determine
           how far alternative routes will be guaranteed to follow the reference
           route from the origin point onwards.
         * The route must use *departAt*.
         * The *vehicleHeading* is ignored.
        :type min_deviation_time: int
        :param instructions_type: If specified, guidance instructions will be returned. Note that the
         instructionsType parameter cannot be used in conjunction with routeRepresentation=none.
        :type instructions_type: str or ~azure.maps.route.models.RouteInstructionsType
        :param language: The language parameter determines the language of the guidance messages.
         Proper nouns (the names of streets, plazas, etc.) are returned in the specified  language, or
         if that is not available, they are returned in an available language  that is close to it.
         Allowed values are (a subset of) the IETF language tags. The currently supported  languages are
         listed in the `Supported languages  section
         <https://docs.microsoft.com/azure/azure-maps/supported-languages>`_.

         Default value: en-GB.
        :type language: str
        :param compute_best_order: Re-order the route waypoints using a fast heuristic algorithm to
         reduce the route length. Yields best results when used in conjunction with routeType
         *shortest*. Notice that origin and destination are excluded from the optimized waypoint
         indices. To include origin and destination in the response, please increase all the indices by
         1 to account for the origin, and then add the destination as the final index. Possible values
         are true or false. True computes a better order if possible, but is not allowed to be used in
         conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints.
         False will use the locations in the given order and not allowed to be used in conjunction with
         routeRepresentation *none*.
        :type compute_best_order: bool
        :param route_representation: Specifies the representation of the set of routes provided as
         response. This parameter value can only be used in conjunction with computeBestOrder=true.
        :type route_representation: str or ~azure.maps.route.models.RouteRepresentation
        :param compute_travel_time_for: Specifies whether to return additional travel times using
         different types of traffic information (none, historic, live) as well as the default
         best-estimate travel time.
        :type compute_travel_time_for: str or ~azure.maps.route.models.ComputeTravelTimeFor
        :param vehicle_heading: The directional heading of the vehicle in degrees starting at true
         North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is
         180 degrees, west is 270 degrees. Possible values 0-359.
        :type vehicle_heading: int
        :param report: Specifies which data should be reported for diagnosis purposes. The only
         possible value is *effectiveSettings*. Reports the effective parameters or data used when
         calling the API. In the case of defaulted parameters the default will be reflected where the
         parameter was not specified by the caller.
        :type report: str
        :param section_type: Specifies which of the section types is reported in the route response.
         :code:`<br>`:code:`<br>`For example if sectionType = pedestrian the sections which are suited
         for pedestrians only are returned. Multiple types can be used. The default sectionType refers
         to the travelMode input. By default travelMode is set to car.
        :type section_type: str or ~azure.maps.route.models.SectionType
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that
         weight restrictions per axle are not considered.
        :type vehicle_axle_weight: int
        :param vehicle_width: Width of the vehicle in meters. A value of 0 means that width
         restrictions are not considered.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters. A value of 0 means that height
         restrictions are not considered.
        :type vehicle_height: float
        :param vehicle_length: Length of the vehicle in meters. A value of 0 means that length
         restrictions are not considered.
        :type vehicle_length: float
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle
         profile is used to check whether a vehicle is allowed on motorways.


         *
           A value of 0 means that an appropriate value for the vehicle will be determined and applied
         during route planning.

         *
           A non-zero value may be overridden during route planning. For example, the current traffic
         flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will
         consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is
         provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will
         again use 60 km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.


         *
           It is mandatory if any of the *Efficiency parameters are set.

         *
           It must be strictly positive when used in the context of the Consumption Model. Weight
         restrictions are considered.

         *
           If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is
         non-zero, then weight restrictions are considered.

         *
           In all other cases, this parameter is ignored.

         Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.
        :type vehicle_weight: int
        :param vehicle_commercial: Vehicle is used for commercial purposes and thus may not be allowed
         to drive  on some roads.
        :type vehicle_commercial: bool
        :param windingness: Level of turns for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type windingness: str or ~azure.maps.route.models.WindingnessLevel
        :param hilliness: Degree of hilliness for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type hilliness: str or ~azure.maps.route.models.HillinessDegree
        :param travel_mode: The mode of travel for the requested route. If not defined, default is
         'car'. Note that the requested travelMode may not be available for the entire route. Where the
         requested travelMode is not available for a particular section, the travelMode element of the
         response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van
         are BETA functionality. Full restriction data is not available in all areas. In
         **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
        :type travel_mode: str or ~azure.maps.route.models.TravelMode
        :param avoid: Specifies something that the route calculation should try to avoid when
         determining the route. Can be specified multiple times in one request, for example,
         '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the
         value alreadyUsedRoads must not be used.
        :type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]
        :param traffic: Possible values:


         * true - Do consider all available traffic information during routing
         * false - Ignore current traffic data during routing. Note that although the current traffic
         data is ignored
           during routing, the effect of historic traffic on effective road speeds is still
         incorporated.
        :type traffic: bool
        :param route_type: The type of route requested.
        :type route_type: str or ~azure.maps.route.models.RouteType
        :param vehicle_load_type: Types of cargo that may be classified as hazardous materials and
         restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,
         plus generic classifications for use in other countries. Values beginning with USHazmat are for
         US routing while otherHazmat should be used for all other countries. vehicleLoadType can be
         specified multiple times. This parameter is currently only considered for travelMode=truck.
        :type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType
        :param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is
         specified, it must be consistent with the value of **vehicleEngineType**.
        :type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent
         component of consumption.

         Provided as an unordered list of colon-delimited speed & consumption-rate pairs. The list
         defines points on a consumption curve. Consumption rates for speeds not in the list are found
         as follows:


         *
           by linear interpolation, if the given speed lies in between two speeds in the list

         *
           by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by
         the nearest two points in the list

         The list must contain between 1 and 25 points (inclusive), and may not contain duplicate
         points for the same speed. If it only contains a single point, then the consumption rate of
         that point is used without further processing.

         Consumption specified for the largest speed must be greater than or equal to that of the
         penultimate largest speed. This ensures that extrapolation does not lead to negative
         consumption rates.

         Similarly, consumption values specified for the two smallest speeds in the list cannot lead to
         a negative consumption rate for any smaller speed.

         The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.

         Sensible Values : 50,6.3:130,11.5

         **Note** : This parameter is required for **The Combustion Consumption Model**.
        :type constant_speed_consumption_in_liters_per_hundredkm: float
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.

         Sensible Values : 55.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining
         auxiliary systems of the vehicle, in liters per hour.

         It can be used to specify consumption due to devices and systems such as AC systems, radio,
         heating, etc.

         Sensible Values : 0.2.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy
         stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the
         ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For
         example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.

         This parameter is required if any ***Efficiency** parameter is set.

         Sensible Values : 34.2.
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored
         in fuel to kinetic energy when the vehicle accelerates *(i.e.
         KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting
         consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **decelerationEfficiency**.

         The range of values allowed are 0.0 to 1/\ **decelerationEfficiency**.

         Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved
         (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).
         ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using
         **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **accelerationEfficiency**.

         The range of values allowed are 0.0 to 1/\ **accelerationEfficiency**.

         Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel
         to potential energy when the vehicle gains elevation *(i.e.
         PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by
         converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **downhillEfficiency**.

         The range of values allowed are 0.0 to 1/\ **downhillEfficiency**.

         Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved
         (not consumed) fuel when the vehicle loses elevation *(i.e.
         ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved
         (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **uphillEfficiency**.

         The range of values allowed are 0.0 to 1/\ **uphillEfficiency**.

         Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component
         of consumption.

         Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a
         consumption curve. Consumption rates for speeds not in the list are found as follows:


         *
           by linear interpolation, if the given speed lies in between two speeds in the list

         *
           by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by
         the nearest two points in the list

         The list must contain between 1 and 25 points (inclusive), and may not contain duplicate
         points for the same speed. If it only contains a single point, then the consumption rate of
         that point is used without further processing.

         Consumption specified for the largest speed must be greater than or equal to that of the
         penultimate largest speed. This ensures that extrapolation does not lead to negative
         consumption rates.

         Similarly, consumption values specified for the two smallest speeds in the list cannot lead to
         a negative consumption rate for any smaller  speed.

         The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and
         100000.0.

         Sensible Values : 50,8.2:130,21.3

         This parameter is required for **Electric consumption model**.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param current_charge_ink_wh: Specifies the current electric energy supply in kilowatt hours
         (kWh).

         This parameter co-exists with **maxChargeInkWh** parameter.

         The range of values allowed are 0.0 to **maxChargeInkWh**.

         Sensible Values : 43.
        :type current_charge_ink_wh: str
        :param max_charge_ink_wh: Specifies the maximum electric energy supply in kilowatt hours (kWh)
         that may be stored in the vehicle's battery.

         This parameter co-exists with **currentChargeInkWh** parameter.

         Minimum value has to be greater than or equal to **currentChargeInkWh**.

         Sensible Values : 85.
        :type max_charge_ink_wh: str
        :param auxiliary_power_ink_w: Specifies the amount of power consumed for sustaining auxiliary
         systems, in kilowatts (kW).

         It can be used to specify consumption due to devices and systems such as AC systems, radio,
         heating, etc.

         Sensible Values : 1.7.
        :type auxiliary_power_ink_w: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RouteDirectionsResponse, or the result of cls(response)
        :rtype: ~azure.maps.route.models.RouteDirectionsResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RouteDirectionsResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_route_directions.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['query'] = self._serialize.query("query", query, 'str')
        if max_alternatives is not None:
            query_parameters['maxAlternatives'] = self._serialize.query("max_alternatives", max_alternatives, 'int', maximum=5, minimum=0)
        if alternative_type is not None:
            query_parameters['alternativeType'] = self._serialize.query("alternative_type", alternative_type, 'str')
        if min_deviation_distance is not None:
            query_parameters['minDeviationDistance'] = self._serialize.query("min_deviation_distance", min_deviation_distance, 'int')
        if arrive_at is not None:
            query_parameters['arriveAt'] = self._serialize.query("arrive_at", arrive_at, 'iso-8601')
        if depart_at is not None:
            query_parameters['departAt'] = self._serialize.query("depart_at", depart_at, 'iso-8601')
        if min_deviation_time is not None:
            query_parameters['minDeviationTime'] = self._serialize.query("min_deviation_time", min_deviation_time, 'int')
        if instructions_type is not None:
            query_parameters['instructionsType'] = self._serialize.query("instructions_type", instructions_type, 'str')
        if language is not None:
            query_parameters['language'] = self._serialize.query("language", language, 'str')
        if compute_best_order is not None:
            query_parameters['computeBestOrder'] = self._serialize.query("compute_best_order", compute_best_order, 'bool')
        if route_representation is not None:
            query_parameters['routeRepresentation'] = self._serialize.query("route_representation", route_representation, 'str')
        if compute_travel_time_for is not None:
            query_parameters['computeTravelTimeFor'] = self._serialize.query("compute_travel_time_for", compute_travel_time_for, 'str')
        if vehicle_heading is not None:
            query_parameters['vehicleHeading'] = self._serialize.query("vehicle_heading", vehicle_heading, 'int', maximum=359, minimum=0)
        if report is not None:
            query_parameters['report'] = self._serialize.query("report", report, 'str')
        if section_type is not None:
            query_parameters['sectionType'] = self._serialize.query("section_type", section_type, 'str')
        if vehicle_axle_weight is not None:
            query_parameters['vehicleAxleWeight'] = self._serialize.query("vehicle_axle_weight", vehicle_axle_weight, 'int')
        if vehicle_width is not None:
            query_parameters['vehicleWidth'] = self._serialize.query("vehicle_width", vehicle_width, 'float')
        if vehicle_height is not None:
            query_parameters['vehicleHeight'] = self._serialize.query("vehicle_height", vehicle_height, 'float')
        if vehicle_length is not None:
            query_parameters['vehicleLength'] = self._serialize.query("vehicle_length", vehicle_length, 'float')
        if vehicle_max_speed is not None:
            query_parameters['vehicleMaxSpeed'] = self._serialize.query("vehicle_max_speed", vehicle_max_speed, 'int')
        if vehicle_weight is not None:
            query_parameters['vehicleWeight'] = self._serialize.query("vehicle_weight", vehicle_weight, 'int')
        if vehicle_commercial is not None:
            query_parameters['vehicleCommercial'] = self._serialize.query("vehicle_commercial", vehicle_commercial, 'bool')
        if windingness is not None:
            query_parameters['windingness'] = self._serialize.query("windingness", windingness, 'str')
        if hilliness is not None:
            query_parameters['hilliness'] = self._serialize.query("hilliness", hilliness, 'str')
        if travel_mode is not None:
            query_parameters['travelMode'] = self._serialize.query("travel_mode", travel_mode, 'str')
        if avoid is not None:
            query_parameters['avoid'] = [self._serialize.query("avoid", q, 'str') if q is not None else '' for q in avoid]
        if traffic is not None:
            query_parameters['traffic'] = self._serialize.query("traffic", traffic, 'bool')
        if route_type is not None:
            query_parameters['routeType'] = self._serialize.query("route_type", route_type, 'str')
        if vehicle_load_type is not None:
            query_parameters['vehicleLoadType'] = self._serialize.query("vehicle_load_type", vehicle_load_type, 'str')
        if vehicle_engine_type is not None:
            query_parameters['vehicleEngineType'] = self._serialize.query("vehicle_engine_type", vehicle_engine_type, 'str')
        if constant_speed_consumption_in_liters_per_hundredkm is not None:
            query_parameters['constantSpeedConsumptionInLitersPerHundredkm'] = self._serialize.query("constant_speed_consumption_in_liters_per_hundredkm", constant_speed_consumption_in_liters_per_hundredkm, 'float')
        if current_fuel_in_liters is not None:
            query_parameters['currentFuelInLiters'] = self._serialize.query("current_fuel_in_liters", current_fuel_in_liters, 'float')
        if auxiliary_power_in_liters_per_hour is not None:
            query_parameters['auxiliaryPowerInLitersPerHour'] = self._serialize.query("auxiliary_power_in_liters_per_hour", auxiliary_power_in_liters_per_hour, 'float')
        if fuel_energy_density_in_m_joules_per_liter is not None:
            query_parameters['fuelEnergyDensityInMJoulesPerLiter'] = self._serialize.query("fuel_energy_density_in_m_joules_per_liter", fuel_energy_density_in_m_joules_per_liter, 'float')
        if acceleration_efficiency is not None:
            query_parameters['accelerationEfficiency'] = self._serialize.query("acceleration_efficiency", acceleration_efficiency, 'float')
        if deceleration_efficiency is not None:
            query_parameters['decelerationEfficiency'] = self._serialize.query("deceleration_efficiency", deceleration_efficiency, 'float')
        if uphill_efficiency is not None:
            query_parameters['uphillEfficiency'] = self._serialize.query("uphill_efficiency", uphill_efficiency, 'float')
        if downhill_efficiency is not None:
            query_parameters['downhillEfficiency'] = self._serialize.query("downhill_efficiency", downhill_efficiency, 'float')
        if constant_speed_consumption_ink_wh_per_hundredkm is not None:
            query_parameters['constantSpeedConsumptionInkWhPerHundredkm'] = self._serialize.query("constant_speed_consumption_ink_wh_per_hundredkm", constant_speed_consumption_ink_wh_per_hundredkm, 'str')
        if current_charge_ink_wh is not None:
            query_parameters['currentChargeInkWh'] = self._serialize.query("current_charge_ink_wh", current_charge_ink_wh, 'str')
        if max_charge_ink_wh is not None:
            query_parameters['maxChargeInkWh'] = self._serialize.query("max_charge_ink_wh", max_charge_ink_wh, 'str')
        if auxiliary_power_ink_w is not None:
            query_parameters['auxiliaryPowerInkW'] = self._serialize.query("auxiliary_power_ink_w", auxiliary_power_ink_w, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('RouteDirectionsResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_route_directions.metadata = {'url': '/route/directions/{format}'}  # type: ignore

    def post_route_directions(
        self,
        format,  # type: Union[str, "_models.TextFormat"]
        query,  # type: str
        post_route_directions_request_body,  # type: "_models.PostRouteDirectionsRequestBody"
        max_alternatives=None,  # type: Optional[int]
        alternative_type=None,  # type: Optional[Union[str, "_models.AlternativeRouteType"]]
        min_deviation_distance=None,  # type: Optional[int]
        min_deviation_time=None,  # type: Optional[int]
        instructions_type=None,  # type: Optional[Union[str, "_models.RouteInstructionsType"]]
        language=None,  # type: Optional[str]
        compute_best_order=None,  # type: Optional[bool]
        route_representation=None,  # type: Optional[Union[str, "_models.RouteRepresentation"]]
        compute_travel_time_for=None,  # type: Optional[Union[str, "_models.ComputeTravelTimeFor"]]
        vehicle_heading=None,  # type: Optional[int]
        report=None,  # type: Optional[str]
        section_type=None,  # type: Optional[Union[str, "_models.SectionType"]]
        arrive_at=None,  # type: Optional[datetime.datetime]
        depart_at=None,  # type: Optional[datetime.datetime]
        vehicle_axle_weight=None,  # type: Optional[int]
        vehicle_length=None,  # type: Optional[float]
        vehicle_height=None,  # type: Optional[float]
        vehicle_width=None,  # type: Optional[float]
        vehicle_max_speed=None,  # type: Optional[int]
        vehicle_weight=None,  # type: Optional[int]
        vehicle_commercial=None,  # type: Optional[bool]
        windingness=None,  # type: Optional[Union[str, "_models.WindingnessLevel"]]
        hilliness=None,  # type: Optional[Union[str, "_models.HillinessDegree"]]
        travel_mode=None,  # type: Optional[Union[str, "_models.TravelMode"]]
        avoid=None,  # type: Optional[List[Union[str, "_models.RouteAvoidType"]]]
        traffic=None,  # type: Optional[bool]
        route_type=None,  # type: Optional[Union[str, "_models.RouteType"]]
        vehicle_load_type=None,  # type: Optional[Union[str, "_models.VehicleLoadType"]]
        vehicle_engine_type=None,  # type: Optional[Union[str, "_models.VehicleEngineType"]]
        constant_speed_consumption_in_liters_per_hundredkm=None,  # type: Optional[float]
        current_fuel_in_liters=None,  # type: Optional[float]
        auxiliary_power_in_liters_per_hour=None,  # type: Optional[float]
        fuel_energy_density_in_m_joules_per_liter=None,  # type: Optional[float]
        acceleration_efficiency=None,  # type: Optional[float]
        deceleration_efficiency=None,  # type: Optional[float]
        uphill_efficiency=None,  # type: Optional[float]
        downhill_efficiency=None,  # type: Optional[float]
        constant_speed_consumption_ink_wh_per_hundredkm=None,  # type: Optional[str]
        current_charge_ink_wh=None,  # type: Optional[str]
        max_charge_ink_wh=None,  # type: Optional[str]
        auxiliary_power_ink_w=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RouteDirectionsResponse"
        """**Applies to**\ : S0 and S1 pricing tiers.

        Returns  a route between an origin and a destination, passing through waypoints if they are
        specified. The route will take into account factors such as current traffic and the typical
        road speeds on the requested day of the week and time of day.

        Information returned includes the distance, estimated travel time, and a representation of the
        route geometry. Additional routing information such as optimized waypoint order or turn by turn
        instructions is also available, depending on the options selected.

        Routing service provides a set of parameters for a detailed description of a vehicle-specific
        Consumption Model. Please check `Consumption Model
        <https://docs.microsoft.com/azure/azure-maps/consumption-model>`_ for detailed explanation of
        the concepts and parameters involved.

        :param format: Desired format of the response. Value can be either *json* or *xml*.
        :type format: str or ~azure.maps.route.models.TextFormat
        :param query: The Coordinates through which the route is calculated. Needs two coordinates at
         least. Delimited by colon. First one is the origin and the last is the destination of the
         route. The coordinates are in a  lat,long format. Optional coordinates in between act as
         WayPoints in the route.
        :type query: str
        :param post_route_directions_request_body: Used for reconstructing a route and for calculating
         zero or more alternative routes to this reference route.  The provided sequence of coordinates
         is used as input for route reconstruction. The alternative routes  are calculated between the
         origin and destination points specified in the base path parameter locations.  If both
         minDeviationDistance and minDeviationTime are set to zero, then these origin and destination
         points  are expected to be at (or very near) the beginning and end of the reference route,
         respectively. Intermediate  locations (waypoints) are not supported when using
         supportingPoints.

         Setting at least one of minDeviationDistance or minDeviationTime to a value greater than zero
         has the  following consequences:


         * The origin point of the calculateRoute request must be on (or very near) the input reference
         route. If  this is not the case, an error is returned. However, the origin point does not need
         to be at the beginning of  the input reference route (it can be thought of as the current
         vehicle position on the reference route).
         * The reference route, returned as the first route in the calculateRoute response, will start
         at the origin  point specified in the calculateRoute request. The initial part of the input
         reference route up until the  origin point will be excluded from the response.
         * The values of minDeviationDistance and minDeviationTime determine how far alternative routes
         will be  guaranteed to follow the reference route from the origin point onwards.
         * The route must use departAt.
         * The vehicleHeading is ignored.
        :type post_route_directions_request_body: ~azure.maps.route.models.PostRouteDirectionsRequestBody
        :param max_alternatives: Number of desired alternative routes to be calculated. Default: 0,
         minimum: 0 and maximum: 5.
        :type max_alternatives: int
        :param alternative_type: Controls the optimality, with respect to the given planning criteria,
         of the calculated alternatives compared to the reference route.
        :type alternative_type: str or ~azure.maps.route.models.AlternativeRouteType
        :param min_deviation_distance: All alternative routes returned will follow the reference route
         (see section POST Requests) from the origin point of the calculateRoute request for at least
         this number of meters. Can only be used when reconstructing a route. The minDeviationDistance
         parameter cannot be used in conjunction with arriveAt.
        :type min_deviation_distance: int
        :param min_deviation_time: All alternative routes returned will follow the reference route (see
         section POST Requests) from the origin point of the calculateRoute request for at least this
         number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter
         cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to
         a value greater than zero has the following consequences:


         * The origin point of the *calculateRoute* Request must be on
           (or very near) the input reference route.

           * If this is not the case, an error is returned.
           * However, the origin point does not need to be at the beginning
             of the input reference route (it can be thought of as the current
             vehicle position on the reference route).

         * The reference route, returned as the first route in the *calculateRoute*
           Response, will start at the origin point specified in the *calculateRoute*
           Request. The initial part of the input reference route up until the origin
           point will be excluded from the Response.
         * The values of *minDeviationDistance* and *minDeviationTime* determine
           how far alternative routes will be guaranteed to follow the reference
           route from the origin point onwards.
         * The route must use *departAt*.
         * The *vehicleHeading* is ignored.
        :type min_deviation_time: int
        :param instructions_type: If specified, guidance instructions will be returned. Note that the
         instructionsType parameter cannot be used in conjunction with routeRepresentation=none.
        :type instructions_type: str or ~azure.maps.route.models.RouteInstructionsType
        :param language: The language parameter determines the language of the guidance messages. It
         does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when
         instructionsType=coded. Allowed values are (a subset of) the IETF language tags described.
        :type language: str
        :param compute_best_order: Re-order the route waypoints using a fast heuristic algorithm to
         reduce the route length. Yields best results when used in conjunction with routeType
         *shortest*. Notice that origin and destination are excluded from the optimized waypoint
         indices. To include origin and destination in the response, please increase all the indices by
         1 to account for the origin, and then add the destination as the final index. Possible values
         are true or false. True computes a better order if possible, but is not allowed to be used in
         conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints.
         False will use the locations in the given order and not allowed to be used in conjunction with
         routeRepresentation *none*.
        :type compute_best_order: bool
        :param route_representation: Specifies the representation of the set of routes provided as
         response. This parameter value can only be used in conjunction with computeBestOrder=true.
        :type route_representation: str or ~azure.maps.route.models.RouteRepresentation
        :param compute_travel_time_for: Specifies whether to return additional travel times using
         different types of traffic information (none, historic, live) as well as the default
         best-estimate travel time.
        :type compute_travel_time_for: str or ~azure.maps.route.models.ComputeTravelTimeFor
        :param vehicle_heading: The directional heading of the vehicle in degrees starting at true
         North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is
         180 degrees, west is 270 degrees. Possible values 0-359.
        :type vehicle_heading: int
        :param report: Specifies which data should be reported for diagnosis purposes. The only
         possible value is *effectiveSettings*. Reports the effective parameters or data used when
         calling the API. In the case of defaulted parameters the default will be reflected where the
         parameter was not specified by the caller.
        :type report: str
        :param section_type: Specifies which of the section types is reported in the route response.
         :code:`<br>`:code:`<br>`For example if sectionType = pedestrian the sections which are suited
         for pedestrians only are returned. Multiple types can be used. The default sectionType refers
         to the travelMode input. By default travelMode is set to car.
        :type section_type: str or ~azure.maps.route.models.SectionType
        :param arrive_at: The date and time of arrival at the destination point. It must be specified
         as a dateTime. When a time zone offset is not specified it will be assumed to be that of the
         destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be
         used in conjunction with departAt, minDeviationDistance or minDeviationTime.
        :type arrive_at: ~datetime.datetime
        :param depart_at: The date and time of departure from the origin point. Departure times apart
         from now must be specified as a dateTime. When a time zone offset is not specified, it will be
         assumed to be that of the origin point. The departAt value must be in the future in the
         date-time format (1996-12-19T16:39:57-08:00).
        :type depart_at: ~datetime.datetime
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that
         weight restrictions per axle are not considered.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters. A value of 0 means that length
         restrictions are not considered.
        :type vehicle_length: float
        :param vehicle_height: Height of the vehicle in meters. A value of 0 means that height
         restrictions are not considered.
        :type vehicle_height: float
        :param vehicle_width: Width of the vehicle in meters. A value of 0 means that width
         restrictions are not considered.
        :type vehicle_width: float
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle
         profile is used to check whether a vehicle is allowed on motorways.


         *
           A value of 0 means that an appropriate value for the vehicle will be determined and applied
         during route planning.

         *
           A non-zero value may be overridden during route planning. For example, the current traffic
         flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will
         consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is
         provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will
         again use 60 km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.


         *
           It is mandatory if any of the *Efficiency parameters are set.

         *
           It must be strictly positive when used in the context of the Consumption Model. Weight
         restrictions are considered.

         *
           If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is
         non-zero, then weight restrictions are considered.

         *
           In all other cases, this parameter is ignored.

         Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.
        :type vehicle_weight: int
        :param vehicle_commercial: Vehicle is used for commercial purposes and thus may not be allowed
         to drive  on some roads.
        :type vehicle_commercial: bool
        :param windingness: Level of turns for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type windingness: str or ~azure.maps.route.models.WindingnessLevel
        :param hilliness: Degree of hilliness for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type hilliness: str or ~azure.maps.route.models.HillinessDegree
        :param travel_mode: The mode of travel for the requested route. If not defined, default is
         'car'. Note that the requested travelMode may not be available for the entire route. Where the
         requested travelMode is not available for a particular section, the travelMode element of the
         response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van
         are BETA functionality. Full restriction data is not available in all areas. In
         **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
        :type travel_mode: str or ~azure.maps.route.models.TravelMode
        :param avoid: Specifies something that the route calculation should try to avoid when
         determining the route. Can be specified multiple times in one request, for example,
         '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the
         value alreadyUsedRoads must not be used.
        :type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]
        :param traffic: Possible values:


         * true - Do consider all available traffic information during routing
         * false - Ignore current traffic data during routing. Note that although the current traffic
         data is ignored
           during routing, the effect of historic traffic on effective road speeds is still
         incorporated.
        :type traffic: bool
        :param route_type: The type of route requested.
        :type route_type: str or ~azure.maps.route.models.RouteType
        :param vehicle_load_type: Types of cargo that may be classified as hazardous materials and
         restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,
         plus generic classifications for use in other countries. Values beginning with USHazmat are for
         US routing while otherHazmat should be used for all other countries. vehicleLoadType can be
         specified multiple times. This parameter is currently only considered for travelMode=truck.
        :type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType
        :param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is
         specified, it must be consistent with the value of **vehicleEngineType**.
        :type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent
         component of consumption.

         Provided as an unordered list of colon-delimited speed & consumption-rate pairs. The list
         defines points on a consumption curve. Consumption rates for speeds not in the list are found
         as follows:


         *
           by linear interpolation, if the given speed lies in between two speeds in the list

         *
           by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by
         the nearest two points in the list

         The list must contain between 1 and 25 points (inclusive), and may not contain duplicate
         points for the same speed. If it only contains a single point, then the consumption rate of
         that point is used without further processing.

         Consumption specified for the largest speed must be greater than or equal to that of the
         penultimate largest speed. This ensures that extrapolation does not lead to negative
         consumption rates.

         Similarly, consumption values specified for the two smallest speeds in the list cannot lead to
         a negative consumption rate for any smaller speed.

         The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.

         Sensible Values : 50,6.3:130,11.5

         **Note** : This parameter is required for **The Combustion Consumption Model**.
        :type constant_speed_consumption_in_liters_per_hundredkm: float
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.

         Sensible Values : 55.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining
         auxiliary systems of the vehicle, in liters per hour.

         It can be used to specify consumption due to devices and systems such as AC systems, radio,
         heating, etc.

         Sensible Values : 0.2.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy
         stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the
         ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For
         example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.

         This parameter is required if any ***Efficiency** parameter is set.

         Sensible Values : 34.2.
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored
         in fuel to kinetic energy when the vehicle accelerates *(i.e.
         KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting
         consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **decelerationEfficiency**.

         The range of values allowed are 0.0 to 1/\ **decelerationEfficiency**.

         Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved
         (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).
         ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using
         **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **accelerationEfficiency**.

         The range of values allowed are 0.0 to 1/\ **accelerationEfficiency**.

         Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel
         to potential energy when the vehicle gains elevation *(i.e.
         PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by
         converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **downhillEfficiency**.

         The range of values allowed are 0.0 to 1/\ **downhillEfficiency**.

         Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved
         (not consumed) fuel when the vehicle loses elevation *(i.e.
         ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved
         (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **uphillEfficiency**.

         The range of values allowed are 0.0 to 1/\ **uphillEfficiency**.

         Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component
         of consumption.

         Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a
         consumption curve. Consumption rates for speeds not in the list are found as follows:


         *
           by linear interpolation, if the given speed lies in between two speeds in the list

         *
           by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by
         the nearest two points in the list

         The list must contain between 1 and 25 points (inclusive), and may not contain duplicate
         points for the same speed. If it only contains a single point, then the consumption rate of
         that point is used without further processing.

         Consumption specified for the largest speed must be greater than or equal to that of the
         penultimate largest speed. This ensures that extrapolation does not lead to negative
         consumption rates.

         Similarly, consumption values specified for the two smallest speeds in the list cannot lead to
         a negative consumption rate for any smaller  speed.

         The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and
         100000.0.

         Sensible Values : 50,8.2:130,21.3

         This parameter is required for **Electric consumption model**.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param current_charge_ink_wh: Specifies the current electric energy supply in kilowatt hours
         (kWh).

         This parameter co-exists with **maxChargeInkWh** parameter.

         The range of values allowed are 0.0 to **maxChargeInkWh**.

         Sensible Values : 43.
        :type current_charge_ink_wh: str
        :param max_charge_ink_wh: Specifies the maximum electric energy supply in kilowatt hours (kWh)
         that may be stored in the vehicle's battery.

         This parameter co-exists with **currentChargeInkWh** parameter.

         Minimum value has to be greater than or equal to **currentChargeInkWh**.

         Sensible Values : 85.
        :type max_charge_ink_wh: str
        :param auxiliary_power_ink_w: Specifies the amount of power consumed for sustaining auxiliary
         systems, in kilowatts (kW).

         It can be used to specify consumption due to devices and systems such as AC systems, radio,
         heating, etc.

         Sensible Values : 1.7.
        :type auxiliary_power_ink_w: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RouteDirectionsResponse, or the result of cls(response)
        :rtype: ~azure.maps.route.models.RouteDirectionsResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RouteDirectionsResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.post_route_directions.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['query'] = self._serialize.query("query", query, 'str')
        if max_alternatives is not None:
            query_parameters['maxAlternatives'] = self._serialize.query("max_alternatives", max_alternatives, 'int', maximum=5, minimum=0)
        if alternative_type is not None:
            query_parameters['alternativeType'] = self._serialize.query("alternative_type", alternative_type, 'str')
        if min_deviation_distance is not None:
            query_parameters['minDeviationDistance'] = self._serialize.query("min_deviation_distance", min_deviation_distance, 'int')
        if min_deviation_time is not None:
            query_parameters['minDeviationTime'] = self._serialize.query("min_deviation_time", min_deviation_time, 'int')
        if instructions_type is not None:
            query_parameters['instructionsType'] = self._serialize.query("instructions_type", instructions_type, 'str')
        if language is not None:
            query_parameters['language'] = self._serialize.query("language", language, 'str')
        if compute_best_order is not None:
            query_parameters['computeBestOrder'] = self._serialize.query("compute_best_order", compute_best_order, 'bool')
        if route_representation is not None:
            query_parameters['routeRepresentation'] = self._serialize.query("route_representation", route_representation, 'str')
        if compute_travel_time_for is not None:
            query_parameters['computeTravelTimeFor'] = self._serialize.query("compute_travel_time_for", compute_travel_time_for, 'str')
        if vehicle_heading is not None:
            query_parameters['vehicleHeading'] = self._serialize.query("vehicle_heading", vehicle_heading, 'int', maximum=359, minimum=0)
        if report is not None:
            query_parameters['report'] = self._serialize.query("report", report, 'str')
        if section_type is not None:
            query_parameters['sectionType'] = self._serialize.query("section_type", section_type, 'str')
        if arrive_at is not None:
            query_parameters['arriveAt'] = self._serialize.query("arrive_at", arrive_at, 'iso-8601')
        if depart_at is not None:
            query_parameters['departAt'] = self._serialize.query("depart_at", depart_at, 'iso-8601')
        if vehicle_axle_weight is not None:
            query_parameters['vehicleAxleWeight'] = self._serialize.query("vehicle_axle_weight", vehicle_axle_weight, 'int')
        if vehicle_length is not None:
            query_parameters['vehicleLength'] = self._serialize.query("vehicle_length", vehicle_length, 'float')
        if vehicle_height is not None:
            query_parameters['vehicleHeight'] = self._serialize.query("vehicle_height", vehicle_height, 'float')
        if vehicle_width is not None:
            query_parameters['vehicleWidth'] = self._serialize.query("vehicle_width", vehicle_width, 'float')
        if vehicle_max_speed is not None:
            query_parameters['vehicleMaxSpeed'] = self._serialize.query("vehicle_max_speed", vehicle_max_speed, 'int')
        if vehicle_weight is not None:
            query_parameters['vehicleWeight'] = self._serialize.query("vehicle_weight", vehicle_weight, 'int')
        if vehicle_commercial is not None:
            query_parameters['vehicleCommercial'] = self._serialize.query("vehicle_commercial", vehicle_commercial, 'bool')
        if windingness is not None:
            query_parameters['windingness'] = self._serialize.query("windingness", windingness, 'str')
        if hilliness is not None:
            query_parameters['hilliness'] = self._serialize.query("hilliness", hilliness, 'str')
        if travel_mode is not None:
            query_parameters['travelMode'] = self._serialize.query("travel_mode", travel_mode, 'str')
        if avoid is not None:
            query_parameters['avoid'] = [self._serialize.query("avoid", q, 'str') if q is not None else '' for q in avoid]
        if traffic is not None:
            query_parameters['traffic'] = self._serialize.query("traffic", traffic, 'bool')
        if route_type is not None:
            query_parameters['routeType'] = self._serialize.query("route_type", route_type, 'str')
        if vehicle_load_type is not None:
            query_parameters['vehicleLoadType'] = self._serialize.query("vehicle_load_type", vehicle_load_type, 'str')
        if vehicle_engine_type is not None:
            query_parameters['vehicleEngineType'] = self._serialize.query("vehicle_engine_type", vehicle_engine_type, 'str')
        if constant_speed_consumption_in_liters_per_hundredkm is not None:
            query_parameters['constantSpeedConsumptionInLitersPerHundredkm'] = self._serialize.query("constant_speed_consumption_in_liters_per_hundredkm", constant_speed_consumption_in_liters_per_hundredkm, 'float')
        if current_fuel_in_liters is not None:
            query_parameters['currentFuelInLiters'] = self._serialize.query("current_fuel_in_liters", current_fuel_in_liters, 'float')
        if auxiliary_power_in_liters_per_hour is not None:
            query_parameters['auxiliaryPowerInLitersPerHour'] = self._serialize.query("auxiliary_power_in_liters_per_hour", auxiliary_power_in_liters_per_hour, 'float')
        if fuel_energy_density_in_m_joules_per_liter is not None:
            query_parameters['fuelEnergyDensityInMJoulesPerLiter'] = self._serialize.query("fuel_energy_density_in_m_joules_per_liter", fuel_energy_density_in_m_joules_per_liter, 'float')
        if acceleration_efficiency is not None:
            query_parameters['accelerationEfficiency'] = self._serialize.query("acceleration_efficiency", acceleration_efficiency, 'float')
        if deceleration_efficiency is not None:
            query_parameters['decelerationEfficiency'] = self._serialize.query("deceleration_efficiency", deceleration_efficiency, 'float')
        if uphill_efficiency is not None:
            query_parameters['uphillEfficiency'] = self._serialize.query("uphill_efficiency", uphill_efficiency, 'float')
        if downhill_efficiency is not None:
            query_parameters['downhillEfficiency'] = self._serialize.query("downhill_efficiency", downhill_efficiency, 'float')
        if constant_speed_consumption_ink_wh_per_hundredkm is not None:
            query_parameters['constantSpeedConsumptionInkWhPerHundredkm'] = self._serialize.query("constant_speed_consumption_ink_wh_per_hundredkm", constant_speed_consumption_ink_wh_per_hundredkm, 'str')
        if current_charge_ink_wh is not None:
            query_parameters['currentChargeInkWh'] = self._serialize.query("current_charge_ink_wh", current_charge_ink_wh, 'str')
        if max_charge_ink_wh is not None:
            query_parameters['maxChargeInkWh'] = self._serialize.query("max_charge_ink_wh", max_charge_ink_wh, 'str')
        if auxiliary_power_ink_w is not None:
            query_parameters['auxiliaryPowerInkW'] = self._serialize.query("auxiliary_power_ink_w", auxiliary_power_ink_w, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(post_route_directions_request_body, 'PostRouteDirectionsRequestBody')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('RouteDirectionsResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    post_route_directions.metadata = {'url': '/route/directions/{format}'}  # type: ignore

    def get_route_range(
        self,
        format,  # type: Union[str, "_models.TextFormat"]
        query,  # type: str
        fuel_budget_in_liters=None,  # type: Optional[float]
        energy_budget_ink_wh=None,  # type: Optional[float]
        time_budget_in_sec=None,  # type: Optional[float]
        distance_budget_in_meters=None,  # type: Optional[float]
        depart_at=None,  # type: Optional[datetime.datetime]
        route_type=None,  # type: Optional[Union[str, "_models.RouteType"]]
        traffic=None,  # type: Optional[bool]
        avoid=None,  # type: Optional[List[Union[str, "_models.RouteAvoidType"]]]
        travel_mode=None,  # type: Optional[Union[str, "_models.TravelMode"]]
        hilliness=None,  # type: Optional[Union[str, "_models.HillinessDegree"]]
        windingness=None,  # type: Optional[Union[str, "_models.WindingnessLevel"]]
        vehicle_axle_weight=None,  # type: Optional[int]
        vehicle_width=None,  # type: Optional[float]
        vehicle_height=None,  # type: Optional[float]
        vehicle_length=None,  # type: Optional[float]
        vehicle_max_speed=None,  # type: Optional[int]
        vehicle_weight=None,  # type: Optional[int]
        vehicle_commercial=None,  # type: Optional[bool]
        vehicle_load_type=None,  # type: Optional[Union[str, "_models.VehicleLoadType"]]
        vehicle_engine_type=None,  # type: Optional[Union[str, "_models.VehicleEngineType"]]
        constant_speed_consumption_in_liters_per_hundredkm=None,  # type: Optional[float]
        current_fuel_in_liters=None,  # type: Optional[float]
        auxiliary_power_in_liters_per_hour=None,  # type: Optional[float]
        fuel_energy_density_in_m_joules_per_liter=None,  # type: Optional[float]
        acceleration_efficiency=None,  # type: Optional[float]
        deceleration_efficiency=None,  # type: Optional[float]
        uphill_efficiency=None,  # type: Optional[float]
        downhill_efficiency=None,  # type: Optional[float]
        constant_speed_consumption_ink_wh_per_hundredkm=None,  # type: Optional[str]
        current_charge_ink_wh=None,  # type: Optional[str]
        max_charge_ink_wh=None,  # type: Optional[str]
        auxiliary_power_ink_w=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.GetRouteRangeResponse"
        """**Route Range (Isochrone) API**

        **Applies to**\ : S1 pricing tier.

        This service will calculate a set of locations that can be reached from the origin point based
        on fuel, energy,  time or distance budget that is specified. A polygon boundary (or Isochrone)
        is returned in a counterclockwise  orientation as well as the precise polygon center which was
        the result of the origin point.

        The returned polygon can be used for further processing such as  `Search Inside Geometry
        <https://docs.microsoft.com/rest/api/maps/search/postsearchinsidegeometry>`_ to  search for
        POIs within the provided Isochrone.

        :param format: Desired format of the response. Value can be either *json* or *xml*.
        :type format: str or ~azure.maps.route.models.TextFormat
        :param query: The Coordinate from which the range calculation should start.
        :type query: str
        :param fuel_budget_in_liters: Fuel budget in liters that determines maximal range which can be
         travelled using the specified Combustion Consumption Model.:code:`<br>` When fuelBudgetInLiters
         is used, it is mandatory to specify a detailed  Combustion Consumption Model.:code:`<br>`
         Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or
         distanceBudgetInMeters) must be used.
        :type fuel_budget_in_liters: float
        :param energy_budget_ink_wh: Electric energy budget in kilowatt hours (kWh) that determines
         maximal range which can be travelled using the specified Electric Consumption
         Model.:code:`<br>` When energyBudgetInkWh is used, it is mandatory to specify a detailed
         Electric Consumption Model.:code:`<br>` Exactly one budget (fuelBudgetInLiters,
         energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.
        :type energy_budget_ink_wh: float
        :param time_budget_in_sec: Time budget in seconds that determines maximal range which can be
         travelled using driving time. The Consumption Model will only affect the range when routeType
         is eco.:code:`<br>` Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec,
         or distanceBudgetInMeters) must be used.
        :type time_budget_in_sec: float
        :param distance_budget_in_meters: Distance budget in meters that determines maximal range which
         can be travelled using driving distance.  The Consumption Model will only affect the range when
         routeType is eco.:code:`<br>` Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh,
         timeBudgetInSec, or distanceBudgetInMeters) must be used.
        :type distance_budget_in_meters: float
        :param depart_at: The date and time of departure from the origin point. Departure times apart
         from now must be specified as a dateTime. When a time zone offset is not specified, it will be
         assumed to be that of the origin point. The departAt value must be in the future in the
         date-time format (1996-12-19T16:39:57-08:00).
        :type depart_at: ~datetime.datetime
        :param route_type: The type of route requested.
        :type route_type: str or ~azure.maps.route.models.RouteType
        :param traffic: Possible values:


         * true - Do consider all available traffic information during routing
         * false - Ignore current traffic data during routing. Note that although the current traffic
         data is ignored
           during routing, the effect of historic traffic on effective road speeds is still
         incorporated.
        :type traffic: bool
        :param avoid: Specifies something that the route calculation should try to avoid when
         determining the route. Can be specified multiple times in one request, for example,
         '&avoid=motorways&avoid=tollRoads&avoid=ferries'. In calculateReachableRange requests, the
         value alreadyUsedRoads must not be used.
        :type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]
        :param travel_mode: The mode of travel for the requested route. If not defined, default is
         'car'. Note that the requested travelMode may not be available for the entire route. Where the
         requested travelMode is not available for a particular section, the travelMode element of the
         response for that section will be "other". Note that travel modes bus, motorcycle, taxi and van
         are BETA functionality. Full restriction data is not available in all areas. In
         **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.
        :type travel_mode: str or ~azure.maps.route.models.TravelMode
        :param hilliness: Degree of hilliness for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type hilliness: str or ~azure.maps.route.models.HillinessDegree
        :param windingness: Level of turns for thrilling route. This parameter can only be used in
         conjunction with ``routeType``\ =thrilling.
        :type windingness: str or ~azure.maps.route.models.WindingnessLevel
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that
         weight restrictions per axle are not considered.
        :type vehicle_axle_weight: int
        :param vehicle_width: Width of the vehicle in meters. A value of 0 means that width
         restrictions are not considered.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters. A value of 0 means that height
         restrictions are not considered.
        :type vehicle_height: float
        :param vehicle_length: Length of the vehicle in meters. A value of 0 means that length
         restrictions are not considered.
        :type vehicle_length: float
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle
         profile is used to check whether a vehicle is allowed on motorways.


         *
           A value of 0 means that an appropriate value for the vehicle will be determined and applied
         during route planning.

         *
           A non-zero value may be overridden during route planning. For example, the current traffic
         flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will
         consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is
         provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will
         again use 60 km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.


         *
           It is mandatory if any of the *Efficiency parameters are set.

         *
           It must be strictly positive when used in the context of the Consumption Model. Weight
         restrictions are considered.

         *
           If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is
         non-zero, then weight restrictions are considered.

         *
           In all other cases, this parameter is ignored.

         Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.
        :type vehicle_weight: int
        :param vehicle_commercial: Vehicle is used for commercial purposes and thus may not be allowed
         to drive  on some roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Types of cargo that may be classified as hazardous materials and
         restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,
         plus generic classifications for use in other countries. Values beginning with USHazmat are for
         US routing while otherHazmat should be used for all other countries. vehicleLoadType can be
         specified multiple times. This parameter is currently only considered for travelMode=truck.
        :type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType
        :param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is
         specified, it must be consistent with the value of **vehicleEngineType**.
        :type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent
         component of consumption.

         Provided as an unordered list of colon-delimited speed & consumption-rate pairs. The list
         defines points on a consumption curve. Consumption rates for speeds not in the list are found
         as follows:


         *
           by linear interpolation, if the given speed lies in between two speeds in the list

         *
           by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by
         the nearest two points in the list

         The list must contain between 1 and 25 points (inclusive), and may not contain duplicate
         points for the same speed. If it only contains a single point, then the consumption rate of
         that point is used without further processing.

         Consumption specified for the largest speed must be greater than or equal to that of the
         penultimate largest speed. This ensures that extrapolation does not lead to negative
         consumption rates.

         Similarly, consumption values specified for the two smallest speeds in the list cannot lead to
         a negative consumption rate for any smaller speed.

         The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.

         Sensible Values : 50,6.3:130,11.5

         **Note** : This parameter is required for **The Combustion Consumption Model**.
        :type constant_speed_consumption_in_liters_per_hundredkm: float
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.

         Sensible Values : 55.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining
         auxiliary systems of the vehicle, in liters per hour.

         It can be used to specify consumption due to devices and systems such as AC systems, radio,
         heating, etc.

         Sensible Values : 0.2.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy
         stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the
         ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For
         example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.

         This parameter is required if any ***Efficiency** parameter is set.

         Sensible Values : 34.2.
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored
         in fuel to kinetic energy when the vehicle accelerates *(i.e.
         KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting
         consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **decelerationEfficiency**.

         The range of values allowed are 0.0 to 1/\ **decelerationEfficiency**.

         Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved
         (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).
         ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using
         **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **accelerationEfficiency**.

         The range of values allowed are 0.0 to 1/\ **accelerationEfficiency**.

         Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel
         to potential energy when the vehicle gains elevation *(i.e.
         PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by
         converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **downhillEfficiency**.

         The range of values allowed are 0.0 to 1/\ **downhillEfficiency**.

         Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved
         (not consumed) fuel when the vehicle loses elevation *(i.e.
         ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved
         (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.

         Must be paired with **uphillEfficiency**.

         The range of values allowed are 0.0 to 1/\ **uphillEfficiency**.

         Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component
         of consumption.

         Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a
         consumption curve. Consumption rates for speeds not in the list are found as follows:


         *
           by linear interpolation, if the given speed lies in between two speeds in the list

         *
           by linear extrapolation otherwise, assuming a constant (ΔConsumption/ΔSpeed) determined by
         the nearest two points in the list

         The list must contain between 1 and 25 points (inclusive), and may not contain duplicate
         points for the same speed. If it only contains a single point, then the consumption rate of
         that point is used without further processing.

         Consumption specified for the largest speed must be greater than or equal to that of the
         penultimate largest speed. This ensures that extrapolation does not lead to negative
         consumption rates.

         Similarly, consumption values specified for the two smallest speeds in the list cannot lead to
         a negative consumption rate for any smaller  speed.

         The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and
         100000.0.

         Sensible Values : 50,8.2:130,21.3

         This parameter is required for **Electric consumption model**.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param current_charge_ink_wh: Specifies the current electric energy supply in kilowatt hours
         (kWh).

         This parameter co-exists with **maxChargeInkWh** parameter.

         The range of values allowed are 0.0 to **maxChargeInkWh**.

         Sensible Values : 43.
        :type current_charge_ink_wh: str
        :param max_charge_ink_wh: Specifies the maximum electric energy supply in kilowatt hours (kWh)
         that may be stored in the vehicle's battery.

         This parameter co-exists with **currentChargeInkWh** parameter.

         Minimum value has to be greater than or equal to **currentChargeInkWh**.

         Sensible Values : 85.
        :type max_charge_ink_wh: str
        :param auxiliary_power_ink_w: Specifies the amount of power consumed for sustaining auxiliary
         systems, in kilowatts (kW).

         It can be used to specify consumption due to devices and systems such as AC systems, radio,
         heating, etc.

         Sensible Values : 1.7.
        :type auxiliary_power_ink_w: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GetRouteRangeResponse, or the result of cls(response)
        :rtype: ~azure.maps.route.models.GetRouteRangeResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.GetRouteRangeResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_route_range.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['query'] = self._serialize.query("query", query, 'str')
        if fuel_budget_in_liters is not None:
            query_parameters['fuelBudgetInLiters'] = self._serialize.query("fuel_budget_in_liters", fuel_budget_in_liters, 'float')
        if energy_budget_ink_wh is not None:
            query_parameters['energyBudgetInkWh'] = self._serialize.query("energy_budget_ink_wh", energy_budget_ink_wh, 'float')
        if time_budget_in_sec is not None:
            query_parameters['timeBudgetInSec'] = self._serialize.query("time_budget_in_sec", time_budget_in_sec, 'float')
        if distance_budget_in_meters is not None:
            query_parameters['distanceBudgetInMeters'] = self._serialize.query("distance_budget_in_meters", distance_budget_in_meters, 'float')
        if depart_at is not None:
            query_parameters['departAt'] = self._serialize.query("depart_at", depart_at, 'iso-8601')
        if route_type is not None:
            query_parameters['routeType'] = self._serialize.query("route_type", route_type, 'str')
        if traffic is not None:
            query_parameters['traffic'] = self._serialize.query("traffic", traffic, 'bool')
        if avoid is not None:
            query_parameters['avoid'] = [self._serialize.query("avoid", q, 'str') if q is not None else '' for q in avoid]
        if travel_mode is not None:
            query_parameters['travelMode'] = self._serialize.query("travel_mode", travel_mode, 'str')
        if hilliness is not None:
            query_parameters['hilliness'] = self._serialize.query("hilliness", hilliness, 'str')
        if windingness is not None:
            query_parameters['windingness'] = self._serialize.query("windingness", windingness, 'str')
        if vehicle_axle_weight is not None:
            query_parameters['vehicleAxleWeight'] = self._serialize.query("vehicle_axle_weight", vehicle_axle_weight, 'int')
        if vehicle_width is not None:
            query_parameters['vehicleWidth'] = self._serialize.query("vehicle_width", vehicle_width, 'float')
        if vehicle_height is not None:
            query_parameters['vehicleHeight'] = self._serialize.query("vehicle_height", vehicle_height, 'float')
        if vehicle_length is not None:
            query_parameters['vehicleLength'] = self._serialize.query("vehicle_length", vehicle_length, 'float')
        if vehicle_max_speed is not None:
            query_parameters['vehicleMaxSpeed'] = self._serialize.query("vehicle_max_speed", vehicle_max_speed, 'int')
        if vehicle_weight is not None:
            query_parameters['vehicleWeight'] = self._serialize.query("vehicle_weight", vehicle_weight, 'int')
        if vehicle_commercial is not None:
            query_parameters['vehicleCommercial'] = self._serialize.query("vehicle_commercial", vehicle_commercial, 'bool')
        if vehicle_load_type is not None:
            query_parameters['vehicleLoadType'] = self._serialize.query("vehicle_load_type", vehicle_load_type, 'str')
        if vehicle_engine_type is not None:
            query_parameters['vehicleEngineType'] = self._serialize.query("vehicle_engine_type", vehicle_engine_type, 'str')
        if constant_speed_consumption_in_liters_per_hundredkm is not None:
            query_parameters['constantSpeedConsumptionInLitersPerHundredkm'] = self._serialize.query("constant_speed_consumption_in_liters_per_hundredkm", constant_speed_consumption_in_liters_per_hundredkm, 'float')
        if current_fuel_in_liters is not None:
            query_parameters['currentFuelInLiters'] = self._serialize.query("current_fuel_in_liters", current_fuel_in_liters, 'float')
        if auxiliary_power_in_liters_per_hour is not None:
            query_parameters['auxiliaryPowerInLitersPerHour'] = self._serialize.query("auxiliary_power_in_liters_per_hour", auxiliary_power_in_liters_per_hour, 'float')
        if fuel_energy_density_in_m_joules_per_liter is not None:
            query_parameters['fuelEnergyDensityInMJoulesPerLiter'] = self._serialize.query("fuel_energy_density_in_m_joules_per_liter", fuel_energy_density_in_m_joules_per_liter, 'float')
        if acceleration_efficiency is not None:
            query_parameters['accelerationEfficiency'] = self._serialize.query("acceleration_efficiency", acceleration_efficiency, 'float')
        if deceleration_efficiency is not None:
            query_parameters['decelerationEfficiency'] = self._serialize.query("deceleration_efficiency", deceleration_efficiency, 'float')
        if uphill_efficiency is not None:
            query_parameters['uphillEfficiency'] = self._serialize.query("uphill_efficiency", uphill_efficiency, 'float')
        if downhill_efficiency is not None:
            query_parameters['downhillEfficiency'] = self._serialize.query("downhill_efficiency", downhill_efficiency, 'float')
        if constant_speed_consumption_ink_wh_per_hundredkm is not None:
            query_parameters['constantSpeedConsumptionInkWhPerHundredkm'] = self._serialize.query("constant_speed_consumption_ink_wh_per_hundredkm", constant_speed_consumption_ink_wh_per_hundredkm, 'str')
        if current_charge_ink_wh is not None:
            query_parameters['currentChargeInkWh'] = self._serialize.query("current_charge_ink_wh", current_charge_ink_wh, 'str')
        if max_charge_ink_wh is not None:
            query_parameters['maxChargeInkWh'] = self._serialize.query("max_charge_ink_wh", max_charge_ink_wh, 'str')
        if auxiliary_power_ink_w is not None:
            query_parameters['auxiliaryPowerInkW'] = self._serialize.query("auxiliary_power_ink_w", auxiliary_power_ink_w, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('GetRouteRangeResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_route_range.metadata = {'url': '/route/range/{format}'}  # type: ignore

    def _post_route_directions_batch_initial(
        self,
        format,  # type: Union[str, "_models.ResponseFormat"]
        post_route_directions_batch_request_body,  # type: "_models.BatchRequestBody"
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["_models.RouteDirectionsBatchResponse"]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.RouteDirectionsBatchResponse"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self._post_route_directions_batch_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(post_route_directions_batch_request_body, 'BatchRequestBody')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('RouteDirectionsBatchResponse', pipeline_response)

        if response.status_code == 202:
            response_headers['Location']=self._deserialize('str', response.headers.get('Location'))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    _post_route_directions_batch_initial.metadata = {'url': '/route/directions/batch/{format}'}  # type: ignore

    def begin_post_route_directions_batch(
        self,
        format,  # type: Union[str, "_models.ResponseFormat"]
        post_route_directions_batch_request_body,  # type: "_models.BatchRequestBody"
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["_models.RouteDirectionsBatchResponse"]
        """**Route Directions Batch API**

        **Applies to**\ : S1 pricing tier.

        The Route Directions Batch API sends batches of queries to `Route Directions API
        <https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections>`_ using just a single
        API call. You can call Route Directions Batch API to run either asynchronously (async) or
        synchronously (sync). The async API allows caller to batch up to **700** queries and sync API
        up to **100** queries.

        Submit Synchronous Batch Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        The Synchronous API is recommended for lightweight batch requests. When the service receives a
        request, it will respond as soon as the batch items are calculated and there will be no
        possibility to retrieve the results later. The Synchronous API will return a timeout error (a
        408 response) if the request takes longer than 60 seconds. The number of batch items is limited
        to **100** for this API.

        .. code-block::

           POST
        https://atlas.microsoft.com/route/directions/batch/sync/json?api-version=1.0&subscription-key={subscription-key}

        Submit Asynchronous Batch Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        The Asynchronous API is appropriate for processing big volumes of relatively complex route
        requests


        * It allows the retrieval of results in a separate call (multiple downloads are possible).
        * The asynchronous API is optimized for reliability and is not expected to run into a timeout.
        * The number of batch items is limited to **700** for this API.

        When you make a request by using async request, by default the service returns a 202 response
        code along a redirect URL in the Location field of the response header. This URL should be
        checked periodically until the response data or error information is available.
        The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response
        if used after the expiration period.

        Please note that asynchronous batch request is a long-running request. Here's a typical
        sequence of operations:


        #. Client sends a Route Directions Batch ``POST`` request to Azure Maps
        #.
           The server will respond with one of the following:

           ..

              HTTP ``202 Accepted`` - Batch request has been accepted.

              HTTP ``Error`` - There was an error processing your Batch request. This could either be a
        ``400 Bad Request`` or any other ``Error`` status code.


        #.
           If the batch request was accepted successfully, the ``Location`` header in the response
        contains the URL to download the results of the batch request.
            This status URI looks like following:

        ``GET https://atlas.microsoft.com/batch/{batch-id}?api-version=1.0``
        Note:- Please remember to add AUTH information (subscription-key/azure_auth - See `Security
        <#security>`_\ ) to the *status URI* before running it. :code:`<br>`


        #. Client issues a ``GET`` request on the *download URL* obtained in Step 3 to download the
        batch results.

        POST Body for Batch Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

        To send the *route directions* queries you will use a ``POST`` request where the request body
        will contain the ``batchItems`` array in ``json`` format and the ``Content-Type`` header will
        be set to ``application/json``. Here's a sample request body containing 3 *route directions*
        queries:

        .. code-block:: json

           {
               "batchItems": [
                   { "query":
        "?query=47.620659,-122.348934:47.610101,-122.342015&travelMode=bicycle&routeType=eco&traffic=false"
        },
                   { "query":
        "?query=40.759856,-73.985108:40.771136,-73.973506&travelMode=pedestrian&routeType=shortest" },
                   { "query": "?query=48.923159,-122.557362:32.621279,-116.840362" }
               ]
           }

        A *route directions* query in a batch is just a partial URL *without* the protocol, base URL,
        path, api-version and subscription-key. It can accept any of the supported *route directions*
        `URI parameters
        <https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections#uri-parameters>`_. The
        string values in the *route directions* query must be properly escaped (e.g. " character should
        be escaped with ) and it should also be properly URL-encoded.

        The async API allows caller to batch up to **700** queries and sync API up to **100** queries,
        and the batch should contain at least **1** query.

        Download Asynchronous Batch Results
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        To download the async batch results you will issue a ``GET`` request to the batch download
        endpoint. This *download URL* can be obtained from the ``Location`` header of a successful
        ``POST`` batch request and looks like the following:

        .. code-block::

        https://atlas.microsoft.com/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}

        Here's the typical sequence of operations for downloading the batch results:


        #. Client sends a ``GET`` request using the *download URL*.
        #.
           The server will respond with one of the following:

           ..

              HTTP ``202 Accepted`` - Batch request was accepted but is still being processed. Please
        try again in some time.

              HTTP ``200 OK`` - Batch request successfully processed. The response body contains all
        the batch results.


        Batch Response Model
        ^^^^^^^^^^^^^^^^^^^^

        The returned data content is similar for async and sync requests. When downloading the results
        of an async batch request, if the batch has finished processing, the response body contains the
        batch response. This batch response contains a ``summary`` component that indicates the
        ``totalRequests`` that were part of the original batch request and ``successfulRequests``\ i.e.
        queries which were executed successfully. The batch response also includes a ``batchItems``
        array which contains a response for each and every query in the batch request. The
        ``batchItems`` will contain the results in the exact same order the original queries were sent
        in the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``
        fields. Each ``response`` in ``batchItems`` is of one of the following types:


        *
          `\ ``RouteDirectionsResponse``
        <https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections#routedirectionsresponse>`_
        - If the query completed successfully.

        *
          ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in
        this case.

        Here's a sample Batch Response with 1 *successful* and 1 *failed* result:

        .. code-block:: json

           {
               "summary": {
                   "successfulRequests": 1,
                   "totalRequests": 2
               },
               "batchItems": [
                   {
                       "statusCode": 200,
                       "response": {
                           "routes": [
                               {
                                   "summary": {
                                       "lengthInMeters": 1758,
                                       "travelTimeInSeconds": 387,
                                       "trafficDelayInSeconds": 0,
                                       "departureTime": "2018-07-17T00:49:56+00:00",
                                       "arrivalTime": "2018-07-17T00:56:22+00:00"
                                   },
                                   "legs": [
                                       {
                                           "summary": {
                                               "lengthInMeters": 1758,
                                               "travelTimeInSeconds": 387,
                                               "trafficDelayInSeconds": 0,
                                               "departureTime": "2018-07-17T00:49:56+00:00",
                                               "arrivalTime": "2018-07-17T00:56:22+00:00"
                                           },
                                           "points": [
                                               {
                                                   "latitude": 47.62094,
                                                   "longitude": -122.34892
                                               },
                                               {
                                                   "latitude": 47.62094,
                                                   "longitude": -122.3485
                                               },
                                               {
                                                   "latitude": 47.62095,
                                                   "longitude": -122.3476
                                               }
                                           ]
                                       }
                                   ],
                                   "sections": [
                                       {
                                           "startPointIndex": 0,
                                           "endPointIndex": 40,
                                           "sectionType": "TRAVEL_MODE",
                                           "travelMode": "bicycle"
                                       }
                                   ]
                               }
                           ]
                       }
                   },
                   {
                       "statusCode": 400,
                       "response":
                       {
                           "error":
                           {
                               "code": "400 BadRequest",
                               "message": "Bad request: one or more parameters were incorrectly
        specified or are mutually exclusive."
                           }
                       }
                   }
               ]
           }.

        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.route.models.ResponseFormat
        :param post_route_directions_batch_request_body: The list of route directions queries/requests
         to process. The list can contain  a max of 700 queries for async and 100 queries for sync
         version and must contain at least 1 query.
        :type post_route_directions_batch_request_body: ~azure.maps.route.models.BatchRequestBody
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling.
         Pass in False for this operation to not poll, or pass in your own initialized polling object for a personal polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either RouteDirectionsBatchResponse or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~azure.maps.route.models.RouteDirectionsBatchResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RouteDirectionsBatchResponse"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._post_route_directions_batch_initial(
                format=format,
                post_route_directions_batch_request_body=post_route_directions_batch_request_body,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('RouteDirectionsBatchResponse', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }

        if polling is True: polling_method = LROBasePolling(lro_delay, lro_options={'final-state-via': 'location'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_post_route_directions_batch.metadata = {'url': '/route/directions/batch/{format}'}  # type: ignore

    def _get_route_directions_batch_initial(
        self,
        format,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["_models.RouteDirectionsBatchResponse"]
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.RouteDirectionsBatchResponse"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self._get_route_directions_batch_initial.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('RouteDirectionsBatchResponse', pipeline_response)

        if response.status_code == 202:
            response_headers['Location']=self._deserialize('str', response.headers.get('Location'))

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized
    _get_route_directions_batch_initial.metadata = {'url': '/route/directions/batch/{format}'}  # type: ignore

    def begin_get_route_directions_batch(
        self,
        format,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller["_models.RouteDirectionsBatchResponse"]
        """Download Asynchronous Batch Results
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        To download the async batch results you will issue a ``GET`` request to the batch download
        endpoint. This *download URL* can be obtained from the ``Location`` header of a successful
        ``POST`` batch request and looks like the following:

        .. code-block::

        https://atlas.microsoft.com/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}

        Here's the typical sequence of operations for downloading the batch results:


        #. Client sends a ``GET`` request using the *download URL*.
        #.
           The server will respond with one of the following:

           ..

              HTTP ``202 Accepted`` - Batch request was accepted but is still being processed. Please
        try again in some time.

              HTTP ``200 OK`` - Batch request successfully processed. The response body contains all
        the batch results.


        Batch Response Model
        ^^^^^^^^^^^^^^^^^^^^

        The returned data content is similar for async and sync requests. When downloading the results
        of an async batch request, if the batch has finished processing, the response body contains the
        batch response. This batch response contains a ``summary`` component that indicates the
        ``totalRequests`` that were part of the original batch request and ``successfulRequests``\ i.e.
        queries which were executed successfully. The batch response also includes a ``batchItems``
        array which contains a response for each and every query in the batch request. The
        ``batchItems`` will contain the results in the exact same order the original queries were sent
        in the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``
        fields. Each ``response`` in ``batchItems`` is of one of the following types:


        *
          `\ ``RouteDirectionsResponse``
        <https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections#routedirectionsresponse>`_
        - If the query completed successfully.

        *
          ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in
        this case.

        Here's a sample Batch Response with 1 *successful* and 1 *failed* result:

        .. code-block:: json

           {
               "summary": {
                   "successfulRequests": 1,
                   "totalRequests": 2
               },
               "batchItems": [
                   {
                       "statusCode": 200,
                       "response": {
                           "routes": [
                               {
                                   "summary": {
                                       "lengthInMeters": 1758,
                                       "travelTimeInSeconds": 387,
                                       "trafficDelayInSeconds": 0,
                                       "departureTime": "2018-07-17T00:49:56+00:00",
                                       "arrivalTime": "2018-07-17T00:56:22+00:00"
                                   },
                                   "legs": [
                                       {
                                           "summary": {
                                               "lengthInMeters": 1758,
                                               "travelTimeInSeconds": 387,
                                               "trafficDelayInSeconds": 0,
                                               "departureTime": "2018-07-17T00:49:56+00:00",
                                               "arrivalTime": "2018-07-17T00:56:22+00:00"
                                           },
                                           "points": [
                                               {
                                                   "latitude": 47.62094,
                                                   "longitude": -122.34892
                                               },
                                               {
                                                   "latitude": 47.62094,
                                                   "longitude": -122.3485
                                               },
                                               {
                                                   "latitude": 47.62095,
                                                   "longitude": -122.3476
                                               }
                                           ]
                                       }
                                   ],
                                   "sections": [
                                       {
                                           "startPointIndex": 0,
                                           "endPointIndex": 40,
                                           "sectionType": "TRAVEL_MODE",
                                           "travelMode": "bicycle"
                                       }
                                   ]
                               }
                           ]
                       }
                   },
                   {
                       "statusCode": 400,
                       "response":
                       {
                           "error":
                           {
                               "code": "400 BadRequest",
                               "message": "Bad request: one or more parameters were incorrectly
        specified or are mutually exclusive."
                           }
                       }
                   }
               ]
           }.

        :param format: Batch id for querying the operation.
        :type format: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling.
         Pass in False for this operation to not poll, or pass in your own initialized polling object for a personal polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either RouteDirectionsBatchResponse or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[~azure.maps.route.models.RouteDirectionsBatchResponse]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RouteDirectionsBatchResponse"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._get_route_directions_batch_initial(
                format=format,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            deserialized = self._deserialize('RouteDirectionsBatchResponse', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }

        if polling is True: polling_method = LROBasePolling(lro_delay, lro_options={'final-state-via': 'original-uri'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_get_route_directions_batch.metadata = {'url': '/route/directions/batch/{format}'}  # type: ignore

    def post_route_directions_batch_sync(
        self,
        format,  # type: Union[str, "_models.ResponseFormat"]
        post_route_directions_batch_request_body,  # type: "_models.BatchRequestBody"
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RouteDirectionsBatchResponse"
        """**Route Directions Batch API**

        **Applies to**\ : S1 pricing tier.

        The Route Directions Batch API sends batches of queries to `Route Directions API
        <https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections>`_ using just a single
        API call. You can call Route Directions Batch API to run either asynchronously (async) or
        synchronously (sync). The async API allows caller to batch up to **700** queries and sync API
        up to **100** queries.

        Submit Synchronous Batch Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        The Synchronous API is recommended for lightweight batch requests. When the service receives a
        request, it will respond as soon as the batch items are calculated and there will be no
        possibility to retrieve the results later. The Synchronous API will return a timeout error (a
        408 response) if the request takes longer than 60 seconds. The number of batch items is limited
        to **100** for this API.

        .. code-block::

           POST
        https://atlas.microsoft.com/route/directions/batch/sync/json?api-version=1.0&subscription-key={subscription-key}

        Submit Asynchronous Batch Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        The Asynchronous API is appropriate for processing big volumes of relatively complex route
        requests


        * It allows the retrieval of results in a separate call (multiple downloads are possible).
        * The asynchronous API is optimized for reliability and is not expected to run into a timeout.
        * The number of batch items is limited to **700** for this API.

        When you make a request by using async request, by default the service returns a 202 response
        code along a redirect URL in the Location field of the response header. This URL should be
        checked periodically until the response data or error information is available.
        The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response
        if used after the expiration period.

        Please note that asynchronous batch request is a long-running request. Here's a typical
        sequence of operations:


        #. Client sends a Route Directions Batch ``POST`` request to Azure Maps
        #.
           The server will respond with one of the following:

           ..

              HTTP ``202 Accepted`` - Batch request has been accepted.

              HTTP ``Error`` - There was an error processing your Batch request. This could either be a
        ``400 Bad Request`` or any other ``Error`` status code.


        #.
           If the batch request was accepted successfully, the ``Location`` header in the response
        contains the URL to download the results of the batch request.
            This status URI looks like following:

        ``GET https://atlas.microsoft.com/batch/{batch-id}?api-version=1.0``
        Note:- Please remember to add AUTH information (subscription-key/azure_auth - See `Security
        <#security>`_\ ) to the *status URI* before running it. :code:`<br>`


        #. Client issues a ``GET`` request on the *download URL* obtained in Step 3 to download the
        batch results.

        POST Body for Batch Request
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

        To send the *route directions* queries you will use a ``POST`` request where the request body
        will contain the ``batchItems`` array in ``json`` format and the ``Content-Type`` header will
        be set to ``application/json``. Here's a sample request body containing 3 *route directions*
        queries:

        .. code-block:: json

           {
               "batchItems": [
                   { "query":
        "?query=47.620659,-122.348934:47.610101,-122.342015&travelMode=bicycle&routeType=eco&traffic=false"
        },
                   { "query":
        "?query=40.759856,-73.985108:40.771136,-73.973506&travelMode=pedestrian&routeType=shortest" },
                   { "query": "?query=48.923159,-122.557362:32.621279,-116.840362" }
               ]
           }

        A *route directions* query in a batch is just a partial URL *without* the protocol, base URL,
        path, api-version and subscription-key. It can accept any of the supported *route directions*
        `URI parameters
        <https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections#uri-parameters>`_. The
        string values in the *route directions* query must be properly escaped (e.g. " character should
        be escaped with ) and it should also be properly URL-encoded.

        The async API allows caller to batch up to **700** queries and sync API up to **100** queries,
        and the batch should contain at least **1** query.

        Download Asynchronous Batch Results
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        To download the async batch results you will issue a ``GET`` request to the batch download
        endpoint. This *download URL* can be obtained from the ``Location`` header of a successful
        ``POST`` batch request and looks like the following:

        .. code-block::

        https://atlas.microsoft.com/batch/{batch-id}?api-version=1.0&subscription-key={subscription-key}

        Here's the typical sequence of operations for downloading the batch results:


        #. Client sends a ``GET`` request using the *download URL*.
        #.
           The server will respond with one of the following:

           ..

              HTTP ``202 Accepted`` - Batch request was accepted but is still being processed. Please
        try again in some time.

              HTTP ``200 OK`` - Batch request successfully processed. The response body contains all
        the batch results.


        Batch Response Model
        ^^^^^^^^^^^^^^^^^^^^

        The returned data content is similar for async and sync requests. When downloading the results
        of an async batch request, if the batch has finished processing, the response body contains the
        batch response. This batch response contains a ``summary`` component that indicates the
        ``totalRequests`` that were part of the original batch request and ``successfulRequests``\ i.e.
        queries which were executed successfully. The batch response also includes a ``batchItems``
        array which contains a response for each and every query in the batch request. The
        ``batchItems`` will contain the results in the exact same order the original queries were sent
        in the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``
        fields. Each ``response`` in ``batchItems`` is of one of the following types:


        *
          `\ ``RouteDirectionsResponse``
        <https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections#routedirectionsresponse>`_
        - If the query completed successfully.

        *
          ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in
        this case.

        Here's a sample Batch Response with 1 *successful* and 1 *failed* result:

        .. code-block:: json

           {
               "summary": {
                   "successfulRequests": 1,
                   "totalRequests": 2
               },
               "batchItems": [
                   {
                       "statusCode": 200,
                       "response": {
                           "routes": [
                               {
                                   "summary": {
                                       "lengthInMeters": 1758,
                                       "travelTimeInSeconds": 387,
                                       "trafficDelayInSeconds": 0,
                                       "departureTime": "2018-07-17T00:49:56+00:00",
                                       "arrivalTime": "2018-07-17T00:56:22+00:00"
                                   },
                                   "legs": [
                                       {
                                           "summary": {
                                               "lengthInMeters": 1758,
                                               "travelTimeInSeconds": 387,
                                               "trafficDelayInSeconds": 0,
                                               "departureTime": "2018-07-17T00:49:56+00:00",
                                               "arrivalTime": "2018-07-17T00:56:22+00:00"
                                           },
                                           "points": [
                                               {
                                                   "latitude": 47.62094,
                                                   "longitude": -122.34892
                                               },
                                               {
                                                   "latitude": 47.62094,
                                                   "longitude": -122.3485
                                               },
                                               {
                                                   "latitude": 47.62095,
                                                   "longitude": -122.3476
                                               }
                                           ]
                                       }
                                   ],
                                   "sections": [
                                       {
                                           "startPointIndex": 0,
                                           "endPointIndex": 40,
                                           "sectionType": "TRAVEL_MODE",
                                           "travelMode": "bicycle"
                                       }
                                   ]
                               }
                           ]
                       }
                   },
                   {
                       "statusCode": 400,
                       "response":
                       {
                           "error":
                           {
                               "code": "400 BadRequest",
                               "message": "Bad request: one or more parameters were incorrectly
        specified or are mutually exclusive."
                           }
                       }
                   }
               ]
           }.

        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.route.models.ResponseFormat
        :param post_route_directions_batch_request_body: The list of route directions queries/requests
         to process. The list can contain  a max of 700 queries for async and 100 queries for sync
         version and must contain at least 1 query.
        :type post_route_directions_batch_request_body: ~azure.maps.route.models.BatchRequestBody
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RouteDirectionsBatchResponse, or the result of cls(response)
        :rtype: ~azure.maps.route.models.RouteDirectionsBatchResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RouteDirectionsBatchResponse"]
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            408: lambda response: HttpResponseError(response=response, model=self._deserialize(_models.ErrorResponse, response)),
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.post_route_directions_batch_sync.metadata['url']  # type: ignore
        path_format_arguments = {
            'geography': self._serialize.url("self._config.geography", self._config.geography, 'str'),
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.x_ms_client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.x_ms_client_id", self._config.x_ms_client_id, 'str')
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(post_route_directions_batch_request_body, 'BatchRequestBody')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('RouteDirectionsBatchResponse', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    post_route_directions_batch_sync.metadata = {'url': '/route/directions/batch/sync/{format}'}  # type: ignore
