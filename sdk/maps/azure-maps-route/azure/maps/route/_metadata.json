{
    "chosen_version": "1.0",
    "total_api_version_list": ["1.0"],
    "client": {
        "name": "RouteClient",
        "filename": "_route_client",
        "description": "Azure Maps Route REST APIs.",
        "base_url": "\u0027https://atlas.microsoft.com\u0027",
        "custom_base_url": null,
        "azure_arm": false,
        "has_lro_operations": true,
        "client_side_validation": false
    },
    "global_parameters": {
        "sync": {
            "credential": {
                "signature": "credential,  # type: \"TokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials.TokenCredential",
                "required": true
            },
            "client_id": {
                "signature": "client_id=None,  # type: Optional[str]",
                "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles \u003chttps://aka.ms/amauthdetails\u003e`_ for guidance.",
                "docstring_type": "str",
                "required": false
            }
        },
        "async": {
            "credential": {
                "signature": "credential,  # type: \"AsyncTokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials_async.AsyncTokenCredential",
                "required": true
            },
            "client_id": {
                "signature": "client_id=None,  # type: Optional[str]",
                "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles \u003chttps://aka.ms/amauthdetails\u003e`_ for guidance.",
                "docstring_type": "str",
                "required": false
            }
        },
        "constant": {
        },
        "call": "credential, client_id"
    },
    "config": {
        "credential": true,
        "credential_scopes": ["https://atlas.microsoft.com/.default"],
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true,
        "credential_key_header_name": null
    },
    "operation_groups": {
    },
    "operation_mixins": {
        "_request_route_matrix_initial" : {
            "sync": {
                "signature": "def _request_route_matrix_initial(\n    self,\n    route_matrix_query,  # type: \"models.RouteMatrixQuery\"\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    wait_for_results=None,  # type: Optional[bool]\n    compute_travel_time=None,  # type: Optional[Union[str, \"models.ComputeTravelTime\"]]\n    filter_section_type=None,  # type: Optional[Union[str, \"models.SectionType\"]]\n    arrive_at=None,  # type: Optional[datetime.datetime]\n    depart_at=None,  # type: Optional[datetime.datetime]\n    vehicle_axle_weight=0,  # type: Optional[int]\n    vehicle_length=0,  # type: Optional[float]\n    vehicle_height=0,  # type: Optional[float]\n    vehicle_width=0,  # type: Optional[float]\n    vehicle_max_speed=0,  # type: Optional[int]\n    vehicle_weight=0,  # type: Optional[int]\n    windingness=None,  # type: Optional[Union[str, \"models.WindingnessLevel\"]]\n    incline_level=None,  # type: Optional[Union[str, \"models.InclineLevel\"]]\n    travel_mode=None,  # type: Optional[Union[str, \"models.TravelMode\"]]\n    avoid=None,  # type: Optional[List[Union[str, \"models.RouteAvoidType\"]]]\n    use_traffic_data=None,  # type: Optional[bool]\n    route_type=None,  # type: Optional[Union[str, \"models.RouteType\"]]\n    vehicle_load_type=None,  # type: Optional[Union[str, \"models.VehicleLoadType\"]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"\n\n:param route_matrix_query: The matrix of origin and destination coordinates to compute the\n route distance, travel time and other summary for each cell of the matrix based on the input\n parameters. The minimum and the maximum cell count supported are 1 and **700** for async and\n **100** for sync respectively. For example, it can be 35 origins and 20 destinations or 25\n origins and 25 destinations for async API.\n:type route_matrix_query: ~azure.maps.route.models.RouteMatrixQuery\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:param wait_for_results: Boolean to indicate whether to execute the request synchronously. If\n set to true, user will get a 200 response if the request is finished under 120 seconds.\n Otherwise, user will get a 202 response right away. Please refer to the API description for\n more details on 202 response. **Supported only for async request**.\n:type wait_for_results: bool\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n:type vehicle_weight: int\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteMatrixResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteMatrixResult or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def _request_route_matrix_initial(\n    self,\n    route_matrix_query: \"models.RouteMatrixQuery\",\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    wait_for_results: Optional[bool] = None,\n    compute_travel_time: Optional[Union[str, \"models.ComputeTravelTime\"]] = None,\n    filter_section_type: Optional[Union[str, \"models.SectionType\"]] = None,\n    arrive_at: Optional[datetime.datetime] = None,\n    depart_at: Optional[datetime.datetime] = None,\n    vehicle_axle_weight: Optional[int] = 0,\n    vehicle_length: Optional[float] = 0,\n    vehicle_height: Optional[float] = 0,\n    vehicle_width: Optional[float] = 0,\n    vehicle_max_speed: Optional[int] = 0,\n    vehicle_weight: Optional[int] = 0,\n    windingness: Optional[Union[str, \"models.WindingnessLevel\"]] = None,\n    incline_level: Optional[Union[str, \"models.InclineLevel\"]] = None,\n    travel_mode: Optional[Union[str, \"models.TravelMode\"]] = None,\n    avoid: Optional[List[Union[str, \"models.RouteAvoidType\"]]] = None,\n    use_traffic_data: Optional[bool] = None,\n    route_type: Optional[Union[str, \"models.RouteType\"]] = None,\n    vehicle_load_type: Optional[Union[str, \"models.VehicleLoadType\"]] = None,\n    **kwargs\n) -\u003e Optional[\"models.RouteMatrixResult\"]:\n",
                "doc": "\"\"\"\n\n:param route_matrix_query: The matrix of origin and destination coordinates to compute the\n route distance, travel time and other summary for each cell of the matrix based on the input\n parameters. The minimum and the maximum cell count supported are 1 and **700** for async and\n **100** for sync respectively. For example, it can be 35 origins and 20 destinations or 25\n origins and 25 destinations for async API.\n:type route_matrix_query: ~azure.maps.route.models.RouteMatrixQuery\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:param wait_for_results: Boolean to indicate whether to execute the request synchronously. If\n set to true, user will get a 200 response if the request is finished under 120 seconds.\n Otherwise, user will get a 202 response right away. Please refer to the API description for\n more details on 202 response. **Supported only for async request**.\n:type wait_for_results: bool\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n:type vehicle_weight: int\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteMatrixResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteMatrixResult or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "route_matrix_query, format, wait_for_results, compute_travel_time, filter_section_type, arrive_at, depart_at, vehicle_axle_weight, vehicle_length, vehicle_height, vehicle_width, vehicle_max_speed, vehicle_weight, windingness, incline_level, travel_mode, avoid, use_traffic_data, route_type, vehicle_load_type"
        },
        "begin_request_route_matrix" : {
            "sync": {
                "signature": "def begin_request_route_matrix(\n    self,\n    route_matrix_query,  # type: \"models.RouteMatrixQuery\"\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    wait_for_results=None,  # type: Optional[bool]\n    compute_travel_time=None,  # type: Optional[Union[str, \"models.ComputeTravelTime\"]]\n    filter_section_type=None,  # type: Optional[Union[str, \"models.SectionType\"]]\n    arrive_at=None,  # type: Optional[datetime.datetime]\n    depart_at=None,  # type: Optional[datetime.datetime]\n    vehicle_axle_weight=0,  # type: Optional[int]\n    vehicle_length=0,  # type: Optional[float]\n    vehicle_height=0,  # type: Optional[float]\n    vehicle_width=0,  # type: Optional[float]\n    vehicle_max_speed=0,  # type: Optional[int]\n    vehicle_weight=0,  # type: Optional[int]\n    windingness=None,  # type: Optional[Union[str, \"models.WindingnessLevel\"]]\n    incline_level=None,  # type: Optional[Union[str, \"models.InclineLevel\"]]\n    travel_mode=None,  # type: Optional[Union[str, \"models.TravelMode\"]]\n    avoid=None,  # type: Optional[List[Union[str, \"models.RouteAvoidType\"]]]\n    use_traffic_data=None,  # type: Optional[bool]\n    route_type=None,  # type: Optional[Union[str, \"models.RouteType\"]]\n    vehicle_load_type=None,  # type: Optional[Union[str, \"models.VehicleLoadType\"]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S1 pricing tier.\n\nThe Matrix Routing service allows calculation of a matrix of route summaries for a set of\nroutes defined by origin and destination locations by using an asynchronous (async) or\nsynchronous (sync) POST request. For every given origin, the service calculates the cost of\nrouting from that origin to every given destination. The set of origins and the set of\ndestinations can be thought of as the column and row headers of a table and each cell in the\ntable contains the costs of routing from the origin to the destination for that cell. As an\nexample, let\u0027s say a food delivery company has 20 drivers and they need to find the closest\ndriver to pick up the delivery from the restaurant. To solve this use case, they can call\nMatrix Route API.\n\nFor each route, the travel times and distances are returned. You can use the computed costs to\ndetermine which detailed routes to calculate using the Route Directions API.\n\nThe maximum size of a matrix for async request is **700** and for sync request it\u0027s **100**\n(the number of origins multiplied by the number of destinations).\n\nSubmit Synchronous Route Matrix Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf your scenario requires synchronous requests and the maximum size of the matrix is less than\nor equal to 100, you might want to make synchronous request. The maximum size of a matrix for\nthis API is **100** (the number of origins multiplied by the number of destinations). With that\nconstraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not\nneed to be square).\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nSubmit Asynchronous Route Matrix Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Asynchronous API is appropriate for processing big volumes of relatively complex routing\nrequests. When you make a request by using async request, by default the service returns a 202\nresponse code along a redirect URL in the Location field of the response header. This URL\nshould be checked periodically until the response data or error information is available. If\n``waitForResults`` parameter in the request is set to true, user will get a 200 response if the\nrequest is finished under 120 seconds.\n\nThe maximum size of a matrix for this API is **700** (the number of origins multiplied by the\nnumber of destinations). With that constraint in mind, examples of possible matrix dimensions\nare: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).\n\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response\nif used after the expiration period.\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/matrix/json?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nHere\u0027s a typical sequence of asynchronous operations:\n\n\n#.\n   Client sends a Route Matrix POST request to Azure Maps\n\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` -  Route Matrix request has been accepted.\n\n      HTTP ``Error`` - There was an error processing your Route Matrix request. This could\neither be a 400 Bad Request or any other Error status code.\n\n\n\n#.\n   If the Matrix Route request was accepted successfully, the Location header in the response\ncontains the URL to download the results of the request. This status URI looks like the\nfollowing:\n\n   .. code-block::\n\n       GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\n\n#. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\nDownload Sync Results\n^^^^^^^^^^^^^^^^^^^^^\n\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code\nfor successful request and a response array. The response body will contain the data and there\nwill be no possibility to retrieve the results later.\n\nDownload Async Results\n^^^^^^^^^^^^^^^^^^^^^^\n\nWhen a request issues a ``202 Accepted`` response, the request is being processed using our\nasync pipeline. You will be given a URL to check the progress of your  async request in the\nlocation header of the response. This status URI looks like the following:\n\n.. code-block::\n\n     GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\nThe URL provided by the location header will return the following responses when a ``GET``\nrequest is issued.\n\n..\n\n   HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try\nagain in some time.\n\n   HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of\nthe results.\n\n:param route_matrix_query: The matrix of origin and destination coordinates to compute the\n route distance, travel time and other summary for each cell of the matrix based on the input\n parameters. The minimum and the maximum cell count supported are 1 and **700** for async and\n **100** for sync respectively. For example, it can be 35 origins and 20 destinations or 25\n origins and 25 destinations for async API.\n:type route_matrix_query: ~azure.maps.route.models.RouteMatrixQuery\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:param wait_for_results: Boolean to indicate whether to execute the request synchronously. If\n set to true, user will get a 200 response if the request is finished under 120 seconds.\n Otherwise, user will get a 202 response right away. Please refer to the API description for\n more details on 202 response. **Supported only for async request**.\n:type wait_for_results: bool\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n:type vehicle_weight: int\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.PollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of LROPoller that returns either RouteMatrixResult or the result of cls(response)\n:rtype: ~azure.core.polling.LROPoller[~azure.maps.route.models.RouteMatrixResult]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def begin_request_route_matrix(\n    self,\n    route_matrix_query: \"models.RouteMatrixQuery\",\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    wait_for_results: Optional[bool] = None,\n    compute_travel_time: Optional[Union[str, \"models.ComputeTravelTime\"]] = None,\n    filter_section_type: Optional[Union[str, \"models.SectionType\"]] = None,\n    arrive_at: Optional[datetime.datetime] = None,\n    depart_at: Optional[datetime.datetime] = None,\n    vehicle_axle_weight: Optional[int] = 0,\n    vehicle_length: Optional[float] = 0,\n    vehicle_height: Optional[float] = 0,\n    vehicle_width: Optional[float] = 0,\n    vehicle_max_speed: Optional[int] = 0,\n    vehicle_weight: Optional[int] = 0,\n    windingness: Optional[Union[str, \"models.WindingnessLevel\"]] = None,\n    incline_level: Optional[Union[str, \"models.InclineLevel\"]] = None,\n    travel_mode: Optional[Union[str, \"models.TravelMode\"]] = None,\n    avoid: Optional[List[Union[str, \"models.RouteAvoidType\"]]] = None,\n    use_traffic_data: Optional[bool] = None,\n    route_type: Optional[Union[str, \"models.RouteType\"]] = None,\n    vehicle_load_type: Optional[Union[str, \"models.VehicleLoadType\"]] = None,\n    **kwargs\n) -\u003e AsyncLROPoller[\"models.RouteMatrixResult\"]:\n",
                "doc": "\"\"\"**Applies to**\\ : S1 pricing tier.\n\nThe Matrix Routing service allows calculation of a matrix of route summaries for a set of\nroutes defined by origin and destination locations by using an asynchronous (async) or\nsynchronous (sync) POST request. For every given origin, the service calculates the cost of\nrouting from that origin to every given destination. The set of origins and the set of\ndestinations can be thought of as the column and row headers of a table and each cell in the\ntable contains the costs of routing from the origin to the destination for that cell. As an\nexample, let\u0027s say a food delivery company has 20 drivers and they need to find the closest\ndriver to pick up the delivery from the restaurant. To solve this use case, they can call\nMatrix Route API.\n\nFor each route, the travel times and distances are returned. You can use the computed costs to\ndetermine which detailed routes to calculate using the Route Directions API.\n\nThe maximum size of a matrix for async request is **700** and for sync request it\u0027s **100**\n(the number of origins multiplied by the number of destinations).\n\nSubmit Synchronous Route Matrix Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf your scenario requires synchronous requests and the maximum size of the matrix is less than\nor equal to 100, you might want to make synchronous request. The maximum size of a matrix for\nthis API is **100** (the number of origins multiplied by the number of destinations). With that\nconstraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not\nneed to be square).\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nSubmit Asynchronous Route Matrix Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Asynchronous API is appropriate for processing big volumes of relatively complex routing\nrequests. When you make a request by using async request, by default the service returns a 202\nresponse code along a redirect URL in the Location field of the response header. This URL\nshould be checked periodically until the response data or error information is available. If\n``waitForResults`` parameter in the request is set to true, user will get a 200 response if the\nrequest is finished under 120 seconds.\n\nThe maximum size of a matrix for this API is **700** (the number of origins multiplied by the\nnumber of destinations). With that constraint in mind, examples of possible matrix dimensions\nare: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).\n\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response\nif used after the expiration period.\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/matrix/json?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nHere\u0027s a typical sequence of asynchronous operations:\n\n\n#.\n   Client sends a Route Matrix POST request to Azure Maps\n\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` -  Route Matrix request has been accepted.\n\n      HTTP ``Error`` - There was an error processing your Route Matrix request. This could\neither be a 400 Bad Request or any other Error status code.\n\n\n\n#.\n   If the Matrix Route request was accepted successfully, the Location header in the response\ncontains the URL to download the results of the request. This status URI looks like the\nfollowing:\n\n   .. code-block::\n\n       GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\n\n#. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\nDownload Sync Results\n^^^^^^^^^^^^^^^^^^^^^\n\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code\nfor successful request and a response array. The response body will contain the data and there\nwill be no possibility to retrieve the results later.\n\nDownload Async Results\n^^^^^^^^^^^^^^^^^^^^^^\n\nWhen a request issues a ``202 Accepted`` response, the request is being processed using our\nasync pipeline. You will be given a URL to check the progress of your  async request in the\nlocation header of the response. This status URI looks like the following:\n\n.. code-block::\n\n     GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\nThe URL provided by the location header will return the following responses when a ``GET``\nrequest is issued.\n\n..\n\n   HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try\nagain in some time.\n\n   HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of\nthe results.\n\n:param route_matrix_query: The matrix of origin and destination coordinates to compute the\n route distance, travel time and other summary for each cell of the matrix based on the input\n parameters. The minimum and the maximum cell count supported are 1 and **700** for async and\n **100** for sync respectively. For example, it can be 35 origins and 20 destinations or 25\n origins and 25 destinations for async API.\n:type route_matrix_query: ~azure.maps.route.models.RouteMatrixQuery\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:param wait_for_results: Boolean to indicate whether to execute the request synchronously. If\n set to true, user will get a 200 response if the request is finished under 120 seconds.\n Otherwise, user will get a 202 response right away. Please refer to the API description for\n more details on 202 response. **Supported only for async request**.\n:type wait_for_results: bool\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n:type vehicle_weight: int\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of AsyncLROPoller that returns either RouteMatrixResult or the result of cls(response)\n:rtype: ~azure.core.polling.AsyncLROPoller[~azure.maps.route.models.RouteMatrixResult]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "call": "route_matrix_query, format, wait_for_results, compute_travel_time, filter_section_type, arrive_at, depart_at, vehicle_axle_weight, vehicle_length, vehicle_height, vehicle_width, vehicle_max_speed, vehicle_weight, windingness, incline_level, travel_mode, avoid, use_traffic_data, route_type, vehicle_load_type"
        },
        "_get_route_matrix_initial" : {
            "sync": {
                "signature": "def _get_route_matrix_initial(\n    self,\n    matrix_id,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"\n\n:param matrix_id: Matrix id received after the Matrix Route request was accepted successfully.\n:type matrix_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteMatrixResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteMatrixResult or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def _get_route_matrix_initial(\n    self,\n    matrix_id: str,\n    **kwargs\n) -\u003e Optional[\"models.RouteMatrixResult\"]:\n",
                "doc": "\"\"\"\n\n:param matrix_id: Matrix id received after the Matrix Route request was accepted successfully.\n:type matrix_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteMatrixResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteMatrixResult or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "matrix_id"
        },
        "begin_get_route_matrix" : {
            "sync": {
                "signature": "def begin_get_route_matrix(\n    self,\n    matrix_id,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"If the Matrix Route request was accepted successfully, the Location header in the response\ncontains the URL to download the results of the request. This status URI looks like the\nfollowing:\n\n.. code-block::\n\n       GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\n\n#. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\nDownload Sync Results\n^^^^^^^^^^^^^^^^^^^^^\n\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code\nfor successful request and a response array. The response body will contain the data and there\nwill be no possibility to retrieve the results later.\n\nDownload Async Results\n^^^^^^^^^^^^^^^^^^^^^^\n\nWhen a request issues a ``202 Accepted`` response, the request is being processed using our\nasync pipeline. You will be given a URL to check the progress of your  async request in the\nlocation header of the response. This status URI looks like the following:\n\n.. code-block::\n\n     GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\nThe URL provided by the location header will return the following responses when a ``GET``\nrequest is issued.\n\n..\n\n   HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try\nagain in some time.\n\n   HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of\nthe results.\n\n:param matrix_id: Matrix id received after the Matrix Route request was accepted successfully.\n:type matrix_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.PollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of LROPoller that returns either RouteMatrixResult or the result of cls(response)\n:rtype: ~azure.core.polling.LROPoller[~azure.maps.route.models.RouteMatrixResult]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def begin_get_route_matrix(\n    self,\n    matrix_id: str,\n    **kwargs\n) -\u003e AsyncLROPoller[\"models.RouteMatrixResult\"]:\n",
                "doc": "\"\"\"If the Matrix Route request was accepted successfully, the Location header in the response\ncontains the URL to download the results of the request. This status URI looks like the\nfollowing:\n\n.. code-block::\n\n       GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\n\n#. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\nDownload Sync Results\n^^^^^^^^^^^^^^^^^^^^^\n\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code\nfor successful request and a response array. The response body will contain the data and there\nwill be no possibility to retrieve the results later.\n\nDownload Async Results\n^^^^^^^^^^^^^^^^^^^^^^\n\nWhen a request issues a ``202 Accepted`` response, the request is being processed using our\nasync pipeline. You will be given a URL to check the progress of your  async request in the\nlocation header of the response. This status URI looks like the following:\n\n.. code-block::\n\n     GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\nThe URL provided by the location header will return the following responses when a ``GET``\nrequest is issued.\n\n..\n\n   HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try\nagain in some time.\n\n   HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of\nthe results.\n\n:param matrix_id: Matrix id received after the Matrix Route request was accepted successfully.\n:type matrix_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of AsyncLROPoller that returns either RouteMatrixResult or the result of cls(response)\n:rtype: ~azure.core.polling.AsyncLROPoller[~azure.maps.route.models.RouteMatrixResult]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "call": "matrix_id"
        },
        "request_route_matrix_sync" : {
            "sync": {
                "signature": "def request_route_matrix_sync(\n    self,\n    route_matrix_query,  # type: \"models.RouteMatrixQuery\"\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    wait_for_results=None,  # type: Optional[bool]\n    compute_travel_time=None,  # type: Optional[Union[str, \"models.ComputeTravelTime\"]]\n    filter_section_type=None,  # type: Optional[Union[str, \"models.SectionType\"]]\n    arrive_at=None,  # type: Optional[datetime.datetime]\n    depart_at=None,  # type: Optional[datetime.datetime]\n    vehicle_axle_weight=0,  # type: Optional[int]\n    vehicle_length=0,  # type: Optional[float]\n    vehicle_height=0,  # type: Optional[float]\n    vehicle_width=0,  # type: Optional[float]\n    vehicle_max_speed=0,  # type: Optional[int]\n    vehicle_weight=0,  # type: Optional[int]\n    windingness=None,  # type: Optional[Union[str, \"models.WindingnessLevel\"]]\n    incline_level=None,  # type: Optional[Union[str, \"models.InclineLevel\"]]\n    travel_mode=None,  # type: Optional[Union[str, \"models.TravelMode\"]]\n    avoid=None,  # type: Optional[List[Union[str, \"models.RouteAvoidType\"]]]\n    use_traffic_data=None,  # type: Optional[bool]\n    route_type=None,  # type: Optional[Union[str, \"models.RouteType\"]]\n    vehicle_load_type=None,  # type: Optional[Union[str, \"models.VehicleLoadType\"]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S1 pricing tier.\n\nThe Matrix Routing service allows calculation of a matrix of route summaries for a set of\nroutes defined by origin and destination locations by using an asynchronous (async) or\nsynchronous (sync) POST request. For every given origin, the service calculates the cost of\nrouting from that origin to every given destination. The set of origins and the set of\ndestinations can be thought of as the column and row headers of a table and each cell in the\ntable contains the costs of routing from the origin to the destination for that cell. As an\nexample, let\u0027s say a food delivery company has 20 drivers and they need to find the closest\ndriver to pick up the delivery from the restaurant. To solve this use case, they can call\nMatrix Route API.\n\nFor each route, the travel times and distances are returned. You can use the computed costs to\ndetermine which detailed routes to calculate using the Route Directions API.\n\nThe maximum size of a matrix for async request is **700** and for sync request it\u0027s **100**\n(the number of origins multiplied by the number of destinations).\n\nSubmit Synchronous Route Matrix Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf your scenario requires synchronous requests and the maximum size of the matrix is less than\nor equal to 100, you might want to make synchronous request. The maximum size of a matrix for\nthis API is **100** (the number of origins multiplied by the number of destinations). With that\nconstraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not\nneed to be square).\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nSubmit Asynchronous Route Matrix Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Asynchronous API is appropriate for processing big volumes of relatively complex routing\nrequests. When you make a request by using async request, by default the service returns a 202\nresponse code along a redirect URL in the Location field of the response header. This URL\nshould be checked periodically until the response data or error information is available. If\n``waitForResults`` parameter in the request is set to true, user will get a 200 response if the\nrequest is finished under 120 seconds.\n\nThe maximum size of a matrix for this API is **700** (the number of origins multiplied by the\nnumber of destinations). With that constraint in mind, examples of possible matrix dimensions\nare: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).\n\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response\nif used after the expiration period.\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/matrix/json?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nHere\u0027s a typical sequence of asynchronous operations:\n\n\n#.\n   Client sends a Route Matrix POST request to Azure Maps\n\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` -  Route Matrix request has been accepted.\n\n      HTTP ``Error`` - There was an error processing your Route Matrix request. This could\neither be a 400 Bad Request or any other Error status code.\n\n\n\n#.\n   If the Matrix Route request was accepted successfully, the Location header in the response\ncontains the URL to download the results of the request. This status URI looks like the\nfollowing:\n\n   .. code-block::\n\n       GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\n\n#. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\nDownload Sync Results\n^^^^^^^^^^^^^^^^^^^^^\n\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code\nfor successful request and a response array. The response body will contain the data and there\nwill be no possibility to retrieve the results later.\n\nDownload Async Results\n^^^^^^^^^^^^^^^^^^^^^^\n\nWhen a request issues a ``202 Accepted`` response, the request is being processed using our\nasync pipeline. You will be given a URL to check the progress of your  async request in the\nlocation header of the response. This status URI looks like the following:\n\n.. code-block::\n\n     GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\nThe URL provided by the location header will return the following responses when a ``GET``\nrequest is issued.\n\n..\n\n   HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try\nagain in some time.\n\n   HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of\nthe results.\n\n:param route_matrix_query: The matrix of origin and destination coordinates to compute the\n route distance, travel time and other summary for each cell of the matrix based on the input\n parameters. The minimum and the maximum cell count supported are 1 and **700** for async and\n **100** for sync respectively. For example, it can be 35 origins and 20 destinations or 25\n origins and 25 destinations for async API.\n:type route_matrix_query: ~azure.maps.route.models.RouteMatrixQuery\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:param wait_for_results: Boolean to indicate whether to execute the request synchronously. If\n set to true, user will get a 200 response if the request is finished under 120 seconds.\n Otherwise, user will get a 202 response right away. Please refer to the API description for\n more details on 202 response. **Supported only for async request**.\n:type wait_for_results: bool\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n:type vehicle_weight: int\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteMatrixResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteMatrixResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def request_route_matrix_sync(\n    self,\n    route_matrix_query: \"models.RouteMatrixQuery\",\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    wait_for_results: Optional[bool] = None,\n    compute_travel_time: Optional[Union[str, \"models.ComputeTravelTime\"]] = None,\n    filter_section_type: Optional[Union[str, \"models.SectionType\"]] = None,\n    arrive_at: Optional[datetime.datetime] = None,\n    depart_at: Optional[datetime.datetime] = None,\n    vehicle_axle_weight: Optional[int] = 0,\n    vehicle_length: Optional[float] = 0,\n    vehicle_height: Optional[float] = 0,\n    vehicle_width: Optional[float] = 0,\n    vehicle_max_speed: Optional[int] = 0,\n    vehicle_weight: Optional[int] = 0,\n    windingness: Optional[Union[str, \"models.WindingnessLevel\"]] = None,\n    incline_level: Optional[Union[str, \"models.InclineLevel\"]] = None,\n    travel_mode: Optional[Union[str, \"models.TravelMode\"]] = None,\n    avoid: Optional[List[Union[str, \"models.RouteAvoidType\"]]] = None,\n    use_traffic_data: Optional[bool] = None,\n    route_type: Optional[Union[str, \"models.RouteType\"]] = None,\n    vehicle_load_type: Optional[Union[str, \"models.VehicleLoadType\"]] = None,\n    **kwargs\n) -\u003e \"models.RouteMatrixResult\":\n",
                "doc": "\"\"\"**Applies to**\\ : S1 pricing tier.\n\nThe Matrix Routing service allows calculation of a matrix of route summaries for a set of\nroutes defined by origin and destination locations by using an asynchronous (async) or\nsynchronous (sync) POST request. For every given origin, the service calculates the cost of\nrouting from that origin to every given destination. The set of origins and the set of\ndestinations can be thought of as the column and row headers of a table and each cell in the\ntable contains the costs of routing from the origin to the destination for that cell. As an\nexample, let\u0027s say a food delivery company has 20 drivers and they need to find the closest\ndriver to pick up the delivery from the restaurant. To solve this use case, they can call\nMatrix Route API.\n\nFor each route, the travel times and distances are returned. You can use the computed costs to\ndetermine which detailed routes to calculate using the Route Directions API.\n\nThe maximum size of a matrix for async request is **700** and for sync request it\u0027s **100**\n(the number of origins multiplied by the number of destinations).\n\nSubmit Synchronous Route Matrix Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf your scenario requires synchronous requests and the maximum size of the matrix is less than\nor equal to 100, you might want to make synchronous request. The maximum size of a matrix for\nthis API is **100** (the number of origins multiplied by the number of destinations). With that\nconstraint in mind, examples of possible matrix dimensions are: 10x10, 6x8, 9x8 (it does not\nneed to be square).\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/matrix/sync/json?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nSubmit Asynchronous Route Matrix Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Asynchronous API is appropriate for processing big volumes of relatively complex routing\nrequests. When you make a request by using async request, by default the service returns a 202\nresponse code along a redirect URL in the Location field of the response header. This URL\nshould be checked periodically until the response data or error information is available. If\n``waitForResults`` parameter in the request is set to true, user will get a 200 response if the\nrequest is finished under 120 seconds.\n\nThe maximum size of a matrix for this API is **700** (the number of origins multiplied by the\nnumber of destinations). With that constraint in mind, examples of possible matrix dimensions\nare: 50x10, 10x10, 28x25. 10x70 (it does not need to be square).\n\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response\nif used after the expiration period.\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/matrix/json?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nHere\u0027s a typical sequence of asynchronous operations:\n\n\n#.\n   Client sends a Route Matrix POST request to Azure Maps\n\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` -  Route Matrix request has been accepted.\n\n      HTTP ``Error`` - There was an error processing your Route Matrix request. This could\neither be a 400 Bad Request or any other Error status code.\n\n\n\n#.\n   If the Matrix Route request was accepted successfully, the Location header in the response\ncontains the URL to download the results of the request. This status URI looks like the\nfollowing:\n\n   .. code-block::\n\n       GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\n\n#. Client issues a GET request on the download URL obtained in Step 3 to download the results\n\nDownload Sync Results\n^^^^^^^^^^^^^^^^^^^^^\n\nWhen you make a POST request for Route Matrix Sync API, the service returns 200 response code\nfor successful request and a response array. The response body will contain the data and there\nwill be no possibility to retrieve the results later.\n\nDownload Async Results\n^^^^^^^^^^^^^^^^^^^^^^\n\nWhen a request issues a ``202 Accepted`` response, the request is being processed using our\nasync pipeline. You will be given a URL to check the progress of your  async request in the\nlocation header of the response. This status URI looks like the following:\n\n.. code-block::\n\n     GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-\nkey={subscription-key}\n\nThe URL provided by the location header will return the following responses when a ``GET``\nrequest is issued.\n\n..\n\n   HTTP ``202 Accepted`` - Matrix request was accepted but is still being processed. Please try\nagain in some time.\n\n   HTTP ``200 OK`` - Matrix request successfully processed. The response body contains all of\nthe results.\n\n:param route_matrix_query: The matrix of origin and destination coordinates to compute the\n route distance, travel time and other summary for each cell of the matrix based on the input\n parameters. The minimum and the maximum cell count supported are 1 and **700** for async and\n **100** for sync respectively. For example, it can be 35 origins and 20 destinations or 25\n origins and 25 destinations for async API.\n:type route_matrix_query: ~azure.maps.route.models.RouteMatrixQuery\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:param wait_for_results: Boolean to indicate whether to execute the request synchronously. If\n set to true, user will get a 200 response if the request is finished under 120 seconds.\n Otherwise, user will get a 202 response right away. Please refer to the API description for\n more details on 202 response. **Supported only for async request**.\n:type wait_for_results: bool\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n:type vehicle_weight: int\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteMatrixResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteMatrixResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "route_matrix_query, format, wait_for_results, compute_travel_time, filter_section_type, arrive_at, depart_at, vehicle_axle_weight, vehicle_length, vehicle_height, vehicle_width, vehicle_max_speed, vehicle_weight, windingness, incline_level, travel_mode, avoid, use_traffic_data, route_type, vehicle_load_type"
        },
        "get_route_directions" : {
            "sync": {
                "signature": "def get_route_directions(\n    self,\n    route_points,  # type: str\n    format=\"json\",  # type: Union[str, \"models.ResponseFormat\"]\n    max_alternatives=None,  # type: Optional[int]\n    alternative_type=None,  # type: Optional[Union[str, \"models.AlternativeRouteType\"]]\n    min_deviation_distance=None,  # type: Optional[int]\n    arrive_at=None,  # type: Optional[datetime.datetime]\n    depart_at=None,  # type: Optional[datetime.datetime]\n    min_deviation_time=None,  # type: Optional[int]\n    instructions_type=None,  # type: Optional[Union[str, \"models.RouteInstructionsType\"]]\n    language=None,  # type: Optional[str]\n    compute_best_waypoint_order=None,  # type: Optional[bool]\n    route_representation_for_best_order=None,  # type: Optional[Union[str, \"models.RouteRepresentationForBestOrder\"]]\n    compute_travel_time=None,  # type: Optional[Union[str, \"models.ComputeTravelTime\"]]\n    vehicle_heading=None,  # type: Optional[int]\n    report=None,  # type: Optional[Union[str, \"models.Report\"]]\n    filter_section_type=None,  # type: Optional[Union[str, \"models.SectionType\"]]\n    vehicle_axle_weight=0,  # type: Optional[int]\n    vehicle_width=0,  # type: Optional[float]\n    vehicle_height=0,  # type: Optional[float]\n    vehicle_length=0,  # type: Optional[float]\n    vehicle_max_speed=0,  # type: Optional[int]\n    vehicle_weight=0,  # type: Optional[int]\n    is_commercial_vehicle=False,  # type: Optional[bool]\n    windingness=None,  # type: Optional[Union[str, \"models.WindingnessLevel\"]]\n    incline_level=None,  # type: Optional[Union[str, \"models.InclineLevel\"]]\n    travel_mode=None,  # type: Optional[Union[str, \"models.TravelMode\"]]\n    avoid=None,  # type: Optional[List[Union[str, \"models.RouteAvoidType\"]]]\n    use_traffic_data=None,  # type: Optional[bool]\n    route_type=None,  # type: Optional[Union[str, \"models.RouteType\"]]\n    vehicle_load_type=None,  # type: Optional[Union[str, \"models.VehicleLoadType\"]]\n    vehicle_engine_type=None,  # type: Optional[Union[str, \"models.VehicleEngineType\"]]\n    constant_speed_consumption_in_liters_per_hundred_km=None,  # type: Optional[str]\n    current_fuel_in_liters=None,  # type: Optional[float]\n    auxiliary_power_in_liters_per_hour=None,  # type: Optional[float]\n    fuel_energy_density_in_megajoules_per_liter=None,  # type: Optional[float]\n    acceleration_efficiency=None,  # type: Optional[float]\n    deceleration_efficiency=None,  # type: Optional[float]\n    uphill_efficiency=None,  # type: Optional[float]\n    downhill_efficiency=None,  # type: Optional[float]\n    constant_speed_consumption_in_kw_h_per_hundred_km=None,  # type: Optional[str]\n    current_charge_in_kw_h=None,  # type: Optional[float]\n    max_charge_in_kw_h=None,  # type: Optional[float]\n    auxiliary_power_in_kw=None,  # type: Optional[float]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nReturns  a route between an origin and a destination, passing through waypoints if they are\nspecified. The route will take into account factors such as current traffic and the typical\nroad speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the\nroute geometry. Additional routing information such as optimized waypoint order or turn by turn\ninstructions is also available, depending on the options selected.\n\nRouting service provides a set of parameters for a detailed description of vehicle-specific\nConsumption Model. Please check `Consumption Model \u003chttps://docs.microsoft.com/azure/azure-\nmaps/consumption-model\u003e`_ for detailed explanation of the concepts and parameters involved.\n\n:param route_points: The Coordinates through which the route is calculated, delimited by a\n colon.  A minimum of two coordinates is required.  The first one is the origin and the last is\n the destination of the route. Optional coordinates in-between act as WayPoints in the route.\n You can pass up to 150 WayPoints.\n:type route_points: str\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.route.models.ResponseFormat\n:param max_alternatives: Number of desired alternative routes to be calculated. Default: 0,\n minimum: 0 and maximum: 5.\n:type max_alternatives: int\n:param alternative_type: Controls the optimality, with respect to the given planning criteria,\n of the calculated alternatives compared to the reference route.\n:type alternative_type: str or ~azure.maps.route.models.AlternativeRouteType\n:param min_deviation_distance: All alternative routes returned will follow the reference route\n (see section POST Requests) from the origin point of the calculateRoute request for at least\n this number of meters. Can only be used when reconstructing a route. The minDeviationDistance\n parameter cannot be used in conjunction with arriveAt.\n:type min_deviation_distance: int\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param min_deviation_time: All alternative routes returned will follow the reference route (see\n section POST Requests) from the origin point of the calculateRoute request for at least this\n number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter\n cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to\n a value greater than zero has the following consequences:\n\n\n * The origin point of the *calculateRoute* Request must be on\n   (or very near) the input reference route.\n\n   * If this is not the case, an error is returned.\n   * However, the origin point does not need to be at the beginning\n     of the input reference route (it can be thought of as the current\n     vehicle position on the reference route).\n\n * The reference route, returned as the first route in the *calculateRoute*\n   Response, will start at the origin point specified in the *calculateRoute*\n   Request. The initial part of the input reference route up until the origin\n   point will be excluded from the Response.\n * The values of *minDeviationDistance* and *minDeviationTime* determine\n   how far alternative routes will be guaranteed to follow the reference\n   route from the origin point onwards.\n * The route must use *departAt*.\n * The *vehicleHeading* is ignored.\n:type min_deviation_time: int\n:param instructions_type: If specified, guidance instructions will be returned. Note that the\n instructionsType parameter cannot be used in conjunction with routeRepresentation=none.\n:type instructions_type: str or ~azure.maps.route.models.RouteInstructionsType\n:param language: The language parameter determines the language of the guidance messages.\n Proper nouns (the names of streets, plazas, etc.) are returned in the specified  language, or\n if that is not available, they are returned in an available language  that is close to it.\n Allowed values are (a subset of) the IETF language tags. The currently supported  languages are\n listed in the `Supported languages  section \u003chttps://docs.microsoft.com/azure/azure-\n maps/supported-languages\u003e`_.\n\n Default value: en-GB.\n:type language: str\n:param compute_best_waypoint_order: Re-order the route waypoints using a fast heuristic\n algorithm to reduce the route length. Yields best results when used in conjunction with\n routeType *shortest*. Notice that origin and destination are excluded from the optimized\n waypoint indices. To include origin and destination in the response, please increase all the\n indices by 1 to account for the origin, and then add the destination as the final index.\n Possible values are true or false. True computes a better order if possible, but is not allowed\n to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with\n circle waypoints. False will use the locations in the given order and not allowed to be used in\n conjunction with routeRepresentation *none*.\n:type compute_best_waypoint_order: bool\n:param route_representation_for_best_order: Specifies the representation of the set of routes\n provided as response. This parameter value can only be used in conjunction with\n computeBestOrder=true.\n:type route_representation_for_best_order: str or ~azure.maps.route.models.RouteRepresentationForBestOrder\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param vehicle_heading: The directional heading of the vehicle in degrees starting at true\n North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is\n 180 degrees, west is 270 degrees. Possible values 0-359.\n:type vehicle_heading: int\n:param report: Specifies which data should be reported for diagnosis purposes. The only\n possible value is *effectiveSettings*. Reports the effective parameters or data used when\n calling the API. In the case of defaulted parameters the default will be reflected where the\n parameter was not specified by the caller.\n:type report: str or ~azure.maps.route.models.Report\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n\n\n *\n   It is mandatory if any of the *Efficiency parameters are set.\n\n *\n   It must be strictly positive when used in the context of the Consumption Model. Weight\n restrictions are considered.\n\n *\n   If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-\n zero, then weight restrictions are considered.\n\n *\n   In all other cases, this parameter is ignored.\n\n Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.\n:type vehicle_weight: int\n:param is_commercial_vehicle: Whether the vehicle is used for commercial purposes. Commercial\n vehicles may not be allowed to drive on some roads.\n:type is_commercial_vehicle: bool\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is\n specified, it must be consistent with the value of **vehicleEngineType**.\n:type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType\n:param constant_speed_consumption_in_liters_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of colon-delimited speed \u0026 consumption-rate pairs. The list\n defines points on a consumption curve. Consumption rates for speeds not in the list are found\n as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller speed.\n\n The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\n Sensible Values : 50,6.3:130,11.5\n\n **Note** : This parameter is required for **The Combustion Consumption Model**.\n:type constant_speed_consumption_in_liters_per_hundred_km: str\n:param current_fuel_in_liters: Specifies the current supply of fuel in liters.\n\n Sensible Values : 55.\n:type current_fuel_in_liters: float\n:param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining\n auxiliary systems of the vehicle, in liters per hour.\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 0.2.\n:type auxiliary_power_in_liters_per_hour: float\n:param fuel_energy_density_in_megajoules_per_liter: Specifies the amount of chemical energy\n stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the\n ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For\n example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.\n\n This parameter is required if any ***Efficiency** parameter is set.\n\n Sensible Values : 34.2.\n:type fuel_energy_density_in_megajoules_per_liter: float\n:param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored\n in fuel to kinetic energy when the vehicle accelerates *(i.e.\n KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting\n consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **decelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **decelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.\n:type acceleration_efficiency: float\n:param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved\n (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).\n ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using\n **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **accelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **accelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.\n:type deceleration_efficiency: float\n:param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel\n to potential energy when the vehicle gains elevation *(i.e.\n PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by\n converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **downhillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **downhillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.\n:type uphill_efficiency: float\n:param downhill_efficiency: Specifies the efficiency of converting potential energy to saved\n (not consumed) fuel when the vehicle loses elevation *(i.e.\n ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved\n (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **uphillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **uphillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.\n:type downhill_efficiency: float\n:param constant_speed_consumption_in_kw_h_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a\n consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller  speed.\n\n The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and\n 100000.0.\n\n Sensible Values : 50,8.2:130,21.3\n\n This parameter is required for **Electric consumption model**.\n:type constant_speed_consumption_in_kw_h_per_hundred_km: str\n:param current_charge_in_kw_h: Specifies the current electric energy supply in kilowatt hours\n (kWh).\n\n This parameter co-exists with **maxChargeInkWh** parameter.\n\n The range of values allowed are 0.0 to **maxChargeInkWh**.\n\n Sensible Values : 43.\n:type current_charge_in_kw_h: float\n:param max_charge_in_kw_h: Specifies the maximum electric energy supply in kilowatt hours (kWh)\n that may be stored in the vehicle\u0027s battery.\n\n This parameter co-exists with **currentChargeInkWh** parameter.\n\n Minimum value has to be greater than or equal to **currentChargeInkWh**.\n\n Sensible Values : 85.\n:type max_charge_in_kw_h: float\n:param auxiliary_power_in_kw: Specifies the amount of power consumed for sustaining auxiliary\n systems, in kilowatts (kW).\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 1.7.\n:type auxiliary_power_in_kw: float\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirections, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirections\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_route_directions(\n    self,\n    route_points: str,\n    format: Union[str, \"models.ResponseFormat\"] = \"json\",\n    max_alternatives: Optional[int] = None,\n    alternative_type: Optional[Union[str, \"models.AlternativeRouteType\"]] = None,\n    min_deviation_distance: Optional[int] = None,\n    arrive_at: Optional[datetime.datetime] = None,\n    depart_at: Optional[datetime.datetime] = None,\n    min_deviation_time: Optional[int] = None,\n    instructions_type: Optional[Union[str, \"models.RouteInstructionsType\"]] = None,\n    language: Optional[str] = None,\n    compute_best_waypoint_order: Optional[bool] = None,\n    route_representation_for_best_order: Optional[Union[str, \"models.RouteRepresentationForBestOrder\"]] = None,\n    compute_travel_time: Optional[Union[str, \"models.ComputeTravelTime\"]] = None,\n    vehicle_heading: Optional[int] = None,\n    report: Optional[Union[str, \"models.Report\"]] = None,\n    filter_section_type: Optional[Union[str, \"models.SectionType\"]] = None,\n    vehicle_axle_weight: Optional[int] = 0,\n    vehicle_width: Optional[float] = 0,\n    vehicle_height: Optional[float] = 0,\n    vehicle_length: Optional[float] = 0,\n    vehicle_max_speed: Optional[int] = 0,\n    vehicle_weight: Optional[int] = 0,\n    is_commercial_vehicle: Optional[bool] = False,\n    windingness: Optional[Union[str, \"models.WindingnessLevel\"]] = None,\n    incline_level: Optional[Union[str, \"models.InclineLevel\"]] = None,\n    travel_mode: Optional[Union[str, \"models.TravelMode\"]] = None,\n    avoid: Optional[List[Union[str, \"models.RouteAvoidType\"]]] = None,\n    use_traffic_data: Optional[bool] = None,\n    route_type: Optional[Union[str, \"models.RouteType\"]] = None,\n    vehicle_load_type: Optional[Union[str, \"models.VehicleLoadType\"]] = None,\n    vehicle_engine_type: Optional[Union[str, \"models.VehicleEngineType\"]] = None,\n    constant_speed_consumption_in_liters_per_hundred_km: Optional[str] = None,\n    current_fuel_in_liters: Optional[float] = None,\n    auxiliary_power_in_liters_per_hour: Optional[float] = None,\n    fuel_energy_density_in_megajoules_per_liter: Optional[float] = None,\n    acceleration_efficiency: Optional[float] = None,\n    deceleration_efficiency: Optional[float] = None,\n    uphill_efficiency: Optional[float] = None,\n    downhill_efficiency: Optional[float] = None,\n    constant_speed_consumption_in_kw_h_per_hundred_km: Optional[str] = None,\n    current_charge_in_kw_h: Optional[float] = None,\n    max_charge_in_kw_h: Optional[float] = None,\n    auxiliary_power_in_kw: Optional[float] = None,\n    **kwargs\n) -\u003e \"models.RouteDirections\":\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nReturns  a route between an origin and a destination, passing through waypoints if they are\nspecified. The route will take into account factors such as current traffic and the typical\nroad speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the\nroute geometry. Additional routing information such as optimized waypoint order or turn by turn\ninstructions is also available, depending on the options selected.\n\nRouting service provides a set of parameters for a detailed description of vehicle-specific\nConsumption Model. Please check `Consumption Model \u003chttps://docs.microsoft.com/azure/azure-\nmaps/consumption-model\u003e`_ for detailed explanation of the concepts and parameters involved.\n\n:param route_points: The Coordinates through which the route is calculated, delimited by a\n colon.  A minimum of two coordinates is required.  The first one is the origin and the last is\n the destination of the route. Optional coordinates in-between act as WayPoints in the route.\n You can pass up to 150 WayPoints.\n:type route_points: str\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.route.models.ResponseFormat\n:param max_alternatives: Number of desired alternative routes to be calculated. Default: 0,\n minimum: 0 and maximum: 5.\n:type max_alternatives: int\n:param alternative_type: Controls the optimality, with respect to the given planning criteria,\n of the calculated alternatives compared to the reference route.\n:type alternative_type: str or ~azure.maps.route.models.AlternativeRouteType\n:param min_deviation_distance: All alternative routes returned will follow the reference route\n (see section POST Requests) from the origin point of the calculateRoute request for at least\n this number of meters. Can only be used when reconstructing a route. The minDeviationDistance\n parameter cannot be used in conjunction with arriveAt.\n:type min_deviation_distance: int\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param min_deviation_time: All alternative routes returned will follow the reference route (see\n section POST Requests) from the origin point of the calculateRoute request for at least this\n number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter\n cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to\n a value greater than zero has the following consequences:\n\n\n * The origin point of the *calculateRoute* Request must be on\n   (or very near) the input reference route.\n\n   * If this is not the case, an error is returned.\n   * However, the origin point does not need to be at the beginning\n     of the input reference route (it can be thought of as the current\n     vehicle position on the reference route).\n\n * The reference route, returned as the first route in the *calculateRoute*\n   Response, will start at the origin point specified in the *calculateRoute*\n   Request. The initial part of the input reference route up until the origin\n   point will be excluded from the Response.\n * The values of *minDeviationDistance* and *minDeviationTime* determine\n   how far alternative routes will be guaranteed to follow the reference\n   route from the origin point onwards.\n * The route must use *departAt*.\n * The *vehicleHeading* is ignored.\n:type min_deviation_time: int\n:param instructions_type: If specified, guidance instructions will be returned. Note that the\n instructionsType parameter cannot be used in conjunction with routeRepresentation=none.\n:type instructions_type: str or ~azure.maps.route.models.RouteInstructionsType\n:param language: The language parameter determines the language of the guidance messages.\n Proper nouns (the names of streets, plazas, etc.) are returned in the specified  language, or\n if that is not available, they are returned in an available language  that is close to it.\n Allowed values are (a subset of) the IETF language tags. The currently supported  languages are\n listed in the `Supported languages  section \u003chttps://docs.microsoft.com/azure/azure-\n maps/supported-languages\u003e`_.\n\n Default value: en-GB.\n:type language: str\n:param compute_best_waypoint_order: Re-order the route waypoints using a fast heuristic\n algorithm to reduce the route length. Yields best results when used in conjunction with\n routeType *shortest*. Notice that origin and destination are excluded from the optimized\n waypoint indices. To include origin and destination in the response, please increase all the\n indices by 1 to account for the origin, and then add the destination as the final index.\n Possible values are true or false. True computes a better order if possible, but is not allowed\n to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with\n circle waypoints. False will use the locations in the given order and not allowed to be used in\n conjunction with routeRepresentation *none*.\n:type compute_best_waypoint_order: bool\n:param route_representation_for_best_order: Specifies the representation of the set of routes\n provided as response. This parameter value can only be used in conjunction with\n computeBestOrder=true.\n:type route_representation_for_best_order: str or ~azure.maps.route.models.RouteRepresentationForBestOrder\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param vehicle_heading: The directional heading of the vehicle in degrees starting at true\n North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is\n 180 degrees, west is 270 degrees. Possible values 0-359.\n:type vehicle_heading: int\n:param report: Specifies which data should be reported for diagnosis purposes. The only\n possible value is *effectiveSettings*. Reports the effective parameters or data used when\n calling the API. In the case of defaulted parameters the default will be reflected where the\n parameter was not specified by the caller.\n:type report: str or ~azure.maps.route.models.Report\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n\n\n *\n   It is mandatory if any of the *Efficiency parameters are set.\n\n *\n   It must be strictly positive when used in the context of the Consumption Model. Weight\n restrictions are considered.\n\n *\n   If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-\n zero, then weight restrictions are considered.\n\n *\n   In all other cases, this parameter is ignored.\n\n Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.\n:type vehicle_weight: int\n:param is_commercial_vehicle: Whether the vehicle is used for commercial purposes. Commercial\n vehicles may not be allowed to drive on some roads.\n:type is_commercial_vehicle: bool\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is\n specified, it must be consistent with the value of **vehicleEngineType**.\n:type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType\n:param constant_speed_consumption_in_liters_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of colon-delimited speed \u0026 consumption-rate pairs. The list\n defines points on a consumption curve. Consumption rates for speeds not in the list are found\n as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller speed.\n\n The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\n Sensible Values : 50,6.3:130,11.5\n\n **Note** : This parameter is required for **The Combustion Consumption Model**.\n:type constant_speed_consumption_in_liters_per_hundred_km: str\n:param current_fuel_in_liters: Specifies the current supply of fuel in liters.\n\n Sensible Values : 55.\n:type current_fuel_in_liters: float\n:param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining\n auxiliary systems of the vehicle, in liters per hour.\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 0.2.\n:type auxiliary_power_in_liters_per_hour: float\n:param fuel_energy_density_in_megajoules_per_liter: Specifies the amount of chemical energy\n stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the\n ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For\n example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.\n\n This parameter is required if any ***Efficiency** parameter is set.\n\n Sensible Values : 34.2.\n:type fuel_energy_density_in_megajoules_per_liter: float\n:param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored\n in fuel to kinetic energy when the vehicle accelerates *(i.e.\n KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting\n consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **decelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **decelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.\n:type acceleration_efficiency: float\n:param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved\n (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).\n ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using\n **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **accelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **accelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.\n:type deceleration_efficiency: float\n:param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel\n to potential energy when the vehicle gains elevation *(i.e.\n PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by\n converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **downhillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **downhillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.\n:type uphill_efficiency: float\n:param downhill_efficiency: Specifies the efficiency of converting potential energy to saved\n (not consumed) fuel when the vehicle loses elevation *(i.e.\n ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved\n (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **uphillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **uphillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.\n:type downhill_efficiency: float\n:param constant_speed_consumption_in_kw_h_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a\n consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller  speed.\n\n The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and\n 100000.0.\n\n Sensible Values : 50,8.2:130,21.3\n\n This parameter is required for **Electric consumption model**.\n:type constant_speed_consumption_in_kw_h_per_hundred_km: str\n:param current_charge_in_kw_h: Specifies the current electric energy supply in kilowatt hours\n (kWh).\n\n This parameter co-exists with **maxChargeInkWh** parameter.\n\n The range of values allowed are 0.0 to **maxChargeInkWh**.\n\n Sensible Values : 43.\n:type current_charge_in_kw_h: float\n:param max_charge_in_kw_h: Specifies the maximum electric energy supply in kilowatt hours (kWh)\n that may be stored in the vehicle\u0027s battery.\n\n This parameter co-exists with **currentChargeInkWh** parameter.\n\n Minimum value has to be greater than or equal to **currentChargeInkWh**.\n\n Sensible Values : 85.\n:type max_charge_in_kw_h: float\n:param auxiliary_power_in_kw: Specifies the amount of power consumed for sustaining auxiliary\n systems, in kilowatts (kW).\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 1.7.\n:type auxiliary_power_in_kw: float\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirections, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirections\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "route_points, format, max_alternatives, alternative_type, min_deviation_distance, arrive_at, depart_at, min_deviation_time, instructions_type, language, compute_best_waypoint_order, route_representation_for_best_order, compute_travel_time, vehicle_heading, report, filter_section_type, vehicle_axle_weight, vehicle_width, vehicle_height, vehicle_length, vehicle_max_speed, vehicle_weight, is_commercial_vehicle, windingness, incline_level, travel_mode, avoid, use_traffic_data, route_type, vehicle_load_type, vehicle_engine_type, constant_speed_consumption_in_liters_per_hundred_km, current_fuel_in_liters, auxiliary_power_in_liters_per_hour, fuel_energy_density_in_megajoules_per_liter, acceleration_efficiency, deceleration_efficiency, uphill_efficiency, downhill_efficiency, constant_speed_consumption_in_kw_h_per_hundred_km, current_charge_in_kw_h, max_charge_in_kw_h, auxiliary_power_in_kw"
        },
        "get_route_directions_with_additional_parameters" : {
            "sync": {
                "signature": "def get_route_directions_with_additional_parameters(\n    self,\n    route_points,  # type: str\n    route_direction_parameters,  # type: \"models.RouteDirectionParameters\"\n    format=\"json\",  # type: Union[str, \"models.ResponseFormat\"]\n    max_alternatives=None,  # type: Optional[int]\n    alternative_type=None,  # type: Optional[Union[str, \"models.AlternativeRouteType\"]]\n    min_deviation_distance=None,  # type: Optional[int]\n    min_deviation_time=None,  # type: Optional[int]\n    instructions_type=None,  # type: Optional[Union[str, \"models.RouteInstructionsType\"]]\n    language=None,  # type: Optional[str]\n    compute_best_waypoint_order=None,  # type: Optional[bool]\n    route_representation_for_best_order=None,  # type: Optional[Union[str, \"models.RouteRepresentationForBestOrder\"]]\n    compute_travel_time=None,  # type: Optional[Union[str, \"models.ComputeTravelTime\"]]\n    vehicle_heading=None,  # type: Optional[int]\n    report=None,  # type: Optional[Union[str, \"models.Report\"]]\n    filter_section_type=None,  # type: Optional[Union[str, \"models.SectionType\"]]\n    arrive_at=None,  # type: Optional[datetime.datetime]\n    depart_at=None,  # type: Optional[datetime.datetime]\n    vehicle_axle_weight=0,  # type: Optional[int]\n    vehicle_length=0,  # type: Optional[float]\n    vehicle_height=0,  # type: Optional[float]\n    vehicle_width=0,  # type: Optional[float]\n    vehicle_max_speed=0,  # type: Optional[int]\n    vehicle_weight=0,  # type: Optional[int]\n    is_commercial_vehicle=False,  # type: Optional[bool]\n    windingness=None,  # type: Optional[Union[str, \"models.WindingnessLevel\"]]\n    incline_level=None,  # type: Optional[Union[str, \"models.InclineLevel\"]]\n    travel_mode=None,  # type: Optional[Union[str, \"models.TravelMode\"]]\n    avoid=None,  # type: Optional[List[Union[str, \"models.RouteAvoidType\"]]]\n    use_traffic_data=None,  # type: Optional[bool]\n    route_type=None,  # type: Optional[Union[str, \"models.RouteType\"]]\n    vehicle_load_type=None,  # type: Optional[Union[str, \"models.VehicleLoadType\"]]\n    vehicle_engine_type=None,  # type: Optional[Union[str, \"models.VehicleEngineType\"]]\n    constant_speed_consumption_in_liters_per_hundred_km=None,  # type: Optional[str]\n    current_fuel_in_liters=None,  # type: Optional[float]\n    auxiliary_power_in_liters_per_hour=None,  # type: Optional[float]\n    fuel_energy_density_in_megajoules_per_liter=None,  # type: Optional[float]\n    acceleration_efficiency=None,  # type: Optional[float]\n    deceleration_efficiency=None,  # type: Optional[float]\n    uphill_efficiency=None,  # type: Optional[float]\n    downhill_efficiency=None,  # type: Optional[float]\n    constant_speed_consumption_in_kw_h_per_hundred_km=None,  # type: Optional[str]\n    current_charge_in_kw_h=None,  # type: Optional[float]\n    max_charge_in_kw_h=None,  # type: Optional[float]\n    auxiliary_power_in_kw=None,  # type: Optional[float]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nReturns  a route between an origin and a destination, passing through waypoints if they are\nspecified. The route will take into account factors such as current traffic and the typical\nroad speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the\nroute geometry. Additional routing information such as optimized waypoint order or turn by turn\ninstructions is also available, depending on the options selected.\n\nRouting service provides a set of parameters for a detailed description of a vehicle-specific\nConsumption Model. Please check `Consumption Model \u003chttps://docs.microsoft.com/azure/azure-\nmaps/consumption-model\u003e`_ for detailed explanation of the concepts and parameters involved.\n\n:param route_points: The Coordinates through which the route is calculated, delimited by a\n colon.  A minimum of two coordinates is required.  The first one is the origin and the last is\n the destination of the route. Optional coordinates in-between act as WayPoints in the route.\n You can pass up to 150 WayPoints.\n:type route_points: str\n:param route_direction_parameters: Used for reconstructing a route and for calculating zero or\n more alternative routes to this reference route.  The provided sequence of coordinates is used\n as input for route reconstruction. The alternative routes  are calculated between the origin\n and destination points specified in the base path parameter locations.  If both\n minDeviationDistance and minDeviationTime are set to zero, then these origin and destination\n points  are expected to be at (or very near) the beginning and end of the reference route,\n respectively. Intermediate  locations (waypoints) are not supported when using\n supportingPoints.\n\n Setting at least one of minDeviationDistance or minDeviationTime to a value greater than zero\n has the  following consequences:\n\n\n * The origin point of the calculateRoute request must be on (or very near) the input reference\n route. If  this is not the case, an error is returned. However, the origin point does not need\n to be at the beginning of  the input reference route (it can be thought of as the current\n vehicle position on the reference route).\n * The reference route, returned as the first route in the calculateRoute response, will start\n at the origin  point specified in the calculateRoute request. The initial part of the input\n reference route up until the  origin point will be excluded from the response.\n * The values of minDeviationDistance and minDeviationTime determine how far alternative routes\n will be  guaranteed to follow the reference route from the origin point onwards.\n * The route must use departAt.\n * The vehicleHeading is ignored.\n:type route_direction_parameters: ~azure.maps.route.models.RouteDirectionParameters\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.route.models.ResponseFormat\n:param max_alternatives: Number of desired alternative routes to be calculated. Default: 0,\n minimum: 0 and maximum: 5.\n:type max_alternatives: int\n:param alternative_type: Controls the optimality, with respect to the given planning criteria,\n of the calculated alternatives compared to the reference route.\n:type alternative_type: str or ~azure.maps.route.models.AlternativeRouteType\n:param min_deviation_distance: All alternative routes returned will follow the reference route\n (see section POST Requests) from the origin point of the calculateRoute request for at least\n this number of meters. Can only be used when reconstructing a route. The minDeviationDistance\n parameter cannot be used in conjunction with arriveAt.\n:type min_deviation_distance: int\n:param min_deviation_time: All alternative routes returned will follow the reference route (see\n section POST Requests) from the origin point of the calculateRoute request for at least this\n number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter\n cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to\n a value greater than zero has the following consequences:\n\n\n * The origin point of the *calculateRoute* Request must be on\n   (or very near) the input reference route.\n\n   * If this is not the case, an error is returned.\n   * However, the origin point does not need to be at the beginning\n     of the input reference route (it can be thought of as the current\n     vehicle position on the reference route).\n\n * The reference route, returned as the first route in the *calculateRoute*\n   Response, will start at the origin point specified in the *calculateRoute*\n   Request. The initial part of the input reference route up until the origin\n   point will be excluded from the Response.\n * The values of *minDeviationDistance* and *minDeviationTime* determine\n   how far alternative routes will be guaranteed to follow the reference\n   route from the origin point onwards.\n * The route must use *departAt*.\n * The *vehicleHeading* is ignored.\n:type min_deviation_time: int\n:param instructions_type: If specified, guidance instructions will be returned. Note that the\n instructionsType parameter cannot be used in conjunction with routeRepresentation=none.\n:type instructions_type: str or ~azure.maps.route.models.RouteInstructionsType\n:param language: The language parameter determines the language of the guidance messages. It\n does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when\n instructionsType=coded. Allowed values are (a subset of) the IETF language tags described.\n:type language: str\n:param compute_best_waypoint_order: Re-order the route waypoints using a fast heuristic\n algorithm to reduce the route length. Yields best results when used in conjunction with\n routeType *shortest*. Notice that origin and destination are excluded from the optimized\n waypoint indices. To include origin and destination in the response, please increase all the\n indices by 1 to account for the origin, and then add the destination as the final index.\n Possible values are true or false. True computes a better order if possible, but is not allowed\n to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with\n circle waypoints. False will use the locations in the given order and not allowed to be used in\n conjunction with routeRepresentation *none*.\n:type compute_best_waypoint_order: bool\n:param route_representation_for_best_order: Specifies the representation of the set of routes\n provided as response. This parameter value can only be used in conjunction with\n computeBestOrder=true.\n:type route_representation_for_best_order: str or ~azure.maps.route.models.RouteRepresentationForBestOrder\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param vehicle_heading: The directional heading of the vehicle in degrees starting at true\n North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is\n 180 degrees, west is 270 degrees. Possible values 0-359.\n:type vehicle_heading: int\n:param report: Specifies which data should be reported for diagnosis purposes. The only\n possible value is *effectiveSettings*. Reports the effective parameters or data used when\n calling the API. In the case of defaulted parameters the default will be reflected where the\n parameter was not specified by the caller.\n:type report: str or ~azure.maps.route.models.Report\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n\n\n *\n   It is mandatory if any of the *Efficiency parameters are set.\n\n *\n   It must be strictly positive when used in the context of the Consumption Model. Weight\n restrictions are considered.\n\n *\n   If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-\n zero, then weight restrictions are considered.\n\n *\n   In all other cases, this parameter is ignored.\n\n Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.\n:type vehicle_weight: int\n:param is_commercial_vehicle: Whether the vehicle is used for commercial purposes. Commercial\n vehicles may not be allowed to drive on some roads.\n:type is_commercial_vehicle: bool\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is\n specified, it must be consistent with the value of **vehicleEngineType**.\n:type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType\n:param constant_speed_consumption_in_liters_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of colon-delimited speed \u0026 consumption-rate pairs. The list\n defines points on a consumption curve. Consumption rates for speeds not in the list are found\n as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller speed.\n\n The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\n Sensible Values : 50,6.3:130,11.5\n\n **Note** : This parameter is required for **The Combustion Consumption Model**.\n:type constant_speed_consumption_in_liters_per_hundred_km: str\n:param current_fuel_in_liters: Specifies the current supply of fuel in liters.\n\n Sensible Values : 55.\n:type current_fuel_in_liters: float\n:param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining\n auxiliary systems of the vehicle, in liters per hour.\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 0.2.\n:type auxiliary_power_in_liters_per_hour: float\n:param fuel_energy_density_in_megajoules_per_liter: Specifies the amount of chemical energy\n stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the\n ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For\n example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.\n\n This parameter is required if any ***Efficiency** parameter is set.\n\n Sensible Values : 34.2.\n:type fuel_energy_density_in_megajoules_per_liter: float\n:param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored\n in fuel to kinetic energy when the vehicle accelerates *(i.e.\n KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting\n consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **decelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **decelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.\n:type acceleration_efficiency: float\n:param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved\n (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).\n ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using\n **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **accelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **accelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.\n:type deceleration_efficiency: float\n:param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel\n to potential energy when the vehicle gains elevation *(i.e.\n PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by\n converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **downhillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **downhillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.\n:type uphill_efficiency: float\n:param downhill_efficiency: Specifies the efficiency of converting potential energy to saved\n (not consumed) fuel when the vehicle loses elevation *(i.e.\n ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved\n (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **uphillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **uphillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.\n:type downhill_efficiency: float\n:param constant_speed_consumption_in_kw_h_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a\n consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller  speed.\n\n The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and\n 100000.0.\n\n Sensible Values : 50,8.2:130,21.3\n\n This parameter is required for **Electric consumption model**.\n:type constant_speed_consumption_in_kw_h_per_hundred_km: str\n:param current_charge_in_kw_h: Specifies the current electric energy supply in kilowatt hours\n (kWh).\n\n This parameter co-exists with **maxChargeInkWh** parameter.\n\n The range of values allowed are 0.0 to **maxChargeInkWh**.\n\n Sensible Values : 43.\n:type current_charge_in_kw_h: float\n:param max_charge_in_kw_h: Specifies the maximum electric energy supply in kilowatt hours (kWh)\n that may be stored in the vehicle\u0027s battery.\n\n This parameter co-exists with **currentChargeInkWh** parameter.\n\n Minimum value has to be greater than or equal to **currentChargeInkWh**.\n\n Sensible Values : 85.\n:type max_charge_in_kw_h: float\n:param auxiliary_power_in_kw: Specifies the amount of power consumed for sustaining auxiliary\n systems, in kilowatts (kW).\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 1.7.\n:type auxiliary_power_in_kw: float\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirections, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirections\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_route_directions_with_additional_parameters(\n    self,\n    route_points: str,\n    route_direction_parameters: \"models.RouteDirectionParameters\",\n    format: Union[str, \"models.ResponseFormat\"] = \"json\",\n    max_alternatives: Optional[int] = None,\n    alternative_type: Optional[Union[str, \"models.AlternativeRouteType\"]] = None,\n    min_deviation_distance: Optional[int] = None,\n    min_deviation_time: Optional[int] = None,\n    instructions_type: Optional[Union[str, \"models.RouteInstructionsType\"]] = None,\n    language: Optional[str] = None,\n    compute_best_waypoint_order: Optional[bool] = None,\n    route_representation_for_best_order: Optional[Union[str, \"models.RouteRepresentationForBestOrder\"]] = None,\n    compute_travel_time: Optional[Union[str, \"models.ComputeTravelTime\"]] = None,\n    vehicle_heading: Optional[int] = None,\n    report: Optional[Union[str, \"models.Report\"]] = None,\n    filter_section_type: Optional[Union[str, \"models.SectionType\"]] = None,\n    arrive_at: Optional[datetime.datetime] = None,\n    depart_at: Optional[datetime.datetime] = None,\n    vehicle_axle_weight: Optional[int] = 0,\n    vehicle_length: Optional[float] = 0,\n    vehicle_height: Optional[float] = 0,\n    vehicle_width: Optional[float] = 0,\n    vehicle_max_speed: Optional[int] = 0,\n    vehicle_weight: Optional[int] = 0,\n    is_commercial_vehicle: Optional[bool] = False,\n    windingness: Optional[Union[str, \"models.WindingnessLevel\"]] = None,\n    incline_level: Optional[Union[str, \"models.InclineLevel\"]] = None,\n    travel_mode: Optional[Union[str, \"models.TravelMode\"]] = None,\n    avoid: Optional[List[Union[str, \"models.RouteAvoidType\"]]] = None,\n    use_traffic_data: Optional[bool] = None,\n    route_type: Optional[Union[str, \"models.RouteType\"]] = None,\n    vehicle_load_type: Optional[Union[str, \"models.VehicleLoadType\"]] = None,\n    vehicle_engine_type: Optional[Union[str, \"models.VehicleEngineType\"]] = None,\n    constant_speed_consumption_in_liters_per_hundred_km: Optional[str] = None,\n    current_fuel_in_liters: Optional[float] = None,\n    auxiliary_power_in_liters_per_hour: Optional[float] = None,\n    fuel_energy_density_in_megajoules_per_liter: Optional[float] = None,\n    acceleration_efficiency: Optional[float] = None,\n    deceleration_efficiency: Optional[float] = None,\n    uphill_efficiency: Optional[float] = None,\n    downhill_efficiency: Optional[float] = None,\n    constant_speed_consumption_in_kw_h_per_hundred_km: Optional[str] = None,\n    current_charge_in_kw_h: Optional[float] = None,\n    max_charge_in_kw_h: Optional[float] = None,\n    auxiliary_power_in_kw: Optional[float] = None,\n    **kwargs\n) -\u003e \"models.RouteDirections\":\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nReturns  a route between an origin and a destination, passing through waypoints if they are\nspecified. The route will take into account factors such as current traffic and the typical\nroad speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the\nroute geometry. Additional routing information such as optimized waypoint order or turn by turn\ninstructions is also available, depending on the options selected.\n\nRouting service provides a set of parameters for a detailed description of a vehicle-specific\nConsumption Model. Please check `Consumption Model \u003chttps://docs.microsoft.com/azure/azure-\nmaps/consumption-model\u003e`_ for detailed explanation of the concepts and parameters involved.\n\n:param route_points: The Coordinates through which the route is calculated, delimited by a\n colon.  A minimum of two coordinates is required.  The first one is the origin and the last is\n the destination of the route. Optional coordinates in-between act as WayPoints in the route.\n You can pass up to 150 WayPoints.\n:type route_points: str\n:param route_direction_parameters: Used for reconstructing a route and for calculating zero or\n more alternative routes to this reference route.  The provided sequence of coordinates is used\n as input for route reconstruction. The alternative routes  are calculated between the origin\n and destination points specified in the base path parameter locations.  If both\n minDeviationDistance and minDeviationTime are set to zero, then these origin and destination\n points  are expected to be at (or very near) the beginning and end of the reference route,\n respectively. Intermediate  locations (waypoints) are not supported when using\n supportingPoints.\n\n Setting at least one of minDeviationDistance or minDeviationTime to a value greater than zero\n has the  following consequences:\n\n\n * The origin point of the calculateRoute request must be on (or very near) the input reference\n route. If  this is not the case, an error is returned. However, the origin point does not need\n to be at the beginning of  the input reference route (it can be thought of as the current\n vehicle position on the reference route).\n * The reference route, returned as the first route in the calculateRoute response, will start\n at the origin  point specified in the calculateRoute request. The initial part of the input\n reference route up until the  origin point will be excluded from the response.\n * The values of minDeviationDistance and minDeviationTime determine how far alternative routes\n will be  guaranteed to follow the reference route from the origin point onwards.\n * The route must use departAt.\n * The vehicleHeading is ignored.\n:type route_direction_parameters: ~azure.maps.route.models.RouteDirectionParameters\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.route.models.ResponseFormat\n:param max_alternatives: Number of desired alternative routes to be calculated. Default: 0,\n minimum: 0 and maximum: 5.\n:type max_alternatives: int\n:param alternative_type: Controls the optimality, with respect to the given planning criteria,\n of the calculated alternatives compared to the reference route.\n:type alternative_type: str or ~azure.maps.route.models.AlternativeRouteType\n:param min_deviation_distance: All alternative routes returned will follow the reference route\n (see section POST Requests) from the origin point of the calculateRoute request for at least\n this number of meters. Can only be used when reconstructing a route. The minDeviationDistance\n parameter cannot be used in conjunction with arriveAt.\n:type min_deviation_distance: int\n:param min_deviation_time: All alternative routes returned will follow the reference route (see\n section POST Requests) from the origin point of the calculateRoute request for at least this\n number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter\n cannot be used in conjunction with arriveAt. Default value is 0. Setting )minDeviationTime_ to\n a value greater than zero has the following consequences:\n\n\n * The origin point of the *calculateRoute* Request must be on\n   (or very near) the input reference route.\n\n   * If this is not the case, an error is returned.\n   * However, the origin point does not need to be at the beginning\n     of the input reference route (it can be thought of as the current\n     vehicle position on the reference route).\n\n * The reference route, returned as the first route in the *calculateRoute*\n   Response, will start at the origin point specified in the *calculateRoute*\n   Request. The initial part of the input reference route up until the origin\n   point will be excluded from the Response.\n * The values of *minDeviationDistance* and *minDeviationTime* determine\n   how far alternative routes will be guaranteed to follow the reference\n   route from the origin point onwards.\n * The route must use *departAt*.\n * The *vehicleHeading* is ignored.\n:type min_deviation_time: int\n:param instructions_type: If specified, guidance instructions will be returned. Note that the\n instructionsType parameter cannot be used in conjunction with routeRepresentation=none.\n:type instructions_type: str or ~azure.maps.route.models.RouteInstructionsType\n:param language: The language parameter determines the language of the guidance messages. It\n does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when\n instructionsType=coded. Allowed values are (a subset of) the IETF language tags described.\n:type language: str\n:param compute_best_waypoint_order: Re-order the route waypoints using a fast heuristic\n algorithm to reduce the route length. Yields best results when used in conjunction with\n routeType *shortest*. Notice that origin and destination are excluded from the optimized\n waypoint indices. To include origin and destination in the response, please increase all the\n indices by 1 to account for the origin, and then add the destination as the final index.\n Possible values are true or false. True computes a better order if possible, but is not allowed\n to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with\n circle waypoints. False will use the locations in the given order and not allowed to be used in\n conjunction with routeRepresentation *none*.\n:type compute_best_waypoint_order: bool\n:param route_representation_for_best_order: Specifies the representation of the set of routes\n provided as response. This parameter value can only be used in conjunction with\n computeBestOrder=true.\n:type route_representation_for_best_order: str or ~azure.maps.route.models.RouteRepresentationForBestOrder\n:param compute_travel_time: Specifies whether to return additional travel times using different\n types of traffic information (none, historic, live) as well as the default best-estimate travel\n time.\n:type compute_travel_time: str or ~azure.maps.route.models.ComputeTravelTime\n:param vehicle_heading: The directional heading of the vehicle in degrees starting at true\n North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is\n 180 degrees, west is 270 degrees. Possible values 0-359.\n:type vehicle_heading: int\n:param report: Specifies which data should be reported for diagnosis purposes. The only\n possible value is *effectiveSettings*. Reports the effective parameters or data used when\n calling the API. In the case of defaulted parameters the default will be reflected where the\n parameter was not specified by the caller.\n:type report: str or ~azure.maps.route.models.Report\n:param filter_section_type: Specifies which of the section types is reported in the route\n response. :code:`\u003cbr\u003e`:code:`\u003cbr\u003e`For example if sectionType = pedestrian the sections which\n are suited for pedestrians only are returned. Multiple types can be used. The default\n sectionType refers to the travelMode input. By default travelMode is set to car.\n:type filter_section_type: str or ~azure.maps.route.models.SectionType\n:param arrive_at: The date and time of arrival at the destination point. It must be specified\n as a dateTime. When a time zone offset is not specified it will be assumed to be that of the\n destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be\n used in conjunction with departAt, minDeviationDistance or minDeviationTime.\n:type arrive_at: ~datetime.datetime\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n\n\n *\n   It is mandatory if any of the *Efficiency parameters are set.\n\n *\n   It must be strictly positive when used in the context of the Consumption Model. Weight\n restrictions are considered.\n\n *\n   If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-\n zero, then weight restrictions are considered.\n\n *\n   In all other cases, this parameter is ignored.\n\n Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.\n:type vehicle_weight: int\n:param is_commercial_vehicle: Whether the vehicle is used for commercial purposes. Commercial\n vehicles may not be allowed to drive on some roads.\n:type is_commercial_vehicle: bool\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is\n specified, it must be consistent with the value of **vehicleEngineType**.\n:type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType\n:param constant_speed_consumption_in_liters_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of colon-delimited speed \u0026 consumption-rate pairs. The list\n defines points on a consumption curve. Consumption rates for speeds not in the list are found\n as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller speed.\n\n The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\n Sensible Values : 50,6.3:130,11.5\n\n **Note** : This parameter is required for **The Combustion Consumption Model**.\n:type constant_speed_consumption_in_liters_per_hundred_km: str\n:param current_fuel_in_liters: Specifies the current supply of fuel in liters.\n\n Sensible Values : 55.\n:type current_fuel_in_liters: float\n:param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining\n auxiliary systems of the vehicle, in liters per hour.\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 0.2.\n:type auxiliary_power_in_liters_per_hour: float\n:param fuel_energy_density_in_megajoules_per_liter: Specifies the amount of chemical energy\n stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the\n ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For\n example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.\n\n This parameter is required if any ***Efficiency** parameter is set.\n\n Sensible Values : 34.2.\n:type fuel_energy_density_in_megajoules_per_liter: float\n:param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored\n in fuel to kinetic energy when the vehicle accelerates *(i.e.\n KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting\n consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **decelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **decelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.\n:type acceleration_efficiency: float\n:param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved\n (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).\n ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using\n **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **accelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **accelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.\n:type deceleration_efficiency: float\n:param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel\n to potential energy when the vehicle gains elevation *(i.e.\n PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by\n converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **downhillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **downhillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.\n:type uphill_efficiency: float\n:param downhill_efficiency: Specifies the efficiency of converting potential energy to saved\n (not consumed) fuel when the vehicle loses elevation *(i.e.\n ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved\n (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **uphillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **uphillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.\n:type downhill_efficiency: float\n:param constant_speed_consumption_in_kw_h_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a\n consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller  speed.\n\n The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and\n 100000.0.\n\n Sensible Values : 50,8.2:130,21.3\n\n This parameter is required for **Electric consumption model**.\n:type constant_speed_consumption_in_kw_h_per_hundred_km: str\n:param current_charge_in_kw_h: Specifies the current electric energy supply in kilowatt hours\n (kWh).\n\n This parameter co-exists with **maxChargeInkWh** parameter.\n\n The range of values allowed are 0.0 to **maxChargeInkWh**.\n\n Sensible Values : 43.\n:type current_charge_in_kw_h: float\n:param max_charge_in_kw_h: Specifies the maximum electric energy supply in kilowatt hours (kWh)\n that may be stored in the vehicle\u0027s battery.\n\n This parameter co-exists with **currentChargeInkWh** parameter.\n\n Minimum value has to be greater than or equal to **currentChargeInkWh**.\n\n Sensible Values : 85.\n:type max_charge_in_kw_h: float\n:param auxiliary_power_in_kw: Specifies the amount of power consumed for sustaining auxiliary\n systems, in kilowatts (kW).\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 1.7.\n:type auxiliary_power_in_kw: float\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirections, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirections\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "route_points, route_direction_parameters, format, max_alternatives, alternative_type, min_deviation_distance, min_deviation_time, instructions_type, language, compute_best_waypoint_order, route_representation_for_best_order, compute_travel_time, vehicle_heading, report, filter_section_type, arrive_at, depart_at, vehicle_axle_weight, vehicle_length, vehicle_height, vehicle_width, vehicle_max_speed, vehicle_weight, is_commercial_vehicle, windingness, incline_level, travel_mode, avoid, use_traffic_data, route_type, vehicle_load_type, vehicle_engine_type, constant_speed_consumption_in_liters_per_hundred_km, current_fuel_in_liters, auxiliary_power_in_liters_per_hour, fuel_energy_density_in_megajoules_per_liter, acceleration_efficiency, deceleration_efficiency, uphill_efficiency, downhill_efficiency, constant_speed_consumption_in_kw_h_per_hundred_km, current_charge_in_kw_h, max_charge_in_kw_h, auxiliary_power_in_kw"
        },
        "get_route_range" : {
            "sync": {
                "signature": "def get_route_range(\n    self,\n    query,  # type: List[float]\n    format=\"json\",  # type: Union[str, \"models.ResponseFormat\"]\n    fuel_budget_in_liters=None,  # type: Optional[float]\n    energy_budget_in_kw_h=None,  # type: Optional[float]\n    time_budget_in_sec=None,  # type: Optional[float]\n    distance_budget_in_meters=None,  # type: Optional[float]\n    depart_at=None,  # type: Optional[datetime.datetime]\n    route_type=None,  # type: Optional[Union[str, \"models.RouteType\"]]\n    use_traffic_data=None,  # type: Optional[bool]\n    avoid=None,  # type: Optional[List[Union[str, \"models.RouteAvoidType\"]]]\n    travel_mode=None,  # type: Optional[Union[str, \"models.TravelMode\"]]\n    incline_level=None,  # type: Optional[Union[str, \"models.InclineLevel\"]]\n    windingness=None,  # type: Optional[Union[str, \"models.WindingnessLevel\"]]\n    vehicle_axle_weight=0,  # type: Optional[int]\n    vehicle_width=0,  # type: Optional[float]\n    vehicle_height=0,  # type: Optional[float]\n    vehicle_length=0,  # type: Optional[float]\n    vehicle_max_speed=0,  # type: Optional[int]\n    vehicle_weight=0,  # type: Optional[int]\n    is_commercial_vehicle=False,  # type: Optional[bool]\n    vehicle_load_type=None,  # type: Optional[Union[str, \"models.VehicleLoadType\"]]\n    vehicle_engine_type=None,  # type: Optional[Union[str, \"models.VehicleEngineType\"]]\n    constant_speed_consumption_in_liters_per_hundred_km=None,  # type: Optional[str]\n    current_fuel_in_liters=None,  # type: Optional[float]\n    auxiliary_power_in_liters_per_hour=None,  # type: Optional[float]\n    fuel_energy_density_in_megajoules_per_liter=None,  # type: Optional[float]\n    acceleration_efficiency=None,  # type: Optional[float]\n    deceleration_efficiency=None,  # type: Optional[float]\n    uphill_efficiency=None,  # type: Optional[float]\n    downhill_efficiency=None,  # type: Optional[float]\n    constant_speed_consumption_in_kw_h_per_hundred_km=None,  # type: Optional[str]\n    current_charge_in_kw_h=None,  # type: Optional[float]\n    max_charge_in_kw_h=None,  # type: Optional[float]\n    auxiliary_power_in_kw=None,  # type: Optional[float]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Route Range (Isochrone) API**\n\n**Applies to**\\ : S1 pricing tier.\n\nThis service will calculate a set of locations that can be reached from the origin point based\non fuel, energy,  time or distance budget that is specified. A polygon boundary (or Isochrone)\nis returned in a counterclockwise  orientation as well as the precise polygon center which was\nthe result of the origin point.\n\nThe returned polygon can be used for further processing such as  `Search Inside Geometry\n\u003chttps://docs.microsoft.com/rest/api/maps/search/postsearchinsidegeometry\u003e`_ to  search for\nPOIs within the provided Isochrone.\n\n:param query: The Coordinate from which the range calculation should start.\n:type query: list[float]\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.route.models.ResponseFormat\n:param fuel_budget_in_liters: Fuel budget in liters that determines maximal range which can be\n travelled using the specified Combustion Consumption Model.:code:`\u003cbr\u003e` When fuelBudgetInLiters\n is used, it is mandatory to specify a detailed  Combustion Consumption Model.:code:`\u003cbr\u003e`\n Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or\n distanceBudgetInMeters) must be used.\n:type fuel_budget_in_liters: float\n:param energy_budget_in_kw_h: Electric energy budget in kilowatt hours (kWh) that determines\n maximal range which can be travelled using the specified Electric Consumption\n Model.:code:`\u003cbr\u003e` When energyBudgetInkWh is used, it is mandatory to specify a detailed\n Electric Consumption Model.:code:`\u003cbr\u003e` Exactly one budget (fuelBudgetInLiters,\n energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.\n:type energy_budget_in_kw_h: float\n:param time_budget_in_sec: Time budget in seconds that determines maximal range which can be\n travelled using driving time. The Consumption Model will only affect the range when routeType\n is eco.:code:`\u003cbr\u003e` Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec,\n or distanceBudgetInMeters) must be used.\n:type time_budget_in_sec: float\n:param distance_budget_in_meters: Distance budget in meters that determines maximal range which\n can be travelled using driving distance.  The Consumption Model will only affect the range when\n routeType is eco.:code:`\u003cbr\u003e` Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh,\n timeBudgetInSec, or distanceBudgetInMeters) must be used.\n:type distance_budget_in_meters: float\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n\n\n *\n   It is mandatory if any of the *Efficiency parameters are set.\n\n *\n   It must be strictly positive when used in the context of the Consumption Model. Weight\n restrictions are considered.\n\n *\n   If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-\n zero, then weight restrictions are considered.\n\n *\n   In all other cases, this parameter is ignored.\n\n Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.\n:type vehicle_weight: int\n:param is_commercial_vehicle: Whether the vehicle is used for commercial purposes. Commercial\n vehicles may not be allowed to drive on some roads.\n:type is_commercial_vehicle: bool\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is\n specified, it must be consistent with the value of **vehicleEngineType**.\n:type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType\n:param constant_speed_consumption_in_liters_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of colon-delimited speed \u0026 consumption-rate pairs. The list\n defines points on a consumption curve. Consumption rates for speeds not in the list are found\n as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller speed.\n\n The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\n Sensible Values : 50,6.3:130,11.5\n\n **Note** : This parameter is required for **The Combustion Consumption Model**.\n:type constant_speed_consumption_in_liters_per_hundred_km: str\n:param current_fuel_in_liters: Specifies the current supply of fuel in liters.\n\n Sensible Values : 55.\n:type current_fuel_in_liters: float\n:param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining\n auxiliary systems of the vehicle, in liters per hour.\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 0.2.\n:type auxiliary_power_in_liters_per_hour: float\n:param fuel_energy_density_in_megajoules_per_liter: Specifies the amount of chemical energy\n stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the\n ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For\n example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.\n\n This parameter is required if any ***Efficiency** parameter is set.\n\n Sensible Values : 34.2.\n:type fuel_energy_density_in_megajoules_per_liter: float\n:param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored\n in fuel to kinetic energy when the vehicle accelerates *(i.e.\n KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting\n consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **decelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **decelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.\n:type acceleration_efficiency: float\n:param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved\n (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).\n ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using\n **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **accelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **accelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.\n:type deceleration_efficiency: float\n:param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel\n to potential energy when the vehicle gains elevation *(i.e.\n PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by\n converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **downhillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **downhillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.\n:type uphill_efficiency: float\n:param downhill_efficiency: Specifies the efficiency of converting potential energy to saved\n (not consumed) fuel when the vehicle loses elevation *(i.e.\n ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved\n (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **uphillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **uphillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.\n:type downhill_efficiency: float\n:param constant_speed_consumption_in_kw_h_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a\n consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller  speed.\n\n The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and\n 100000.0.\n\n Sensible Values : 50,8.2:130,21.3\n\n This parameter is required for **Electric consumption model**.\n:type constant_speed_consumption_in_kw_h_per_hundred_km: str\n:param current_charge_in_kw_h: Specifies the current electric energy supply in kilowatt hours\n (kWh).\n\n This parameter co-exists with **maxChargeInkWh** parameter.\n\n The range of values allowed are 0.0 to **maxChargeInkWh**.\n\n Sensible Values : 43.\n:type current_charge_in_kw_h: float\n:param max_charge_in_kw_h: Specifies the maximum electric energy supply in kilowatt hours (kWh)\n that may be stored in the vehicle\u0027s battery.\n\n This parameter co-exists with **currentChargeInkWh** parameter.\n\n Minimum value has to be greater than or equal to **currentChargeInkWh**.\n\n Sensible Values : 85.\n:type max_charge_in_kw_h: float\n:param auxiliary_power_in_kw: Specifies the amount of power consumed for sustaining auxiliary\n systems, in kilowatts (kW).\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 1.7.\n:type auxiliary_power_in_kw: float\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteRangeResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteRangeResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_route_range(\n    self,\n    query: List[float],\n    format: Union[str, \"models.ResponseFormat\"] = \"json\",\n    fuel_budget_in_liters: Optional[float] = None,\n    energy_budget_in_kw_h: Optional[float] = None,\n    time_budget_in_sec: Optional[float] = None,\n    distance_budget_in_meters: Optional[float] = None,\n    depart_at: Optional[datetime.datetime] = None,\n    route_type: Optional[Union[str, \"models.RouteType\"]] = None,\n    use_traffic_data: Optional[bool] = None,\n    avoid: Optional[List[Union[str, \"models.RouteAvoidType\"]]] = None,\n    travel_mode: Optional[Union[str, \"models.TravelMode\"]] = None,\n    incline_level: Optional[Union[str, \"models.InclineLevel\"]] = None,\n    windingness: Optional[Union[str, \"models.WindingnessLevel\"]] = None,\n    vehicle_axle_weight: Optional[int] = 0,\n    vehicle_width: Optional[float] = 0,\n    vehicle_height: Optional[float] = 0,\n    vehicle_length: Optional[float] = 0,\n    vehicle_max_speed: Optional[int] = 0,\n    vehicle_weight: Optional[int] = 0,\n    is_commercial_vehicle: Optional[bool] = False,\n    vehicle_load_type: Optional[Union[str, \"models.VehicleLoadType\"]] = None,\n    vehicle_engine_type: Optional[Union[str, \"models.VehicleEngineType\"]] = None,\n    constant_speed_consumption_in_liters_per_hundred_km: Optional[str] = None,\n    current_fuel_in_liters: Optional[float] = None,\n    auxiliary_power_in_liters_per_hour: Optional[float] = None,\n    fuel_energy_density_in_megajoules_per_liter: Optional[float] = None,\n    acceleration_efficiency: Optional[float] = None,\n    deceleration_efficiency: Optional[float] = None,\n    uphill_efficiency: Optional[float] = None,\n    downhill_efficiency: Optional[float] = None,\n    constant_speed_consumption_in_kw_h_per_hundred_km: Optional[str] = None,\n    current_charge_in_kw_h: Optional[float] = None,\n    max_charge_in_kw_h: Optional[float] = None,\n    auxiliary_power_in_kw: Optional[float] = None,\n    **kwargs\n) -\u003e \"models.RouteRangeResult\":\n",
                "doc": "\"\"\"**Route Range (Isochrone) API**\n\n**Applies to**\\ : S1 pricing tier.\n\nThis service will calculate a set of locations that can be reached from the origin point based\non fuel, energy,  time or distance budget that is specified. A polygon boundary (or Isochrone)\nis returned in a counterclockwise  orientation as well as the precise polygon center which was\nthe result of the origin point.\n\nThe returned polygon can be used for further processing such as  `Search Inside Geometry\n\u003chttps://docs.microsoft.com/rest/api/maps/search/postsearchinsidegeometry\u003e`_ to  search for\nPOIs within the provided Isochrone.\n\n:param query: The Coordinate from which the range calculation should start.\n:type query: list[float]\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.route.models.ResponseFormat\n:param fuel_budget_in_liters: Fuel budget in liters that determines maximal range which can be\n travelled using the specified Combustion Consumption Model.:code:`\u003cbr\u003e` When fuelBudgetInLiters\n is used, it is mandatory to specify a detailed  Combustion Consumption Model.:code:`\u003cbr\u003e`\n Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, or\n distanceBudgetInMeters) must be used.\n:type fuel_budget_in_liters: float\n:param energy_budget_in_kw_h: Electric energy budget in kilowatt hours (kWh) that determines\n maximal range which can be travelled using the specified Electric Consumption\n Model.:code:`\u003cbr\u003e` When energyBudgetInkWh is used, it is mandatory to specify a detailed\n Electric Consumption Model.:code:`\u003cbr\u003e` Exactly one budget (fuelBudgetInLiters,\n energyBudgetInkWh, timeBudgetInSec, or distanceBudgetInMeters) must be used.\n:type energy_budget_in_kw_h: float\n:param time_budget_in_sec: Time budget in seconds that determines maximal range which can be\n travelled using driving time. The Consumption Model will only affect the range when routeType\n is eco.:code:`\u003cbr\u003e` Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec,\n or distanceBudgetInMeters) must be used.\n:type time_budget_in_sec: float\n:param distance_budget_in_meters: Distance budget in meters that determines maximal range which\n can be travelled using driving distance.  The Consumption Model will only affect the range when\n routeType is eco.:code:`\u003cbr\u003e` Exactly one budget (fuelBudgetInLiters, energyBudgetInkWh,\n timeBudgetInSec, or distanceBudgetInMeters) must be used.\n:type distance_budget_in_meters: float\n:param depart_at: The date and time of departure from the origin point. Departure times apart\n from now must be specified as a dateTime. When a time zone offset is not specified, it will be\n assumed to be that of the origin point. The departAt value must be in the future in the date-\n time format (1996-12-19T16:39:57-08:00).\n:type depart_at: ~datetime.datetime\n:param route_type: The type of route requested.\n:type route_type: str or ~azure.maps.route.models.RouteType\n:param use_traffic_data: Possible values:\n\n\n * true - Do consider all available traffic information during routing\n * false - Ignore current traffic data during routing. Note that although the current traffic\n data is ignored\n   during routing, the effect of historic traffic on effective road speeds is still\n incorporated.\n:type use_traffic_data: bool\n:param avoid: Specifies something that the route calculation should try to avoid when\n determining the route. Can be specified multiple times in one request, for example,\n \u0027\u0026avoid=motorways\u0026avoid=tollRoads\u0026avoid=ferries\u0027. In calculateReachableRange requests, the\n value alreadyUsedRoads must not be used.\n:type avoid: list[str or ~azure.maps.route.models.RouteAvoidType]\n:param travel_mode: The mode of travel for the requested route. If not defined, default is\n \u0027car\u0027. Note that the requested travelMode may not be available for the entire route. Where the\n requested travelMode is not available for a particular section, the travelMode element of the\n response for that section will be \"other\". Note that travel modes bus, motorcycle, taxi and van\n are BETA functionality. Full restriction data is not available in all areas. In\n **calculateReachableRange** requests, the values bicycle and pedestrian must not be used.\n:type travel_mode: str or ~azure.maps.route.models.TravelMode\n:param incline_level: Degree of hilliness for thrilling route. This parameter can only be used\n in conjunction with ``routeType``\\ =thrilling.\n:type incline_level: str or ~azure.maps.route.models.InclineLevel\n:param windingness: Level of turns for thrilling route. This parameter can only be used in\n conjunction with ``routeType``\\ =thrilling.\n:type windingness: str or ~azure.maps.route.models.WindingnessLevel\n:param vehicle_axle_weight: Weight per axle of the vehicle in kg. A value of 0 means that\n weight restrictions per axle are not considered.\n:type vehicle_axle_weight: int\n:param vehicle_width: Width of the vehicle in meters. A value of 0 means that width\n restrictions are not considered.\n:type vehicle_width: float\n:param vehicle_height: Height of the vehicle in meters. A value of 0 means that height\n restrictions are not considered.\n:type vehicle_height: float\n:param vehicle_length: Length of the vehicle in meters. A value of 0 means that length\n restrictions are not considered.\n:type vehicle_length: float\n:param vehicle_max_speed: Maximum speed of the vehicle in km/hour. The max speed in the vehicle\n profile is used to check whether a vehicle is allowed on motorways.\n\n\n *\n   A value of 0 means that an appropriate value for the vehicle will be determined and applied\n during route planning.\n\n *\n   A non-zero value may be overridden during route planning. For example, the current traffic\n flow is 60 km/hour. If the vehicle  maximum speed is set to 50 km/hour, the routing engine will\n consider 60 km/hour as this is the current situation.  If the maximum speed of the vehicle is\n provided as 80 km/hour but the current traffic flow is 60 km/hour, then routing engine will\n again use 60 km/hour.\n:type vehicle_max_speed: int\n:param vehicle_weight: Weight of the vehicle in kilograms.\n\n\n *\n   It is mandatory if any of the *Efficiency parameters are set.\n\n *\n   It must be strictly positive when used in the context of the Consumption Model. Weight\n restrictions are considered.\n\n *\n   If no detailed **Consumption Model** is specified and the value of **vehicleWeight** is non-\n zero, then weight restrictions are considered.\n\n *\n   In all other cases, this parameter is ignored.\n\n Sensible Values : for **Combustion Model** : 1600, for **Electric Model** : 1900.\n:type vehicle_weight: int\n:param is_commercial_vehicle: Whether the vehicle is used for commercial purposes. Commercial\n vehicles may not be allowed to drive on some roads.\n:type is_commercial_vehicle: bool\n:param vehicle_load_type: Types of cargo that may be classified as hazardous materials and\n restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9,\n plus generic classifications for use in other countries. Values beginning with USHazmat are for\n US routing while otherHazmat should be used for all other countries. vehicleLoadType can be\n specified multiple times. This parameter is currently only considered for travelMode=truck.\n:type vehicle_load_type: str or ~azure.maps.route.models.VehicleLoadType\n:param vehicle_engine_type: Engine type of the vehicle. When a detailed Consumption Model is\n specified, it must be consistent with the value of **vehicleEngineType**.\n:type vehicle_engine_type: str or ~azure.maps.route.models.VehicleEngineType\n:param constant_speed_consumption_in_liters_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of colon-delimited speed \u0026 consumption-rate pairs. The list\n defines points on a consumption curve. Consumption rates for speeds not in the list are found\n as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller speed.\n\n The valid range for the consumption values(expressed in l/100km) is between 0.01 and 100000.0.\n\n Sensible Values : 50,6.3:130,11.5\n\n **Note** : This parameter is required for **The Combustion Consumption Model**.\n:type constant_speed_consumption_in_liters_per_hundred_km: str\n:param current_fuel_in_liters: Specifies the current supply of fuel in liters.\n\n Sensible Values : 55.\n:type current_fuel_in_liters: float\n:param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining\n auxiliary systems of the vehicle, in liters per hour.\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 0.2.\n:type auxiliary_power_in_liters_per_hour: float\n:param fuel_energy_density_in_megajoules_per_liter: Specifies the amount of chemical energy\n stored in one liter of fuel in megajoules (MJ). It is used in conjunction with the\n ***Efficiency** parameters for conversions between saved or consumed energy and fuel. For\n example, energy density is 34.2 MJ/l for gasoline, and 35.8 MJ/l for Diesel fuel.\n\n This parameter is required if any ***Efficiency** parameter is set.\n\n Sensible Values : 34.2.\n:type fuel_energy_density_in_megajoules_per_liter: float\n:param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored\n in fuel to kinetic energy when the vehicle accelerates *(i.e.\n KineticEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by converting\n consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **decelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **decelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.33, for **Electric Model** : 0.66.\n:type acceleration_efficiency: float\n:param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved\n (not consumed) fuel when the vehicle decelerates *(i.e. ChemicalEnergySaved/KineticEnergyLost).\n ChemicalEnergySaved* is obtained by converting saved (not consumed) fuel to energy using\n **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **accelerationEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **accelerationEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.83, for **Electric Model** : 0.91.\n:type deceleration_efficiency: float\n:param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel\n to potential energy when the vehicle gains elevation *(i.e.\n PotentialEnergyGained/ChemicalEnergyConsumed). ChemicalEnergyConsumed* is obtained by\n converting consumed fuel to chemical energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **downhillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **downhillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.27, for **Electric Model** : 0.74.\n:type uphill_efficiency: float\n:param downhill_efficiency: Specifies the efficiency of converting potential energy to saved\n (not consumed) fuel when the vehicle loses elevation *(i.e.\n ChemicalEnergySaved/PotentialEnergyLost). ChemicalEnergySaved* is obtained by converting saved\n (not consumed) fuel to energy using **fuelEnergyDensityInMJoulesPerLiter**.\n\n Must be paired with **uphillEfficiency**.\n\n The range of values allowed are 0.0 to 1/\\ **uphillEfficiency**.\n\n Sensible Values : for **Combustion Model** : 0.51, for **Electric Model** : 0.73.\n:type downhill_efficiency: float\n:param constant_speed_consumption_in_kw_h_per_hundred_km: Specifies the speed-dependent\n component of consumption.\n\n Provided as an unordered list of speed/consumption-rate pairs. The list defines points on a\n consumption curve. Consumption rates for speeds not in the list are found as follows:\n\n\n *\n   by linear interpolation, if the given speed lies in between two speeds in the list\n\n *\n   by linear extrapolation otherwise, assuming a constant (\u0394Consumption/\u0394Speed) determined by\n the nearest two points in the list\n\n The list must contain between 1 and 25 points (inclusive), and may not contain duplicate\n points for the same speed. If it only contains a single point, then the consumption rate of\n that point is used without further processing.\n\n Consumption specified for the largest speed must be greater than or equal to that of the\n penultimate largest speed. This ensures that extrapolation does not lead to negative\n consumption rates.\n\n Similarly, consumption values specified for the two smallest speeds in the list cannot lead to\n a negative consumption rate for any smaller  speed.\n\n The valid range for the consumption values(expressed in kWh/100km) is between 0.01 and\n 100000.0.\n\n Sensible Values : 50,8.2:130,21.3\n\n This parameter is required for **Electric consumption model**.\n:type constant_speed_consumption_in_kw_h_per_hundred_km: str\n:param current_charge_in_kw_h: Specifies the current electric energy supply in kilowatt hours\n (kWh).\n\n This parameter co-exists with **maxChargeInkWh** parameter.\n\n The range of values allowed are 0.0 to **maxChargeInkWh**.\n\n Sensible Values : 43.\n:type current_charge_in_kw_h: float\n:param max_charge_in_kw_h: Specifies the maximum electric energy supply in kilowatt hours (kWh)\n that may be stored in the vehicle\u0027s battery.\n\n This parameter co-exists with **currentChargeInkWh** parameter.\n\n Minimum value has to be greater than or equal to **currentChargeInkWh**.\n\n Sensible Values : 85.\n:type max_charge_in_kw_h: float\n:param auxiliary_power_in_kw: Specifies the amount of power consumed for sustaining auxiliary\n systems, in kilowatts (kW).\n\n It can be used to specify consumption due to devices and systems such as AC systems, radio,\n heating, etc.\n\n Sensible Values : 1.7.\n:type auxiliary_power_in_kw: float\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteRangeResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteRangeResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "query, format, fuel_budget_in_liters, energy_budget_in_kw_h, time_budget_in_sec, distance_budget_in_meters, depart_at, route_type, use_traffic_data, avoid, travel_mode, incline_level, windingness, vehicle_axle_weight, vehicle_width, vehicle_height, vehicle_length, vehicle_max_speed, vehicle_weight, is_commercial_vehicle, vehicle_load_type, vehicle_engine_type, constant_speed_consumption_in_liters_per_hundred_km, current_fuel_in_liters, auxiliary_power_in_liters_per_hour, fuel_energy_density_in_megajoules_per_liter, acceleration_efficiency, deceleration_efficiency, uphill_efficiency, downhill_efficiency, constant_speed_consumption_in_kw_h_per_hundred_km, current_charge_in_kw_h, max_charge_in_kw_h, auxiliary_power_in_kw"
        },
        "_request_route_directions_batch_initial" : {
            "sync": {
                "signature": "def _request_route_directions_batch_initial(\n    self,\n    route_directions_batch_queries,  # type: \"models.BatchRequest\"\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"\n\n:param route_directions_batch_queries: The list of route directions queries/requests to\n process. The list can contain a max of 700 queries for async and 100 queries for sync version\n and must contain at least 1 query.\n:type route_directions_batch_queries: ~azure.maps.route.models.BatchRequest\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirectionsBatchResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirectionsBatchResult or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def _request_route_directions_batch_initial(\n    self,\n    route_directions_batch_queries: \"models.BatchRequest\",\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    **kwargs\n) -\u003e Optional[\"models.RouteDirectionsBatchResult\"]:\n",
                "doc": "\"\"\"\n\n:param route_directions_batch_queries: The list of route directions queries/requests to\n process. The list can contain a max of 700 queries for async and 100 queries for sync version\n and must contain at least 1 query.\n:type route_directions_batch_queries: ~azure.maps.route.models.BatchRequest\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirectionsBatchResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirectionsBatchResult or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "route_directions_batch_queries, format"
        },
        "begin_request_route_directions_batch" : {
            "sync": {
                "signature": "def begin_request_route_directions_batch(\n    self,\n    route_directions_batch_queries,  # type: \"models.BatchRequest\"\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Route Directions Batch API**\n\n**Applies to**\\ : S1 pricing tier.\n\nThe Route Directions Batch API sends batches of queries to `Route Directions API\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections\u003e`_ using just a single API\ncall. You can call Route Directions Batch API to run either asynchronously (async) or\nsynchronously (sync). The async API allows caller to batch up to **700** queries and sync API\nup to **100** queries.\n\nSubmit Asynchronous Batch Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Asynchronous API is appropriate for processing big volumes of relatively complex route\nrequests\n\n\n* It allows the retrieval of results in a separate call (multiple downloads are possible).\n* The asynchronous API is optimized for reliability and is not expected to run into a timeout.\n* The number of batch items is limited to **700** for this API.\n\nWhen you make a request by using async request, by default the service returns a 202 response\ncode along a redirect URL in the Location field of the response header. This URL should be\nchecked periodically until the response data or error information is available.\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response\nif used after the expiration period.\n\nPlease note that asynchronous batch request is a long-running request. Here\u0027s a typical\nsequence of operations:\n\n\n#. Client sends a Route Directions Batch ``POST`` request to Azure Maps\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` - Batch request has been accepted.\n\n      HTTP ``Error`` - There was an error processing your Batch request. This could either be a\n``400 Bad Request`` or any other ``Error`` status code.\n\n\n#.\n   If the batch request was accepted successfully, the ``Location`` header in the response\ncontains the URL to download the results of the batch request.\n    This status URI looks like following:\n\n``GET https://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0``\nNote:- Please remember to add AUTH information (subscription-key/azure_auth - See `Security\n\u003c#security\u003e`_\\ ) to the *status URI* before running it. :code:`\u003cbr\u003e`\n\n\n#. Client issues a ``GET`` request on the *download URL* obtained in Step 3 to download the\nbatch results.\n\nPOST Body for Batch Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo send the *route directions* queries you will use a ``POST`` request where the request body\nwill contain the ``batchItems`` array in ``json`` format and the ``Content-Type`` header will\nbe set to ``application/json``. Here\u0027s a sample request body containing 3 *route directions*\nqueries:\n\n.. code-block:: json\n\n   {\n       \"batchItems\": [\n           { \"query\":\n\"?query=47.620659,-122.348934:47.610101,-122.342015\u0026travelMode=bicycle\u0026routeType=eco\u0026traffic=false\"\n},\n           { \"query\":\n\"?query=40.759856,-73.985108:40.771136,-73.973506\u0026travelMode=pedestrian\u0026routeType=shortest\" },\n           { \"query\": \"?query=48.923159,-122.557362:32.621279,-116.840362\" }\n       ]\n   }\n\nA *route directions* query in a batch is just a partial URL *without* the protocol, base URL,\npath, api-version and subscription-key. It can accept any of the supported *route directions*\n`URI parameters \u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections#uri-\nparameters\u003e`_. The string values in the *route directions* query must be properly escaped (e.g.\n\" character should be escaped with ) and it should also be properly URL-encoded.\n\nThe async API allows caller to batch up to **700** queries and sync API up to **100** queries,\nand the batch should contain at least **1** query.\n\nDownload Asynchronous Batch Results\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo download the async batch results you will issue a ``GET`` request to the batch download\nendpoint. This *download URL* can be obtained from the ``Location`` header of a successful\n``POST`` batch request and looks like the following:\n\n.. code-block::\n\n   https://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nHere\u0027s the typical sequence of operations for downloading the batch results:\n\n\n#. Client sends a ``GET`` request using the *download URL*.\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` - Batch request was accepted but is still being processed. Please\ntry again in some time.\n\n      HTTP ``200 OK`` - Batch request successfully processed. The response body contains all\nthe batch results.\n\n\nBatch Response Model\n^^^^^^^^^^^^^^^^^^^^\n\nThe returned data content is similar for async and sync requests. When downloading the results\nof an async batch request, if the batch has finished processing, the response body contains the\nbatch response. This batch response contains a ``summary`` component that indicates the\n``totalRequests`` that were part of the original batch request and ``successfulRequests``\\ i.e.\nqueries which were executed successfully. The batch response also includes a ``batchItems``\narray which contains a response for each and every query in the batch request. The\n``batchItems`` will contain the results in the exact same order the original queries were sent\nin the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``\nfields. Each ``response`` in ``batchItems`` is of one of the following types:\n\n\n*\n  `\\ ``RouteDirections``\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections\u003e`_ - If the\nquery completed successfully.\n\n*\n  ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in\nthis case.\n\nHere\u0027s a sample Batch Response with 1 *successful* and 1 *failed* result:\n\n.. code-block:: json\n\n   {\n       \"summary\": {\n           \"successfulRequests\": 1,\n           \"totalRequests\": 2\n       },\n       \"batchItems\": [\n           {\n               \"statusCode\": 200,\n               \"response\": {\n                   \"routes\": [\n                       {\n                           \"summary\": {\n                               \"lengthInMeters\": 1758,\n                               \"travelTimeInSeconds\": 387,\n                               \"trafficDelayInSeconds\": 0,\n                               \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                               \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                           },\n                           \"legs\": [\n                               {\n                                   \"summary\": {\n                                       \"lengthInMeters\": 1758,\n                                       \"travelTimeInSeconds\": 387,\n                                       \"trafficDelayInSeconds\": 0,\n                                       \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                       \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                   },\n                                   \"points\": [\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.34892\n                                       },\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.3485\n                                       },\n                                       {\n                                           \"latitude\": 47.62095,\n                                           \"longitude\": -122.3476\n                                       }\n                                   ]\n                               }\n                           ],\n                           \"sections\": [\n                               {\n                                   \"startPointIndex\": 0,\n                                   \"endPointIndex\": 40,\n                                   \"sectionType\": \"TRAVEL_MODE\",\n                                   \"travelMode\": \"bicycle\"\n                               }\n                           ]\n                       }\n                   ]\n               }\n           },\n           {\n               \"statusCode\": 400,\n               \"response\":\n               {\n                   \"error\":\n                   {\n                       \"code\": \"400 BadRequest\",\n                       \"message\": \"Bad request: one or more parameters were incorrectly\nspecified or are mutually exclusive.\"\n                   }\n               }\n           }\n       ]\n   }.\n\n:param route_directions_batch_queries: The list of route directions queries/requests to\n process. The list can contain a max of 700 queries for async and 100 queries for sync version\n and must contain at least 1 query.\n:type route_directions_batch_queries: ~azure.maps.route.models.BatchRequest\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.PollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of LROPoller that returns either RouteDirectionsBatchResult or the result of cls(response)\n:rtype: ~azure.core.polling.LROPoller[~azure.maps.route.models.RouteDirectionsBatchResult]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def begin_request_route_directions_batch(\n    self,\n    route_directions_batch_queries: \"models.BatchRequest\",\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    **kwargs\n) -\u003e AsyncLROPoller[\"models.RouteDirectionsBatchResult\"]:\n",
                "doc": "\"\"\"**Route Directions Batch API**\n\n**Applies to**\\ : S1 pricing tier.\n\nThe Route Directions Batch API sends batches of queries to `Route Directions API\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections\u003e`_ using just a single API\ncall. You can call Route Directions Batch API to run either asynchronously (async) or\nsynchronously (sync). The async API allows caller to batch up to **700** queries and sync API\nup to **100** queries.\n\nSubmit Asynchronous Batch Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Asynchronous API is appropriate for processing big volumes of relatively complex route\nrequests\n\n\n* It allows the retrieval of results in a separate call (multiple downloads are possible).\n* The asynchronous API is optimized for reliability and is not expected to run into a timeout.\n* The number of batch items is limited to **700** for this API.\n\nWhen you make a request by using async request, by default the service returns a 202 response\ncode along a redirect URL in the Location field of the response header. This URL should be\nchecked periodically until the response data or error information is available.\nThe asynchronous responses are stored for **14** days. The redirect URL returns a 404 response\nif used after the expiration period.\n\nPlease note that asynchronous batch request is a long-running request. Here\u0027s a typical\nsequence of operations:\n\n\n#. Client sends a Route Directions Batch ``POST`` request to Azure Maps\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` - Batch request has been accepted.\n\n      HTTP ``Error`` - There was an error processing your Batch request. This could either be a\n``400 Bad Request`` or any other ``Error`` status code.\n\n\n#.\n   If the batch request was accepted successfully, the ``Location`` header in the response\ncontains the URL to download the results of the batch request.\n    This status URI looks like following:\n\n``GET https://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0``\nNote:- Please remember to add AUTH information (subscription-key/azure_auth - See `Security\n\u003c#security\u003e`_\\ ) to the *status URI* before running it. :code:`\u003cbr\u003e`\n\n\n#. Client issues a ``GET`` request on the *download URL* obtained in Step 3 to download the\nbatch results.\n\nPOST Body for Batch Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo send the *route directions* queries you will use a ``POST`` request where the request body\nwill contain the ``batchItems`` array in ``json`` format and the ``Content-Type`` header will\nbe set to ``application/json``. Here\u0027s a sample request body containing 3 *route directions*\nqueries:\n\n.. code-block:: json\n\n   {\n       \"batchItems\": [\n           { \"query\":\n\"?query=47.620659,-122.348934:47.610101,-122.342015\u0026travelMode=bicycle\u0026routeType=eco\u0026traffic=false\"\n},\n           { \"query\":\n\"?query=40.759856,-73.985108:40.771136,-73.973506\u0026travelMode=pedestrian\u0026routeType=shortest\" },\n           { \"query\": \"?query=48.923159,-122.557362:32.621279,-116.840362\" }\n       ]\n   }\n\nA *route directions* query in a batch is just a partial URL *without* the protocol, base URL,\npath, api-version and subscription-key. It can accept any of the supported *route directions*\n`URI parameters \u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections#uri-\nparameters\u003e`_. The string values in the *route directions* query must be properly escaped (e.g.\n\" character should be escaped with ) and it should also be properly URL-encoded.\n\nThe async API allows caller to batch up to **700** queries and sync API up to **100** queries,\nand the batch should contain at least **1** query.\n\nDownload Asynchronous Batch Results\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo download the async batch results you will issue a ``GET`` request to the batch download\nendpoint. This *download URL* can be obtained from the ``Location`` header of a successful\n``POST`` batch request and looks like the following:\n\n.. code-block::\n\n   https://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nHere\u0027s the typical sequence of operations for downloading the batch results:\n\n\n#. Client sends a ``GET`` request using the *download URL*.\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` - Batch request was accepted but is still being processed. Please\ntry again in some time.\n\n      HTTP ``200 OK`` - Batch request successfully processed. The response body contains all\nthe batch results.\n\n\nBatch Response Model\n^^^^^^^^^^^^^^^^^^^^\n\nThe returned data content is similar for async and sync requests. When downloading the results\nof an async batch request, if the batch has finished processing, the response body contains the\nbatch response. This batch response contains a ``summary`` component that indicates the\n``totalRequests`` that were part of the original batch request and ``successfulRequests``\\ i.e.\nqueries which were executed successfully. The batch response also includes a ``batchItems``\narray which contains a response for each and every query in the batch request. The\n``batchItems`` will contain the results in the exact same order the original queries were sent\nin the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``\nfields. Each ``response`` in ``batchItems`` is of one of the following types:\n\n\n*\n  `\\ ``RouteDirections``\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections\u003e`_ - If the\nquery completed successfully.\n\n*\n  ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in\nthis case.\n\nHere\u0027s a sample Batch Response with 1 *successful* and 1 *failed* result:\n\n.. code-block:: json\n\n   {\n       \"summary\": {\n           \"successfulRequests\": 1,\n           \"totalRequests\": 2\n       },\n       \"batchItems\": [\n           {\n               \"statusCode\": 200,\n               \"response\": {\n                   \"routes\": [\n                       {\n                           \"summary\": {\n                               \"lengthInMeters\": 1758,\n                               \"travelTimeInSeconds\": 387,\n                               \"trafficDelayInSeconds\": 0,\n                               \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                               \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                           },\n                           \"legs\": [\n                               {\n                                   \"summary\": {\n                                       \"lengthInMeters\": 1758,\n                                       \"travelTimeInSeconds\": 387,\n                                       \"trafficDelayInSeconds\": 0,\n                                       \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                       \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                   },\n                                   \"points\": [\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.34892\n                                       },\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.3485\n                                       },\n                                       {\n                                           \"latitude\": 47.62095,\n                                           \"longitude\": -122.3476\n                                       }\n                                   ]\n                               }\n                           ],\n                           \"sections\": [\n                               {\n                                   \"startPointIndex\": 0,\n                                   \"endPointIndex\": 40,\n                                   \"sectionType\": \"TRAVEL_MODE\",\n                                   \"travelMode\": \"bicycle\"\n                               }\n                           ]\n                       }\n                   ]\n               }\n           },\n           {\n               \"statusCode\": 400,\n               \"response\":\n               {\n                   \"error\":\n                   {\n                       \"code\": \"400 BadRequest\",\n                       \"message\": \"Bad request: one or more parameters were incorrectly\nspecified or are mutually exclusive.\"\n                   }\n               }\n           }\n       ]\n   }.\n\n:param route_directions_batch_queries: The list of route directions queries/requests to\n process. The list can contain a max of 700 queries for async and 100 queries for sync version\n and must contain at least 1 query.\n:type route_directions_batch_queries: ~azure.maps.route.models.BatchRequest\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of AsyncLROPoller that returns either RouteDirectionsBatchResult or the result of cls(response)\n:rtype: ~azure.core.polling.AsyncLROPoller[~azure.maps.route.models.RouteDirectionsBatchResult]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "call": "route_directions_batch_queries, format"
        },
        "_get_route_directions_batch_initial" : {
            "sync": {
                "signature": "def _get_route_directions_batch_initial(\n    self,\n    batch_id,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"\n\n:param batch_id: Batch id for querying the operation.\n:type batch_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirectionsBatchResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirectionsBatchResult or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def _get_route_directions_batch_initial(\n    self,\n    batch_id: str,\n    **kwargs\n) -\u003e Optional[\"models.RouteDirectionsBatchResult\"]:\n",
                "doc": "\"\"\"\n\n:param batch_id: Batch id for querying the operation.\n:type batch_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirectionsBatchResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirectionsBatchResult or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "batch_id"
        },
        "begin_get_route_directions_batch" : {
            "sync": {
                "signature": "def begin_get_route_directions_batch(\n    self,\n    batch_id,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Download Asynchronous Batch Results\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo download the async batch results you will issue a ``GET`` request to the batch download\nendpoint. This *download URL* can be obtained from the ``Location`` header of a successful\n``POST`` batch request and looks like the following:\n\n.. code-block::\n\n   https://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nHere\u0027s the typical sequence of operations for downloading the batch results:\n\n\n#. Client sends a ``GET`` request using the *download URL*.\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` - Batch request was accepted but is still being processed. Please\ntry again in some time.\n\n      HTTP ``200 OK`` - Batch request successfully processed. The response body contains all\nthe batch results.\n\n\nBatch Response Model\n^^^^^^^^^^^^^^^^^^^^\n\nThe returned data content is similar for async and sync requests. When downloading the results\nof an async batch request, if the batch has finished processing, the response body contains the\nbatch response. This batch response contains a ``summary`` component that indicates the\n``totalRequests`` that were part of the original batch request and ``successfulRequests``\\ i.e.\nqueries which were executed successfully. The batch response also includes a ``batchItems``\narray which contains a response for each and every query in the batch request. The\n``batchItems`` will contain the results in the exact same order the original queries were sent\nin the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``\nfields. Each ``response`` in ``batchItems`` is of one of the following types:\n\n\n*\n  `\\ ``RouteDirections``\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections\u003e`_ - If the\nquery completed successfully.\n\n*\n  ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in\nthis case.\n\nHere\u0027s a sample Batch Response with 1 *successful* and 1 *failed* result:\n\n.. code-block:: json\n\n   {\n       \"summary\": {\n           \"successfulRequests\": 1,\n           \"totalRequests\": 2\n       },\n       \"batchItems\": [\n           {\n               \"statusCode\": 200,\n               \"response\": {\n                   \"routes\": [\n                       {\n                           \"summary\": {\n                               \"lengthInMeters\": 1758,\n                               \"travelTimeInSeconds\": 387,\n                               \"trafficDelayInSeconds\": 0,\n                               \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                               \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                           },\n                           \"legs\": [\n                               {\n                                   \"summary\": {\n                                       \"lengthInMeters\": 1758,\n                                       \"travelTimeInSeconds\": 387,\n                                       \"trafficDelayInSeconds\": 0,\n                                       \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                       \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                   },\n                                   \"points\": [\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.34892\n                                       },\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.3485\n                                       },\n                                       {\n                                           \"latitude\": 47.62095,\n                                           \"longitude\": -122.3476\n                                       }\n                                   ]\n                               }\n                           ],\n                           \"sections\": [\n                               {\n                                   \"startPointIndex\": 0,\n                                   \"endPointIndex\": 40,\n                                   \"sectionType\": \"TRAVEL_MODE\",\n                                   \"travelMode\": \"bicycle\"\n                               }\n                           ]\n                       }\n                   ]\n               }\n           },\n           {\n               \"statusCode\": 400,\n               \"response\":\n               {\n                   \"error\":\n                   {\n                       \"code\": \"400 BadRequest\",\n                       \"message\": \"Bad request: one or more parameters were incorrectly\nspecified or are mutually exclusive.\"\n                   }\n               }\n           }\n       ]\n   }.\n\n:param batch_id: Batch id for querying the operation.\n:type batch_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.PollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of LROPoller that returns either RouteDirectionsBatchResult or the result of cls(response)\n:rtype: ~azure.core.polling.LROPoller[~azure.maps.route.models.RouteDirectionsBatchResult]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def begin_get_route_directions_batch(\n    self,\n    batch_id: str,\n    **kwargs\n) -\u003e AsyncLROPoller[\"models.RouteDirectionsBatchResult\"]:\n",
                "doc": "\"\"\"Download Asynchronous Batch Results\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo download the async batch results you will issue a ``GET`` request to the batch download\nendpoint. This *download URL* can be obtained from the ``Location`` header of a successful\n``POST`` batch request and looks like the following:\n\n.. code-block::\n\n   https://atlas.microsoft.com/route/directions/batch/{batch-id}?api-version=1.0\u0026subscription-\nkey={subscription-key}\n\nHere\u0027s the typical sequence of operations for downloading the batch results:\n\n\n#. Client sends a ``GET`` request using the *download URL*.\n#.\n   The server will respond with one of the following:\n\n   ..\n\n      HTTP ``202 Accepted`` - Batch request was accepted but is still being processed. Please\ntry again in some time.\n\n      HTTP ``200 OK`` - Batch request successfully processed. The response body contains all\nthe batch results.\n\n\nBatch Response Model\n^^^^^^^^^^^^^^^^^^^^\n\nThe returned data content is similar for async and sync requests. When downloading the results\nof an async batch request, if the batch has finished processing, the response body contains the\nbatch response. This batch response contains a ``summary`` component that indicates the\n``totalRequests`` that were part of the original batch request and ``successfulRequests``\\ i.e.\nqueries which were executed successfully. The batch response also includes a ``batchItems``\narray which contains a response for each and every query in the batch request. The\n``batchItems`` will contain the results in the exact same order the original queries were sent\nin the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``\nfields. Each ``response`` in ``batchItems`` is of one of the following types:\n\n\n*\n  `\\ ``RouteDirections``\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections\u003e`_ - If the\nquery completed successfully.\n\n*\n  ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in\nthis case.\n\nHere\u0027s a sample Batch Response with 1 *successful* and 1 *failed* result:\n\n.. code-block:: json\n\n   {\n       \"summary\": {\n           \"successfulRequests\": 1,\n           \"totalRequests\": 2\n       },\n       \"batchItems\": [\n           {\n               \"statusCode\": 200,\n               \"response\": {\n                   \"routes\": [\n                       {\n                           \"summary\": {\n                               \"lengthInMeters\": 1758,\n                               \"travelTimeInSeconds\": 387,\n                               \"trafficDelayInSeconds\": 0,\n                               \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                               \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                           },\n                           \"legs\": [\n                               {\n                                   \"summary\": {\n                                       \"lengthInMeters\": 1758,\n                                       \"travelTimeInSeconds\": 387,\n                                       \"trafficDelayInSeconds\": 0,\n                                       \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                       \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                   },\n                                   \"points\": [\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.34892\n                                       },\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.3485\n                                       },\n                                       {\n                                           \"latitude\": 47.62095,\n                                           \"longitude\": -122.3476\n                                       }\n                                   ]\n                               }\n                           ],\n                           \"sections\": [\n                               {\n                                   \"startPointIndex\": 0,\n                                   \"endPointIndex\": 40,\n                                   \"sectionType\": \"TRAVEL_MODE\",\n                                   \"travelMode\": \"bicycle\"\n                               }\n                           ]\n                       }\n                   ]\n               }\n           },\n           {\n               \"statusCode\": 400,\n               \"response\":\n               {\n                   \"error\":\n                   {\n                       \"code\": \"400 BadRequest\",\n                       \"message\": \"Bad request: one or more parameters were incorrectly\nspecified or are mutually exclusive.\"\n                   }\n               }\n           }\n       ]\n   }.\n\n:param batch_id: Batch id for querying the operation.\n:type batch_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of AsyncLROPoller that returns either RouteDirectionsBatchResult or the result of cls(response)\n:rtype: ~azure.core.polling.AsyncLROPoller[~azure.maps.route.models.RouteDirectionsBatchResult]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "call": "batch_id"
        },
        "request_route_directions_batch_sync" : {
            "sync": {
                "signature": "def request_route_directions_batch_sync(\n    self,\n    route_directions_batch_queries,  # type: \"models.BatchRequest\"\n    format=\"json\",  # type: Union[str, \"models.JsonFormat\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Route Directions Batch API**\n\n**Applies to**\\ : S1 pricing tier.\n\nThe Route Directions Batch API sends batches of queries to `Route Directions API\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections\u003e`_ using just a single API\ncall. You can call Route Directions Batch API to run either asynchronously (async) or\nsynchronously (sync). The async API allows caller to batch up to **700** queries and sync API\nup to **100** queries.\n\nSubmit Synchronous Batch Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Synchronous API is recommended for lightweight batch requests. When the service receives a\nrequest, it will respond as soon as the batch items are calculated and there will be no\npossibility to retrieve the results later. The Synchronous API will return a timeout error (a\n408 response) if the request takes longer than 60 seconds. The number of batch items is limited\nto **100** for this API.\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/directions/batch/sync/json?api-\nversion=1.0\u0026subscription-key={subscription-key}\n\nBatch Response Model\n^^^^^^^^^^^^^^^^^^^^\n\nThe returned data content is similar for async and sync requests. When downloading the results\nof an async batch request, if the batch has finished processing, the response body contains the\nbatch response. This batch response contains a ``summary`` component that indicates the\n``totalRequests`` that were part of the original batch request and ``successfulRequests``\\ i.e.\nqueries which were executed successfully. The batch response also includes a ``batchItems``\narray which contains a response for each and every query in the batch request. The\n``batchItems`` will contain the results in the exact same order the original queries were sent\nin the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``\nfields. Each ``response`` in ``batchItems`` is of one of the following types:\n\n\n*\n  `\\ ``RouteDirections``\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections\u003e`_ - If the\nquery completed successfully.\n\n*\n  ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in\nthis case.\n\nHere\u0027s a sample Batch Response with 1 *successful* and 1 *failed* result:\n\n.. code-block:: json\n\n   {\n       \"summary\": {\n           \"successfulRequests\": 1,\n           \"totalRequests\": 2\n       },\n       \"batchItems\": [\n           {\n               \"statusCode\": 200,\n               \"response\": {\n                   \"routes\": [\n                       {\n                           \"summary\": {\n                               \"lengthInMeters\": 1758,\n                               \"travelTimeInSeconds\": 387,\n                               \"trafficDelayInSeconds\": 0,\n                               \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                               \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                           },\n                           \"legs\": [\n                               {\n                                   \"summary\": {\n                                       \"lengthInMeters\": 1758,\n                                       \"travelTimeInSeconds\": 387,\n                                       \"trafficDelayInSeconds\": 0,\n                                       \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                       \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                   },\n                                   \"points\": [\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.34892\n                                       },\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.3485\n                                       },\n                                       {\n                                           \"latitude\": 47.62095,\n                                           \"longitude\": -122.3476\n                                       }\n                                   ]\n                               }\n                           ],\n                           \"sections\": [\n                               {\n                                   \"startPointIndex\": 0,\n                                   \"endPointIndex\": 40,\n                                   \"sectionType\": \"TRAVEL_MODE\",\n                                   \"travelMode\": \"bicycle\"\n                               }\n                           ]\n                       }\n                   ]\n               }\n           },\n           {\n               \"statusCode\": 400,\n               \"response\":\n               {\n                   \"error\":\n                   {\n                       \"code\": \"400 BadRequest\",\n                       \"message\": \"Bad request: one or more parameters were incorrectly\nspecified or are mutually exclusive.\"\n                   }\n               }\n           }\n       ]\n   }.\n\n:param route_directions_batch_queries: The list of route directions queries/requests to\n process. The list can contain  a max of 700 queries for async and 100 queries for sync version\n and must contain at least 1 query.\n:type route_directions_batch_queries: ~azure.maps.route.models.BatchRequest\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirectionsBatchResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirectionsBatchResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def request_route_directions_batch_sync(\n    self,\n    route_directions_batch_queries: \"models.BatchRequest\",\n    format: Union[str, \"models.JsonFormat\"] = \"json\",\n    **kwargs\n) -\u003e \"models.RouteDirectionsBatchResult\":\n",
                "doc": "\"\"\"**Route Directions Batch API**\n\n**Applies to**\\ : S1 pricing tier.\n\nThe Route Directions Batch API sends batches of queries to `Route Directions API\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections\u003e`_ using just a single API\ncall. You can call Route Directions Batch API to run either asynchronously (async) or\nsynchronously (sync). The async API allows caller to batch up to **700** queries and sync API\nup to **100** queries.\n\nSubmit Synchronous Batch Request\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Synchronous API is recommended for lightweight batch requests. When the service receives a\nrequest, it will respond as soon as the batch items are calculated and there will be no\npossibility to retrieve the results later. The Synchronous API will return a timeout error (a\n408 response) if the request takes longer than 60 seconds. The number of batch items is limited\nto **100** for this API.\n\n.. code-block::\n\n   POST https://atlas.microsoft.com/route/directions/batch/sync/json?api-\nversion=1.0\u0026subscription-key={subscription-key}\n\nBatch Response Model\n^^^^^^^^^^^^^^^^^^^^\n\nThe returned data content is similar for async and sync requests. When downloading the results\nof an async batch request, if the batch has finished processing, the response body contains the\nbatch response. This batch response contains a ``summary`` component that indicates the\n``totalRequests`` that were part of the original batch request and ``successfulRequests``\\ i.e.\nqueries which were executed successfully. The batch response also includes a ``batchItems``\narray which contains a response for each and every query in the batch request. The\n``batchItems`` will contain the results in the exact same order the original queries were sent\nin the batch request. Each item in ``batchItems`` contains ``statusCode`` and ``response``\nfields. Each ``response`` in ``batchItems`` is of one of the following types:\n\n\n*\n  `\\ ``RouteDirections``\n\u003chttps://docs.microsoft.com/rest/api/maps/route/getroutedirections#routedirections\u003e`_ - If the\nquery completed successfully.\n\n*\n  ``Error`` - If the query failed. The response will contain a ``code`` and a ``message`` in\nthis case.\n\nHere\u0027s a sample Batch Response with 1 *successful* and 1 *failed* result:\n\n.. code-block:: json\n\n   {\n       \"summary\": {\n           \"successfulRequests\": 1,\n           \"totalRequests\": 2\n       },\n       \"batchItems\": [\n           {\n               \"statusCode\": 200,\n               \"response\": {\n                   \"routes\": [\n                       {\n                           \"summary\": {\n                               \"lengthInMeters\": 1758,\n                               \"travelTimeInSeconds\": 387,\n                               \"trafficDelayInSeconds\": 0,\n                               \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                               \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                           },\n                           \"legs\": [\n                               {\n                                   \"summary\": {\n                                       \"lengthInMeters\": 1758,\n                                       \"travelTimeInSeconds\": 387,\n                                       \"trafficDelayInSeconds\": 0,\n                                       \"departureTime\": \"2018-07-17T00:49:56+00:00\",\n                                       \"arrivalTime\": \"2018-07-17T00:56:22+00:00\"\n                                   },\n                                   \"points\": [\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.34892\n                                       },\n                                       {\n                                           \"latitude\": 47.62094,\n                                           \"longitude\": -122.3485\n                                       },\n                                       {\n                                           \"latitude\": 47.62095,\n                                           \"longitude\": -122.3476\n                                       }\n                                   ]\n                               }\n                           ],\n                           \"sections\": [\n                               {\n                                   \"startPointIndex\": 0,\n                                   \"endPointIndex\": 40,\n                                   \"sectionType\": \"TRAVEL_MODE\",\n                                   \"travelMode\": \"bicycle\"\n                               }\n                           ]\n                       }\n                   ]\n               }\n           },\n           {\n               \"statusCode\": 400,\n               \"response\":\n               {\n                   \"error\":\n                   {\n                       \"code\": \"400 BadRequest\",\n                       \"message\": \"Bad request: one or more parameters were incorrectly\nspecified or are mutually exclusive.\"\n                   }\n               }\n           }\n       ]\n   }.\n\n:param route_directions_batch_queries: The list of route directions queries/requests to\n process. The list can contain  a max of 700 queries for async and 100 queries for sync version\n and must contain at least 1 query.\n:type route_directions_batch_queries: ~azure.maps.route.models.BatchRequest\n:param format: Desired format of the response. Only ``json`` format is supported.\n:type format: str or ~azure.maps.route.models.JsonFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: RouteDirectionsBatchResult, or the result of cls(response)\n:rtype: ~azure.maps.route.models.RouteDirectionsBatchResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "route_directions_batch_queries, format"
        }
    },
    "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"], \"azure.core.polling\": [\"LROPoller\", \"NoPolling\", \"PollingMethod\"], \"azure.core.polling.base_polling\": [\"LROBasePolling\"]}, \"stdlib\": {\"datetime\": [null], \"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"List\", \"Optional\", \"TypeVar\", \"Union\"]}}}",
    "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"], \"azure.core.polling\": [\"AsyncLROPoller\", \"AsyncNoPolling\", \"AsyncPollingMethod\"], \"azure.core.polling.async_base_polling\": [\"AsyncLROBasePolling\"]}, \"stdlib\": {\"datetime\": [null], \"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"List\", \"Optional\", \"TypeVar\", \"Union\"]}}}"
}