# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AlternativeRouteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Allow any alternative route to be returned irrespective of how it compares to the reference
    #: route in terms of optimality.
    ANY_ROUTE = "anyRoute"
    #: Return an alternative route only if it is better than the reference route according to the
    #: given planning criteria.
    BETTER_ROUTE = "betterRoute"

class ComputeTravelTimeFor(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Does not compute additional travel times.
    NONE = "none"
    #: Computes travel times for all types of traffic information and specifies all results in the
    #: fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and
    #: liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response.
    ALL = "all"

class DrivingSide(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Indicates left-hand vs. right-hand side driving at the point of the maneuver.
    """

    #: Left side.
    LEFT = "LEFT"
    #: Right side.
    RIGHT = "RIGHT"

class GeographicResourceLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Used to access an Azure Maps Creator resource in the United States.
    US = "us"
    #: Used to access an Azure Maps Creator resource in Europe.
    EU = "eu"

class Geography(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us
    and eu.
    """

    US = "us"
    EU = "eu"

class GeoJsonObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies the ``GeoJSON`` type. Must be one of the nine valid GeoJSON object types - Point,
    MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and
    FeatureCollection.
    """

    #: ``GeoJSON Point`` geometry.
    GEO_JSON_POINT = "Point"
    #: ``GeoJSON MultiPoint`` geometry.
    GEO_JSON_MULTI_POINT = "MultiPoint"
    #: ``GeoJSON LineString`` geometry.
    GEO_JSON_LINE_STRING = "LineString"
    #: ``GeoJSON MultiLineString`` geometry.
    GEO_JSON_MULTI_LINE_STRING = "MultiLineString"
    #: ``GeoJSON Polygon`` geometry.
    GEO_JSON_POLYGON = "Polygon"
    #: ``GeoJSON MultiPolygon`` geometry.
    GEO_JSON_MULTI_POLYGON = "MultiPolygon"
    #: ``GeoJSON GeometryCollection`` geometry.
    GEO_JSON_GEOMETRY_COLLECTION = "GeometryCollection"
    #: ``GeoJSON Feature`` object.
    GEO_JSON_FEATURE = "Feature"
    #: ``GeoJSON FeatureCollection`` object.
    GEO_JSON_FEATURE_COLLECTION = "FeatureCollection"

class GuidanceInstructionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of the instruction, e.g., turn or change of road form.
    """

    #: Turn.
    TURN = "TURN"
    #: Road Change.
    ROAD_CHANGE = "ROAD_CHANGE"
    #: Departure location.
    LOCATION_DEPARTURE = "LOCATION_DEPARTURE"
    #: Arrival location.
    LOCATION_ARRIVAL = "LOCATION_ARRIVAL"
    #: Direction information.
    DIRECTION_INFO = "DIRECTION_INFO"
    #: Way point location.
    LOCATION_WAYPOINT = "LOCATION_WAYPOINT"

class GuidanceManeuver(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A code identifying the maneuver.
    """

    #: You have arrived.
    ARRIVE = "ARRIVE"
    #: You have arrived. Your destination is on the left.
    ARRIVE_LEFT = "ARRIVE_LEFT"
    #: You have arrived. Your destination is on the right.
    ARRIVE_RIGHT = "ARRIVE_RIGHT"
    #: Leave.
    DEPART = "DEPART"
    #: Keep straight on.
    STRAIGHT = "STRAIGHT"
    #: Keep right.
    KEEP_RIGHT = "KEEP_RIGHT"
    #: Bear right.
    BEAR_RIGHT = "BEAR_RIGHT"
    #: Turn right.
    TURN_RIGHT = "TURN_RIGHT"
    #: Turn sharp right.
    SHARP_RIGHT = "SHARP_RIGHT"
    #: Keep left.
    KEEP_LEFT = "KEEP_LEFT"
    #: Bear left.
    BEAR_LEFT = "BEAR_LEFT"
    #: Turn left.
    TURN_LEFT = "TURN_LEFT"
    #: Turn sharp left.
    SHARP_LEFT = "SHARP_LEFT"
    #: Make a U-turn.
    MAKE_UTURN = "MAKE_UTURN"
    #: Take the motorway.
    ENTER_MOTORWAY = "ENTER_MOTORWAY"
    #: Take the freeway.
    ENTER_FREEWAY = "ENTER_FREEWAY"
    #: Take the highway.
    ENTER_HIGHWAY = "ENTER_HIGHWAY"
    #: Take the exit.
    TAKE_EXIT = "TAKE_EXIT"
    #: Take the left exit.
    MOTORWAY_EXIT_LEFT = "MOTORWAY_EXIT_LEFT"
    #: Take the right exit.
    MOTORWAY_EXIT_RIGHT = "MOTORWAY_EXIT_RIGHT"
    #: Take the ferry.
    TAKE_FERRY = "TAKE_FERRY"
    #: Cross the roundabout.
    ROUNDABOUT_CROSS = "ROUNDABOUT_CROSS"
    #: At the roundabout take the exit on the right.
    ROUNDABOUT_RIGHT = "ROUNDABOUT_RIGHT"
    #: At the roundabout take the exit on the left.
    ROUNDABOUT_LEFT = "ROUNDABOUT_LEFT"
    #: Go around the roundabout.
    ROUNDABOUT_BACK = "ROUNDABOUT_BACK"
    #: Try to make a U-turn.
    TRY_MAKE_UTURN = "TRY_MAKE_UTURN"
    #: Follow.
    FOLLOW = "FOLLOW"
    #: Switch to the parallel road.
    SWITCH_PARALLEL_ROAD = "SWITCH_PARALLEL_ROAD"
    #: Switch to the main road.
    SWITCH_MAIN_ROAD = "SWITCH_MAIN_ROAD"
    #: Take the ramp.
    ENTRANCE_RAMP = "ENTRANCE_RAMP"
    #: You have reached the waypoint. It is on the left.
    WAYPOINT_LEFT = "WAYPOINT_LEFT"
    #: You have reached the waypoint. It is on the right.
    WAYPOINT_RIGHT = "WAYPOINT_RIGHT"
    #: You have reached the waypoint.
    WAYPOINT_REACHED = "WAYPOINT_REACHED"

class HillinessDegree(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: low.
    LOW = "low"
    #: normal.
    NORMAL = "normal"
    #: high.
    HIGH = "high"

class JunctionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the junction where the maneuver takes place. For larger roundabouts, two separate
    instructions are generated for entering and leaving the roundabout.
    """

    #: regular.
    REGULAR = "REGULAR"
    #: roundabout.
    ROUNDABOUT = "ROUNDABOUT"
    #: bifurcation.
    BIFURCATION = "BIFURCATION"

class MagnitudeOfDelay(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The magnitude of delay caused by the incident. These values correspond to the values of the
    response field ty of the `Get Traffic Incident Detail API
    <https://docs.microsoft.com/rest/api/maps/traffic/gettrafficincidentdetail>`_.
    """

    #: Unknown.
    ZERO = "0"
    #: Minor.
    ONE = "1"
    #: Moderate.
    TWO = "2"
    #: Major.
    THREE = "3"
    #: Undefined, used for road closures and other indefinite delays.
    FOUR = "4"

class ResponseFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"

class RouteAvoidType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Avoids toll roads.
    TOLL_ROADS = "tollRoads"
    #: Avoids motorways.
    MOTORWAYS = "motorways"
    #: Avoids ferries.
    FERRIES = "ferries"
    #: Avoids unpaved roads.
    UNPAVED_ROADS = "unpavedRoads"
    #: Avoids routes that require the use of carpool (HOV/High Occupancy Vehicle) lanes.
    CARPOOLS = "carpools"
    #: Avoids using the same road multiple times. Most useful in conjunction with ``routeType``\
    #: =thrilling.
    ALREADY_USED_ROADS = "alreadyUsedRoads"
    #: Avoids border crossings in route calculation.
    BORDER_CROSSINGS = "borderCrossings"

class RouteInstructionsType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Returns raw instruction data without human-readable messages.
    CODED = "coded"
    #: Returns raw instructions data with human-readable messages in plain text.
    TEXT = "text"
    #: Returns raw instruction data with tagged human-readable messages to permit formatting. A
    #: human-readable message is built up from repeatable identified elements. These are tagged to
    #: allow client applications to format them correctly. The following message components are tagged
    #: when instructionsType=tagged: street, roadNumber, signpostText, exitNumber,
    #: roundaboutExitNumber.
    #: 
    #: Example of tagged 'Turn left' message:â€‹
    #: 
    #: .. code-block::
    #: 
    #:    Turn left onto <roadNumber>A4</roadNumber>/<roadNumber>E19</roadNumber>
    #:    towards <signpostText>Den Haag</signpostText>.
    TAGGED = "tagged"

class RouteRepresentation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Includes route geometry in the response.
    POLYLINE = "polyline"
    #: Summary as per polyline but excluding the point geometry elements for the routes in the
    #: response.
    SUMMARY_ONLY = "summaryOnly"
    #: Includes only the optimized waypoint indices but does not include the route geometry in the
    #: response.
    NONE = "none"

class RouteType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The fastest route.
    FASTEST = "fastest"
    #: The shortest route by distance.
    SHORTEST = "shortest"
    #: A route balanced by economy and speed.
    ECO = "eco"
    #: Includes interesting or challenging roads and uses as few motorways as possible. You can choose
    #: the level of turns included and also the degree of hilliness. See the hilliness and windingness
    #: parameters for how to set this. There is a limit of 900 km on routes planned with
    #: ``routeType``\ =thrilling.
    THRILLING = "thrilling"

class SectionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Get sections if the route includes car trains.
    CAR_TRAIN = "carTrain"
    #: Countries the route has parts in.
    COUNTRY = "country"
    #: Get sections if the route includes ferries.
    FERRY = "ferry"
    #: Get sections if the route includes motorways.
    MOTORWAY = "motorway"
    #: Get sections which are suited for pedestrians.
    PEDESTRIAN = "pedestrian"
    #: Get sections which require a toll to be payed.
    TOLL_ROAD = "tollRoad"
    #: Get sections which require a toll vignette to be present.
    TOLL_VIGNETTE = "tollVignette"
    #: Get sections which contain traffic information.
    TRAFFIC = "traffic"
    #: Get sections in relation to the request parameter ``travelMode``.
    TRAVEL_MODE = "travelMode"
    #: Get sections if the route includes tunnels.
    TUNNEL = "tunnel"

class TextFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"
    #: `The Extensible Markup Language <https://www.w3.org/TR/xml/>`_.
    XML = "xml"

class TravelMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: The returned routes are optimized for cars.
    CAR = "car"
    #: The returned routes are optimized for commercial vehicles, like for trucks.
    TRUCK = "truck"
    #: The returned routes are optimized for taxis. BETA functionality.
    TAXI = "taxi"
    #: The returned routes are optimized for buses, including the use of bus only lanes. BETA
    #: functionality.
    BUS = "bus"
    #: The returned routes are optimized for vans. BETA functionality.
    VAN = "van"
    #: The returned routes are optimized for motorcycles. BETA functionality.
    MOTORCYCLE = "motorcycle"
    #: The returned routes are optimized for bicycles, including use of bicycle lanes.
    BICYCLE = "bicycle"
    #: The returned routes are optimized for pedestrians, including the use of sidewalks.
    PEDESTRIAN = "pedestrian"

class VehicleEngineType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Internal combustion engine.
    COMBUSTION = "combustion"
    #: Electric engine.
    ELECTRIC = "electric"

class VehicleLoadType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Explosives.
    US_HAZMAT_CLASS1 = "USHazmatClass1"
    #: Compressed gas.
    US_HAZMAT_CLASS2 = "USHazmatClass2"
    #: Flammable liquids.
    US_HAZMAT_CLASS3 = "USHazmatClass3"
    #: Flammable solids.
    US_HAZMAT_CLASS4 = "USHazmatClass4"
    #: Oxidizers.
    US_HAZMAT_CLASS5 = "USHazmatClass5"
    #: Poisons.
    US_HAZMAT_CLASS6 = "USHazmatClass6"
    #: Radioactive.
    US_HAZMAT_CLASS7 = "USHazmatClass7"
    #: Corrosives.
    US_HAZMAT_CLASS8 = "USHazmatClass8"
    #: Miscellaneous.
    US_HAZMAT_CLASS9 = "USHazmatClass9"
    #: Explosives.
    OTHER_HAZMAT_EXPLOSIVE = "otherHazmatExplosive"
    #: Miscellaneous.
    OTHER_HAZMAT_GENERAL = "otherHazmatGeneral"
    #: Harmful to water.
    OTHER_HAZMAT_HARMFUL_TO_WATER = "otherHazmatHarmfulToWater"

class WindingnessLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: low.
    LOW = "low"
    #: normal.
    NORMAL = "normal"
    #: high.
    HIGH = "high"
