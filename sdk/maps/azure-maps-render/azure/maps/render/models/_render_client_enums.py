# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class GeographicResourceLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Used to access an Azure Maps Creator resource in the United States.
    US = "us"
    #: Used to access an Azure Maps Creator resource in Europe.
    EU = "eu"

class Geography(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us
    and eu.
    """

    US = "us"
    EU = "eu"

class IncludeText(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Include all textual data in response.
    YES = "yes"
    #: Exclude textual data from response. Only images and country names will be in response.
    NO = "no"

class MapImageryStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Satellite imagery.
    SATELLITE = "satellite"

class MapImageStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Azure Maps main style.
    MAIN = "main"
    #: Dark grey version of the Azure Maps main style.
    DARK = "dark"

class MapTileLayer(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Returns a tile containing all map features including polygons, borders, roads and labels.
    BASIC = "basic"
    #: Returns a tile containing borders, roads, and labels, and can be overlaid on other tiles (such
    #: as satellite imagery) to produce hybrid tiles.
    HYBRID = "hybrid"
    #: Returns a tile of just the map's label information.
    LABELS = "labels"
    #: Map canvas complete with shaded relief tiles. Zoom levels 0-6 (inclusive) are supported. Png is
    #: the only supported TileFormat and only available MapTileSize is 512.
    TERRA = "terra"

class MapTileSize(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return a 256 by 256 pixel tile.
    TWO_HUNDRED_FIFTY_SIX = "256"
    #: Return a 512 by 512 pixel tile.
    FIVE_HUNDRED_TWELVE = "512"

class MapTileStyle(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Azure Maps main style.
    MAIN = "main"
    #: Dark grey version of the Azure Maps main style. PNG is the only supported TileFormat.
    DARK = "dark"
    #: Azure Maps main style completed with shaded relief. Supported by Layer terra.
    SHADED_RELIEF = "shaded_relief"

class RasterTileFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: An image in the png format. Supports zoom levels 0 through 18.
    PNG = "png"

class StaticMapLayer(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Returns an image containing all map features including polygons, borders, roads and labels.
    BASIC = "basic"
    #: Returns an image containing borders, roads, and labels, and can be overlaid on other tiles
    #: (such as satellite imagery) to produce hybrid tiles.
    HYBRID = "hybrid"
    #: Returns an image of just the map's label information.
    LABELS = "labels"

class TextFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: `The JavaScript Object Notation Data Interchange Format
    #: <https://tools.ietf.org/html/rfc8259>`_.
    JSON = "json"
    #: `The Extensible Markup Language <https://www.w3.org/TR/xml/>`_.
    XML = "xml"

class TileFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: An image in the png format. Supports zoom levels 0 through 18.
    PNG = "png"
    #: Vector graphic in the pbf format. Supports zoom levels 0 through 22.
    PBF = "pbf"

class TilesetID(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: A base map is a standard map that displays roads, natural and artificial features along with
    #: the labels for those features in a vector tile.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: vector (pbf).
    MICROSOFT_BASE = "microsoft.base"
    #: Displays labels for roads, natural and artificial features in a vector tile.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: vector (pbf).
    MICROSOFT_BASE_LABELS = "microsoft.base.labels"
    #: Displays road, boundary and label data in a vector tile.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: vector (pbf).
    MICROSOFT_BASE_HYBRID = "microsoft.base.hybrid"
    #: Shaded relief and terra layers.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 6. Format: raster (png).
    MICROSOFT_TERRA_MAIN = "microsoft.terra.main"
    #: All layers with our main style.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: raster (png).
    MICROSOFT_BASE_ROAD = "microsoft.base.road"
    #: All layers with our dark grey style.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: raster (png).
    MICROSOFT_BASE_DARKGREY = "microsoft.base.darkgrey"
    #: Label data in our main style.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: raster (png).
    MICROSOFT_BASE_LABELS_ROAD = "microsoft.base.labels.road"
    #: Road, boundary and label data in our main style.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 22. Format: raster (png).
    MICROSOFT_BASE_HYBRID_ROAD = "microsoft.base.hybrid.road"
    #: A combination of satellite and aerial imagery. Only available in S1 pricing SKU.:code:`<br>`
    #: 
    #: Supports zoom levels 1 through 19. Format: raster (jpeg).
    MICROSOFT_IMAGERY = "microsoft.imagery"
    #: Weather radar tiles. Latest weather radar images including areas of rain, snow, ice and mixed
    #: conditions. Please see `coverage information <https://aka.ms/AzureMapsWeatherCoverage>`_ for
    #: Azure Maps Weather service.  To learn more about the Radar data, please see `Weather concepts
    #: <https://aka.ms/AzureMapsWeatherConcepts>`_.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 15. Format: raster (png).
    MICROSOFT_WEATHER_RADAR_MAIN = "microsoft.weather.radar.main"
    #: Weather infrared tiles. Latest Infrared Satellite images shows clouds by their temperature.
    #: Please see `coverage information <https://aka.ms/AzureMapsWeatherCoverage>`_ for Azure Maps
    #: Weather service. To learn more about the returned Satellite data, please see `Weather concepts
    #: <https://aka.ms/AzureMapsWeatherConcepts>`_.:code:`<br>`
    #: 
    #: Supports zoom levels 0 through 15. Format: raster (png).
    MICROSOFT_WEATHER_INFRARED_MAIN = "microsoft.weather.infrared.main"
    #: Digital Elevation Model tiles. The tiles are in the GeoTIFF format with a single 32-bit
    #: floating point band. The tiles cover the whole landmass of Earth. Some small islands (e.g.,
    #: atolls) might not be represented accurately.:code:`<br>`
    #: 
    #: 
    #: * The vertical unit for measurement of elevation height is meters. An elevation value of
    #: -32767.0 is used for points that have no data value, most often returned where there isn't
    #: landmass (i.e. water).:code:`<br>`
    #: * The horizontal reference datum is the World Geodetic System 1984 (WGS84-G1150) and the
    #: vertical reference datum is the Earth Gravitational Model 2008 (EGM2008).:code:`<br>`
    #: * Tiles are 258x258 pixel squares rather than the standard 256 x 256. This is done to allow for
    #: accurate interpolation of values at the tile edges. As such adjacent tiles overlap by 1 pixel
    #: along all edges.:code:`<br>`
    #: * Tile data comes from the `Airbus WorldDEM4Ortho product
    #: <https://www.intelligence-airbusds.com/worlddem-streaming/>`_. Urban areas are approximately
    #: leveled down to ground level. All other areas are represented by the object surface level
    #: (e.g., trees). :code:`<br>`
    #: 
    #: Supports zoom level 13 only. Format: raster (tiff).
    MICROSOFT_DEM = "microsoft.dem"

class TileSize(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Return a 256 by 256 pixel tile. Available for all tilesetIds except for
    #: 
    #: 
    #: * microsoft.terra.main.
    TWO_HUNDRED_FIFTY_SIX = "256"
    #: Return a 512 by 512 pixel tile.  Available for all tilesetIds except for
    #: 
    #: 
    #: * microsoft.weather.radar.main
    #: * microsoft.weather.infrared.main
    #: * microsoft.base.hybrid
    #: * microsoft.dem
    #: * microsoft.imagery.
    FIVE_HUNDRED_TWELVE = "512"
