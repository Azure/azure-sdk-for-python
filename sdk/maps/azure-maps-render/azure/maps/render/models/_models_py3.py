# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import List, Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class BoundingBox(msrest.serialization.Model):
    """Parameter group.

    All required parameters must be populated in order to send to Azure.

    :param south_west: Required. Minimum coordinates (south-west point) of bounding box in latitude
     longitude coordinate system. E.g. 52.41064,4.84228.
    :type south_west: list[float]
    :param north_east: Required. Maximum coordinates (north-east point) of bounding box in latitude
     longitude coordinate system. E.g. 52.41064,4.84228.
    :type north_east: list[float]
    """

    _validation = {
        'south_west': {'required': True},
        'north_east': {'required': True},
    }

    _attribute_map = {
        'south_west': {'key': 'southWest', 'type': '[float]'},
        'north_east': {'key': 'northEast', 'type': '[float]'},
    }

    def __init__(
        self,
        *,
        south_west: List[float],
        north_east: List[float],
        **kwargs
    ):
        super(BoundingBox, self).__init__(**kwargs)
        self.south_west = south_west
        self.north_east = north_east


class Copyright(msrest.serialization.Model):
    """This object is returned from a successful copyright request.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar format_version: Format Version property.
    :vartype format_version: str
    :ivar general_copyrights: General Copyrights array.
    :vartype general_copyrights: list[str]
    :ivar regions: Regions array.
    :vartype regions: list[~azure.maps.render.models.RegionCopyrights]
    """

    _validation = {
        'format_version': {'readonly': True},
        'general_copyrights': {'readonly': True},
        'regions': {'readonly': True},
    }

    _attribute_map = {
        'format_version': {'key': 'formatVersion', 'type': 'str'},
        'general_copyrights': {'key': 'generalCopyrights', 'type': '[str]'},
        'regions': {'key': 'regions', 'type': '[RegionCopyrights]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Copyright, self).__init__(**kwargs)
        self.format_version = None
        self.general_copyrights = None
        self.regions = None


class CopyrightCaption(msrest.serialization.Model):
    """This object is returned from a successful copyright call.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar format_version: Format Version property.
    :vartype format_version: str
    :ivar copyrights_caption: Copyrights Caption property.
    :vartype copyrights_caption: str
    """

    _validation = {
        'format_version': {'readonly': True},
        'copyrights_caption': {'readonly': True},
    }

    _attribute_map = {
        'format_version': {'key': 'formatVersion', 'type': 'str'},
        'copyrights_caption': {'key': 'copyrightsCaption', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CopyrightCaption, self).__init__(**kwargs)
        self.format_version = None
        self.copyrights_caption = None


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.maps.render.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.maps.render.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :param error: The error object.
    :type error: ~azure.maps.render.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorDetail"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class MapAttribution(msrest.serialization.Model):
    """Copyright attribution for the requested section of a tileset.

    :param copyrights: A list of copyright strings.
    :type copyrights: list[str]
    """

    _attribute_map = {
        'copyrights': {'key': 'copyrights', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        copyrights: Optional[List[str]] = None,
        **kwargs
    ):
        super(MapAttribution, self).__init__(**kwargs)
        self.copyrights = copyrights


class MapTileset(msrest.serialization.Model):
    """Metadata for a tileset in the TileJSON format.

    :param tilejson: Describes the version of the TileJSON spec that is implemented by this JSON
     object.
    :type tilejson: str
    :param name: A name describing the tileset. The name can contain any legal character.
     Implementations SHOULD NOT interpret the name as HTML.
    :type name: str
    :param description: Text description of the tileset. The description can contain any legal
     character. Implementations SHOULD NOT interpret the description as HTML.
    :type description: str
    :param version: A semver.org style version number for the tiles contained within the tileset.
     When changes across tiles are introduced, the minor version MUST change.
    :type version: str
    :param attribution: Copyright attribution to be displayed on the map. Implementations MAY
     decide to treat this as HTML or literal text. For security reasons, make absolutely sure that
     this field can't be abused as a vector for XSS or beacon tracking.
    :type attribution: str
    :param template: A mustache template to be used to format data from grids for interaction.
    :type template: str
    :param legend: A legend to be displayed with the map. Implementations MAY decide to treat this
     as HTML or literal text. For security reasons, make absolutely sure that this field can't be
     abused as a vector for XSS or beacon tracking.
    :type legend: str
    :param scheme: Default: "xyz". Either "xyz" or "tms". Influences the y direction of the tile
     coordinates. The global-mercator (aka Spherical Mercator) profile is assumed.
    :type scheme: str
    :param tiles: An array of tile endpoints. If multiple endpoints are specified, clients may use
     any combination of endpoints. All endpoints MUST return the same content for the same URL. The
     array MUST contain at least one endpoint.
    :type tiles: list[str]
    :param grids: An array of interactivity endpoints.
    :type grids: list[str]
    :param data: An array of data files in GeoJSON format.
    :type data: list[str]
    :param min_zoom: The minimum zoom level.
    :type min_zoom: int
    :param max_zoom: The maximum zoom level.
    :type max_zoom: int
    :param bounds: The maximum extent of available map tiles. Bounds MUST define an area covered by
     all zoom levels. The bounds are represented in WGS:84 latitude and longitude values, in the
     order left, bottom, right, top. Values may be integers or floating point numbers.
    :type bounds: list[float]
    :param center: The default location of the tileset in the form [longitude, latitude, zoom]. The
     zoom level MUST be between minzoom and maxzoom. Implementations can use this value to set the
     default location.
    :type center: list[float]
    """

    _validation = {
        'tilejson': {'pattern': r'\d+\.\d+\.\d+\w?[\w\d]*'},
        'version': {'pattern': r'\d+\.\d+\.\d+\w?[\w\d]*'},
        'min_zoom': {'maximum': 30, 'minimum': 0},
        'max_zoom': {'maximum': 30, 'minimum': 0},
    }

    _attribute_map = {
        'tilejson': {'key': 'tilejson', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'attribution': {'key': 'attribution', 'type': 'str'},
        'template': {'key': 'template', 'type': 'str'},
        'legend': {'key': 'legend', 'type': 'str'},
        'scheme': {'key': 'scheme', 'type': 'str'},
        'tiles': {'key': 'tiles', 'type': '[str]'},
        'grids': {'key': 'grids', 'type': '[str]'},
        'data': {'key': 'data', 'type': '[str]'},
        'min_zoom': {'key': 'minzoom', 'type': 'int'},
        'max_zoom': {'key': 'maxzoom', 'type': 'int'},
        'bounds': {'key': 'bounds', 'type': '[float]'},
        'center': {'key': 'center', 'type': '[float]'},
    }

    def __init__(
        self,
        *,
        tilejson: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        version: Optional[str] = None,
        attribution: Optional[str] = None,
        template: Optional[str] = None,
        legend: Optional[str] = None,
        scheme: Optional[str] = None,
        tiles: Optional[List[str]] = None,
        grids: Optional[List[str]] = None,
        data: Optional[List[str]] = None,
        min_zoom: Optional[int] = None,
        max_zoom: Optional[int] = None,
        bounds: Optional[List[float]] = None,
        center: Optional[List[float]] = None,
        **kwargs
    ):
        super(MapTileset, self).__init__(**kwargs)
        self.tilejson = tilejson
        self.name = name
        self.description = description
        self.version = version
        self.attribution = attribution
        self.template = template
        self.legend = legend
        self.scheme = scheme
        self.tiles = tiles
        self.grids = grids
        self.data = data
        self.min_zoom = min_zoom
        self.max_zoom = max_zoom
        self.bounds = bounds
        self.center = center


class RegionCopyrights(msrest.serialization.Model):
    """RegionCopyrights.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar copyrights: Copyrights array.
    :vartype copyrights: list[str]
    :ivar country: Country property.
    :vartype country: ~azure.maps.render.models.RegionCopyrightsCountry
    """

    _validation = {
        'copyrights': {'readonly': True},
        'country': {'readonly': True},
    }

    _attribute_map = {
        'copyrights': {'key': 'copyrights', 'type': '[str]'},
        'country': {'key': 'country', 'type': 'RegionCopyrightsCountry'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RegionCopyrights, self).__init__(**kwargs)
        self.copyrights = None
        self.country = None


class RegionCopyrightsCountry(msrest.serialization.Model):
    """Country property.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar iso3: ISO3 property.
    :vartype iso3: str
    :ivar label: Label property.
    :vartype label: str
    """

    _validation = {
        'iso3': {'readonly': True},
        'label': {'readonly': True},
    }

    _attribute_map = {
        'iso3': {'key': 'ISO3', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RegionCopyrightsCountry, self).__init__(**kwargs)
        self.iso3 = None
        self.label = None


class TileIndex(msrest.serialization.Model):
    """Parameter group.

    All required parameters must be populated in order to send to Azure.

    :param z: Required. Zoom level for the desired tile.
    
     Please see `Zoom Levels and Tile Grid <https://docs.microsoft.com/en-us/azure/location-based-
     services/zoom-levels-and-tile-grid>`_ for details.
    :type z: int
    :param x: Required. X coordinate of the tile on zoom grid. Value must be in the range [0,
     2:code:`<sup>`zoom`</sup>` -1].
    
     Please see `Zoom Levels and Tile Grid <https://docs.microsoft.com/azure/location-based-
     services/zoom-levels-and-tile-grid>`_ for details.
    :type x: int
    :param y: Required. Y coordinate of the tile on zoom grid. Value must be in the range [0,
     2:code:`<sup>`zoom`</sup>` -1].
    
     Please see `Zoom Levels and Tile Grid <https://docs.microsoft.com/azure/location-based-
     services/zoom-levels-and-tile-grid>`_ for details.
    :type y: int
    """

    _validation = {
        'z': {'required': True},
        'x': {'required': True},
        'y': {'required': True},
    }

    _attribute_map = {
        'z': {'key': 'z', 'type': 'int'},
        'x': {'key': 'x', 'type': 'int'},
        'y': {'key': 'y', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        z: int,
        x: int,
        y: int,
        **kwargs
    ):
        super(TileIndex, self).__init__(**kwargs)
        self.z = z
        self.x = x
        self.y = y
