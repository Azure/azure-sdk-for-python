{
    "chosen_version": "2.1",
    "total_api_version_list": ["2.1"],
    "client": {
        "name": "RenderClient",
        "filename": "_render_client",
        "description": "Azure Maps Render REST APIs.",
        "base_url": "\u0027https://atlas.microsoft.com\u0027",
        "custom_base_url": null,
        "azure_arm": false,
        "has_lro_operations": false,
        "client_side_validation": false
    },
    "global_parameters": {
        "sync": {
            "credential": {
                "signature": "credential,  # type: \"TokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials.TokenCredential",
                "required": true
            },
            "client_id": {
                "signature": "client_id=None,  # type: Optional[str]",
                "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles \u003chttps://aka.ms/amauthdetails\u003e`_ for guidance.",
                "docstring_type": "str",
                "required": false
            }
        },
        "async": {
            "credential": {
                "signature": "credential,  # type: \"AsyncTokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials_async.AsyncTokenCredential",
                "required": true
            },
            "client_id": {
                "signature": "client_id=None,  # type: Optional[str]",
                "description": "Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following `articles \u003chttps://aka.ms/amauthdetails\u003e`_ for guidance.",
                "docstring_type": "str",
                "required": false
            }
        },
        "constant": {
        },
        "call": "credential, client_id"
    },
    "config": {
        "credential": true,
        "credential_scopes": ["https://atlas.microsoft.com/.default"],
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true,
        "credential_key_header_name": null
    },
    "operation_groups": {
    },
    "operation_mixins": {
        "get_map_tile_v2" : {
            "sync": {
                "signature": "def get_map_tile_v2(\n    self,\n    tileset_id,  # type: Union[str, \"models.TilesetID\"]\n    tile_index,  # type: \"models.TileIndex\"\n    time_stamp=None,  # type: Optional[datetime.datetime]\n    tile_size=None,  # type: Optional[Union[str, \"models.MapTileSize\"]]\n    language=None,  # type: Optional[str]\n    localized_map_view=None,  # type: Optional[Union[str, \"models.LocalizedMapView\"]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe Get Map Tiles API allows users to request map tiles in vector or raster formats typically\nto be integrated  into a map control or SDK. Some example tiles that can be requested are Azure\nMaps road tiles, real-time  Weather Radar tiles or the map tiles created using `Azure Maps\nCreator \u003chttps://aka.ms/amcreator\u003e`_. By default,  Azure Maps uses vector tiles for its web map\ncontrol (Web SDK) and Android SDK.\n\n:param tileset_id: A tileset is a collection of raster or vector data broken up into a uniform\n grid of square tiles at preset  zoom levels. Every tileset has a **tilesetId** to use when\n making requests. The **tilesetId** for tilesets created using `Azure Maps Creator\n \u003chttps://aka.ms/amcreator\u003e`_ are generated through the  `Tileset Create API\n \u003chttps://docs.microsoft.com/en-us/rest/api/maps/tileset\u003e`_. The ready-to-use tilesets supplied\n by Azure Maps are listed below. For example, microsoft.base.\n:type tileset_id: str or ~azure.maps.render.models.TilesetID\n:param tile_index: Parameter group.\n:type tile_index: ~azure.maps.render.models.TileIndex\n:param time_stamp: The desired date and time of the requested tile. This parameter must be\n specified in the standard date-time format (e.g. 2019-11-14T16:03:00-08:00), as defined by `ISO\n 8601 \u003chttps://en.wikipedia.org/wiki/ISO_8601\u003e`_. This parameter is only supported when\n tilesetId parameter is set to one of the values below.\n\n\n * microsoft.weather.infrared.main: We provide tiles up to 3 hours in the past. Tiles are\n available in 10-minute intervals. We round the timeStamp value to the nearest 10-minute time\n frame.\n * microsoft.weather.radar.main: We provide tiles up to 1.5 hours in the past and up to 2 hours\n in the future. Tiles are available in 5-minute intervals. We round the timeStamp value to the\n nearest 5-minute time frame.\n:type time_stamp: ~datetime.datetime\n:param tile_size: The size of the returned map tile in pixels.\n:type tile_size: str or ~azure.maps.render.models.MapTileSize\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:param localized_map_view: The View parameter (also called the \"user region\" parameter) allows\n you to show the correct maps for a certain country/region for geopolitically disputed regions.\n Different countries have different views of such regions, and the View parameter allows your\n application to comply with the view required by the country your application will be serving.\n By default, the View parameter is set to \u201cUnified\u201d even if you haven\u2019t defined it in  the\n request. It is your responsibility to determine the location of your users, and then set the\n View parameter correctly for that location. Alternatively, you have the option to set\n \u2018View=Auto\u2019, which will return the map data based on the IP  address of the request. The View\n parameter in Azure Maps must be used in compliance with applicable laws, including those\n regarding mapping, of the country where maps, images and other data and third party content\n that you are authorized to  access via Azure Maps is made available. Example: view=IN.\n\n Please refer to `Supported Views \u003chttps://aka.ms/AzureMapsLocalizationViews\u003e`_ for details and\n to see the available Views.\n:type localized_map_view: str or ~azure.maps.render.models.LocalizedMapView\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IO, or the result of cls(response)\n:rtype: IO\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_map_tile_v2(\n    self,\n    tileset_id: Union[str, \"models.TilesetID\"],\n    tile_index: \"models.TileIndex\",\n    time_stamp: Optional[datetime.datetime] = None,\n    tile_size: Optional[Union[str, \"models.MapTileSize\"]] = None,\n    language: Optional[str] = None,\n    localized_map_view: Optional[Union[str, \"models.LocalizedMapView\"]] = None,\n    **kwargs\n) -\u003e IO:\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe Get Map Tiles API allows users to request map tiles in vector or raster formats typically\nto be integrated  into a map control or SDK. Some example tiles that can be requested are Azure\nMaps road tiles, real-time  Weather Radar tiles or the map tiles created using `Azure Maps\nCreator \u003chttps://aka.ms/amcreator\u003e`_. By default,  Azure Maps uses vector tiles for its web map\ncontrol (Web SDK) and Android SDK.\n\n:param tileset_id: A tileset is a collection of raster or vector data broken up into a uniform\n grid of square tiles at preset  zoom levels. Every tileset has a **tilesetId** to use when\n making requests. The **tilesetId** for tilesets created using `Azure Maps Creator\n \u003chttps://aka.ms/amcreator\u003e`_ are generated through the  `Tileset Create API\n \u003chttps://docs.microsoft.com/en-us/rest/api/maps/tileset\u003e`_. The ready-to-use tilesets supplied\n by Azure Maps are listed below. For example, microsoft.base.\n:type tileset_id: str or ~azure.maps.render.models.TilesetID\n:param tile_index: Parameter group.\n:type tile_index: ~azure.maps.render.models.TileIndex\n:param time_stamp: The desired date and time of the requested tile. This parameter must be\n specified in the standard date-time format (e.g. 2019-11-14T16:03:00-08:00), as defined by `ISO\n 8601 \u003chttps://en.wikipedia.org/wiki/ISO_8601\u003e`_. This parameter is only supported when\n tilesetId parameter is set to one of the values below.\n\n\n * microsoft.weather.infrared.main: We provide tiles up to 3 hours in the past. Tiles are\n available in 10-minute intervals. We round the timeStamp value to the nearest 10-minute time\n frame.\n * microsoft.weather.radar.main: We provide tiles up to 1.5 hours in the past and up to 2 hours\n in the future. Tiles are available in 5-minute intervals. We round the timeStamp value to the\n nearest 5-minute time frame.\n:type time_stamp: ~datetime.datetime\n:param tile_size: The size of the returned map tile in pixels.\n:type tile_size: str or ~azure.maps.render.models.MapTileSize\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:param localized_map_view: The View parameter (also called the \"user region\" parameter) allows\n you to show the correct maps for a certain country/region for geopolitically disputed regions.\n Different countries have different views of such regions, and the View parameter allows your\n application to comply with the view required by the country your application will be serving.\n By default, the View parameter is set to \u201cUnified\u201d even if you haven\u2019t defined it in  the\n request. It is your responsibility to determine the location of your users, and then set the\n View parameter correctly for that location. Alternatively, you have the option to set\n \u2018View=Auto\u2019, which will return the map data based on the IP  address of the request. The View\n parameter in Azure Maps must be used in compliance with applicable laws, including those\n regarding mapping, of the country where maps, images and other data and third party content\n that you are authorized to  access via Azure Maps is made available. Example: view=IN.\n\n Please refer to `Supported Views \u003chttps://aka.ms/AzureMapsLocalizationViews\u003e`_ for details and\n to see the available Views.\n:type localized_map_view: str or ~azure.maps.render.models.LocalizedMapView\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IO, or the result of cls(response)\n:rtype: IO\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "tileset_id, tile_index, time_stamp, tile_size, language, localized_map_view"
        },
        "get_map_tileset" : {
            "sync": {
                "signature": "def get_map_tileset(\n    self,\n    tileset_id,  # type: Union[str, \"models.TilesetID\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe Get Map Tileset API allows users to request metadata for a tileset.\n\n:param tileset_id: A tileset is a collection of raster or vector data broken up into a uniform\n grid of square tiles at preset  zoom levels. Every tileset has a **tilesetId** to use when\n making requests. The **tilesetId** for tilesets created using `Azure Maps Creator\n \u003chttps://aka.ms/amcreator\u003e`_ are generated through the  `Tileset Create API\n \u003chttps://docs.microsoft.com/en-us/rest/api/maps/tileset\u003e`_. The ready-to-use tilesets supplied\n by Azure Maps are listed below. For example, microsoft.base.\n:type tileset_id: str or ~azure.maps.render.models.TilesetID\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: MapTileset, or the result of cls(response)\n:rtype: ~azure.maps.render.models.MapTileset\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_map_tileset(\n    self,\n    tileset_id: Union[str, \"models.TilesetID\"],\n    **kwargs\n) -\u003e \"models.MapTileset\":\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe Get Map Tileset API allows users to request metadata for a tileset.\n\n:param tileset_id: A tileset is a collection of raster or vector data broken up into a uniform\n grid of square tiles at preset  zoom levels. Every tileset has a **tilesetId** to use when\n making requests. The **tilesetId** for tilesets created using `Azure Maps Creator\n \u003chttps://aka.ms/amcreator\u003e`_ are generated through the  `Tileset Create API\n \u003chttps://docs.microsoft.com/en-us/rest/api/maps/tileset\u003e`_. The ready-to-use tilesets supplied\n by Azure Maps are listed below. For example, microsoft.base.\n:type tileset_id: str or ~azure.maps.render.models.TilesetID\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: MapTileset, or the result of cls(response)\n:rtype: ~azure.maps.render.models.MapTileset\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "tileset_id"
        },
        "get_map_attribution" : {
            "sync": {
                "signature": "def get_map_attribution(\n    self,\n    tileset_id,  # type: Union[str, \"models.TilesetID\"]\n    zoom,  # type: int\n    bounds,  # type: List[float]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe Get Map Attribution API allows users to request map copyright attribution information for a\nsection of a tileset.\n\n:param tileset_id: A tileset is a collection of raster or vector data broken up into a uniform\n grid of square tiles at preset  zoom levels. Every tileset has a **tilesetId** to use when\n making requests. The **tilesetId** for tilesets created using `Azure Maps Creator\n \u003chttps://aka.ms/amcreator\u003e`_ are generated through the  `Tileset Create API\n \u003chttps://docs.microsoft.com/en-us/rest/api/maps/tileset\u003e`_. The ready-to-use tilesets supplied\n by Azure Maps are listed below. For example, microsoft.base.\n:type tileset_id: str or ~azure.maps.render.models.TilesetID\n:param zoom: Zoom level for the desired map attribution.\n:type zoom: int\n:param bounds: The string that represents the rectangular area of a bounding box. The bounds\n parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of\n the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The\n string is presented in the following  format: ``[SouthwestCorner_Longitude,\n SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]``.\n:type bounds: list[float]\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: MapAttribution, or the result of cls(response)\n:rtype: ~azure.maps.render.models.MapAttribution\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_map_attribution(\n    self,\n    tileset_id: Union[str, \"models.TilesetID\"],\n    zoom: int,\n    bounds: List[float],\n    **kwargs\n) -\u003e \"models.MapAttribution\":\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe Get Map Attribution API allows users to request map copyright attribution information for a\nsection of a tileset.\n\n:param tileset_id: A tileset is a collection of raster or vector data broken up into a uniform\n grid of square tiles at preset  zoom levels. Every tileset has a **tilesetId** to use when\n making requests. The **tilesetId** for tilesets created using `Azure Maps Creator\n \u003chttps://aka.ms/amcreator\u003e`_ are generated through the  `Tileset Create API\n \u003chttps://docs.microsoft.com/en-us/rest/api/maps/tileset\u003e`_. The ready-to-use tilesets supplied\n by Azure Maps are listed below. For example, microsoft.base.\n:type tileset_id: str or ~azure.maps.render.models.TilesetID\n:param zoom: Zoom level for the desired map attribution.\n:type zoom: int\n:param bounds: The string that represents the rectangular area of a bounding box. The bounds\n parameter is defined by the 4 bounding box coordinates, with WGS84 longitude and latitude of\n the southwest corner followed by  WGS84 longitude and latitude of the northeast corner. The\n string is presented in the following  format: ``[SouthwestCorner_Longitude,\n SouthwestCorner_Latitude, NortheastCorner_Longitude,  NortheastCorner_Latitude]``.\n:type bounds: list[float]\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: MapAttribution, or the result of cls(response)\n:rtype: ~azure.maps.render.models.MapAttribution\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "tileset_id, zoom, bounds"
        },
        "get_map_state_tile" : {
            "sync": {
                "signature": "def get_map_state_tile(\n    self,\n    stateset_id,  # type: str\n    tile_index,  # type: \"models.TileIndex\"\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nFetches state tiles in vector format typically to be integrated into indoor maps module of map\ncontrol or SDK. The map control will call this API after user turns on dynamic styling (see\n`Zoom Levels and Tile Grid \u003chttps://docs.microsoft.com/en-us/azure/location-based-\nservices/zoom-levels-and-tile-grid\u003e`_\\ ).\n\n:param stateset_id: The stateset id.\n:type stateset_id: str\n:param tile_index: Parameter group.\n:type tile_index: ~azure.maps.render.models.TileIndex\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IO, or the result of cls(response)\n:rtype: IO\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_map_state_tile(\n    self,\n    stateset_id: str,\n    tile_index: \"models.TileIndex\",\n    **kwargs\n) -\u003e IO:\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nFetches state tiles in vector format typically to be integrated into indoor maps module of map\ncontrol or SDK. The map control will call this API after user turns on dynamic styling (see\n`Zoom Levels and Tile Grid \u003chttps://docs.microsoft.com/en-us/azure/location-based-\nservices/zoom-levels-and-tile-grid\u003e`_\\ ).\n\n:param stateset_id: The stateset id.\n:type stateset_id: str\n:param tile_index: Parameter group.\n:type tile_index: ~azure.maps.render.models.TileIndex\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IO, or the result of cls(response)\n:rtype: IO\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "stateset_id, tile_index"
        },
        "get_copyright_caption" : {
            "sync": {
                "signature": "def get_copyright_caption(\n    self,\n    format=\"json\",  # type: Union[str, \"models.ResponseFormat\"]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nCopyrights API is designed to serve copyright information for Render Tile\nservice. In addition to basic copyright for the whole map, API is serving\nspecific groups of copyrights for some countries.\n\nAs an alternative to copyrights for map request, one can receive captions\nfor displaying the map provider information on the map.\n\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.render.models.ResponseFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CopyrightCaption, or the result of cls(response)\n:rtype: ~azure.maps.render.models.CopyrightCaption\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_copyright_caption(\n    self,\n    format: Union[str, \"models.ResponseFormat\"] = \"json\",\n    **kwargs\n) -\u003e \"models.CopyrightCaption\":\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nCopyrights API is designed to serve copyright information for Render Tile\nservice. In addition to basic copyright for the whole map, API is serving\nspecific groups of copyrights for some countries.\n\nAs an alternative to copyrights for map request, one can receive captions\nfor displaying the map provider information on the map.\n\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.render.models.ResponseFormat\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: CopyrightCaption, or the result of cls(response)\n:rtype: ~azure.maps.render.models.CopyrightCaption\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "format"
        },
        "get_map_static_image" : {
            "sync": {
                "signature": "def get_map_static_image(\n    self,\n    format=\"png\",  # type: Union[str, \"models.RasterTileFormat\"]\n    layer=None,  # type: Optional[Union[str, \"models.StaticMapLayer\"]]\n    style=None,  # type: Optional[Union[str, \"models.MapImageStyle\"]]\n    zoom=None,  # type: Optional[int]\n    center=None,  # type: Optional[List[float]]\n    bounding_box=None,  # type: Optional[List[float]]\n    height=None,  # type: Optional[int]\n    width=None,  # type: Optional[int]\n    language=None,  # type: Optional[str]\n    localized_map_view=None,  # type: Optional[Union[str, \"models.LocalizedMapView\"]]\n    pins=None,  # type: Optional[List[str]]\n    path=None,  # type: Optional[List[str]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe static image service renders a user-defined, rectangular image containing a map section\nusing a zoom level from 0 to 20. The static image service renders a user-defined, rectangular\nimage containing a map section using a zoom level from 0 to 20. The supported resolution range\nfor the map image is from 1x1 to 8192x8192. If you are deciding when to use the static image\nservice over the map tile service, you may want to consider how you would like to interact with\nthe rendered map. If the map contents will be relatively unchanging, a static map is a good\nchoice. If you want to support a lot of zooming, panning and changing of the map content, the\nmap tile service would be a better choice.\n\nService also provides Image Composition functionality to get a static image back with\nadditional data like; pushpins and geometry overlays with following S0 and S1 capabilities.\n\nIn S0 you can:\n\n\n* Render up to 5 pushpins specified in the request\n* Provide one custom image for the pins referenced in the request\n* Add labels to the pushpins\n\nIn S1 you can:\n\n\n* Render pushpins through `Azure Maps Data Service \u003chttps://aka.ms/AzureMapsMapDataService\u003e`_\n* Specify multiple pushpin styles\n* Render circle, polyline and polygon geometry types.\n* Render of supported GeoJSON geometry types uploaded through `Azure Maps Data Service\n\u003chttps://aka.ms/AzureMapsMapDataService\u003e`_\n\nPlease see `How-to-Guide \u003chttps://aka.ms/AzureMapsHowToGuideImageCompositor\u003e`_ for detailed\nexamples.\n\n*Note* : Either **center** or **bbox** parameter must be supplied to the\nAPI.\n:code:`\u003cbr\u003e`:code:`\u003cbr\u003e`\nThe supported Lat and Lon ranges when using the **bbox** parameter, are as follows:\n:code:`\u003cbr\u003e`:code:`\u003cbr\u003e`\n\n.. list-table::\n   :header-rows: 1\n\n   * - Zoom Level\n     - Max Lon Range\n     - Max Lat Range\n   * - 0\n     - 360.0\n     - 170.0\n   * - 1\n     - 360.0\n     - 170.0\n   * - 2\n     - 360.0\n     - 170.0\n   * - 3\n     - 360.0\n     - 170.0\n   * - 4\n     - 360.0\n     - 170.0\n   * - 5\n     - 180.0\n     - 85.0\n   * - 6\n     - 90.0\n     - 42.5\n   * - 7\n     - 45.0\n     - 21.25\n   * - 8\n     - 22.5\n     - 10.625\n   * - 9\n     - 11.25\n     - 5.3125\n   * - 10\n     - 5.625\n     - 2.62625\n   * - 11\n     - 2.8125\n     - 1.328125\n   * - 12\n     - 1.40625\n     - 0.6640625\n   * - 13\n     - 0.703125\n     - 0.33203125\n   * - 14\n     - 0.3515625\n     - 0.166015625\n   * - 15\n     - 0.17578125\n     - 0.0830078125\n   * - 16\n     - 0.087890625\n     - 0.0415039063\n   * - 17\n     - 0.0439453125\n     - 0.0207519531\n   * - 18\n     - 0.0219726563\n     - 0.0103759766\n   * - 19\n     - 0.0109863281\n     - 0.0051879883\n   * - 20\n     - 0.0054931641\n     - 0.0025939941.\n\n:param format: Desired format of the response. Possible value: png.\n:type format: str or ~azure.maps.render.models.RasterTileFormat\n:param layer: Map layer requested. If layer is set to labels or hybrid, the format should be\n png.\n:type layer: str or ~azure.maps.render.models.StaticMapLayer\n:param style: Map style to be returned. Possible values are main and dark.\n:type style: str or ~azure.maps.render.models.MapImageStyle\n:param zoom: Desired zoom level of the map. Zoom value must be in the range: 0-20 (inclusive).\n Default value is 12.:code:`\u003cbr\u003e`:code:`\u003cbr\u003e`Please see `Zoom Levels and Tile Grid\n \u003chttps://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid\u003e`_\n for details.\n:type zoom: int\n:param center: Coordinates of the center point. Format: \u0027lon,lat\u0027. Projection used\n\n\n * EPSG:3857. Longitude range: -180 to 180. Latitude range: -85 to 85.\n\n Note: Either center or bbox are required parameters. They are\n mutually exclusive.\n:type center: list[float]\n:param bounding_box: Bounding box. Projection used - EPSG:3857. Format : \u0027minLon, minLat,\n maxLon, maxLat\u0027.\n\n Note: Either bbox or center are required\n parameters. They are mutually exclusive. It shouldn\u2019t be used with\n height or width.\n\n The maximum allowed ranges for Lat and Lon are defined for each zoom level\n in the table at the top of this page.\n:type bounding_box: list[float]\n:param height: Height of the resulting image in pixels. Range is 1 to 8192. Default\n is 512. It shouldn\u2019t be used with bbox.\n:type height: int\n:param width: Width of the resulting image in pixels. Range is 1 to 8192. Default is 512. It\n shouldn\u2019t be used with bbox.\n:type width: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:param localized_map_view: The View parameter (also called the \"user region\" parameter) allows\n you to show the correct maps for a certain country/region for geopolitically disputed regions.\n Different countries have different views of such regions, and the View parameter allows your\n application to comply with the view required by the country your application will be serving.\n By default, the View parameter is set to \u201cUnified\u201d even if you haven\u2019t defined it in  the\n request. It is your responsibility to determine the location of your users, and then set the\n View parameter correctly for that location. Alternatively, you have the option to set\n \u2018View=Auto\u2019, which will return the map data based on the IP  address of the request. The View\n parameter in Azure Maps must be used in compliance with applicable laws, including those\n regarding mapping, of the country where maps, images and other data and third party content\n that you are authorized to  access via Azure Maps is made available. Example: view=IN.\n\n Please refer to `Supported Views \u003chttps://aka.ms/AzureMapsLocalizationViews\u003e`_ for details and\n to see the available Views.\n:type localized_map_view: str or ~azure.maps.render.models.LocalizedMapView\n:param pins: Pushpin style and instances. Use this parameter to optionally add pushpins to the\n image.\n The pushpin style describes the appearance of the pushpins, and the instances specify\n the coordinates of the pushpins and optional labels for each pin. (Be sure to properly URL-\n encode values of this\n parameter since it will contain reserved characters such as pipes and punctuation.)\n\n The Azure Maps account S0 SKU only supports a single instance of the pins parameter. Other\n SKUs\n allow multiple instances of the pins parameter to specify multiple pin styles.\n\n To render a pushpin at latitude 45\u00b0N and longitude 122\u00b0W using the default built-in pushpin\n style, add the\n querystring parameter\n\n ``pins=default||-122 45``\n\n Note that the longitude comes before the latitude.\n After URL encoding this will look like\n\n ``pins=default%7C%7C-122+45``\n\n All of the examples here show the pins\n parameter without URL encoding, for clarity.\n\n To render a pin at multiple locations, separate each location with a pipe character. For\n example, use\n\n ``pins=default||-122 45|-119.5 43.2|-121.67 47.12``\n\n The S0 Azure Maps account SKU only allows five pushpins. Other account SKUs do not have this\n limitation.\n\n Style Modifiers\n ^^^^^^^^^^^^^^^\n\n You can modify the appearance of the pins by adding style modifiers. These are added after the\n style but before\n the locations and labels. Style modifiers each have a two-letter name. These abbreviated names\n are used to help\n reduce the length of the URL.\n\n To change the color of the pushpin, use the \u0027co\u0027 style modifier and specify the color using\n the HTML/CSS RGB color\n format which is a six-digit hexadecimal number (the three-digit form is not supported). For\n example, to use\n a deep pink color which you would specify as #FF1493 in CSS, use\n\n ``pins=default|coFF1493||-122 45``\n\n Pushpin Labels\n ^^^^^^^^^^^^^^\n\n To add a label to the pins, put the label in single quotes just before the coordinates. For\n example, to label\n three pins with the values \u00271\u0027, \u00272\u0027, and \u00273\u0027, use\n\n ``pins=default||\u00271\u0027-122 45|\u00272\u0027-119.5 43.2|\u00273\u0027-121.67 47.12``\n\n There is a built in pushpin style called \u0027none\u0027 that does not display a pushpin image. You can\n use this if\n you want to display labels without any pin image. For example,\n\n ``pins=none||\u0027A\u0027-122 45|\u0027B\u0027-119.5 43.2``\n\n To change the color of the pushpin labels, use the \u0027lc\u0027 label color style modifier. For\n example, to use pink\n pushpins with black labels, use\n\n ``pins=default|coFF1493|lc000000||-122 45``\n\n To change the size of the labels, use the \u0027ls\u0027 label size style modifier. The label size\n represents the approximate\n height of the label text in pixels. For example, to increase the label size to 12, use\n\n ``pins=default|ls12||\u0027A\u0027-122 45|\u0027B\u0027-119 43``\n\n The labels are centered at the pushpin \u0027label anchor.\u0027 The anchor location is predefined for\n built-in pushpins and\n is at the top center of custom pushpins (see below). To override the label anchor, using the\n \u0027la\u0027 style modifier\n and provide X and Y pixel coordinates for the anchor. These coordinates are relative to the\n top left corner of the\n pushpin image. Positive X values move the anchor to the right, and positive Y values move the\n anchor down. For example,\n to position the label anchor 10 pixels right and 4 pixels above the top left corner of the\n pushpin image,\n use\n\n ``pins=default|la10 -4||\u0027A\u0027-122 45|\u0027B\u0027-119 43``\n\n Custom Pushpins\n ^^^^^^^^^^^^^^^\n\n To use a custom pushpin image, use the word \u0027custom\u0027 as the pin style name, and then specify a\n URL after the\n location and label information. Use two pipe characters to indicate that you\u0027re done\n specifying locations and are\n starting the URL. For example,\n\n ``pins=custom||-122 45||http://contoso.com/pushpins/red.png``\n\n After URL encoding, this would look like\n\n ``pins=custom%7C%7C-122+45%7C%7Chttp%3A%2F%2Fcontoso.com%2Fpushpins%2Fred.png``\n\n By default, custom pushpin images are drawn centered at the pin coordinates. This usually\n isn\u0027t ideal as it obscures\n the location that you\u0027re trying to highlight. To override the anchor location of the pin\n image, use the \u0027an\u0027\n style modifier. This uses the same format as the \u0027la\u0027 label anchor style modifier. For\n example, if your custom\n pin image has the tip of the pin at the top left corner of the image, you can set the anchor\n to that spot by\n using\n\n ``pins=custom|an0 0||-122 45||http://contoso.com/pushpins/red.png``\n\n Note: If you use the \u0027co\u0027 color modifier with a custom pushpin image, the specified color will\n replace the RGB\n channels of the pixels in the image but will leave the alpha (opacity) channel unchanged. This\n would usually\n only be done with a solid-color custom image.\n\n Getting Pushpins from Azure Maps Data Storage\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n For all Azure Maps account SKUs other than S0,\n the pushpin location information can be obtained from Azure Maps Data Storage. After uploading\n a GeoJSON document containing pin locations, the Data Storage service returns a Unique Data ID\n (UDID) that you can use\n to reference the data in the pins parameter.\n\n To use the point geometry from an uploaded GeoJSON document as the pin locations, specify the\n UDID in the locations\n section of the pins parameter. For example,\n\n ``pins=default||udid-29dc105a-dee7-409f-a3f9-22b066ae4713``\n\n Note that\n only point and multipoint geometry, points and multipoints from geometry collections, and\n point geometry from features\n will be used. Linestring and polygon geometry will be ignored. If the point comes from a\n feature and the feature\n has a string property called \"label\", the value of that property will be used as the label for\n the pin.\n\n You can mix pin locations from Data Storage and pin locations specified in the pins parameter.\n Any of the pipe-delimited\n pin locations can be a longitude and latitude or a UDID. For example,\n\n ``pins=default||-122 45|udid-29dc105a-dee7-409f-a3f9-22b066ae4713|-119 43``\n\n Scale, Rotation, and Opacity\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n You can make pushpins and their labels larger or smaller by using the \u0027sc\u0027 scale style\n modifier. This is a\n value greater than zero. A value of 1 is the standard scale. Values larger than 1 will make\n the pins larger, and\n values smaller than 1 will make them smaller. For example, to draw the pushpins 50% larger\n than normal, use\n\n ``pins=default|sc1.5||-122 45``\n\n You can rotate pushpins and their labels by using the \u0027ro\u0027 rotation style modifier. This is a\n number of degrees\n of clockwise rotation. Use a negative number to rotate counter-clockwise. For example, to\n rotate the pushpins\n 90 degrees clockwise and double their size, use\n\n ``pins=default|ro90|sc2||-122 45``\n\n You can make pushpins and their labels partially transparent by specifying the \u0027al\u0027 alpha\n style modifier.\n This is a number between 0 and 1 indicating the opacity of the pushpins. Zero makes them\n completely transparent\n (and not visible) and 1 makes them completely opaque (which is the default). For example, to\n make pushpins\n and their labels only 67% opaque, use\n\n ``pins=default|al.67||-122 45``\n\n Style Modifier Summary\n ^^^^^^^^^^^^^^^^^^^^^^\n\n .. list-table::\n    :header-rows: 1\n\n    * - Modifier\n      - Description\n      - Range\n    * - al\n      - Alpha (opacity)\n      - 0 to 1\n    * - an\n      - Pin anchor\n      - *\n    * - co\n      - Pin color\n      - 000000 to FFFFFF\n    * - la\n      - Label anchor\n      - *\n    * - lc\n      - Label color\n      - 000000 to FFFFFF\n    * - ls\n      - Label size\n      - Greater than 0\n    * - ro\n      - Rotation\n      - -360 to 360\n    * - sc\n      - Scale\n      - Greater than 0\n\n\n\n * X and Y coordinates can be anywhere within pin image or a margin around it.\n   The margin size is the minimum of the pin width and height.\n:type pins: list[str]\n:param path: Path style and locations. Use this parameter to optionally add lines, polygons or\n circles to the image.\n The path style describes the appearance of the line and fill. (Be sure to properly URL-encode\n values of this\n parameter since it will contain reserved characters such as pipes and punctuation.)\n\n Path parameter is supported in Azure Maps account SKU starting with S1. Multiple instances of\n the path parameter\n allow to specify multiple geometries with their styles. Number of parameters per request is\n limited to 10 and\n number of locations is limited to 100 per path.\n\n To render a circle with radius 100 meters and center point at latitude 45\u00b0N and longitude\n 122\u00b0W using the default style, add the\n querystring parameter\n\n ``path=ra100||-122 45``\n\n Note that the longitude comes before the latitude.\n After URL encoding this will look like\n\n ``path=ra100%7C%7C-122+45``\n\n All of the examples here show the path parameter without URL encoding, for clarity.\n\n To render a line, separate each location with a pipe character. For example, use\n\n ``path=||-122 45|-119.5 43.2|-121.67 47.12``\n\n To render a polygon, last location must be equal to the start location. For example, use\n\n ``path=||-122 45|-119.5 43.2|-121.67 47.12|-122 45``\n\n Longitude and latitude values for locations of lines and polygons can be in the range from\n -360 to 360 to allow for rendering of geometries crossing the anti-meridian.\n\n Style Modifiers\n ^^^^^^^^^^^^^^^\n\n You can modify the appearance of the path by adding style modifiers. These are added before\n the locations.\n Style modifiers each have a two-letter name. These abbreviated names are used to help reduce\n the length\n of the URL.\n\n To change the color of the outline, use the \u0027lc\u0027 style modifier and specify the color using\n the HTML/CSS RGB color\n format which is a six-digit hexadecimal number (the three-digit form is not supported). For\n example, to use\n a deep pink color which you would specify as #FF1493 in CSS, use\n\n ``path=lcFF1493||-122 45|-119.5 43.2``\n\n Multiple style modifiers may be combined together to create a more complex visual style.\n\n ``lc0000FF|lw3|la0.60|fa0.50||-122.2 47.6|-122.2 47.7|-122.3 47.7|-122.3 47.6|-122.2 47.6``\n\n Getting Path locations from Azure Maps Data Storage\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n For all Azure Maps account SKUs other than S0, the path location information can be obtained\n from Azure Maps Data Storage.\n After uploading a GeoJSON document containing path locations, the Data Storage service returns\n a Unique Data ID (UDID) that you can use\n to reference the data in the path parameter.\n\n To use the point geometry from an uploaded GeoJSON document as the path locations, specify the\n UDID in the locations\n section of the path parameter. For example,\n\n ``path=||udid-29dc105a-dee7-409f-a3f9-22b066ae4713``\n\n Note the it is not allowed to mix path locations from Data Storage with locations specified in\n the path parameter.\n\n Style Modifier Summary\n ^^^^^^^^^^^^^^^^^^^^^^\n\n .. list-table::\n    :header-rows: 1\n\n    * - Modifier\n      - Description\n      - Range\n    * - lc\n      - Line color\n      - 000000 to FFFFFF\n    * - fc\n      - Fill color\n      - 000000 to FFFFFF\n    * - la\n      - Line alpha (opacity)\n      - 0 to 1\n    * - fa\n      - Fill alpha (opacity)\n      - 0 to 1\n    * - lw\n      - Line width\n      - Greater than 0\n    * - ra\n      - Circle radius (meters)\n      - Greater than 0.\n:type path: list[str]\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IO, or the result of cls(response)\n:rtype: IO\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_map_static_image(\n    self,\n    format: Union[str, \"models.RasterTileFormat\"] = \"png\",\n    layer: Optional[Union[str, \"models.StaticMapLayer\"]] = None,\n    style: Optional[Union[str, \"models.MapImageStyle\"]] = None,\n    zoom: Optional[int] = None,\n    center: Optional[List[float]] = None,\n    bounding_box: Optional[List[float]] = None,\n    height: Optional[int] = None,\n    width: Optional[int] = None,\n    language: Optional[str] = None,\n    localized_map_view: Optional[Union[str, \"models.LocalizedMapView\"]] = None,\n    pins: Optional[List[str]] = None,\n    path: Optional[List[str]] = None,\n    **kwargs\n) -\u003e IO:\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nThe static image service renders a user-defined, rectangular image containing a map section\nusing a zoom level from 0 to 20. The static image service renders a user-defined, rectangular\nimage containing a map section using a zoom level from 0 to 20. The supported resolution range\nfor the map image is from 1x1 to 8192x8192. If you are deciding when to use the static image\nservice over the map tile service, you may want to consider how you would like to interact with\nthe rendered map. If the map contents will be relatively unchanging, a static map is a good\nchoice. If you want to support a lot of zooming, panning and changing of the map content, the\nmap tile service would be a better choice.\n\nService also provides Image Composition functionality to get a static image back with\nadditional data like; pushpins and geometry overlays with following S0 and S1 capabilities.\n\nIn S0 you can:\n\n\n* Render up to 5 pushpins specified in the request\n* Provide one custom image for the pins referenced in the request\n* Add labels to the pushpins\n\nIn S1 you can:\n\n\n* Render pushpins through `Azure Maps Data Service \u003chttps://aka.ms/AzureMapsMapDataService\u003e`_\n* Specify multiple pushpin styles\n* Render circle, polyline and polygon geometry types.\n* Render of supported GeoJSON geometry types uploaded through `Azure Maps Data Service\n\u003chttps://aka.ms/AzureMapsMapDataService\u003e`_\n\nPlease see `How-to-Guide \u003chttps://aka.ms/AzureMapsHowToGuideImageCompositor\u003e`_ for detailed\nexamples.\n\n*Note* : Either **center** or **bbox** parameter must be supplied to the\nAPI.\n:code:`\u003cbr\u003e`:code:`\u003cbr\u003e`\nThe supported Lat and Lon ranges when using the **bbox** parameter, are as follows:\n:code:`\u003cbr\u003e`:code:`\u003cbr\u003e`\n\n.. list-table::\n   :header-rows: 1\n\n   * - Zoom Level\n     - Max Lon Range\n     - Max Lat Range\n   * - 0\n     - 360.0\n     - 170.0\n   * - 1\n     - 360.0\n     - 170.0\n   * - 2\n     - 360.0\n     - 170.0\n   * - 3\n     - 360.0\n     - 170.0\n   * - 4\n     - 360.0\n     - 170.0\n   * - 5\n     - 180.0\n     - 85.0\n   * - 6\n     - 90.0\n     - 42.5\n   * - 7\n     - 45.0\n     - 21.25\n   * - 8\n     - 22.5\n     - 10.625\n   * - 9\n     - 11.25\n     - 5.3125\n   * - 10\n     - 5.625\n     - 2.62625\n   * - 11\n     - 2.8125\n     - 1.328125\n   * - 12\n     - 1.40625\n     - 0.6640625\n   * - 13\n     - 0.703125\n     - 0.33203125\n   * - 14\n     - 0.3515625\n     - 0.166015625\n   * - 15\n     - 0.17578125\n     - 0.0830078125\n   * - 16\n     - 0.087890625\n     - 0.0415039063\n   * - 17\n     - 0.0439453125\n     - 0.0207519531\n   * - 18\n     - 0.0219726563\n     - 0.0103759766\n   * - 19\n     - 0.0109863281\n     - 0.0051879883\n   * - 20\n     - 0.0054931641\n     - 0.0025939941.\n\n:param format: Desired format of the response. Possible value: png.\n:type format: str or ~azure.maps.render.models.RasterTileFormat\n:param layer: Map layer requested. If layer is set to labels or hybrid, the format should be\n png.\n:type layer: str or ~azure.maps.render.models.StaticMapLayer\n:param style: Map style to be returned. Possible values are main and dark.\n:type style: str or ~azure.maps.render.models.MapImageStyle\n:param zoom: Desired zoom level of the map. Zoom value must be in the range: 0-20 (inclusive).\n Default value is 12.:code:`\u003cbr\u003e`:code:`\u003cbr\u003e`Please see `Zoom Levels and Tile Grid\n \u003chttps://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid\u003e`_\n for details.\n:type zoom: int\n:param center: Coordinates of the center point. Format: \u0027lon,lat\u0027. Projection used\n\n\n * EPSG:3857. Longitude range: -180 to 180. Latitude range: -85 to 85.\n\n Note: Either center or bbox are required parameters. They are\n mutually exclusive.\n:type center: list[float]\n:param bounding_box: Bounding box. Projection used - EPSG:3857. Format : \u0027minLon, minLat,\n maxLon, maxLat\u0027.\n\n Note: Either bbox or center are required\n parameters. They are mutually exclusive. It shouldn\u2019t be used with\n height or width.\n\n The maximum allowed ranges for Lat and Lon are defined for each zoom level\n in the table at the top of this page.\n:type bounding_box: list[float]\n:param height: Height of the resulting image in pixels. Range is 1 to 8192. Default\n is 512. It shouldn\u2019t be used with bbox.\n:type height: int\n:param width: Width of the resulting image in pixels. Range is 1 to 8192. Default is 512. It\n shouldn\u2019t be used with bbox.\n:type width: int\n:param language: Language in which search results should be returned. Should be one of\n supported IETF language tags, case insensitive. When data in specified language is not\n available for a specific field, default language is used.\n\n Please refer to `Supported Languages \u003chttps://docs.microsoft.com/azure/azure-maps/supported-\n languages\u003e`_ for details.\n:type language: str\n:param localized_map_view: The View parameter (also called the \"user region\" parameter) allows\n you to show the correct maps for a certain country/region for geopolitically disputed regions.\n Different countries have different views of such regions, and the View parameter allows your\n application to comply with the view required by the country your application will be serving.\n By default, the View parameter is set to \u201cUnified\u201d even if you haven\u2019t defined it in  the\n request. It is your responsibility to determine the location of your users, and then set the\n View parameter correctly for that location. Alternatively, you have the option to set\n \u2018View=Auto\u2019, which will return the map data based on the IP  address of the request. The View\n parameter in Azure Maps must be used in compliance with applicable laws, including those\n regarding mapping, of the country where maps, images and other data and third party content\n that you are authorized to  access via Azure Maps is made available. Example: view=IN.\n\n Please refer to `Supported Views \u003chttps://aka.ms/AzureMapsLocalizationViews\u003e`_ for details and\n to see the available Views.\n:type localized_map_view: str or ~azure.maps.render.models.LocalizedMapView\n:param pins: Pushpin style and instances. Use this parameter to optionally add pushpins to the\n image.\n The pushpin style describes the appearance of the pushpins, and the instances specify\n the coordinates of the pushpins and optional labels for each pin. (Be sure to properly URL-\n encode values of this\n parameter since it will contain reserved characters such as pipes and punctuation.)\n\n The Azure Maps account S0 SKU only supports a single instance of the pins parameter. Other\n SKUs\n allow multiple instances of the pins parameter to specify multiple pin styles.\n\n To render a pushpin at latitude 45\u00b0N and longitude 122\u00b0W using the default built-in pushpin\n style, add the\n querystring parameter\n\n ``pins=default||-122 45``\n\n Note that the longitude comes before the latitude.\n After URL encoding this will look like\n\n ``pins=default%7C%7C-122+45``\n\n All of the examples here show the pins\n parameter without URL encoding, for clarity.\n\n To render a pin at multiple locations, separate each location with a pipe character. For\n example, use\n\n ``pins=default||-122 45|-119.5 43.2|-121.67 47.12``\n\n The S0 Azure Maps account SKU only allows five pushpins. Other account SKUs do not have this\n limitation.\n\n Style Modifiers\n ^^^^^^^^^^^^^^^\n\n You can modify the appearance of the pins by adding style modifiers. These are added after the\n style but before\n the locations and labels. Style modifiers each have a two-letter name. These abbreviated names\n are used to help\n reduce the length of the URL.\n\n To change the color of the pushpin, use the \u0027co\u0027 style modifier and specify the color using\n the HTML/CSS RGB color\n format which is a six-digit hexadecimal number (the three-digit form is not supported). For\n example, to use\n a deep pink color which you would specify as #FF1493 in CSS, use\n\n ``pins=default|coFF1493||-122 45``\n\n Pushpin Labels\n ^^^^^^^^^^^^^^\n\n To add a label to the pins, put the label in single quotes just before the coordinates. For\n example, to label\n three pins with the values \u00271\u0027, \u00272\u0027, and \u00273\u0027, use\n\n ``pins=default||\u00271\u0027-122 45|\u00272\u0027-119.5 43.2|\u00273\u0027-121.67 47.12``\n\n There is a built in pushpin style called \u0027none\u0027 that does not display a pushpin image. You can\n use this if\n you want to display labels without any pin image. For example,\n\n ``pins=none||\u0027A\u0027-122 45|\u0027B\u0027-119.5 43.2``\n\n To change the color of the pushpin labels, use the \u0027lc\u0027 label color style modifier. For\n example, to use pink\n pushpins with black labels, use\n\n ``pins=default|coFF1493|lc000000||-122 45``\n\n To change the size of the labels, use the \u0027ls\u0027 label size style modifier. The label size\n represents the approximate\n height of the label text in pixels. For example, to increase the label size to 12, use\n\n ``pins=default|ls12||\u0027A\u0027-122 45|\u0027B\u0027-119 43``\n\n The labels are centered at the pushpin \u0027label anchor.\u0027 The anchor location is predefined for\n built-in pushpins and\n is at the top center of custom pushpins (see below). To override the label anchor, using the\n \u0027la\u0027 style modifier\n and provide X and Y pixel coordinates for the anchor. These coordinates are relative to the\n top left corner of the\n pushpin image. Positive X values move the anchor to the right, and positive Y values move the\n anchor down. For example,\n to position the label anchor 10 pixels right and 4 pixels above the top left corner of the\n pushpin image,\n use\n\n ``pins=default|la10 -4||\u0027A\u0027-122 45|\u0027B\u0027-119 43``\n\n Custom Pushpins\n ^^^^^^^^^^^^^^^\n\n To use a custom pushpin image, use the word \u0027custom\u0027 as the pin style name, and then specify a\n URL after the\n location and label information. Use two pipe characters to indicate that you\u0027re done\n specifying locations and are\n starting the URL. For example,\n\n ``pins=custom||-122 45||http://contoso.com/pushpins/red.png``\n\n After URL encoding, this would look like\n\n ``pins=custom%7C%7C-122+45%7C%7Chttp%3A%2F%2Fcontoso.com%2Fpushpins%2Fred.png``\n\n By default, custom pushpin images are drawn centered at the pin coordinates. This usually\n isn\u0027t ideal as it obscures\n the location that you\u0027re trying to highlight. To override the anchor location of the pin\n image, use the \u0027an\u0027\n style modifier. This uses the same format as the \u0027la\u0027 label anchor style modifier. For\n example, if your custom\n pin image has the tip of the pin at the top left corner of the image, you can set the anchor\n to that spot by\n using\n\n ``pins=custom|an0 0||-122 45||http://contoso.com/pushpins/red.png``\n\n Note: If you use the \u0027co\u0027 color modifier with a custom pushpin image, the specified color will\n replace the RGB\n channels of the pixels in the image but will leave the alpha (opacity) channel unchanged. This\n would usually\n only be done with a solid-color custom image.\n\n Getting Pushpins from Azure Maps Data Storage\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n For all Azure Maps account SKUs other than S0,\n the pushpin location information can be obtained from Azure Maps Data Storage. After uploading\n a GeoJSON document containing pin locations, the Data Storage service returns a Unique Data ID\n (UDID) that you can use\n to reference the data in the pins parameter.\n\n To use the point geometry from an uploaded GeoJSON document as the pin locations, specify the\n UDID in the locations\n section of the pins parameter. For example,\n\n ``pins=default||udid-29dc105a-dee7-409f-a3f9-22b066ae4713``\n\n Note that\n only point and multipoint geometry, points and multipoints from geometry collections, and\n point geometry from features\n will be used. Linestring and polygon geometry will be ignored. If the point comes from a\n feature and the feature\n has a string property called \"label\", the value of that property will be used as the label for\n the pin.\n\n You can mix pin locations from Data Storage and pin locations specified in the pins parameter.\n Any of the pipe-delimited\n pin locations can be a longitude and latitude or a UDID. For example,\n\n ``pins=default||-122 45|udid-29dc105a-dee7-409f-a3f9-22b066ae4713|-119 43``\n\n Scale, Rotation, and Opacity\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n You can make pushpins and their labels larger or smaller by using the \u0027sc\u0027 scale style\n modifier. This is a\n value greater than zero. A value of 1 is the standard scale. Values larger than 1 will make\n the pins larger, and\n values smaller than 1 will make them smaller. For example, to draw the pushpins 50% larger\n than normal, use\n\n ``pins=default|sc1.5||-122 45``\n\n You can rotate pushpins and their labels by using the \u0027ro\u0027 rotation style modifier. This is a\n number of degrees\n of clockwise rotation. Use a negative number to rotate counter-clockwise. For example, to\n rotate the pushpins\n 90 degrees clockwise and double their size, use\n\n ``pins=default|ro90|sc2||-122 45``\n\n You can make pushpins and their labels partially transparent by specifying the \u0027al\u0027 alpha\n style modifier.\n This is a number between 0 and 1 indicating the opacity of the pushpins. Zero makes them\n completely transparent\n (and not visible) and 1 makes them completely opaque (which is the default). For example, to\n make pushpins\n and their labels only 67% opaque, use\n\n ``pins=default|al.67||-122 45``\n\n Style Modifier Summary\n ^^^^^^^^^^^^^^^^^^^^^^\n\n .. list-table::\n    :header-rows: 1\n\n    * - Modifier\n      - Description\n      - Range\n    * - al\n      - Alpha (opacity)\n      - 0 to 1\n    * - an\n      - Pin anchor\n      - *\n    * - co\n      - Pin color\n      - 000000 to FFFFFF\n    * - la\n      - Label anchor\n      - *\n    * - lc\n      - Label color\n      - 000000 to FFFFFF\n    * - ls\n      - Label size\n      - Greater than 0\n    * - ro\n      - Rotation\n      - -360 to 360\n    * - sc\n      - Scale\n      - Greater than 0\n\n\n\n * X and Y coordinates can be anywhere within pin image or a margin around it.\n   The margin size is the minimum of the pin width and height.\n:type pins: list[str]\n:param path: Path style and locations. Use this parameter to optionally add lines, polygons or\n circles to the image.\n The path style describes the appearance of the line and fill. (Be sure to properly URL-encode\n values of this\n parameter since it will contain reserved characters such as pipes and punctuation.)\n\n Path parameter is supported in Azure Maps account SKU starting with S1. Multiple instances of\n the path parameter\n allow to specify multiple geometries with their styles. Number of parameters per request is\n limited to 10 and\n number of locations is limited to 100 per path.\n\n To render a circle with radius 100 meters and center point at latitude 45\u00b0N and longitude\n 122\u00b0W using the default style, add the\n querystring parameter\n\n ``path=ra100||-122 45``\n\n Note that the longitude comes before the latitude.\n After URL encoding this will look like\n\n ``path=ra100%7C%7C-122+45``\n\n All of the examples here show the path parameter without URL encoding, for clarity.\n\n To render a line, separate each location with a pipe character. For example, use\n\n ``path=||-122 45|-119.5 43.2|-121.67 47.12``\n\n To render a polygon, last location must be equal to the start location. For example, use\n\n ``path=||-122 45|-119.5 43.2|-121.67 47.12|-122 45``\n\n Longitude and latitude values for locations of lines and polygons can be in the range from\n -360 to 360 to allow for rendering of geometries crossing the anti-meridian.\n\n Style Modifiers\n ^^^^^^^^^^^^^^^\n\n You can modify the appearance of the path by adding style modifiers. These are added before\n the locations.\n Style modifiers each have a two-letter name. These abbreviated names are used to help reduce\n the length\n of the URL.\n\n To change the color of the outline, use the \u0027lc\u0027 style modifier and specify the color using\n the HTML/CSS RGB color\n format which is a six-digit hexadecimal number (the three-digit form is not supported). For\n example, to use\n a deep pink color which you would specify as #FF1493 in CSS, use\n\n ``path=lcFF1493||-122 45|-119.5 43.2``\n\n Multiple style modifiers may be combined together to create a more complex visual style.\n\n ``lc0000FF|lw3|la0.60|fa0.50||-122.2 47.6|-122.2 47.7|-122.3 47.7|-122.3 47.6|-122.2 47.6``\n\n Getting Path locations from Azure Maps Data Storage\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n For all Azure Maps account SKUs other than S0, the path location information can be obtained\n from Azure Maps Data Storage.\n After uploading a GeoJSON document containing path locations, the Data Storage service returns\n a Unique Data ID (UDID) that you can use\n to reference the data in the path parameter.\n\n To use the point geometry from an uploaded GeoJSON document as the path locations, specify the\n UDID in the locations\n section of the path parameter. For example,\n\n ``path=||udid-29dc105a-dee7-409f-a3f9-22b066ae4713``\n\n Note the it is not allowed to mix path locations from Data Storage with locations specified in\n the path parameter.\n\n Style Modifier Summary\n ^^^^^^^^^^^^^^^^^^^^^^\n\n .. list-table::\n    :header-rows: 1\n\n    * - Modifier\n      - Description\n      - Range\n    * - lc\n      - Line color\n      - 000000 to FFFFFF\n    * - fc\n      - Fill color\n      - 000000 to FFFFFF\n    * - la\n      - Line alpha (opacity)\n      - 0 to 1\n    * - fa\n      - Fill alpha (opacity)\n      - 0 to 1\n    * - lw\n      - Line width\n      - Greater than 0\n    * - ra\n      - Circle radius (meters)\n      - Greater than 0.\n:type path: list[str]\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: IO, or the result of cls(response)\n:rtype: IO\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "format, layer, style, zoom, center, bounding_box, height, width, language, localized_map_view, pins, path"
        },
        "get_copyright_from_bounding_box" : {
            "sync": {
                "signature": "def get_copyright_from_bounding_box(\n    self,\n    bounding_box,  # type: \"models.BoundingBox\"\n    format=\"json\",  # type: Union[str, \"models.ResponseFormat\"]\n    include_text=None,  # type: Optional[Union[str, \"models.IncludeText\"]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nReturns copyright information for a given bounding box. Bounding-box requests should specify\nthe minimum and maximum longitude and latitude (EPSG-3857) coordinates.\n\n:param bounding_box: Parameter group.\n:type bounding_box: ~azure.maps.render.models.BoundingBox\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.render.models.ResponseFormat\n:param include_text: Yes/no value to exclude textual data from response. Only images and\n country names will be in response.\n:type include_text: str or ~azure.maps.render.models.IncludeText\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Copyright, or the result of cls(response)\n:rtype: ~azure.maps.render.models.Copyright\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_copyright_from_bounding_box(\n    self,\n    bounding_box: \"models.BoundingBox\",\n    format: Union[str, \"models.ResponseFormat\"] = \"json\",\n    include_text: Optional[Union[str, \"models.IncludeText\"]] = None,\n    **kwargs\n) -\u003e \"models.Copyright\":\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nReturns copyright information for a given bounding box. Bounding-box requests should specify\nthe minimum and maximum longitude and latitude (EPSG-3857) coordinates.\n\n:param bounding_box: Parameter group.\n:type bounding_box: ~azure.maps.render.models.BoundingBox\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.render.models.ResponseFormat\n:param include_text: Yes/no value to exclude textual data from response. Only images and\n country names will be in response.\n:type include_text: str or ~azure.maps.render.models.IncludeText\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Copyright, or the result of cls(response)\n:rtype: ~azure.maps.render.models.Copyright\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "bounding_box, format, include_text"
        },
        "get_copyright_for_tile" : {
            "sync": {
                "signature": "def get_copyright_for_tile(\n    self,\n    tile_index,  # type: \"models.TileIndex\"\n    format=\"json\",  # type: Union[str, \"models.ResponseFormat\"]\n    include_text=None,  # type: Optional[Union[str, \"models.IncludeText\"]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nCopyrights API is designed to serve copyright information for Render Tile  service. In addition\nto basic copyright for the whole map, API is serving  specific groups of copyrights for some\ncountries.\nReturns the copyright information for a given tile. To obtain the copyright information for a\nparticular tile, the request should specify the tile\u0027s zoom level and x and y coordinates (see:\nZoom Levels and Tile Grid).\n\n:param tile_index: Parameter group.\n:type tile_index: ~azure.maps.render.models.TileIndex\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.render.models.ResponseFormat\n:param include_text: Yes/no value to exclude textual data from response. Only images and\n country names will be in response.\n:type include_text: str or ~azure.maps.render.models.IncludeText\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Copyright, or the result of cls(response)\n:rtype: ~azure.maps.render.models.Copyright\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_copyright_for_tile(\n    self,\n    tile_index: \"models.TileIndex\",\n    format: Union[str, \"models.ResponseFormat\"] = \"json\",\n    include_text: Optional[Union[str, \"models.IncludeText\"]] = None,\n    **kwargs\n) -\u003e \"models.Copyright\":\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nCopyrights API is designed to serve copyright information for Render Tile  service. In addition\nto basic copyright for the whole map, API is serving  specific groups of copyrights for some\ncountries.\nReturns the copyright information for a given tile. To obtain the copyright information for a\nparticular tile, the request should specify the tile\u0027s zoom level and x and y coordinates (see:\nZoom Levels and Tile Grid).\n\n:param tile_index: Parameter group.\n:type tile_index: ~azure.maps.render.models.TileIndex\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.render.models.ResponseFormat\n:param include_text: Yes/no value to exclude textual data from response. Only images and\n country names will be in response.\n:type include_text: str or ~azure.maps.render.models.IncludeText\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Copyright, or the result of cls(response)\n:rtype: ~azure.maps.render.models.Copyright\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "tile_index, format, include_text"
        },
        "get_copyright_for_world" : {
            "sync": {
                "signature": "def get_copyright_for_world(\n    self,\n    format=\"json\",  # type: Union[str, \"models.ResponseFormat\"]\n    include_text=None,  # type: Optional[Union[str, \"models.IncludeText\"]]\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nCopyrights API is designed to serve copyright information for Render Tile  service. In addition\nto basic copyright for the whole map, API is serving  specific groups of copyrights for some\ncountries.\nReturns the copyright information for the world. To obtain the default copyright information\nfor the whole world, do not specify a tile or bounding box.\n\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.render.models.ResponseFormat\n:param include_text: Yes/no value to exclude textual data from response. Only images and\n country names will be in response.\n:type include_text: str or ~azure.maps.render.models.IncludeText\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Copyright, or the result of cls(response)\n:rtype: ~azure.maps.render.models.Copyright\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def get_copyright_for_world(\n    self,\n    format: Union[str, \"models.ResponseFormat\"] = \"json\",\n    include_text: Optional[Union[str, \"models.IncludeText\"]] = None,\n    **kwargs\n) -\u003e \"models.Copyright\":\n",
                "doc": "\"\"\"**Applies to**\\ : S0 and S1 pricing tiers.\n\nCopyrights API is designed to serve copyright information for Render Tile  service. In addition\nto basic copyright for the whole map, API is serving  specific groups of copyrights for some\ncountries.\nReturns the copyright information for the world. To obtain the default copyright information\nfor the whole world, do not specify a tile or bounding box.\n\n:param format: Desired format of the response. Value can be either *json* or *xml*.\n:type format: str or ~azure.maps.render.models.ResponseFormat\n:param include_text: Yes/no value to exclude textual data from response. Only images and\n country names will be in response.\n:type include_text: str or ~azure.maps.render.models.IncludeText\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Copyright, or the result of cls(response)\n:rtype: ~azure.maps.render.models.Copyright\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "format, include_text"
        }
    },
    "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"]}, \"stdlib\": {\"datetime\": [null], \"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"IO\", \"List\", \"Optional\", \"TypeVar\", \"Union\"]}}}",
    "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"]}, \"stdlib\": {\"datetime\": [null], \"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"IO\", \"List\", \"Optional\", \"TypeVar\", \"Union\"]}}}"
}