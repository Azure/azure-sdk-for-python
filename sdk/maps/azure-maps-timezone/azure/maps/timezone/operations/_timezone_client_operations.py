# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class TimezoneClientOperationsMixin(object):

    def get_timezone_by_id(
        self,
        timezone_id,  # type: str
        accept_language=None,  # type: Optional[str]
        options=None,  # type: Optional[Union[str, "models.TimezoneOptions"]]
        time_stamp=None,  # type: Optional[datetime.datetime]
        daylight_savings_time_from=None,  # type: Optional[datetime.datetime]
        daylight_savings_time_lasting_years=None,  # type: Optional[int]
        format="json",  # type: Union[str, "models.JsonFormat"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.TimezoneResult"
        """**Time Zone by Id**

        **Applies to**\ : S0 and S1 pricing tiers.

        This API returns current, historical, and future time zone information for the specified IANA
        time zone ID.

        :param timezone_id: The IANA time zone ID.
        :type timezone_id: str
        :param accept_language: Specifies the language code in which the timezone names should be
         returned. If no language code is provided, the response will be in "EN". Please refer to
         `Supported Languages <https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages>`_
         for details.
        :type accept_language: str
        :param options: Alternatively, use alias "o". Options available for types of information
         returned in the result.
        :type options: str or ~azure.maps.timezone.models.TimezoneOptions
        :param time_stamp: Alternatively, use alias "stamp", or "s". Reference time, if omitted, the
         API will use the machine time serving the request.
        :type time_stamp: ~datetime.datetime
        :param daylight_savings_time_from: Alternatively, use alias "tf". The start date from which
         daylight savings time (DST) transitions are requested, only applies when "options" = all or
         "options" = transitions.
        :type daylight_savings_time_from: ~datetime.datetime
        :param daylight_savings_time_lasting_years: Alternatively, use alias "ty". The number of years
         from "transitionsFrom" for which DST transitions are requested, only applies when "options" =
         all or "options" = transitions.
        :type daylight_savings_time_lasting_years: int
        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TimezoneResult, or the result of cls(response)
        :rtype: ~azure.maps.timezone.models.TimezoneResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.TimezoneResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_timezone_by_id.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if options is not None:
            query_parameters['options'] = self._serialize.query("options", options, 'str')
        if time_stamp is not None:
            query_parameters['timeStamp'] = self._serialize.query("time_stamp", time_stamp, 'iso-8601')
        if daylight_savings_time_from is not None:
            query_parameters['transitionsFrom'] = self._serialize.query("daylight_savings_time_from", daylight_savings_time_from, 'iso-8601')
        if daylight_savings_time_lasting_years is not None:
            query_parameters['transitionsYears'] = self._serialize.query("daylight_savings_time_lasting_years", daylight_savings_time_lasting_years, 'int')
        query_parameters['query'] = self._serialize.query("timezone_id", timezone_id, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        if accept_language is not None:
            header_parameters['Accept-Language'] = self._serialize.header("accept_language", accept_language, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('TimezoneResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_timezone_by_id.metadata = {'url': '/timezone/byId/{format}'}  # type: ignore

    def get_timezone_by_coordinates(
        self,
        coordinates,  # type: List[float]
        accept_language=None,  # type: Optional[str]
        options=None,  # type: Optional[Union[str, "models.TimezoneOptions"]]
        time_stamp=None,  # type: Optional[datetime.datetime]
        daylight_savings_time_from=None,  # type: Optional[datetime.datetime]
        daylight_savings_time_lasting_years=None,  # type: Optional[int]
        format="json",  # type: Union[str, "models.JsonFormat"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.TimezoneResult"
        """**Time Zone by Coordinates**

        **Applies to**\ : S0 and S1 pricing tiers.

        This API returns current, historical, and future time zone information for a specified
        latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given
        location.

        :param coordinates: Coordinates of the point for which time zone information is requested. This
         parameter is a list of coordinates, containing a pair of coordinate(lat, long). When this
         endpoint is called directly, coordinates are passed in as a single string containing
         coordinates, separated by commas.
        :type coordinates: list[float]
        :param accept_language: Specifies the language code in which the timezone names should be
         returned. If no language code is provided, the response will be in "EN". Please refer to
         `Supported Languages <https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages>`_
         for details.
        :type accept_language: str
        :param options: Alternatively, use alias "o". Options available for types of information
         returned in the result.
        :type options: str or ~azure.maps.timezone.models.TimezoneOptions
        :param time_stamp: Alternatively, use alias "stamp", or "s". Reference time, if omitted, the
         API will use the machine time serving the request.
        :type time_stamp: ~datetime.datetime
        :param daylight_savings_time_from: Alternatively, use alias "tf". The start date from which
         daylight savings time (DST) transitions are requested, only applies when "options" = all or
         "options" = transitions.
        :type daylight_savings_time_from: ~datetime.datetime
        :param daylight_savings_time_lasting_years: Alternatively, use alias "ty". The number of years
         from "transitionsFrom" for which DST transitions are requested, only applies when "options" =
         all or "options" = transitions.
        :type daylight_savings_time_lasting_years: int
        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TimezoneResult, or the result of cls(response)
        :rtype: ~azure.maps.timezone.models.TimezoneResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.TimezoneResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_timezone_by_coordinates.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if options is not None:
            query_parameters['options'] = self._serialize.query("options", options, 'str')
        if time_stamp is not None:
            query_parameters['timeStamp'] = self._serialize.query("time_stamp", time_stamp, 'iso-8601')
        if daylight_savings_time_from is not None:
            query_parameters['transitionsFrom'] = self._serialize.query("daylight_savings_time_from", daylight_savings_time_from, 'iso-8601')
        if daylight_savings_time_lasting_years is not None:
            query_parameters['transitionsYears'] = self._serialize.query("daylight_savings_time_lasting_years", daylight_savings_time_lasting_years, 'int')
        query_parameters['query'] = self._serialize.query("coordinates", coordinates, '[float]', div=',')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        if accept_language is not None:
            header_parameters['Accept-Language'] = self._serialize.header("accept_language", accept_language, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('TimezoneResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_timezone_by_coordinates.metadata = {'url': '/timezone/byCoordinates/{format}'}  # type: ignore

    def get_windows_timezone_ids(
        self,
        format="json",  # type: Union[str, "models.JsonFormat"]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.TimezoneWindows"]
        """**Windows Time Zones**

        **Applies to**\ : S0 and S1 pricing tiers.

        This API returns a full list of Windows Time Zone IDs.

        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of TimezoneWindows, or the result of cls(response)
        :rtype: list[~azure.maps.timezone.models.TimezoneWindows]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.TimezoneWindows"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_windows_timezone_ids.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[TimezoneWindows]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_windows_timezone_ids.metadata = {'url': '/timezone/enumWindows/{format}'}  # type: ignore

    def get_iana_timezone_ids(
        self,
        format="json",  # type: Union[str, "models.JsonFormat"]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.IanaId"]
        """**IANA Time Zones**

        **Applies to**\ : S0 and S1 pricing tiers.

        This API returns a full list of IANA time zone IDs. Updates to the IANA service will be
        reflected in the system within one day.

        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of IanaId, or the result of cls(response)
        :rtype: list[~azure.maps.timezone.models.IanaId]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.IanaId"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_iana_timezone_ids.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[IanaId]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_iana_timezone_ids.metadata = {'url': '/timezone/enumIana/{format}'}  # type: ignore

    def get_iana_version(
        self,
        format="json",  # type: Union[str, "models.JsonFormat"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.TimezoneIanaVersionResult"
        """**Time Zone IANA Version**

        **Applies to**\ : S0 and S1 pricing tiers.

        This API returns the current IANA version number as Metadata.

        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TimezoneIanaVersionResult, or the result of cls(response)
        :rtype: ~azure.maps.timezone.models.TimezoneIanaVersionResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.TimezoneIanaVersionResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.get_iana_version.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('TimezoneIanaVersionResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_iana_version.metadata = {'url': '/timezone/ianaVersion/{format}'}  # type: ignore

    def convert_windows_timezone_to_iana(
        self,
        windows_timezone_id,  # type: str
        format="json",  # type: Union[str, "models.JsonFormat"]
        windows_territory_code=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> List["models.IanaId"]
        """**Windows to IANA Time Zone**

        **Applies to**\ : S0 and S1 pricing tiers.

        This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs
        may be returned for a single Windows ID. It is possible to narrow these results by adding an
        optional territory parameter.

        :param windows_timezone_id: The Windows time zone ID.
        :type windows_timezone_id: str
        :param format: Desired format of the response. Only ``json`` format is supported.
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :param windows_territory_code: Windows Time Zone territory code.
        :type windows_territory_code: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of IanaId, or the result of cls(response)
        :rtype: list[~azure.maps.timezone.models.IanaId]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["models.IanaId"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "1.0"
        accept = "application/json"

        # Construct URL
        url = self.convert_windows_timezone_to_iana.metadata['url']  # type: ignore
        path_format_arguments = {
            'format': self._serialize.url("format", format, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['query'] = self._serialize.query("windows_timezone_id", windows_timezone_id, 'str')
        if windows_territory_code is not None:
            query_parameters['territory'] = self._serialize.query("windows_territory_code", windows_territory_code, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        if self._config.client_id is not None:
            header_parameters['x-ms-client-id'] = self._serialize.header("self._config.client_id", self._config.client_id, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[IanaId]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    convert_windows_timezone_to_iana.metadata = {'url': '/timezone/windowsToIana/{format}'}  # type: ignore
