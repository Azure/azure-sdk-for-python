# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, List, Optional, TypeVar, Union

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ...operations._operations import (
    build_timezone_convert_windows_timezone_to_iana_request,
    build_timezone_get_iana_timezone_ids_request,
    build_timezone_get_iana_version_request,
    build_timezone_get_timezone_by_coordinates_request,
    build_timezone_get_timezone_by_id_request,
    build_timezone_get_windows_timezone_ids_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class TimezoneOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.maps.timezone.aio.TimezoneClient`'s
        :attr:`timezone` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_timezone_by_id(
        self,
        format: Union[str, _models.JsonFormat] = "json",
        *,
        timezone_id: str,
        accept_language: Optional[str] = None,
        options: Optional[Union[str, _models.TimezoneOptions]] = None,
        time_stamp: Optional[datetime.datetime] = None,
        daylight_savings_time_from: Optional[datetime.datetime] = None,
        daylight_savings_time_lasting_years: Optional[int] = None,
        **kwargs: Any
    ) -> _models.TimezoneResult:
        """**Time Zone by Id**

        **Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        This API returns current, historical, and future time zone information for the specified IANA
        time zone ID.

        :param format: Desired format of the response. Only ``json`` format is supported. "json"
         Default value is "json".
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :keyword timezone_id: The IANA time zone ID. Required.
        :paramtype timezone_id: str
        :keyword accept_language: Specifies the language code in which the timezone names should be
         returned. If no language code is provided, the response will be in "EN". Please refer to
         `Supported Languages <https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages>`_
         for details. Default value is None.
        :paramtype accept_language: str
        :keyword options: Alternatively, use alias "o". Options available for types of information
         returned in the result. Known values are: "none", "zoneInfo", "transitions", and "all". Default
         value is None.
        :paramtype options: str or ~azure.maps.timezone.models.TimezoneOptions
        :keyword time_stamp: Alternatively, use alias "stamp", or "s". Reference time, if omitted, the
         API will use the machine time serving the request. Default value is None.
        :paramtype time_stamp: ~datetime.datetime
        :keyword daylight_savings_time_from: Alternatively, use alias "tf". The start date from which
         daylight savings time (DST) transitions are requested, only applies when "options" = all or
         "options" = transitions. Default value is None.
        :paramtype daylight_savings_time_from: ~datetime.datetime
        :keyword daylight_savings_time_lasting_years: Alternatively, use alias "ty". The number of
         years from "transitionsFrom" for which DST transitions are requested, only applies when
         "options" = all or "options" = transitions. Default value is None.
        :paramtype daylight_savings_time_lasting_years: int
        :return: TimezoneResult
        :rtype: ~azure.maps.timezone.models.TimezoneResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.TimezoneResult]

        request = build_timezone_get_timezone_by_id_request(
            format=format,
            timezone_id=timezone_id,
            accept_language=accept_language,
            options=options,
            time_stamp=time_stamp,
            daylight_savings_time_from=daylight_savings_time_from,
            daylight_savings_time_lasting_years=daylight_savings_time_lasting_years,
            client_id=self._config.client_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("TimezoneResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_timezone_by_coordinates(
        self,
        format: Union[str, _models.JsonFormat] = "json",
        *,
        coordinates: List[float],
        accept_language: Optional[str] = None,
        options: Optional[Union[str, _models.TimezoneOptions]] = None,
        time_stamp: Optional[datetime.datetime] = None,
        daylight_savings_time_from: Optional[datetime.datetime] = None,
        daylight_savings_time_lasting_years: Optional[int] = None,
        **kwargs: Any
    ) -> _models.TimezoneResult:
        """**Time Zone by Coordinates**

        **Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        This API returns current, historical, and future time zone information for a specified
        latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given
        location.

        :param format: Desired format of the response. Only ``json`` format is supported. "json"
         Default value is "json".
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :keyword coordinates: Coordinates of the point for which time zone information is requested.
         This parameter is a list of coordinates, containing a pair of coordinate(lat, long). When this
         endpoint is called directly, coordinates are passed in as a single string containing
         coordinates, separated by commas. Required.
        :paramtype coordinates: list[float]
        :keyword accept_language: Specifies the language code in which the timezone names should be
         returned. If no language code is provided, the response will be in "EN". Please refer to
         `Supported Languages <https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages>`_
         for details. Default value is None.
        :paramtype accept_language: str
        :keyword options: Alternatively, use alias "o". Options available for types of information
         returned in the result. Known values are: "none", "zoneInfo", "transitions", and "all". Default
         value is None.
        :paramtype options: str or ~azure.maps.timezone.models.TimezoneOptions
        :keyword time_stamp: Alternatively, use alias "stamp", or "s". Reference time, if omitted, the
         API will use the machine time serving the request. Default value is None.
        :paramtype time_stamp: ~datetime.datetime
        :keyword daylight_savings_time_from: Alternatively, use alias "tf". The start date from which
         daylight savings time (DST) transitions are requested, only applies when "options" = all or
         "options" = transitions. Default value is None.
        :paramtype daylight_savings_time_from: ~datetime.datetime
        :keyword daylight_savings_time_lasting_years: Alternatively, use alias "ty". The number of
         years from "transitionsFrom" for which DST transitions are requested, only applies when
         "options" = all or "options" = transitions. Default value is None.
        :paramtype daylight_savings_time_lasting_years: int
        :return: TimezoneResult
        :rtype: ~azure.maps.timezone.models.TimezoneResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.TimezoneResult]

        request = build_timezone_get_timezone_by_coordinates_request(
            format=format,
            coordinates=coordinates,
            accept_language=accept_language,
            options=options,
            time_stamp=time_stamp,
            daylight_savings_time_from=daylight_savings_time_from,
            daylight_savings_time_lasting_years=daylight_savings_time_lasting_years,
            client_id=self._config.client_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("TimezoneResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_windows_timezone_ids(
        self, format: Union[str, _models.JsonFormat] = "json", **kwargs: Any
    ) -> List[_models.TimezoneWindows]:
        """**Windows Time Zones**

        **Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        This API returns a full list of Windows Time Zone IDs.

        :param format: Desired format of the response. Only ``json`` format is supported. "json"
         Default value is "json".
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :return: list of TimezoneWindows
        :rtype: list[~azure.maps.timezone.models.TimezoneWindows]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[_models.TimezoneWindows]]

        request = build_timezone_get_windows_timezone_ids_request(
            format=format,
            client_id=self._config.client_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[TimezoneWindows]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_iana_timezone_ids(
        self, format: Union[str, _models.JsonFormat] = "json", **kwargs: Any
    ) -> List[_models.IanaId]:
        """**IANA Time Zones**

        **Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        This API returns a full list of IANA time zone IDs. Updates to the IANA service will be
        reflected in the system within one day.

        :param format: Desired format of the response. Only ``json`` format is supported. "json"
         Default value is "json".
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :return: list of IanaId
        :rtype: list[~azure.maps.timezone.models.IanaId]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[_models.IanaId]]

        request = build_timezone_get_iana_timezone_ids_request(
            format=format,
            client_id=self._config.client_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[IanaId]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_iana_version(
        self, format: Union[str, _models.JsonFormat] = "json", **kwargs: Any
    ) -> _models.TimezoneIanaVersionResult:
        """**Time Zone IANA Version**

        **Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        This API returns the current IANA version number as Metadata.

        :param format: Desired format of the response. Only ``json`` format is supported. "json"
         Default value is "json".
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :return: TimezoneIanaVersionResult
        :rtype: ~azure.maps.timezone.models.TimezoneIanaVersionResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.TimezoneIanaVersionResult]

        request = build_timezone_get_iana_version_request(
            format=format,
            client_id=self._config.client_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("TimezoneIanaVersionResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def convert_windows_timezone_to_iana(
        self,
        format: Union[str, _models.JsonFormat] = "json",
        *,
        windows_timezone_id: str,
        windows_territory_code: Optional[str] = None,
        **kwargs: Any
    ) -> List[_models.IanaId]:
        """**Windows to IANA Time Zone**

        **Applies to:** see pricing `tiers <https://aka.ms/AzureMapsPricingTier>`_.

        This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs
        may be returned for a single Windows ID. It is possible to narrow these results by adding an
        optional territory parameter.

        :param format: Desired format of the response. Only ``json`` format is supported. "json"
         Default value is "json".
        :type format: str or ~azure.maps.timezone.models.JsonFormat
        :keyword windows_timezone_id: The Windows time zone ID. Required.
        :paramtype windows_timezone_id: str
        :keyword windows_territory_code: Windows Time Zone territory code. Default value is None.
        :paramtype windows_territory_code: str
        :return: list of IanaId
        :rtype: list[~azure.maps.timezone.models.IanaId]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[_models.IanaId]]

        request = build_timezone_convert_windows_timezone_to_iana_request(
            format=format,
            windows_timezone_id=windows_timezone_id,
            windows_territory_code=windows_territory_code,
            client_id=self._config.client_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[IanaId]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
