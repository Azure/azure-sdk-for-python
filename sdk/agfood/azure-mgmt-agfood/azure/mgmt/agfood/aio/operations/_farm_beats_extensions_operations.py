# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class FarmBeatsExtensionsOperations:
    """FarmBeatsExtensionsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure_ag_food_platform_rp_service.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list(
        self,
        farm_beats_extension_ids: Optional[List[str]] = None,
        farm_beats_extension_names: Optional[List[str]] = None,
        extension_categories: Optional[List[str]] = None,
        publisher_ids: Optional[List[str]] = None,
        max_page_size: Optional[int] = 50,
        **kwargs
    ) -> AsyncIterable["_models.FarmBeatsExtensionListResponse"]:
        """Get list of farmBeats extension.

        :param farm_beats_extension_ids: FarmBeatsExtension ids.
        :type farm_beats_extension_ids: list[str]
        :param farm_beats_extension_names: FarmBeats extension names.
        :type farm_beats_extension_names: list[str]
        :param extension_categories: Extension categories.
        :type extension_categories: list[str]
        :param publisher_ids: Publisher ids.
        :type publisher_ids: list[str]
        :param max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :type max_page_size: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either FarmBeatsExtensionListResponse or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure_ag_food_platform_rp_service.models.FarmBeatsExtensionListResponse]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.FarmBeatsExtensionListResponse"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-05-12-preview"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']  # type: ignore
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                if farm_beats_extension_ids is not None:
                    query_parameters['farmBeatsExtensionIds'] = [self._serialize.query("farm_beats_extension_ids", q, 'str') if q is not None else '' for q in farm_beats_extension_ids]
                if farm_beats_extension_names is not None:
                    query_parameters['farmBeatsExtensionNames'] = [self._serialize.query("farm_beats_extension_names", q, 'str') if q is not None else '' for q in farm_beats_extension_names]
                if extension_categories is not None:
                    query_parameters['extensionCategories'] = [self._serialize.query("extension_categories", q, 'str') if q is not None else '' for q in extension_categories]
                if publisher_ids is not None:
                    query_parameters['publisherIds'] = [self._serialize.query("publisher_ids", q, 'str') if q is not None else '' for q in publisher_ids]
                if max_page_size is not None:
                    query_parameters['$maxPageSize'] = self._serialize.query("max_page_size", max_page_size, 'int', maximum=1000, minimum=10)
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('FarmBeatsExtensionListResponse', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions'}  # type: ignore

    async def get(
        self,
        farm_beats_extension_id: str,
        **kwargs
    ) -> "_models.FarmBeatsExtension":
        """Get farmBeats extension.

        :param farm_beats_extension_id: farmBeatsExtensionId to be queried.
        :type farm_beats_extension_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: FarmBeatsExtension, or the result of cls(response)
        :rtype: ~azure_ag_food_platform_rp_service.models.FarmBeatsExtension
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.FarmBeatsExtension"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-05-12-preview"
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'farmBeatsExtensionId': self._serialize.url("farm_beats_extension_id", farm_beats_extension_id, 'str', pattern=r'^[A-za-z]{3,50}[.][A-za-z]{3,100}$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('FarmBeatsExtension', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/providers/Microsoft.AgFoodPlatform/farmBeatsExtensionDefinitions/{farmBeatsExtensionId}'}  # type: ignore
