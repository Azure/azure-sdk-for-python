# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.devtestlabs.aio import DevTestLabClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDevTestLabFormulasOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DevTestLabClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_formulas_get(self, resource_group):
        response = await self.client.formulas.get(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_formulas_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.formulas.begin_create_or_update(
                resource_group_name=resource_group.name,
                lab_name="str",
                name="str",
                formula={
                    "properties": {
                        "author": "str",
                        "creationDate": "2020-02-20 00:00:00",
                        "description": "str",
                        "formulaContent": {
                            "location": "str",
                            "name": "str",
                            "properties": {
                                "allowClaim": bool,
                                "artifacts": [
                                    {
                                        "artifactId": "str",
                                        "artifactTitle": "str",
                                        "deploymentStatusMessage": "str",
                                        "installTime": "2020-02-20 00:00:00",
                                        "parameters": [{"name": "str", "value": "str"}],
                                        "status": "str",
                                        "vmExtensionStatusMessage": "str",
                                    }
                                ],
                                "bulkCreationParameters": {"instanceCount": 0},
                                "createdDate": "2020-02-20 00:00:00",
                                "customImageId": "str",
                                "dataDiskParameters": [
                                    {
                                        "attachNewDataDiskOptions": {
                                            "diskName": "str",
                                            "diskSizeGiB": 0,
                                            "diskType": "str",
                                        },
                                        "existingLabDiskId": "str",
                                        "hostCaching": "str",
                                    }
                                ],
                                "disallowPublicIpAddress": bool,
                                "environmentId": "str",
                                "expirationDate": "2020-02-20 00:00:00",
                                "galleryImageReference": {
                                    "offer": "str",
                                    "osType": "str",
                                    "publisher": "str",
                                    "sku": "str",
                                    "version": "str",
                                },
                                "isAuthenticationWithSshKey": bool,
                                "labSubnetName": "str",
                                "labVirtualNetworkId": "str",
                                "networkInterface": {
                                    "dnsName": "str",
                                    "privateIpAddress": "str",
                                    "publicIpAddress": "str",
                                    "publicIpAddressId": "str",
                                    "rdpAuthority": "str",
                                    "sharedPublicIpAddressConfiguration": {
                                        "inboundNatRules": [
                                            {"backendPort": 0, "frontendPort": 0, "transportProtocol": "str"}
                                        ]
                                    },
                                    "sshAuthority": "str",
                                    "subnetId": "str",
                                    "virtualNetworkId": "str",
                                },
                                "notes": "str",
                                "ownerObjectId": "str",
                                "ownerUserPrincipalName": "str",
                                "password": "str",
                                "planId": "str",
                                "scheduleParameters": [
                                    {
                                        "location": "str",
                                        "name": "str",
                                        "properties": {
                                            "dailyRecurrence": {"time": "str"},
                                            "hourlyRecurrence": {"minute": 0},
                                            "notificationSettings": {
                                                "emailRecipient": "str",
                                                "notificationLocale": "str",
                                                "status": "str",
                                                "timeInMinutes": 0,
                                                "webhookUrl": "str",
                                            },
                                            "status": "str",
                                            "targetResourceId": "str",
                                            "taskType": "str",
                                            "timeZoneId": "str",
                                            "weeklyRecurrence": {"time": "str", "weekdays": ["str"]},
                                        },
                                        "tags": {"str": "str"},
                                    }
                                ],
                                "size": "str",
                                "sshKey": "str",
                                "storageType": "str",
                                "userName": "str",
                            },
                            "tags": {"str": "str"},
                        },
                        "osType": "str",
                        "provisioningState": "str",
                        "uniqueIdentifier": "str",
                        "vm": {"labVmId": "str"},
                    },
                    "id": "str",
                    "location": "str",
                    "name": "str",
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_formulas_update(self, resource_group):
        response = await self.client.formulas.update(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            formula={"tags": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_formulas_delete(self, resource_group):
        response = await self.client.formulas.delete(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_formulas_list(self, resource_group):
        response = self.client.formulas.list(
            resource_group_name=resource_group.name,
            lab_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...
