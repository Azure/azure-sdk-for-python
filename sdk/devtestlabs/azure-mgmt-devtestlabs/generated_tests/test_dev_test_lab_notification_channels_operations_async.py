# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.devtestlabs.aio import DevTestLabClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDevTestLabNotificationChannelsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DevTestLabClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_notification_channels_get(self, resource_group):
        response = await self.client.notification_channels.get(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_notification_channels_create_or_update(self, resource_group):
        response = await self.client.notification_channels.create_or_update(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            notification_channel={
                "properties": {
                    "createdDate": "2020-02-20 00:00:00",
                    "description": "str",
                    "emailRecipient": "str",
                    "events": [{"eventName": "str"}],
                    "notificationLocale": "str",
                    "provisioningState": "str",
                    "uniqueIdentifier": "str",
                    "webHookUrl": "str",
                },
                "id": "str",
                "location": "str",
                "name": "str",
                "tags": {"str": "str"},
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_notification_channels_update(self, resource_group):
        response = await self.client.notification_channels.update(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            notification_channel={"tags": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_notification_channels_delete(self, resource_group):
        response = await self.client.notification_channels.delete(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_notification_channels_list(self, resource_group):
        response = self.client.notification_channels.list(
            resource_group_name=resource_group.name,
            lab_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_notification_channels_notify(self, resource_group):
        response = await self.client.notification_channels.notify(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            notify_parameters={"eventName": "str", "jsonPayload": "str"},
        )

        # please add some check logic here by yourself
        # ...
