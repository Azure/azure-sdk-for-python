# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.devtestlabs.aio import DevTestLabClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDevTestLabServiceFabricsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DevTestLabClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_service_fabrics_get(self, resource_group):
        response = await self.client.service_fabrics.get(
            resource_group_name=resource_group.name,
            lab_name="str",
            user_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_service_fabrics_begin_create_or_update(self, resource_group):
        response = await (
            await self.client.service_fabrics.begin_create_or_update(
                resource_group_name=resource_group.name,
                lab_name="str",
                user_name="str",
                name="str",
                service_fabric={
                    "properties": {
                        "applicableSchedule": {
                            "properties": {
                                "labVmsShutdown": {
                                    "properties": {
                                        "createdDate": "2020-02-20 00:00:00",
                                        "dailyRecurrence": {"time": "str"},
                                        "hourlyRecurrence": {"minute": 0},
                                        "notificationSettings": {
                                            "emailRecipient": "str",
                                            "notificationLocale": "str",
                                            "status": "str",
                                            "timeInMinutes": 0,
                                            "webhookUrl": "str",
                                        },
                                        "provisioningState": "str",
                                        "status": "str",
                                        "targetResourceId": "str",
                                        "taskType": "str",
                                        "timeZoneId": "str",
                                        "uniqueIdentifier": "str",
                                        "weeklyRecurrence": {"time": "str", "weekdays": ["str"]},
                                    },
                                    "id": "str",
                                    "location": "str",
                                    "name": "str",
                                    "tags": {"str": "str"},
                                    "type": "str",
                                },
                                "labVmsStartup": {
                                    "properties": {
                                        "createdDate": "2020-02-20 00:00:00",
                                        "dailyRecurrence": {"time": "str"},
                                        "hourlyRecurrence": {"minute": 0},
                                        "notificationSettings": {
                                            "emailRecipient": "str",
                                            "notificationLocale": "str",
                                            "status": "str",
                                            "timeInMinutes": 0,
                                            "webhookUrl": "str",
                                        },
                                        "provisioningState": "str",
                                        "status": "str",
                                        "targetResourceId": "str",
                                        "taskType": "str",
                                        "timeZoneId": "str",
                                        "uniqueIdentifier": "str",
                                        "weeklyRecurrence": {"time": "str", "weekdays": ["str"]},
                                    },
                                    "id": "str",
                                    "location": "str",
                                    "name": "str",
                                    "tags": {"str": "str"},
                                    "type": "str",
                                },
                            },
                            "id": "str",
                            "location": "str",
                            "name": "str",
                            "tags": {"str": "str"},
                            "type": "str",
                        },
                        "environmentId": "str",
                        "externalServiceFabricId": "str",
                        "provisioningState": "str",
                        "uniqueIdentifier": "str",
                    },
                    "id": "str",
                    "location": "str",
                    "name": "str",
                    "tags": {"str": "str"},
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_service_fabrics_update(self, resource_group):
        response = await self.client.service_fabrics.update(
            resource_group_name=resource_group.name,
            lab_name="str",
            user_name="str",
            name="str",
            service_fabric={"tags": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_service_fabrics_begin_delete(self, resource_group):
        response = await (
            await self.client.service_fabrics.begin_delete(
                resource_group_name=resource_group.name,
                lab_name="str",
                user_name="str",
                name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_service_fabrics_list(self, resource_group):
        response = self.client.service_fabrics.list(
            resource_group_name=resource_group.name,
            lab_name="str",
            user_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_service_fabrics_list_applicable_schedules(self, resource_group):
        response = await self.client.service_fabrics.list_applicable_schedules(
            resource_group_name=resource_group.name,
            lab_name="str",
            user_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_service_fabrics_begin_start(self, resource_group):
        response = await (
            await self.client.service_fabrics.begin_start(
                resource_group_name=resource_group.name,
                lab_name="str",
                user_name="str",
                name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_service_fabrics_begin_stop(self, resource_group):
        response = await (
            await self.client.service_fabrics.begin_stop(
                resource_group_name=resource_group.name,
                lab_name="str",
                user_name="str",
                name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
