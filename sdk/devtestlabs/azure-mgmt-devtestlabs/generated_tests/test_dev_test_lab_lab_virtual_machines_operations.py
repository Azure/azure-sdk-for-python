# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.devtestlabs import DevTestLabClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDevTestLabLabVirtualMachinesOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DevTestLabClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_get(self, resource_group):
        response = self.client.lab_virtual_machines.get(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_create_or_update(self, resource_group):
        response = self.client.lab_virtual_machines.begin_create_or_update(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            lab_virtual_machine={
                "properties": {
                    "allowClaim": bool,
                    "applicableSchedule": {
                        "properties": {
                            "labVmsShutdown": {
                                "properties": {
                                    "createdDate": "2020-02-20 00:00:00",
                                    "dailyRecurrence": {"time": "str"},
                                    "hourlyRecurrence": {"minute": 0},
                                    "notificationSettings": {
                                        "emailRecipient": "str",
                                        "notificationLocale": "str",
                                        "status": "str",
                                        "timeInMinutes": 0,
                                        "webhookUrl": "str",
                                    },
                                    "provisioningState": "str",
                                    "status": "str",
                                    "targetResourceId": "str",
                                    "taskType": "str",
                                    "timeZoneId": "str",
                                    "uniqueIdentifier": "str",
                                    "weeklyRecurrence": {"time": "str", "weekdays": ["str"]},
                                },
                                "id": "str",
                                "location": "str",
                                "name": "str",
                                "tags": {"str": "str"},
                                "type": "str",
                            },
                            "labVmsStartup": {
                                "properties": {
                                    "createdDate": "2020-02-20 00:00:00",
                                    "dailyRecurrence": {"time": "str"},
                                    "hourlyRecurrence": {"minute": 0},
                                    "notificationSettings": {
                                        "emailRecipient": "str",
                                        "notificationLocale": "str",
                                        "status": "str",
                                        "timeInMinutes": 0,
                                        "webhookUrl": "str",
                                    },
                                    "provisioningState": "str",
                                    "status": "str",
                                    "targetResourceId": "str",
                                    "taskType": "str",
                                    "timeZoneId": "str",
                                    "uniqueIdentifier": "str",
                                    "weeklyRecurrence": {"time": "str", "weekdays": ["str"]},
                                },
                                "id": "str",
                                "location": "str",
                                "name": "str",
                                "tags": {"str": "str"},
                                "type": "str",
                            },
                        },
                        "id": "str",
                        "location": "str",
                        "name": "str",
                        "tags": {"str": "str"},
                        "type": "str",
                    },
                    "artifactDeploymentStatus": {"artifactsApplied": 0, "deploymentStatus": "str", "totalArtifacts": 0},
                    "artifacts": [
                        {
                            "artifactId": "str",
                            "artifactTitle": "str",
                            "deploymentStatusMessage": "str",
                            "installTime": "2020-02-20 00:00:00",
                            "parameters": [{"name": "str", "value": "str"}],
                            "status": "str",
                            "vmExtensionStatusMessage": "str",
                        }
                    ],
                    "computeId": "str",
                    "computeVm": {
                        "dataDiskIds": ["str"],
                        "dataDisks": [{"diskSizeGiB": 0, "diskUri": "str", "managedDiskId": "str", "name": "str"}],
                        "networkInterfaceId": "str",
                        "osDiskId": "str",
                        "osType": "str",
                        "statuses": [{"code": "str", "displayStatus": "str", "message": "str"}],
                        "vmSize": "str",
                    },
                    "createdByUser": "str",
                    "createdByUserId": "str",
                    "createdDate": "2020-02-20 00:00:00",
                    "customImageId": "str",
                    "dataDiskParameters": [
                        {
                            "attachNewDataDiskOptions": {"diskName": "str", "diskSizeGiB": 0, "diskType": "str"},
                            "existingLabDiskId": "str",
                            "hostCaching": "str",
                        }
                    ],
                    "disallowPublicIpAddress": bool,
                    "environmentId": "str",
                    "expirationDate": "2020-02-20 00:00:00",
                    "fqdn": "str",
                    "galleryImageReference": {
                        "offer": "str",
                        "osType": "str",
                        "publisher": "str",
                        "sku": "str",
                        "version": "str",
                    },
                    "isAuthenticationWithSshKey": bool,
                    "labSubnetName": "str",
                    "labVirtualNetworkId": "str",
                    "lastKnownPowerState": "str",
                    "networkInterface": {
                        "dnsName": "str",
                        "privateIpAddress": "str",
                        "publicIpAddress": "str",
                        "publicIpAddressId": "str",
                        "rdpAuthority": "str",
                        "sharedPublicIpAddressConfiguration": {
                            "inboundNatRules": [{"backendPort": 0, "frontendPort": 0, "transportProtocol": "str"}]
                        },
                        "sshAuthority": "str",
                        "subnetId": "str",
                        "virtualNetworkId": "str",
                    },
                    "notes": "str",
                    "osType": "str",
                    "ownerObjectId": "str",
                    "ownerUserPrincipalName": "str",
                    "password": "str",
                    "planId": "str",
                    "provisioningState": "str",
                    "scheduleParameters": [
                        {
                            "location": "str",
                            "name": "str",
                            "properties": {
                                "dailyRecurrence": {"time": "str"},
                                "hourlyRecurrence": {"minute": 0},
                                "notificationSettings": {
                                    "emailRecipient": "str",
                                    "notificationLocale": "str",
                                    "status": "str",
                                    "timeInMinutes": 0,
                                    "webhookUrl": "str",
                                },
                                "status": "str",
                                "targetResourceId": "str",
                                "taskType": "str",
                                "timeZoneId": "str",
                                "weeklyRecurrence": {"time": "str", "weekdays": ["str"]},
                            },
                            "tags": {"str": "str"},
                        }
                    ],
                    "size": "str",
                    "sshKey": "str",
                    "storageType": "str",
                    "uniqueIdentifier": "str",
                    "userName": "str",
                    "virtualMachineCreationSource": "str",
                },
                "id": "str",
                "location": "str",
                "name": "str",
                "tags": {"str": "str"},
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_update(self, resource_group):
        response = self.client.lab_virtual_machines.update(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            lab_virtual_machine={"tags": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_delete(self, resource_group):
        response = self.client.lab_virtual_machines.begin_delete(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_list(self, resource_group):
        response = self.client.lab_virtual_machines.list(
            resource_group_name=resource_group.name,
            lab_name="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_add_data_disk(self, resource_group):
        response = self.client.lab_virtual_machines.begin_add_data_disk(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            data_disk_properties={
                "attachNewDataDiskOptions": {"diskName": "str", "diskSizeGiB": 0, "diskType": "str"},
                "existingLabDiskId": "str",
                "hostCaching": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_apply_artifacts(self, resource_group):
        response = self.client.lab_virtual_machines.begin_apply_artifacts(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            apply_artifacts_request={
                "artifacts": [
                    {
                        "artifactId": "str",
                        "artifactTitle": "str",
                        "deploymentStatusMessage": "str",
                        "installTime": "2020-02-20 00:00:00",
                        "parameters": [{"name": "str", "value": "str"}],
                        "status": "str",
                        "vmExtensionStatusMessage": "str",
                    }
                ]
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_claim(self, resource_group):
        response = self.client.lab_virtual_machines.begin_claim(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_detach_data_disk(self, resource_group):
        response = self.client.lab_virtual_machines.begin_detach_data_disk(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            detach_data_disk_properties={"existingLabDiskId": "str"},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_get_rdp_file_contents(self, resource_group):
        response = self.client.lab_virtual_machines.get_rdp_file_contents(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_list_applicable_schedules(self, resource_group):
        response = self.client.lab_virtual_machines.list_applicable_schedules(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_redeploy(self, resource_group):
        response = self.client.lab_virtual_machines.begin_redeploy(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_resize(self, resource_group):
        response = self.client.lab_virtual_machines.begin_resize(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
            resize_lab_virtual_machine_properties={"size": "str"},
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_restart(self, resource_group):
        response = self.client.lab_virtual_machines.begin_restart(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_start(self, resource_group):
        response = self.client.lab_virtual_machines.begin_start(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_stop(self, resource_group):
        response = self.client.lab_virtual_machines.begin_stop(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_transfer_disks(self, resource_group):
        response = self.client.lab_virtual_machines.begin_transfer_disks(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_lab_virtual_machines_begin_un_claim(self, resource_group):
        response = self.client.lab_virtual_machines.begin_un_claim(
            resource_group_name=resource_group.name,
            lab_name="str",
            name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
