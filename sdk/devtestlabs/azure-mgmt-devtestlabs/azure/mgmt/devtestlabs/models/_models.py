# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Resource(_Model):
    """An Azure resource.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """The identifier of the resource."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The location of the resource."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tags of the resource."""

    @overload
    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApplicableSchedule(Resource):
    """Schedules applicable to a virtual machine. The schedules may have been defined on a VM or on
    lab level.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.ApplicableScheduleProperties
    """

    properties: "_models.ApplicableScheduleProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the resource. Required."""

    __flattened_items = ["lab_vms_shutdown", "lab_vms_startup"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ApplicableScheduleProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ApplicableScheduleProperties(_Model):
    """Properties of a schedules applicable to a virtual machine.

    :ivar lab_vms_shutdown: The auto-shutdown schedule, if one has been set at the lab or lab
     resource level.
    :vartype lab_vms_shutdown: ~azure.mgmt.devtestlabs.models.Schedule
    :ivar lab_vms_startup: The auto-startup schedule, if one has been set at the lab or lab
     resource level.
    :vartype lab_vms_startup: ~azure.mgmt.devtestlabs.models.Schedule
    """

    lab_vms_shutdown: Optional["_models.Schedule"] = rest_field(
        name="labVmsShutdown", visibility=["read", "create", "update", "delete", "query"]
    )
    """The auto-shutdown schedule, if one has been set at the lab or lab resource level."""
    lab_vms_startup: Optional["_models.Schedule"] = rest_field(
        name="labVmsStartup", visibility=["read", "create", "update", "delete", "query"]
    )
    """The auto-startup schedule, if one has been set at the lab or lab resource level."""

    @overload
    def __init__(
        self,
        *,
        lab_vms_shutdown: Optional["_models.Schedule"] = None,
        lab_vms_startup: Optional["_models.Schedule"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApplyArtifactsRequest(_Model):
    """Request body for applying artifacts to a virtual machine.

    :ivar artifacts: The list of artifacts to apply.
    :vartype artifacts: list[~azure.mgmt.devtestlabs.models.ArtifactInstallProperties]
    """

    artifacts: Optional[List["_models.ArtifactInstallProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The list of artifacts to apply."""

    @overload
    def __init__(
        self,
        *,
        artifacts: Optional[List["_models.ArtifactInstallProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArmTemplate(Resource):
    """An Azure Resource Manager template.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.ArmTemplateProperties
    """

    properties: "_models.ArmTemplateProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = [
        "display_name",
        "description",
        "publisher",
        "icon",
        "contents",
        "created_date",
        "parameters_value_files_info",
        "enabled",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ArmTemplateProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ArmTemplateInfo(_Model):
    """Information about a generated ARM template.

    :ivar template: The template's contents.
    :vartype template: dict[str, any]
    :ivar parameters: The parameters of the ARM template.
    :vartype parameters: dict[str, any]
    """

    template: Optional[Dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The template's contents."""
    parameters: Optional[Dict[str, Any]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The parameters of the ARM template."""

    @overload
    def __init__(
        self,
        *,
        template: Optional[Dict[str, Any]] = None,
        parameters: Optional[Dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArmTemplateParameterProperties(_Model):
    """Properties of an Azure Resource Manager template parameter.

    :ivar name: The name of the template parameter.
    :vartype name: str
    :ivar value: The value of the template parameter.
    :vartype value: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the template parameter."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the template parameter."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArmTemplateProperties(_Model):
    """Properties of an Azure Resource Manager template.

    :ivar display_name: The display name of the ARM template.
    :vartype display_name: str
    :ivar description: The description of the ARM template.
    :vartype description: str
    :ivar publisher: The publisher of the ARM template.
    :vartype publisher: str
    :ivar icon: The URI to the icon of the ARM template.
    :vartype icon: str
    :ivar contents: The contents of the ARM template.
    :vartype contents: dict[str, any]
    :ivar created_date: The creation date of the armTemplate.
    :vartype created_date: ~datetime.datetime
    :ivar parameters_value_files_info: File name and parameter values information from all
     azuredeploy.*.parameters.json for the ARM template.
    :vartype parameters_value_files_info:
     list[~azure.mgmt.devtestlabs.models.ParametersValueFileInfo]
    :ivar enabled: Whether or not ARM template is enabled for use by lab user.
    :vartype enabled: bool
    """

    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """The display name of the ARM template."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The description of the ARM template."""
    publisher: Optional[str] = rest_field(visibility=["read"])
    """The publisher of the ARM template."""
    icon: Optional[str] = rest_field(visibility=["read"])
    """The URI to the icon of the ARM template."""
    contents: Optional[Dict[str, Any]] = rest_field(visibility=["read"])
    """The contents of the ARM template."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the armTemplate."""
    parameters_value_files_info: Optional[List["_models.ParametersValueFileInfo"]] = rest_field(
        name="parametersValueFilesInfo", visibility=["read"]
    )
    """File name and parameter values information from all azuredeploy.*.parameters.json for the ARM
     template."""
    enabled: Optional[bool] = rest_field(visibility=["read"])
    """Whether or not ARM template is enabled for use by lab user."""


class Artifact(Resource):
    """An artifact.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.ArtifactProperties
    """

    properties: "_models.ArtifactProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = [
        "title",
        "description",
        "publisher",
        "file_path",
        "icon",
        "target_os_type",
        "parameters",
        "created_date",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ArtifactProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ArtifactDeploymentStatusProperties(_Model):
    """Properties of an artifact deployment.

    :ivar deployment_status: The deployment status of the artifact.
    :vartype deployment_status: str
    :ivar artifacts_applied: The total count of the artifacts that were successfully applied.
    :vartype artifacts_applied: int
    :ivar total_artifacts: The total count of the artifacts that were tentatively applied.
    :vartype total_artifacts: int
    """

    deployment_status: Optional[str] = rest_field(
        name="deploymentStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """The deployment status of the artifact."""
    artifacts_applied: Optional[int] = rest_field(
        name="artifactsApplied", visibility=["read", "create", "update", "delete", "query"]
    )
    """The total count of the artifacts that were successfully applied."""
    total_artifacts: Optional[int] = rest_field(
        name="totalArtifacts", visibility=["read", "create", "update", "delete", "query"]
    )
    """The total count of the artifacts that were tentatively applied."""

    @overload
    def __init__(
        self,
        *,
        deployment_status: Optional[str] = None,
        artifacts_applied: Optional[int] = None,
        total_artifacts: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArtifactInstallProperties(_Model):
    """Properties of an artifact.

    :ivar artifact_id: The artifact's identifier.
    :vartype artifact_id: str
    :ivar artifact_title: The artifact's title.
    :vartype artifact_title: str
    :ivar parameters: The parameters of the artifact.
    :vartype parameters: list[~azure.mgmt.devtestlabs.models.ArtifactParameterProperties]
    :ivar status: The status of the artifact.
    :vartype status: str
    :ivar deployment_status_message: The status message from the deployment.
    :vartype deployment_status_message: str
    :ivar vm_extension_status_message: The status message from the virtual machine extension.
    :vartype vm_extension_status_message: str
    :ivar install_time: The time that the artifact starts to install on the virtual machine.
    :vartype install_time: ~datetime.datetime
    """

    artifact_id: Optional[str] = rest_field(
        name="artifactId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The artifact's identifier."""
    artifact_title: Optional[str] = rest_field(
        name="artifactTitle", visibility=["read", "create", "update", "delete", "query"]
    )
    """The artifact's title."""
    parameters: Optional[List["_models.ArtifactParameterProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The parameters of the artifact."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The status of the artifact."""
    deployment_status_message: Optional[str] = rest_field(
        name="deploymentStatusMessage", visibility=["read", "create", "update", "delete", "query"]
    )
    """The status message from the deployment."""
    vm_extension_status_message: Optional[str] = rest_field(
        name="vmExtensionStatusMessage", visibility=["read", "create", "update", "delete", "query"]
    )
    """The status message from the virtual machine extension."""
    install_time: Optional[datetime.datetime] = rest_field(
        name="installTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The time that the artifact starts to install on the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        artifact_id: Optional[str] = None,
        artifact_title: Optional[str] = None,
        parameters: Optional[List["_models.ArtifactParameterProperties"]] = None,
        status: Optional[str] = None,
        deployment_status_message: Optional[str] = None,
        vm_extension_status_message: Optional[str] = None,
        install_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArtifactParameterProperties(_Model):
    """Properties of an artifact parameter.

    :ivar name: The name of the artifact parameter.
    :vartype name: str
    :ivar value: The value of the artifact parameter.
    :vartype value: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the artifact parameter."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the artifact parameter."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArtifactProperties(_Model):
    """Properties of an artifact.

    :ivar title: The artifact's title.
    :vartype title: str
    :ivar description: The artifact's description.
    :vartype description: str
    :ivar publisher: The artifact's publisher.
    :vartype publisher: str
    :ivar file_path: The file path to the artifact.
    :vartype file_path: str
    :ivar icon: The URI to the artifact icon.
    :vartype icon: str
    :ivar target_os_type: The artifact's target OS.
    :vartype target_os_type: str
    :ivar parameters: The artifact's parameters.
    :vartype parameters: dict[str, any]
    :ivar created_date: The artifact's creation date.
    :vartype created_date: ~datetime.datetime
    """

    title: Optional[str] = rest_field(visibility=["read"])
    """The artifact's title."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The artifact's description."""
    publisher: Optional[str] = rest_field(visibility=["read"])
    """The artifact's publisher."""
    file_path: Optional[str] = rest_field(name="filePath", visibility=["read"])
    """The file path to the artifact."""
    icon: Optional[str] = rest_field(visibility=["read"])
    """The URI to the artifact icon."""
    target_os_type: Optional[str] = rest_field(name="targetOsType", visibility=["read"])
    """The artifact's target OS."""
    parameters: Optional[Dict[str, Any]] = rest_field(visibility=["read"])
    """The artifact's parameters."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The artifact's creation date."""


class ArtifactSource(Resource):
    """Properties of an artifact source.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.ArtifactSourceProperties
    """

    properties: "_models.ArtifactSourceProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the resource. Required."""

    __flattened_items = [
        "display_name",
        "uri",
        "source_type",
        "folder_path",
        "arm_template_folder_path",
        "branch_ref",
        "security_token",
        "status",
        "created_date",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ArtifactSourceProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class UpdateResource(_Model):
    """Represents an update resource.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tags of the resource."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArtifactSourceFragment(UpdateResource):
    """Properties of an artifact source.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArtifactSourceProperties(_Model):
    """Properties of an artifact source.

    :ivar display_name: The artifact source's display name.
    :vartype display_name: str
    :ivar uri: The artifact source's URI.
    :vartype uri: str
    :ivar source_type: The artifact source's type. Known values are: "VsoGit", "GitHub", and
     "StorageAccount".
    :vartype source_type: str or ~azure.mgmt.devtestlabs.models.SourceControlType
    :ivar folder_path: The folder containing artifacts.
    :vartype folder_path: str
    :ivar arm_template_folder_path: The folder containing Azure Resource Manager templates.
    :vartype arm_template_folder_path: str
    :ivar branch_ref: The artifact source's branch reference.
    :vartype branch_ref: str
    :ivar security_token: The security token to authenticate to the artifact source.
    :vartype security_token: str
    :ivar status: Indicates if the artifact source is enabled (values: Enabled, Disabled). Known
     values are: "Enabled" and "Disabled".
    :vartype status: str or ~azure.mgmt.devtestlabs.models.EnableStatus
    :ivar created_date: The artifact source's creation date.
    :vartype created_date: ~datetime.datetime
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    display_name: Optional[str] = rest_field(
        name="displayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The artifact source's display name."""
    uri: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The artifact source's URI."""
    source_type: Optional[Union[str, "_models.SourceControlType"]] = rest_field(
        name="sourceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The artifact source's type. Known values are: \"VsoGit\", \"GitHub\", and \"StorageAccount\"."""
    folder_path: Optional[str] = rest_field(
        name="folderPath", visibility=["read", "create", "update", "delete", "query"]
    )
    """The folder containing artifacts."""
    arm_template_folder_path: Optional[str] = rest_field(
        name="armTemplateFolderPath", visibility=["read", "create", "update", "delete", "query"]
    )
    """The folder containing Azure Resource Manager templates."""
    branch_ref: Optional[str] = rest_field(name="branchRef", visibility=["read", "create", "update", "delete", "query"])
    """The artifact source's branch reference."""
    security_token: Optional[str] = rest_field(
        name="securityToken", visibility=["read", "create", "update", "delete", "query"]
    )
    """The security token to authenticate to the artifact source."""
    status: Optional[Union[str, "_models.EnableStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates if the artifact source is enabled (values: Enabled, Disabled). Known values are:
     \"Enabled\" and \"Disabled\"."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The artifact source's creation date."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        uri: Optional[str] = None,
        source_type: Optional[Union[str, "_models.SourceControlType"]] = None,
        folder_path: Optional[str] = None,
        arm_template_folder_path: Optional[str] = None,
        branch_ref: Optional[str] = None,
        security_token: Optional[str] = None,
        status: Optional[Union[str, "_models.EnableStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AttachDiskProperties(_Model):
    """Properties of the disk to attach.

    :ivar leased_by_lab_vm_id: The resource ID of the Lab virtual machine to which the disk is
     attached.
    :vartype leased_by_lab_vm_id: str
    """

    leased_by_lab_vm_id: Optional[str] = rest_field(
        name="leasedByLabVmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the Lab virtual machine to which the disk is attached."""

    @overload
    def __init__(
        self,
        *,
        leased_by_lab_vm_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AttachNewDataDiskOptions(_Model):
    """Properties to attach new disk to the Virtual Machine.

    :ivar disk_size_gi_b: Size of the disk to be attached in Gibibytes.
    :vartype disk_size_gi_b: int
    :ivar disk_name: The name of the disk to be attached.
    :vartype disk_name: str
    :ivar disk_type: The storage type for the disk (i.e. Standard, Premium). Known values are:
     "Standard", "Premium", and "StandardSSD".
    :vartype disk_type: str or ~azure.mgmt.devtestlabs.models.StorageType
    """

    disk_size_gi_b: Optional[int] = rest_field(
        name="diskSizeGiB", visibility=["read", "create", "update", "delete", "query"]
    )
    """Size of the disk to be attached in Gibibytes."""
    disk_name: Optional[str] = rest_field(name="diskName", visibility=["read", "create", "update", "delete", "query"])
    """The name of the disk to be attached."""
    disk_type: Optional[Union[str, "_models.StorageType"]] = rest_field(
        name="diskType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The storage type for the disk (i.e. Standard, Premium). Known values are: \"Standard\",
     \"Premium\", and \"StandardSSD\"."""

    @overload
    def __init__(
        self,
        *,
        disk_size_gi_b: Optional[int] = None,
        disk_name: Optional[str] = None,
        disk_type: Optional[Union[str, "_models.StorageType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BulkCreationParameters(_Model):
    """Parameters for creating multiple virtual machines as a single action.

    :ivar instance_count: The number of virtual machine instances to create.
    :vartype instance_count: int
    """

    instance_count: Optional[int] = rest_field(
        name="instanceCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """The number of virtual machine instances to create."""

    @overload
    def __init__(
        self,
        *,
        instance_count: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ComputeDataDisk(_Model):
    """A data disks attached to a virtual machine.

    :ivar name: Gets data disk name.
    :vartype name: str
    :ivar disk_uri: When backed by a blob, the URI of underlying blob.
    :vartype disk_uri: str
    :ivar managed_disk_id: When backed by managed disk, this is the ID of the compute disk
     resource.
    :vartype managed_disk_id: str
    :ivar disk_size_gi_b: Gets data disk size in GiB.
    :vartype disk_size_gi_b: int
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets data disk name."""
    disk_uri: Optional[str] = rest_field(name="diskUri", visibility=["read", "create", "update", "delete", "query"])
    """When backed by a blob, the URI of underlying blob."""
    managed_disk_id: Optional[str] = rest_field(
        name="managedDiskId", visibility=["read", "create", "update", "delete", "query"]
    )
    """When backed by managed disk, this is the ID of the compute disk resource."""
    disk_size_gi_b: Optional[int] = rest_field(
        name="diskSizeGiB", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets data disk size in GiB."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        disk_uri: Optional[str] = None,
        managed_disk_id: Optional[str] = None,
        disk_size_gi_b: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ComputeVmInstanceViewStatus(_Model):
    """Status information about a virtual machine.

    :ivar code: Gets the status Code.
    :vartype code: str
    :ivar display_status: Gets the short localizable label for the status.
    :vartype display_status: str
    :ivar message: Gets the message associated with the status.
    :vartype message: str
    """

    code: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets the status Code."""
    display_status: Optional[str] = rest_field(
        name="displayStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets the short localizable label for the status."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets the message associated with the status."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        display_status: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ComputeVmProperties(_Model):
    """Properties of a virtual machine returned by the Microsoft.Compute API.

    :ivar statuses: Gets the statuses of the virtual machine.
    :vartype statuses: list[~azure.mgmt.devtestlabs.models.ComputeVmInstanceViewStatus]
    :ivar os_type: Gets the OS type of the virtual machine.
    :vartype os_type: str
    :ivar vm_size: Gets the size of the virtual machine.
    :vartype vm_size: str
    :ivar network_interface_id: Gets the network interface ID of the virtual machine.
    :vartype network_interface_id: str
    :ivar os_disk_id: Gets OS disk blob uri for the virtual machine.
    :vartype os_disk_id: str
    :ivar data_disk_ids: Gets data disks blob uri for the virtual machine.
    :vartype data_disk_ids: list[str]
    :ivar data_disks: Gets all data disks attached to the virtual machine.
    :vartype data_disks: list[~azure.mgmt.devtestlabs.models.ComputeDataDisk]
    """

    statuses: Optional[List["_models.ComputeVmInstanceViewStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets the statuses of the virtual machine."""
    os_type: Optional[str] = rest_field(name="osType", visibility=["read", "create", "update", "delete", "query"])
    """Gets the OS type of the virtual machine."""
    vm_size: Optional[str] = rest_field(name="vmSize", visibility=["read", "create", "update", "delete", "query"])
    """Gets the size of the virtual machine."""
    network_interface_id: Optional[str] = rest_field(
        name="networkInterfaceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets the network interface ID of the virtual machine."""
    os_disk_id: Optional[str] = rest_field(name="osDiskId", visibility=["read", "create", "update", "delete", "query"])
    """Gets OS disk blob uri for the virtual machine."""
    data_disk_ids: Optional[List[str]] = rest_field(
        name="dataDiskIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets data disks blob uri for the virtual machine."""
    data_disks: Optional[List["_models.ComputeDataDisk"]] = rest_field(
        name="dataDisks", visibility=["read", "create", "update", "delete", "query"]
    )
    """Gets all data disks attached to the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        statuses: Optional[List["_models.ComputeVmInstanceViewStatus"]] = None,
        os_type: Optional[str] = None,
        vm_size: Optional[str] = None,
        network_interface_id: Optional[str] = None,
        os_disk_id: Optional[str] = None,
        data_disk_ids: Optional[List[str]] = None,
        data_disks: Optional[List["_models.ComputeDataDisk"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CostThresholdProperties(_Model):
    """Properties of a cost threshold item.

    :ivar threshold_id: The ID of the cost threshold item.
    :vartype threshold_id: str
    :ivar percentage_threshold: The value of the percentage cost threshold.
    :vartype percentage_threshold: ~azure.mgmt.devtestlabs.models.PercentageCostThresholdProperties
    :ivar display_on_chart: Indicates whether this threshold will be displayed on cost charts.
     Known values are: "Enabled" and "Disabled".
    :vartype display_on_chart: str or ~azure.mgmt.devtestlabs.models.CostThresholdStatus
    :ivar send_notification_when_exceeded: Indicates whether notifications will be sent when this
     threshold is exceeded. Known values are: "Enabled" and "Disabled".
    :vartype send_notification_when_exceeded: str or
     ~azure.mgmt.devtestlabs.models.CostThresholdStatus
    :ivar notification_sent: Indicates the datetime when notifications were last sent for this
     threshold.
    :vartype notification_sent: str
    """

    threshold_id: Optional[str] = rest_field(
        name="thresholdId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ID of the cost threshold item."""
    percentage_threshold: Optional["_models.PercentageCostThresholdProperties"] = rest_field(
        name="percentageThreshold", visibility=["read", "create", "update", "delete", "query"]
    )
    """The value of the percentage cost threshold."""
    display_on_chart: Optional[Union[str, "_models.CostThresholdStatus"]] = rest_field(
        name="displayOnChart", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether this threshold will be displayed on cost charts. Known values are:
     \"Enabled\" and \"Disabled\"."""
    send_notification_when_exceeded: Optional[Union[str, "_models.CostThresholdStatus"]] = rest_field(
        name="sendNotificationWhenExceeded", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether notifications will be sent when this threshold is exceeded. Known values are:
     \"Enabled\" and \"Disabled\"."""
    notification_sent: Optional[str] = rest_field(
        name="notificationSent", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates the datetime when notifications were last sent for this threshold."""

    @overload
    def __init__(
        self,
        *,
        threshold_id: Optional[str] = None,
        percentage_threshold: Optional["_models.PercentageCostThresholdProperties"] = None,
        display_on_chart: Optional[Union[str, "_models.CostThresholdStatus"]] = None,
        send_notification_when_exceeded: Optional[Union[str, "_models.CostThresholdStatus"]] = None,
        notification_sent: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomImage(Resource):
    """A custom image.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.CustomImageProperties
    """

    properties: "_models.CustomImageProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = [
        "vm",
        "vhd",
        "description",
        "author",
        "creation_date",
        "managed_image_id",
        "managed_snapshot_id",
        "data_disk_storage_info",
        "custom_image_plan",
        "is_plan_authorized",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.CustomImageProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CustomImageFragment(UpdateResource):
    """A custom image.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomImageProperties(_Model):
    """Properties of a custom image.

    :ivar vm: The virtual machine from which the image is to be created.
    :vartype vm: ~azure.mgmt.devtestlabs.models.CustomImagePropertiesFromVm
    :ivar vhd: The VHD from which the image is to be created.
    :vartype vhd: ~azure.mgmt.devtestlabs.models.CustomImagePropertiesCustom
    :ivar description: The description of the custom image.
    :vartype description: str
    :ivar author: The author of the custom image.
    :vartype author: str
    :ivar creation_date: The creation date of the custom image.
    :vartype creation_date: ~datetime.datetime
    :ivar managed_image_id: The Managed Image Id backing the custom image.
    :vartype managed_image_id: str
    :ivar managed_snapshot_id: The Managed Snapshot Id backing the custom image.
    :vartype managed_snapshot_id: str
    :ivar data_disk_storage_info: Storage information about the data disks present in the custom
     image.
    :vartype data_disk_storage_info: list[~azure.mgmt.devtestlabs.models.DataDiskStorageTypeInfo]
    :ivar custom_image_plan: Storage information about the plan related to this custom image.
    :vartype custom_image_plan: ~azure.mgmt.devtestlabs.models.CustomImagePropertiesFromPlan
    :ivar is_plan_authorized: Whether or not the custom images underlying offer/plan has been
     enabled for programmatic deployment.
    :vartype is_plan_authorized: bool
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    vm: Optional["_models.CustomImagePropertiesFromVm"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The virtual machine from which the image is to be created."""
    vhd: Optional["_models.CustomImagePropertiesCustom"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The VHD from which the image is to be created."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the custom image."""
    author: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The author of the custom image."""
    creation_date: Optional[datetime.datetime] = rest_field(name="creationDate", visibility=["read"], format="rfc3339")
    """The creation date of the custom image."""
    managed_image_id: Optional[str] = rest_field(
        name="managedImageId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Managed Image Id backing the custom image."""
    managed_snapshot_id: Optional[str] = rest_field(
        name="managedSnapshotId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Managed Snapshot Id backing the custom image."""
    data_disk_storage_info: Optional[List["_models.DataDiskStorageTypeInfo"]] = rest_field(
        name="dataDiskStorageInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Storage information about the data disks present in the custom image."""
    custom_image_plan: Optional["_models.CustomImagePropertiesFromPlan"] = rest_field(
        name="customImagePlan", visibility=["read", "create", "update", "delete", "query"]
    )
    """Storage information about the plan related to this custom image."""
    is_plan_authorized: Optional[bool] = rest_field(
        name="isPlanAuthorized", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether or not the custom images underlying offer/plan has been enabled for programmatic
     deployment."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        vm: Optional["_models.CustomImagePropertiesFromVm"] = None,
        vhd: Optional["_models.CustomImagePropertiesCustom"] = None,
        description: Optional[str] = None,
        author: Optional[str] = None,
        managed_image_id: Optional[str] = None,
        managed_snapshot_id: Optional[str] = None,
        data_disk_storage_info: Optional[List["_models.DataDiskStorageTypeInfo"]] = None,
        custom_image_plan: Optional["_models.CustomImagePropertiesFromPlan"] = None,
        is_plan_authorized: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomImagePropertiesCustom(_Model):
    """Properties for creating a custom image from a VHD.

    :ivar image_name: The image name.
    :vartype image_name: str
    :ivar sys_prep: Indicates whether sysprep has been run on the VHD.
    :vartype sys_prep: bool
    :ivar os_type: The OS type of the custom image (i.e. Windows, Linux). Required. Known values
     are: "Windows", "Linux", and "None".
    :vartype os_type: str or ~azure.mgmt.devtestlabs.models.CustomImageOsType
    """

    image_name: Optional[str] = rest_field(name="imageName", visibility=["read", "create", "update", "delete", "query"])
    """The image name."""
    sys_prep: Optional[bool] = rest_field(name="sysPrep", visibility=["read", "create", "update", "delete", "query"])
    """Indicates whether sysprep has been run on the VHD."""
    os_type: Union[str, "_models.CustomImageOsType"] = rest_field(
        name="osType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The OS type of the custom image (i.e. Windows, Linux). Required. Known values are: \"Windows\",
     \"Linux\", and \"None\"."""

    @overload
    def __init__(
        self,
        *,
        os_type: Union[str, "_models.CustomImageOsType"],
        image_name: Optional[str] = None,
        sys_prep: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomImagePropertiesFromPlan(_Model):
    """Properties for plan on a custom image.

    :ivar id: The id of the plan, equivalent to name of the plan.
    :vartype id: str
    :ivar publisher: The publisher for the plan from the marketplace image the custom image is
     derived from.
    :vartype publisher: str
    :ivar offer: The offer for the plan from the marketplace image the custom image is derived
     from.
    :vartype offer: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The id of the plan, equivalent to name of the plan."""
    publisher: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The publisher for the plan from the marketplace image the custom image is derived from."""
    offer: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The offer for the plan from the marketplace image the custom image is derived from."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        publisher: Optional[str] = None,
        offer: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomImagePropertiesFromVm(_Model):
    """Properties for creating a custom image from a virtual machine.

    :ivar source_vm_id: The source vm identifier.
    :vartype source_vm_id: str
    :ivar windows_os_info: The Windows OS information of the VM.
    :vartype windows_os_info: ~azure.mgmt.devtestlabs.models.WindowsOsInfo
    :ivar linux_os_info: The Linux OS information of the VM.
    :vartype linux_os_info: ~azure.mgmt.devtestlabs.models.LinuxOsInfo
    """

    source_vm_id: Optional[str] = rest_field(
        name="sourceVmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The source vm identifier."""
    windows_os_info: Optional["_models.WindowsOsInfo"] = rest_field(
        name="windowsOsInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Windows OS information of the VM."""
    linux_os_info: Optional["_models.LinuxOsInfo"] = rest_field(
        name="linuxOsInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Linux OS information of the VM."""

    @overload
    def __init__(
        self,
        *,
        source_vm_id: Optional[str] = None,
        windows_os_info: Optional["_models.WindowsOsInfo"] = None,
        linux_os_info: Optional["_models.LinuxOsInfo"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataDiskProperties(_Model):
    """Request body for adding a new or existing data disk to a virtual machine.

    :ivar attach_new_data_disk_options: Specifies options to attach a new disk to the virtual
     machine.
    :vartype attach_new_data_disk_options: ~azure.mgmt.devtestlabs.models.AttachNewDataDiskOptions
    :ivar existing_lab_disk_id: Specifies the existing lab disk id to attach to virtual machine.
    :vartype existing_lab_disk_id: str
    :ivar host_caching: Caching option for a data disk (i.e. None, ReadOnly, ReadWrite). Known
     values are: "None", "ReadOnly", and "ReadWrite".
    :vartype host_caching: str or ~azure.mgmt.devtestlabs.models.HostCachingOptions
    """

    attach_new_data_disk_options: Optional["_models.AttachNewDataDiskOptions"] = rest_field(
        name="attachNewDataDiskOptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """Specifies options to attach a new disk to the virtual machine."""
    existing_lab_disk_id: Optional[str] = rest_field(
        name="existingLabDiskId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Specifies the existing lab disk id to attach to virtual machine."""
    host_caching: Optional[Union[str, "_models.HostCachingOptions"]] = rest_field(
        name="hostCaching", visibility=["read", "create", "update", "delete", "query"]
    )
    """Caching option for a data disk (i.e. None, ReadOnly, ReadWrite). Known values are: \"None\",
     \"ReadOnly\", and \"ReadWrite\"."""

    @overload
    def __init__(
        self,
        *,
        attach_new_data_disk_options: Optional["_models.AttachNewDataDiskOptions"] = None,
        existing_lab_disk_id: Optional[str] = None,
        host_caching: Optional[Union[str, "_models.HostCachingOptions"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataDiskStorageTypeInfo(_Model):
    """Storage information about the data disks present in the custom image.

    :ivar lun: Disk Lun.
    :vartype lun: str
    :ivar storage_type: Disk Storage Type. Known values are: "Standard", "Premium", and
     "StandardSSD".
    :vartype storage_type: str or ~azure.mgmt.devtestlabs.models.StorageType
    """

    lun: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Disk Lun."""
    storage_type: Optional[Union[str, "_models.StorageType"]] = rest_field(
        name="storageType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Disk Storage Type. Known values are: \"Standard\", \"Premium\", and \"StandardSSD\"."""

    @overload
    def __init__(
        self,
        *,
        lun: Optional[str] = None,
        storage_type: Optional[Union[str, "_models.StorageType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DayDetails(_Model):
    """Properties of a daily schedule.

    :ivar time: The time of day the schedule will occur.
    :vartype time: str
    """

    time: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The time of day the schedule will occur."""

    @overload
    def __init__(
        self,
        *,
        time: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DetachDataDiskProperties(_Model):
    """Request body for detaching data disk from a virtual machine.

    :ivar existing_lab_disk_id: Specifies the disk resource ID to detach from virtual machine.
    :vartype existing_lab_disk_id: str
    """

    existing_lab_disk_id: Optional[str] = rest_field(
        name="existingLabDiskId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Specifies the disk resource ID to detach from virtual machine."""

    @overload
    def __init__(
        self,
        *,
        existing_lab_disk_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DetachDiskProperties(_Model):
    """Properties of the disk to detach.

    :ivar leased_by_lab_vm_id: The resource ID of the Lab VM to which the disk is attached.
    :vartype leased_by_lab_vm_id: str
    """

    leased_by_lab_vm_id: Optional[str] = rest_field(
        name="leasedByLabVmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the Lab VM to which the disk is attached."""

    @overload
    def __init__(
        self,
        *,
        leased_by_lab_vm_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Disk(Resource):
    """A Disk.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the disk. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.DiskProperties
    """

    properties: "_models.DiskProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the disk. Required."""

    __flattened_items = [
        "disk_type",
        "disk_size_gi_b",
        "leased_by_lab_vm_id",
        "disk_blob_name",
        "disk_uri",
        "storage_account_id",
        "created_date",
        "host_caching",
        "managed_disk_id",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.DiskProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DiskFragment(UpdateResource):
    """A Disk.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiskProperties(_Model):
    """Properties of a disk.

    :ivar disk_type: The storage type for the disk (i.e. Standard, Premium). Known values are:
     "Standard", "Premium", and "StandardSSD".
    :vartype disk_type: str or ~azure.mgmt.devtestlabs.models.StorageType
    :ivar disk_size_gi_b: The size of the disk in Gibibytes.
    :vartype disk_size_gi_b: int
    :ivar leased_by_lab_vm_id: The resource ID of the VM to which this disk is leased.
    :vartype leased_by_lab_vm_id: str
    :ivar disk_blob_name: When backed by a blob, the name of the VHD blob without extension.
    :vartype disk_blob_name: str
    :ivar disk_uri: When backed by a blob, the URI of underlying blob.
    :vartype disk_uri: str
    :ivar storage_account_id: When backed by a blob, the storage account where the blob is.
    :vartype storage_account_id: str
    :ivar created_date: The creation date of the disk.
    :vartype created_date: ~datetime.datetime
    :ivar host_caching: The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite).
    :vartype host_caching: str
    :ivar managed_disk_id: When backed by managed disk, this is the ID of the compute disk
     resource.
    :vartype managed_disk_id: str
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    disk_type: Optional[Union[str, "_models.StorageType"]] = rest_field(
        name="diskType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The storage type for the disk (i.e. Standard, Premium). Known values are: \"Standard\",
     \"Premium\", and \"StandardSSD\"."""
    disk_size_gi_b: Optional[int] = rest_field(
        name="diskSizeGiB", visibility=["read", "create", "update", "delete", "query"]
    )
    """The size of the disk in Gibibytes."""
    leased_by_lab_vm_id: Optional[str] = rest_field(
        name="leasedByLabVmId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the VM to which this disk is leased."""
    disk_blob_name: Optional[str] = rest_field(
        name="diskBlobName", visibility=["read", "create", "update", "delete", "query"]
    )
    """When backed by a blob, the name of the VHD blob without extension."""
    disk_uri: Optional[str] = rest_field(name="diskUri", visibility=["read", "create", "update", "delete", "query"])
    """When backed by a blob, the URI of underlying blob."""
    storage_account_id: Optional[str] = rest_field(
        name="storageAccountId", visibility=["read", "create", "update", "delete", "query"]
    )
    """When backed by a blob, the storage account where the blob is."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the disk."""
    host_caching: Optional[str] = rest_field(
        name="hostCaching", visibility=["read", "create", "update", "delete", "query"]
    )
    """The host caching policy of the disk (i.e. None, ReadOnly, ReadWrite)."""
    managed_disk_id: Optional[str] = rest_field(
        name="managedDiskId", visibility=["read", "create", "update", "delete", "query"]
    )
    """When backed by managed disk, this is the ID of the compute disk resource."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        disk_type: Optional[Union[str, "_models.StorageType"]] = None,
        disk_size_gi_b: Optional[int] = None,
        leased_by_lab_vm_id: Optional[str] = None,
        disk_blob_name: Optional[str] = None,
        disk_uri: Optional[str] = None,
        storage_account_id: Optional[str] = None,
        host_caching: Optional[str] = None,
        managed_disk_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DtlEnvironment(Resource):
    """An environment, which is essentially an ARM template deployment.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the environment. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.EnvironmentProperties
    """

    properties: "_models.EnvironmentProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the environment. Required."""

    __flattened_items = [
        "deployment_properties",
        "arm_template_display_name",
        "resource_group_id",
        "created_by_user",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.EnvironmentProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DtlEnvironmentFragment(UpdateResource):
    """An environment, which is essentially an ARM template deployment.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EnvironmentDeploymentProperties(_Model):
    """Properties of an environment deployment.

    :ivar arm_template_id: The Azure Resource Manager template's identifier.
    :vartype arm_template_id: str
    :ivar parameters: The parameters of the Azure Resource Manager template.
    :vartype parameters: list[~azure.mgmt.devtestlabs.models.ArmTemplateParameterProperties]
    """

    arm_template_id: Optional[str] = rest_field(
        name="armTemplateId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Azure Resource Manager template's identifier."""
    parameters: Optional[List["_models.ArmTemplateParameterProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The parameters of the Azure Resource Manager template."""

    @overload
    def __init__(
        self,
        *,
        arm_template_id: Optional[str] = None,
        parameters: Optional[List["_models.ArmTemplateParameterProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EnvironmentProperties(_Model):
    """Properties of an environment.

    :ivar deployment_properties: The deployment properties of the environment.
    :vartype deployment_properties: ~azure.mgmt.devtestlabs.models.EnvironmentDeploymentProperties
    :ivar arm_template_display_name: The display name of the Azure Resource Manager template that
     produced the environment.
    :vartype arm_template_display_name: str
    :ivar resource_group_id: The identifier of the resource group containing the environment's
     resources.
    :vartype resource_group_id: str
    :ivar created_by_user: The creator of the environment.
    :vartype created_by_user: str
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    deployment_properties: Optional["_models.EnvironmentDeploymentProperties"] = rest_field(
        name="deploymentProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """The deployment properties of the environment."""
    arm_template_display_name: Optional[str] = rest_field(
        name="armTemplateDisplayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The display name of the Azure Resource Manager template that produced the environment."""
    resource_group_id: Optional[str] = rest_field(name="resourceGroupId", visibility=["read"])
    """The identifier of the resource group containing the environment's resources."""
    created_by_user: Optional[str] = rest_field(name="createdByUser", visibility=["read"])
    """The creator of the environment."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        deployment_properties: Optional["_models.EnvironmentDeploymentProperties"] = None,
        arm_template_display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.devtestlabs.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.devtestlabs.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.devtestlabs.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EvaluatePoliciesProperties(_Model):
    """Properties for evaluating a policy set.

    :ivar fact_name: The fact name.
    :vartype fact_name: str
    :ivar fact_data: The fact data.
    :vartype fact_data: str
    :ivar value_offset: The value offset.
    :vartype value_offset: str
    :ivar user_object_id: The user for which policies will be evaluated.
    :vartype user_object_id: str
    """

    fact_name: Optional[str] = rest_field(name="factName", visibility=["read", "create", "update", "delete", "query"])
    """The fact name."""
    fact_data: Optional[str] = rest_field(name="factData", visibility=["read", "create", "update", "delete", "query"])
    """The fact data."""
    value_offset: Optional[str] = rest_field(
        name="valueOffset", visibility=["read", "create", "update", "delete", "query"]
    )
    """The value offset."""
    user_object_id: Optional[str] = rest_field(
        name="userObjectId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The user for which policies will be evaluated."""

    @overload
    def __init__(
        self,
        *,
        fact_name: Optional[str] = None,
        fact_data: Optional[str] = None,
        value_offset: Optional[str] = None,
        user_object_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EvaluatePoliciesRequest(_Model):
    """Request body for evaluating a policy set.

    :ivar policies: Policies to evaluate.
    :vartype policies: list[~azure.mgmt.devtestlabs.models.EvaluatePoliciesProperties]
    """

    policies: Optional[List["_models.EvaluatePoliciesProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Policies to evaluate."""

    @overload
    def __init__(
        self,
        *,
        policies: Optional[List["_models.EvaluatePoliciesProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EvaluatePoliciesResponse(_Model):
    """Response body for evaluating a policy set.

    :ivar results: Results of evaluating a policy set.
    :vartype results: list[~azure.mgmt.devtestlabs.models.PolicySetResult]
    """

    results: Optional[List["_models.PolicySetResult"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Results of evaluating a policy set."""

    @overload
    def __init__(
        self,
        *,
        results: Optional[List["_models.PolicySetResult"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Event(_Model):
    """An event to be notified for.

    :ivar event_name: The event type for which this notification is enabled (i.e. AutoShutdown,
     Cost). Known values are: "AutoShutdown" and "Cost".
    :vartype event_name: str or ~azure.mgmt.devtestlabs.models.NotificationChannelEventType
    """

    event_name: Optional[Union[str, "_models.NotificationChannelEventType"]] = rest_field(
        name="eventName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The event type for which this notification is enabled (i.e. AutoShutdown, Cost). Known values
     are: \"AutoShutdown\" and \"Cost\"."""

    @overload
    def __init__(
        self,
        *,
        event_name: Optional[Union[str, "_models.NotificationChannelEventType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExportResourceUsageParameters(_Model):
    """The parameters of the export operation.

    :ivar blob_storage_absolute_sas_uri: The blob storage absolute sas uri with write permission to
     the container which the usage data needs to be uploaded to.
    :vartype blob_storage_absolute_sas_uri: str
    :ivar usage_start_date: The start time of the usage. If not provided, usage will be reported
     since the beginning of data collection.
    :vartype usage_start_date: ~datetime.datetime
    """

    blob_storage_absolute_sas_uri: Optional[str] = rest_field(
        name="blobStorageAbsoluteSasUri", visibility=["read", "create", "update", "delete", "query"]
    )
    """The blob storage absolute sas uri with write permission to the container which the usage data
     needs to be uploaded to."""
    usage_start_date: Optional[datetime.datetime] = rest_field(
        name="usageStartDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The start time of the usage. If not provided, usage will be reported since the beginning of
     data collection."""

    @overload
    def __init__(
        self,
        *,
        blob_storage_absolute_sas_uri: Optional[str] = None,
        usage_start_date: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExternalSubnet(_Model):
    """Subnet information as returned by the Microsoft.Network API.

    :ivar id: Gets or sets the identifier.
    :vartype id: str
    :ivar name: Gets or sets the name.
    :vartype name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the identifier."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Gets or sets the name."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Formula(Resource):
    """A formula for creating a VM, specifying an image base and other parameters.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the formula. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.FormulaProperties
    """

    properties: "_models.FormulaProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the formula. Required."""

    __flattened_items = [
        "description",
        "author",
        "os_type",
        "creation_date",
        "formula_content",
        "vm",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.FormulaProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class FormulaFragment(UpdateResource):
    """A formula for creating a VM, specifying an image base and other parameters.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FormulaProperties(_Model):
    """Properties of a formula.

    :ivar description: The description of the formula.
    :vartype description: str
    :ivar author: The author of the formula.
    :vartype author: str
    :ivar os_type: The OS type of the formula.
    :vartype os_type: str
    :ivar creation_date: The creation date of the formula.
    :vartype creation_date: ~datetime.datetime
    :ivar formula_content: The content of the formula.
    :vartype formula_content: ~azure.mgmt.devtestlabs.models.LabVirtualMachineCreationParameter
    :ivar vm: Information about a VM from which a formula is to be created.
    :vartype vm: ~azure.mgmt.devtestlabs.models.FormulaPropertiesFromVm
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the formula."""
    author: Optional[str] = rest_field(visibility=["read"])
    """The author of the formula."""
    os_type: Optional[str] = rest_field(name="osType", visibility=["read", "create", "update", "delete", "query"])
    """The OS type of the formula."""
    creation_date: Optional[datetime.datetime] = rest_field(name="creationDate", visibility=["read"], format="rfc3339")
    """The creation date of the formula."""
    formula_content: Optional["_models.LabVirtualMachineCreationParameter"] = rest_field(
        name="formulaContent", visibility=["read", "create", "update", "delete", "query"]
    )
    """The content of the formula."""
    vm: Optional["_models.FormulaPropertiesFromVm"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Information about a VM from which a formula is to be created."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        os_type: Optional[str] = None,
        formula_content: Optional["_models.LabVirtualMachineCreationParameter"] = None,
        vm: Optional["_models.FormulaPropertiesFromVm"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FormulaPropertiesFromVm(_Model):
    """Information about a VM from which a formula is to be created.

    :ivar lab_vm_id: The identifier of the VM from which a formula is to be created.
    :vartype lab_vm_id: str
    """

    lab_vm_id: Optional[str] = rest_field(name="labVmId", visibility=["read", "create", "update", "delete", "query"])
    """The identifier of the VM from which a formula is to be created."""

    @overload
    def __init__(
        self,
        *,
        lab_vm_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImage(Resource):
    """A gallery image.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the gallery image. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.GalleryImageProperties
    """

    properties: "_models.GalleryImageProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the gallery image. Required."""

    __flattened_items = [
        "author",
        "created_date",
        "description",
        "image_reference",
        "icon",
        "enabled",
        "plan_id",
        "is_plan_authorized",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.GalleryImageProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class GalleryImageProperties(_Model):
    """Properties of a gallery image.

    :ivar author: The author of the gallery image.
    :vartype author: str
    :ivar created_date: The creation date of the gallery image.
    :vartype created_date: ~datetime.datetime
    :ivar description: The description of the gallery image.
    :vartype description: str
    :ivar image_reference: The image reference of the gallery image.
    :vartype image_reference: ~azure.mgmt.devtestlabs.models.GalleryImageReference
    :ivar icon: The icon of the gallery image.
    :vartype icon: str
    :ivar enabled: Indicates whether this gallery image is enabled.
    :vartype enabled: bool
    :ivar plan_id: The third party plan that applies to this image.
    :vartype plan_id: str
    :ivar is_plan_authorized: Indicates if the plan has been authorized for programmatic
     deployment.
    :vartype is_plan_authorized: bool
    """

    author: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The author of the gallery image."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the gallery image."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the gallery image."""
    image_reference: Optional["_models.GalleryImageReference"] = rest_field(
        name="imageReference", visibility=["read", "create", "update", "delete", "query"]
    )
    """The image reference of the gallery image."""
    icon: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The icon of the gallery image."""
    enabled: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Indicates whether this gallery image is enabled."""
    plan_id: Optional[str] = rest_field(name="planId", visibility=["read", "create", "update", "delete", "query"])
    """The third party plan that applies to this image."""
    is_plan_authorized: Optional[bool] = rest_field(
        name="isPlanAuthorized", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates if the plan has been authorized for programmatic deployment."""

    @overload
    def __init__(
        self,
        *,
        author: Optional[str] = None,
        description: Optional[str] = None,
        image_reference: Optional["_models.GalleryImageReference"] = None,
        icon: Optional[str] = None,
        enabled: Optional[bool] = None,
        plan_id: Optional[str] = None,
        is_plan_authorized: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GalleryImageReference(_Model):
    """The reference information for an Azure Marketplace image.

    :ivar offer: The offer of the gallery image.
    :vartype offer: str
    :ivar publisher: The publisher of the gallery image.
    :vartype publisher: str
    :ivar sku: The SKU of the gallery image.
    :vartype sku: str
    :ivar os_type: The OS type of the gallery image.
    :vartype os_type: str
    :ivar version: The version of the gallery image.
    :vartype version: str
    """

    offer: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The offer of the gallery image."""
    publisher: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The publisher of the gallery image."""
    sku: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The SKU of the gallery image."""
    os_type: Optional[str] = rest_field(name="osType", visibility=["read", "create", "update", "delete", "query"])
    """The OS type of the gallery image."""
    version: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version of the gallery image."""

    @overload
    def __init__(
        self,
        *,
        offer: Optional[str] = None,
        publisher: Optional[str] = None,
        sku: Optional[str] = None,
        os_type: Optional[str] = None,
        version: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GenerateArmTemplateRequest(_Model):
    """Parameters for generating an ARM template for deploying artifacts.

    :ivar virtual_machine_name: The resource name of the virtual machine.
    :vartype virtual_machine_name: str
    :ivar parameters: The parameters of the ARM template.
    :vartype parameters: list[~azure.mgmt.devtestlabs.models.ParameterInfo]
    :ivar location: The location of the virtual machine.
    :vartype location: str
    :ivar file_upload_options: Options for uploading the files for the artifact.
     UploadFilesAndGenerateSasTokens is the default value. Known values are:
     "UploadFilesAndGenerateSasTokens" and "None".
    :vartype file_upload_options: str or ~azure.mgmt.devtestlabs.models.FileUploadOptions
    """

    virtual_machine_name: Optional[str] = rest_field(
        name="virtualMachineName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource name of the virtual machine."""
    parameters: Optional[List["_models.ParameterInfo"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The parameters of the ARM template."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The location of the virtual machine."""
    file_upload_options: Optional[Union[str, "_models.FileUploadOptions"]] = rest_field(
        name="fileUploadOptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """Options for uploading the files for the artifact. UploadFilesAndGenerateSasTokens is the
     default value. Known values are: \"UploadFilesAndGenerateSasTokens\" and \"None\"."""

    @overload
    def __init__(
        self,
        *,
        virtual_machine_name: Optional[str] = None,
        parameters: Optional[List["_models.ParameterInfo"]] = None,
        location: Optional[str] = None,
        file_upload_options: Optional[Union[str, "_models.FileUploadOptions"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GenerateUploadUriParameter(_Model):
    """Properties for generating an upload URI.

    :ivar blob_name: The blob name of the upload URI.
    :vartype blob_name: str
    """

    blob_name: Optional[str] = rest_field(name="blobName", visibility=["read", "create", "update", "delete", "query"])
    """The blob name of the upload URI."""

    @overload
    def __init__(
        self,
        *,
        blob_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GenerateUploadUriResponse(_Model):
    """Response body for generating an upload URI.

    :ivar upload_uri: The upload URI for the VHD.
    :vartype upload_uri: str
    """

    upload_uri: Optional[str] = rest_field(name="uploadUri", visibility=["read", "create", "update", "delete", "query"])
    """The upload URI for the VHD."""

    @overload
    def __init__(
        self,
        *,
        upload_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HourDetails(_Model):
    """Properties of an hourly schedule.

    :ivar minute: Minutes of the hour the schedule will run.
    :vartype minute: int
    """

    minute: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Minutes of the hour the schedule will run."""

    @overload
    def __init__(
        self,
        *,
        minute: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IdentityProperties(_Model):
    """Properties of a managed identity.

    :ivar type: Managed identity. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.devtestlabs.models.ManagedIdentityType
    :ivar principal_id: The principal id of resource identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant identifier of resource.
    :vartype tenant_id: str
    :ivar client_secret_url: The client secret URL of the identity.
    :vartype client_secret_url: str
    """

    type: Optional[Union[str, "_models.ManagedIdentityType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Managed identity. Known values are: \"None\", \"SystemAssigned\", \"UserAssigned\", and
     \"SystemAssigned,UserAssigned\"."""
    principal_id: Optional[str] = rest_field(
        name="principalId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The principal id of resource identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read", "create", "update", "delete", "query"])
    """The tenant identifier of resource."""
    client_secret_url: Optional[str] = rest_field(
        name="clientSecretUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """The client secret URL of the identity."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ManagedIdentityType"]] = None,
        principal_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        client_secret_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImportLabVirtualMachineRequest(_Model):
    """This represents the payload required to import a virtual machine from a different lab into the
    current one.

    :ivar source_virtual_machine_resource_id: The full resource ID of the virtual machine to be
     imported.
    :vartype source_virtual_machine_resource_id: str
    :ivar destination_virtual_machine_name: The name of the virtual machine in the destination lab.
    :vartype destination_virtual_machine_name: str
    """

    source_virtual_machine_resource_id: Optional[str] = rest_field(
        name="sourceVirtualMachineResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The full resource ID of the virtual machine to be imported."""
    destination_virtual_machine_name: Optional[str] = rest_field(
        name="destinationVirtualMachineName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name of the virtual machine in the destination lab."""

    @overload
    def __init__(
        self,
        *,
        source_virtual_machine_resource_id: Optional[str] = None,
        destination_virtual_machine_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InboundNatRule(_Model):
    """A rule for NAT - exposing a VM's port (backendPort) on the public IP address using a load
    balancer.

    :ivar transport_protocol: The transport protocol for the endpoint. Known values are: "Tcp" and
     "Udp".
    :vartype transport_protocol: str or ~azure.mgmt.devtestlabs.models.TransportProtocol
    :ivar frontend_port: The external endpoint port of the inbound connection. Possible values
     range between 1 and 65535, inclusive. If unspecified, a value will be allocated automatically.
    :vartype frontend_port: int
    :ivar backend_port: The port to which the external traffic will be redirected.
    :vartype backend_port: int
    """

    transport_protocol: Optional[Union[str, "_models.TransportProtocol"]] = rest_field(
        name="transportProtocol", visibility=["read", "create", "update", "delete", "query"]
    )
    """The transport protocol for the endpoint. Known values are: \"Tcp\" and \"Udp\"."""
    frontend_port: Optional[int] = rest_field(
        name="frontendPort", visibility=["read", "create", "update", "delete", "query"]
    )
    """The external endpoint port of the inbound connection. Possible values range between 1 and
     65535, inclusive. If unspecified, a value will be allocated automatically."""
    backend_port: Optional[int] = rest_field(
        name="backendPort", visibility=["read", "create", "update", "delete", "query"]
    )
    """The port to which the external traffic will be redirected."""

    @overload
    def __init__(
        self,
        *,
        transport_protocol: Optional[Union[str, "_models.TransportProtocol"]] = None,
        frontend_port: Optional[int] = None,
        backend_port: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Lab(Resource):
    """A lab.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.LabProperties
    """

    properties: "_models.LabProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = [
        "default_storage_account",
        "default_premium_storage_account",
        "artifacts_storage_account",
        "premium_data_disk_storage_account",
        "vault_name",
        "lab_storage_type",
        "mandatory_artifacts_resource_ids_linux",
        "mandatory_artifacts_resource_ids_windows",
        "created_date",
        "premium_data_disks",
        "environment_permission",
        "announcement",
        "support",
        "vm_creation_resource_group",
        "public_ip_id",
        "load_balancer_id",
        "network_security_group_id",
        "extended_properties",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.LabProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class LabAnnouncementProperties(_Model):
    """Properties of a lab's announcement banner.

    :ivar title: The plain text title for the lab announcement.
    :vartype title: str
    :ivar markdown: The markdown text (if any) that this lab displays in the UI. If left
     empty/null, nothing will be shown.
    :vartype markdown: str
    :ivar enabled: Is the lab announcement active/enabled at this time?. Known values are:
     "Enabled" and "Disabled".
    :vartype enabled: str or ~azure.mgmt.devtestlabs.models.EnableStatus
    :ivar expiration_date: The time at which the announcement expires (null for never).
    :vartype expiration_date: ~datetime.datetime
    :ivar expired: Has this announcement expired?.
    :vartype expired: bool
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    title: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The plain text title for the lab announcement."""
    markdown: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will
     be shown."""
    enabled: Optional[Union[str, "_models.EnableStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Is the lab announcement active/enabled at this time?. Known values are: \"Enabled\" and
     \"Disabled\"."""
    expiration_date: Optional[datetime.datetime] = rest_field(
        name="expirationDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The time at which the announcement expires (null for never)."""
    expired: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Has this announcement expired?."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        title: Optional[str] = None,
        markdown: Optional[str] = None,
        enabled: Optional[Union[str, "_models.EnableStatus"]] = None,
        expiration_date: Optional[datetime.datetime] = None,
        expired: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabCost(Resource):
    """A cost item.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.LabCostProperties
    """

    properties: "_models.LabCostProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = [
        "target_cost",
        "lab_cost_summary",
        "lab_cost_details",
        "resource_costs",
        "currency_code",
        "start_date_time",
        "end_date_time",
        "created_date",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.LabCostProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class LabCostDetailsProperties(_Model):
    """The properties of a lab cost item.

    :ivar date: The date of the cost item.
    :vartype date: ~datetime.datetime
    :ivar cost: The cost component of the cost item.
    :vartype cost: float
    :ivar cost_type: The type of the cost. Known values are: "Unavailable", "Reported", and
     "Projected".
    :vartype cost_type: str or ~azure.mgmt.devtestlabs.models.CostType
    """

    date: Optional[datetime.datetime] = rest_field(
        visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The date of the cost item."""
    cost: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The cost component of the cost item."""
    cost_type: Optional[Union[str, "_models.CostType"]] = rest_field(
        name="costType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of the cost. Known values are: \"Unavailable\", \"Reported\", and \"Projected\"."""

    @overload
    def __init__(
        self,
        *,
        date: Optional[datetime.datetime] = None,
        cost: Optional[float] = None,
        cost_type: Optional[Union[str, "_models.CostType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabCostProperties(_Model):
    """Properties of a cost item.

    :ivar target_cost: The target cost properties.
    :vartype target_cost: ~azure.mgmt.devtestlabs.models.TargetCostProperties
    :ivar lab_cost_summary: The lab cost summary component of the cost data.
    :vartype lab_cost_summary: ~azure.mgmt.devtestlabs.models.LabCostSummaryProperties
    :ivar lab_cost_details: The lab cost details component of the cost data.
    :vartype lab_cost_details: list[~azure.mgmt.devtestlabs.models.LabCostDetailsProperties]
    :ivar resource_costs: The resource cost component of the cost data.
    :vartype resource_costs: list[~azure.mgmt.devtestlabs.models.LabResourceCostProperties]
    :ivar currency_code: The currency code of the cost.
    :vartype currency_code: str
    :ivar start_date_time: The start time of the cost data.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The end time of the cost data.
    :vartype end_date_time: ~datetime.datetime
    :ivar created_date: The creation date of the cost.
    :vartype created_date: ~datetime.datetime
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    target_cost: Optional["_models.TargetCostProperties"] = rest_field(
        name="targetCost", visibility=["read", "create", "update", "delete", "query"]
    )
    """The target cost properties."""
    lab_cost_summary: Optional["_models.LabCostSummaryProperties"] = rest_field(
        name="labCostSummary", visibility=["read"]
    )
    """The lab cost summary component of the cost data."""
    lab_cost_details: Optional[List["_models.LabCostDetailsProperties"]] = rest_field(
        name="labCostDetails", visibility=["read"]
    )
    """The lab cost details component of the cost data."""
    resource_costs: Optional[List["_models.LabResourceCostProperties"]] = rest_field(
        name="resourceCosts", visibility=["read"]
    )
    """The resource cost component of the cost data."""
    currency_code: Optional[str] = rest_field(
        name="currencyCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """The currency code of the cost."""
    start_date_time: Optional[datetime.datetime] = rest_field(
        name="startDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The start time of the cost data."""
    end_date_time: Optional[datetime.datetime] = rest_field(
        name="endDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The end time of the cost data."""
    created_date: Optional[datetime.datetime] = rest_field(
        name="createdDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The creation date of the cost."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        target_cost: Optional["_models.TargetCostProperties"] = None,
        currency_code: Optional[str] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        created_date: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabCostSummaryProperties(_Model):
    """The properties of the cost summary.

    :ivar estimated_lab_cost: The cost component of the cost item.
    :vartype estimated_lab_cost: float
    """

    estimated_lab_cost: Optional[float] = rest_field(
        name="estimatedLabCost", visibility=["read", "create", "update", "delete", "query"]
    )
    """The cost component of the cost item."""

    @overload
    def __init__(
        self,
        *,
        estimated_lab_cost: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabFragment(UpdateResource):
    """A lab.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabProperties(_Model):
    """Properties of a lab.

    :ivar default_storage_account: The lab's default storage account.
    :vartype default_storage_account: str
    :ivar default_premium_storage_account: The lab's default premium storage account.
    :vartype default_premium_storage_account: str
    :ivar artifacts_storage_account: The lab's artifact storage account.
    :vartype artifacts_storage_account: str
    :ivar premium_data_disk_storage_account: The lab's premium data disk storage account.
    :vartype premium_data_disk_storage_account: str
    :ivar vault_name: The lab's Key vault.
    :vartype vault_name: str
    :ivar lab_storage_type: Type of storage used by the lab. It can be either Premium or Standard.
     Default is Premium. Known values are: "Standard", "Premium", and "StandardSSD".
    :vartype lab_storage_type: str or ~azure.mgmt.devtestlabs.models.StorageType
    :ivar mandatory_artifacts_resource_ids_linux: The ordered list of artifact resource IDs that
     should be applied on all Linux VM creations by default, prior to the artifacts specified by the
     user.
    :vartype mandatory_artifacts_resource_ids_linux: list[str]
    :ivar mandatory_artifacts_resource_ids_windows: The ordered list of artifact resource IDs that
     should be applied on all Windows VM creations by default, prior to the artifacts specified by
     the user.
    :vartype mandatory_artifacts_resource_ids_windows: list[str]
    :ivar created_date: The creation date of the lab.
    :vartype created_date: ~datetime.datetime
    :ivar premium_data_disks: The setting to enable usage of premium data disks.
     When its value is 'Enabled', creation of standard or premium data disks is allowed.
     When its value is 'Disabled', only creation of standard data disks is allowed. Known values
     are: "Disabled" and "Enabled".
    :vartype premium_data_disks: str or ~azure.mgmt.devtestlabs.models.PremiumDataDisk
    :ivar environment_permission: The access rights to be granted to the user when provisioning an
     environment. Known values are: "Reader" and "Contributor".
    :vartype environment_permission: str or ~azure.mgmt.devtestlabs.models.EnvironmentPermission
    :ivar announcement: The properties of any lab announcement associated with this lab.
    :vartype announcement: ~azure.mgmt.devtestlabs.models.LabAnnouncementProperties
    :ivar support: The properties of any lab support message associated with this lab.
    :vartype support: ~azure.mgmt.devtestlabs.models.LabSupportProperties
    :ivar vm_creation_resource_group: The resource group in which all new lab virtual machines will
     be created. To let DevTest Labs manage resource group creation, set this value to null.
    :vartype vm_creation_resource_group: str
    :ivar public_ip_id: The public IP address for the lab's load balancer.
    :vartype public_ip_id: str
    :ivar load_balancer_id: The load balancer used to for lab VMs that use shared IP address.
    :vartype load_balancer_id: str
    :ivar network_security_group_id: The Network Security Group attached to the lab VMs Network
     interfaces to restrict open ports.
    :vartype network_security_group_id: str
    :ivar extended_properties: Extended properties of the lab used for experimental features.
    :vartype extended_properties: dict[str, str]
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    default_storage_account: Optional[str] = rest_field(name="defaultStorageAccount", visibility=["read"])
    """The lab's default storage account."""
    default_premium_storage_account: Optional[str] = rest_field(
        name="defaultPremiumStorageAccount", visibility=["read"]
    )
    """The lab's default premium storage account."""
    artifacts_storage_account: Optional[str] = rest_field(name="artifactsStorageAccount", visibility=["read"])
    """The lab's artifact storage account."""
    premium_data_disk_storage_account: Optional[str] = rest_field(
        name="premiumDataDiskStorageAccount", visibility=["read"]
    )
    """The lab's premium data disk storage account."""
    vault_name: Optional[str] = rest_field(name="vaultName", visibility=["read"])
    """The lab's Key vault."""
    lab_storage_type: Optional[Union[str, "_models.StorageType"]] = rest_field(
        name="labStorageType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
     Known values are: \"Standard\", \"Premium\", and \"StandardSSD\"."""
    mandatory_artifacts_resource_ids_linux: Optional[List[str]] = rest_field(
        name="mandatoryArtifactsResourceIdsLinux", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ordered list of artifact resource IDs that should be applied on all Linux VM creations by
     default, prior to the artifacts specified by the user."""
    mandatory_artifacts_resource_ids_windows: Optional[List[str]] = rest_field(
        name="mandatoryArtifactsResourceIdsWindows", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ordered list of artifact resource IDs that should be applied on all Windows VM creations by
     default, prior to the artifacts specified by the user."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the lab."""
    premium_data_disks: Optional[Union[str, "_models.PremiumDataDisk"]] = rest_field(
        name="premiumDataDisks", visibility=["read", "create", "update", "delete", "query"]
    )
    """The setting to enable usage of premium data disks.
     When its value is 'Enabled', creation of standard or premium data disks is allowed.
     When its value is 'Disabled', only creation of standard data disks is allowed. Known values
     are: \"Disabled\" and \"Enabled\"."""
    environment_permission: Optional[Union[str, "_models.EnvironmentPermission"]] = rest_field(
        name="environmentPermission", visibility=["read", "create", "update", "delete", "query"]
    )
    """The access rights to be granted to the user when provisioning an environment. Known values are:
     \"Reader\" and \"Contributor\"."""
    announcement: Optional["_models.LabAnnouncementProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of any lab announcement associated with this lab."""
    support: Optional["_models.LabSupportProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of any lab support message associated with this lab."""
    vm_creation_resource_group: Optional[str] = rest_field(name="vmCreationResourceGroup", visibility=["read"])
    """The resource group in which all new lab virtual machines will be created. To let DevTest Labs
     manage resource group creation, set this value to null."""
    public_ip_id: Optional[str] = rest_field(name="publicIpId", visibility=["read"])
    """The public IP address for the lab's load balancer."""
    load_balancer_id: Optional[str] = rest_field(name="loadBalancerId", visibility=["read"])
    """The load balancer used to for lab VMs that use shared IP address."""
    network_security_group_id: Optional[str] = rest_field(name="networkSecurityGroupId", visibility=["read"])
    """The Network Security Group attached to the lab VMs Network interfaces to restrict open ports."""
    extended_properties: Optional[Dict[str, str]] = rest_field(
        name="extendedProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Extended properties of the lab used for experimental features."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        lab_storage_type: Optional[Union[str, "_models.StorageType"]] = None,
        mandatory_artifacts_resource_ids_linux: Optional[List[str]] = None,
        mandatory_artifacts_resource_ids_windows: Optional[List[str]] = None,
        premium_data_disks: Optional[Union[str, "_models.PremiumDataDisk"]] = None,
        environment_permission: Optional[Union[str, "_models.EnvironmentPermission"]] = None,
        announcement: Optional["_models.LabAnnouncementProperties"] = None,
        support: Optional["_models.LabSupportProperties"] = None,
        extended_properties: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabResourceCostProperties(_Model):
    """The properties of a resource cost item.

    :ivar resourcename: The name of the resource.
    :vartype resourcename: str
    :ivar resource_u_id: The unique identifier of the resource.
    :vartype resource_u_id: str
    :ivar resource_cost: The cost component of the resource cost item.
    :vartype resource_cost: float
    :ivar resource_type: The logical resource type (ex. virtualmachine, storageaccount).
    :vartype resource_type: str
    :ivar resource_owner: The owner of the resource (ex. `janedoe@microsoft.com
     <mailto:janedoe@microsoft.com>`_).
    :vartype resource_owner: str
    :ivar resource_pricing_tier: The category of the resource (ex. Premium_LRS, Standard_DS1).
    :vartype resource_pricing_tier: str
    :ivar resource_status: The status of the resource (ex. Active).
    :vartype resource_status: str
    :ivar resource_id: The ID of the resource.
    :vartype resource_id: str
    :ivar external_resource_id: The ID of the external resource.
    :vartype external_resource_id: str
    """

    resourcename: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the resource."""
    resource_u_id: Optional[str] = rest_field(
        name="resourceUId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The unique identifier of the resource."""
    resource_cost: Optional[float] = rest_field(
        name="resourceCost", visibility=["read", "create", "update", "delete", "query"]
    )
    """The cost component of the resource cost item."""
    resource_type: Optional[str] = rest_field(
        name="resourceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The logical resource type (ex. virtualmachine, storageaccount)."""
    resource_owner: Optional[str] = rest_field(
        name="resourceOwner", visibility=["read", "create", "update", "delete", "query"]
    )
    """The owner of the resource (ex. `janedoe@microsoft.com <mailto:janedoe@microsoft.com>`_)."""
    resource_pricing_tier: Optional[str] = rest_field(
        name="resourcePricingTier", visibility=["read", "create", "update", "delete", "query"]
    )
    """The category of the resource (ex. Premium_LRS, Standard_DS1)."""
    resource_status: Optional[str] = rest_field(
        name="resourceStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the resource (ex. Active)."""
    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ID of the resource."""
    external_resource_id: Optional[str] = rest_field(
        name="externalResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ID of the external resource."""

    @overload
    def __init__(
        self,
        *,
        resourcename: Optional[str] = None,
        resource_u_id: Optional[str] = None,
        resource_cost: Optional[float] = None,
        resource_type: Optional[str] = None,
        resource_owner: Optional[str] = None,
        resource_pricing_tier: Optional[str] = None,
        resource_status: Optional[str] = None,
        resource_id: Optional[str] = None,
        external_resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabSupportProperties(_Model):
    """Properties of a lab's support banner.

    :ivar enabled: Is the lab support banner active/enabled at this time?. Known values are:
     "Enabled" and "Disabled".
    :vartype enabled: str or ~azure.mgmt.devtestlabs.models.EnableStatus
    :ivar markdown: The markdown text (if any) that this lab displays in the UI. If left
     empty/null, nothing will be shown.
    :vartype markdown: str
    """

    enabled: Optional[Union[str, "_models.EnableStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Is the lab support banner active/enabled at this time?. Known values are: \"Enabled\" and
     \"Disabled\"."""
    markdown: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will
     be shown."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[Union[str, "_models.EnableStatus"]] = None,
        markdown: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabVhd(_Model):
    """Properties of a VHD in the lab.

    :ivar id: The URI to the VHD.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The URI to the VHD."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabVirtualMachine(Resource):
    """A virtual machine.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.LabVirtualMachineProperties
    """

    properties: "_models.LabVirtualMachineProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the resource. Required."""

    __flattened_items = [
        "notes",
        "owner_object_id",
        "owner_user_principal_name",
        "created_by_user_id",
        "created_by_user",
        "created_date",
        "compute_id",
        "custom_image_id",
        "os_type",
        "size",
        "user_name",
        "password",
        "ssh_key",
        "is_authentication_with_ssh_key",
        "fqdn",
        "lab_subnet_name",
        "lab_virtual_network_id",
        "disallow_public_ip_address",
        "artifacts",
        "artifact_deployment_status",
        "gallery_image_reference",
        "plan_id",
        "compute_vm",
        "network_interface",
        "applicable_schedule",
        "expiration_date",
        "allow_claim",
        "storage_type",
        "virtual_machine_creation_source",
        "environment_id",
        "data_disk_parameters",
        "schedule_parameters",
        "last_known_power_state",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.LabVirtualMachineProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class LabVirtualMachineCreationParameter(_Model):
    """Properties for creating a virtual machine.

    :ivar properties: The properties of the resource.
    :vartype properties:
     ~azure.mgmt.devtestlabs.models.LabVirtualMachineCreationParameterProperties
    :ivar name: The name of the virtual machine or environment.
    :vartype name: str
    :ivar location: The location of the new virtual machine or environment.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    properties: Optional["_models.LabVirtualMachineCreationParameterProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the resource."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the virtual machine or environment."""
    location: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The location of the new virtual machine or environment."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tags of the resource."""

    __flattened_items = [
        "bulk_creation_parameters",
        "notes",
        "owner_object_id",
        "owner_user_principal_name",
        "created_date",
        "custom_image_id",
        "size",
        "user_name",
        "password",
        "ssh_key",
        "is_authentication_with_ssh_key",
        "lab_subnet_name",
        "lab_virtual_network_id",
        "disallow_public_ip_address",
        "artifacts",
        "gallery_image_reference",
        "plan_id",
        "network_interface",
        "expiration_date",
        "allow_claim",
        "storage_type",
        "environment_id",
        "data_disk_parameters",
        "schedule_parameters",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.LabVirtualMachineCreationParameterProperties"] = None,
        name: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class LabVirtualMachineCreationParameterProperties(_Model):  # pylint: disable=name-too-long
    """Properties for virtual machine creation.

    :ivar bulk_creation_parameters: The number of virtual machine instances to create.
    :vartype bulk_creation_parameters: ~azure.mgmt.devtestlabs.models.BulkCreationParameters
    :ivar notes: The notes of the virtual machine.
    :vartype notes: str
    :ivar owner_object_id: The object identifier of the owner of the virtual machine.
    :vartype owner_object_id: str
    :ivar owner_user_principal_name: The user principal name of the virtual machine owner.
    :vartype owner_user_principal_name: str
    :ivar created_date: The creation date of the virtual machine.
    :vartype created_date: ~datetime.datetime
    :ivar custom_image_id: The custom image identifier of the virtual machine.
    :vartype custom_image_id: str
    :ivar size: The size of the virtual machine.
    :vartype size: str
    :ivar user_name: The user name of the virtual machine.
    :vartype user_name: str
    :ivar password: The password of the virtual machine administrator.
    :vartype password: str
    :ivar ssh_key: The SSH key of the virtual machine administrator.
    :vartype ssh_key: str
    :ivar is_authentication_with_ssh_key: Indicates whether this virtual machine uses an SSH key
     for authentication.
    :vartype is_authentication_with_ssh_key: bool
    :ivar lab_subnet_name: The lab subnet name of the virtual machine.
    :vartype lab_subnet_name: str
    :ivar lab_virtual_network_id: The lab virtual network identifier of the virtual machine.
    :vartype lab_virtual_network_id: str
    :ivar disallow_public_ip_address: Indicates whether the virtual machine is to be created
     without a public IP address.
    :vartype disallow_public_ip_address: bool
    :ivar artifacts: The artifacts to be installed on the virtual machine.
    :vartype artifacts: list[~azure.mgmt.devtestlabs.models.ArtifactInstallProperties]
    :ivar gallery_image_reference: The Microsoft Azure Marketplace image reference of the virtual
     machine.
    :vartype gallery_image_reference: ~azure.mgmt.devtestlabs.models.GalleryImageReference
    :ivar plan_id: The id of the plan associated with the virtual machine image.
    :vartype plan_id: str
    :ivar network_interface: The network interface properties.
    :vartype network_interface: ~azure.mgmt.devtestlabs.models.NetworkInterfaceProperties
    :ivar expiration_date: The expiration date for VM.
    :vartype expiration_date: ~datetime.datetime
    :ivar allow_claim: Indicates whether another user can take ownership of the virtual machine.
    :vartype allow_claim: bool
    :ivar storage_type: Storage type to use for virtual machine (i.e. Standard, Premium).
    :vartype storage_type: str
    :ivar environment_id: The resource ID of the environment that contains this virtual machine, if
     any.
    :vartype environment_id: str
    :ivar data_disk_parameters: New or existing data disks to attach to the virtual machine after
     creation.
    :vartype data_disk_parameters: list[~azure.mgmt.devtestlabs.models.DataDiskProperties]
    :ivar schedule_parameters: Virtual Machine schedules to be created.
    :vartype schedule_parameters: list[~azure.mgmt.devtestlabs.models.ScheduleCreationParameter]
    """

    bulk_creation_parameters: Optional["_models.BulkCreationParameters"] = rest_field(
        name="bulkCreationParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """The number of virtual machine instances to create."""
    notes: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The notes of the virtual machine."""
    owner_object_id: Optional[str] = rest_field(
        name="ownerObjectId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The object identifier of the owner of the virtual machine."""
    owner_user_principal_name: Optional[str] = rest_field(
        name="ownerUserPrincipalName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The user principal name of the virtual machine owner."""
    created_date: Optional[datetime.datetime] = rest_field(
        name="createdDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The creation date of the virtual machine."""
    custom_image_id: Optional[str] = rest_field(
        name="customImageId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The custom image identifier of the virtual machine."""
    size: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The size of the virtual machine."""
    user_name: Optional[str] = rest_field(name="userName", visibility=["read", "create", "update", "delete", "query"])
    """The user name of the virtual machine."""
    password: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The password of the virtual machine administrator."""
    ssh_key: Optional[str] = rest_field(name="sshKey", visibility=["read", "create", "update", "delete", "query"])
    """The SSH key of the virtual machine administrator."""
    is_authentication_with_ssh_key: Optional[bool] = rest_field(
        name="isAuthenticationWithSshKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether this virtual machine uses an SSH key for authentication."""
    lab_subnet_name: Optional[str] = rest_field(
        name="labSubnetName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The lab subnet name of the virtual machine."""
    lab_virtual_network_id: Optional[str] = rest_field(
        name="labVirtualNetworkId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The lab virtual network identifier of the virtual machine."""
    disallow_public_ip_address: Optional[bool] = rest_field(
        name="disallowPublicIpAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the virtual machine is to be created without a public IP address."""
    artifacts: Optional[List["_models.ArtifactInstallProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The artifacts to be installed on the virtual machine."""
    gallery_image_reference: Optional["_models.GalleryImageReference"] = rest_field(
        name="galleryImageReference", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Microsoft Azure Marketplace image reference of the virtual machine."""
    plan_id: Optional[str] = rest_field(name="planId", visibility=["read", "create", "update", "delete", "query"])
    """The id of the plan associated with the virtual machine image."""
    network_interface: Optional["_models.NetworkInterfaceProperties"] = rest_field(
        name="networkInterface", visibility=["read", "create", "update", "delete", "query"]
    )
    """The network interface properties."""
    expiration_date: Optional[datetime.datetime] = rest_field(
        name="expirationDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The expiration date for VM."""
    allow_claim: Optional[bool] = rest_field(
        name="allowClaim", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether another user can take ownership of the virtual machine."""
    storage_type: Optional[str] = rest_field(
        name="storageType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Storage type to use for virtual machine (i.e. Standard, Premium)."""
    environment_id: Optional[str] = rest_field(
        name="environmentId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the environment that contains this virtual machine, if any."""
    data_disk_parameters: Optional[List["_models.DataDiskProperties"]] = rest_field(
        name="dataDiskParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """New or existing data disks to attach to the virtual machine after creation."""
    schedule_parameters: Optional[List["_models.ScheduleCreationParameter"]] = rest_field(
        name="scheduleParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """Virtual Machine schedules to be created."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        bulk_creation_parameters: Optional["_models.BulkCreationParameters"] = None,
        notes: Optional[str] = None,
        owner_object_id: Optional[str] = None,
        owner_user_principal_name: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        custom_image_id: Optional[str] = None,
        size: Optional[str] = None,
        user_name: Optional[str] = None,
        password: Optional[str] = None,
        ssh_key: Optional[str] = None,
        is_authentication_with_ssh_key: Optional[bool] = None,
        lab_subnet_name: Optional[str] = None,
        lab_virtual_network_id: Optional[str] = None,
        disallow_public_ip_address: Optional[bool] = None,
        artifacts: Optional[List["_models.ArtifactInstallProperties"]] = None,
        gallery_image_reference: Optional["_models.GalleryImageReference"] = None,
        plan_id: Optional[str] = None,
        network_interface: Optional["_models.NetworkInterfaceProperties"] = None,
        expiration_date: Optional[datetime.datetime] = None,
        allow_claim: Optional[bool] = None,
        storage_type: Optional[str] = None,
        environment_id: Optional[str] = None,
        data_disk_parameters: Optional[List["_models.DataDiskProperties"]] = None,
        schedule_parameters: Optional[List["_models.ScheduleCreationParameter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabVirtualMachineFragment(UpdateResource):
    """A virtual machine.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LabVirtualMachineProperties(_Model):
    """Properties of a virtual machine.

    :ivar notes: The notes of the virtual machine.
    :vartype notes: str
    :ivar owner_object_id: The object identifier of the owner of the virtual machine.
    :vartype owner_object_id: str
    :ivar owner_user_principal_name: The user principal name of the virtual machine owner.
    :vartype owner_user_principal_name: str
    :ivar created_by_user_id: The object identifier of the creator of the virtual machine.
    :vartype created_by_user_id: str
    :ivar created_by_user: The email address of creator of the virtual machine.
    :vartype created_by_user: str
    :ivar created_date: The creation date of the virtual machine.
    :vartype created_date: ~datetime.datetime
    :ivar compute_id: The resource identifier (Microsoft.Compute) of the virtual machine.
    :vartype compute_id: str
    :ivar custom_image_id: The custom image identifier of the virtual machine.
    :vartype custom_image_id: str
    :ivar os_type: The OS type of the virtual machine.
    :vartype os_type: str
    :ivar size: The size of the virtual machine.
    :vartype size: str
    :ivar user_name: The user name of the virtual machine.
    :vartype user_name: str
    :ivar password: The password of the virtual machine administrator.
    :vartype password: str
    :ivar ssh_key: The SSH key of the virtual machine administrator.
    :vartype ssh_key: str
    :ivar is_authentication_with_ssh_key: Indicates whether this virtual machine uses an SSH key
     for authentication.
    :vartype is_authentication_with_ssh_key: bool
    :ivar fqdn: The fully-qualified domain name of the virtual machine.
    :vartype fqdn: str
    :ivar lab_subnet_name: The lab subnet name of the virtual machine.
    :vartype lab_subnet_name: str
    :ivar lab_virtual_network_id: The lab virtual network identifier of the virtual machine.
    :vartype lab_virtual_network_id: str
    :ivar disallow_public_ip_address: Indicates whether the virtual machine is to be created
     without a public IP address.
    :vartype disallow_public_ip_address: bool
    :ivar artifacts: The artifacts to be installed on the virtual machine.
    :vartype artifacts: list[~azure.mgmt.devtestlabs.models.ArtifactInstallProperties]
    :ivar artifact_deployment_status: The artifact deployment status for the virtual machine.
    :vartype artifact_deployment_status:
     ~azure.mgmt.devtestlabs.models.ArtifactDeploymentStatusProperties
    :ivar gallery_image_reference: The Microsoft Azure Marketplace image reference of the virtual
     machine.
    :vartype gallery_image_reference: ~azure.mgmt.devtestlabs.models.GalleryImageReference
    :ivar plan_id: The id of the plan associated with the virtual machine image.
    :vartype plan_id: str
    :ivar compute_vm: The compute virtual machine properties.
    :vartype compute_vm: ~azure.mgmt.devtestlabs.models.ComputeVmProperties
    :ivar network_interface: The network interface properties.
    :vartype network_interface: ~azure.mgmt.devtestlabs.models.NetworkInterfaceProperties
    :ivar applicable_schedule: The applicable schedule for the virtual machine.
    :vartype applicable_schedule: ~azure.mgmt.devtestlabs.models.ApplicableSchedule
    :ivar expiration_date: The expiration date for VM.
    :vartype expiration_date: ~datetime.datetime
    :ivar allow_claim: Indicates whether another user can take ownership of the virtual machine.
    :vartype allow_claim: bool
    :ivar storage_type: Storage type to use for virtual machine (i.e. Standard, Premium).
    :vartype storage_type: str
    :ivar virtual_machine_creation_source: Tells source of creation of lab virtual machine. Output
     property only. Known values are: "FromCustomImage", "FromGalleryImage", and
     "FromSharedGalleryImage".
    :vartype virtual_machine_creation_source: str or
     ~azure.mgmt.devtestlabs.models.VirtualMachineCreationSource
    :ivar environment_id: The resource ID of the environment that contains this virtual machine, if
     any.
    :vartype environment_id: str
    :ivar data_disk_parameters: New or existing data disks to attach to the virtual machine after
     creation.
    :vartype data_disk_parameters: list[~azure.mgmt.devtestlabs.models.DataDiskProperties]
    :ivar schedule_parameters: Virtual Machine schedules to be created.
    :vartype schedule_parameters: list[~azure.mgmt.devtestlabs.models.ScheduleCreationParameter]
    :ivar last_known_power_state: Last known compute power state captured in DTL.
    :vartype last_known_power_state: str
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    notes: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The notes of the virtual machine."""
    owner_object_id: Optional[str] = rest_field(
        name="ownerObjectId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The object identifier of the owner of the virtual machine."""
    owner_user_principal_name: Optional[str] = rest_field(
        name="ownerUserPrincipalName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The user principal name of the virtual machine owner."""
    created_by_user_id: Optional[str] = rest_field(name="createdByUserId", visibility=["read"])
    """The object identifier of the creator of the virtual machine."""
    created_by_user: Optional[str] = rest_field(name="createdByUser", visibility=["read"])
    """The email address of creator of the virtual machine."""
    created_date: Optional[datetime.datetime] = rest_field(
        name="createdDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The creation date of the virtual machine."""
    compute_id: Optional[str] = rest_field(name="computeId", visibility=["read"])
    """The resource identifier (Microsoft.Compute) of the virtual machine."""
    custom_image_id: Optional[str] = rest_field(
        name="customImageId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The custom image identifier of the virtual machine."""
    os_type: Optional[str] = rest_field(name="osType", visibility=["read"])
    """The OS type of the virtual machine."""
    size: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The size of the virtual machine."""
    user_name: Optional[str] = rest_field(name="userName", visibility=["read", "create", "update", "delete", "query"])
    """The user name of the virtual machine."""
    password: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The password of the virtual machine administrator."""
    ssh_key: Optional[str] = rest_field(name="sshKey", visibility=["read", "create", "update", "delete", "query"])
    """The SSH key of the virtual machine administrator."""
    is_authentication_with_ssh_key: Optional[bool] = rest_field(
        name="isAuthenticationWithSshKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether this virtual machine uses an SSH key for authentication."""
    fqdn: Optional[str] = rest_field(visibility=["read"])
    """The fully-qualified domain name of the virtual machine."""
    lab_subnet_name: Optional[str] = rest_field(
        name="labSubnetName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The lab subnet name of the virtual machine."""
    lab_virtual_network_id: Optional[str] = rest_field(
        name="labVirtualNetworkId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The lab virtual network identifier of the virtual machine."""
    disallow_public_ip_address: Optional[bool] = rest_field(
        name="disallowPublicIpAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the virtual machine is to be created without a public IP address."""
    artifacts: Optional[List["_models.ArtifactInstallProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The artifacts to be installed on the virtual machine."""
    artifact_deployment_status: Optional["_models.ArtifactDeploymentStatusProperties"] = rest_field(
        name="artifactDeploymentStatus", visibility=["read"]
    )
    """The artifact deployment status for the virtual machine."""
    gallery_image_reference: Optional["_models.GalleryImageReference"] = rest_field(
        name="galleryImageReference", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Microsoft Azure Marketplace image reference of the virtual machine."""
    plan_id: Optional[str] = rest_field(name="planId", visibility=["read", "create", "update", "delete", "query"])
    """The id of the plan associated with the virtual machine image."""
    compute_vm: Optional["_models.ComputeVmProperties"] = rest_field(name="computeVm", visibility=["read"])
    """The compute virtual machine properties."""
    network_interface: Optional["_models.NetworkInterfaceProperties"] = rest_field(
        name="networkInterface", visibility=["read", "create", "update", "delete", "query"]
    )
    """The network interface properties."""
    applicable_schedule: Optional["_models.ApplicableSchedule"] = rest_field(
        name="applicableSchedule", visibility=["read"]
    )
    """The applicable schedule for the virtual machine."""
    expiration_date: Optional[datetime.datetime] = rest_field(
        name="expirationDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The expiration date for VM."""
    allow_claim: Optional[bool] = rest_field(
        name="allowClaim", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether another user can take ownership of the virtual machine."""
    storage_type: Optional[str] = rest_field(
        name="storageType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Storage type to use for virtual machine (i.e. Standard, Premium)."""
    virtual_machine_creation_source: Optional[Union[str, "_models.VirtualMachineCreationSource"]] = rest_field(
        name="virtualMachineCreationSource", visibility=["read"]
    )
    """Tells source of creation of lab virtual machine. Output property only. Known values are:
     \"FromCustomImage\", \"FromGalleryImage\", and \"FromSharedGalleryImage\"."""
    environment_id: Optional[str] = rest_field(
        name="environmentId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the environment that contains this virtual machine, if any."""
    data_disk_parameters: Optional[List["_models.DataDiskProperties"]] = rest_field(
        name="dataDiskParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """New or existing data disks to attach to the virtual machine after creation."""
    schedule_parameters: Optional[List["_models.ScheduleCreationParameter"]] = rest_field(
        name="scheduleParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """Virtual Machine schedules to be created."""
    last_known_power_state: Optional[str] = rest_field(name="lastKnownPowerState", visibility=["read"])
    """Last known compute power state captured in DTL."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        notes: Optional[str] = None,
        owner_object_id: Optional[str] = None,
        owner_user_principal_name: Optional[str] = None,
        created_date: Optional[datetime.datetime] = None,
        custom_image_id: Optional[str] = None,
        size: Optional[str] = None,
        user_name: Optional[str] = None,
        password: Optional[str] = None,
        ssh_key: Optional[str] = None,
        is_authentication_with_ssh_key: Optional[bool] = None,
        lab_subnet_name: Optional[str] = None,
        lab_virtual_network_id: Optional[str] = None,
        disallow_public_ip_address: Optional[bool] = None,
        artifacts: Optional[List["_models.ArtifactInstallProperties"]] = None,
        gallery_image_reference: Optional["_models.GalleryImageReference"] = None,
        plan_id: Optional[str] = None,
        network_interface: Optional["_models.NetworkInterfaceProperties"] = None,
        expiration_date: Optional[datetime.datetime] = None,
        allow_claim: Optional[bool] = None,
        storage_type: Optional[str] = None,
        environment_id: Optional[str] = None,
        data_disk_parameters: Optional[List["_models.DataDiskProperties"]] = None,
        schedule_parameters: Optional[List["_models.ScheduleCreationParameter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LinuxOsInfo(_Model):
    """Information about a Linux OS.

    :ivar linux_os_state: The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested,
     DeprovisionApplied). Known values are: "NonDeprovisioned", "DeprovisionRequested", and
     "DeprovisionApplied".
    :vartype linux_os_state: str or ~azure.mgmt.devtestlabs.models.LinuxOsState
    """

    linux_os_state: Optional[Union[str, "_models.LinuxOsState"]] = rest_field(
        name="linuxOsState", visibility=["read", "create", "update", "delete", "query"]
    )
    """The state of the Linux OS (i.e. NonDeprovisioned, DeprovisionRequested, DeprovisionApplied).
     Known values are: \"NonDeprovisioned\", \"DeprovisionRequested\", and \"DeprovisionApplied\"."""

    @overload
    def __init__(
        self,
        *,
        linux_os_state: Optional[Union[str, "_models.LinuxOsState"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkInterfaceProperties(_Model):
    """Properties of a network interface.

    :ivar virtual_network_id: The resource ID of the virtual network.
    :vartype virtual_network_id: str
    :ivar subnet_id: The resource ID of the sub net.
    :vartype subnet_id: str
    :ivar public_ip_address_id: The resource ID of the public IP address.
    :vartype public_ip_address_id: str
    :ivar public_ip_address: The public IP address.
    :vartype public_ip_address: str
    :ivar private_ip_address: The private IP address.
    :vartype private_ip_address: str
    :ivar dns_name: The DNS name.
    :vartype dns_name: str
    :ivar rdp_authority: The RdpAuthority property is a server DNS host name or IP address followed
     by the service port number for RDP (Remote Desktop Protocol).
    :vartype rdp_authority: str
    :ivar ssh_authority: The SshAuthority property is a server DNS host name or IP address followed
     by the service port number for SSH.
    :vartype ssh_authority: str
    :ivar shared_public_ip_address_configuration: The configuration for sharing a public IP address
     across multiple virtual machines.
    :vartype shared_public_ip_address_configuration:
     ~azure.mgmt.devtestlabs.models.SharedPublicIpAddressConfiguration
    """

    virtual_network_id: Optional[str] = rest_field(
        name="virtualNetworkId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the virtual network."""
    subnet_id: Optional[str] = rest_field(name="subnetId", visibility=["read", "create", "update", "delete", "query"])
    """The resource ID of the sub net."""
    public_ip_address_id: Optional[str] = rest_field(
        name="publicIpAddressId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the public IP address."""
    public_ip_address: Optional[str] = rest_field(
        name="publicIpAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """The public IP address."""
    private_ip_address: Optional[str] = rest_field(
        name="privateIpAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    """The private IP address."""
    dns_name: Optional[str] = rest_field(name="dnsName", visibility=["read", "create", "update", "delete", "query"])
    """The DNS name."""
    rdp_authority: Optional[str] = rest_field(
        name="rdpAuthority", visibility=["read", "create", "update", "delete", "query"]
    )
    """The RdpAuthority property is a server DNS host name or IP address followed by the service port
     number for RDP (Remote Desktop Protocol)."""
    ssh_authority: Optional[str] = rest_field(
        name="sshAuthority", visibility=["read", "create", "update", "delete", "query"]
    )
    """The SshAuthority property is a server DNS host name or IP address followed by the service port
     number for SSH."""
    shared_public_ip_address_configuration: Optional["_models.SharedPublicIpAddressConfiguration"] = rest_field(
        name="sharedPublicIpAddressConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """The configuration for sharing a public IP address across multiple virtual machines."""

    @overload
    def __init__(
        self,
        *,
        virtual_network_id: Optional[str] = None,
        subnet_id: Optional[str] = None,
        public_ip_address_id: Optional[str] = None,
        public_ip_address: Optional[str] = None,
        private_ip_address: Optional[str] = None,
        dns_name: Optional[str] = None,
        rdp_authority: Optional[str] = None,
        ssh_authority: Optional[str] = None,
        shared_public_ip_address_configuration: Optional["_models.SharedPublicIpAddressConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NotificationChannel(Resource):
    """A notification.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.NotificationChannelProperties
    """

    properties: "_models.NotificationChannelProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the resource. Required."""

    __flattened_items = [
        "web_hook_url",
        "email_recipient",
        "notification_locale",
        "description",
        "events",
        "created_date",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.NotificationChannelProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class NotificationChannelFragment(UpdateResource):
    """A notification.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NotificationChannelProperties(_Model):
    """Properties of a schedule.

    :ivar web_hook_url: The webhook URL to send notifications to.
    :vartype web_hook_url: str
    :ivar email_recipient: The email recipient to send notifications to (can be a list of
     semi-colon separated email addresses).
    :vartype email_recipient: str
    :ivar notification_locale: The locale to use when sending a notification (fallback for
     unsupported languages is EN).
    :vartype notification_locale: str
    :ivar description: Description of notification.
    :vartype description: str
    :ivar events: The list of event for which this notification is enabled.
    :vartype events: list[~azure.mgmt.devtestlabs.models.Event]
    :ivar created_date: The creation date of the notification channel.
    :vartype created_date: ~datetime.datetime
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    web_hook_url: Optional[str] = rest_field(
        name="webHookUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """The webhook URL to send notifications to."""
    email_recipient: Optional[str] = rest_field(
        name="emailRecipient", visibility=["read", "create", "update", "delete", "query"]
    )
    """The email recipient to send notifications to (can be a list of semi-colon separated email
     addresses)."""
    notification_locale: Optional[str] = rest_field(
        name="notificationLocale", visibility=["read", "create", "update", "delete", "query"]
    )
    """The locale to use when sending a notification (fallback for unsupported languages is EN)."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of notification."""
    events: Optional[List["_models.Event"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The list of event for which this notification is enabled."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the notification channel."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        web_hook_url: Optional[str] = None,
        email_recipient: Optional[str] = None,
        notification_locale: Optional[str] = None,
        description: Optional[str] = None,
        events: Optional[List["_models.Event"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NotificationSettings(_Model):
    """Notification settings for a schedule.

    :ivar status: If notifications are enabled for this schedule (i.e. Enabled, Disabled). Known
     values are: "Enabled" and "Disabled".
    :vartype status: str or ~azure.mgmt.devtestlabs.models.EnableStatus
    :ivar time_in_minutes: Time in minutes before event at which notification will be sent.
    :vartype time_in_minutes: int
    :ivar webhook_url: The webhook URL to which the notification will be sent.
    :vartype webhook_url: str
    :ivar email_recipient: The email recipient to send notifications to (can be a list of
     semi-colon separated email addresses).
    :vartype email_recipient: str
    :ivar notification_locale: The locale to use when sending a notification (fallback for
     unsupported languages is EN).
    :vartype notification_locale: str
    """

    status: Optional[Union[str, "_models.EnableStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """If notifications are enabled for this schedule (i.e. Enabled, Disabled). Known values are:
     \"Enabled\" and \"Disabled\"."""
    time_in_minutes: Optional[int] = rest_field(
        name="timeInMinutes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Time in minutes before event at which notification will be sent."""
    webhook_url: Optional[str] = rest_field(
        name="webhookUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """The webhook URL to which the notification will be sent."""
    email_recipient: Optional[str] = rest_field(
        name="emailRecipient", visibility=["read", "create", "update", "delete", "query"]
    )
    """The email recipient to send notifications to (can be a list of semi-colon separated email
     addresses)."""
    notification_locale: Optional[str] = rest_field(
        name="notificationLocale", visibility=["read", "create", "update", "delete", "query"]
    )
    """The locale to use when sending a notification (fallback for unsupported languages is EN)."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.EnableStatus"]] = None,
        time_in_minutes: Optional[int] = None,
        webhook_url: Optional[str] = None,
        email_recipient: Optional[str] = None,
        notification_locale: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NotifyParameters(_Model):
    """Properties for generating a Notification.

    :ivar event_name: The type of event (i.e. AutoShutdown, Cost). Known values are: "AutoShutdown"
     and "Cost".
    :vartype event_name: str or ~azure.mgmt.devtestlabs.models.NotificationChannelEventType
    :ivar json_payload: Properties for the notification in json format.
    :vartype json_payload: str
    """

    event_name: Optional[Union[str, "_models.NotificationChannelEventType"]] = rest_field(
        name="eventName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of event (i.e. AutoShutdown, Cost). Known values are: \"AutoShutdown\" and \"Cost\"."""
    json_payload: Optional[str] = rest_field(
        name="jsonPayload", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties for the notification in json format."""

    @overload
    def __init__(
        self,
        *,
        event_name: Optional[Union[str, "_models.NotificationChannelEventType"]] = None,
        json_payload: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OkResponse(_Model):
    """The request has succeeded."""


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.devtestlabs.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.devtestlabs.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.devtestlabs.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class OperationError(_Model):
    """Error details for the operation in case of a failure.

    :ivar code: The error code of the operation error.
    :vartype code: str
    :ivar message: The error message of the operation error.
    :vartype message: str
    """

    code: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error code of the operation error."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error message of the operation error."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationResult(_Model):
    """An Operation Result.

    :ivar status: The operation status.
    :vartype status: str
    :ivar status_code: The status code for the operation. Known values are: "Continue",
     "SwitchingProtocols", "OK", "Created", "Accepted", "NonAuthoritativeInformation", "NoContent",
     "ResetContent", "PartialContent", "MultipleChoices", "Ambiguous", "MovedPermanently", "Moved",
     "Found", "Redirect", "SeeOther", "RedirectMethod", "NotModified", "UseProxy", "Unused",
     "TemporaryRedirect", "RedirectKeepVerb", "BadRequest", "Unauthorized", "PaymentRequired",
     "Forbidden", "NotFound", "MethodNotAllowed", "NotAcceptable", "ProxyAuthenticationRequired",
     "RequestTimeout", "Conflict", "Gone", "LengthRequired", "PreconditionFailed",
     "RequestEntityTooLarge", "RequestUriTooLong", "UnsupportedMediaType",
     "RequestedRangeNotSatisfiable", "ExpectationFailed", "UpgradeRequired", "InternalServerError",
     "NotImplemented", "BadGateway", "ServiceUnavailable", "GatewayTimeout", and
     "HttpVersionNotSupported".
    :vartype status_code: str or ~azure.mgmt.devtestlabs.models.HttpStatusCode
    :ivar error: Error details for the operation in case of a failure.
    :vartype error: ~azure.mgmt.devtestlabs.models.OperationError
    """

    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The operation status."""
    status_code: Optional[Union[str, "_models.HttpStatusCode"]] = rest_field(
        name="statusCode", visibility=["read", "create", "update", "delete", "query"]
    )
    """The status code for the operation. Known values are: \"Continue\", \"SwitchingProtocols\",
     \"OK\", \"Created\", \"Accepted\", \"NonAuthoritativeInformation\", \"NoContent\",
     \"ResetContent\", \"PartialContent\", \"MultipleChoices\", \"Ambiguous\", \"MovedPermanently\",
     \"Moved\", \"Found\", \"Redirect\", \"SeeOther\", \"RedirectMethod\", \"NotModified\",
     \"UseProxy\", \"Unused\", \"TemporaryRedirect\", \"RedirectKeepVerb\", \"BadRequest\",
     \"Unauthorized\", \"PaymentRequired\", \"Forbidden\", \"NotFound\", \"MethodNotAllowed\",
     \"NotAcceptable\", \"ProxyAuthenticationRequired\", \"RequestTimeout\", \"Conflict\", \"Gone\",
     \"LengthRequired\", \"PreconditionFailed\", \"RequestEntityTooLarge\", \"RequestUriTooLong\",
     \"UnsupportedMediaType\", \"RequestedRangeNotSatisfiable\", \"ExpectationFailed\",
     \"UpgradeRequired\", \"InternalServerError\", \"NotImplemented\", \"BadGateway\",
     \"ServiceUnavailable\", \"GatewayTimeout\", and \"HttpVersionNotSupported\"."""
    error: Optional["_models.OperationError"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error details for the operation in case of a failure."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[str] = None,
        status_code: Optional[Union[str, "_models.HttpStatusCode"]] = None,
        error: Optional["_models.OperationError"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ParameterInfo(_Model):
    """Information about an artifact's parameter.

    :ivar name: The name of the artifact parameter.
    :vartype name: str
    :ivar value: The value of the artifact parameter.
    :vartype value: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the artifact parameter."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the artifact parameter."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ParametersValueFileInfo(_Model):
    """A file containing a set of parameter values for an ARM template.

    :ivar file_name: File name.
    :vartype file_name: str
    :ivar parameters_value_info: Contents of the file.
    :vartype parameters_value_info: dict[str, any]
    """

    file_name: Optional[str] = rest_field(name="fileName", visibility=["read", "create", "update", "delete", "query"])
    """File name."""
    parameters_value_info: Optional[Dict[str, Any]] = rest_field(
        name="parametersValueInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Contents of the file."""

    @overload
    def __init__(
        self,
        *,
        file_name: Optional[str] = None,
        parameters_value_info: Optional[Dict[str, Any]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PercentageCostThresholdProperties(_Model):
    """Properties of a percentage cost threshold.

    :ivar threshold_value: The cost threshold value.
    :vartype threshold_value: float
    """

    threshold_value: Optional[float] = rest_field(
        name="thresholdValue", visibility=["read", "create", "update", "delete", "query"]
    )
    """The cost threshold value."""

    @overload
    def __init__(
        self,
        *,
        threshold_value: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Policy(Resource):
    """A Policy.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.PolicyProperties
    """

    properties: "_models.PolicyProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = [
        "description",
        "status",
        "fact_name",
        "fact_data",
        "threshold",
        "evaluator_type",
        "created_date",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.PolicyProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class PolicyFragment(UpdateResource):
    """A Policy.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PolicyProperties(_Model):
    """Properties of a Policy.

    :ivar description: The description of the policy.
    :vartype description: str
    :ivar status: The status of the policy. Known values are: "Enabled" and "Disabled".
    :vartype status: str or ~azure.mgmt.devtestlabs.models.PolicyStatus
    :ivar fact_name: The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab,
     etc. Known values are: "UserOwnedLabVmCount", "UserOwnedLabPremiumVmCount", "LabVmCount",
     "LabPremiumVmCount", "LabVmSize", "GalleryImage", "UserOwnedLabVmCountInSubnet",
     "LabTargetCost", "EnvironmentTemplate", and "ScheduleEditPermission".
    :vartype fact_name: str or ~azure.mgmt.devtestlabs.models.PolicyFactName
    :ivar fact_data: The fact data of the policy.
    :vartype fact_data: str
    :ivar threshold: The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON
     array of values for AllowedValuesPolicy).
    :vartype threshold: str
    :ivar evaluator_type: The evaluator type of the policy (i.e. AllowedValuesPolicy,
     MaxValuePolicy). Known values are: "AllowedValuesPolicy" and "MaxValuePolicy".
    :vartype evaluator_type: str or ~azure.mgmt.devtestlabs.models.PolicyEvaluatorType
    :ivar created_date: The creation date of the policy.
    :vartype created_date: ~datetime.datetime
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the policy."""
    status: Optional[Union[str, "_models.PolicyStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the policy. Known values are: \"Enabled\" and \"Disabled\"."""
    fact_name: Optional[Union[str, "_models.PolicyFactName"]] = rest_field(
        name="factName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc. Known values
     are: \"UserOwnedLabVmCount\", \"UserOwnedLabPremiumVmCount\", \"LabVmCount\",
     \"LabPremiumVmCount\", \"LabVmSize\", \"GalleryImage\", \"UserOwnedLabVmCountInSubnet\",
     \"LabTargetCost\", \"EnvironmentTemplate\", and \"ScheduleEditPermission\"."""
    fact_data: Optional[str] = rest_field(name="factData", visibility=["read", "create", "update", "delete", "query"])
    """The fact data of the policy."""
    threshold: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for
     AllowedValuesPolicy)."""
    evaluator_type: Optional[Union[str, "_models.PolicyEvaluatorType"]] = rest_field(
        name="evaluatorType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy). Known values are:
     \"AllowedValuesPolicy\" and \"MaxValuePolicy\"."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the policy."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        status: Optional[Union[str, "_models.PolicyStatus"]] = None,
        fact_name: Optional[Union[str, "_models.PolicyFactName"]] = None,
        fact_data: Optional[str] = None,
        threshold: Optional[str] = None,
        evaluator_type: Optional[Union[str, "_models.PolicyEvaluatorType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PolicySetResult(_Model):
    """Result of a policy set evaluation.

    :ivar has_error: A value indicating whether this policy set evaluation has discovered
     violations.
    :vartype has_error: bool
    :ivar policy_violations: The list of policy violations.
    :vartype policy_violations: list[~azure.mgmt.devtestlabs.models.PolicyViolation]
    """

    has_error: Optional[bool] = rest_field(name="hasError", visibility=["read", "create", "update", "delete", "query"])
    """A value indicating whether this policy set evaluation has discovered violations."""
    policy_violations: Optional[List["_models.PolicyViolation"]] = rest_field(
        name="policyViolations", visibility=["read", "create", "update", "delete", "query"]
    )
    """The list of policy violations."""

    @overload
    def __init__(
        self,
        *,
        has_error: Optional[bool] = None,
        policy_violations: Optional[List["_models.PolicyViolation"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PolicyViolation(_Model):
    """Policy violation.

    :ivar code: The code of the policy violation.
    :vartype code: str
    :ivar message: The message of the policy violation.
    :vartype message: str
    """

    code: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The code of the policy violation."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The message of the policy violation."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Port(_Model):
    """Properties of a network port.

    :ivar transport_protocol: Protocol type of the port. Known values are: "Tcp" and "Udp".
    :vartype transport_protocol: str or ~azure.mgmt.devtestlabs.models.TransportProtocol
    :ivar backend_port: Backend port of the target virtual machine.
    :vartype backend_port: int
    """

    transport_protocol: Optional[Union[str, "_models.TransportProtocol"]] = rest_field(
        name="transportProtocol", visibility=["read", "create", "update", "delete", "query"]
    )
    """Protocol type of the port. Known values are: \"Tcp\" and \"Udp\"."""
    backend_port: Optional[int] = rest_field(
        name="backendPort", visibility=["read", "create", "update", "delete", "query"]
    )
    """Backend port of the target virtual machine."""

    @overload
    def __init__(
        self,
        *,
        transport_protocol: Optional[Union[str, "_models.TransportProtocol"]] = None,
        backend_port: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RdpConnection(_Model):
    """Represents a .rdp file.

    :ivar contents: The contents of the .rdp file.
    :vartype contents: str
    """

    contents: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The contents of the .rdp file."""

    @overload
    def __init__(
        self,
        *,
        contents: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResizeLabVirtualMachineProperties(_Model):
    """Request body for resizing a virtual machine.

    :ivar size: Specifies the size of the virtual machine.
    :vartype size: str
    """

    size: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Specifies the size of the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        size: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RetargetScheduleProperties(_Model):
    """Properties for retargeting a virtual machine schedule.

    :ivar current_resource_id: The resource Id of the virtual machine on which the schedule
     operates.
    :vartype current_resource_id: str
    :ivar target_resource_id: The resource Id of the virtual machine that the schedule should be
     retargeted to.
    :vartype target_resource_id: str
    """

    current_resource_id: Optional[str] = rest_field(
        name="currentResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource Id of the virtual machine on which the schedule operates."""
    target_resource_id: Optional[str] = rest_field(
        name="targetResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource Id of the virtual machine that the schedule should be retargeted to."""

    @overload
    def __init__(
        self,
        *,
        current_resource_id: Optional[str] = None,
        target_resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Schedule(Resource):
    """A schedule.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.ScheduleProperties
    """

    properties: "_models.ScheduleProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = [
        "status",
        "task_type",
        "weekly_recurrence",
        "daily_recurrence",
        "hourly_recurrence",
        "time_zone_id",
        "notification_settings",
        "created_date",
        "target_resource_id",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ScheduleProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ScheduleCreationParameter(_Model):
    """Properties for creating a schedule.

    :ivar properties: The properties of the schedule.
    :vartype properties: ~azure.mgmt.devtestlabs.models.ScheduleCreationParameterProperties
    :ivar name: The name of the virtual machine or environment.
    :vartype name: str
    :ivar location: The location of the new virtual machine or environment.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    properties: Optional["_models.ScheduleCreationParameterProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the schedule."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the virtual machine or environment."""
    location: Optional[str] = rest_field(visibility=["read"])
    """The location of the new virtual machine or environment."""
    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The tags of the resource."""

    __flattened_items = [
        "status",
        "task_type",
        "weekly_recurrence",
        "daily_recurrence",
        "hourly_recurrence",
        "time_zone_id",
        "notification_settings",
        "target_resource_id",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ScheduleCreationParameterProperties"] = None,
        name: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ScheduleCreationParameterProperties(_Model):
    """Properties for schedule creation.

    :ivar status: The status of the schedule (i.e. Enabled, Disabled). Known values are: "Enabled"
     and "Disabled".
    :vartype status: str or ~azure.mgmt.devtestlabs.models.EnableStatus
    :ivar task_type: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
    :vartype task_type: str
    :ivar weekly_recurrence: If the schedule will occur only some days of the week, specify the
     weekly recurrence.
    :vartype weekly_recurrence: ~azure.mgmt.devtestlabs.models.WeekDetails
    :ivar daily_recurrence: If the schedule will occur once each day of the week, specify the daily
     recurrence.
    :vartype daily_recurrence: ~azure.mgmt.devtestlabs.models.DayDetails
    :ivar hourly_recurrence: If the schedule will occur multiple times a day, specify the hourly
     recurrence.
    :vartype hourly_recurrence: ~azure.mgmt.devtestlabs.models.HourDetails
    :ivar time_zone_id: The time zone ID (e.g. China Standard Time, Greenland Standard Time,
     Pacific Standard time, etc.). The possible values for this property can be found in
     ``IReadOnlyCollection<string> TimeZoneConverter.TZConvert.KnownWindowsTimeZoneIds``
     (`https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md
     <https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md>`_).
    :vartype time_zone_id: str
    :ivar notification_settings: Notification settings.
    :vartype notification_settings: ~azure.mgmt.devtestlabs.models.NotificationSettings
    :ivar target_resource_id: The resource ID to which the schedule belongs.
    :vartype target_resource_id: str
    """

    status: Optional[Union[str, "_models.EnableStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the schedule (i.e. Enabled, Disabled). Known values are: \"Enabled\" and
     \"Disabled\"."""
    task_type: Optional[str] = rest_field(name="taskType", visibility=["read", "create", "update", "delete", "query"])
    """The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart)."""
    weekly_recurrence: Optional["_models.WeekDetails"] = rest_field(
        name="weeklyRecurrence", visibility=["read", "create", "update", "delete", "query"]
    )
    """If the schedule will occur only some days of the week, specify the weekly recurrence."""
    daily_recurrence: Optional["_models.DayDetails"] = rest_field(
        name="dailyRecurrence", visibility=["read", "create", "update", "delete", "query"]
    )
    """If the schedule will occur once each day of the week, specify the daily recurrence."""
    hourly_recurrence: Optional["_models.HourDetails"] = rest_field(
        name="hourlyRecurrence", visibility=["read", "create", "update", "delete", "query"]
    )
    """If the schedule will occur multiple times a day, specify the hourly recurrence."""
    time_zone_id: Optional[str] = rest_field(
        name="timeZoneId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The time zone ID (e.g. China Standard Time, Greenland Standard Time, Pacific Standard time,
     etc.). The possible values for this property can be found in ``IReadOnlyCollection<string>
     TimeZoneConverter.TZConvert.KnownWindowsTimeZoneIds``
     (`https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md
     <https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md>`_)."""
    notification_settings: Optional["_models.NotificationSettings"] = rest_field(
        name="notificationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Notification settings."""
    target_resource_id: Optional[str] = rest_field(
        name="targetResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID to which the schedule belongs."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.EnableStatus"]] = None,
        task_type: Optional[str] = None,
        weekly_recurrence: Optional["_models.WeekDetails"] = None,
        daily_recurrence: Optional["_models.DayDetails"] = None,
        hourly_recurrence: Optional["_models.HourDetails"] = None,
        time_zone_id: Optional[str] = None,
        notification_settings: Optional["_models.NotificationSettings"] = None,
        target_resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScheduleFragment(UpdateResource):
    """A schedule.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScheduleProperties(_Model):
    """Properties of a schedule.

    :ivar status: The status of the schedule (i.e. Enabled, Disabled). Known values are: "Enabled"
     and "Disabled".
    :vartype status: str or ~azure.mgmt.devtestlabs.models.EnableStatus
    :ivar task_type: The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
    :vartype task_type: str
    :ivar weekly_recurrence: If the schedule will occur only some days of the week, specify the
     weekly recurrence.
    :vartype weekly_recurrence: ~azure.mgmt.devtestlabs.models.WeekDetails
    :ivar daily_recurrence: If the schedule will occur once each day of the week, specify the daily
     recurrence.
    :vartype daily_recurrence: ~azure.mgmt.devtestlabs.models.DayDetails
    :ivar hourly_recurrence: If the schedule will occur multiple times a day, specify the hourly
     recurrence.
    :vartype hourly_recurrence: ~azure.mgmt.devtestlabs.models.HourDetails
    :ivar time_zone_id: The time zone ID (e.g. China Standard Time, Greenland Standard Time,
     Pacific Standard time, etc.). The possible values for this property can be found in
     ``IReadOnlyCollection<string> TimeZoneConverter.TZConvert.KnownWindowsTimeZoneIds``
     (`https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md
     <https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md>`_).
    :vartype time_zone_id: str
    :ivar notification_settings: Notification settings.
    :vartype notification_settings: ~azure.mgmt.devtestlabs.models.NotificationSettings
    :ivar created_date: The creation date of the schedule.
    :vartype created_date: ~datetime.datetime
    :ivar target_resource_id: The resource ID to which the schedule belongs.
    :vartype target_resource_id: str
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    status: Optional[Union[str, "_models.EnableStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the schedule (i.e. Enabled, Disabled). Known values are: \"Enabled\" and
     \"Disabled\"."""
    task_type: Optional[str] = rest_field(name="taskType", visibility=["read", "create", "update", "delete", "query"])
    """The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart)."""
    weekly_recurrence: Optional["_models.WeekDetails"] = rest_field(
        name="weeklyRecurrence", visibility=["read", "create", "update", "delete", "query"]
    )
    """If the schedule will occur only some days of the week, specify the weekly recurrence."""
    daily_recurrence: Optional["_models.DayDetails"] = rest_field(
        name="dailyRecurrence", visibility=["read", "create", "update", "delete", "query"]
    )
    """If the schedule will occur once each day of the week, specify the daily recurrence."""
    hourly_recurrence: Optional["_models.HourDetails"] = rest_field(
        name="hourlyRecurrence", visibility=["read", "create", "update", "delete", "query"]
    )
    """If the schedule will occur multiple times a day, specify the hourly recurrence."""
    time_zone_id: Optional[str] = rest_field(
        name="timeZoneId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The time zone ID (e.g. China Standard Time, Greenland Standard Time, Pacific Standard time,
     etc.). The possible values for this property can be found in ``IReadOnlyCollection<string>
     TimeZoneConverter.TZConvert.KnownWindowsTimeZoneIds``
     (`https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md
     <https://github.com/mattjohnsonpint/TimeZoneConverter/blob/main/README.md>`_)."""
    notification_settings: Optional["_models.NotificationSettings"] = rest_field(
        name="notificationSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Notification settings."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the schedule."""
    target_resource_id: Optional[str] = rest_field(
        name="targetResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID to which the schedule belongs."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.EnableStatus"]] = None,
        task_type: Optional[str] = None,
        weekly_recurrence: Optional["_models.WeekDetails"] = None,
        daily_recurrence: Optional["_models.DayDetails"] = None,
        hourly_recurrence: Optional["_models.HourDetails"] = None,
        time_zone_id: Optional[str] = None,
        notification_settings: Optional["_models.NotificationSettings"] = None,
        target_resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Secret(Resource):
    """A secret.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.SecretProperties
    """

    properties: "_models.SecretProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = ["value", "provisioning_state", "unique_identifier"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.SecretProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SecretFragment(UpdateResource):
    """A secret.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecretProperties(_Model):
    """Properties of a secret.

    :ivar value: The value of the secret for secret creation.
    :vartype value: str
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The value of the secret for secret creation."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ServiceFabric(Resource):
    """A Service Fabric.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.ServiceFabricProperties
    """

    properties: "_models.ServiceFabricProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the resource. Required."""

    __flattened_items = [
        "external_service_fabric_id",
        "environment_id",
        "applicable_schedule",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ServiceFabricProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ServiceFabricFragment(UpdateResource):
    """A Service Fabric.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ServiceFabricProperties(_Model):
    """Properties of a service fabric.

    :ivar external_service_fabric_id: The backing service fabric resource's id.
    :vartype external_service_fabric_id: str
    :ivar environment_id: The resource id of the environment under which the service fabric
     resource is present.
    :vartype environment_id: str
    :ivar applicable_schedule: The applicable schedule for the virtual machine.
    :vartype applicable_schedule: ~azure.mgmt.devtestlabs.models.ApplicableSchedule
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    external_service_fabric_id: Optional[str] = rest_field(
        name="externalServiceFabricId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The backing service fabric resource's id."""
    environment_id: Optional[str] = rest_field(
        name="environmentId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource id of the environment under which the service fabric resource is present."""
    applicable_schedule: Optional["_models.ApplicableSchedule"] = rest_field(
        name="applicableSchedule", visibility=["read"]
    )
    """The applicable schedule for the virtual machine."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        external_service_fabric_id: Optional[str] = None,
        environment_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ServiceRunner(Resource):
    """A container for a managed identity to execute DevTest lab services.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar identity: The identity of the resource.
    :vartype identity: ~azure.mgmt.devtestlabs.models.IdentityProperties
    """

    identity: Optional["_models.IdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity of the resource."""

    @overload
    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.IdentityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SharedPublicIpAddressConfiguration(_Model):
    """Properties of a virtual machine that determine how it is connected to a load balancer.

    :ivar inbound_nat_rules: The incoming NAT rules.
    :vartype inbound_nat_rules: list[~azure.mgmt.devtestlabs.models.InboundNatRule]
    """

    inbound_nat_rules: Optional[List["_models.InboundNatRule"]] = rest_field(
        name="inboundNatRules", visibility=["read", "create", "update", "delete", "query"]
    )
    """The incoming NAT rules."""

    @overload
    def __init__(
        self,
        *,
        inbound_nat_rules: Optional[List["_models.InboundNatRule"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Subnet(_Model):
    """Subnet information.

    :ivar resource_id: The resource ID of the subnet.
    :vartype resource_id: str
    :ivar lab_subnet_name: The name of the subnet as seen in the lab.
    :vartype lab_subnet_name: str
    :ivar allow_public_ip: The permission policy of the subnet for allowing public IP addresses
     (i.e. Allow, Deny)). Known values are: "Default", "Deny", and "Allow".
    :vartype allow_public_ip: str or ~azure.mgmt.devtestlabs.models.UsagePermissionType
    """

    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the subnet."""
    lab_subnet_name: Optional[str] = rest_field(
        name="labSubnetName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name of the subnet as seen in the lab."""
    allow_public_ip: Optional[Union[str, "_models.UsagePermissionType"]] = rest_field(
        name="allowPublicIp", visibility=["read", "create", "update", "delete", "query"]
    )
    """The permission policy of the subnet for allowing public IP addresses (i.e. Allow, Deny)). Known
     values are: \"Default\", \"Deny\", and \"Allow\"."""

    @overload
    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        lab_subnet_name: Optional[str] = None,
        allow_public_ip: Optional[Union[str, "_models.UsagePermissionType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubnetOverride(_Model):
    """Property overrides on a subnet of a virtual network.

    :ivar resource_id: The resource ID of the subnet.
    :vartype resource_id: str
    :ivar lab_subnet_name: The name given to the subnet within the lab.
    :vartype lab_subnet_name: str
    :ivar use_in_vm_creation_permission: Indicates whether this subnet can be used during virtual
     machine creation (i.e. Allow, Deny). Known values are: "Default", "Deny", and "Allow".
    :vartype use_in_vm_creation_permission: str or
     ~azure.mgmt.devtestlabs.models.UsagePermissionType
    :ivar use_public_ip_address_permission: Indicates whether public IP addresses can be assigned
     to virtual machines on this subnet (i.e. Allow, Deny). Known values are: "Default", "Deny", and
     "Allow".
    :vartype use_public_ip_address_permission: str or
     ~azure.mgmt.devtestlabs.models.UsagePermissionType
    :ivar shared_public_ip_address_configuration: Properties that virtual machines on this subnet
     will share.
    :vartype shared_public_ip_address_configuration:
     ~azure.mgmt.devtestlabs.models.SubnetSharedPublicIpAddressConfiguration
    :ivar virtual_network_pool_name: The virtual network pool associated with this subnet.
    :vartype virtual_network_pool_name: str
    """

    resource_id: Optional[str] = rest_field(
        name="resourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the subnet."""
    lab_subnet_name: Optional[str] = rest_field(
        name="labSubnetName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name given to the subnet within the lab."""
    use_in_vm_creation_permission: Optional[Union[str, "_models.UsagePermissionType"]] = rest_field(
        name="useInVmCreationPermission", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
     Known values are: \"Default\", \"Deny\", and \"Allow\"."""
    use_public_ip_address_permission: Optional[Union[str, "_models.UsagePermissionType"]] = rest_field(
        name="usePublicIpAddressPermission", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e.
     Allow, Deny). Known values are: \"Default\", \"Deny\", and \"Allow\"."""
    shared_public_ip_address_configuration: Optional["_models.SubnetSharedPublicIpAddressConfiguration"] = rest_field(
        name="sharedPublicIpAddressConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties that virtual machines on this subnet will share."""
    virtual_network_pool_name: Optional[str] = rest_field(
        name="virtualNetworkPoolName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The virtual network pool associated with this subnet."""

    @overload
    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        lab_subnet_name: Optional[str] = None,
        use_in_vm_creation_permission: Optional[Union[str, "_models.UsagePermissionType"]] = None,
        use_public_ip_address_permission: Optional[Union[str, "_models.UsagePermissionType"]] = None,
        shared_public_ip_address_configuration: Optional["_models.SubnetSharedPublicIpAddressConfiguration"] = None,
        virtual_network_pool_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubnetSharedPublicIpAddressConfiguration(_Model):
    """Configuration for public IP address sharing.

    :ivar allowed_ports: Backend ports that virtual machines on this subnet are allowed to expose.
    :vartype allowed_ports: list[~azure.mgmt.devtestlabs.models.Port]
    """

    allowed_ports: Optional[List["_models.Port"]] = rest_field(
        name="allowedPorts", visibility=["read", "create", "update", "delete", "query"]
    )
    """Backend ports that virtual machines on this subnet are allowed to expose."""

    @overload
    def __init__(
        self,
        *,
        allowed_ports: Optional[List["_models.Port"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TargetCostProperties(_Model):
    """Properties of a cost target.

    :ivar status: Target cost status. Known values are: "Enabled" and "Disabled".
    :vartype status: str or ~azure.mgmt.devtestlabs.models.TargetCostStatus
    :ivar target: Lab target cost.
    :vartype target: int
    :ivar cost_thresholds: Cost thresholds.
    :vartype cost_thresholds: list[~azure.mgmt.devtestlabs.models.CostThresholdProperties]
    :ivar cycle_start_date_time: Reporting cycle start date.
    :vartype cycle_start_date_time: ~datetime.datetime
    :ivar cycle_end_date_time: Reporting cycle end date.
    :vartype cycle_end_date_time: ~datetime.datetime
    :ivar cycle_type: Reporting cycle type. Known values are: "CalendarMonth" and "Custom".
    :vartype cycle_type: str or ~azure.mgmt.devtestlabs.models.ReportingCycleType
    """

    status: Optional[Union[str, "_models.TargetCostStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Target cost status. Known values are: \"Enabled\" and \"Disabled\"."""
    target: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Lab target cost."""
    cost_thresholds: Optional[List["_models.CostThresholdProperties"]] = rest_field(
        name="costThresholds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Cost thresholds."""
    cycle_start_date_time: Optional[datetime.datetime] = rest_field(
        name="cycleStartDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Reporting cycle start date."""
    cycle_end_date_time: Optional[datetime.datetime] = rest_field(
        name="cycleEndDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Reporting cycle end date."""
    cycle_type: Optional[Union[str, "_models.ReportingCycleType"]] = rest_field(
        name="cycleType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Reporting cycle type. Known values are: \"CalendarMonth\" and \"Custom\"."""

    @overload
    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.TargetCostStatus"]] = None,
        target: Optional[int] = None,
        cost_thresholds: Optional[List["_models.CostThresholdProperties"]] = None,
        cycle_start_date_time: Optional[datetime.datetime] = None,
        cycle_end_date_time: Optional[datetime.datetime] = None,
        cycle_type: Optional[Union[str, "_models.ReportingCycleType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class User(Resource):
    """Profile of a lab user.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.UserProperties
    """

    properties: "_models.UserProperties" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The properties of the resource. Required."""

    __flattened_items = ["identity", "secret_store", "created_date", "provisioning_state", "unique_identifier"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.UserProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class UserFragment(UpdateResource):
    """Profile of a lab user.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserIdentity(_Model):
    """Identity attributes of a lab user.

    :ivar principal_name: Set to the principal name / UPN of the client JWT making the request.
    :vartype principal_name: str
    :ivar principal_id: Set to the principal Id of the client JWT making the request. Service
     principal will not have the principal Id.
    :vartype principal_id: str
    :ivar tenant_id: Set to the tenant ID of the client JWT making the request.
    :vartype tenant_id: str
    :ivar object_id: Set to the object Id of the client JWT making the request. Not all users have
     object Id. For CSP (reseller) scenarios for example, object Id is not available.
    :vartype object_id: str
    :ivar app_id: Set to the app Id of the client JWT making the request.
    :vartype app_id: str
    """

    principal_name: Optional[str] = rest_field(
        name="principalName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Set to the principal name / UPN of the client JWT making the request."""
    principal_id: Optional[str] = rest_field(
        name="principalId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Set to the principal Id of the client JWT making the request. Service principal will not have
     the principal Id."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read", "create", "update", "delete", "query"])
    """Set to the tenant ID of the client JWT making the request."""
    object_id: Optional[str] = rest_field(name="objectId", visibility=["read", "create", "update", "delete", "query"])
    """Set to the object Id of the client JWT making the request. Not all users have object Id. For
     CSP (reseller) scenarios for example, object Id is not available."""
    app_id: Optional[str] = rest_field(name="appId", visibility=["read", "create", "update", "delete", "query"])
    """Set to the app Id of the client JWT making the request."""

    @overload
    def __init__(
        self,
        *,
        principal_name: Optional[str] = None,
        principal_id: Optional[str] = None,
        tenant_id: Optional[str] = None,
        object_id: Optional[str] = None,
        app_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserProperties(_Model):
    """Properties of a lab user profile.

    :ivar identity: The identity of the user.
    :vartype identity: ~azure.mgmt.devtestlabs.models.UserIdentity
    :ivar secret_store: The secret store of the user.
    :vartype secret_store: ~azure.mgmt.devtestlabs.models.UserSecretStore
    :ivar created_date: The creation date of the user profile.
    :vartype created_date: ~datetime.datetime
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    identity: Optional["_models.UserIdentity"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The identity of the user."""
    secret_store: Optional["_models.UserSecretStore"] = rest_field(
        name="secretStore", visibility=["read", "create", "update", "delete", "query"]
    )
    """The secret store of the user."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the user profile."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        identity: Optional["_models.UserIdentity"] = None,
        secret_store: Optional["_models.UserSecretStore"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserSecretStore(_Model):
    """Properties of a user's secret store.

    :ivar key_vault_uri: The URI of the user's Key vault.
    :vartype key_vault_uri: str
    :ivar key_vault_id: The ID of the user's Key vault.
    :vartype key_vault_id: str
    """

    key_vault_uri: Optional[str] = rest_field(
        name="keyVaultUri", visibility=["read", "create", "update", "delete", "query"]
    )
    """The URI of the user's Key vault."""
    key_vault_id: Optional[str] = rest_field(
        name="keyVaultId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ID of the user's Key vault."""

    @overload
    def __init__(
        self,
        *,
        key_vault_uri: Optional[str] = None,
        key_vault_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualNetwork(Resource):
    """A virtual network.

    :ivar id: The identifier of the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar location: The location of the resource.
    :vartype location: str
    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar properties: The properties of the resource. Required.
    :vartype properties: ~azure.mgmt.devtestlabs.models.VirtualNetworkProperties
    """

    properties: "_models.VirtualNetworkProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the resource. Required."""

    __flattened_items = [
        "allowed_subnets",
        "description",
        "external_provider_resource_id",
        "external_subnets",
        "subnet_overrides",
        "created_date",
        "provisioning_state",
        "unique_identifier",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.VirtualNetworkProperties",
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualNetworkFragment(UpdateResource):
    """A virtual network.

    :ivar tags: The tags of the resource.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualNetworkProperties(_Model):
    """Properties of a virtual network.

    :ivar allowed_subnets: The allowed subnets of the virtual network.
    :vartype allowed_subnets: list[~azure.mgmt.devtestlabs.models.Subnet]
    :ivar description: The description of the virtual network.
    :vartype description: str
    :ivar external_provider_resource_id: The Microsoft.Network resource identifier of the virtual
     network.
    :vartype external_provider_resource_id: str
    :ivar external_subnets: The external subnet properties.
    :vartype external_subnets: list[~azure.mgmt.devtestlabs.models.ExternalSubnet]
    :ivar subnet_overrides: The subnet overrides of the virtual network.
    :vartype subnet_overrides: list[~azure.mgmt.devtestlabs.models.SubnetOverride]
    :ivar created_date: The creation date of the virtual network.
    :vartype created_date: ~datetime.datetime
    :ivar provisioning_state: The provisioning status of the resource.
    :vartype provisioning_state: str
    :ivar unique_identifier: The unique immutable identifier of a resource (Guid).
    :vartype unique_identifier: str
    """

    allowed_subnets: Optional[List["_models.Subnet"]] = rest_field(
        name="allowedSubnets", visibility=["read", "create", "update", "delete", "query"]
    )
    """The allowed subnets of the virtual network."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the virtual network."""
    external_provider_resource_id: Optional[str] = rest_field(
        name="externalProviderResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Microsoft.Network resource identifier of the virtual network."""
    external_subnets: Optional[List["_models.ExternalSubnet"]] = rest_field(name="externalSubnets", visibility=["read"])
    """The external subnet properties."""
    subnet_overrides: Optional[List["_models.SubnetOverride"]] = rest_field(
        name="subnetOverrides", visibility=["read", "create", "update", "delete", "query"]
    )
    """The subnet overrides of the virtual network."""
    created_date: Optional[datetime.datetime] = rest_field(name="createdDate", visibility=["read"], format="rfc3339")
    """The creation date of the virtual network."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning status of the resource."""
    unique_identifier: Optional[str] = rest_field(name="uniqueIdentifier", visibility=["read"])
    """The unique immutable identifier of a resource (Guid)."""

    @overload
    def __init__(
        self,
        *,
        allowed_subnets: Optional[List["_models.Subnet"]] = None,
        description: Optional[str] = None,
        external_provider_resource_id: Optional[str] = None,
        subnet_overrides: Optional[List["_models.SubnetOverride"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WeekDetails(_Model):
    """Properties of a weekly schedule.

    :ivar weekdays: The days of the week for which the schedule is set (e.g. Sunday, Monday,
     Tuesday, etc.).
    :vartype weekdays: list[str]
    :ivar time: The time of the day the schedule will occur.
    :vartype time: str
    """

    weekdays: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The days of the week for which the schedule is set (e.g. Sunday, Monday, Tuesday, etc.)."""
    time: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The time of the day the schedule will occur."""

    @overload
    def __init__(
        self,
        *,
        weekdays: Optional[List[str]] = None,
        time: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WindowsOsInfo(_Model):
    """Information about a Windows OS.

    :ivar windows_os_state: The state of the Windows OS (i.e. NonSysprepped, SysprepRequested,
     SysprepApplied). Known values are: "NonSysprepped", "SysprepRequested", and "SysprepApplied".
    :vartype windows_os_state: str or ~azure.mgmt.devtestlabs.models.WindowsOsState
    """

    windows_os_state: Optional[Union[str, "_models.WindowsOsState"]] = rest_field(
        name="windowsOsState", visibility=["read", "create", "update", "delete", "query"]
    )
    """The state of the Windows OS (i.e. NonSysprepped, SysprepRequested, SysprepApplied). Known
     values are: \"NonSysprepped\", \"SysprepRequested\", and \"SysprepApplied\"."""

    @overload
    def __init__(
        self,
        *,
        windows_os_state: Optional[Union[str, "_models.WindowsOsState"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
