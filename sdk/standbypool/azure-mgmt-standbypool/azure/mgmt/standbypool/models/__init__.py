# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import ContainerGroupProfile
from ._models_py3 import ContainerGroupProfileUpdate
from ._models_py3 import ContainerGroupProperties
from ._models_py3 import ContainerGroupPropertiesUpdate
from ._models_py3 import ErrorAdditionalInfo
from ._models_py3 import ErrorDetail
from ._models_py3 import ErrorResponse
from ._models_py3 import Operation
from ._models_py3 import OperationDisplay
from ._models_py3 import OperationListResult
from ._models_py3 import ProxyResource
from ._models_py3 import Resource
from ._models_py3 import StandbyContainerGroupPoolElasticityProfile
from ._models_py3 import StandbyContainerGroupPoolElasticityProfileUpdate
from ._models_py3 import StandbyContainerGroupPoolResource
from ._models_py3 import StandbyContainerGroupPoolResourceListResult
from ._models_py3 import StandbyContainerGroupPoolResourceProperties
from ._models_py3 import StandbyContainerGroupPoolResourceUpdate
from ._models_py3 import StandbyContainerGroupPoolResourceUpdateProperties
from ._models_py3 import StandbyVirtualMachinePoolElasticityProfile
from ._models_py3 import StandbyVirtualMachinePoolElasticityProfileUpdate
from ._models_py3 import StandbyVirtualMachinePoolResource
from ._models_py3 import StandbyVirtualMachinePoolResourceListResult
from ._models_py3 import StandbyVirtualMachinePoolResourceProperties
from ._models_py3 import StandbyVirtualMachinePoolResourceUpdate
from ._models_py3 import StandbyVirtualMachinePoolResourceUpdateProperties
from ._models_py3 import StandbyVirtualMachineResource
from ._models_py3 import StandbyVirtualMachineResourceListResult
from ._models_py3 import StandbyVirtualMachineResourceProperties
from ._models_py3 import Subnet
from ._models_py3 import SystemData
from ._models_py3 import TrackedResource

from ._standby_pool_mgmt_client_enums import ActionType
from ._standby_pool_mgmt_client_enums import CreatedByType
from ._standby_pool_mgmt_client_enums import Origin
from ._standby_pool_mgmt_client_enums import ProvisioningState
from ._standby_pool_mgmt_client_enums import RefillPolicy
from ._standby_pool_mgmt_client_enums import VirtualMachineState
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "ContainerGroupProfile",
    "ContainerGroupProfileUpdate",
    "ContainerGroupProperties",
    "ContainerGroupPropertiesUpdate",
    "ErrorAdditionalInfo",
    "ErrorDetail",
    "ErrorResponse",
    "Operation",
    "OperationDisplay",
    "OperationListResult",
    "ProxyResource",
    "Resource",
    "StandbyContainerGroupPoolElasticityProfile",
    "StandbyContainerGroupPoolElasticityProfileUpdate",
    "StandbyContainerGroupPoolResource",
    "StandbyContainerGroupPoolResourceListResult",
    "StandbyContainerGroupPoolResourceProperties",
    "StandbyContainerGroupPoolResourceUpdate",
    "StandbyContainerGroupPoolResourceUpdateProperties",
    "StandbyVirtualMachinePoolElasticityProfile",
    "StandbyVirtualMachinePoolElasticityProfileUpdate",
    "StandbyVirtualMachinePoolResource",
    "StandbyVirtualMachinePoolResourceListResult",
    "StandbyVirtualMachinePoolResourceProperties",
    "StandbyVirtualMachinePoolResourceUpdate",
    "StandbyVirtualMachinePoolResourceUpdateProperties",
    "StandbyVirtualMachineResource",
    "StandbyVirtualMachineResourceListResult",
    "StandbyVirtualMachineResourceProperties",
    "Subnet",
    "SystemData",
    "TrackedResource",
    "ActionType",
    "CreatedByType",
    "Origin",
    "ProvisioningState",
    "RefillPolicy",
    "VirtualMachineState",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
