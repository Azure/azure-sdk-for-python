# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models as _models
from ..._serialization import Serializer
from .._vendor import _convert_request, _format_url_section

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_get_by_subscription_id_and_tracking_id_request(
    event_tracking_id: str,
    subscription_id: str,
    *,
    filter: Optional[str] = None,
    query_start_time: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2022-10-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}"
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "eventTrackingId": _SERIALIZER.url("event_tracking_id", event_tracking_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["$filter"] = _SERIALIZER.query("filter", filter, "str")
    if query_start_time is not None:
        _params["queryStartTime"] = _SERIALIZER.query("query_start_time", query_start_time, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_fetch_details_by_subscription_id_and_tracking_id_request(
    event_tracking_id: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2022-10-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails",
    )  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str", min_length=1),
        "eventTrackingId": _SERIALIZER.url("event_tracking_id", event_tracking_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_get_by_tenant_id_and_tracking_id_request(
    event_tracking_id: str, *, filter: Optional[str] = None, query_start_time: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2022-10-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}")
    path_format_arguments = {
        "eventTrackingId": _SERIALIZER.url("event_tracking_id", event_tracking_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["$filter"] = _SERIALIZER.query("filter", filter, "str")
    if query_start_time is not None:
        _params["queryStartTime"] = _SERIALIZER.query("query_start_time", query_start_time, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_fetch_details_by_tenant_id_and_tracking_id_request(event_tracking_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2022-10-01"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails")
    path_format_arguments = {
        "eventTrackingId": _SERIALIZER.url("event_tracking_id", event_tracking_id, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class EventOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.resourcehealth.v2022_10_01.ResourceHealthMgmtClient`'s
        :attr:`event` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get_by_subscription_id_and_tracking_id(
        self,
        event_tracking_id: str,
        filter: Optional[str] = None,
        query_start_time: Optional[str] = None,
        **kwargs: Any
    ) -> _models.Event:
        """Service health event in the subscription by event tracking id.

        :param event_tracking_id: Event Id which uniquely identifies ServiceHealth event. Required.
        :type event_tracking_id: str
        :param filter: The filter to apply on the operation. For more information please see
         https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. Default value
         is None.
        :type filter: str
        :param query_start_time: Specifies from when to return events, based on the lastUpdateTime
         property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020. Default
         value is None.
        :type query_start_time: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Event or the result of cls(response)
        :rtype: ~azure.mgmt.resourcehealth.v2022_10_01.models.Event
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2022-10-01"))
        cls: ClsType[_models.Event] = kwargs.pop("cls", None)

        request = build_get_by_subscription_id_and_tracking_id_request(
            event_tracking_id=event_tracking_id,
            subscription_id=self._config.subscription_id,
            filter=filter,
            query_start_time=query_start_time,
            api_version=api_version,
            template_url=self.get_by_subscription_id_and_tracking_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Event", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_by_subscription_id_and_tracking_id.metadata = {
        "url": "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}"
    }

    @distributed_trace
    def fetch_details_by_subscription_id_and_tracking_id(self, event_tracking_id: str, **kwargs: Any) -> _models.Event:
        """Service health event details in the subscription by event tracking id. This can be used to
        fetch sensitive properties for Security Advisory events.

        :param event_tracking_id: Event Id which uniquely identifies ServiceHealth event. Required.
        :type event_tracking_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Event or the result of cls(response)
        :rtype: ~azure.mgmt.resourcehealth.v2022_10_01.models.Event
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2022-10-01"))
        cls: ClsType[_models.Event] = kwargs.pop("cls", None)

        request = build_fetch_details_by_subscription_id_and_tracking_id_request(
            event_tracking_id=event_tracking_id,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.fetch_details_by_subscription_id_and_tracking_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Event", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    fetch_details_by_subscription_id_and_tracking_id.metadata = {
        "url": "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails"
    }

    @distributed_trace
    def get_by_tenant_id_and_tracking_id(
        self,
        event_tracking_id: str,
        filter: Optional[str] = None,
        query_start_time: Optional[str] = None,
        **kwargs: Any
    ) -> _models.Event:
        """Service health event in the tenant by event tracking id.

        :param event_tracking_id: Event Id which uniquely identifies ServiceHealth event. Required.
        :type event_tracking_id: str
        :param filter: The filter to apply on the operation. For more information please see
         https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN. Default value
         is None.
        :type filter: str
        :param query_start_time: Specifies from when to return events, based on the lastUpdateTime
         property. For example, queryStartTime = 7/24/2020 OR queryStartTime=7%2F24%2F2020. Default
         value is None.
        :type query_start_time: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Event or the result of cls(response)
        :rtype: ~azure.mgmt.resourcehealth.v2022_10_01.models.Event
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2022-10-01"))
        cls: ClsType[_models.Event] = kwargs.pop("cls", None)

        request = build_get_by_tenant_id_and_tracking_id_request(
            event_tracking_id=event_tracking_id,
            filter=filter,
            query_start_time=query_start_time,
            api_version=api_version,
            template_url=self.get_by_tenant_id_and_tracking_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Event", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_by_tenant_id_and_tracking_id.metadata = {"url": "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}"}

    @distributed_trace
    def fetch_details_by_tenant_id_and_tracking_id(self, event_tracking_id: str, **kwargs: Any) -> _models.Event:
        """Service health event details in the tenant by event tracking id. This can be used to fetch
        sensitive properties for Security Advisory events.

        :param event_tracking_id: Event Id which uniquely identifies ServiceHealth event. Required.
        :type event_tracking_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Event or the result of cls(response)
        :rtype: ~azure.mgmt.resourcehealth.v2022_10_01.models.Event
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2022-10-01"))
        cls: ClsType[_models.Event] = kwargs.pop("cls", None)

        request = build_fetch_details_by_tenant_id_and_tracking_id_request(
            event_tracking_id=event_tracking_id,
            api_version=api_version,
            template_url=self.fetch_details_by_tenant_id_and_tracking_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Event", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    fetch_details_by_tenant_id_and_tracking_id.metadata = {
        "url": "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails"
    }
