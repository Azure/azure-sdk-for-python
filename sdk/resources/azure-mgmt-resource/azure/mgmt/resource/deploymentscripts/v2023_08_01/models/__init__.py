# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=wrong-import-position

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ._patch import *  # pylint: disable=unused-wildcard-import


from ._models_py3 import (  # type: ignore
    AzureCliScript,
    AzureCliScriptProperties,
    AzurePowerShellScript,
    AzurePowerShellScriptProperties,
    AzureResourceBase,
    ContainerConfiguration,
    ContainerGroupSubnetId,
    DeploymentScript,
    DeploymentScriptListResult,
    DeploymentScriptPropertiesBase,
    DeploymentScriptUpdateParameter,
    DeploymentScriptsError,
    EnvironmentVariable,
    ErrorAdditionalInfo,
    ErrorResponse,
    ManagedServiceIdentity,
    ScriptConfigurationBase,
    ScriptLog,
    ScriptLogsList,
    ScriptStatus,
    StorageAccountConfiguration,
    SystemData,
    UserAssignedIdentity,
)

from ._deployment_scripts_client_enums import (  # type: ignore
    CleanupOptions,
    CreatedByType,
    ManagedServiceIdentityType,
    ScriptProvisioningState,
    ScriptType,
)
from ._patch import __all__ as _patch_all
from ._patch import *
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "AzureCliScript",
    "AzureCliScriptProperties",
    "AzurePowerShellScript",
    "AzurePowerShellScriptProperties",
    "AzureResourceBase",
    "ContainerConfiguration",
    "ContainerGroupSubnetId",
    "DeploymentScript",
    "DeploymentScriptListResult",
    "DeploymentScriptPropertiesBase",
    "DeploymentScriptUpdateParameter",
    "DeploymentScriptsError",
    "EnvironmentVariable",
    "ErrorAdditionalInfo",
    "ErrorResponse",
    "ManagedServiceIdentity",
    "ScriptConfigurationBase",
    "ScriptLog",
    "ScriptLogsList",
    "ScriptStatus",
    "StorageAccountConfiguration",
    "SystemData",
    "UserAssignedIdentity",
    "CleanupOptions",
    "CreatedByType",
    "ManagedServiceIdentityType",
    "ScriptProvisioningState",
    "ScriptType",
]
__all__.extend([p for p in _patch_all if p not in __all__])  # pyright: ignore
_patch_sdk()
