# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import os
import json
from typing import Any, Dict
from azure.identity import DefaultAzureCredential
from dotenv import load_dotenv
from azure.mgmt.resource.resources import ResourceManagementClient
from azure.core.exceptions import HttpResponseError
from azure.core.rest import HttpRequest
import functools


load_dotenv()


def raw_request_hook(client: ResourceManagementClient, request):
    # create the acquire policy request
    subscription_id = (
        request.http_request.url.split("subscriptions/")[1].split("/")[0]
        if "subscriptions/" in request.http_request.url
        else None
    )
    if not subscription_id:
        raise HttpResponseError("Failed to get subscriptionId from request url: {}".format(request.http_request.url))

    content = getattr(request.http_request, "content", None)
    if content and isinstance(content, str):
        try:
            content = json.loads(content)
        except Exception:  # pylint: disable=broad-except
            pass

    body: Dict[str, Any] = {"operation": {"uri": request.http_request.url, "httpMethod": request.http_request.method}}
    if content:
        body["operation"]["content"] = content
    change_reference = request.context.options.pop("change_reference", None)
    if change_reference:
        body["changeReference"] = change_reference

    acquire_policy_url = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/acquirePolicyToken"
    acquire_policy_request = HttpRequest(
        method="POST",
        url=acquire_policy_url.format(subscriptionId=subscription_id),
        params={"api-version": "2025-03-01"},
        headers={"Accept": "application/json", "Content-Type": "application/json"},
        content=json.dumps(body),
    )
    # send request to acquire policy token
    acquire_policy_response = client._send_request(acquire_policy_request)

    # set the policy token to original request header
    if acquire_policy_response.status_code != 200:
        raise HttpResponseError(
            "status code is {} instead of expected 200 when trying call {} to get policy token: {}".format(
                acquire_policy_response.status_code, acquire_policy_request.url, acquire_policy_response.text()
            ),
            response=acquire_policy_response,
        )

    result = acquire_policy_response.json()
    if result.get("result") == "Succeeded" and result.get("token"):
        request.http_request.headers["x-ms-policy-external-evaluations"] = result["token"]
        print("set policy token to request header successfully.")
    else:
        raise HttpResponseError("Failed to acquire policy token: {}".format(acquire_policy_response.text()))


def create_hook():
    client = ResourceManagementClient(
        credential=DefaultAzureCredential(), subscription_id=os.getenv("AZURE_SUBSCRIPTION_ID", "")
    )
    return functools.partial(raw_request_hook, client)


def main():
    client = ResourceManagementClient(
        credential=DefaultAzureCredential(), subscription_id=os.getenv("AZURE_SUBSCRIPTION_ID", "")
    )

    # use the raw_request_hook to set policy token header
    client.resource_groups.create_or_update(
        resource_group_name="test-rg-policy-header",
        parameters={"location": "eastus"},
        raw_request_hook=create_hook(),
        change_reference="",  # set change reference if needed
    )


if __name__ == "__main__":
    main()
