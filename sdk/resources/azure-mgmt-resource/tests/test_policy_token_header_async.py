# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.resource.resources.aio import ResourceManagementClient
from azure.core.exceptions import HttpResponseError
from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


def check_policy_token_header_exist_lro(request):
    if request.http_request.method != "GET":
        check_policy_token_header_exist(request)


def check_policy_token_header_exist(request):
    assert "x-ms-policy-external-evaluations" in request.http_request.headers


def check_policy_token_header_not_exist(request):
    assert "x-ms-policy-external-evaluations" not in request.http_request.headers


@pytest.mark.live_test_only
class TestPolicyTokenHeaderAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ResourceManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_resource_groups_check_existence(self, resource_group):
        with pytest.raises(HttpResponseError, match="status code is"):
            await self.client.resource_groups.check_existence(
                resource_group_name=resource_group.name,
                acquire_policy_token=True,
                raw_request_hook=check_policy_token_header_exist,
            )

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_resource_groups_create_or_update(self, resource_group):
        await self.client.resource_groups.create_or_update(
            resource_group_name=resource_group.name,
            parameters={
                "location": AZURE_LOCATION,
            },
            raw_request_hook=check_policy_token_header_not_exist,
        )

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_resource_groups_delete(self, resource_group):
        await (
            await self.client.resource_groups.begin_delete(
                resource_group_name=resource_group.name,
                acquire_policy_token=True,
                raw_request_hook=check_policy_token_header_exist_lro,
            )
        ).result()

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_resource_groups_get(self, resource_group):
        # policy token header shall not exist for GET operation
        await self.client.resource_groups.get(
            resource_group_name=resource_group.name,
            acquire_policy_token=True,
            raw_request_hook=check_policy_token_header_not_exist,
        )

    @pytest.mark.asyncio
    @recorded_by_proxy_async
    async def test_resource_check_existence_by_id(self):
        # If path path contains no subscriptionId, it shall raise error
        with pytest.raises(HttpResponseError, match="Failed to get subscriptionId from request url"):
            await self.client.resources.check_existence_by_id(
                resource_id="test",
                api_version="2021-04-01",
                acquire_policy_token=True,
            )
