# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._developer_hub_service_client_operations import (
    build_git_hub_o_auth_callback_request,
    build_git_hub_o_auth_request,
    build_list_git_hub_o_auth_request,
)
from .._vendor import MixinABC

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class DeveloperHubServiceClientOperationsMixin(MixinABC):
    @overload
    async def git_hub_o_auth(
        self,
        location: str,
        parameters: Optional[_models.GitHubOAuthCallRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GitHubOAuthInfoResponse:
        """Gets GitHubOAuth info used to authenticate users with the Developer Hub GitHub App.

        Gets GitHubOAuth info used to authenticate users with the Developer Hub GitHub App.

        :param location: The name of Azure region. Required.
        :type location: str
        :param parameters: Default value is None.
        :type parameters: ~azure.mgmt.devhub.models.GitHubOAuthCallRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GitHubOAuthInfoResponse or the result of cls(response)
        :rtype: ~azure.mgmt.devhub.models.GitHubOAuthInfoResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def git_hub_o_auth(
        self, location: str, parameters: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.GitHubOAuthInfoResponse:
        """Gets GitHubOAuth info used to authenticate users with the Developer Hub GitHub App.

        Gets GitHubOAuth info used to authenticate users with the Developer Hub GitHub App.

        :param location: The name of Azure region. Required.
        :type location: str
        :param parameters: Default value is None.
        :type parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GitHubOAuthInfoResponse or the result of cls(response)
        :rtype: ~azure.mgmt.devhub.models.GitHubOAuthInfoResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def git_hub_o_auth(
        self, location: str, parameters: Optional[Union[_models.GitHubOAuthCallRequest, IO]] = None, **kwargs: Any
    ) -> _models.GitHubOAuthInfoResponse:
        """Gets GitHubOAuth info used to authenticate users with the Developer Hub GitHub App.

        Gets GitHubOAuth info used to authenticate users with the Developer Hub GitHub App.

        :param location: The name of Azure region. Required.
        :type location: str
        :param parameters: Is either a model type or a IO type. Default value is None.
        :type parameters: ~azure.mgmt.devhub.models.GitHubOAuthCallRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GitHubOAuthInfoResponse or the result of cls(response)
        :rtype: ~azure.mgmt.devhub.models.GitHubOAuthInfoResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.GitHubOAuthInfoResponse]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IO, bytes)):
            _content = parameters
        else:
            if parameters is not None:
                _json = self._serialize.body(parameters, "GitHubOAuthCallRequest")
            else:
                _json = None

        request = build_git_hub_o_auth_request(
            location=location,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.git_hub_o_auth.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("GitHubOAuthInfoResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    git_hub_o_auth.metadata = {"url": "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default/getGitHubOAuthInfo"}  # type: ignore

    @distributed_trace_async
    async def git_hub_o_auth_callback(self, location: str, **kwargs: Any) -> _models.GitHubOAuthResponse:
        """Callback URL to hit once authenticated with GitHub App to have the service store the OAuth
        token.

        Callback URL to hit once authenticated with GitHub App to have the service store the OAuth
        token.

        :param location: The name of Azure region. Required.
        :type location: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GitHubOAuthResponse or the result of cls(response)
        :rtype: ~azure.mgmt.devhub.models.GitHubOAuthResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.GitHubOAuthResponse]

        request = build_git_hub_o_auth_callback_request(
            location=location,
            subscription_id=self._config.subscription_id,
            code=self._config.code,
            state=self._config.state,
            api_version=api_version,
            template_url=self.git_hub_o_auth_callback.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("GitHubOAuthResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    git_hub_o_auth_callback.metadata = {"url": "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth/default"}  # type: ignore

    @distributed_trace_async
    async def list_git_hub_o_auth(self, location: str, **kwargs: Any) -> _models.GitHubOAuthListResponse:
        """Callback URL to hit once authenticated with GitHub App to have the service store the OAuth
        token.

        Callback URL to hit once authenticated with GitHub App to have the service store the OAuth
        token.

        :param location: The name of Azure region. Required.
        :type location: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GitHubOAuthListResponse or the result of cls(response)
        :rtype: ~azure.mgmt.devhub.models.GitHubOAuthListResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", self._config.api_version))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.GitHubOAuthListResponse]

        request = build_list_git_hub_o_auth_request(
            location=location,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.list_git_hub_o_auth.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("GitHubOAuthListResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_git_hub_o_auth.metadata = {"url": "/subscriptions/{subscriptionId}/providers/Microsoft.DevHub/locations/{location}/githuboauth"}  # type: ignore
