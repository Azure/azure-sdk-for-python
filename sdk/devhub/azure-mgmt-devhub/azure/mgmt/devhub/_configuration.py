# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core.configuration import Configuration
from azure.core.pipeline import policies
from azure.mgmt.core.policies import ARMChallengeAuthenticationPolicy, ARMHttpLoggingPolicy

from ._version import VERSION

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials import TokenCredential


class DeveloperHubServiceClientConfiguration(Configuration):  # pylint: disable=too-many-instance-attributes
    """Configuration for DeveloperHubServiceClient.

    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials.TokenCredential
    :param code: The code response from authenticating the GitHub App. Required.
    :type code: str
    :param state: The state response from authenticating the GitHub App. Required.
    :type state: str
    :param subscription_id: The ID of the target subscription. Required.
    :type subscription_id: str
    :param managed_cluster_resource: The ManagedCluster resource associated with the workflows.
     Default value is None.
    :type managed_cluster_resource: str
    :keyword api_version: Api Version. Default value is "2022-04-01-preview". Note that overriding
     this default value may result in unsupported behavior.
    :paramtype api_version: str
    """

    def __init__(
        self,
        credential: "TokenCredential",
        code: str,
        state: str,
        subscription_id: str,
        managed_cluster_resource: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        super(DeveloperHubServiceClientConfiguration, self).__init__(**kwargs)
        api_version = kwargs.pop("api_version", "2022-04-01-preview")  # type: str

        if credential is None:
            raise ValueError("Parameter 'credential' must not be None.")
        if code is None:
            raise ValueError("Parameter 'code' must not be None.")
        if state is None:
            raise ValueError("Parameter 'state' must not be None.")
        if subscription_id is None:
            raise ValueError("Parameter 'subscription_id' must not be None.")

        self.credential = credential
        self.code = code
        self.state = state
        self.subscription_id = subscription_id
        self.managed_cluster_resource = managed_cluster_resource
        self.api_version = api_version
        self.credential_scopes = kwargs.pop("credential_scopes", ["https://management.azure.com/.default"])
        kwargs.setdefault("sdk_moniker", "mgmt-devhub/{}".format(VERSION))
        self._configure(**kwargs)

    def _configure(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        self.user_agent_policy = kwargs.get("user_agent_policy") or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get("headers_policy") or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get("proxy_policy") or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get("logging_policy") or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.http_logging_policy = kwargs.get("http_logging_policy") or ARMHttpLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get("retry_policy") or policies.RetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get("custom_hook_policy") or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get("redirect_policy") or policies.RedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get("authentication_policy")
        if self.credential and not self.authentication_policy:
            self.authentication_policy = ARMChallengeAuthenticationPolicy(
                self.credential, *self.credential_scopes, **kwargs
            )
