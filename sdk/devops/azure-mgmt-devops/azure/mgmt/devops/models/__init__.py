# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import Authorization
from ._models_py3 import BootstrapConfiguration
from ._models_py3 import CloudErrorBody
from ._models_py3 import CodeRepository
from ._models_py3 import InputDescriptor
from ._models_py3 import InputValue
from ._models_py3 import Operation
from ._models_py3 import OperationListResult
from ._models_py3 import OrganizationReference
from ._models_py3 import Pipeline
from ._models_py3 import PipelineListResult
from ._models_py3 import PipelineTemplate
from ._models_py3 import PipelineTemplateDefinition
from ._models_py3 import PipelineTemplateDefinitionListResult
from ._models_py3 import PipelineUpdateParameters
from ._models_py3 import ProjectReference
from ._models_py3 import Resource

from ._azure_dev_ops_enums import AuthorizationType
from ._azure_dev_ops_enums import CodeRepositoryType
from ._azure_dev_ops_enums import InputDataType
from ._patch import __all__ as _patch_all
from ._patch import *  # type: ignore # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "Authorization",
    "BootstrapConfiguration",
    "CloudErrorBody",
    "CodeRepository",
    "InputDescriptor",
    "InputValue",
    "Operation",
    "OperationListResult",
    "OrganizationReference",
    "Pipeline",
    "PipelineListResult",
    "PipelineTemplate",
    "PipelineTemplateDefinition",
    "PipelineTemplateDefinitionListResult",
    "PipelineUpdateParameters",
    "ProjectReference",
    "Resource",
    "AuthorizationType",
    "CodeRepositoryType",
    "InputDataType",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
