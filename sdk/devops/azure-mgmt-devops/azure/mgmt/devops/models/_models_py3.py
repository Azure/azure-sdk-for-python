# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Authorization(_serialization.Model):
    """Authorization info used to access a resource (like code repository).

    All required parameters must be populated in order to send to Azure.

    :ivar authorization_type: Type of authorization. Required. "personalAccessToken"
    :vartype authorization_type: str or ~azure.mgmt.devops.models.AuthorizationType
    :ivar parameters: Authorization parameters corresponding to the authorization type.
    :vartype parameters: dict[str, str]
    """

    _validation = {
        "authorization_type": {"required": True},
    }

    _attribute_map = {
        "authorization_type": {"key": "authorizationType", "type": "str"},
        "parameters": {"key": "parameters", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        authorization_type: Union[str, "_models.AuthorizationType"],
        parameters: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword authorization_type: Type of authorization. Required. "personalAccessToken"
        :paramtype authorization_type: str or ~azure.mgmt.devops.models.AuthorizationType
        :keyword parameters: Authorization parameters corresponding to the authorization type.
        :paramtype parameters: dict[str, str]
        """
        super().__init__(**kwargs)
        self.authorization_type = authorization_type
        self.parameters = parameters


class BootstrapConfiguration(_serialization.Model):
    """Configuration used to bootstrap a Pipeline.

    All required parameters must be populated in order to send to Azure.

    :ivar repository: Repository containing the source code for the pipeline.
    :vartype repository: ~azure.mgmt.devops.models.CodeRepository
    :ivar template: Template used to bootstrap the pipeline. Required.
    :vartype template: ~azure.mgmt.devops.models.PipelineTemplate
    """

    _validation = {
        "template": {"required": True},
    }

    _attribute_map = {
        "repository": {"key": "repository", "type": "CodeRepository"},
        "template": {"key": "template", "type": "PipelineTemplate"},
    }

    def __init__(
        self, *, template: "_models.PipelineTemplate", repository: Optional["_models.CodeRepository"] = None, **kwargs
    ):
        """
        :keyword repository: Repository containing the source code for the pipeline.
        :paramtype repository: ~azure.mgmt.devops.models.CodeRepository
        :keyword template: Template used to bootstrap the pipeline. Required.
        :paramtype template: ~azure.mgmt.devops.models.PipelineTemplate
        """
        super().__init__(**kwargs)
        self.repository = repository
        self.template = template


class CloudErrorBody(_serialization.Model):
    """An error response from the Pipelines Resource Provider.

    :ivar code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for display in a user
     interface.
    :vartype message: str
    :ivar target: The target of the particular error. For example, the name of the property in
     error or the method where the error occurred.
    :vartype target: str
    :ivar details: A list of additional details about the error.
    :vartype details: list[~azure.mgmt.devops.models.CloudErrorBody]
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[CloudErrorBody]"},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["_models.CloudErrorBody"]] = None,
        **kwargs
    ):
        """
        :keyword code: An identifier for the error. Codes are invariant and are intended to be consumed
         programmatically.
        :paramtype code: str
        :keyword message: A message describing the error, intended to be suitable for display in a user
         interface.
        :paramtype message: str
        :keyword target: The target of the particular error. For example, the name of the property in
         error or the method where the error occurred.
        :paramtype target: str
        :keyword details: A list of additional details about the error.
        :paramtype details: list[~azure.mgmt.devops.models.CloudErrorBody]
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class CodeRepository(_serialization.Model):
    """Repository containing the source code for a pipeline.

    All required parameters must be populated in order to send to Azure.

    :ivar repository_type: Type of code repository. Required. Known values are: "gitHub" and
     "vstsGit".
    :vartype repository_type: str or ~azure.mgmt.devops.models.CodeRepositoryType
    :ivar id: Unique immutable identifier of the code repository. Required.
    :vartype id: str
    :ivar default_branch: Default branch used to configure Continuous Integration (CI) in the
     pipeline. Required.
    :vartype default_branch: str
    :ivar authorization: Authorization info to access the code repository.
    :vartype authorization: ~azure.mgmt.devops.models.Authorization
    :ivar properties: Repository-specific properties.
    :vartype properties: dict[str, str]
    """

    _validation = {
        "repository_type": {"required": True},
        "id": {"required": True},
        "default_branch": {"required": True},
    }

    _attribute_map = {
        "repository_type": {"key": "repositoryType", "type": "str"},
        "id": {"key": "id", "type": "str"},
        "default_branch": {"key": "defaultBranch", "type": "str"},
        "authorization": {"key": "authorization", "type": "Authorization"},
        "properties": {"key": "properties", "type": "{str}"},
    }

    def __init__(
        self,
        *,
        repository_type: Union[str, "_models.CodeRepositoryType"],
        id: str,  # pylint: disable=redefined-builtin
        default_branch: str,
        authorization: Optional["_models.Authorization"] = None,
        properties: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword repository_type: Type of code repository. Required. Known values are: "gitHub" and
         "vstsGit".
        :paramtype repository_type: str or ~azure.mgmt.devops.models.CodeRepositoryType
        :keyword id: Unique immutable identifier of the code repository. Required.
        :paramtype id: str
        :keyword default_branch: Default branch used to configure Continuous Integration (CI) in the
         pipeline. Required.
        :paramtype default_branch: str
        :keyword authorization: Authorization info to access the code repository.
        :paramtype authorization: ~azure.mgmt.devops.models.Authorization
        :keyword properties: Repository-specific properties.
        :paramtype properties: dict[str, str]
        """
        super().__init__(**kwargs)
        self.repository_type = repository_type
        self.id = id
        self.default_branch = default_branch
        self.authorization = authorization
        self.properties = properties


class InputDescriptor(_serialization.Model):
    """Representation of a pipeline template input parameter.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Identifier of the input parameter. Required.
    :vartype id: str
    :ivar description: Description of the input parameter.
    :vartype description: str
    :ivar type: Data type of the value of the input parameter. Required. Known values are:
     "String", "SecureString", "Int", "Bool", and "Authorization".
    :vartype type: str or ~azure.mgmt.devops.models.InputDataType
    :ivar possible_values: List of possible values for the input parameter.
    :vartype possible_values: list[~azure.mgmt.devops.models.InputValue]
    """

    _validation = {
        "id": {"required": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "possible_values": {"key": "possibleValues", "type": "[InputValue]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        type: Union[str, "_models.InputDataType"],
        description: Optional[str] = None,
        possible_values: Optional[List["_models.InputValue"]] = None,
        **kwargs
    ):
        """
        :keyword id: Identifier of the input parameter. Required.
        :paramtype id: str
        :keyword description: Description of the input parameter.
        :paramtype description: str
        :keyword type: Data type of the value of the input parameter. Required. Known values are:
         "String", "SecureString", "Int", "Bool", and "Authorization".
        :paramtype type: str or ~azure.mgmt.devops.models.InputDataType
        :keyword possible_values: List of possible values for the input parameter.
        :paramtype possible_values: list[~azure.mgmt.devops.models.InputValue]
        """
        super().__init__(**kwargs)
        self.id = id
        self.description = description
        self.type = type
        self.possible_values = possible_values


class InputValue(_serialization.Model):
    """Representation of a pipeline template input parameter value.

    :ivar value: Value of an input parameter.
    :vartype value: str
    :ivar display_value: Description of the input parameter value.
    :vartype display_value: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "str"},
        "display_value": {"key": "displayValue", "type": "str"},
    }

    def __init__(self, *, value: Optional[str] = None, display_value: Optional[str] = None, **kwargs):
        """
        :keyword value: Value of an input parameter.
        :paramtype value: str
        :keyword display_value: Description of the input parameter value.
        :paramtype display_value: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.display_value = display_value


class Operation(_serialization.Model):
    """Properties of an Operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the operation.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation applies to data-plane.
    :vartype is_data_action: str
    :ivar operation: Friendly name of the operation.
    :vartype operation: str
    :ivar resource: Friendly name of the resource type the operation applies to.
    :vartype resource: str
    :ivar description: Friendly description of the operation.
    :vartype description: str
    :ivar provider: Friendly name of the resource provider.
    :vartype provider: str
    """

    _validation = {
        "name": {"readonly": True},
        "operation": {"readonly": True},
        "resource": {"readonly": True},
        "description": {"readonly": True},
        "provider": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "str"},
        "operation": {"key": "display.operation", "type": "str"},
        "resource": {"key": "display.resource", "type": "str"},
        "description": {"key": "display.description", "type": "str"},
        "provider": {"key": "display.provider", "type": "str"},
    }

    def __init__(self, *, is_data_action: Optional[str] = None, **kwargs):
        """
        :keyword is_data_action: Indicates whether the operation applies to data-plane.
        :paramtype is_data_action: str
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = is_data_action
        self.operation = None
        self.resource = None
        self.description = None
        self.provider = None


class OperationListResult(_serialization.Model):
    """Result of a request to list all operations supported by Microsoft.DevOps resource provider.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by Microsoft.DevOps resource provider.
    :vartype value: list[~azure.mgmt.devops.models.Operation]
    :ivar next_link: The URL to get the next set of operations, if there are any.
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, next_link: Optional[str] = None, **kwargs):
        """
        :keyword next_link: The URL to get the next set of operations, if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class OrganizationReference(_serialization.Model):
    """Reference to an Azure DevOps Organization.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique immutable identifier for the Azure DevOps Organization.
    :vartype id: str
    :ivar name: Name of the Azure DevOps Organization. Required.
    :vartype name: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs):
        """
        :keyword name: Name of the Azure DevOps Organization. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = name


class Resource(_serialization.Model):
    """An Azure Resource Manager (ARM) resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar type: Resource Type.
    :vartype type: str
    :ivar tags: Resource Tags.
    :vartype tags: dict[str, str]
    :ivar location: Resource Location.
    :vartype location: str
    :ivar name: Resource Name.
    :vartype name: str
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
        "name": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, location: Optional[str] = None, **kwargs):
        """
        :keyword tags: Resource Tags.
        :paramtype tags: dict[str, str]
        :keyword location: Resource Location.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.type = None
        self.tags = tags
        self.location = location
        self.name = None


class Pipeline(Resource):
    """Azure DevOps Pipeline used to configure Continuous Integration (CI) & Continuous Delivery (CD) for Azure resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar type: Resource Type.
    :vartype type: str
    :ivar tags: Resource Tags.
    :vartype tags: dict[str, str]
    :ivar location: Resource Location.
    :vartype location: str
    :ivar name: Resource Name.
    :vartype name: str
    :ivar pipeline_id: Unique identifier of the Azure Pipeline within the Azure DevOps Project.
    :vartype pipeline_id: int
    :ivar organization: Reference to the Azure DevOps Organization containing the Pipeline.
     Required.
    :vartype organization: ~azure.mgmt.devops.models.OrganizationReference
    :ivar project: Reference to the Azure DevOps Project containing the Pipeline. Required.
    :vartype project: ~azure.mgmt.devops.models.ProjectReference
    :ivar bootstrap_configuration: Configuration used to bootstrap the Pipeline. Required.
    :vartype bootstrap_configuration: ~azure.mgmt.devops.models.BootstrapConfiguration
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
        "name": {"readonly": True},
        "pipeline_id": {"readonly": True},
        "organization": {"required": True},
        "project": {"required": True},
        "bootstrap_configuration": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "pipeline_id": {"key": "properties.pipelineId", "type": "int"},
        "organization": {"key": "properties.organization", "type": "OrganizationReference"},
        "project": {"key": "properties.project", "type": "ProjectReference"},
        "bootstrap_configuration": {"key": "properties.bootstrapConfiguration", "type": "BootstrapConfiguration"},
    }

    def __init__(
        self,
        *,
        organization: "_models.OrganizationReference",
        project: "_models.ProjectReference",
        bootstrap_configuration: "_models.BootstrapConfiguration",
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource Tags.
        :paramtype tags: dict[str, str]
        :keyword location: Resource Location.
        :paramtype location: str
        :keyword organization: Reference to the Azure DevOps Organization containing the Pipeline.
         Required.
        :paramtype organization: ~azure.mgmt.devops.models.OrganizationReference
        :keyword project: Reference to the Azure DevOps Project containing the Pipeline. Required.
        :paramtype project: ~azure.mgmt.devops.models.ProjectReference
        :keyword bootstrap_configuration: Configuration used to bootstrap the Pipeline. Required.
        :paramtype bootstrap_configuration: ~azure.mgmt.devops.models.BootstrapConfiguration
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.pipeline_id = None
        self.organization = organization
        self.project = project
        self.bootstrap_configuration = bootstrap_configuration


class PipelineListResult(_serialization.Model):
    """Result of a request to list all Azure Pipelines under a given scope.

    :ivar value: List of pipelines.
    :vartype value: list[~azure.mgmt.devops.models.Pipeline]
    :ivar next_link: URL to get the next set of Pipelines, if there are any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[Pipeline]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: Optional[List["_models.Pipeline"]] = None, next_link: Optional[str] = None, **kwargs):
        """
        :keyword value: List of pipelines.
        :paramtype value: list[~azure.mgmt.devops.models.Pipeline]
        :keyword next_link: URL to get the next set of Pipelines, if there are any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PipelineTemplate(_serialization.Model):
    """Template used to bootstrap the pipeline.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique identifier of the pipeline template. Required.
    :vartype id: str
    :ivar parameters: Dictionary of input parameters used in the pipeline template.
    :vartype parameters: dict[str, str]
    """

    _validation = {
        "id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "parameters": {"key": "parameters", "type": "{str}"},
    }

    def __init__(
        self, *, id: str, parameters: Optional[Dict[str, str]] = None, **kwargs  # pylint: disable=redefined-builtin
    ):
        """
        :keyword id: Unique identifier of the pipeline template. Required.
        :paramtype id: str
        :keyword parameters: Dictionary of input parameters used in the pipeline template.
        :paramtype parameters: dict[str, str]
        """
        super().__init__(**kwargs)
        self.id = id
        self.parameters = parameters


class PipelineTemplateDefinition(_serialization.Model):
    """Definition of a pipeline template.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique identifier of the pipeline template. Required.
    :vartype id: str
    :ivar description: Description of the pipeline enabled by the template.
    :vartype description: str
    :ivar inputs: List of input parameters required by the template to create a pipeline.
    :vartype inputs: list[~azure.mgmt.devops.models.InputDescriptor]
    """

    _validation = {
        "id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "inputs": {"key": "inputs", "type": "[InputDescriptor]"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        description: Optional[str] = None,
        inputs: Optional[List["_models.InputDescriptor"]] = None,
        **kwargs
    ):
        """
        :keyword id: Unique identifier of the pipeline template. Required.
        :paramtype id: str
        :keyword description: Description of the pipeline enabled by the template.
        :paramtype description: str
        :keyword inputs: List of input parameters required by the template to create a pipeline.
        :paramtype inputs: list[~azure.mgmt.devops.models.InputDescriptor]
        """
        super().__init__(**kwargs)
        self.id = id
        self.description = description
        self.inputs = inputs


class PipelineTemplateDefinitionListResult(_serialization.Model):
    """Result of a request to list all pipeline template definitions.

    :ivar value: List of pipeline template definitions.
    :vartype value: list[~azure.mgmt.devops.models.PipelineTemplateDefinition]
    :ivar next_link: The URL to get the next set of pipeline template definitions, if there are
     any.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[PipelineTemplateDefinition]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.PipelineTemplateDefinition"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword value: List of pipeline template definitions.
        :paramtype value: list[~azure.mgmt.devops.models.PipelineTemplateDefinition]
        :keyword next_link: The URL to get the next set of pipeline template definitions, if there are
         any.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PipelineUpdateParameters(_serialization.Model):
    """Request payload used to update an existing Azure Pipeline.

    :ivar tags: Dictionary of key-value pairs to be set as tags on the Azure Pipeline. This will
     overwrite any existing tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Dictionary of key-value pairs to be set as tags on the Azure Pipeline. This will
         overwrite any existing tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class ProjectReference(_serialization.Model):
    """Reference to an Azure DevOps Project.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique immutable identifier of the Azure DevOps Project.
    :vartype id: str
    :ivar name: Name of the Azure DevOps Project. Required.
    :vartype name: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: str, **kwargs):
        """
        :keyword name: Name of the Azure DevOps Project. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = name
