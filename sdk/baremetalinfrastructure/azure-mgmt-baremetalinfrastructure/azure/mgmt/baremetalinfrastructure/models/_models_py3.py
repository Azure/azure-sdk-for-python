# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Resource(msrest.serialization.Model):
    """Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class AzureBareMetalInstance(TrackedResource):
    """AzureBareMetal instance info on Azure (ARM properties and AzureBareMetal properties).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param hardware_profile: Specifies the hardware settings for the AzureBareMetal instance.
    :type hardware_profile: ~bare_metal_infrastructure_client.models.HardwareProfile
    :param storage_profile: Specifies the storage settings for the AzureBareMetal instance disks.
    :type storage_profile: ~bare_metal_infrastructure_client.models.StorageProfile
    :param os_profile: Specifies the operating system settings for the AzureBareMetal instance.
    :type os_profile: ~bare_metal_infrastructure_client.models.OSProfile
    :param network_profile: Specifies the network settings for the AzureBareMetal instance.
    :type network_profile: ~bare_metal_infrastructure_client.models.NetworkProfile
    :ivar azure_bare_metal_instance_id: Specifies the AzureBareMetal instance unique ID.
    :vartype azure_bare_metal_instance_id: str
    :ivar power_state: Resource power state. Possible values include: "starting", "started",
     "stopping", "stopped", "restarting", "unknown".
    :vartype power_state: str or
     ~bare_metal_infrastructure_client.models.AzureBareMetalInstancePowerStateEnum
    :ivar proximity_placement_group: Resource proximity placement group.
    :vartype proximity_placement_group: str
    :ivar hw_revision: Hardware revision of an AzureBareMetal instance.
    :vartype hw_revision: str
    :param partner_node_id: ARM ID of another AzureBareMetalInstance that will share a network with
     this AzureBareMetalInstance.
    :type partner_node_id: str
    :ivar provisioning_state: State of provisioning of the AzureBareMetalInstance. Possible values
     include: "Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating".
    :vartype provisioning_state: str or
     ~bare_metal_infrastructure_client.models.AzureBareMetalProvisioningStatesEnum
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'azure_bare_metal_instance_id': {'readonly': True},
        'power_state': {'readonly': True},
        'proximity_placement_group': {'readonly': True},
        'hw_revision': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'hardware_profile': {'key': 'properties.hardwareProfile', 'type': 'HardwareProfile'},
        'storage_profile': {'key': 'properties.storageProfile', 'type': 'StorageProfile'},
        'os_profile': {'key': 'properties.osProfile', 'type': 'OSProfile'},
        'network_profile': {'key': 'properties.networkProfile', 'type': 'NetworkProfile'},
        'azure_bare_metal_instance_id': {'key': 'properties.azureBareMetalInstanceId', 'type': 'str'},
        'power_state': {'key': 'properties.powerState', 'type': 'str'},
        'proximity_placement_group': {'key': 'properties.proximityPlacementGroup', 'type': 'str'},
        'hw_revision': {'key': 'properties.hwRevision', 'type': 'str'},
        'partner_node_id': {'key': 'properties.partnerNodeId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        hardware_profile: Optional["HardwareProfile"] = None,
        storage_profile: Optional["StorageProfile"] = None,
        os_profile: Optional["OSProfile"] = None,
        network_profile: Optional["NetworkProfile"] = None,
        partner_node_id: Optional[str] = None,
        **kwargs
    ):
        super(AzureBareMetalInstance, self).__init__(tags=tags, location=location, **kwargs)
        self.hardware_profile = hardware_profile
        self.storage_profile = storage_profile
        self.os_profile = os_profile
        self.network_profile = network_profile
        self.azure_bare_metal_instance_id = None
        self.power_state = None
        self.proximity_placement_group = None
        self.hw_revision = None
        self.partner_node_id = partner_node_id
        self.provisioning_state = None


class AzureBareMetalInstancesListResult(msrest.serialization.Model):
    """The response from the List AzureBareMetal Instances operation.

    :param value: The list of Azure BareMetal instances.
    :type value: list[~bare_metal_infrastructure_client.models.AzureBareMetalInstance]
    :param next_link: The URL to get the next set of AzureBareMetal instances.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AzureBareMetalInstance]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["AzureBareMetalInstance"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(AzureBareMetalInstancesListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Disk(msrest.serialization.Model):
    """Specifies the disk information fo the AzureBareMetal instance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param name: The disk name.
    :type name: str
    :param disk_size_gb: Specifies the size of an empty data disk in gigabytes.
    :type disk_size_gb: int
    :ivar lun: Specifies the logical unit number of the data disk. This value is used to identify
     data disks within the VM and therefore must be unique for each data disk attached to a VM.
    :vartype lun: int
    """

    _validation = {
        'lun': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'disk_size_gb': {'key': 'diskSizeGB', 'type': 'int'},
        'lun': {'key': 'lun', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        disk_size_gb: Optional[int] = None,
        **kwargs
    ):
        super(Disk, self).__init__(**kwargs)
        self.name = name
        self.disk_size_gb = disk_size_gb
        self.lun = None


class Display(msrest.serialization.Model):
    """Detailed BareMetal operation information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name. This form is also
     expected to include the publisher/company responsible. Use Title Casing. Begin with "Microsoft"
     for 1st party services.
    :vartype provider: str
    :ivar resource: The localized friendly form of the resource type related to this
     action/operation. This form should match the public documentation for the resource provider.
     Use Title Casing. For examples, refer to the “name” section.
    :vartype resource: str
    :ivar operation: The localized friendly name for the operation as shown to the user. This name
     should be concise (to fit in drop downs), but clear (self-documenting). Use Title Casing and
     include the entity/resource to which it applies.
    :vartype operation: str
    :ivar description: The localized friendly description for the operation as shown to the user.
     This description should be thorough, yet concise. It will be used in tool-tips and detailed
     views.
    :vartype description: str
    :ivar origin: The intended executor of the operation; governs the display of the operation in
     the RBAC UX and the audit logs UX. Default value is 'user,system'.
    :vartype origin: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
        'origin': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Display, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None
        self.origin = None


class ErrorDefinition(msrest.serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~bare_metal_infrastructure_client.models.ErrorDefinition]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDefinition, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    :param error: The error details.
    :type error: ~bare_metal_infrastructure_client.models.ErrorDefinition
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDefinition'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorDefinition"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class HardwareProfile(msrest.serialization.Model):
    """Specifies the hardware settings for the AzureBareMetal instance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar hardware_type: Name of the hardware type (vendor and/or their product name). Possible
     values include: "Cisco_UCS", "HPE".
    :vartype hardware_type: str or
     ~bare_metal_infrastructure_client.models.AzureBareMetalHardwareTypeNamesEnum
    :ivar azure_bare_metal_instance_size: Specifies the AzureBareMetal instance SKU. Possible
     values include: "S72m", "S144m", "S72", "S144", "S192", "S192m", "S192xm", "S96", "S112",
     "S224", "S224m", "S224om", "S224oo", "S224oom", "S224ooo", "S384", "S384m", "S384xm",
     "S384xxm", "S448", "S448m", "S448om", "S448oo", "S448oom", "S448ooo", "S576m", "S576xm",
     "S672", "S672m", "S672om", "S672oo", "S672oom", "S672ooo", "S768", "S768m", "S768xm", "S896",
     "S896m", "S896om", "S896oo", "S896oom", "S896ooo", "S960m".
    :vartype azure_bare_metal_instance_size: str or
     ~bare_metal_infrastructure_client.models.AzureBareMetalInstanceSizeNamesEnum
    """

    _validation = {
        'hardware_type': {'readonly': True},
        'azure_bare_metal_instance_size': {'readonly': True},
    }

    _attribute_map = {
        'hardware_type': {'key': 'hardwareType', 'type': 'str'},
        'azure_bare_metal_instance_size': {'key': 'azureBareMetalInstanceSize', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HardwareProfile, self).__init__(**kwargs)
        self.hardware_type = None
        self.azure_bare_metal_instance_size = None


class IpAddress(msrest.serialization.Model):
    """Specifies the IP address of the network interface.

    :param ip_address: Specifies the IP address of the network interface.
    :type ip_address: str
    """

    _attribute_map = {
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        ip_address: Optional[str] = None,
        **kwargs
    ):
        super(IpAddress, self).__init__(**kwargs)
        self.ip_address = ip_address


class NetworkProfile(msrest.serialization.Model):
    """Specifies the network settings for the AzureBareMetal instance disks.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param network_interfaces: Specifies the network interfaces for the AzureBareMetal instance.
    :type network_interfaces: list[~bare_metal_infrastructure_client.models.IpAddress]
    :ivar circuit_id: Specifies the circuit id for connecting to express route.
    :vartype circuit_id: str
    """

    _validation = {
        'circuit_id': {'readonly': True},
    }

    _attribute_map = {
        'network_interfaces': {'key': 'networkInterfaces', 'type': '[IpAddress]'},
        'circuit_id': {'key': 'circuitId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        network_interfaces: Optional[List["IpAddress"]] = None,
        **kwargs
    ):
        super(NetworkProfile, self).__init__(**kwargs)
        self.network_interfaces = network_interfaces
        self.circuit_id = None


class Operation(msrest.serialization.Model):
    """AzureBareMetal operation information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation being performed on this particular object. This name
     should match the action name that appears in RBAC / the event service.
    :vartype name: str
    :param display: Displayed AzureBareMetal operation information.
    :type display: ~bare_metal_infrastructure_client.models.Display
    :param is_data_action: indicates whether an operation is a data action or not.
    :type is_data_action: bool
    """

    _validation = {
        'name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'Display'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        display: Optional["Display"] = None,
        is_data_action: Optional[bool] = None,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = display
        self.is_data_action = is_data_action


class OperationList(msrest.serialization.Model):
    """List of AzureBareMetal operations.

    :param value: List of AzureBareMetal operations.
    :type value: list[~bare_metal_infrastructure_client.models.Operation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Operation"]] = None,
        **kwargs
    ):
        super(OperationList, self).__init__(**kwargs)
        self.value = value


class OSProfile(msrest.serialization.Model):
    """Specifies the operating system settings for the AzureBareMetal instance.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param computer_name: Specifies the host OS name of the AzureBareMetal instance.
    :type computer_name: str
    :ivar os_type: This property allows you to specify the type of the OS.
    :vartype os_type: str
    :ivar version: Specifies version of operating system.
    :vartype version: str
    :param ssh_public_key: Specifies the SSH public key used to access the operating system.
    :type ssh_public_key: str
    """

    _validation = {
        'os_type': {'readonly': True},
        'version': {'readonly': True},
    }

    _attribute_map = {
        'computer_name': {'key': 'computerName', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'ssh_public_key': {'key': 'sshPublicKey', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        computer_name: Optional[str] = None,
        ssh_public_key: Optional[str] = None,
        **kwargs
    ):
        super(OSProfile, self).__init__(**kwargs)
        self.computer_name = computer_name
        self.os_type = None
        self.version = None
        self.ssh_public_key = ssh_public_key


class Result(msrest.serialization.Model):
    """Sample result definition.

    :param sample_property: Sample property of type string.
    :type sample_property: str
    """

    _attribute_map = {
        'sample_property': {'key': 'sampleProperty', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sample_property: Optional[str] = None,
        **kwargs
    ):
        super(Result, self).__init__(**kwargs)
        self.sample_property = sample_property


class StorageProfile(msrest.serialization.Model):
    """Specifies the storage settings for the AzureBareMetal instance disks.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar nfs_ip_address: IP Address to connect to storage.
    :vartype nfs_ip_address: str
    :param os_disks: Specifies information about the operating system disk used by baremetal
     instance.
    :type os_disks: list[~bare_metal_infrastructure_client.models.Disk]
    """

    _validation = {
        'nfs_ip_address': {'readonly': True},
    }

    _attribute_map = {
        'nfs_ip_address': {'key': 'nfsIpAddress', 'type': 'str'},
        'os_disks': {'key': 'osDisks', 'type': '[Disk]'},
    }

    def __init__(
        self,
        *,
        os_disks: Optional[List["Disk"]] = None,
        **kwargs
    ):
        super(StorageProfile, self).__init__(**kwargs)
        self.nfs_ip_address = None
        self.os_disks = os_disks


class Tags(msrest.serialization.Model):
    """Tags field of the AzureBareMetal instance.

    :param tags: A set of tags. Tags field of the AzureBareMetal instance.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(Tags, self).__init__(**kwargs)
        self.tags = tags
