# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class DiskPoolProperties(_serialization.Model):
    """Disk Pool Properties.

    :ivar csi_params: List of KV pairs to set in StorageClass to configure CSI driver.
    :vartype csi_params: dict[str, str]
    :ivar max_volume_capacity_gi_b: Maximum capacity of the volumes in GiB the user intends to
     create. Default 512.
    :vartype max_volume_capacity_gi_b: int
    :ivar disks: Only required if individual disk selection is desired. Path to disk, e.g.
     :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
    :vartype disks: list[str]
    """

    _attribute_map = {
        "csi_params": {"key": "csiParams", "type": "{str}"},
        "max_volume_capacity_gi_b": {"key": "maxVolumeCapacityGiB", "type": "int"},
        "disks": {"key": "disks", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        csi_params: Optional[Dict[str, str]] = None,
        max_volume_capacity_gi_b: int = 512,
        disks: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword csi_params: List of KV pairs to set in StorageClass to configure CSI driver.
        :paramtype csi_params: dict[str, str]
        :keyword max_volume_capacity_gi_b: Maximum capacity of the volumes in GiB the user intends to
         create. Default 512.
        :paramtype max_volume_capacity_gi_b: int
        :keyword disks: Only required if individual disk selection is desired. Path to disk, e.g.
         :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        :paramtype disks: list[str]
        """
        super().__init__(**kwargs)
        self.csi_params = csi_params
        self.max_volume_capacity_gi_b = max_volume_capacity_gi_b
        self.disks = disks


class DiskProperties(_serialization.Model):
    """Disk Properties Model.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_id: Reference to Managed Disk. Required.
    :vartype resource_id: str
    :ivar wwn: Manufacturer Disk ID. Required.
    :vartype wwn: str
    :ivar capacity_gi_b: Capacity of disk in GiB. Required.
    :vartype capacity_gi_b: int
    :ivar disk_type: Type of disk. Required. Known values are: "Local" and "Managed".
    :vartype disk_type: str or ~azure.mgmt.containerstorage.models.DiskType
    :ivar display_name: SKU or Manufacturer type/name. Required.
    :vartype display_name: str
    :ivar node_name: Name of the node disk is attached on. Required.
    :vartype node_name: str
    :ivar device_path: Used to import SSD to discover WWN. Required.
    :vartype device_path: str
    """

    _validation = {
        "resource_id": {"required": True},
        "wwn": {"required": True},
        "capacity_gi_b": {"required": True},
        "disk_type": {"required": True},
        "display_name": {"required": True},
        "node_name": {"required": True},
        "device_path": {"required": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "wwn": {"key": "wwn", "type": "str"},
        "capacity_gi_b": {"key": "capacityGiB", "type": "int"},
        "disk_type": {"key": "diskType", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "node_name": {"key": "nodeName", "type": "str"},
        "device_path": {"key": "devicePath", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_id: str,
        wwn: str,
        capacity_gi_b: int,
        disk_type: Union[str, "_models.DiskType"],
        display_name: str,
        node_name: str,
        device_path: str,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_id: Reference to Managed Disk. Required.
        :paramtype resource_id: str
        :keyword wwn: Manufacturer Disk ID. Required.
        :paramtype wwn: str
        :keyword capacity_gi_b: Capacity of disk in GiB. Required.
        :paramtype capacity_gi_b: int
        :keyword disk_type: Type of disk. Required. Known values are: "Local" and "Managed".
        :paramtype disk_type: str or ~azure.mgmt.containerstorage.models.DiskType
        :keyword display_name: SKU or Manufacturer type/name. Required.
        :paramtype display_name: str
        :keyword node_name: Name of the node disk is attached on. Required.
        :paramtype node_name: str
        :keyword device_path: Used to import SSD to discover WWN. Required.
        :paramtype device_path: str
        """
        super().__init__(**kwargs)
        self.resource_id = resource_id
        self.wwn = wwn
        self.capacity_gi_b = capacity_gi_b
        self.disk_type = disk_type
        self.display_name = display_name
        self.node_name = node_name
        self.device_path = device_path


class ElasticSanPoolProperties(_serialization.Model):
    """Elastic San Pool Properties.

    All required parameters must be populated in order to send to Azure.

    :ivar san_name: Name of an existing SAN. Required.
    :vartype san_name: str
    :ivar resource_group: Resource group of an existing SAN. Required.
    :vartype resource_group: str
    :ivar volume_group: Volume group of an existing SAN. Required.
    :vartype volume_group: str
    """

    _validation = {
        "san_name": {"required": True},
        "resource_group": {"required": True},
        "volume_group": {"required": True},
    }

    _attribute_map = {
        "san_name": {"key": "sanName", "type": "str"},
        "resource_group": {"key": "resourceGroup", "type": "str"},
        "volume_group": {"key": "volumeGroup", "type": "str"},
    }

    def __init__(self, *, san_name: str, resource_group: str, volume_group: str, **kwargs: Any) -> None:
        """
        :keyword san_name: Name of an existing SAN. Required.
        :paramtype san_name: str
        :keyword resource_group: Resource group of an existing SAN. Required.
        :paramtype resource_group: str
        :keyword volume_group: Volume group of an existing SAN. Required.
        :paramtype volume_group: str
        """
        super().__init__(**kwargs)
        self.san_name = san_name
        self.resource_group = resource_group
        self.volume_group = volume_group


class ElasticSanPoolPropertiesUpdate(_serialization.Model):
    """Elastic San Pool Properties.

    :ivar san_name: Name of an existing SAN.
    :vartype san_name: str
    :ivar resource_group: Resource group of an existing SAN.
    :vartype resource_group: str
    :ivar volume_group: Volume group of an existing SAN.
    :vartype volume_group: str
    """

    _attribute_map = {
        "san_name": {"key": "sanName", "type": "str"},
        "resource_group": {"key": "resourceGroup", "type": "str"},
        "volume_group": {"key": "volumeGroup", "type": "str"},
    }

    def __init__(
        self,
        *,
        san_name: Optional[str] = None,
        resource_group: Optional[str] = None,
        volume_group: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword san_name: Name of an existing SAN.
        :paramtype san_name: str
        :keyword resource_group: Resource group of an existing SAN.
        :paramtype resource_group: str
        :keyword volume_group: Volume group of an existing SAN.
        :paramtype volume_group: str
        """
        super().__init__(**kwargs)
        self.san_name = san_name
        self.resource_group = resource_group
        self.volume_group = volume_group


class EphemeralPoolProperties(_serialization.Model):
    """Ephemeral Pool Properties.

    All required parameters must be populated in order to send to Azure.

    :ivar disk_selector: Template name or KV pairs containing disk selection criteria, e.g.
     model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks. Required.
    :vartype disk_selector: list[str]
    :ivar disks: Only required if individual disk selection is desired. Path to disk, e.g.
     :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
     Required.
    :vartype disks: list[str]
    :ivar disk_format: Consent to format the local disks.
    :vartype disk_format: bool
    """

    _validation = {
        "disk_selector": {"required": True},
        "disks": {"required": True},
    }

    _attribute_map = {
        "disk_selector": {"key": "diskSelector", "type": "[str]"},
        "disks": {"key": "disks", "type": "[str]"},
        "disk_format": {"key": "diskFormat", "type": "bool"},
    }

    def __init__(self, *, disk_selector: List[str], disks: List[str], disk_format: bool = False, **kwargs: Any) -> None:
        """
        :keyword disk_selector: Template name or KV pairs containing disk selection criteria, e.g.
         model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks. Required.
        :paramtype disk_selector: list[str]
        :keyword disks: Only required if individual disk selection is desired. Path to disk, e.g.
         :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
         Required.
        :paramtype disks: list[str]
        :keyword disk_format: Consent to format the local disks.
        :paramtype disk_format: bool
        """
        super().__init__(**kwargs)
        self.disk_selector = disk_selector
        self.disks = disks
        self.disk_format = disk_format


class EphemeralPoolPropertiesUpdate(_serialization.Model):
    """Ephemeral Pool Properties.

    :ivar disk_selector: Template name or KV pairs containing disk selection criteria, e.g.
     model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
    :vartype disk_selector: list[str]
    :ivar disks: Only required if individual disk selection is desired. Path to disk, e.g.
     :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
    :vartype disks: list[str]
    :ivar disk_format: Consent to format the local disks.
    :vartype disk_format: bool
    """

    _attribute_map = {
        "disk_selector": {"key": "diskSelector", "type": "[str]"},
        "disks": {"key": "disks", "type": "[str]"},
        "disk_format": {"key": "diskFormat", "type": "bool"},
    }

    def __init__(
        self,
        *,
        disk_selector: Optional[List[str]] = None,
        disks: Optional[List[str]] = None,
        disk_format: bool = False,
        **kwargs: Any
    ) -> None:
        """
        :keyword disk_selector: Template name or KV pairs containing disk selection criteria, e.g.
         model="Microsoft NVMe Direct Disk" to match all Lsv2 NVMe disks.
        :paramtype disk_selector: list[str]
        :keyword disks: Only required if individual disk selection is desired. Path to disk, e.g.
         :code:`<nodename>`:/dev/sda or WWN. Supports specifying multiple disks (same syntax as tags).
        :paramtype disks: list[str]
        :keyword disk_format: Consent to format the local disks.
        :paramtype disk_format: bool
        """
        super().__init__(**kwargs)
        self.disk_selector = disk_selector
        self.disks = disks
        self.disk_format = disk_format


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.containerstorage.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.containerstorage.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.containerstorage.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.containerstorage.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class NetworkRuleSet(_serialization.Model):
    """Network Rule Set definition.

    All required parameters must be populated in order to send to Azure.

    :ivar default_action: Default action. Required. Known values are: "Deny" and "Allow".
    :vartype default_action: str or ~azure.mgmt.containerstorage.models.Action
    :ivar virtual_network_rules: Virtual network rules. Required.
    :vartype virtual_network_rules: list[~azure.mgmt.containerstorage.models.VirtualNetworkRule]
    """

    _validation = {
        "default_action": {"required": True},
        "virtual_network_rules": {"required": True},
    }

    _attribute_map = {
        "default_action": {"key": "defaultAction", "type": "str"},
        "virtual_network_rules": {"key": "virtualNetworkRules", "type": "[VirtualNetworkRule]"},
    }

    def __init__(
        self,
        *,
        default_action: Union[str, "_models.Action"],
        virtual_network_rules: List["_models.VirtualNetworkRule"],
        **kwargs: Any
    ) -> None:
        """
        :keyword default_action: Default action. Required. Known values are: "Deny" and "Allow".
        :paramtype default_action: str or ~azure.mgmt.containerstorage.models.Action
        :keyword virtual_network_rules: Virtual network rules. Required.
        :paramtype virtual_network_rules: list[~azure.mgmt.containerstorage.models.VirtualNetworkRule]
        """
        super().__init__(**kwargs)
        self.default_action = default_action
        self.virtual_network_rules = virtual_network_rules


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.containerstorage.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.containerstorage.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.containerstorage.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.containerstorage.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.containerstorage.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class PlacementProperties(_serialization.Model):
    """Placement Properties Model.

    All required parameters must be populated in order to send to Azure.

    :ivar affinity_label_selector: Affinity label selector. Required.
    :vartype affinity_label_selector: str
    :ivar anti_affinity_label_selector: Anti affinity label selector. Required.
    :vartype anti_affinity_label_selector: str
    :ivar when_unsatisfiable: When unsatisfiable. Required. Known values are: "DoNotSchedule" and
     "ScheduleAnyway".
    :vartype when_unsatisfiable: str or ~azure.mgmt.containerstorage.models.WhenUnsatisfiable
    """

    _validation = {
        "affinity_label_selector": {"required": True},
        "anti_affinity_label_selector": {"required": True},
        "when_unsatisfiable": {"required": True},
    }

    _attribute_map = {
        "affinity_label_selector": {"key": "affinityLabelSelector", "type": "str"},
        "anti_affinity_label_selector": {"key": "antiAffinityLabelSelector", "type": "str"},
        "when_unsatisfiable": {"key": "whenUnsatisfiable", "type": "str"},
    }

    def __init__(
        self,
        *,
        affinity_label_selector: str,
        anti_affinity_label_selector: str,
        when_unsatisfiable: Union[str, "_models.WhenUnsatisfiable"],
        **kwargs: Any
    ) -> None:
        """
        :keyword affinity_label_selector: Affinity label selector. Required.
        :paramtype affinity_label_selector: str
        :keyword anti_affinity_label_selector: Anti affinity label selector. Required.
        :paramtype anti_affinity_label_selector: str
        :keyword when_unsatisfiable: When unsatisfiable. Required. Known values are: "DoNotSchedule"
         and "ScheduleAnyway".
        :paramtype when_unsatisfiable: str or ~azure.mgmt.containerstorage.models.WhenUnsatisfiable
        """
        super().__init__(**kwargs)
        self.affinity_label_selector = affinity_label_selector
        self.anti_affinity_label_selector = anti_affinity_label_selector
        self.when_unsatisfiable = when_unsatisfiable


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Pool(TrackedResource):  # pylint: disable=too-many-instance-attributes
    """Pool resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.containerstorage.models.ProvisioningState
    :ivar pool_type: Type of the Pool: ephemeral, disk, managed, or elasticsan. Known values are:
     1, 2, 3, and 4.
    :vartype pool_type: float or ~azure.mgmt.containerstorage.models.PoolType
    :ivar zones: List of availability zones that resources can be created in.
    :vartype zones: list[str]
    :ivar pool_capacity_gi_b: Initial capacity of the pool in GiB.
    :vartype pool_capacity_gi_b: int
    :ivar assignments: List of resources that should have access to the pool. Typically ARM
     references to AKS clusters or ACI Container Groups. For local and standard this must be a
     single reference. For portable there can be many.
    :vartype assignments: list[str]
    :ivar ephemeral_pool_properties: Ephemeral Pool Properties.
    :vartype ephemeral_pool_properties: ~azure.mgmt.containerstorage.models.EphemeralPoolProperties
    :ivar disk_pool_properties: Disk Pool Properties.
    :vartype disk_pool_properties: ~azure.mgmt.containerstorage.models.DiskPoolProperties
    :ivar elastic_san_pool_properties: Elastic San Pool Properties.
    :vartype elastic_san_pool_properties:
     ~azure.mgmt.containerstorage.models.ElasticSanPoolProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "pool_type": {"key": "properties.poolType", "type": "float"},
        "zones": {"key": "properties.zones", "type": "[str]"},
        "pool_capacity_gi_b": {"key": "properties.poolCapacityGiB", "type": "int"},
        "assignments": {"key": "properties.assignments", "type": "[str]"},
        "ephemeral_pool_properties": {"key": "properties.ephemeralPoolProperties", "type": "EphemeralPoolProperties"},
        "disk_pool_properties": {"key": "properties.diskPoolProperties", "type": "DiskPoolProperties"},
        "elastic_san_pool_properties": {
            "key": "properties.elasticSanPoolProperties",
            "type": "ElasticSanPoolProperties",
        },
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        pool_type: Optional[Union[float, "_models.PoolType"]] = None,
        zones: Optional[List[str]] = None,
        pool_capacity_gi_b: Optional[int] = None,
        assignments: Optional[List[str]] = None,
        ephemeral_pool_properties: Optional["_models.EphemeralPoolProperties"] = None,
        disk_pool_properties: Optional["_models.DiskPoolProperties"] = None,
        elastic_san_pool_properties: Optional["_models.ElasticSanPoolProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword pool_type: Type of the Pool: ephemeral, disk, managed, or elasticsan. Known values
         are: 1, 2, 3, and 4.
        :paramtype pool_type: float or ~azure.mgmt.containerstorage.models.PoolType
        :keyword zones: List of availability zones that resources can be created in.
        :paramtype zones: list[str]
        :keyword pool_capacity_gi_b: Initial capacity of the pool in GiB.
        :paramtype pool_capacity_gi_b: int
        :keyword assignments: List of resources that should have access to the pool. Typically ARM
         references to AKS clusters or ACI Container Groups. For local and standard this must be a
         single reference. For portable there can be many.
        :paramtype assignments: list[str]
        :keyword ephemeral_pool_properties: Ephemeral Pool Properties.
        :paramtype ephemeral_pool_properties:
         ~azure.mgmt.containerstorage.models.EphemeralPoolProperties
        :keyword disk_pool_properties: Disk Pool Properties.
        :paramtype disk_pool_properties: ~azure.mgmt.containerstorage.models.DiskPoolProperties
        :keyword elastic_san_pool_properties: Elastic San Pool Properties.
        :paramtype elastic_san_pool_properties:
         ~azure.mgmt.containerstorage.models.ElasticSanPoolProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.provisioning_state = None
        self.pool_type = pool_type
        self.zones = zones
        self.pool_capacity_gi_b = pool_capacity_gi_b
        self.assignments = assignments
        self.ephemeral_pool_properties = ephemeral_pool_properties
        self.disk_pool_properties = disk_pool_properties
        self.elastic_san_pool_properties = elastic_san_pool_properties


class PoolListResult(_serialization.Model):
    """The response of a Pool list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Pool items on this page. Required.
    :vartype value: list[~azure.mgmt.containerstorage.models.Pool]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Pool]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Pool"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Pool items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerstorage.models.Pool]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class PoolUpdate(_serialization.Model):
    """The type used for update operations of the Pool.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar pool_type: Type of the Pool: ephemeral, disk, managed, or elasticsan. Known values are:
     1, 2, 3, and 4.
    :vartype pool_type: float or ~azure.mgmt.containerstorage.models.PoolType
    :ivar zones: List of availability zones that resources can be created in.
    :vartype zones: list[str]
    :ivar pool_capacity_gi_b: Initial capacity of the pool in GiB.
    :vartype pool_capacity_gi_b: int
    :ivar assignments: List of resources that should have access to the pool. Typically ARM
     references to AKS clusters or ACI Container Groups. For local and standard this must be a
     single reference. For portable there can be many.
    :vartype assignments: list[str]
    :ivar ephemeral_pool_properties: Ephemeral Pool Properties.
    :vartype ephemeral_pool_properties:
     ~azure.mgmt.containerstorage.models.EphemeralPoolPropertiesUpdate
    :ivar disk_pool_properties: Disk Pool Properties.
    :vartype disk_pool_properties: ~azure.mgmt.containerstorage.models.DiskPoolProperties
    :ivar elastic_san_pool_properties: Elastic San Pool Properties.
    :vartype elastic_san_pool_properties:
     ~azure.mgmt.containerstorage.models.ElasticSanPoolPropertiesUpdate
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "pool_type": {"key": "properties.poolType", "type": "float"},
        "zones": {"key": "properties.zones", "type": "[str]"},
        "pool_capacity_gi_b": {"key": "properties.poolCapacityGiB", "type": "int"},
        "assignments": {"key": "properties.assignments", "type": "[str]"},
        "ephemeral_pool_properties": {
            "key": "properties.ephemeralPoolProperties",
            "type": "EphemeralPoolPropertiesUpdate",
        },
        "disk_pool_properties": {"key": "properties.diskPoolProperties", "type": "DiskPoolProperties"},
        "elastic_san_pool_properties": {
            "key": "properties.elasticSanPoolProperties",
            "type": "ElasticSanPoolPropertiesUpdate",
        },
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        pool_type: Optional[Union[float, "_models.PoolType"]] = None,
        zones: Optional[List[str]] = None,
        pool_capacity_gi_b: Optional[int] = None,
        assignments: Optional[List[str]] = None,
        ephemeral_pool_properties: Optional["_models.EphemeralPoolPropertiesUpdate"] = None,
        disk_pool_properties: Optional["_models.DiskPoolProperties"] = None,
        elastic_san_pool_properties: Optional["_models.ElasticSanPoolPropertiesUpdate"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword pool_type: Type of the Pool: ephemeral, disk, managed, or elasticsan. Known values
         are: 1, 2, 3, and 4.
        :paramtype pool_type: float or ~azure.mgmt.containerstorage.models.PoolType
        :keyword zones: List of availability zones that resources can be created in.
        :paramtype zones: list[str]
        :keyword pool_capacity_gi_b: Initial capacity of the pool in GiB.
        :paramtype pool_capacity_gi_b: int
        :keyword assignments: List of resources that should have access to the pool. Typically ARM
         references to AKS clusters or ACI Container Groups. For local and standard this must be a
         single reference. For portable there can be many.
        :paramtype assignments: list[str]
        :keyword ephemeral_pool_properties: Ephemeral Pool Properties.
        :paramtype ephemeral_pool_properties:
         ~azure.mgmt.containerstorage.models.EphemeralPoolPropertiesUpdate
        :keyword disk_pool_properties: Disk Pool Properties.
        :paramtype disk_pool_properties: ~azure.mgmt.containerstorage.models.DiskPoolProperties
        :keyword elastic_san_pool_properties: Elastic San Pool Properties.
        :paramtype elastic_san_pool_properties:
         ~azure.mgmt.containerstorage.models.ElasticSanPoolPropertiesUpdate
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.pool_type = pool_type
        self.zones = zones
        self.pool_capacity_gi_b = pool_capacity_gi_b
        self.assignments = assignments
        self.ephemeral_pool_properties = ephemeral_pool_properties
        self.disk_pool_properties = disk_pool_properties
        self.elastic_san_pool_properties = elastic_san_pool_properties


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)


class Sku(_serialization.Model):
    """Sku definition.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Sku name. Required. Known values are: "Invalid", "Premium_LRS", and "Premium_ZRS".
    :vartype name: str or ~azure.mgmt.containerstorage.models.SkuName
    :ivar tier: Sku Account Tier. Required. Known values are: "Invalid", "Standard", "Premium", and
     "Ultra".
    :vartype tier: str or ~azure.mgmt.containerstorage.models.AccountTier
    """

    _validation = {
        "name": {"required": True},
        "tier": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
    }

    def __init__(
        self, *, name: Union[str, "_models.SkuName"], tier: Union[str, "_models.AccountTier"], **kwargs: Any
    ) -> None:
        """
        :keyword name: Sku name. Required. Known values are: "Invalid", "Premium_LRS", and
         "Premium_ZRS".
        :paramtype name: str or ~azure.mgmt.containerstorage.models.SkuName
        :keyword tier: Sku Account Tier. Required. Known values are: "Invalid", "Standard", "Premium",
         and "Ultra".
        :paramtype tier: str or ~azure.mgmt.containerstorage.models.AccountTier
        """
        super().__init__(**kwargs)
        self.name = name
        self.tier = tier


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.containerstorage.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.containerstorage.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.containerstorage.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.containerstorage.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class VirtualNetworkRule(_serialization.Model):
    """Virtual Network Rule definition.

    All required parameters must be populated in order to send to Azure.

    :ivar action: Action of rule. Known values are: "Deny" and "Allow".
    :vartype action: str or ~azure.mgmt.containerstorage.models.Action
    :ivar id: Id of rule. Required.
    :vartype id: str
    """

    _validation = {
        "id": {"required": True},
    }

    _attribute_map = {
        "action": {"key": "action", "type": "str"},
        "id": {"key": "id", "type": "str"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        action: Optional[Union[str, "_models.Action"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword action: Action of rule. Known values are: "Deny" and "Allow".
        :paramtype action: str or ~azure.mgmt.containerstorage.models.Action
        :keyword id: Id of rule. Required.
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.action = action
        self.id = id


class Volume(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.containerstorage.models.ProvisioningState
    :ivar labels: String KV pairs indicating labels.
    :vartype labels: dict[str, str]
    :ivar capacity_gi_b: Requested capacity in GiB.
    :vartype capacity_gi_b: int
    :ivar volume_mode: Indicates how the volume should be attached. Known values are: "Filesystem"
     and "Raw".
    :vartype volume_mode: str or ~azure.mgmt.containerstorage.models.VolumeMode
    :ivar reclaim_policy: Reclaim Policy, Delete or Retain. Known values are: "Delete" and
     "Retain".
    :vartype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
    :ivar mount_options: List of string mount options.
    :vartype mount_options: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "labels": {"key": "properties.labels", "type": "{str}"},
        "capacity_gi_b": {"key": "properties.capacityGiB", "type": "int"},
        "volume_mode": {"key": "properties.volumeMode", "type": "str"},
        "reclaim_policy": {"key": "properties.reclaimPolicy", "type": "str"},
        "mount_options": {"key": "properties.mountOptions", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        labels: Optional[Dict[str, str]] = None,
        capacity_gi_b: Optional[int] = None,
        volume_mode: Optional[Union[str, "_models.VolumeMode"]] = None,
        reclaim_policy: Optional[Union[str, "_models.ReclaimPolicy"]] = None,
        mount_options: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword labels: String KV pairs indicating labels.
        :paramtype labels: dict[str, str]
        :keyword capacity_gi_b: Requested capacity in GiB.
        :paramtype capacity_gi_b: int
        :keyword volume_mode: Indicates how the volume should be attached. Known values are:
         "Filesystem" and "Raw".
        :paramtype volume_mode: str or ~azure.mgmt.containerstorage.models.VolumeMode
        :keyword reclaim_policy: Reclaim Policy, Delete or Retain. Known values are: "Delete" and
         "Retain".
        :paramtype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
        :keyword mount_options: List of string mount options.
        :paramtype mount_options: list[str]
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.labels = labels
        self.capacity_gi_b = capacity_gi_b
        self.volume_mode = volume_mode
        self.reclaim_policy = reclaim_policy
        self.mount_options = mount_options


class VolumeListResult(_serialization.Model):
    """The response of a Volume list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Volume items on this page. Required.
    :vartype value: list[~azure.mgmt.containerstorage.models.Volume]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Volume]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Volume"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Volume items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerstorage.models.Volume]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class VolumeSnapshot(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerstorage.models.SystemData
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.containerstorage.models.ProvisioningState
    :ivar source: Reference to the source volume.
    :vartype source: str
    :ivar volume_mode: Indicates how the volumes created from the snapshot should be attached.
     Known values are: "Filesystem" and "Raw".
    :vartype volume_mode: str or ~azure.mgmt.containerstorage.models.VolumeMode
    :ivar reclaim_policy: Reclaim Policy, Delete or Retain. Known values are: "Delete" and
     "Retain".
    :vartype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
    :ivar mount_options: List of string mount options.
    :vartype mount_options: list[str]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "source": {"key": "properties.source", "type": "str"},
        "volume_mode": {"key": "properties.volumeMode", "type": "str"},
        "reclaim_policy": {"key": "properties.reclaimPolicy", "type": "str"},
        "mount_options": {"key": "properties.mountOptions", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        source: Optional[str] = None,
        volume_mode: Optional[Union[str, "_models.VolumeMode"]] = None,
        reclaim_policy: Optional[Union[str, "_models.ReclaimPolicy"]] = None,
        mount_options: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword source: Reference to the source volume.
        :paramtype source: str
        :keyword volume_mode: Indicates how the volumes created from the snapshot should be attached.
         Known values are: "Filesystem" and "Raw".
        :paramtype volume_mode: str or ~azure.mgmt.containerstorage.models.VolumeMode
        :keyword reclaim_policy: Reclaim Policy, Delete or Retain. Known values are: "Delete" and
         "Retain".
        :paramtype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
        :keyword mount_options: List of string mount options.
        :paramtype mount_options: list[str]
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.source = source
        self.volume_mode = volume_mode
        self.reclaim_policy = reclaim_policy
        self.mount_options = mount_options


class VolumeSnapshotListResult(_serialization.Model):
    """The response of a VolumeSnapshot list operation.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The VolumeSnapshot items on this page. Required.
    :vartype value: list[~azure.mgmt.containerstorage.models.VolumeSnapshot]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[VolumeSnapshot]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.VolumeSnapshot"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The VolumeSnapshot items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerstorage.models.VolumeSnapshot]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class VolumeSnapshotUpdate(_serialization.Model):
    """The type used for update operations of the VolumeSnapshot.

    :ivar source: Reference to the source volume.
    :vartype source: str
    :ivar volume_mode: Indicates how the volumes created from the snapshot should be attached.
     Known values are: "Filesystem" and "Raw".
    :vartype volume_mode: str or ~azure.mgmt.containerstorage.models.VolumeMode
    :ivar reclaim_policy: Reclaim Policy, Delete or Retain. Known values are: "Delete" and
     "Retain".
    :vartype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
    :ivar mount_options: List of string mount options.
    :vartype mount_options: list[str]
    """

    _attribute_map = {
        "source": {"key": "properties.source", "type": "str"},
        "volume_mode": {"key": "properties.volumeMode", "type": "str"},
        "reclaim_policy": {"key": "properties.reclaimPolicy", "type": "str"},
        "mount_options": {"key": "properties.mountOptions", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        source: Optional[str] = None,
        volume_mode: Optional[Union[str, "_models.VolumeMode"]] = None,
        reclaim_policy: Optional[Union[str, "_models.ReclaimPolicy"]] = None,
        mount_options: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword source: Reference to the source volume.
        :paramtype source: str
        :keyword volume_mode: Indicates how the volumes created from the snapshot should be attached.
         Known values are: "Filesystem" and "Raw".
        :paramtype volume_mode: str or ~azure.mgmt.containerstorage.models.VolumeMode
        :keyword reclaim_policy: Reclaim Policy, Delete or Retain. Known values are: "Delete" and
         "Retain".
        :paramtype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
        :keyword mount_options: List of string mount options.
        :paramtype mount_options: list[str]
        """
        super().__init__(**kwargs)
        self.source = source
        self.volume_mode = volume_mode
        self.reclaim_policy = reclaim_policy
        self.mount_options = mount_options


class VolumeUpdate(_serialization.Model):
    """The type used for update operations of the Volume.

    :ivar labels: String KV pairs indicating labels.
    :vartype labels: dict[str, str]
    :ivar capacity_gi_b: Requested capacity in GiB.
    :vartype capacity_gi_b: int
    :ivar volume_mode: Indicates how the volume should be attached. Known values are: "Filesystem"
     and "Raw".
    :vartype volume_mode: str or ~azure.mgmt.containerstorage.models.VolumeMode
    :ivar reclaim_policy: Reclaim Policy, Delete or Retain. Known values are: "Delete" and
     "Retain".
    :vartype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
    :ivar mount_options: List of string mount options.
    :vartype mount_options: list[str]
    """

    _attribute_map = {
        "labels": {"key": "properties.labels", "type": "{str}"},
        "capacity_gi_b": {"key": "properties.capacityGiB", "type": "int"},
        "volume_mode": {"key": "properties.volumeMode", "type": "str"},
        "reclaim_policy": {"key": "properties.reclaimPolicy", "type": "str"},
        "mount_options": {"key": "properties.mountOptions", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        labels: Optional[Dict[str, str]] = None,
        capacity_gi_b: Optional[int] = None,
        volume_mode: Optional[Union[str, "_models.VolumeMode"]] = None,
        reclaim_policy: Optional[Union[str, "_models.ReclaimPolicy"]] = None,
        mount_options: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword labels: String KV pairs indicating labels.
        :paramtype labels: dict[str, str]
        :keyword capacity_gi_b: Requested capacity in GiB.
        :paramtype capacity_gi_b: int
        :keyword volume_mode: Indicates how the volume should be attached. Known values are:
         "Filesystem" and "Raw".
        :paramtype volume_mode: str or ~azure.mgmt.containerstorage.models.VolumeMode
        :keyword reclaim_policy: Reclaim Policy, Delete or Retain. Known values are: "Delete" and
         "Retain".
        :paramtype reclaim_policy: str or ~azure.mgmt.containerstorage.models.ReclaimPolicy
        :keyword mount_options: List of string mount options.
        :paramtype mount_options: list[str]
        """
        super().__init__(**kwargs)
        self.labels = labels
        self.capacity_gi_b = capacity_gi_b
        self.volume_mode = volume_mode
        self.reclaim_policy = reclaim_policy
        self.mount_options = mount_options
