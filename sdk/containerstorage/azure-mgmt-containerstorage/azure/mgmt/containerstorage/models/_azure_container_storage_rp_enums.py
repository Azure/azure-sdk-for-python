# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccessMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AccessMode."""

    READ_WRITE_ONCE = "ReadWriteOnce"
    READ_ONLY_MANY = "ReadOnlyMany"
    READ_WRITE_MANY = "ReadWriteMany"
    READ_WRITE_ONCE_POD = "ReadWriteOncePod"


class AccountTier(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """AccountTier."""

    INVALID = "Invalid"
    STANDARD = "Standard"
    PREMIUM = "Premium"
    ULTRA = "Ultra"


class Action(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Action."""

    DENY = "Deny"
    ALLOW = "Allow"


class ActionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs."""

    INTERNAL = "Internal"


class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource."""

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"


class DiskType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """DiskType."""

    LOCAL = "Local"
    MANAGED = "Managed"


class EncryptionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """EncryptionType."""

    ENCRYPTION_AT_REST_WITH_PLATFORM_KEY = "EncryptionAtRestWithPlatformKey"


class Origin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
    logs UX. Default value is "user,system".
    """

    USER = "user"
    SYSTEM = "system"
    USER_SYSTEM = "user,system"


class PoolType(float, Enum, metaclass=CaseInsensitiveEnumMeta):
    """PoolType."""

    EPHEMERAL = 1
    DISK = 2
    MANAGED = 3
    ELASTIC_SAN = 4


class ProtocolType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ProtocolType."""

    NONE = "None"
    I_SCSI = "iSCSI"


class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Provisioning state of the resource."""

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    PROVISIONING = "Provisioning"
    UPDATING = "Updating"
    DELETING = "Deleting"
    ACCEPTED = "Accepted"


class ReclaimPolicy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ReclaimPolicy."""

    DELETE = "Delete"
    RETAIN = "Retain"


class SkuName(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """SkuName."""

    INVALID = "Invalid"
    PREMIUM_LRS = "Premium_LRS"
    PREMIUM_ZRS = "Premium_ZRS"


class VolumeBindingMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """VolumeBindingMode."""

    IMMEDIATE = "Immediate"
    WAIT_FIRST_FOR_CUSTOMER = "WaitFirstForCustomer"


class VolumeMode(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """VolumeMode."""

    FILESYSTEM = "Filesystem"
    RAW = "Raw"


class WhenUnsatisfiable(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """WhenUnsatisfiable."""

    DO_NOT_SCHEDULE = "DoNotSchedule"
    SCHEDULE_ANYWAY = "ScheduleAnyway"
