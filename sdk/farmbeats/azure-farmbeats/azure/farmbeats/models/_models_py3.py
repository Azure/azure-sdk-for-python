# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.1.3, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, IO, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._farm_beats_client_enums import *


class ApplicationData(msrest.serialization.Model):
    """Defines ApplicationData request object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param total_material: Common data measure for storing various data(Farm operations/Weather).
    :type total_material: ~azure.farmbeats.models.Measure
    :param avg_material: Common data measure for storing various data(Farm operations/Weather).
    :type avg_material: ~azure.farmbeats.models.Measure
    :param application_product_details: Application product details.
    :type application_product_details: list[~azure.farmbeats.models.ApplicationProductDetail]
    :ivar id: Unique Id.
    :vartype id: str
    :ivar farmer_id: Assoiciated Farmer Id with the operation data.
    :vartype farmer_id: str
    :param operation_start_date_time: Start datetime of operation.
    :type operation_start_date_time: ~datetime.datetime
    :param operation_end_date_time: End datetime of operation.
    :type operation_end_date_time: ~datetime.datetime
    :param source: Source of the data.
    :type source: str
    :param operation_modified_date_time: Modified date time of the farm operation.
     This will come from the provider itself.
    :type operation_modified_date_time: ~datetime.datetime
    :param associated_boundary_id: AssociatedBoundaryId represents boundary of field for which
     operation is done where as
     OperationBoundaryId represents actual area of operation done inside field.
    :type associated_boundary_id: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar attachments_link: Area.
    :vartype attachments_link: str
    :param area: Common data measure for storing various data(Farm operations/Weather).
    :type area: ~azure.farmbeats.models.Measure
    :param operation_boundary_id: Operation boundary Id.
    :type operation_boundary_id: str
    :param status: Status of the resource.
    :type status: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'farmer_id': {'readonly': True},
        'source': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'attachments_link': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'total_material': {'key': 'totalMaterial', 'type': 'Measure'},
        'avg_material': {'key': 'avgMaterial', 'type': 'Measure'},
        'application_product_details': {'key': 'applicationProductDetails', 'type': '[ApplicationProductDetail]'},
        'id': {'key': 'id', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'operation_start_date_time': {'key': 'operationStartDateTime', 'type': 'iso-8601'},
        'operation_end_date_time': {'key': 'operationEndDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'str'},
        'operation_modified_date_time': {'key': 'operationModifiedDateTime', 'type': 'iso-8601'},
        'associated_boundary_id': {'key': 'associatedBoundaryId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'attachments_link': {'key': 'attachmentsLink', 'type': 'str'},
        'area': {'key': 'area', 'type': 'Measure'},
        'operation_boundary_id': {'key': 'operationBoundaryId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        total_material: Optional["Measure"] = None,
        avg_material: Optional["Measure"] = None,
        application_product_details: Optional[List["ApplicationProductDetail"]] = None,
        operation_start_date_time: Optional[datetime.datetime] = None,
        operation_end_date_time: Optional[datetime.datetime] = None,
        source: Optional[str] = None,
        operation_modified_date_time: Optional[datetime.datetime] = None,
        associated_boundary_id: Optional[str] = None,
        area: Optional["Measure"] = None,
        operation_boundary_id: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(ApplicationData, self).__init__(**kwargs)
        self.total_material = total_material
        self.avg_material = avg_material
        self.application_product_details = application_product_details
        self.id = None
        self.farmer_id = None
        self.operation_start_date_time = operation_start_date_time
        self.operation_end_date_time = operation_end_date_time
        self.source = source
        self.operation_modified_date_time = operation_modified_date_time
        self.associated_boundary_id = associated_boundary_id
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.attachments_link = None
        self.area = area
        self.operation_boundary_id = operation_boundary_id
        self.status = status
        self.name = name
        self.description = description
        self.properties = properties


class ApplicationDataListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.ApplicationData]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ApplicationData]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ApplicationData"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ApplicationDataListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class ApplicationProductDetail(msrest.serialization.Model):
    """Schema for Application product detail.

    :param product_name: Name of the product in the application.
    :type product_name: str
    :param is_carrier: Is the product a carrier for a tank mix.
    :type is_carrier: bool
    :param total_material: Common data measure for storing various data(Farm operations/Weather).
    :type total_material: ~azure.farmbeats.models.Measure
    :param avg_material: Common data measure for storing various data(Farm operations/Weather).
    :type avg_material: ~azure.farmbeats.models.Measure
    """

    _validation = {
        'product_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'product_name': {'key': 'productName', 'type': 'str'},
        'is_carrier': {'key': 'isCarrier', 'type': 'bool'},
        'total_material': {'key': 'totalMaterial', 'type': 'Measure'},
        'avg_material': {'key': 'avgMaterial', 'type': 'Measure'},
    }

    def __init__(
        self,
        *,
        product_name: Optional[str] = None,
        is_carrier: Optional[bool] = None,
        total_material: Optional["Measure"] = None,
        avg_material: Optional["Measure"] = None,
        **kwargs
    ):
        super(ApplicationProductDetail, self).__init__(**kwargs)
        self.product_name = product_name
        self.is_carrier = is_carrier
        self.total_material = total_material
        self.avg_material = avg_material


class Attachment(msrest.serialization.Model):
    """Api Model for Attachment object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar farmer_id: Farmer id for this attachment.
    :vartype farmer_id: str
    :param resource_id: Associated Resource id for this attachment.
    :type resource_id: str
    :param resource_type: Associated Resource type for this attachment
     i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData,
     TillageData, PlantingData.
    :type resource_type: str
    :ivar original_file_name: Original File Name for this attachment.
    :vartype original_file_name: str
    :ivar id: Unique id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'original_file_name': {'readonly': True},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
        'e_tag': {'readonly': True},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'original_file_name': {'key': 'originalFileName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        resource_type: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(Attachment, self).__init__(**kwargs)
        self.farmer_id = None
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.original_file_name = None
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.name = name
        self.description = description
        self.e_tag = None


class AttachmentListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.Attachment]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Attachment]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Attachment"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(AttachmentListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class Boundary(msrest.serialization.Model):
    """Api Model for boundary object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar farmer_id: Farmer Id.
    :vartype farmer_id: str
    :param parent_id: Id of the parent(field or seasonalField) it belongs to.
    :type parent_id: str
    :param geometry: GeoJSON abstract class.
    :type geometry: ~azure.farmbeats.models.GeoJsonObject
    :param is_primary: Is the boundary primary.
    :type is_primary: bool
    :ivar acreage: Boundary area in acres.
    :vartype acreage: float
    :ivar parent_type: Type of the parent it belongs to.
    :vartype parent_type: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'acreage': {'readonly': True},
        'parent_type': {'readonly': True},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'geometry': {'key': 'geometry', 'type': 'GeoJsonObject'},
        'is_primary': {'key': 'isPrimary', 'type': 'bool'},
        'acreage': {'key': 'acreage', 'type': 'float'},
        'parent_type': {'key': 'parentType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        parent_id: Optional[str] = None,
        geometry: Optional["GeoJsonObject"] = None,
        is_primary: Optional[bool] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(Boundary, self).__init__(**kwargs)
        self.farmer_id = None
        self.parent_id = parent_id
        self.geometry = geometry
        self.is_primary = is_primary
        self.acreage = None
        self.parent_type = None
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class BoundaryListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.Boundary]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Boundary]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Boundary"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(BoundaryListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class BoundaryOverlapResponse(msrest.serialization.Model):
    """Api Model for boundary overlap response.

    :param boundary_acreage: Acreage of Main boundary.
    :type boundary_acreage: float
    :param overlapping_boundary_acreage: Acreage of overlapping boundary.
    :type overlapping_boundary_acreage: float
    :param intersecting_acreage: Acreage of intersecting boundary.
    :type intersecting_acreage: float
    """

    _attribute_map = {
        'boundary_acreage': {'key': 'boundaryAcreage', 'type': 'float'},
        'overlapping_boundary_acreage': {'key': 'overlappingBoundaryAcreage', 'type': 'float'},
        'intersecting_acreage': {'key': 'intersectingAcreage', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        boundary_acreage: Optional[float] = None,
        overlapping_boundary_acreage: Optional[float] = None,
        intersecting_acreage: Optional[float] = None,
        **kwargs
    ):
        super(BoundaryOverlapResponse, self).__init__(**kwargs)
        self.boundary_acreage = boundary_acreage
        self.overlapping_boundary_acreage = overlapping_boundary_acreage
        self.intersecting_acreage = intersecting_acreage


class CascadeDeleteJobRequest(msrest.serialization.Model):
    """CascadeDelete job request object.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Farmer Id.
    :type farmer_id: str
    :param resource_id: Required. The id of the resource.
    :type resource_id: str
    :param resource_type: Required. The type of the resource.
    :type resource_type: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'resource_id': {'required': True},
        'resource_type': {'required': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        farmer_id: str,
        resource_id: str,
        resource_type: str,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(CascadeDeleteJobRequest, self).__init__(**kwargs)
        self.farmer_id = farmer_id
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.name = name
        self.description = description
        self.properties = properties


class CascadeDeleteJobResponse(msrest.serialization.Model):
    """CascadeDelete job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param job_status: Various states a job can be in. Possible values include: "Waiting",
     "Running", "Succeeded", "Failed", "Cancelled".
    :type job_status: str or ~azure.farmbeats.models.JobStatus
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :ivar is_cancellation_requested: Flag that gets set when job cancellation is requested.
    :vartype is_cancellation_requested: bool
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'is_cancellation_requested': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'is_cancellation_requested': {'key': 'isCancellationRequested', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        duration: Optional[str] = None,
        id: Optional[str] = None,
        job_status: Optional[Union[str, "JobStatus"]] = None,
        message: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(CascadeDeleteJobResponse, self).__init__(**kwargs)
        self.duration = duration
        self.id = id
        self.job_status = job_status
        self.message = message
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.is_cancellation_requested = None
        self.name = name
        self.description = description
        self.properties = properties


class CascadeStatusUpdateJobRequest(msrest.serialization.Model):
    """Cascade status update job request object.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Farmer Id of the resource.
    :type farmer_id: str
    :param resource_id: Required. The id of the resource.
    :type resource_id: str
    :param resource_type: Required. The type of the resource.
    :type resource_type: str
    :param status: Required. Status of the resource to be updated.
    :type status: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'resource_id': {'required': True},
        'resource_type': {'required': True},
        'status': {'required': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        farmer_id: str,
        resource_id: str,
        resource_type: str,
        status: str,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(CascadeStatusUpdateJobRequest, self).__init__(**kwargs)
        self.farmer_id = farmer_id
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.status = status
        self.name = name
        self.description = description
        self.properties = properties


class CascadeStatusUpdateJobResponse(msrest.serialization.Model):
    """CascadeStatusUpdate job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param job_status: Various states a job can be in. Possible values include: "Waiting",
     "Running", "Succeeded", "Failed", "Cancelled".
    :type job_status: str or ~azure.farmbeats.models.JobStatus
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :ivar is_cancellation_requested: Flag that gets set when job cancellation is requested.
    :vartype is_cancellation_requested: bool
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'is_cancellation_requested': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'is_cancellation_requested': {'key': 'isCancellationRequested', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        duration: Optional[str] = None,
        id: Optional[str] = None,
        job_status: Optional[Union[str, "JobStatus"]] = None,
        message: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(CascadeStatusUpdateJobResponse, self).__init__(**kwargs)
        self.duration = duration
        self.id = id
        self.job_status = job_status
        self.message = message
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.is_cancellation_requested = None
        self.name = name
        self.description = description
        self.properties = properties


class Crop(msrest.serialization.Model):
    """Api Model for Crop object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param phenotype: Crop phenotype.
    :type phenotype: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'phenotype': {'max_length': 100, 'min_length': 0},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'phenotype': {'key': 'phenotype', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        phenotype: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(Crop, self).__init__(**kwargs)
        self.phenotype = phenotype
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class CropListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.Crop]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Crop]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Crop"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(CropListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class CropVariety(msrest.serialization.Model):
    """Api Model for CropVariety object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar crop_id: Id of the crop it belongs to.
    :vartype crop_id: str
    :param brand: CropVariety Brand.
    :type brand: str
    :param product: CropVariety product.
    :type product: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'crop_id': {'readonly': True},
        'brand': {'max_length': 100, 'min_length': 0},
        'product': {'max_length': 100, 'min_length': 0},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'crop_id': {'key': 'cropId', 'type': 'str'},
        'brand': {'key': 'brand', 'type': 'str'},
        'product': {'key': 'product', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        brand: Optional[str] = None,
        product: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(CropVariety, self).__init__(**kwargs)
        self.crop_id = None
        self.brand = brand
        self.product = product
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class CropVarietyListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.CropVariety]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CropVariety]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["CropVariety"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(CropVarietyListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class Error(msrest.serialization.Model):
    """An error from the Azure AgPlatform service.

    :param code: Server-defined set of error codes.
    :type code: str
    :param message: Human-readable representation of the error.
    :type message: str
    :param target: Target of the error.
    :type target: str
    :param details: Array of details about specific errors that led to this reported error.
    :type details: list[~azure.farmbeats.models.Error]
    :param innererror: Inner error containing list of errors.
    
     :code:`<see href="https://github.com/Microsoft/api-
     guidelines/blob/vNext/Guidelines.md#innererror--object">InnerError reference document</see>`.
    :type innererror: ~azure.farmbeats.models.InnerError
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["Error"]] = None,
        innererror: Optional["InnerError"] = None,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details
        self.innererror = innererror


class ErrorResponse(msrest.serialization.Model):
    """An error response from the Azure AgPlatform service.

:code:`<see href="https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses">ErrorResponse reference document.</see>`.

    :param error: An error from the Azure AgPlatform service.
    :type error: ~azure.farmbeats.models.Error
    :param trace_id: Unique trace Id.
    :type trace_id: str
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
        'trace_id': {'key': 'traceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        error: Optional["Error"] = None,
        trace_id: Optional[str] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error
        self.trace_id = trace_id


class Farm(msrest.serialization.Model):
    """Api Model for Farm object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar farmer_id: Farmer Id.
    :vartype farmer_id: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(Farm, self).__init__(**kwargs)
        self.farmer_id = None
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class Farmer(msrest.serialization.Model):
    """Api Model for Farmer object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(Farmer, self).__init__(**kwargs)
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class FarmerListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.Farmer]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Farmer]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Farmer"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(FarmerListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class FarmListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.Farm]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Farm]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Farm"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(FarmListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class FarmOperationDataIngestionJobRequest(msrest.serialization.Model):
    """FarmOperationDataIngestionJobRequest.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Farmer Id.
    :type farmer_id: str
    :param auth_provider_id: Required. Auth Provider Id.
    :type auth_provider_id: str
    :param operations: List of operation types for which data needs to be downloaded.
    :type operations: list[str or ~azure.farmbeats.models.FieldOperationType]
    :param start_year: Required. Start Year (Minimum = 2000, Maximum = CurrentYear).
    :type start_year: int
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'auth_provider_id': {'required': True},
        'start_year': {'required': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'auth_provider_id': {'key': 'authProviderId', 'type': 'str'},
        'operations': {'key': 'operations', 'type': '[str]'},
        'start_year': {'key': 'startYear', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        farmer_id: str,
        auth_provider_id: str,
        start_year: int,
        operations: Optional[List[Union[str, "FieldOperationType"]]] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(FarmOperationDataIngestionJobRequest, self).__init__(**kwargs)
        self.farmer_id = farmer_id
        self.auth_provider_id = auth_provider_id
        self.operations = operations
        self.start_year = start_year
        self.name = name
        self.description = description
        self.properties = properties


class FarmOperationDataIngestionJobResponse(msrest.serialization.Model):
    """FarmOperationDataIngestion job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param operations: List of operation types for which data will be downloaded.
    :type operations: list[str or ~azure.farmbeats.models.FieldOperationType]
    :param start_year: Start Year (Minimum = 2000, Maximum = CurrentYear).
    :type start_year: int
    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param job_status: Various states a job can be in. Possible values include: "Waiting",
     "Running", "Succeeded", "Failed", "Cancelled".
    :type job_status: str or ~azure.farmbeats.models.JobStatus
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :ivar is_cancellation_requested: Flag that gets set when job cancellation is requested.
    :vartype is_cancellation_requested: bool
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'is_cancellation_requested': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'operations': {'key': 'operations', 'type': '[str]'},
        'start_year': {'key': 'startYear', 'type': 'int'},
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'is_cancellation_requested': {'key': 'isCancellationRequested', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        operations: Optional[List[Union[str, "FieldOperationType"]]] = None,
        start_year: Optional[int] = None,
        duration: Optional[str] = None,
        id: Optional[str] = None,
        job_status: Optional[Union[str, "JobStatus"]] = None,
        message: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(FarmOperationDataIngestionJobResponse, self).__init__(**kwargs)
        self.operations = operations
        self.start_year = start_year
        self.duration = duration
        self.id = id
        self.job_status = job_status
        self.message = message
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.is_cancellation_requested = None
        self.name = name
        self.description = description
        self.properties = properties


class Field(msrest.serialization.Model):
    """Api Model for field object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param farm_id: Id of the associated Farm.
    :type farm_id: str
    :ivar farmer_id: Farmer Id.
    :vartype farmer_id: str
    :ivar primary_boundary_id: Primary boundary id.
    :vartype primary_boundary_id: str
    :ivar boundary_ids: Boundary Ids.
    :vartype boundary_ids: list[str]
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'primary_boundary_id': {'readonly': True},
        'boundary_ids': {'readonly': True, 'unique': True},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farm_id': {'key': 'farmId', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'primary_boundary_id': {'key': 'primaryBoundaryId', 'type': 'str'},
        'boundary_ids': {'key': 'boundaryIds', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        farm_id: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(Field, self).__init__(**kwargs)
        self.farm_id = farm_id
        self.farmer_id = None
        self.primary_boundary_id = None
        self.boundary_ids = None
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class FieldListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.Field]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Field]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Field"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(FieldListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class GeoJsonObject(msrest.serialization.Model):
    """GeoJSON abstract class.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MultiPolygon, Point, Polygon.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. GeoJSON object type.Constant filled by server.  Possible values include:
     "Point", "Polygon", "MultiPolygon".
    :type type: str or ~azure.farmbeats.models.GeoJsonObjectType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'MultiPolygon': 'MultiPolygon', 'Point': 'Point', 'Polygon': 'Polygon'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GeoJsonObject, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class HarvestData(msrest.serialization.Model):
    """Defines HarvestData request object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param total_yield: Common data measure for storing various data(Farm operations/Weather).
    :type total_yield: ~azure.farmbeats.models.Measure
    :param avg_yield: Common data measure for storing various data(Farm operations/Weather).
    :type avg_yield: ~azure.farmbeats.models.Measure
    :param wet_mass: Common data measure for storing various data(Farm operations/Weather).
    :type wet_mass: ~azure.farmbeats.models.Measure
    :param avg_wet_mass: Common data measure for storing various data(Farm operations/Weather).
    :type avg_wet_mass: ~azure.farmbeats.models.Measure
    :param avg_moisture: Common data measure for storing various data(Farm operations/Weather).
    :type avg_moisture: ~azure.farmbeats.models.Measure
    :param avg_speed: Common data measure for storing various data(Farm operations/Weather).
    :type avg_speed: ~azure.farmbeats.models.Measure
    :param harvest_product_details: Harvest product details.
    :type harvest_product_details: list[~azure.farmbeats.models.HarvestProductDetail]
    :ivar id: Unique Id.
    :vartype id: str
    :ivar farmer_id: Assoiciated Farmer Id with the operation data.
    :vartype farmer_id: str
    :param operation_start_date_time: Start datetime of operation.
    :type operation_start_date_time: ~datetime.datetime
    :param operation_end_date_time: End datetime of operation.
    :type operation_end_date_time: ~datetime.datetime
    :param source: Source of the data.
    :type source: str
    :param operation_modified_date_time: Modified date time of the farm operation.
     This will come from the provider itself.
    :type operation_modified_date_time: ~datetime.datetime
    :param associated_boundary_id: AssociatedBoundaryId represents boundary of field for which
     operation is done where as
     OperationBoundaryId represents actual area of operation done inside field.
    :type associated_boundary_id: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar attachments_link: Area.
    :vartype attachments_link: str
    :param area: Common data measure for storing various data(Farm operations/Weather).
    :type area: ~azure.farmbeats.models.Measure
    :param operation_boundary_id: Operation boundary Id.
    :type operation_boundary_id: str
    :param status: Status of the resource.
    :type status: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'farmer_id': {'readonly': True},
        'source': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'attachments_link': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'total_yield': {'key': 'totalYield', 'type': 'Measure'},
        'avg_yield': {'key': 'avgYield', 'type': 'Measure'},
        'wet_mass': {'key': 'wetMass', 'type': 'Measure'},
        'avg_wet_mass': {'key': 'avgWetMass', 'type': 'Measure'},
        'avg_moisture': {'key': 'avgMoisture', 'type': 'Measure'},
        'avg_speed': {'key': 'avgSpeed', 'type': 'Measure'},
        'harvest_product_details': {'key': 'harvestProductDetails', 'type': '[HarvestProductDetail]'},
        'id': {'key': 'id', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'operation_start_date_time': {'key': 'operationStartDateTime', 'type': 'iso-8601'},
        'operation_end_date_time': {'key': 'operationEndDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'str'},
        'operation_modified_date_time': {'key': 'operationModifiedDateTime', 'type': 'iso-8601'},
        'associated_boundary_id': {'key': 'associatedBoundaryId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'attachments_link': {'key': 'attachmentsLink', 'type': 'str'},
        'area': {'key': 'area', 'type': 'Measure'},
        'operation_boundary_id': {'key': 'operationBoundaryId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        total_yield: Optional["Measure"] = None,
        avg_yield: Optional["Measure"] = None,
        wet_mass: Optional["Measure"] = None,
        avg_wet_mass: Optional["Measure"] = None,
        avg_moisture: Optional["Measure"] = None,
        avg_speed: Optional["Measure"] = None,
        harvest_product_details: Optional[List["HarvestProductDetail"]] = None,
        operation_start_date_time: Optional[datetime.datetime] = None,
        operation_end_date_time: Optional[datetime.datetime] = None,
        source: Optional[str] = None,
        operation_modified_date_time: Optional[datetime.datetime] = None,
        associated_boundary_id: Optional[str] = None,
        area: Optional["Measure"] = None,
        operation_boundary_id: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(HarvestData, self).__init__(**kwargs)
        self.total_yield = total_yield
        self.avg_yield = avg_yield
        self.wet_mass = wet_mass
        self.avg_wet_mass = avg_wet_mass
        self.avg_moisture = avg_moisture
        self.avg_speed = avg_speed
        self.harvest_product_details = harvest_product_details
        self.id = None
        self.farmer_id = None
        self.operation_start_date_time = operation_start_date_time
        self.operation_end_date_time = operation_end_date_time
        self.source = source
        self.operation_modified_date_time = operation_modified_date_time
        self.associated_boundary_id = associated_boundary_id
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.attachments_link = None
        self.area = area
        self.operation_boundary_id = operation_boundary_id
        self.status = status
        self.name = name
        self.description = description
        self.properties = properties


class HarvestDataListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.HarvestData]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HarvestData]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["HarvestData"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(HarvestDataListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class HarvestProductDetail(msrest.serialization.Model):
    """Schema for Harvest product detail.

    :param crop_variety_name: Name of the crop variety.
    :type crop_variety_name: str
    :param area: Common data measure for storing various data(Farm operations/Weather).
    :type area: ~azure.farmbeats.models.Measure
    :param total_yield: Common data measure for storing various data(Farm operations/Weather).
    :type total_yield: ~azure.farmbeats.models.Measure
    :param avg_yield: Common data measure for storing various data(Farm operations/Weather).
    :type avg_yield: ~azure.farmbeats.models.Measure
    :param avg_moisture: Common data measure for storing various data(Farm operations/Weather).
    :type avg_moisture: ~azure.farmbeats.models.Measure
    :param total_wet_mass: Common data measure for storing various data(Farm operations/Weather).
    :type total_wet_mass: ~azure.farmbeats.models.Measure
    :param avg_wet_mass: Common data measure for storing various data(Farm operations/Weather).
    :type avg_wet_mass: ~azure.farmbeats.models.Measure
    """

    _validation = {
        'crop_variety_name': {'max_length': 100, 'min_length': 1},
    }

    _attribute_map = {
        'crop_variety_name': {'key': 'cropVarietyName', 'type': 'str'},
        'area': {'key': 'area', 'type': 'Measure'},
        'total_yield': {'key': 'totalYield', 'type': 'Measure'},
        'avg_yield': {'key': 'avgYield', 'type': 'Measure'},
        'avg_moisture': {'key': 'avgMoisture', 'type': 'Measure'},
        'total_wet_mass': {'key': 'totalWetMass', 'type': 'Measure'},
        'avg_wet_mass': {'key': 'avgWetMass', 'type': 'Measure'},
    }

    def __init__(
        self,
        *,
        crop_variety_name: Optional[str] = None,
        area: Optional["Measure"] = None,
        total_yield: Optional["Measure"] = None,
        avg_yield: Optional["Measure"] = None,
        avg_moisture: Optional["Measure"] = None,
        total_wet_mass: Optional["Measure"] = None,
        avg_wet_mass: Optional["Measure"] = None,
        **kwargs
    ):
        super(HarvestProductDetail, self).__init__(**kwargs)
        self.crop_variety_name = crop_variety_name
        self.area = area
        self.total_yield = total_yield
        self.avg_yield = avg_yield
        self.avg_moisture = avg_moisture
        self.total_wet_mass = total_wet_mass
        self.avg_wet_mass = avg_wet_mass


class ImageFileResponse(msrest.serialization.Model):
    """Scene ImageFile Response.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Image name.
    :type name: str
    :param image_format: ImageFormat for satellite data. Possible values include: "TIF".
    :type image_format: str or ~azure.farmbeats.models.ImageFormat
    :param resolution: Resolution of image in meters.
    :type resolution: float
    :param file_link: ImageFile link.
    :type file_link: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'image_format': {'key': 'imageFormat', 'type': 'str'},
        'resolution': {'key': 'resolution', 'type': 'float'},
        'file_link': {'key': 'fileLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        image_format: Optional[Union[str, "ImageFormat"]] = None,
        resolution: Optional[float] = None,
        file_link: Optional[str] = None,
        **kwargs
    ):
        super(ImageFileResponse, self).__init__(**kwargs)
        self.name = name
        self.image_format = image_format
        self.resolution = resolution
        self.file_link = file_link


class InnerError(msrest.serialization.Model):
    """Inner error containing list of errors.

:code:`<see href="https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#innererror--object">InnerError reference document</see>`.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :param code: Specific error code than was provided by the
     containing error.
    :type code: str
    :param innererror: Inner error containing list of errors.
    
     :code:`<see href="https://github.com/Microsoft/api-
     guidelines/blob/vNext/Guidelines.md#innererror--object">InnerError reference document</see>`.
    :type innererror: ~azure.farmbeats.models.InnerError
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        code: Optional[str] = None,
        innererror: Optional["InnerError"] = None,
        **kwargs
    ):
        super(InnerError, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = code
        self.innererror = innererror


class JobResponse(msrest.serialization.Model):
    """Generic job response. Useful for common job tasks like cancellation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param job_status: Various states a job can be in. Possible values include: "Waiting",
     "Running", "Succeeded", "Failed", "Cancelled".
    :type job_status: str or ~azure.farmbeats.models.JobStatus
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :ivar is_cancellation_requested: Flag that gets set when job cancellation is requested.
    :vartype is_cancellation_requested: bool
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'is_cancellation_requested': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'is_cancellation_requested': {'key': 'isCancellationRequested', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        duration: Optional[str] = None,
        id: Optional[str] = None,
        job_status: Optional[Union[str, "JobStatus"]] = None,
        message: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(JobResponse, self).__init__(**kwargs)
        self.duration = duration
        self.id = id
        self.job_status = job_status
        self.message = message
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.is_cancellation_requested = None
        self.name = name
        self.description = description
        self.properties = properties


class Location(msrest.serialization.Model):
    """Location model class.

    All required parameters must be populated in order to send to Azure.

    :param latitude: Required. Latitude of the location.
    :type latitude: float
    :param longitude: Required. Longitude of the location.
    :type longitude: float
    """

    _validation = {
        'latitude': {'required': True, 'maximum': 90, 'minimum': -90},
        'longitude': {'required': True, 'maximum': 180, 'minimum': -180},
    }

    _attribute_map = {
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        latitude: float,
        longitude: float,
        **kwargs
    ):
        super(Location, self).__init__(**kwargs)
        self.latitude = latitude
        self.longitude = longitude


class Measure(msrest.serialization.Model):
    """Common data measure for storing various data(Farm operations/Weather).

    :param unit: Data unit.
    :type unit: str
    :param value: Data value.
    :type value: float
    """

    _validation = {
        'unit': {'max_length': 50, 'min_length': 1},
    }

    _attribute_map = {
        'unit': {'key': 'unit', 'type': 'str'},
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        unit: Optional[str] = None,
        value: Optional[float] = None,
        **kwargs
    ):
        super(Measure, self).__init__(**kwargs)
        self.unit = unit
        self.value = value


class MultiPolygon(GeoJsonObject):
    """MultiPolygon geometry.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. GeoJSON object type.Constant filled by server.  Possible values include:
     "Point", "Polygon", "MultiPolygon".
    :type type: str or ~azure.farmbeats.models.GeoJsonObjectType
    :param coordinates: Required. Gets or sets Coordinates of GeoJSON Object.
     It must be an array of polygons, each polygon contains list of linear rings.
     For Polygons with more than one of these rings, the first MUST be the exterior ring,
     and any others MUST be interior rings.
    :type coordinates: list[list[list[list[float]]]]
    """

    _validation = {
        'type': {'required': True},
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'coordinates': {'key': 'coordinates', 'type': '[[[[float]]]]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[List[List[float]]]],
        **kwargs
    ):
        super(MultiPolygon, self).__init__(**kwargs)
        self.type = 'MultiPolygon'  # type: str
        self.coordinates = coordinates


class OAuthConfig(msrest.serialization.Model):
    """OAuth configuration object needed to initiate oauth flow.

    All required parameters must be populated in order to send to Azure.

    :param oauth_authorization_link: Required. Link needed by end user to perform Oauth
     authorization.
    :type oauth_authorization_link: str
    """

    _validation = {
        'oauth_authorization_link': {'required': True},
    }

    _attribute_map = {
        'oauth_authorization_link': {'key': 'oauthAuthorizationLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        oauth_authorization_link: str,
        **kwargs
    ):
        super(OAuthConfig, self).__init__(**kwargs)
        self.oauth_authorization_link = oauth_authorization_link


class OAuthConfigQuery(msrest.serialization.Model):
    """Get OAuth config query parameters.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Id of the farmer.
    :type farmer_id: str
    :param o_auth_provider_id: Required. Id of the OAuthProvider.
    :type o_auth_provider_id: str
    :param user_redirect_link: Required. Link to redirect the user to, at the end of the oauth
     flow.
    :type user_redirect_link: str
    :param user_redirect_state: State to provide back when redirecting the user, at the end of the
     oauth flow.
    :type user_redirect_state: str
    """

    _validation = {
        'farmer_id': {'required': True},
        'o_auth_provider_id': {'required': True},
        'user_redirect_link': {'required': True, 'max_length': 1000, 'min_length': 0},
        'user_redirect_state': {'max_length': 200, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'o_auth_provider_id': {'key': 'oAuthProviderId', 'type': 'str'},
        'user_redirect_link': {'key': 'userRedirectLink', 'type': 'str'},
        'user_redirect_state': {'key': 'userRedirectState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        farmer_id: str,
        o_auth_provider_id: str,
        user_redirect_link: str,
        user_redirect_state: Optional[str] = None,
        **kwargs
    ):
        super(OAuthConfigQuery, self).__init__(**kwargs)
        self.farmer_id = farmer_id
        self.o_auth_provider_id = o_auth_provider_id
        self.user_redirect_link = user_redirect_link
        self.user_redirect_state = user_redirect_state


class OAuthProvider(msrest.serialization.Model):
    """Api Model for AuthProvider object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique Id.
    :vartype id: str
    :param app_id: OAuth App Id for given Auth Provider.
    :type app_id: str
    :param is_production_app: To determine if the App is ready to be used for Production scenarios
     in the provider side.
     If not provided, we assume false.
     Currently applicable for JohnDeere.
    :type is_production_app: bool
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'app_id': {'max_length': 200, 'min_length': 2},
        'e_tag': {'readonly': True},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'is_production_app': {'key': 'isProductionApp', 'type': 'bool'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        app_id: Optional[str] = None,
        is_production_app: Optional[bool] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OAuthProvider, self).__init__(**kwargs)
        self.id = None
        self.app_id = app_id
        self.is_production_app = is_production_app
        self.e_tag = None
        self.created_date_time = None
        self.modified_date_time = None
        self.name = name
        self.description = description
        self.properties = properties


class OAuthProviderListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.OAuthProvider]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OAuthProvider]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["OAuthProvider"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(OAuthProviderListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class OAuthTokenInfo(msrest.serialization.Model):
    """Api Model for OAuth token info object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Farmer Id for this auth config.
    :type farmer_id: str
    :param auth_provider_id: Required. Id of the auth provider object containing app information.
    :type auth_provider_id: str
    :param is_valid: Indicates if the token is a valid and working one or expired.
    :type is_valid: bool
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'auth_provider_id': {'required': True},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'auth_provider_id': {'key': 'authProviderId', 'type': 'str'},
        'is_valid': {'key': 'isValid', 'type': 'bool'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        farmer_id: str,
        auth_provider_id: str,
        is_valid: Optional[bool] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(OAuthTokenInfo, self).__init__(**kwargs)
        self.farmer_id = farmer_id
        self.auth_provider_id = auth_provider_id
        self.is_valid = is_valid
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class OAuthTokenInfoListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.OAuthTokenInfo]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OAuthTokenInfo]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["OAuthTokenInfo"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(OAuthTokenInfoListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class Paths104Hgf2FarmersFarmeridAttachmentsAttachmentidPutRequestbodyContentMultipartFormDataSchema(msrest.serialization.Model):
    """Paths104Hgf2FarmersFarmeridAttachmentsAttachmentidPutRequestbodyContentMultipartFormDataSchema.

    All required parameters must be populated in order to send to Azure.

    :param file: Required. File of size upto 5mb.
    :type file: IO
    :param farmer_id: Farmer id for this attachment.
    :type farmer_id: str
    :param resource_id: Associated Resource id for this attachment.
    :type resource_id: str
    :param resource_type: Associated Resource type for this attachment
     i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData,
     TillageData, PlantingData.
    :type resource_type: str
    :param original_file_name: Original File Name for this attachment.
    :type original_file_name: str
    :param id: Unique id.
    :type id: str
    :param status: Status of the resource.
    :type status: str
    :param created_date_time: Date when resource was created.
    :type created_date_time: str
    :param modified_date_time: Date when resource was last modified.
    :type modified_date_time: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param e_tag: The ETag value to implement optimistic concurrency.
    :type e_tag: str
    """

    _validation = {
        'file': {'required': True},
    }

    _attribute_map = {
        'file': {'key': 'file', 'type': 'IO'},
        'farmer_id': {'key': 'FarmerId', 'type': 'str'},
        'resource_id': {'key': 'ResourceId', 'type': 'str'},
        'resource_type': {'key': 'ResourceType', 'type': 'str'},
        'original_file_name': {'key': 'OriginalFileName', 'type': 'str'},
        'id': {'key': 'Id', 'type': 'str'},
        'status': {'key': 'Status', 'type': 'str'},
        'created_date_time': {'key': 'CreatedDateTime', 'type': 'str'},
        'modified_date_time': {'key': 'ModifiedDateTime', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'description': {'key': 'Description', 'type': 'str'},
        'e_tag': {'key': 'ETag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        file: IO,
        farmer_id: Optional[str] = None,
        resource_id: Optional[str] = None,
        resource_type: Optional[str] = None,
        original_file_name: Optional[str] = None,
        id: Optional[str] = None,
        status: Optional[str] = None,
        created_date_time: Optional[str] = None,
        modified_date_time: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        **kwargs
    ):
        super(Paths104Hgf2FarmersFarmeridAttachmentsAttachmentidPutRequestbodyContentMultipartFormDataSchema, self).__init__(**kwargs)
        self.file = file
        self.farmer_id = farmer_id
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.original_file_name = original_file_name
        self.id = id
        self.status = status
        self.created_date_time = created_date_time
        self.modified_date_time = modified_date_time
        self.name = name
        self.description = description
        self.e_tag = e_tag


class Paths1LxjoxzFarmersFarmeridAttachmentsAttachmentidPatchRequestbodyContentMultipartFormDataSchema(msrest.serialization.Model):
    """Paths1LxjoxzFarmersFarmeridAttachmentsAttachmentidPatchRequestbodyContentMultipartFormDataSchema.

    :param file: File of size upto 5mb.
    :type file: IO
    :param farmer_id: Farmer id for this attachment.
    :type farmer_id: str
    :param resource_id: Associated Resource id for this attachment.
    :type resource_id: str
    :param resource_type: Associated Resource type for this attachment
     i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData,
     TillageData, PlantingData.
    :type resource_type: str
    :param original_file_name: Original File Name for this attachment.
    :type original_file_name: str
    :param id: Unique id.
    :type id: str
    :param status: Status of the resource.
    :type status: str
    :param created_date_time: Date when resource was created.
    :type created_date_time: str
    :param modified_date_time: Date when resource was last modified.
    :type modified_date_time: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param e_tag: The ETag value to implement optimistic concurrency.
    :type e_tag: str
    """

    _attribute_map = {
        'file': {'key': 'file', 'type': 'IO'},
        'farmer_id': {'key': 'FarmerId', 'type': 'str'},
        'resource_id': {'key': 'ResourceId', 'type': 'str'},
        'resource_type': {'key': 'ResourceType', 'type': 'str'},
        'original_file_name': {'key': 'OriginalFileName', 'type': 'str'},
        'id': {'key': 'Id', 'type': 'str'},
        'status': {'key': 'Status', 'type': 'str'},
        'created_date_time': {'key': 'CreatedDateTime', 'type': 'str'},
        'modified_date_time': {'key': 'ModifiedDateTime', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'description': {'key': 'Description', 'type': 'str'},
        'e_tag': {'key': 'ETag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        file: Optional[IO] = None,
        farmer_id: Optional[str] = None,
        resource_id: Optional[str] = None,
        resource_type: Optional[str] = None,
        original_file_name: Optional[str] = None,
        id: Optional[str] = None,
        status: Optional[str] = None,
        created_date_time: Optional[str] = None,
        modified_date_time: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        e_tag: Optional[str] = None,
        **kwargs
    ):
        super(Paths1LxjoxzFarmersFarmeridAttachmentsAttachmentidPatchRequestbodyContentMultipartFormDataSchema, self).__init__(**kwargs)
        self.file = file
        self.farmer_id = farmer_id
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.original_file_name = original_file_name
        self.id = id
        self.status = status
        self.created_date_time = created_date_time
        self.modified_date_time = modified_date_time
        self.name = name
        self.description = description
        self.e_tag = e_tag


class PlantingData(msrest.serialization.Model):
    """Defines PlantingData request object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param avg_seeding_rate: Common data measure for storing various data(Farm operations/Weather).
    :type avg_seeding_rate: ~azure.farmbeats.models.Measure
    :param total_material: Common data measure for storing various data(Farm operations/Weather).
    :type total_material: ~azure.farmbeats.models.Measure
    :param avg_material: Common data measure for storing various data(Farm operations/Weather).
    :type avg_material: ~azure.farmbeats.models.Measure
    :param seeding_product_details: Seeding product details.
    :type seeding_product_details: list[~azure.farmbeats.models.SeedingProductDetail]
    :ivar id: Unique Id.
    :vartype id: str
    :ivar farmer_id: Assoiciated Farmer Id with the operation data.
    :vartype farmer_id: str
    :param operation_start_date_time: Start datetime of operation.
    :type operation_start_date_time: ~datetime.datetime
    :param operation_end_date_time: End datetime of operation.
    :type operation_end_date_time: ~datetime.datetime
    :param source: Source of the data.
    :type source: str
    :param operation_modified_date_time: Modified date time of the farm operation.
     This will come from the provider itself.
    :type operation_modified_date_time: ~datetime.datetime
    :param associated_boundary_id: AssociatedBoundaryId represents boundary of field for which
     operation is done where as
     OperationBoundaryId represents actual area of operation done inside field.
    :type associated_boundary_id: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar attachments_link: Area.
    :vartype attachments_link: str
    :param area: Common data measure for storing various data(Farm operations/Weather).
    :type area: ~azure.farmbeats.models.Measure
    :param operation_boundary_id: Operation boundary Id.
    :type operation_boundary_id: str
    :param status: Status of the resource.
    :type status: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'farmer_id': {'readonly': True},
        'source': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'attachments_link': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'avg_seeding_rate': {'key': 'avgSeedingRate', 'type': 'Measure'},
        'total_material': {'key': 'totalMaterial', 'type': 'Measure'},
        'avg_material': {'key': 'avgMaterial', 'type': 'Measure'},
        'seeding_product_details': {'key': 'seedingProductDetails', 'type': '[SeedingProductDetail]'},
        'id': {'key': 'id', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'operation_start_date_time': {'key': 'operationStartDateTime', 'type': 'iso-8601'},
        'operation_end_date_time': {'key': 'operationEndDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'str'},
        'operation_modified_date_time': {'key': 'operationModifiedDateTime', 'type': 'iso-8601'},
        'associated_boundary_id': {'key': 'associatedBoundaryId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'attachments_link': {'key': 'attachmentsLink', 'type': 'str'},
        'area': {'key': 'area', 'type': 'Measure'},
        'operation_boundary_id': {'key': 'operationBoundaryId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        avg_seeding_rate: Optional["Measure"] = None,
        total_material: Optional["Measure"] = None,
        avg_material: Optional["Measure"] = None,
        seeding_product_details: Optional[List["SeedingProductDetail"]] = None,
        operation_start_date_time: Optional[datetime.datetime] = None,
        operation_end_date_time: Optional[datetime.datetime] = None,
        source: Optional[str] = None,
        operation_modified_date_time: Optional[datetime.datetime] = None,
        associated_boundary_id: Optional[str] = None,
        area: Optional["Measure"] = None,
        operation_boundary_id: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(PlantingData, self).__init__(**kwargs)
        self.avg_seeding_rate = avg_seeding_rate
        self.total_material = total_material
        self.avg_material = avg_material
        self.seeding_product_details = seeding_product_details
        self.id = None
        self.farmer_id = None
        self.operation_start_date_time = operation_start_date_time
        self.operation_end_date_time = operation_end_date_time
        self.source = source
        self.operation_modified_date_time = operation_modified_date_time
        self.associated_boundary_id = associated_boundary_id
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.attachments_link = None
        self.area = area
        self.operation_boundary_id = operation_boundary_id
        self.status = status
        self.name = name
        self.description = description
        self.properties = properties


class PlantingDataListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.PlantingData]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PlantingData]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["PlantingData"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PlantingDataListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class Point(GeoJsonObject):
    """Point geometry.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. GeoJSON object type.Constant filled by server.  Possible values include:
     "Point", "Polygon", "MultiPolygon".
    :type type: str or ~azure.farmbeats.models.GeoJsonObjectType
    :param coordinates: Required. Gets or sets the coordinate of this point.
     It must be an array of 2 or 3 elements for a 2D or 3D system.
    :type coordinates: list[float]
    """

    _validation = {
        'type': {'required': True},
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'coordinates': {'key': 'coordinates', 'type': '[float]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[float],
        **kwargs
    ):
        super(Point, self).__init__(**kwargs)
        self.type = 'Point'  # type: str
        self.coordinates = coordinates


class Polygon(GeoJsonObject):
    """Polygon geometry.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. GeoJSON object type.Constant filled by server.  Possible values include:
     "Point", "Polygon", "MultiPolygon".
    :type type: str or ~azure.farmbeats.models.GeoJsonObjectType
    :param coordinates: Required. Gets or sets type of the GeoJSON Object.
     It must be an array of linear ring coordinate arrays.
     For Polygons with more than one of these rings, the first MUST be the exterior ring,
     and any others MUST be interior rings.
    :type coordinates: list[list[list[float]]]
    """

    _validation = {
        'type': {'required': True},
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'coordinates': {'key': 'coordinates', 'type': '[[[float]]]'},
    }

    def __init__(
        self,
        *,
        coordinates: List[List[List[float]]],
        **kwargs
    ):
        super(Polygon, self).__init__(**kwargs)
        self.type = 'Polygon'  # type: str
        self.coordinates = coordinates


class SatelliteData(msrest.serialization.Model):
    """Data Model for SatelliteInjestionJobRequest.

    :param image_names: List of ImageNames.
    :type image_names: list[str or ~azure.farmbeats.models.ImageName]
    :param image_formats: List of ImageFormats. Available value: TIF.
    :type image_formats: list[str or ~azure.farmbeats.models.ImageFormat]
    :param image_resolutions: List of ImageResolutions in meters. Available value: 10/Ten.
    :type image_resolutions: list[str or ~azure.farmbeats.models.ImageResolution]
    """

    _attribute_map = {
        'image_names': {'key': 'imageNames', 'type': '[str]'},
        'image_formats': {'key': 'imageFormats', 'type': '[str]'},
        'image_resolutions': {'key': 'imageResolutions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        image_names: Optional[List[Union[str, "ImageName"]]] = None,
        image_formats: Optional[List[Union[str, "ImageFormat"]]] = None,
        image_resolutions: Optional[List[Union[str, "ImageResolution"]]] = None,
        **kwargs
    ):
        super(SatelliteData, self).__init__(**kwargs)
        self.image_names = image_names
        self.image_formats = image_formats
        self.image_resolutions = image_resolutions


class SatelliteIngestionJobRequest(msrest.serialization.Model):
    """SatelliteIngestionJobRequest.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Farmer Id.
    :type farmer_id: str
    :param boundary_id: Required. The id of the boundary object for which satellite data is being
     fetched.
    :type boundary_id: str
    :param start_date: Required. Start Date.
    :type start_date: ~datetime.datetime
    :param end_date: Required. End Date.
    :type end_date: ~datetime.datetime
    :param provider: Provider of satellite data. Possible values include: "Microsoft".
    :type provider: str or ~azure.farmbeats.models.DataProvider
    :param source: Source of satellite data. Possible values include: "Sentinel_2_L2A".
    :type source: str or ~azure.farmbeats.models.Source
    :param data: Data Model for SatelliteInjestionJobRequest.
    :type data: ~azure.farmbeats.models.SatelliteData
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'boundary_id': {'required': True},
        'start_date': {'required': True},
        'end_date': {'required': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'boundary_id': {'key': 'boundaryId', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'iso-8601'},
        'end_date': {'key': 'endDate', 'type': 'iso-8601'},
        'provider': {'key': 'provider', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'data': {'key': 'data', 'type': 'SatelliteData'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        farmer_id: str,
        boundary_id: str,
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        provider: Optional[Union[str, "DataProvider"]] = None,
        source: Optional[Union[str, "Source"]] = None,
        data: Optional["SatelliteData"] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(SatelliteIngestionJobRequest, self).__init__(**kwargs)
        self.farmer_id = farmer_id
        self.boundary_id = boundary_id
        self.start_date = start_date
        self.end_date = end_date
        self.provider = provider
        self.source = source
        self.data = data
        self.name = name
        self.description = description
        self.properties = properties


class SatelliteIngestionJobResponse(msrest.serialization.Model):
    """SatelliteIngestion job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param job_status: Various states a job can be in. Possible values include: "Waiting",
     "Running", "Succeeded", "Failed", "Cancelled".
    :type job_status: str or ~azure.farmbeats.models.JobStatus
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :ivar is_cancellation_requested: Flag that gets set when job cancellation is requested.
    :vartype is_cancellation_requested: bool
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'is_cancellation_requested': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'is_cancellation_requested': {'key': 'isCancellationRequested', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        duration: Optional[str] = None,
        id: Optional[str] = None,
        job_status: Optional[Union[str, "JobStatus"]] = None,
        message: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(SatelliteIngestionJobResponse, self).__init__(**kwargs)
        self.duration = duration
        self.id = id
        self.job_status = job_status
        self.message = message
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.is_cancellation_requested = None
        self.name = name
        self.description = description
        self.properties = properties


class SceneEntityResponse(msrest.serialization.Model):
    """Model for returning Scene object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Scene Id.
    :type id: str
    :param scene_date_time: Scene date-time.
    :type scene_date_time: ~datetime.datetime
    :param farmer_id: Farmer Id.
    :type farmer_id: str
    :param provider: Scene Data Provider.
    :type provider: str
    :param source: Scene Data Source.
    :type source: str
    :param boundary_id: BoundaryId value.
    :type boundary_id: str
    :param cloud_cover_percentage: Cloud cover percentage of scene.
    :type cloud_cover_percentage: float
    :param dark_pixel_percentage: Dark Pixel percentage of Scene.
    :type dark_pixel_percentage: float
    :param ndvi_median_value: Median of NDVI scene values.
    :type ndvi_median_value: float
    :param image_format: ImageFormat for satellite data. Possible values include: "TIF".
    :type image_format: str or ~azure.farmbeats.models.ImageFormat
    :param image_files: List of Image files.
    :type image_files: list[~azure.farmbeats.models.ImageFileResponse]
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    """

    _validation = {
        'provider': {'max_length': 100, 'min_length': 2},
        'source': {'max_length': 100, 'min_length': 2},
        'boundary_id': {'max_length': 100, 'min_length': 2},
        'cloud_cover_percentage': {'maximum': 100, 'minimum': 0},
        'dark_pixel_percentage': {'maximum': 100, 'minimum': 0},
        'ndvi_median_value': {'maximum': 1, 'minimum': 0},
        'e_tag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'scene_date_time': {'key': 'sceneDateTime', 'type': 'iso-8601'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'boundary_id': {'key': 'boundaryId', 'type': 'str'},
        'cloud_cover_percentage': {'key': 'cloudCoverPercentage', 'type': 'float'},
        'dark_pixel_percentage': {'key': 'darkPixelPercentage', 'type': 'float'},
        'ndvi_median_value': {'key': 'ndviMedianValue', 'type': 'float'},
        'image_format': {'key': 'imageFormat', 'type': 'str'},
        'image_files': {'key': 'imageFiles', 'type': '[ImageFileResponse]'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        scene_date_time: Optional[datetime.datetime] = None,
        farmer_id: Optional[str] = None,
        provider: Optional[str] = None,
        source: Optional[str] = None,
        boundary_id: Optional[str] = None,
        cloud_cover_percentage: Optional[float] = None,
        dark_pixel_percentage: Optional[float] = None,
        ndvi_median_value: Optional[float] = None,
        image_format: Optional[Union[str, "ImageFormat"]] = None,
        image_files: Optional[List["ImageFileResponse"]] = None,
        **kwargs
    ):
        super(SceneEntityResponse, self).__init__(**kwargs)
        self.id = id
        self.scene_date_time = scene_date_time
        self.farmer_id = farmer_id
        self.provider = provider
        self.source = source
        self.boundary_id = boundary_id
        self.cloud_cover_percentage = cloud_cover_percentage
        self.dark_pixel_percentage = dark_pixel_percentage
        self.ndvi_median_value = ndvi_median_value
        self.image_format = image_format
        self.image_files = image_files
        self.e_tag = None


class SceneEntityResponseListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.SceneEntityResponse]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SceneEntityResponse]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["SceneEntityResponse"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SceneEntityResponseListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class SearchBoundaryQuery(msrest.serialization.Model):
    """SearchAllBoundaries and SearchBoundaries parameters.

    :param ids: Ids of the resource.
    :type ids: list[str]
    :param names: Names of the resource.
    :type names: list[str]
    :param property_filters: Filters on key-value pairs within the Properties object.
     eg. "{testkey} eq {testvalue}".
    :type property_filters: list[str]
    :param statuses: Statuses of the resource.
    :type statuses: list[str]
    :param min_created_date_time: Minimum creation date of resource (inclusive).
    :type min_created_date_time: ~datetime.datetime
    :param max_created_date_time: Maximum creation date of resource (inclusive).
    :type max_created_date_time: ~datetime.datetime
    :param min_last_modified_date_time: Minimum last modified date of resource (inclusive).
    :type min_last_modified_date_time: ~datetime.datetime
    :param max_last_modified_date_time: Maximum last modified date of resource (inclusive).
    :type max_last_modified_date_time: ~datetime.datetime
    :param max_page_size: Maximum number of items needed (inclusive).
     Minimum = 10, Maximum = 1000, Default value = 50.
    :type max_page_size: int
    :param skip_token: Skip token for getting next set of results.
    :type skip_token: str
    :param is_primary: Is the boundary primary.
    :type is_primary: bool
    :param parent_type: Type of the parent it belongs to.
    :type parent_type: str
    :param parent_ids: Parent Ids of the resource.
    :type parent_ids: list[str]
    :param min_acreage: Minimum acreage of the boundary (inclusive).
    :type min_acreage: float
    :param max_acreage: Maximum acreage of the boundary (inclusive).
    :type max_acreage: float
    :param intersects_with_geometry: GeoJSON abstract class.
    :type intersects_with_geometry: ~azure.farmbeats.models.GeoJsonObject
    """

    _validation = {
        'max_page_size': {'maximum': 1000, 'minimum': 10},
    }

    _attribute_map = {
        'ids': {'key': 'ids', 'type': '[str]'},
        'names': {'key': 'names', 'type': '[str]'},
        'property_filters': {'key': 'propertyFilters', 'type': '[str]'},
        'statuses': {'key': 'statuses', 'type': '[str]'},
        'min_created_date_time': {'key': 'minCreatedDateTime', 'type': 'iso-8601'},
        'max_created_date_time': {'key': 'maxCreatedDateTime', 'type': 'iso-8601'},
        'min_last_modified_date_time': {'key': 'minLastModifiedDateTime', 'type': 'iso-8601'},
        'max_last_modified_date_time': {'key': 'maxLastModifiedDateTime', 'type': 'iso-8601'},
        'max_page_size': {'key': '$maxPageSize', 'type': 'int'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'is_primary': {'key': 'isPrimary', 'type': 'bool'},
        'parent_type': {'key': 'parentType', 'type': 'str'},
        'parent_ids': {'key': 'parentIds', 'type': '[str]'},
        'min_acreage': {'key': 'minAcreage', 'type': 'float'},
        'max_acreage': {'key': 'maxAcreage', 'type': 'float'},
        'intersects_with_geometry': {'key': 'intersectsWithGeometry', 'type': 'GeoJsonObject'},
    }

    def __init__(
        self,
        *,
        ids: Optional[List[str]] = None,
        names: Optional[List[str]] = None,
        property_filters: Optional[List[str]] = None,
        statuses: Optional[List[str]] = None,
        min_created_date_time: Optional[datetime.datetime] = None,
        max_created_date_time: Optional[datetime.datetime] = None,
        min_last_modified_date_time: Optional[datetime.datetime] = None,
        max_last_modified_date_time: Optional[datetime.datetime] = None,
        max_page_size: Optional[int] = 50,
        skip_token: Optional[str] = None,
        is_primary: Optional[bool] = None,
        parent_type: Optional[str] = None,
        parent_ids: Optional[List[str]] = None,
        min_acreage: Optional[float] = None,
        max_acreage: Optional[float] = None,
        intersects_with_geometry: Optional["GeoJsonObject"] = None,
        **kwargs
    ):
        super(SearchBoundaryQuery, self).__init__(**kwargs)
        self.ids = ids
        self.names = names
        self.property_filters = property_filters
        self.statuses = statuses
        self.min_created_date_time = min_created_date_time
        self.max_created_date_time = max_created_date_time
        self.min_last_modified_date_time = min_last_modified_date_time
        self.max_last_modified_date_time = max_last_modified_date_time
        self.max_page_size = max_page_size
        self.skip_token = skip_token
        self.is_primary = is_primary
        self.parent_type = parent_type
        self.parent_ids = parent_ids
        self.min_acreage = min_acreage
        self.max_acreage = max_acreage
        self.intersects_with_geometry = intersects_with_geometry


class Season(msrest.serialization.Model):
    """Model for returning Season object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param start_date: Season start date.
    :type start_date: str
    :param end_date: Season end date.
    :type end_date: str
    :param year: Season year.
    :type year: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'start_date': {'key': 'startDate', 'type': 'str'},
        'end_date': {'key': 'endDate', 'type': 'str'},
        'year': {'key': 'year', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        start_date: Optional[str] = None,
        end_date: Optional[str] = None,
        year: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(Season, self).__init__(**kwargs)
        self.start_date = start_date
        self.end_date = end_date
        self.year = year
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class SeasonalField(msrest.serialization.Model):
    """Api Model for seasonal field object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar farmer_id: Farmer Id.
    :vartype farmer_id: str
    :ivar primary_boundary_id: Primary boundary id.
    :vartype primary_boundary_id: str
    :ivar boundary_ids: Boundary Ids.
    :vartype boundary_ids: list[str]
    :param farm_id: Id of the associated Farm.
    :type farm_id: str
    :param field_id: Id of the associated Field.
    :type field_id: str
    :param season_id: Id of the season it belongs to.
    :type season_id: str
    :param crop_variety_ids: CropVariety ids.
    :type crop_variety_ids: list[str]
    :param crop_id: Id of the crop it belongs to.
    :type crop_id: str
    :param avg_yield_value: Average yield value of the seasonal field.
    :type avg_yield_value: float
    :param avg_yield_unit: Unit of the average yield value attribute.
    :type avg_yield_unit: str
    :param avg_seed_population_value: Average seed population value of the seasonal field.
    :type avg_seed_population_value: float
    :param avg_seed_population_unit: Unit of average seed population value attribute.
    :type avg_seed_population_unit: str
    :param planting_date: Planting date.
    :type planting_date: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'primary_boundary_id': {'readonly': True},
        'boundary_ids': {'readonly': True, 'unique': True},
        'crop_variety_ids': {'unique': True},
        'avg_yield_unit': {'max_length': 32, 'min_length': 2},
        'avg_seed_population_unit': {'max_length': 32, 'min_length': 2},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'primary_boundary_id': {'key': 'primaryBoundaryId', 'type': 'str'},
        'boundary_ids': {'key': 'boundaryIds', 'type': '[str]'},
        'farm_id': {'key': 'farmId', 'type': 'str'},
        'field_id': {'key': 'fieldId', 'type': 'str'},
        'season_id': {'key': 'seasonId', 'type': 'str'},
        'crop_variety_ids': {'key': 'cropVarietyIds', 'type': '[str]'},
        'crop_id': {'key': 'cropId', 'type': 'str'},
        'avg_yield_value': {'key': 'avgYieldValue', 'type': 'float'},
        'avg_yield_unit': {'key': 'avgYieldUnit', 'type': 'str'},
        'avg_seed_population_value': {'key': 'avgSeedPopulationValue', 'type': 'float'},
        'avg_seed_population_unit': {'key': 'avgSeedPopulationUnit', 'type': 'str'},
        'planting_date': {'key': 'plantingDate', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        farm_id: Optional[str] = None,
        field_id: Optional[str] = None,
        season_id: Optional[str] = None,
        crop_variety_ids: Optional[List[str]] = None,
        crop_id: Optional[str] = None,
        avg_yield_value: Optional[float] = None,
        avg_yield_unit: Optional[str] = None,
        avg_seed_population_value: Optional[float] = None,
        avg_seed_population_unit: Optional[str] = None,
        planting_date: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(SeasonalField, self).__init__(**kwargs)
        self.farmer_id = None
        self.primary_boundary_id = None
        self.boundary_ids = None
        self.farm_id = farm_id
        self.field_id = field_id
        self.season_id = season_id
        self.crop_variety_ids = crop_variety_ids
        self.crop_id = crop_id
        self.avg_yield_value = avg_yield_value
        self.avg_yield_unit = avg_yield_unit
        self.avg_seed_population_value = avg_seed_population_value
        self.avg_seed_population_unit = avg_seed_population_unit
        self.planting_date = planting_date
        self.id = None
        self.status = status
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = name
        self.description = description
        self.properties = properties


class SeasonalFieldListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.SeasonalField]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SeasonalField]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["SeasonalField"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SeasonalFieldListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class SeasonListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.Season]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Season]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Season"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SeasonListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class SeedingProductDetail(msrest.serialization.Model):
    """Schema for Seeding product detail.

    :param crop_variety_name: Name of the crop variety.
    :type crop_variety_name: str
    :param area: Common data measure for storing various data(Farm operations/Weather).
    :type area: ~azure.farmbeats.models.Measure
    :param total_material: Common data measure for storing various data(Farm operations/Weather).
    :type total_material: ~azure.farmbeats.models.Measure
    :param avg_material: Common data measure for storing various data(Farm operations/Weather).
    :type avg_material: ~azure.farmbeats.models.Measure
    """

    _attribute_map = {
        'crop_variety_name': {'key': 'cropVarietyName', 'type': 'str'},
        'area': {'key': 'area', 'type': 'Measure'},
        'total_material': {'key': 'totalMaterial', 'type': 'Measure'},
        'avg_material': {'key': 'avgMaterial', 'type': 'Measure'},
    }

    def __init__(
        self,
        *,
        crop_variety_name: Optional[str] = None,
        area: Optional["Measure"] = None,
        total_material: Optional["Measure"] = None,
        avg_material: Optional["Measure"] = None,
        **kwargs
    ):
        super(SeedingProductDetail, self).__init__(**kwargs)
        self.crop_variety_name = crop_variety_name
        self.area = area
        self.total_material = total_material
        self.avg_material = avg_material


class TillageData(msrest.serialization.Model):
    """Defines TillageData request object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param tillage_depth: Common data measure for storing various data(Farm operations/Weather).
    :type tillage_depth: ~azure.farmbeats.models.Measure
    :param tillage_pressure: Common data measure for storing various data(Farm operations/Weather).
    :type tillage_pressure: ~azure.farmbeats.models.Measure
    :ivar id: Unique Id.
    :vartype id: str
    :ivar farmer_id: Assoiciated Farmer Id with the operation data.
    :vartype farmer_id: str
    :param operation_start_date_time: Start datetime of operation.
    :type operation_start_date_time: ~datetime.datetime
    :param operation_end_date_time: End datetime of operation.
    :type operation_end_date_time: ~datetime.datetime
    :param source: Source of the data.
    :type source: str
    :param operation_modified_date_time: Modified date time of the farm operation.
     This will come from the provider itself.
    :type operation_modified_date_time: ~datetime.datetime
    :param associated_boundary_id: AssociatedBoundaryId represents boundary of field for which
     operation is done where as
     OperationBoundaryId represents actual area of operation done inside field.
    :type associated_boundary_id: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :ivar attachments_link: Area.
    :vartype attachments_link: str
    :param area: Common data measure for storing various data(Farm operations/Weather).
    :type area: ~azure.farmbeats.models.Measure
    :param operation_boundary_id: Operation boundary Id.
    :type operation_boundary_id: str
    :param status: Status of the resource.
    :type status: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'farmer_id': {'readonly': True},
        'source': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'attachments_link': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 0},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'tillage_depth': {'key': 'tillageDepth', 'type': 'Measure'},
        'tillage_pressure': {'key': 'tillagePressure', 'type': 'Measure'},
        'id': {'key': 'id', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'operation_start_date_time': {'key': 'operationStartDateTime', 'type': 'iso-8601'},
        'operation_end_date_time': {'key': 'operationEndDateTime', 'type': 'iso-8601'},
        'source': {'key': 'source', 'type': 'str'},
        'operation_modified_date_time': {'key': 'operationModifiedDateTime', 'type': 'iso-8601'},
        'associated_boundary_id': {'key': 'associatedBoundaryId', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'attachments_link': {'key': 'attachmentsLink', 'type': 'str'},
        'area': {'key': 'area', 'type': 'Measure'},
        'operation_boundary_id': {'key': 'operationBoundaryId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        tillage_depth: Optional["Measure"] = None,
        tillage_pressure: Optional["Measure"] = None,
        operation_start_date_time: Optional[datetime.datetime] = None,
        operation_end_date_time: Optional[datetime.datetime] = None,
        source: Optional[str] = None,
        operation_modified_date_time: Optional[datetime.datetime] = None,
        associated_boundary_id: Optional[str] = None,
        area: Optional["Measure"] = None,
        operation_boundary_id: Optional[str] = None,
        status: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(TillageData, self).__init__(**kwargs)
        self.tillage_depth = tillage_depth
        self.tillage_pressure = tillage_pressure
        self.id = None
        self.farmer_id = None
        self.operation_start_date_time = operation_start_date_time
        self.operation_end_date_time = operation_end_date_time
        self.source = source
        self.operation_modified_date_time = operation_modified_date_time
        self.associated_boundary_id = associated_boundary_id
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.attachments_link = None
        self.area = area
        self.operation_boundary_id = operation_boundary_id
        self.status = status
        self.name = name
        self.description = description
        self.properties = properties


class TillageDataListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.TillageData]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TillageData]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["TillageData"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(TillageDataListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class WeatherData(msrest.serialization.Model):
    """Model for weather data.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Weather data Id.
    :type id: str
    :param farmer_id: Required. Farmer Id.
    :type farmer_id: str
    :param field_id: Required. Field Id.
    :type field_id: str
    :param extension_id: Required. Id of the weather extension.
    :type extension_id: str
    :param location: Required. Location model class.
    :type location: ~azure.farmbeats.models.Location
    :param date_time: Required. DateTime of the weather data.
    :type date_time: ~datetime.datetime
    :param created_date_time: Created date and time of the weather data.
    :type created_date_time: ~datetime.datetime
    :param modified_date_time: Modified date and time of the weather data.
    :type modified_date_time: ~datetime.datetime
    :param unit_system_code: Unit System like US/SI etc.
    :type unit_system_code: str
    :param extension_version: Required. Version of the weather data extension.
    :type extension_version: str
    :param weather_data_type: Required. Type of weather data (forecast/historical).
    :type weather_data_type: str
    :param granularity: Required. Granularity of weather data (daily/hourly).
    :type granularity: str
    :param cloud_cover: Weather data measure.
    :type cloud_cover: ~azure.farmbeats.models.WeatherMeasure
    :param dew_point: Weather data measure.
    :type dew_point: ~azure.farmbeats.models.WeatherMeasure
    :param growing_degree_day: Weather data measure.
    :type growing_degree_day: ~azure.farmbeats.models.WeatherMeasure
    :param precipitation: Weather data measure.
    :type precipitation: ~azure.farmbeats.models.WeatherMeasure
    :param pressure: Weather data measure.
    :type pressure: ~azure.farmbeats.models.WeatherMeasure
    :param relative_humidity: Weather data measure.
    :type relative_humidity: ~azure.farmbeats.models.WeatherMeasure
    :param soil_moisture: Weather data measure.
    :type soil_moisture: ~azure.farmbeats.models.WeatherMeasure
    :param soil_temperature: Weather data measure.
    :type soil_temperature: ~azure.farmbeats.models.WeatherMeasure
    :param temperature: Weather data measure.
    :type temperature: ~azure.farmbeats.models.WeatherMeasure
    :param visibility: Weather data measure.
    :type visibility: ~azure.farmbeats.models.WeatherMeasure
    :param wet_bulb_temperature: Weather data measure.
    :type wet_bulb_temperature: ~azure.farmbeats.models.WeatherMeasure
    :param wind_chill: Weather data measure.
    :type wind_chill: ~azure.farmbeats.models.WeatherMeasure
    :param wind_direction: Weather data measure.
    :type wind_direction: ~azure.farmbeats.models.WeatherMeasure
    :param wind_gust: Weather data measure.
    :type wind_gust: ~azure.farmbeats.models.WeatherMeasure
    :param wind_speed: Weather data measure.
    :type wind_speed: ~azure.farmbeats.models.WeatherMeasure
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param properties: Additional properties of the data.
     A maximum of 60 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'field_id': {'required': True},
        'extension_id': {'required': True},
        'location': {'required': True},
        'date_time': {'required': True},
        'extension_version': {'required': True},
        'weather_data_type': {'required': True},
        'granularity': {'required': True},
        'e_tag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'field_id': {'key': 'fieldId', 'type': 'str'},
        'extension_id': {'key': 'extensionId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'Location'},
        'date_time': {'key': 'dateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'unit_system_code': {'key': 'unitSystemCode', 'type': 'str'},
        'extension_version': {'key': 'extensionVersion', 'type': 'str'},
        'weather_data_type': {'key': 'weatherDataType', 'type': 'str'},
        'granularity': {'key': 'granularity', 'type': 'str'},
        'cloud_cover': {'key': 'cloudCover', 'type': 'WeatherMeasure'},
        'dew_point': {'key': 'dewPoint', 'type': 'WeatherMeasure'},
        'growing_degree_day': {'key': 'growingDegreeDay', 'type': 'WeatherMeasure'},
        'precipitation': {'key': 'precipitation', 'type': 'WeatherMeasure'},
        'pressure': {'key': 'pressure', 'type': 'WeatherMeasure'},
        'relative_humidity': {'key': 'relativeHumidity', 'type': 'WeatherMeasure'},
        'soil_moisture': {'key': 'soilMoisture', 'type': 'WeatherMeasure'},
        'soil_temperature': {'key': 'soilTemperature', 'type': 'WeatherMeasure'},
        'temperature': {'key': 'temperature', 'type': 'WeatherMeasure'},
        'visibility': {'key': 'visibility', 'type': 'WeatherMeasure'},
        'wet_bulb_temperature': {'key': 'wetBulbTemperature', 'type': 'WeatherMeasure'},
        'wind_chill': {'key': 'windChill', 'type': 'WeatherMeasure'},
        'wind_direction': {'key': 'windDirection', 'type': 'WeatherMeasure'},
        'wind_gust': {'key': 'windGust', 'type': 'WeatherMeasure'},
        'wind_speed': {'key': 'windSpeed', 'type': 'WeatherMeasure'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        farmer_id: str,
        field_id: str,
        extension_id: str,
        location: "Location",
        date_time: datetime.datetime,
        extension_version: str,
        weather_data_type: str,
        granularity: str,
        id: Optional[str] = None,
        created_date_time: Optional[datetime.datetime] = None,
        modified_date_time: Optional[datetime.datetime] = None,
        unit_system_code: Optional[str] = None,
        cloud_cover: Optional["WeatherMeasure"] = None,
        dew_point: Optional["WeatherMeasure"] = None,
        growing_degree_day: Optional["WeatherMeasure"] = None,
        precipitation: Optional["WeatherMeasure"] = None,
        pressure: Optional["WeatherMeasure"] = None,
        relative_humidity: Optional["WeatherMeasure"] = None,
        soil_moisture: Optional["WeatherMeasure"] = None,
        soil_temperature: Optional["WeatherMeasure"] = None,
        temperature: Optional["WeatherMeasure"] = None,
        visibility: Optional["WeatherMeasure"] = None,
        wet_bulb_temperature: Optional["WeatherMeasure"] = None,
        wind_chill: Optional["WeatherMeasure"] = None,
        wind_direction: Optional["WeatherMeasure"] = None,
        wind_gust: Optional["WeatherMeasure"] = None,
        wind_speed: Optional["WeatherMeasure"] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(WeatherData, self).__init__(**kwargs)
        self.id = id
        self.farmer_id = farmer_id
        self.field_id = field_id
        self.extension_id = extension_id
        self.location = location
        self.date_time = date_time
        self.created_date_time = created_date_time
        self.modified_date_time = modified_date_time
        self.unit_system_code = unit_system_code
        self.extension_version = extension_version
        self.weather_data_type = weather_data_type
        self.granularity = granularity
        self.cloud_cover = cloud_cover
        self.dew_point = dew_point
        self.growing_degree_day = growing_degree_day
        self.precipitation = precipitation
        self.pressure = pressure
        self.relative_humidity = relative_humidity
        self.soil_moisture = soil_moisture
        self.soil_temperature = soil_temperature
        self.temperature = temperature
        self.visibility = visibility
        self.wet_bulb_temperature = wet_bulb_temperature
        self.wind_chill = wind_chill
        self.wind_direction = wind_direction
        self.wind_gust = wind_gust
        self.wind_speed = wind_speed
        self.e_tag = None
        self.properties = properties


class WeatherDataDeleteJobRequest(msrest.serialization.Model):
    """WeatherDataDeleteJobRequest.

    All required parameters must be populated in order to send to Azure.

    :param extension_id: Required. Id of the extension to be used for the providerInput. eg.
     DTN.ClearAg.
    :type extension_id: str
    :param farmer_id: Required. The id of the farmer object for which weather data is being
     fetched.
    :type farmer_id: str
    :param field_id: Required. The id of the field object for which weather data is being fetched.
    :type field_id: str
    :param weather_data_type: Type of weather data (forecast/historical).
    :type weather_data_type: str
    :param granularity: Granularity of weather data (daily/hourly).
    :type granularity: str
    :param start_date_time: Weather data start UTC datetime (inclusive), sample format: yyyy-Mm-
     ddTHH:mm:ssZ.
    :type start_date_time: ~datetime.datetime
    :param end_date_time: Weather data end UTC datetime (inclusive), sample format: yyyy-Mm-
     ddTHH:mm:ssZ.
    :type end_date_time: ~datetime.datetime
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'extension_id': {'required': True, 'max_length': 100, 'min_length': 2},
        'farmer_id': {'required': True},
        'field_id': {'required': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'extension_id': {'key': 'extensionId', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'field_id': {'key': 'fieldId', 'type': 'str'},
        'weather_data_type': {'key': 'weatherDataType', 'type': 'str'},
        'granularity': {'key': 'granularity', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        extension_id: str,
        farmer_id: str,
        field_id: str,
        weather_data_type: Optional[str] = None,
        granularity: Optional[str] = None,
        start_date_time: Optional[datetime.datetime] = None,
        end_date_time: Optional[datetime.datetime] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(WeatherDataDeleteJobRequest, self).__init__(**kwargs)
        self.extension_id = extension_id
        self.farmer_id = farmer_id
        self.field_id = field_id
        self.weather_data_type = weather_data_type
        self.granularity = granularity
        self.start_date_time = start_date_time
        self.end_date_time = end_date_time
        self.name = name
        self.description = description
        self.properties = properties


class WeatherDataDeleteJobResponse(msrest.serialization.Model):
    """WeatherDataDelete job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param job_status: Various states a job can be in. Possible values include: "Waiting",
     "Running", "Succeeded", "Failed", "Cancelled".
    :type job_status: str or ~azure.farmbeats.models.JobStatus
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :ivar is_cancellation_requested: Flag that gets set when job cancellation is requested.
    :vartype is_cancellation_requested: bool
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'is_cancellation_requested': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'is_cancellation_requested': {'key': 'isCancellationRequested', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        duration: Optional[str] = None,
        id: Optional[str] = None,
        job_status: Optional[Union[str, "JobStatus"]] = None,
        message: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(WeatherDataDeleteJobResponse, self).__init__(**kwargs)
        self.duration = duration
        self.id = id
        self.job_status = job_status
        self.message = message
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.is_cancellation_requested = None
        self.name = name
        self.description = description
        self.properties = properties


class WeatherDataListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~azure.farmbeats.models.WeatherData]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[WeatherData]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["WeatherData"]] = None,
        skip_token: Optional[str] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(WeatherDataListResponse, self).__init__(**kwargs)
        self.value = value
        self.skip_token = skip_token
        self.next_link = next_link


class WeatherIngestionJobRequest(msrest.serialization.Model):
    """WeatherIngestionJobRequest.

    All required parameters must be populated in order to send to Azure.

    :param extension_id: Required. Id of the extension to be used for the providerInput. eg.
     DTN.ClearAg.
    :type extension_id: str
    :param field_id: Required. The id of the field object for which weather data is being fetched.
    :type field_id: str
    :param farmer_id: Required. The id of the farmer object for which weather data is being
     fetched.
    :type farmer_id: str
    :param api_name: Required. Api name to which request is to be made.
    :type api_name: str
    :param provider_input: Required. Provider input dictionary which would be used to feed request
     query/body/parameter information.
    :type provider_input: dict[str, object]
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'extension_id': {'required': True, 'max_length': 100, 'min_length': 2},
        'field_id': {'required': True},
        'farmer_id': {'required': True},
        'api_name': {'required': True, 'max_length': 100, 'min_length': 2},
        'provider_input': {'required': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'extension_id': {'key': 'extensionId', 'type': 'str'},
        'field_id': {'key': 'fieldId', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'api_name': {'key': 'apiName', 'type': 'str'},
        'provider_input': {'key': 'providerInput', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        extension_id: str,
        field_id: str,
        farmer_id: str,
        api_name: str,
        provider_input: Dict[str, object],
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(WeatherIngestionJobRequest, self).__init__(**kwargs)
        self.extension_id = extension_id
        self.field_id = field_id
        self.farmer_id = farmer_id
        self.api_name = api_name
        self.provider_input = provider_input
        self.name = name
        self.description = description
        self.properties = properties


class WeatherIngestionJobResponse(msrest.serialization.Model):
    """WeatherIngestion job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param job_status: Various states a job can be in. Possible values include: "Waiting",
     "Running", "Succeeded", "Failed", "Cancelled".
    :type job_status: str or ~azure.farmbeats.models.JobStatus
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :ivar is_cancellation_requested: Flag that gets set when job cancellation is requested.
    :vartype is_cancellation_requested: bool
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'is_cancellation_requested': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 0},
        'description': {'max_length': 500, 'min_length': 0},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'is_cancellation_requested': {'key': 'isCancellationRequested', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        duration: Optional[str] = None,
        id: Optional[str] = None,
        job_status: Optional[Union[str, "JobStatus"]] = None,
        message: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(WeatherIngestionJobResponse, self).__init__(**kwargs)
        self.duration = duration
        self.id = id
        self.job_status = job_status
        self.message = message
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.is_cancellation_requested = None
        self.name = name
        self.description = description
        self.properties = properties


class WeatherMeasure(msrest.serialization.Model):
    """Weather data measure.

    :param unit: Data unit.
    :type unit: str
    :param value: Data value.
    :type value: float
    """

    _validation = {
        'unit': {'max_length': 50, 'min_length': 1},
    }

    _attribute_map = {
        'unit': {'key': 'unit', 'type': 'str'},
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        unit: Optional[str] = None,
        value: Optional[float] = None,
        **kwargs
    ):
        super(WeatherMeasure, self).__init__(**kwargs)
        self.unit = unit
        self.value = value
