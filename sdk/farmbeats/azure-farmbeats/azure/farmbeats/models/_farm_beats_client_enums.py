# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.1.3, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class DataProvider(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Provider of satellite data.
    """

    MICROSOFT = "Microsoft"

class FieldOperationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Operation Types for Field Operation.
    """

    ALL_OPERATIONS = "AllOperations"
    APPLICATION = "Application"
    PLANTING = "Planting"
    HARVEST = "Harvest"
    TILLAGE = "Tillage"

class GeoJsonObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """GeoJSON object type.
    """

    POINT = "Point"
    POLYGON = "Polygon"
    MULTI_POLYGON = "MultiPolygon"

class ImageFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Supported image formats for scene resource.
    """

    TIF = "TIF"

class JobStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Various states a job can be in.
    """

    WAITING = "Waiting"
    RUNNING = "Running"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELLED = "Cancelled"

class Source(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Source of satellite data.
    """

    SENTINEL2_L2_A = "Sentinel_2_L2A"
