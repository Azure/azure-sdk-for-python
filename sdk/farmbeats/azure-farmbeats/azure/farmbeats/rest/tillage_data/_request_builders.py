# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.farmbeats.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, IO, List, Optional

_SERIALIZER = Serializer()


def build_list_by_farmer_id_request(
    farmer_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Returns a paginated list of tillage data resources under a particular farm.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param farmer_id: ID of the associated farmer.
    :type farmer_id: str
    :keyword min_tillage_depth: Minimum measured tillage depth (inclusive).
    :paramtype min_tillage_depth: float
    :keyword max_tillage_depth: Maximum measured tillage depth (inclusive).
    :paramtype max_tillage_depth: float
    :keyword min_tillage_pressure: Minimum downforce applied to a tillage implement (inclusive).
    :paramtype min_tillage_pressure: float
    :keyword max_tillage_pressure: Maximum downforce applied to a tillage implement (inclusive).
    :paramtype max_tillage_pressure: float
    :keyword sources: Sources of the operation data.
    :paramtype sources: list[str]
    :keyword associated_boundary_ids: Boundary IDs associated with operation data.
    :paramtype associated_boundary_ids: list[str]
    :keyword operation_boundary_ids: Operation boundary IDs associated with operation data.
    :paramtype operation_boundary_ids: list[str]
    :keyword min_operation_start_date_time: Minimum start date-time of the operation data, sample
     format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype min_operation_start_date_time: ~datetime.datetime
    :keyword max_operation_start_date_time: Maximum start date-time of the operation data, sample
     format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype max_operation_start_date_time: ~datetime.datetime
    :keyword min_operation_end_date_time: Minimum end date-time of the operation data, sample
     format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype min_operation_end_date_time: ~datetime.datetime
    :keyword max_operation_end_date_time: Maximum end date-time of the operation data, sample
     format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype max_operation_end_date_time: ~datetime.datetime
    :keyword min_operation_modified_date_time: Minimum modified date-time of the operation data,
     sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype min_operation_modified_date_time: ~datetime.datetime
    :keyword max_operation_modified_date_time: Maximum modified date-time of the operation data,
     sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype max_operation_modified_date_time: ~datetime.datetime
    :keyword min_area: Minimum area for which operation was applied (inclusive).
    :paramtype min_area: float
    :keyword max_area: Maximum area for which operation was applied (inclusive).
    :paramtype max_area: float
    :keyword ids: Ids of the resource.
    :paramtype ids: list[str]
    :keyword names: Names of the resource.
    :paramtype names: list[str]
    :keyword property_filters: Filters on key-value pairs within the Properties object.
     eg. "{testkey} eq {testvalue}".
    :paramtype property_filters: list[str]
    :keyword statuses: Statuses of the resource.
    :paramtype statuses: list[str]
    :keyword min_created_date_time: Minimum creation date of resource (inclusive).
    :paramtype min_created_date_time: ~datetime.datetime
    :keyword max_created_date_time: Maximum creation date of resource (inclusive).
    :paramtype max_created_date_time: ~datetime.datetime
    :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
    :paramtype min_last_modified_date_time: ~datetime.datetime
    :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
    :paramtype max_last_modified_date_time: ~datetime.datetime
    :keyword max_page_size: Maximum number of items needed (inclusive).
     Minimum = 10, Maximum = 1000, Default value = 50.
    :paramtype max_page_size: int
    :keyword skip_token: Skip token for getting next set of results.
    :paramtype skip_token: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response_body == {
                "$skipToken": "str (optional)",
                "nextLink": "str (optional)",
                "value": [
                    {
                        "area": {
                            "unit": "str (optional)",
                            "value": "float (optional)"
                        },
                        "associatedBoundaryId": "str (optional)",
                        "attachmentsLink": "str (optional)",
                        "createdDateTime": "datetime (optional)",
                        "description": "str (optional)",
                        "eTag": "str (optional)",
                        "farmerId": "str (optional)",
                        "id": "str (optional)",
                        "modifiedDateTime": "datetime (optional)",
                        "name": "str (optional)",
                        "operationBoundaryId": "str (optional)",
                        "operationEndDateTime": "datetime (optional)",
                        "operationModifiedDateTime": "datetime (optional)",
                        "operationStartDateTime": "datetime (optional)",
                        "properties": {
                            "str": "object (optional)"
                        },
                        "source": "str (optional)",
                        "status": "str (optional)",
                        "tillageDepth": {
                            "unit": "str (optional)",
                            "value": "float (optional)"
                        },
                        "tillagePressure": {
                            "unit": "str (optional)",
                            "value": "float (optional)"
                        }
                    }
                ]
            }

    """
    min_tillage_depth = kwargs.pop('min_tillage_depth', None)  # type: Optional[float]
    max_tillage_depth = kwargs.pop('max_tillage_depth', None)  # type: Optional[float]
    min_tillage_pressure = kwargs.pop('min_tillage_pressure', None)  # type: Optional[float]
    max_tillage_pressure = kwargs.pop('max_tillage_pressure', None)  # type: Optional[float]
    sources = kwargs.pop('sources', None)  # type: Optional[List[str]]
    associated_boundary_ids = kwargs.pop('associated_boundary_ids', None)  # type: Optional[List[str]]
    operation_boundary_ids = kwargs.pop('operation_boundary_ids', None)  # type: Optional[List[str]]
    min_operation_start_date_time = kwargs.pop('min_operation_start_date_time', None)  # type: Optional[datetime.datetime]
    max_operation_start_date_time = kwargs.pop('max_operation_start_date_time', None)  # type: Optional[datetime.datetime]
    min_operation_end_date_time = kwargs.pop('min_operation_end_date_time', None)  # type: Optional[datetime.datetime]
    max_operation_end_date_time = kwargs.pop('max_operation_end_date_time', None)  # type: Optional[datetime.datetime]
    min_operation_modified_date_time = kwargs.pop('min_operation_modified_date_time', None)  # type: Optional[datetime.datetime]
    max_operation_modified_date_time = kwargs.pop('max_operation_modified_date_time', None)  # type: Optional[datetime.datetime]
    min_area = kwargs.pop('min_area', None)  # type: Optional[float]
    max_area = kwargs.pop('max_area', None)  # type: Optional[float]
    ids = kwargs.pop('ids', None)  # type: Optional[List[str]]
    names = kwargs.pop('names', None)  # type: Optional[List[str]]
    property_filters = kwargs.pop('property_filters', None)  # type: Optional[List[str]]
    statuses = kwargs.pop('statuses', None)  # type: Optional[List[str]]
    min_created_date_time = kwargs.pop('min_created_date_time', None)  # type: Optional[datetime.datetime]
    max_created_date_time = kwargs.pop('max_created_date_time', None)  # type: Optional[datetime.datetime]
    min_last_modified_date_time = kwargs.pop('min_last_modified_date_time', None)  # type: Optional[datetime.datetime]
    max_last_modified_date_time = kwargs.pop('max_last_modified_date_time', None)  # type: Optional[datetime.datetime]
    max_page_size = kwargs.pop('max_page_size', 50)  # type: Optional[int]
    skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/farmers/{farmerId}/tillage-data')
    path_format_arguments = {
        'farmerId': _SERIALIZER.url("farmer_id", farmer_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if min_tillage_depth is not None:
        query_parameters['minTillageDepth'] = _SERIALIZER.query("min_tillage_depth", min_tillage_depth, 'float')
    if max_tillage_depth is not None:
        query_parameters['maxTillageDepth'] = _SERIALIZER.query("max_tillage_depth", max_tillage_depth, 'float')
    if min_tillage_pressure is not None:
        query_parameters['minTillagePressure'] = _SERIALIZER.query("min_tillage_pressure", min_tillage_pressure, 'float')
    if max_tillage_pressure is not None:
        query_parameters['maxTillagePressure'] = _SERIALIZER.query("max_tillage_pressure", max_tillage_pressure, 'float')
    if sources is not None:
        query_parameters['sources'] = [_SERIALIZER.query("sources", q, 'str') if q is not None else '' for q in sources]
    if associated_boundary_ids is not None:
        query_parameters['associatedBoundaryIds'] = [_SERIALIZER.query("associated_boundary_ids", q, 'str') if q is not None else '' for q in associated_boundary_ids]
    if operation_boundary_ids is not None:
        query_parameters['operationBoundaryIds'] = [_SERIALIZER.query("operation_boundary_ids", q, 'str') if q is not None else '' for q in operation_boundary_ids]
    if min_operation_start_date_time is not None:
        query_parameters['minOperationStartDateTime'] = _SERIALIZER.query("min_operation_start_date_time", min_operation_start_date_time, 'iso-8601')
    if max_operation_start_date_time is not None:
        query_parameters['maxOperationStartDateTime'] = _SERIALIZER.query("max_operation_start_date_time", max_operation_start_date_time, 'iso-8601')
    if min_operation_end_date_time is not None:
        query_parameters['minOperationEndDateTime'] = _SERIALIZER.query("min_operation_end_date_time", min_operation_end_date_time, 'iso-8601')
    if max_operation_end_date_time is not None:
        query_parameters['maxOperationEndDateTime'] = _SERIALIZER.query("max_operation_end_date_time", max_operation_end_date_time, 'iso-8601')
    if min_operation_modified_date_time is not None:
        query_parameters['minOperationModifiedDateTime'] = _SERIALIZER.query("min_operation_modified_date_time", min_operation_modified_date_time, 'iso-8601')
    if max_operation_modified_date_time is not None:
        query_parameters['maxOperationModifiedDateTime'] = _SERIALIZER.query("max_operation_modified_date_time", max_operation_modified_date_time, 'iso-8601')
    if min_area is not None:
        query_parameters['minArea'] = _SERIALIZER.query("min_area", min_area, 'float')
    if max_area is not None:
        query_parameters['maxArea'] = _SERIALIZER.query("max_area", max_area, 'float')
    if ids is not None:
        query_parameters['ids'] = [_SERIALIZER.query("ids", q, 'str') if q is not None else '' for q in ids]
    if names is not None:
        query_parameters['names'] = [_SERIALIZER.query("names", q, 'str') if q is not None else '' for q in names]
    if property_filters is not None:
        query_parameters['propertyFilters'] = [_SERIALIZER.query("property_filters", q, 'str') if q is not None else '' for q in property_filters]
    if statuses is not None:
        query_parameters['statuses'] = [_SERIALIZER.query("statuses", q, 'str') if q is not None else '' for q in statuses]
    if min_created_date_time is not None:
        query_parameters['minCreatedDateTime'] = _SERIALIZER.query("min_created_date_time", min_created_date_time, 'iso-8601')
    if max_created_date_time is not None:
        query_parameters['maxCreatedDateTime'] = _SERIALIZER.query("max_created_date_time", max_created_date_time, 'iso-8601')
    if min_last_modified_date_time is not None:
        query_parameters['minLastModifiedDateTime'] = _SERIALIZER.query("min_last_modified_date_time", min_last_modified_date_time, 'iso-8601')
    if max_last_modified_date_time is not None:
        query_parameters['maxLastModifiedDateTime'] = _SERIALIZER.query("max_last_modified_date_time", max_last_modified_date_time, 'iso-8601')
    if max_page_size is not None:
        query_parameters['$maxPageSize'] = _SERIALIZER.query("max_page_size", max_page_size, 'int', maximum=1000, minimum=10)
    if skip_token is not None:
        query_parameters['$skipToken'] = _SERIALIZER.query("skip_token", skip_token, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Returns a paginated list of tillage data resources across all farmers.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword min_tillage_depth: Minimum measured tillage depth (inclusive).
    :paramtype min_tillage_depth: float
    :keyword max_tillage_depth: Maximum measured tillage depth (inclusive).
    :paramtype max_tillage_depth: float
    :keyword min_tillage_pressure: Minimum downforce applied to a tillage implement (inclusive).
    :paramtype min_tillage_pressure: float
    :keyword max_tillage_pressure: Maximum downforce applied to a tillage implement (inclusive).
    :paramtype max_tillage_pressure: float
    :keyword sources: Sources of the operation data.
    :paramtype sources: list[str]
    :keyword associated_boundary_ids: Boundary IDs associated with operation data.
    :paramtype associated_boundary_ids: list[str]
    :keyword operation_boundary_ids: Operation boundary IDs associated with operation data.
    :paramtype operation_boundary_ids: list[str]
    :keyword min_operation_start_date_time: Minimum start date-time of the operation data, sample
     format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype min_operation_start_date_time: ~datetime.datetime
    :keyword max_operation_start_date_time: Maximum start date-time of the operation data, sample
     format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype max_operation_start_date_time: ~datetime.datetime
    :keyword min_operation_end_date_time: Minimum end date-time of the operation data, sample
     format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype min_operation_end_date_time: ~datetime.datetime
    :keyword max_operation_end_date_time: Maximum end date-time of the operation data, sample
     format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype max_operation_end_date_time: ~datetime.datetime
    :keyword min_operation_modified_date_time: Minimum modified date-time of the operation data,
     sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype min_operation_modified_date_time: ~datetime.datetime
    :keyword max_operation_modified_date_time: Maximum modified date-time of the operation data,
     sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
    :paramtype max_operation_modified_date_time: ~datetime.datetime
    :keyword min_area: Minimum area for which operation was applied (inclusive).
    :paramtype min_area: float
    :keyword max_area: Maximum area for which operation was applied (inclusive).
    :paramtype max_area: float
    :keyword ids: Ids of the resource.
    :paramtype ids: list[str]
    :keyword names: Names of the resource.
    :paramtype names: list[str]
    :keyword property_filters: Filters on key-value pairs within the Properties object.
     eg. "{testkey} eq {testvalue}".
    :paramtype property_filters: list[str]
    :keyword statuses: Statuses of the resource.
    :paramtype statuses: list[str]
    :keyword min_created_date_time: Minimum creation date of resource (inclusive).
    :paramtype min_created_date_time: ~datetime.datetime
    :keyword max_created_date_time: Maximum creation date of resource (inclusive).
    :paramtype max_created_date_time: ~datetime.datetime
    :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
    :paramtype min_last_modified_date_time: ~datetime.datetime
    :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
    :paramtype max_last_modified_date_time: ~datetime.datetime
    :keyword max_page_size: Maximum number of items needed (inclusive).
     Minimum = 10, Maximum = 1000, Default value = 50.
    :paramtype max_page_size: int
    :keyword skip_token: Skip token for getting next set of results.
    :paramtype skip_token: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response_body == {
                "$skipToken": "str (optional)",
                "nextLink": "str (optional)",
                "value": [
                    {
                        "area": {
                            "unit": "str (optional)",
                            "value": "float (optional)"
                        },
                        "associatedBoundaryId": "str (optional)",
                        "attachmentsLink": "str (optional)",
                        "createdDateTime": "datetime (optional)",
                        "description": "str (optional)",
                        "eTag": "str (optional)",
                        "farmerId": "str (optional)",
                        "id": "str (optional)",
                        "modifiedDateTime": "datetime (optional)",
                        "name": "str (optional)",
                        "operationBoundaryId": "str (optional)",
                        "operationEndDateTime": "datetime (optional)",
                        "operationModifiedDateTime": "datetime (optional)",
                        "operationStartDateTime": "datetime (optional)",
                        "properties": {
                            "str": "object (optional)"
                        },
                        "source": "str (optional)",
                        "status": "str (optional)",
                        "tillageDepth": {
                            "unit": "str (optional)",
                            "value": "float (optional)"
                        },
                        "tillagePressure": {
                            "unit": "str (optional)",
                            "value": "float (optional)"
                        }
                    }
                ]
            }

    """
    min_tillage_depth = kwargs.pop('min_tillage_depth', None)  # type: Optional[float]
    max_tillage_depth = kwargs.pop('max_tillage_depth', None)  # type: Optional[float]
    min_tillage_pressure = kwargs.pop('min_tillage_pressure', None)  # type: Optional[float]
    max_tillage_pressure = kwargs.pop('max_tillage_pressure', None)  # type: Optional[float]
    sources = kwargs.pop('sources', None)  # type: Optional[List[str]]
    associated_boundary_ids = kwargs.pop('associated_boundary_ids', None)  # type: Optional[List[str]]
    operation_boundary_ids = kwargs.pop('operation_boundary_ids', None)  # type: Optional[List[str]]
    min_operation_start_date_time = kwargs.pop('min_operation_start_date_time', None)  # type: Optional[datetime.datetime]
    max_operation_start_date_time = kwargs.pop('max_operation_start_date_time', None)  # type: Optional[datetime.datetime]
    min_operation_end_date_time = kwargs.pop('min_operation_end_date_time', None)  # type: Optional[datetime.datetime]
    max_operation_end_date_time = kwargs.pop('max_operation_end_date_time', None)  # type: Optional[datetime.datetime]
    min_operation_modified_date_time = kwargs.pop('min_operation_modified_date_time', None)  # type: Optional[datetime.datetime]
    max_operation_modified_date_time = kwargs.pop('max_operation_modified_date_time', None)  # type: Optional[datetime.datetime]
    min_area = kwargs.pop('min_area', None)  # type: Optional[float]
    max_area = kwargs.pop('max_area', None)  # type: Optional[float]
    ids = kwargs.pop('ids', None)  # type: Optional[List[str]]
    names = kwargs.pop('names', None)  # type: Optional[List[str]]
    property_filters = kwargs.pop('property_filters', None)  # type: Optional[List[str]]
    statuses = kwargs.pop('statuses', None)  # type: Optional[List[str]]
    min_created_date_time = kwargs.pop('min_created_date_time', None)  # type: Optional[datetime.datetime]
    max_created_date_time = kwargs.pop('max_created_date_time', None)  # type: Optional[datetime.datetime]
    min_last_modified_date_time = kwargs.pop('min_last_modified_date_time', None)  # type: Optional[datetime.datetime]
    max_last_modified_date_time = kwargs.pop('max_last_modified_date_time', None)  # type: Optional[datetime.datetime]
    max_page_size = kwargs.pop('max_page_size', 50)  # type: Optional[int]
    skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/tillage-data')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if min_tillage_depth is not None:
        query_parameters['minTillageDepth'] = _SERIALIZER.query("min_tillage_depth", min_tillage_depth, 'float')
    if max_tillage_depth is not None:
        query_parameters['maxTillageDepth'] = _SERIALIZER.query("max_tillage_depth", max_tillage_depth, 'float')
    if min_tillage_pressure is not None:
        query_parameters['minTillagePressure'] = _SERIALIZER.query("min_tillage_pressure", min_tillage_pressure, 'float')
    if max_tillage_pressure is not None:
        query_parameters['maxTillagePressure'] = _SERIALIZER.query("max_tillage_pressure", max_tillage_pressure, 'float')
    if sources is not None:
        query_parameters['sources'] = [_SERIALIZER.query("sources", q, 'str') if q is not None else '' for q in sources]
    if associated_boundary_ids is not None:
        query_parameters['associatedBoundaryIds'] = [_SERIALIZER.query("associated_boundary_ids", q, 'str') if q is not None else '' for q in associated_boundary_ids]
    if operation_boundary_ids is not None:
        query_parameters['operationBoundaryIds'] = [_SERIALIZER.query("operation_boundary_ids", q, 'str') if q is not None else '' for q in operation_boundary_ids]
    if min_operation_start_date_time is not None:
        query_parameters['minOperationStartDateTime'] = _SERIALIZER.query("min_operation_start_date_time", min_operation_start_date_time, 'iso-8601')
    if max_operation_start_date_time is not None:
        query_parameters['maxOperationStartDateTime'] = _SERIALIZER.query("max_operation_start_date_time", max_operation_start_date_time, 'iso-8601')
    if min_operation_end_date_time is not None:
        query_parameters['minOperationEndDateTime'] = _SERIALIZER.query("min_operation_end_date_time", min_operation_end_date_time, 'iso-8601')
    if max_operation_end_date_time is not None:
        query_parameters['maxOperationEndDateTime'] = _SERIALIZER.query("max_operation_end_date_time", max_operation_end_date_time, 'iso-8601')
    if min_operation_modified_date_time is not None:
        query_parameters['minOperationModifiedDateTime'] = _SERIALIZER.query("min_operation_modified_date_time", min_operation_modified_date_time, 'iso-8601')
    if max_operation_modified_date_time is not None:
        query_parameters['maxOperationModifiedDateTime'] = _SERIALIZER.query("max_operation_modified_date_time", max_operation_modified_date_time, 'iso-8601')
    if min_area is not None:
        query_parameters['minArea'] = _SERIALIZER.query("min_area", min_area, 'float')
    if max_area is not None:
        query_parameters['maxArea'] = _SERIALIZER.query("max_area", max_area, 'float')
    if ids is not None:
        query_parameters['ids'] = [_SERIALIZER.query("ids", q, 'str') if q is not None else '' for q in ids]
    if names is not None:
        query_parameters['names'] = [_SERIALIZER.query("names", q, 'str') if q is not None else '' for q in names]
    if property_filters is not None:
        query_parameters['propertyFilters'] = [_SERIALIZER.query("property_filters", q, 'str') if q is not None else '' for q in property_filters]
    if statuses is not None:
        query_parameters['statuses'] = [_SERIALIZER.query("statuses", q, 'str') if q is not None else '' for q in statuses]
    if min_created_date_time is not None:
        query_parameters['minCreatedDateTime'] = _SERIALIZER.query("min_created_date_time", min_created_date_time, 'iso-8601')
    if max_created_date_time is not None:
        query_parameters['maxCreatedDateTime'] = _SERIALIZER.query("max_created_date_time", max_created_date_time, 'iso-8601')
    if min_last_modified_date_time is not None:
        query_parameters['minLastModifiedDateTime'] = _SERIALIZER.query("min_last_modified_date_time", min_last_modified_date_time, 'iso-8601')
    if max_last_modified_date_time is not None:
        query_parameters['maxLastModifiedDateTime'] = _SERIALIZER.query("max_last_modified_date_time", max_last_modified_date_time, 'iso-8601')
    if max_page_size is not None:
        query_parameters['$maxPageSize'] = _SERIALIZER.query("max_page_size", max_page_size, 'int', maximum=1000, minimum=10)
    if skip_token is not None:
        query_parameters['$skipToken'] = _SERIALIZER.query("skip_token", skip_token, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_request(
    farmer_id,  # type: str
    tillage_data_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get a specified tillage data resource under a particular farmer.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param farmer_id: ID of the associated farmer resource.
    :type farmer_id: str
    :param tillage_data_id: ID of the tillage data resource.
    :type tillage_data_id: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response_body == {
                "area": {
                    "unit": "str (optional)",
                    "value": "float (optional)"
                },
                "associatedBoundaryId": "str (optional)",
                "attachmentsLink": "str (optional)",
                "createdDateTime": "datetime (optional)",
                "description": "str (optional)",
                "eTag": "str (optional)",
                "farmerId": "str (optional)",
                "id": "str (optional)",
                "modifiedDateTime": "datetime (optional)",
                "name": "str (optional)",
                "operationBoundaryId": "str (optional)",
                "operationEndDateTime": "datetime (optional)",
                "operationModifiedDateTime": "datetime (optional)",
                "operationStartDateTime": "datetime (optional)",
                "properties": {
                    "str": "object (optional)"
                },
                "source": "str (optional)",
                "status": "str (optional)",
                "tillageDepth": {
                    "unit": "str (optional)",
                    "value": "float (optional)"
                },
                "tillagePressure": {
                    "unit": "str (optional)",
                    "value": "float (optional)"
                }
            }

    """
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/farmers/{farmerId}/tillage-data/{tillageDataId}')
    path_format_arguments = {
        'farmerId': _SERIALIZER.url("farmer_id", farmer_id, 'str'),
        'tillageDataId': _SERIALIZER.url("tillage_data_id", tillage_data_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_request(
    farmer_id,  # type: str
    tillage_data_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Creates or updates an tillage data resource under a particular farmer.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param farmer_id: ID of the associated farmer.
    :type farmer_id: str
    :param tillage_data_id: ID of the tillage data resource.
    :type tillage_data_id: str
    :keyword json: Tillage data resource payload to create or update.
    :paramtype json: Any
    :keyword content: Tillage data resource payload to create or update.
    :paramtype content: Any
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "area": {
                    "unit": "str (optional)",
                    "value": "float (optional)"
                },
                "associatedBoundaryId": "str (optional)",
                "attachmentsLink": "str (optional)",
                "createdDateTime": "datetime (optional)",
                "description": "str (optional)",
                "eTag": "str (optional)",
                "farmerId": "str (optional)",
                "id": "str (optional)",
                "modifiedDateTime": "datetime (optional)",
                "name": "str (optional)",
                "operationBoundaryId": "str (optional)",
                "operationEndDateTime": "datetime (optional)",
                "operationModifiedDateTime": "datetime (optional)",
                "operationStartDateTime": "datetime (optional)",
                "properties": {
                    "str": "object (optional)"
                },
                "source": "str (optional)",
                "status": "str (optional)",
                "tillageDepth": {
                    "unit": "str (optional)",
                    "value": "float (optional)"
                },
                "tillagePressure": {
                    "unit": "str (optional)",
                    "value": "float (optional)"
                }
            }

    """
    content_type = kwargs.pop("content_type", None)
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/farmers/{farmerId}/tillage-data/{tillageDataId}')
    path_format_arguments = {
        'farmerId': _SERIALIZER.url("farmer_id", farmer_id, 'str'),
        'tillageDataId': _SERIALIZER.url("tillage_data_id", tillage_data_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_delete_request(
    farmer_id,  # type: str
    tillage_data_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Deletes a specified tillage data resource under a particular farmer.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param farmer_id: ID of the associated farmer resource.
    :type farmer_id: str
    :param tillage_data_id: ID of the tillage data.
    :type tillage_data_id: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest
    """
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/farmers/{farmerId}/tillage-data/{tillageDataId}')
    path_format_arguments = {
        'farmerId': _SERIALIZER.url("farmer_id", farmer_id, 'str'),
        'tillageDataId': _SERIALIZER.url("tillage_data_id", tillage_data_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

