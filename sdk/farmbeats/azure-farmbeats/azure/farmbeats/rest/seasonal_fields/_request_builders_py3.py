# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.farmbeats.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

_SERIALIZER = Serializer()


def build_list_by_farmer_id_request(
    farmer_id: str,
    *,
    farm_ids: Optional[List[str]] = None,
    field_ids: Optional[List[str]] = None,
    season_ids: Optional[List[str]] = None,
    crop_variety_ids: Optional[List[str]] = None,
    crop_ids: Optional[List[str]] = None,
    min_avg_yield_value: Optional[float] = None,
    max_avg_yield_value: Optional[float] = None,
    avg_yield_unit: Optional[str] = None,
    min_avg_seed_population_value: Optional[float] = None,
    max_avg_seed_population_value: Optional[float] = None,
    avg_seed_population_unit: Optional[str] = None,
    min_planting_date_time: Optional[datetime.datetime] = None,
    max_planting_date_time: Optional[datetime.datetime] = None,
    ids: Optional[List[str]] = None,
    names: Optional[List[str]] = None,
    property_filters: Optional[List[str]] = None,
    statuses: Optional[List[str]] = None,
    min_created_date_time: Optional[datetime.datetime] = None,
    max_created_date_time: Optional[datetime.datetime] = None,
    min_last_modified_date_time: Optional[datetime.datetime] = None,
    max_last_modified_date_time: Optional[datetime.datetime] = None,
    max_page_size: Optional[int] = 50,
    skip_token: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Returns a paginated list of seasonal field resources under a particular farmer.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param farmer_id: Id of the associated farmer.
    :type farmer_id: str
    :keyword farm_ids: Farm Ids of the resource.
    :paramtype farm_ids: list[str]
    :keyword field_ids: Field Ids of the resource.
    :paramtype field_ids: list[str]
    :keyword season_ids: Season Ids of the resource.
    :paramtype season_ids: list[str]
    :keyword crop_variety_ids: CropVarietyIds of the resource.
    :paramtype crop_variety_ids: list[str]
    :keyword crop_ids: Ids of the crop it belongs to.
    :paramtype crop_ids: list[str]
    :keyword min_avg_yield_value: Minimum average yield value of the seasonal field(inclusive).
    :paramtype min_avg_yield_value: float
    :keyword max_avg_yield_value: Maximum average yield value of the seasonal field(inclusive).
    :paramtype max_avg_yield_value: float
    :keyword avg_yield_unit: Unit of the average yield value attribute.
    :paramtype avg_yield_unit: str
    :keyword min_avg_seed_population_value: Minimum average seed population value of the seasonal
     field(inclusive).
    :paramtype min_avg_seed_population_value: float
    :keyword max_avg_seed_population_value: Maximum average seed population value of the seasonal
     field(inclusive).
    :paramtype max_avg_seed_population_value: float
    :keyword avg_seed_population_unit: Unit of average seed population value attribute.
    :paramtype avg_seed_population_unit: str
    :keyword min_planting_date_time: Minimum planting datetime, sample format: yyyy-MM-
     ddTHH:mm:ssZ.
    :paramtype min_planting_date_time: ~datetime.datetime
    :keyword max_planting_date_time: Maximum planting datetime, sample format: yyyy-MM-
     ddTHH:mm:ssZ.
    :paramtype max_planting_date_time: ~datetime.datetime
    :keyword ids: Ids of the resource.
    :paramtype ids: list[str]
    :keyword names: Names of the resource.
    :paramtype names: list[str]
    :keyword property_filters: Filters on key-value pairs within the Properties object.
     eg. "{testKey} eq {testValue}".
    :paramtype property_filters: list[str]
    :keyword statuses: Statuses of the resource.
    :paramtype statuses: list[str]
    :keyword min_created_date_time: Minimum creation date of resource (inclusive).
    :paramtype min_created_date_time: ~datetime.datetime
    :keyword max_created_date_time: Maximum creation date of resource (inclusive).
    :paramtype max_created_date_time: ~datetime.datetime
    :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
    :paramtype min_last_modified_date_time: ~datetime.datetime
    :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
    :paramtype max_last_modified_date_time: ~datetime.datetime
    :keyword max_page_size: Maximum number of items needed (inclusive).
     Minimum = 10, Maximum = 1000, Default value = 50.
    :paramtype max_page_size: int
    :keyword skip_token: Skip token for getting next set of results.
    :paramtype skip_token: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

    
            # response body for status code(s): 200
            response_body == {
                "$skipToken": "str (optional)",
                "nextLink": "str (optional)",
                "value": [
                    {
                        "avgSeedPopulationUnit": "str (optional)",
                        "avgSeedPopulationValue": "float (optional)",
                        "avgYieldUnit": "str (optional)",
                        "avgYieldValue": "float (optional)",
                        "boundaryIds": [
                            "str (optional)"
                        ],
                        "createdDateTime": "datetime (optional)",
                        "cropId": "str (optional)",
                        "cropVarietyIds": [
                            "str (optional)"
                        ],
                        "description": "str (optional)",
                        "eTag": "str (optional)",
                        "farmId": "str (optional)",
                        "farmerId": "str (optional)",
                        "fieldId": "str (optional)",
                        "id": "str (optional)",
                        "modifiedDateTime": "datetime (optional)",
                        "name": "str (optional)",
                        "plantingDateTime": "datetime (optional)",
                        "primaryBoundaryId": "str (optional)",
                        "properties": {
                            "str": "object (optional)"
                        },
                        "seasonId": "str (optional)",
                        "status": "str (optional)"
                    }
                ]
            }

    """
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/farmers/{farmerId}/seasonal-fields')
    path_format_arguments = {
        'farmerId': _SERIALIZER.url("farmer_id", farmer_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if farm_ids is not None:
        query_parameters['farmIds'] = [_SERIALIZER.query("farm_ids", q, 'str') if q is not None else '' for q in farm_ids]
    if field_ids is not None:
        query_parameters['fieldIds'] = [_SERIALIZER.query("field_ids", q, 'str') if q is not None else '' for q in field_ids]
    if season_ids is not None:
        query_parameters['seasonIds'] = [_SERIALIZER.query("season_ids", q, 'str') if q is not None else '' for q in season_ids]
    if crop_variety_ids is not None:
        query_parameters['cropVarietyIds'] = [_SERIALIZER.query("crop_variety_ids", q, 'str') if q is not None else '' for q in crop_variety_ids]
    if crop_ids is not None:
        query_parameters['cropIds'] = [_SERIALIZER.query("crop_ids", q, 'str') if q is not None else '' for q in crop_ids]
    if min_avg_yield_value is not None:
        query_parameters['minAvgYieldValue'] = _SERIALIZER.query("min_avg_yield_value", min_avg_yield_value, 'float')
    if max_avg_yield_value is not None:
        query_parameters['maxAvgYieldValue'] = _SERIALIZER.query("max_avg_yield_value", max_avg_yield_value, 'float')
    if avg_yield_unit is not None:
        query_parameters['avgYieldUnit'] = _SERIALIZER.query("avg_yield_unit", avg_yield_unit, 'str')
    if min_avg_seed_population_value is not None:
        query_parameters['minAvgSeedPopulationValue'] = _SERIALIZER.query("min_avg_seed_population_value", min_avg_seed_population_value, 'float')
    if max_avg_seed_population_value is not None:
        query_parameters['maxAvgSeedPopulationValue'] = _SERIALIZER.query("max_avg_seed_population_value", max_avg_seed_population_value, 'float')
    if avg_seed_population_unit is not None:
        query_parameters['avgSeedPopulationUnit'] = _SERIALIZER.query("avg_seed_population_unit", avg_seed_population_unit, 'str')
    if min_planting_date_time is not None:
        query_parameters['minPlantingDateTime'] = _SERIALIZER.query("min_planting_date_time", min_planting_date_time, 'iso-8601')
    if max_planting_date_time is not None:
        query_parameters['maxPlantingDateTime'] = _SERIALIZER.query("max_planting_date_time", max_planting_date_time, 'iso-8601')
    if ids is not None:
        query_parameters['ids'] = [_SERIALIZER.query("ids", q, 'str') if q is not None else '' for q in ids]
    if names is not None:
        query_parameters['names'] = [_SERIALIZER.query("names", q, 'str') if q is not None else '' for q in names]
    if property_filters is not None:
        query_parameters['propertyFilters'] = [_SERIALIZER.query("property_filters", q, 'str') if q is not None else '' for q in property_filters]
    if statuses is not None:
        query_parameters['statuses'] = [_SERIALIZER.query("statuses", q, 'str') if q is not None else '' for q in statuses]
    if min_created_date_time is not None:
        query_parameters['minCreatedDateTime'] = _SERIALIZER.query("min_created_date_time", min_created_date_time, 'iso-8601')
    if max_created_date_time is not None:
        query_parameters['maxCreatedDateTime'] = _SERIALIZER.query("max_created_date_time", max_created_date_time, 'iso-8601')
    if min_last_modified_date_time is not None:
        query_parameters['minLastModifiedDateTime'] = _SERIALIZER.query("min_last_modified_date_time", min_last_modified_date_time, 'iso-8601')
    if max_last_modified_date_time is not None:
        query_parameters['maxLastModifiedDateTime'] = _SERIALIZER.query("max_last_modified_date_time", max_last_modified_date_time, 'iso-8601')
    if max_page_size is not None:
        query_parameters['$maxPageSize'] = _SERIALIZER.query("max_page_size", max_page_size, 'int', maximum=1000, minimum=10)
    if skip_token is not None:
        query_parameters['$skipToken'] = _SERIALIZER.query("skip_token", skip_token, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_request(
    *,
    farm_ids: Optional[List[str]] = None,
    field_ids: Optional[List[str]] = None,
    season_ids: Optional[List[str]] = None,
    crop_variety_ids: Optional[List[str]] = None,
    crop_ids: Optional[List[str]] = None,
    min_avg_yield_value: Optional[float] = None,
    max_avg_yield_value: Optional[float] = None,
    avg_yield_unit: Optional[str] = None,
    min_avg_seed_population_value: Optional[float] = None,
    max_avg_seed_population_value: Optional[float] = None,
    avg_seed_population_unit: Optional[str] = None,
    min_planting_date_time: Optional[datetime.datetime] = None,
    max_planting_date_time: Optional[datetime.datetime] = None,
    ids: Optional[List[str]] = None,
    names: Optional[List[str]] = None,
    property_filters: Optional[List[str]] = None,
    statuses: Optional[List[str]] = None,
    min_created_date_time: Optional[datetime.datetime] = None,
    max_created_date_time: Optional[datetime.datetime] = None,
    min_last_modified_date_time: Optional[datetime.datetime] = None,
    max_last_modified_date_time: Optional[datetime.datetime] = None,
    max_page_size: Optional[int] = 50,
    skip_token: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """Returns a paginated list of seasonal field resources across all farmers.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :keyword farm_ids: Farm Ids of the resource.
    :paramtype farm_ids: list[str]
    :keyword field_ids: Field Ids of the resource.
    :paramtype field_ids: list[str]
    :keyword season_ids: Season Ids of the resource.
    :paramtype season_ids: list[str]
    :keyword crop_variety_ids: CropVarietyIds of the resource.
    :paramtype crop_variety_ids: list[str]
    :keyword crop_ids: Ids of the crop it belongs to.
    :paramtype crop_ids: list[str]
    :keyword min_avg_yield_value: Minimum average yield value of the seasonal field(inclusive).
    :paramtype min_avg_yield_value: float
    :keyword max_avg_yield_value: Maximum average yield value of the seasonal field(inclusive).
    :paramtype max_avg_yield_value: float
    :keyword avg_yield_unit: Unit of the average yield value attribute.
    :paramtype avg_yield_unit: str
    :keyword min_avg_seed_population_value: Minimum average seed population value of the seasonal
     field(inclusive).
    :paramtype min_avg_seed_population_value: float
    :keyword max_avg_seed_population_value: Maximum average seed population value of the seasonal
     field(inclusive).
    :paramtype max_avg_seed_population_value: float
    :keyword avg_seed_population_unit: Unit of average seed population value attribute.
    :paramtype avg_seed_population_unit: str
    :keyword min_planting_date_time: Minimum planting datetime, sample format: yyyy-MM-
     ddTHH:mm:ssZ.
    :paramtype min_planting_date_time: ~datetime.datetime
    :keyword max_planting_date_time: Maximum planting datetime, sample format: yyyy-MM-
     ddTHH:mm:ssZ.
    :paramtype max_planting_date_time: ~datetime.datetime
    :keyword ids: Ids of the resource.
    :paramtype ids: list[str]
    :keyword names: Names of the resource.
    :paramtype names: list[str]
    :keyword property_filters: Filters on key-value pairs within the Properties object.
     eg. "{testKey} eq {testValue}".
    :paramtype property_filters: list[str]
    :keyword statuses: Statuses of the resource.
    :paramtype statuses: list[str]
    :keyword min_created_date_time: Minimum creation date of resource (inclusive).
    :paramtype min_created_date_time: ~datetime.datetime
    :keyword max_created_date_time: Maximum creation date of resource (inclusive).
    :paramtype max_created_date_time: ~datetime.datetime
    :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
    :paramtype min_last_modified_date_time: ~datetime.datetime
    :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
    :paramtype max_last_modified_date_time: ~datetime.datetime
    :keyword max_page_size: Maximum number of items needed (inclusive).
     Minimum = 10, Maximum = 1000, Default value = 50.
    :paramtype max_page_size: int
    :keyword skip_token: Skip token for getting next set of results.
    :paramtype skip_token: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

    
            # response body for status code(s): 200
            response_body == {
                "$skipToken": "str (optional)",
                "nextLink": "str (optional)",
                "value": [
                    {
                        "avgSeedPopulationUnit": "str (optional)",
                        "avgSeedPopulationValue": "float (optional)",
                        "avgYieldUnit": "str (optional)",
                        "avgYieldValue": "float (optional)",
                        "boundaryIds": [
                            "str (optional)"
                        ],
                        "createdDateTime": "datetime (optional)",
                        "cropId": "str (optional)",
                        "cropVarietyIds": [
                            "str (optional)"
                        ],
                        "description": "str (optional)",
                        "eTag": "str (optional)",
                        "farmId": "str (optional)",
                        "farmerId": "str (optional)",
                        "fieldId": "str (optional)",
                        "id": "str (optional)",
                        "modifiedDateTime": "datetime (optional)",
                        "name": "str (optional)",
                        "plantingDateTime": "datetime (optional)",
                        "primaryBoundaryId": "str (optional)",
                        "properties": {
                            "str": "object (optional)"
                        },
                        "seasonId": "str (optional)",
                        "status": "str (optional)"
                    }
                ]
            }

    """
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/seasonal-fields')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if farm_ids is not None:
        query_parameters['farmIds'] = [_SERIALIZER.query("farm_ids", q, 'str') if q is not None else '' for q in farm_ids]
    if field_ids is not None:
        query_parameters['fieldIds'] = [_SERIALIZER.query("field_ids", q, 'str') if q is not None else '' for q in field_ids]
    if season_ids is not None:
        query_parameters['seasonIds'] = [_SERIALIZER.query("season_ids", q, 'str') if q is not None else '' for q in season_ids]
    if crop_variety_ids is not None:
        query_parameters['cropVarietyIds'] = [_SERIALIZER.query("crop_variety_ids", q, 'str') if q is not None else '' for q in crop_variety_ids]
    if crop_ids is not None:
        query_parameters['cropIds'] = [_SERIALIZER.query("crop_ids", q, 'str') if q is not None else '' for q in crop_ids]
    if min_avg_yield_value is not None:
        query_parameters['minAvgYieldValue'] = _SERIALIZER.query("min_avg_yield_value", min_avg_yield_value, 'float')
    if max_avg_yield_value is not None:
        query_parameters['maxAvgYieldValue'] = _SERIALIZER.query("max_avg_yield_value", max_avg_yield_value, 'float')
    if avg_yield_unit is not None:
        query_parameters['avgYieldUnit'] = _SERIALIZER.query("avg_yield_unit", avg_yield_unit, 'str')
    if min_avg_seed_population_value is not None:
        query_parameters['minAvgSeedPopulationValue'] = _SERIALIZER.query("min_avg_seed_population_value", min_avg_seed_population_value, 'float')
    if max_avg_seed_population_value is not None:
        query_parameters['maxAvgSeedPopulationValue'] = _SERIALIZER.query("max_avg_seed_population_value", max_avg_seed_population_value, 'float')
    if avg_seed_population_unit is not None:
        query_parameters['avgSeedPopulationUnit'] = _SERIALIZER.query("avg_seed_population_unit", avg_seed_population_unit, 'str')
    if min_planting_date_time is not None:
        query_parameters['minPlantingDateTime'] = _SERIALIZER.query("min_planting_date_time", min_planting_date_time, 'iso-8601')
    if max_planting_date_time is not None:
        query_parameters['maxPlantingDateTime'] = _SERIALIZER.query("max_planting_date_time", max_planting_date_time, 'iso-8601')
    if ids is not None:
        query_parameters['ids'] = [_SERIALIZER.query("ids", q, 'str') if q is not None else '' for q in ids]
    if names is not None:
        query_parameters['names'] = [_SERIALIZER.query("names", q, 'str') if q is not None else '' for q in names]
    if property_filters is not None:
        query_parameters['propertyFilters'] = [_SERIALIZER.query("property_filters", q, 'str') if q is not None else '' for q in property_filters]
    if statuses is not None:
        query_parameters['statuses'] = [_SERIALIZER.query("statuses", q, 'str') if q is not None else '' for q in statuses]
    if min_created_date_time is not None:
        query_parameters['minCreatedDateTime'] = _SERIALIZER.query("min_created_date_time", min_created_date_time, 'iso-8601')
    if max_created_date_time is not None:
        query_parameters['maxCreatedDateTime'] = _SERIALIZER.query("max_created_date_time", max_created_date_time, 'iso-8601')
    if min_last_modified_date_time is not None:
        query_parameters['minLastModifiedDateTime'] = _SERIALIZER.query("min_last_modified_date_time", min_last_modified_date_time, 'iso-8601')
    if max_last_modified_date_time is not None:
        query_parameters['maxLastModifiedDateTime'] = _SERIALIZER.query("max_last_modified_date_time", max_last_modified_date_time, 'iso-8601')
    if max_page_size is not None:
        query_parameters['$maxPageSize'] = _SERIALIZER.query("max_page_size", max_page_size, 'int', maximum=1000, minimum=10)
    if skip_token is not None:
        query_parameters['$skipToken'] = _SERIALIZER.query("skip_token", skip_token, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_request(
    farmer_id: str,
    seasonal_field_id: str,
    **kwargs: Any
) -> HttpRequest:
    """Gets a specified seasonal field resource under a particular farmer.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param farmer_id: Id of the associated farmer.
    :type farmer_id: str
    :param seasonal_field_id: Id of the seasonal field.
    :type seasonal_field_id: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

    
            # response body for status code(s): 200
            response_body == {
                "avgSeedPopulationUnit": "str (optional)",
                "avgSeedPopulationValue": "float (optional)",
                "avgYieldUnit": "str (optional)",
                "avgYieldValue": "float (optional)",
                "boundaryIds": [
                    "str (optional)"
                ],
                "createdDateTime": "datetime (optional)",
                "cropId": "str (optional)",
                "cropVarietyIds": [
                    "str (optional)"
                ],
                "description": "str (optional)",
                "eTag": "str (optional)",
                "farmId": "str (optional)",
                "farmerId": "str (optional)",
                "fieldId": "str (optional)",
                "id": "str (optional)",
                "modifiedDateTime": "datetime (optional)",
                "name": "str (optional)",
                "plantingDateTime": "datetime (optional)",
                "primaryBoundaryId": "str (optional)",
                "properties": {
                    "str": "object (optional)"
                },
                "seasonId": "str (optional)",
                "status": "str (optional)"
            }

    """
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/farmers/{farmerId}/seasonal-fields/{seasonalFieldId}')
    path_format_arguments = {
        'farmerId': _SERIALIZER.url("farmer_id", farmer_id, 'str'),
        'seasonalFieldId': _SERIALIZER.url("seasonal_field_id", seasonal_field_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_request(
    farmer_id: str,
    seasonal_field_id: str,
    *,
    json: Any = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Creates or Updates a seasonal field resource under a particular farmer.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param farmer_id: Id of the associated farmer resource.
    :type farmer_id: str
    :param seasonal_field_id: Id of the seasonal field resource.
    :type seasonal_field_id: str
    :keyword json: Seasonal field resource payload to create or update.
    :paramtype json: Any
    :keyword content: Seasonal field resource payload to create or update.
    :paramtype content: Any
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

    
            # JSON input template you can fill out and use as your `json` input.
            json = {
                "avgSeedPopulationUnit": "str (optional)",
                "avgSeedPopulationValue": "float (optional)",
                "avgYieldUnit": "str (optional)",
                "avgYieldValue": "float (optional)",
                "boundaryIds": [
                    "str (optional)"
                ],
                "createdDateTime": "datetime (optional)",
                "cropId": "str (optional)",
                "cropVarietyIds": [
                    "str (optional)"
                ],
                "description": "str (optional)",
                "eTag": "str (optional)",
                "farmId": "str (optional)",
                "farmerId": "str (optional)",
                "fieldId": "str (optional)",
                "id": "str (optional)",
                "modifiedDateTime": "datetime (optional)",
                "name": "str (optional)",
                "plantingDateTime": "datetime (optional)",
                "primaryBoundaryId": "str (optional)",
                "properties": {
                    "str": "object (optional)"
                },
                "seasonId": "str (optional)",
                "status": "str (optional)"
            }

    
            # response body for status code(s): 200, 201
            response_body == {
                "avgSeedPopulationUnit": "str (optional)",
                "avgSeedPopulationValue": "float (optional)",
                "avgYieldUnit": "str (optional)",
                "avgYieldValue": "float (optional)",
                "boundaryIds": [
                    "str (optional)"
                ],
                "createdDateTime": "datetime (optional)",
                "cropId": "str (optional)",
                "cropVarietyIds": [
                    "str (optional)"
                ],
                "description": "str (optional)",
                "eTag": "str (optional)",
                "farmId": "str (optional)",
                "farmerId": "str (optional)",
                "fieldId": "str (optional)",
                "id": "str (optional)",
                "modifiedDateTime": "datetime (optional)",
                "name": "str (optional)",
                "plantingDateTime": "datetime (optional)",
                "primaryBoundaryId": "str (optional)",
                "properties": {
                    "str": "object (optional)"
                },
                "seasonId": "str (optional)",
                "status": "str (optional)"
            }

    """
    content_type = kwargs.pop("content_type", None)
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/farmers/{farmerId}/seasonal-fields/{seasonalFieldId}')
    path_format_arguments = {
        'farmerId': _SERIALIZER.url("farmer_id", farmer_id, 'str'),
        'seasonalFieldId': _SERIALIZER.url("seasonal_field_id", seasonal_field_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_request(
    farmer_id: str,
    seasonal_field_id: str,
    **kwargs: Any
) -> HttpRequest:
    """Deletes a specified seasonal-field resource under a particular farmer.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param farmer_id: Id of the farmer.
    :type farmer_id: str
    :param seasonal_field_id: Id of the seasonal field.
    :type seasonal_field_id: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest
    """
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/farmers/{farmerId}/seasonal-fields/{seasonalFieldId}')
    path_format_arguments = {
        'farmerId': _SERIALIZER.url("farmer_id", farmer_id, 'str'),
        'seasonalFieldId': _SERIALIZER.url("seasonal_field_id", seasonal_field_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_cascade_delete_job_details_request(
    job_id: str,
    **kwargs: Any
) -> HttpRequest:
    """Get cascade delete job for specified seasonal field.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param job_id: Id of the job.
    :type job_id: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

    
            # response body for status code(s): 200
            response_body == {
                "createdDateTime": "datetime (optional)",
                "description": "str (optional)",
                "durationInSeconds": "str (optional)",
                "endTime": "datetime (optional)",
                "farmerId": "str",
                "id": "str (optional)",
                "lastActionDateTime": "datetime (optional)",
                "message": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "str": "object (optional)"
                },
                "resourceId": "str",
                "resourceType": "str",
                "startTime": "datetime (optional)",
                "status": "str (optional)"
            }

    """
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/seasonal-fields/cascade-delete/{jobId}')
    path_format_arguments = {
        'jobId': _SERIALIZER.url("job_id", job_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_cascade_delete_job_request_initial(
    job_id: str,
    *,
    farmer_id: str,
    seasonal_field_id: str,
    **kwargs: Any
) -> HttpRequest:
    """Create a cascade delete job for specified seasonal field.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request builder into your code flow.

    :param job_id: Job ID supplied by end user.
    :type job_id: str
    :keyword farmer_id: ID of the associated farmer.
    :paramtype farmer_id: str
    :keyword seasonal_field_id: ID of the seasonalField to be deleted.
    :paramtype seasonal_field_id: str
    :return: Returns an :class:`~azure.farmbeats.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.farmbeats.core.rest.HttpRequest

    Example:
        .. code-block:: python

    
            # response body for status code(s): 202
            response_body == {
                "createdDateTime": "datetime (optional)",
                "description": "str (optional)",
                "durationInSeconds": "str (optional)",
                "endTime": "datetime (optional)",
                "farmerId": "str",
                "id": "str (optional)",
                "lastActionDateTime": "datetime (optional)",
                "message": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "str": "object (optional)"
                },
                "resourceId": "str",
                "resourceType": "str",
                "startTime": "datetime (optional)",
                "status": "str (optional)"
            }

    """
    api_version = "2021-03-31-preview"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/seasonal-fields/cascade-delete/{jobId}')
    path_format_arguments = {
        'jobId': _SERIALIZER.url("job_id", job_id, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['farmerId'] = _SERIALIZER.query("farmer_id", farmer_id, 'str')
    query_parameters['seasonalFieldId'] = _SERIALIZER.query("seasonal_field_id", seasonal_field_id, 'str')
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

