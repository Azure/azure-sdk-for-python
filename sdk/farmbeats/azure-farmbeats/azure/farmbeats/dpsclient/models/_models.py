# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6351, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class Boundary(msrest.serialization.Model):
    """Api Model for boundary object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar farmer_id: Farmer Id.
    :vartype farmer_id: str
    :param parent_id: Id of the parent(field or seasonalField) it belongs to.
    :type parent_id: str
    :param geometry: GeoJSON abstract class.
    :type geometry: ~dpsclient.models.GeoJsonObject
    :param is_primary: Is the boundary primary.
    :type is_primary: bool
    :ivar acreage: Boundary area in acres.
    :vartype acreage: float
    :ivar parent_type: Type of the parent it belongs to.
    :vartype parent_type: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'acreage': {'readonly': True},
        'parent_type': {'readonly': True},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'geometry': {'key': 'geometry', 'type': 'GeoJsonObject'},
        'is_primary': {'key': 'isPrimary', 'type': 'bool'},
        'acreage': {'key': 'acreage', 'type': 'float'},
        'parent_type': {'key': 'parentType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Boundary, self).__init__(**kwargs)
        self.farmer_id = None
        self.parent_id = kwargs.get('parent_id', None)
        self.geometry = kwargs.get('geometry', None)
        self.is_primary = kwargs.get('is_primary', None)
        self.acreage = None
        self.parent_type = None
        self.id = None
        self.status = kwargs.get('status', None)
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class BoundaryListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.Boundary]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Boundary]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BoundaryListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class CascadeDeleteJobRequest(msrest.serialization.Model):
    """CascadeDelete job request object.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Farmer Id.
    :type farmer_id: str
    :param resource_id: Required. The id of the resource.
    :type resource_id: str
    :param resource_type: Required. The type of the resource.
    :type resource_type: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'resource_id': {'required': True},
        'resource_type': {'required': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CascadeDeleteJobRequest, self).__init__(**kwargs)
        self.farmer_id = kwargs['farmer_id']
        self.resource_id = kwargs['resource_id']
        self.resource_type = kwargs['resource_type']
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class CascadeDeleteJobResponse(msrest.serialization.Model):
    """CascadeDelete job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param status: Status of the job.
    :type status: str
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CascadeDeleteJobResponse, self).__init__(**kwargs)
        self.duration = kwargs.get('duration', None)
        self.id = kwargs.get('id', None)
        self.status = kwargs.get('status', None)
        self.message = kwargs.get('message', None)
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class CascadeStatusUpdateJobRequest(msrest.serialization.Model):
    """Cascade status update job request object.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Farmer Id of the resource.
    :type farmer_id: str
    :param resource_id: Required. The id of the resource.
    :type resource_id: str
    :param resource_type: Required. The type of the resource.
    :type resource_type: str
    :param status: Required. Status of the resource to be updated.
    :type status: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'resource_id': {'required': True},
        'resource_type': {'required': True},
        'status': {'required': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CascadeStatusUpdateJobRequest, self).__init__(**kwargs)
        self.farmer_id = kwargs['farmer_id']
        self.resource_id = kwargs['resource_id']
        self.resource_type = kwargs['resource_type']
        self.status = kwargs['status']
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class CascadeStatusUpdateJobResponse(msrest.serialization.Model):
    """CascadeStatusUpdate job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param status: Status of the job.
    :type status: str
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CascadeStatusUpdateJobResponse, self).__init__(**kwargs)
        self.duration = kwargs.get('duration', None)
        self.id = kwargs.get('id', None)
        self.status = kwargs.get('status', None)
        self.message = kwargs.get('message', None)
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class Crop(msrest.serialization.Model):
    """Api Model for Crop object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param phenotype: Crop phenotype.
    :type phenotype: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'phenotype': {'max_length': 100, 'min_length': 2},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'phenotype': {'key': 'phenotype', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Crop, self).__init__(**kwargs)
        self.phenotype = kwargs.get('phenotype', None)
        self.id = None
        self.status = kwargs.get('status', None)
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class CropListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.Crop]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Crop]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CropListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class CropVariety(msrest.serialization.Model):
    """Api Model for CropVariety object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param crop_id: Required. Id of the crop it belongs to.
    :type crop_id: str
    :param brand: CropVariety Brand.
    :type brand: str
    :param product: CropVariety product.
    :type product: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'crop_id': {'required': True},
        'brand': {'max_length': 100, 'min_length': 2},
        'product': {'max_length': 100, 'min_length': 2},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'crop_id': {'key': 'cropId', 'type': 'str'},
        'brand': {'key': 'brand', 'type': 'str'},
        'product': {'key': 'product', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CropVariety, self).__init__(**kwargs)
        self.crop_id = kwargs['crop_id']
        self.brand = kwargs.get('brand', None)
        self.product = kwargs.get('product', None)
        self.id = None
        self.status = kwargs.get('status', None)
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class CropVarietyListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.CropVariety]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CropVariety]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CropVarietyListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class Farm(msrest.serialization.Model):
    """Api Model for Farm object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar farmer_id: Farmer Id.
    :vartype farmer_id: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Farm, self).__init__(**kwargs)
        self.farmer_id = None
        self.id = None
        self.status = kwargs.get('status', None)
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class Farmer(msrest.serialization.Model):
    """Api Model for Farmer object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Farmer, self).__init__(**kwargs)
        self.id = None
        self.status = kwargs.get('status', None)
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class FarmerListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.Farmer]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Farmer]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FarmerListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class FarmListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.Farm]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Farm]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FarmListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class Field(msrest.serialization.Model):
    """Api Model for field object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param farm_id: Id of the associated Farm.
    :type farm_id: str
    :ivar farmer_id: Farmer Id.
    :vartype farmer_id: str
    :ivar primary_boundary_id: Primary boundary id.
    :vartype primary_boundary_id: str
    :ivar boundary_ids: Boundary Ids.
    :vartype boundary_ids: list[str]
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'primary_boundary_id': {'readonly': True},
        'boundary_ids': {'readonly': True, 'unique': True},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'farm_id': {'key': 'farmId', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'primary_boundary_id': {'key': 'primaryBoundaryId', 'type': 'str'},
        'boundary_ids': {'key': 'boundaryIds', 'type': '[str]'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Field, self).__init__(**kwargs)
        self.farm_id = kwargs.get('farm_id', None)
        self.farmer_id = None
        self.primary_boundary_id = None
        self.boundary_ids = None
        self.id = None
        self.status = kwargs.get('status', None)
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class FieldListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.Field]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Field]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(FieldListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class GeoJsonObject(msrest.serialization.Model):
    """GeoJSON abstract class.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MultiPolygon, Polygon.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. GeoJSON object type.Constant filled by server.  Possible values include:
     "Polygon", "MultiPolygon".
    :type type: str or ~dpsclient.models.GeoJsonObjectType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'MultiPolygon': 'MultiPolygon', 'Polygon': 'Polygon'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GeoJsonObject, self).__init__(**kwargs)
        self.type = None  # type: Optional[str]


class ImageFileResponse(msrest.serialization.Model):
    """Scene ImageFile Response.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Image name.
    :type name: str
    :param image_format: ImageFormat for satellite data. Possible values include: "TIF".
    :type image_format: str or ~dpsclient.models.ImageFormat
    :param resolution: Resolution of image in meters.
    :type resolution: float
    :param file_link: ImageFile link.
    :type file_link: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'image_format': {'key': 'imageFormat', 'type': 'str'},
        'resolution': {'key': 'resolution', 'type': 'float'},
        'file_link': {'key': 'fileLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ImageFileResponse, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.image_format = kwargs.get('image_format', None)
        self.resolution = kwargs.get('resolution', None)
        self.file_link = kwargs.get('file_link', None)


class JobResponse(msrest.serialization.Model):
    """Generic job response. Useful for common job tasks like cancellation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param status: Status of the job.
    :type status: str
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobResponse, self).__init__(**kwargs)
        self.duration = kwargs.get('duration', None)
        self.id = kwargs.get('id', None)
        self.status = kwargs.get('status', None)
        self.message = kwargs.get('message', None)
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class Location(msrest.serialization.Model):
    """Location model class.

    All required parameters must be populated in order to send to Azure.

    :param latitude: Required. Latitude of the location.
    :type latitude: float
    :param longitude: Required. Longitude of the location.
    :type longitude: float
    """

    _validation = {
        'latitude': {'required': True, 'maximum': 90, 'minimum': -90},
        'longitude': {'required': True, 'maximum': 180, 'minimum': -180},
    }

    _attribute_map = {
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Location, self).__init__(**kwargs)
        self.latitude = kwargs['latitude']
        self.longitude = kwargs['longitude']


class MultiPolygon(GeoJsonObject):
    """MultiPolygon geometry.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. GeoJSON object type.Constant filled by server.  Possible values include:
     "Polygon", "MultiPolygon".
    :type type: str or ~dpsclient.models.GeoJsonObjectType
    :param coordinates: Required. Gets or sets Coordinates of GeoJSON Object.
     It must be an array of polygons, each polygon contains list of linear rings.
     For Polygons with more than one of these rings, the first MUST be the exterior ring,
     and any others MUST be interior rings.
    :type coordinates: list[list[list[list[float]]]]
    """

    _validation = {
        'type': {'required': True},
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'coordinates': {'key': 'coordinates', 'type': '[[[[float]]]]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MultiPolygon, self).__init__(**kwargs)
        self.type = 'MultiPolygon'  # type: str
        self.coordinates = kwargs['coordinates']


class Polygon(GeoJsonObject):
    """Polygon geometry.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. GeoJSON object type.Constant filled by server.  Possible values include:
     "Polygon", "MultiPolygon".
    :type type: str or ~dpsclient.models.GeoJsonObjectType
    :param coordinates: Required. Gets or sets type of the GeoJSON Object.
     It must be an array of linear ring coordinate arrays.
     For Polygons with more than one of these rings, the first MUST be the exterior ring,
     and any others MUST be interior rings.
    :type coordinates: list[list[list[float]]]
    """

    _validation = {
        'type': {'required': True},
        'coordinates': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'coordinates': {'key': 'coordinates', 'type': '[[[float]]]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Polygon, self).__init__(**kwargs)
        self.type = 'Polygon'  # type: str
        self.coordinates = kwargs['coordinates']


class SatelliteData(msrest.serialization.Model):
    """Data Model for SatelliteInjestionJobRequest.

    :param image_names: List of ImageNames.
    :type image_names: list[str or ~dpsclient.models.ImageName]
    :param image_formats: List of ImageFormats. Available value: TIF.
    :type image_formats: list[str or ~dpsclient.models.ImageFormat]
    :param image_resolutions: List of ImageResolutions in meters. Available value: 10/Ten.
    :type image_resolutions: list[str or ~dpsclient.models.ImageResolution]
    """

    _attribute_map = {
        'image_names': {'key': 'imageNames', 'type': '[str]'},
        'image_formats': {'key': 'imageFormats', 'type': '[str]'},
        'image_resolutions': {'key': 'imageResolutions', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SatelliteData, self).__init__(**kwargs)
        self.image_names = kwargs.get('image_names', None)
        self.image_formats = kwargs.get('image_formats', None)
        self.image_resolutions = kwargs.get('image_resolutions', None)


class SatelliteIngestionJobRequest(msrest.serialization.Model):
    """SatelliteIngestionJobRequest.

    All required parameters must be populated in order to send to Azure.

    :param farmer_id: Required. Farmer Id.
    :type farmer_id: str
    :param boundary_id: Required. The id of the boundary object for which satellite data is being
     fetched.
    :type boundary_id: str
    :param start_date: Required. Start Date.
    :type start_date: ~datetime.datetime
    :param end_date: Required. End Date.
    :type end_date: ~datetime.datetime
    :param provider: Provider of satellite data. Possible values include: "Microsoft".
    :type provider: str or ~dpsclient.models.DataProvider
    :param source: Source of satellite data. Possible values include: "Sentinel_2_L2A".
    :type source: str or ~dpsclient.models.Source
    :param data: Data Model for SatelliteInjestionJobRequest.
    :type data: ~dpsclient.models.SatelliteData
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'boundary_id': {'required': True},
        'start_date': {'required': True},
        'end_date': {'required': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'boundary_id': {'key': 'boundaryId', 'type': 'str'},
        'start_date': {'key': 'startDate', 'type': 'iso-8601'},
        'end_date': {'key': 'endDate', 'type': 'iso-8601'},
        'provider': {'key': 'provider', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'data': {'key': 'data', 'type': 'SatelliteData'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SatelliteIngestionJobRequest, self).__init__(**kwargs)
        self.farmer_id = kwargs['farmer_id']
        self.boundary_id = kwargs['boundary_id']
        self.start_date = kwargs['start_date']
        self.end_date = kwargs['end_date']
        self.provider = kwargs.get('provider', None)
        self.source = kwargs.get('source', None)
        self.data = kwargs.get('data', None)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class SatelliteIngestionJobResponse(msrest.serialization.Model):
    """SatelliteIngestion job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param status: Status of the job.
    :type status: str
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SatelliteIngestionJobResponse, self).__init__(**kwargs)
        self.duration = kwargs.get('duration', None)
        self.id = kwargs.get('id', None)
        self.status = kwargs.get('status', None)
        self.message = kwargs.get('message', None)
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class SceneEntityResponse(msrest.serialization.Model):
    """Model for returning Scene object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Scene Id.
    :type id: str
    :param scene_date_time: Scene date-time.
    :type scene_date_time: ~datetime.datetime
    :param farmer_id: Farmer Id.
    :type farmer_id: str
    :param provider: Scene Data Provider.
    :type provider: str
    :param source: Scene Data Source.
    :type source: str
    :param boundary_id: BoundaryId value.
    :type boundary_id: str
    :param cloud_cover_percentage: Cloud cover percentage of scene.
    :type cloud_cover_percentage: float
    :param dark_pixel_percentage: Dark Pixel percentage of Scene.
    :type dark_pixel_percentage: float
    :param ndvi_median_value: Median of NDVI scene values.
    :type ndvi_median_value: float
    :param image_format: ImageFormat for satellite data. Possible values include: "TIF".
    :type image_format: str or ~dpsclient.models.ImageFormat
    :param image_files: List of Image files.
    :type image_files: list[~dpsclient.models.ImageFileResponse]
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    """

    _validation = {
        'provider': {'max_length': 100, 'min_length': 2},
        'source': {'max_length': 100, 'min_length': 2},
        'boundary_id': {'max_length': 100, 'min_length': 2},
        'cloud_cover_percentage': {'maximum': 100, 'minimum': 0},
        'dark_pixel_percentage': {'maximum': 100, 'minimum': 0},
        'ndvi_median_value': {'maximum': 1, 'minimum': 0},
        'e_tag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'scene_date_time': {'key': 'sceneDateTime', 'type': 'iso-8601'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'boundary_id': {'key': 'boundaryId', 'type': 'str'},
        'cloud_cover_percentage': {'key': 'cloudCoverPercentage', 'type': 'float'},
        'dark_pixel_percentage': {'key': 'darkPixelPercentage', 'type': 'float'},
        'ndvi_median_value': {'key': 'ndviMedianValue', 'type': 'float'},
        'image_format': {'key': 'imageFormat', 'type': 'str'},
        'image_files': {'key': 'imageFiles', 'type': '[ImageFileResponse]'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SceneEntityResponse, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.scene_date_time = kwargs.get('scene_date_time', None)
        self.farmer_id = kwargs.get('farmer_id', None)
        self.provider = kwargs.get('provider', None)
        self.source = kwargs.get('source', None)
        self.boundary_id = kwargs.get('boundary_id', None)
        self.cloud_cover_percentage = kwargs.get('cloud_cover_percentage', None)
        self.dark_pixel_percentage = kwargs.get('dark_pixel_percentage', None)
        self.ndvi_median_value = kwargs.get('ndvi_median_value', None)
        self.image_format = kwargs.get('image_format', None)
        self.image_files = kwargs.get('image_files', None)
        self.e_tag = None


class SceneEntityResponseListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.SceneEntityResponse]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SceneEntityResponse]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SceneEntityResponseListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class Season(msrest.serialization.Model):
    """Model for returning Season object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param start_date: Season start date.
    :type start_date: str
    :param end_date: Season end date.
    :type end_date: str
    :param year: Season year.
    :type year: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'start_date': {'key': 'startDate', 'type': 'str'},
        'end_date': {'key': 'endDate', 'type': 'str'},
        'year': {'key': 'year', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Season, self).__init__(**kwargs)
        self.start_date = kwargs.get('start_date', None)
        self.end_date = kwargs.get('end_date', None)
        self.year = kwargs.get('year', None)
        self.id = None
        self.status = kwargs.get('status', None)
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class SeasonalField(msrest.serialization.Model):
    """Api Model for seasonal field object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar farmer_id: Farmer Id.
    :vartype farmer_id: str
    :ivar primary_boundary_id: Primary boundary id.
    :vartype primary_boundary_id: str
    :ivar boundary_ids: Boundary Ids.
    :vartype boundary_ids: list[str]
    :param farm_id: Id of the associated Farm.
    :type farm_id: str
    :param field_id: Id of the associated Field.
    :type field_id: str
    :param season_id: Id of the season it belongs to.
    :type season_id: str
    :param crop_variety_ids: CropVariety ids.
    :type crop_variety_ids: list[str]
    :param crop_id: Id of the crop it belongs to.
    :type crop_id: str
    :param avg_yield_value: Average yield value of the seasonal field.
    :type avg_yield_value: float
    :param avg_yield_unit: Unit of the average yield value attribute.
    :type avg_yield_unit: str
    :param avg_seed_population_value: Average seed population value of the seasonal field.
    :type avg_seed_population_value: float
    :param avg_seed_population_unit: Unit of average seed population value attribute.
    :type avg_seed_population_unit: str
    :param planting_date: Planting date.
    :type planting_date: str
    :ivar id: Unique Id.
    :vartype id: str
    :param status: Status of the resource.
    :type status: str
    :ivar created_date_time: Date when resource was created.
    :vartype created_date_time: ~datetime.datetime
    :ivar modified_date_time: Date when resource was last modified.
    :vartype modified_date_time: ~datetime.datetime
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'readonly': True},
        'primary_boundary_id': {'readonly': True},
        'boundary_ids': {'readonly': True, 'unique': True},
        'crop_variety_ids': {'unique': True},
        'avg_yield_unit': {'max_length': 32, 'min_length': 2},
        'avg_seed_population_unit': {'max_length': 32, 'min_length': 2},
        'id': {'readonly': True},
        'status': {'max_length': 100, 'min_length': 2},
        'created_date_time': {'readonly': True},
        'modified_date_time': {'readonly': True},
        'e_tag': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'primary_boundary_id': {'key': 'primaryBoundaryId', 'type': 'str'},
        'boundary_ids': {'key': 'boundaryIds', 'type': '[str]'},
        'farm_id': {'key': 'farmId', 'type': 'str'},
        'field_id': {'key': 'fieldId', 'type': 'str'},
        'season_id': {'key': 'seasonId', 'type': 'str'},
        'crop_variety_ids': {'key': 'cropVarietyIds', 'type': '[str]'},
        'crop_id': {'key': 'cropId', 'type': 'str'},
        'avg_yield_value': {'key': 'avgYieldValue', 'type': 'float'},
        'avg_yield_unit': {'key': 'avgYieldUnit', 'type': 'str'},
        'avg_seed_population_value': {'key': 'avgSeedPopulationValue', 'type': 'float'},
        'avg_seed_population_unit': {'key': 'avgSeedPopulationUnit', 'type': 'str'},
        'planting_date': {'key': 'plantingDate', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SeasonalField, self).__init__(**kwargs)
        self.farmer_id = None
        self.primary_boundary_id = None
        self.boundary_ids = None
        self.farm_id = kwargs.get('farm_id', None)
        self.field_id = kwargs.get('field_id', None)
        self.season_id = kwargs.get('season_id', None)
        self.crop_variety_ids = kwargs.get('crop_variety_ids', None)
        self.crop_id = kwargs.get('crop_id', None)
        self.avg_yield_value = kwargs.get('avg_yield_value', None)
        self.avg_yield_unit = kwargs.get('avg_yield_unit', None)
        self.avg_seed_population_value = kwargs.get('avg_seed_population_value', None)
        self.avg_seed_population_unit = kwargs.get('avg_seed_population_unit', None)
        self.planting_date = kwargs.get('planting_date', None)
        self.id = None
        self.status = kwargs.get('status', None)
        self.created_date_time = None
        self.modified_date_time = None
        self.e_tag = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class SeasonalFieldListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.SeasonalField]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SeasonalField]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SeasonalFieldListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class SeasonListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.Season]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Season]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SeasonListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class WeatherData(msrest.serialization.Model):
    """Model for weather data.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Weather data Id.
    :type id: str
    :param farmer_id: Required. Farmer Id.
    :type farmer_id: str
    :param field_id: Required. Field Id.
    :type field_id: str
    :param extension_id: Required. Id of the weather extension.
    :type extension_id: str
    :param location: Required. Location model class.
    :type location: ~dpsclient.models.Location
    :param date_time: Required. DateTime of the weather data.
    :type date_time: ~datetime.datetime
    :param created_date_time: Created date and time of the weather data.
    :type created_date_time: ~datetime.datetime
    :param modified_date_time: Modified date and time of the weather data.
    :type modified_date_time: ~datetime.datetime
    :param unit_system_code: Unit System like US/SI etc.
    :type unit_system_code: str
    :param extension_version: Required. Version of the weather data extension.
    :type extension_version: str
    :param weather_data_type: Required. Type of weather data (forecast/historical).
    :type weather_data_type: str
    :param granularity: Required. Granularity of weather data (daily/hourly).
    :type granularity: str
    :param cloud_cover: Weather data measure.
    :type cloud_cover: ~dpsclient.models.WeatherMeasure
    :param dew_point: Weather data measure.
    :type dew_point: ~dpsclient.models.WeatherMeasure
    :param growing_degree_day: Weather data measure.
    :type growing_degree_day: ~dpsclient.models.WeatherMeasure
    :param precipitation: Weather data measure.
    :type precipitation: ~dpsclient.models.WeatherMeasure
    :param pressure: Weather data measure.
    :type pressure: ~dpsclient.models.WeatherMeasure
    :param relative_humidity: Weather data measure.
    :type relative_humidity: ~dpsclient.models.WeatherMeasure
    :param soil_moisture: Weather data measure.
    :type soil_moisture: ~dpsclient.models.WeatherMeasure
    :param soil_temperature: Weather data measure.
    :type soil_temperature: ~dpsclient.models.WeatherMeasure
    :param temperature: Weather data measure.
    :type temperature: ~dpsclient.models.WeatherMeasure
    :param visibility: Weather data measure.
    :type visibility: ~dpsclient.models.WeatherMeasure
    :param wet_bulb_temperature: Weather data measure.
    :type wet_bulb_temperature: ~dpsclient.models.WeatherMeasure
    :param wind_chill: Weather data measure.
    :type wind_chill: ~dpsclient.models.WeatherMeasure
    :param wind_direction: Weather data measure.
    :type wind_direction: ~dpsclient.models.WeatherMeasure
    :param wind_gust: Weather data measure.
    :type wind_gust: ~dpsclient.models.WeatherMeasure
    :param wind_speed: Weather data measure.
    :type wind_speed: ~dpsclient.models.WeatherMeasure
    :ivar e_tag: The ETag value to implement optimistic concurrency.
    :vartype e_tag: str
    :param properties: Additional properties of the data.
     A maximum of 60 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'farmer_id': {'required': True},
        'field_id': {'required': True},
        'extension_id': {'required': True},
        'location': {'required': True},
        'date_time': {'required': True},
        'extension_version': {'required': True},
        'weather_data_type': {'required': True},
        'granularity': {'required': True},
        'e_tag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'field_id': {'key': 'fieldId', 'type': 'str'},
        'extension_id': {'key': 'extensionId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'Location'},
        'date_time': {'key': 'dateTime', 'type': 'iso-8601'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'modified_date_time': {'key': 'modifiedDateTime', 'type': 'iso-8601'},
        'unit_system_code': {'key': 'unitSystemCode', 'type': 'str'},
        'extension_version': {'key': 'extensionVersion', 'type': 'str'},
        'weather_data_type': {'key': 'weatherDataType', 'type': 'str'},
        'granularity': {'key': 'granularity', 'type': 'str'},
        'cloud_cover': {'key': 'cloudCover', 'type': 'WeatherMeasure'},
        'dew_point': {'key': 'dewPoint', 'type': 'WeatherMeasure'},
        'growing_degree_day': {'key': 'growingDegreeDay', 'type': 'WeatherMeasure'},
        'precipitation': {'key': 'precipitation', 'type': 'WeatherMeasure'},
        'pressure': {'key': 'pressure', 'type': 'WeatherMeasure'},
        'relative_humidity': {'key': 'relativeHumidity', 'type': 'WeatherMeasure'},
        'soil_moisture': {'key': 'soilMoisture', 'type': 'WeatherMeasure'},
        'soil_temperature': {'key': 'soilTemperature', 'type': 'WeatherMeasure'},
        'temperature': {'key': 'temperature', 'type': 'WeatherMeasure'},
        'visibility': {'key': 'visibility', 'type': 'WeatherMeasure'},
        'wet_bulb_temperature': {'key': 'wetBulbTemperature', 'type': 'WeatherMeasure'},
        'wind_chill': {'key': 'windChill', 'type': 'WeatherMeasure'},
        'wind_direction': {'key': 'windDirection', 'type': 'WeatherMeasure'},
        'wind_gust': {'key': 'windGust', 'type': 'WeatherMeasure'},
        'wind_speed': {'key': 'windSpeed', 'type': 'WeatherMeasure'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(WeatherData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.farmer_id = kwargs['farmer_id']
        self.field_id = kwargs['field_id']
        self.extension_id = kwargs['extension_id']
        self.location = kwargs['location']
        self.date_time = kwargs['date_time']
        self.created_date_time = kwargs.get('created_date_time', None)
        self.modified_date_time = kwargs.get('modified_date_time', None)
        self.unit_system_code = kwargs.get('unit_system_code', None)
        self.extension_version = kwargs['extension_version']
        self.weather_data_type = kwargs['weather_data_type']
        self.granularity = kwargs['granularity']
        self.cloud_cover = kwargs.get('cloud_cover', None)
        self.dew_point = kwargs.get('dew_point', None)
        self.growing_degree_day = kwargs.get('growing_degree_day', None)
        self.precipitation = kwargs.get('precipitation', None)
        self.pressure = kwargs.get('pressure', None)
        self.relative_humidity = kwargs.get('relative_humidity', None)
        self.soil_moisture = kwargs.get('soil_moisture', None)
        self.soil_temperature = kwargs.get('soil_temperature', None)
        self.temperature = kwargs.get('temperature', None)
        self.visibility = kwargs.get('visibility', None)
        self.wet_bulb_temperature = kwargs.get('wet_bulb_temperature', None)
        self.wind_chill = kwargs.get('wind_chill', None)
        self.wind_direction = kwargs.get('wind_direction', None)
        self.wind_gust = kwargs.get('wind_gust', None)
        self.wind_speed = kwargs.get('wind_speed', None)
        self.e_tag = None
        self.properties = kwargs.get('properties', None)


class WeatherDataListResponse(msrest.serialization.Model):
    """Paged response contains list of requested objects and a URL link to get the next set of results.

    :param value: List of requested objects.
    :type value: list[~dpsclient.models.WeatherData]
    :param skip_token: Token used in retrieving the next page. If null, there are no additional
     pages.
    :type skip_token: str
    :param next_link: Continuation link (absolute URI) to the next page of results in the list.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[WeatherData]'},
        'skip_token': {'key': '$skipToken', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(WeatherDataListResponse, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.skip_token = kwargs.get('skip_token', None)
        self.next_link = kwargs.get('next_link', None)


class WeatherIngestionJobRequest(msrest.serialization.Model):
    """WeatherIngestionJobRequest.

    All required parameters must be populated in order to send to Azure.

    :param extension_id: Required. Id of the extension to be used for the providerInput. eg. DTN.
    :type extension_id: str
    :param field_id: Required. The id of the field object for which weather data is being fetched.
    :type field_id: str
    :param farmer_id: Required. The id of the farmer object for which weather data is being
     fetched.
    :type farmer_id: str
    :param api_name: Required. Api name to which request is to be made.
    :type api_name: str
    :param provider_input: Required. Provider input dictionary which would be used to feed request
     query/body/parameter information.
    :type provider_input: dict[str, object]
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'extension_id': {'required': True, 'max_length': 100, 'min_length': 2},
        'field_id': {'required': True},
        'farmer_id': {'required': True},
        'api_name': {'required': True, 'max_length': 100, 'min_length': 2},
        'provider_input': {'required': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'extension_id': {'key': 'extensionId', 'type': 'str'},
        'field_id': {'key': 'fieldId', 'type': 'str'},
        'farmer_id': {'key': 'farmerId', 'type': 'str'},
        'api_name': {'key': 'apiName', 'type': 'str'},
        'provider_input': {'key': 'providerInput', 'type': '{object}'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(WeatherIngestionJobRequest, self).__init__(**kwargs)
        self.extension_id = kwargs['extension_id']
        self.field_id = kwargs['field_id']
        self.farmer_id = kwargs['farmer_id']
        self.api_name = kwargs['api_name']
        self.provider_input = kwargs['provider_input']
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class WeatherIngestionJobResponse(msrest.serialization.Model):
    """WeatherIngestion job response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param duration: Duration of the job.
    :type duration: str
    :param id: Id of the job.
    :type id: str
    :param status: Status of the job.
    :type status: str
    :param message: Status message to capture more details of the job.
    :type message: str
    :ivar created_date_time: Job created at date time.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: Job was last acted upon at.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar start_time: Job start time when available.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Job end time when available.
    :vartype end_time: ~datetime.datetime
    :param name: Name to identify resource.
    :type name: str
    :param description: Textual description of resource.
    :type description: str
    :param properties: A list of key value pairs that describe the document.
     A maximum of 25 key value pairs can be provided for a document,
     and each tuple must have a key no greater than 50 characters
     and value no greater than 150 characters.
     Only string and numeral values are supported.
    :type properties: dict[str, object]
    """

    _validation = {
        'created_date_time': {'readonly': True},
        'last_action_date_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'name': {'max_length': 100, 'min_length': 2},
        'description': {'max_length': 500, 'min_length': 2},
    }

    _attribute_map = {
        'duration': {'key': 'duration', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'last_action_date_time': {'key': 'lastActionDateTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{object}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(WeatherIngestionJobResponse, self).__init__(**kwargs)
        self.duration = kwargs.get('duration', None)
        self.id = kwargs.get('id', None)
        self.status = kwargs.get('status', None)
        self.message = kwargs.get('message', None)
        self.created_date_time = None
        self.last_action_date_time = None
        self.start_time = None
        self.end_time = None
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.properties = kwargs.get('properties', None)


class WeatherMeasure(msrest.serialization.Model):
    """Weather data measure.

    :param unit: Data unit.
    :type unit: str
    :param value: Data value.
    :type value: float
    """

    _validation = {
        'unit': {'max_length': 50, 'min_length': 1},
    }

    _attribute_map = {
        'unit': {'key': 'unit', 'type': 'str'},
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(WeatherMeasure, self).__init__(**kwargs)
        self.unit = kwargs.get('unit', None)
        self.value = kwargs.get('value', None)
