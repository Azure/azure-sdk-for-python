# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6351, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class DataProvider(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Provider of satellite data.
    """

    MICROSOFT = "Microsoft"

class GeoJsonObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """GeoJSON object type.
    """

    POLYGON = "Polygon"
    MULTI_POLYGON = "MultiPolygon"

class ImageFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """ImageFormat for satellite data.
    """

    TIF = "TIF"

class ImageName(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """ImageName for satellite data.
    """

    ALL_IMAGES = "AllImages"
    B01 = "B01"
    B02 = "B02"
    B03 = "B03"
    B04 = "B04"
    B05 = "B05"
    B06 = "B06"
    B07 = "B07"
    B08 = "B08"
    B8_A = "B8A"
    B09 = "B09"
    B11 = "B11"
    B12 = "B12"
    AOT = "AOT"
    SCL = "SCL"
    SNW = "SNW"
    CLD = "CLD"
    CLP = "CLP"
    CLM = "CLM"
    DATA_MASK = "dataMask"
    EVI = "EVI"
    NDVI = "NDVI"
    NDWI = "NDWI"

class ImageResolution(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Supported resolution values for Satellite Data in meters.
    """

    TEN = "Ten"
    TWENTY = "Twenty"
    SIXTY = "Sixty"

class Source(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Source of satellite data.
    """

    SENTINEL2_L2_A = "Sentinel_2_L2A"
