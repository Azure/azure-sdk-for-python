# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from json import loads as _loads
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TYPE_CHECKING, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.farmbeats.core.rest import HttpRequest

from ...rest import seasonal_fields as rest_seasonal_fields

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SeasonalFieldsOperations:
    """SeasonalFieldsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_by_farmer_id(
        self,
        farmer_id: str,
        *,
        farm_ids: Optional[List[str]] = None,
        field_ids: Optional[List[str]] = None,
        season_ids: Optional[List[str]] = None,
        crop_variety_ids: Optional[List[str]] = None,
        crop_ids: Optional[List[str]] = None,
        min_avg_yield_value: Optional[float] = None,
        max_avg_yield_value: Optional[float] = None,
        avg_yield_unit: Optional[str] = None,
        min_avg_seed_population_value: Optional[float] = None,
        max_avg_seed_population_value: Optional[float] = None,
        avg_seed_population_unit: Optional[str] = None,
        min_planting_date_time: Optional[datetime.datetime] = None,
        max_planting_date_time: Optional[datetime.datetime] = None,
        ids: Optional[List[str]] = None,
        names: Optional[List[str]] = None,
        property_filters: Optional[List[str]] = None,
        statuses: Optional[List[str]] = None,
        min_created_date_time: Optional[datetime.datetime] = None,
        max_created_date_time: Optional[datetime.datetime] = None,
        min_last_modified_date_time: Optional[datetime.datetime] = None,
        max_last_modified_date_time: Optional[datetime.datetime] = None,
        max_page_size: Optional[int] = 50,
        skip_token: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable[Any]:
        """Returns a paginated list of seasonal field resources under a particular farmer.

        :param farmer_id: Id of the associated farmer.
        :type farmer_id: str
        :keyword farm_ids: Farm Ids of the resource.
        :paramtype farm_ids: list[str]
        :keyword field_ids: Field Ids of the resource.
        :paramtype field_ids: list[str]
        :keyword season_ids: Season Ids of the resource.
        :paramtype season_ids: list[str]
        :keyword crop_variety_ids: CropVarietyIds of the resource.
        :paramtype crop_variety_ids: list[str]
        :keyword crop_ids: Ids of the crop it belongs to.
        :paramtype crop_ids: list[str]
        :keyword min_avg_yield_value: Minimum average yield value of the seasonal field(inclusive).
        :paramtype min_avg_yield_value: float
        :keyword max_avg_yield_value: Maximum average yield value of the seasonal field(inclusive).
        :paramtype max_avg_yield_value: float
        :keyword avg_yield_unit: Unit of the average yield value attribute.
        :paramtype avg_yield_unit: str
        :keyword min_avg_seed_population_value: Minimum average seed population value of the seasonal
         field(inclusive).
        :paramtype min_avg_seed_population_value: float
        :keyword max_avg_seed_population_value: Maximum average seed population value of the seasonal
         field(inclusive).
        :paramtype max_avg_seed_population_value: float
        :keyword avg_seed_population_unit: Unit of average seed population value attribute.
        :paramtype avg_seed_population_unit: str
        :keyword min_planting_date_time: Minimum planting datetime, sample format:
         yyyy-MM-ddTHH:mm:ssZ.
        :paramtype min_planting_date_time: ~datetime.datetime
        :keyword max_planting_date_time: Maximum planting datetime, sample format:
         yyyy-MM-ddTHH:mm:ssZ.
        :paramtype max_planting_date_time: ~datetime.datetime
        :keyword ids: Ids of the resource.
        :paramtype ids: list[str]
        :keyword names: Names of the resource.
        :paramtype names: list[str]
        :keyword property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testkey} eq {testvalue}".
        :paramtype property_filters: list[str]
        :keyword statuses: Statuses of the resource.
        :paramtype statuses: list[str]
        :keyword min_created_date_time: Minimum creation date of resource (inclusive).
        :paramtype min_created_date_time: ~datetime.datetime
        :keyword max_created_date_time: Maximum creation date of resource (inclusive).
        :paramtype max_created_date_time: ~datetime.datetime
        :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :paramtype min_last_modified_date_time: ~datetime.datetime
        :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :paramtype max_last_modified_date_time: ~datetime.datetime
        :keyword max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :paramtype max_page_size: int
        :keyword skip_token: Skip token for getting next set of results.
        :paramtype skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python



                # response body for status code(s): 200
                response_body == {
                    "$skipToken": "str (optional)",
                    "nextLink": "str (optional)",
                    "value": [
                        {
                            "avgSeedPopulationUnit": "str (optional)",
                            "avgSeedPopulationValue": "float (optional)",
                            "avgYieldUnit": "str (optional)",
                            "avgYieldValue": "float (optional)",
                            "boundaryIds": [
                                "str (optional)"
                            ],
                            "createdDateTime": "datetime (optional)",
                            "cropId": "str (optional)",
                            "cropVarietyIds": [
                                "str (optional)"
                            ],
                            "description": "str (optional)",
                            "eTag": "str (optional)",
                            "farmId": "str (optional)",
                            "farmerId": "str (optional)",
                            "fieldId": "str (optional)",
                            "id": "str (optional)",
                            "modifiedDateTime": "datetime (optional)",
                            "name": "str (optional)",
                            "plantingDateTime": "datetime (optional)",
                            "primaryBoundaryId": "str (optional)",
                            "properties": {
                                "str": "object (optional)"
                            },
                            "seasonId": "str (optional)",
                            "status": "str (optional)"
                        }
                    ]
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_seasonal_fields.build_list_by_farmer_id_request(
                    farmer_id=farmer_id,
                    farm_ids=farm_ids,
                    field_ids=field_ids,
                    season_ids=season_ids,
                    crop_variety_ids=crop_variety_ids,
                    crop_ids=crop_ids,
                    min_avg_yield_value=min_avg_yield_value,
                    max_avg_yield_value=max_avg_yield_value,
                    avg_yield_unit=avg_yield_unit,
                    min_avg_seed_population_value=min_avg_seed_population_value,
                    max_avg_seed_population_value=max_avg_seed_population_value,
                    avg_seed_population_unit=avg_seed_population_unit,
                    min_planting_date_time=min_planting_date_time,
                    max_planting_date_time=max_planting_date_time,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
            else:
                request = rest_seasonal_fields.build_list_by_farmer_id_request(
                    farmer_id=farmer_id,
                    farm_ids=farm_ids,
                    field_ids=field_ids,
                    season_ids=season_ids,
                    crop_variety_ids=crop_variety_ids,
                    crop_ids=crop_ids,
                    min_avg_yield_value=min_avg_yield_value,
                    max_avg_yield_value=max_avg_yield_value,
                    avg_yield_unit=avg_yield_unit,
                    min_avg_seed_population_value=min_avg_seed_population_value,
                    max_avg_seed_population_value=max_avg_seed_population_value,
                    avg_seed_population_unit=avg_seed_population_unit,
                    min_planting_date_time=min_planting_date_time,
                    max_planting_date_time=max_planting_date_time,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
                request.url = self._client.format_url(next_link, **path_format_arguments)
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.text())
            list_of_elem = deserialized.get('value', [])
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get('nextLink', None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_farmer_id.metadata = {'url': '/farmers/{farmerId}/seasonal-fields'}  # type: ignore

    def list(
        self,
        *,
        farm_ids: Optional[List[str]] = None,
        field_ids: Optional[List[str]] = None,
        season_ids: Optional[List[str]] = None,
        crop_variety_ids: Optional[List[str]] = None,
        crop_ids: Optional[List[str]] = None,
        min_avg_yield_value: Optional[float] = None,
        max_avg_yield_value: Optional[float] = None,
        avg_yield_unit: Optional[str] = None,
        min_avg_seed_population_value: Optional[float] = None,
        max_avg_seed_population_value: Optional[float] = None,
        avg_seed_population_unit: Optional[str] = None,
        min_planting_date_time: Optional[datetime.datetime] = None,
        max_planting_date_time: Optional[datetime.datetime] = None,
        ids: Optional[List[str]] = None,
        names: Optional[List[str]] = None,
        property_filters: Optional[List[str]] = None,
        statuses: Optional[List[str]] = None,
        min_created_date_time: Optional[datetime.datetime] = None,
        max_created_date_time: Optional[datetime.datetime] = None,
        min_last_modified_date_time: Optional[datetime.datetime] = None,
        max_last_modified_date_time: Optional[datetime.datetime] = None,
        max_page_size: Optional[int] = 50,
        skip_token: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable[Any]:
        """Returns a paginated list of seasonal field resources across all farmers.

        :keyword farm_ids: Farm Ids of the resource.
        :paramtype farm_ids: list[str]
        :keyword field_ids: Field Ids of the resource.
        :paramtype field_ids: list[str]
        :keyword season_ids: Season Ids of the resource.
        :paramtype season_ids: list[str]
        :keyword crop_variety_ids: CropVarietyIds of the resource.
        :paramtype crop_variety_ids: list[str]
        :keyword crop_ids: Ids of the crop it belongs to.
        :paramtype crop_ids: list[str]
        :keyword min_avg_yield_value: Minimum average yield value of the seasonal field(inclusive).
        :paramtype min_avg_yield_value: float
        :keyword max_avg_yield_value: Maximum average yield value of the seasonal field(inclusive).
        :paramtype max_avg_yield_value: float
        :keyword avg_yield_unit: Unit of the average yield value attribute.
        :paramtype avg_yield_unit: str
        :keyword min_avg_seed_population_value: Minimum average seed population value of the seasonal
         field(inclusive).
        :paramtype min_avg_seed_population_value: float
        :keyword max_avg_seed_population_value: Maximum average seed population value of the seasonal
         field(inclusive).
        :paramtype max_avg_seed_population_value: float
        :keyword avg_seed_population_unit: Unit of average seed population value attribute.
        :paramtype avg_seed_population_unit: str
        :keyword min_planting_date_time: Minimum planting datetime, sample format:
         yyyy-MM-ddTHH:mm:ssZ.
        :paramtype min_planting_date_time: ~datetime.datetime
        :keyword max_planting_date_time: Maximum planting datetime, sample format:
         yyyy-MM-ddTHH:mm:ssZ.
        :paramtype max_planting_date_time: ~datetime.datetime
        :keyword ids: Ids of the resource.
        :paramtype ids: list[str]
        :keyword names: Names of the resource.
        :paramtype names: list[str]
        :keyword property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testkey} eq {testvalue}".
        :paramtype property_filters: list[str]
        :keyword statuses: Statuses of the resource.
        :paramtype statuses: list[str]
        :keyword min_created_date_time: Minimum creation date of resource (inclusive).
        :paramtype min_created_date_time: ~datetime.datetime
        :keyword max_created_date_time: Maximum creation date of resource (inclusive).
        :paramtype max_created_date_time: ~datetime.datetime
        :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :paramtype min_last_modified_date_time: ~datetime.datetime
        :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :paramtype max_last_modified_date_time: ~datetime.datetime
        :keyword max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :paramtype max_page_size: int
        :keyword skip_token: Skip token for getting next set of results.
        :paramtype skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python



                # response body for status code(s): 200
                response_body == {
                    "$skipToken": "str (optional)",
                    "nextLink": "str (optional)",
                    "value": [
                        {
                            "avgSeedPopulationUnit": "str (optional)",
                            "avgSeedPopulationValue": "float (optional)",
                            "avgYieldUnit": "str (optional)",
                            "avgYieldValue": "float (optional)",
                            "boundaryIds": [
                                "str (optional)"
                            ],
                            "createdDateTime": "datetime (optional)",
                            "cropId": "str (optional)",
                            "cropVarietyIds": [
                                "str (optional)"
                            ],
                            "description": "str (optional)",
                            "eTag": "str (optional)",
                            "farmId": "str (optional)",
                            "farmerId": "str (optional)",
                            "fieldId": "str (optional)",
                            "id": "str (optional)",
                            "modifiedDateTime": "datetime (optional)",
                            "name": "str (optional)",
                            "plantingDateTime": "datetime (optional)",
                            "primaryBoundaryId": "str (optional)",
                            "properties": {
                                "str": "object (optional)"
                            },
                            "seasonId": "str (optional)",
                            "status": "str (optional)"
                        }
                    ]
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_seasonal_fields.build_list_request(
                    farm_ids=farm_ids,
                    field_ids=field_ids,
                    season_ids=season_ids,
                    crop_variety_ids=crop_variety_ids,
                    crop_ids=crop_ids,
                    min_avg_yield_value=min_avg_yield_value,
                    max_avg_yield_value=max_avg_yield_value,
                    avg_yield_unit=avg_yield_unit,
                    min_avg_seed_population_value=min_avg_seed_population_value,
                    max_avg_seed_population_value=max_avg_seed_population_value,
                    avg_seed_population_unit=avg_seed_population_unit,
                    min_planting_date_time=min_planting_date_time,
                    max_planting_date_time=max_planting_date_time,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
            else:
                request = rest_seasonal_fields.build_list_request(
                    farm_ids=farm_ids,
                    field_ids=field_ids,
                    season_ids=season_ids,
                    crop_variety_ids=crop_variety_ids,
                    crop_ids=crop_ids,
                    min_avg_yield_value=min_avg_yield_value,
                    max_avg_yield_value=max_avg_yield_value,
                    avg_yield_unit=avg_yield_unit,
                    min_avg_seed_population_value=min_avg_seed_population_value,
                    max_avg_seed_population_value=max_avg_seed_population_value,
                    avg_seed_population_unit=avg_seed_population_unit,
                    min_planting_date_time=min_planting_date_time,
                    max_planting_date_time=max_planting_date_time,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
                request.url = self._client.format_url(next_link, **path_format_arguments)
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.text())
            list_of_elem = deserialized.get('value', [])
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get('nextLink', None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/seasonal-fields'}  # type: ignore

    async def get(
        self,
        farmer_id: str,
        seasonal_field_id: str,
        **kwargs: Any
    ) -> Optional[Any]:
        """Gets a specified seasonal field resource under a particular farmer.

        :param farmer_id: Id of the associted farmer.
        :type farmer_id: str
        :param seasonal_field_id: Id of the seasonal field.
        :type seasonal_field_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python


                # response body for status code(s): 200
                response_body == {
                    "avgSeedPopulationUnit": "str (optional)",
                    "avgSeedPopulationValue": "float (optional)",
                    "avgYieldUnit": "str (optional)",
                    "avgYieldValue": "float (optional)",
                    "boundaryIds": [
                        "str (optional)"
                    ],
                    "createdDateTime": "datetime (optional)",
                    "cropId": "str (optional)",
                    "cropVarietyIds": [
                        "str (optional)"
                    ],
                    "description": "str (optional)",
                    "eTag": "str (optional)",
                    "farmId": "str (optional)",
                    "farmerId": "str (optional)",
                    "fieldId": "str (optional)",
                    "id": "str (optional)",
                    "modifiedDateTime": "datetime (optional)",
                    "name": "str (optional)",
                    "plantingDateTime": "datetime (optional)",
                    "primaryBoundaryId": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "seasonId": "str (optional)",
                    "status": "str (optional)"
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_seasonal_fields.build_get_request(
            farmer_id=farmer_id,
            seasonal_field_id=seasonal_field_id,
            template_url=self.get.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/farmers/{farmerId}/seasonal-fields/{seasonalFieldId}'}  # type: ignore

    async def create_or_update(
        self,
        farmer_id: str,
        seasonal_field_id: str,
        *,
        seasonal_field: Any = None,
        **kwargs: Any
    ) -> Any:
        """Creates or Updates a seasonal field resource under a particular farmer.

        :param farmer_id: Id of the associated farmer resource.
        :type farmer_id: str
        :param seasonal_field_id: Id of the seasonal field resource.
        :type seasonal_field_id: str
        :keyword seasonal_field: Seasonal field resource payload to create or update.
        :paramtype seasonal_field: Any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python


                # JSON input template you can fill out and use as your `json` input.
                seasonal_field = {
                    "avgSeedPopulationUnit": "str (optional)",
                    "avgSeedPopulationValue": "float (optional)",
                    "avgYieldUnit": "str (optional)",
                    "avgYieldValue": "float (optional)",
                    "boundaryIds": [
                        "str (optional)"
                    ],
                    "createdDateTime": "datetime (optional)",
                    "cropId": "str (optional)",
                    "cropVarietyIds": [
                        "str (optional)"
                    ],
                    "description": "str (optional)",
                    "eTag": "str (optional)",
                    "farmId": "str (optional)",
                    "farmerId": "str (optional)",
                    "fieldId": "str (optional)",
                    "id": "str (optional)",
                    "modifiedDateTime": "datetime (optional)",
                    "name": "str (optional)",
                    "plantingDateTime": "datetime (optional)",
                    "primaryBoundaryId": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "seasonId": "str (optional)",
                    "status": "str (optional)"
                }


                # response body for status code(s): 200, 201
                response_body == {
                    "avgSeedPopulationUnit": "str (optional)",
                    "avgSeedPopulationValue": "float (optional)",
                    "avgYieldUnit": "str (optional)",
                    "avgYieldValue": "float (optional)",
                    "boundaryIds": [
                        "str (optional)"
                    ],
                    "createdDateTime": "datetime (optional)",
                    "cropId": "str (optional)",
                    "cropVarietyIds": [
                        "str (optional)"
                    ],
                    "description": "str (optional)",
                    "eTag": "str (optional)",
                    "farmId": "str (optional)",
                    "farmerId": "str (optional)",
                    "fieldId": "str (optional)",
                    "id": "str (optional)",
                    "modifiedDateTime": "datetime (optional)",
                    "name": "str (optional)",
                    "plantingDateTime": "datetime (optional)",
                    "primaryBoundaryId": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "seasonId": "str (optional)",
                    "status": "str (optional)"
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop("content_type", "application/merge-patch+json")
        if seasonal_field is not None:
            json = self._serialize.body(seasonal_field, 'object')
        else:
            json = None


        request = rest_seasonal_fields.build_create_or_update_request(
            farmer_id=farmer_id,
            seasonal_field_id=seasonal_field_id,
            json=json,
            content_type=content_type,
            template_url=self.create_or_update.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = _loads(response.text())

        if response.status_code == 201:
            deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': '/farmers/{farmerId}/seasonal-fields/{seasonalFieldId}'}  # type: ignore

    async def delete(
        self,
        farmer_id: str,
        seasonal_field_id: str,
        **kwargs: Any
    ) -> None:
        """Deletes a specified seasonal-field resource under a particular farmer.

        :param farmer_id: Id of the farmer.
        :type farmer_id: str
        :param seasonal_field_id: Id of the seasonal field.
        :type seasonal_field_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_seasonal_fields.build_delete_request(
            farmer_id=farmer_id,
            seasonal_field_id=seasonal_field_id,
            template_url=self.delete.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/farmers/{farmerId}/seasonal-fields/{seasonalFieldId}'}  # type: ignore

    async def get_cascade_delete_job_details(
        self,
        job_id: str,
        **kwargs: Any
    ) -> Optional[Any]:
        """Get cascade delete job for specified seasonal field.

        :param job_id: Id of the job.
        :type job_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python


                # response body for status code(s): 200
                response_body == {
                    "createdDateTime": "datetime (optional)",
                    "description": "str (optional)",
                    "durationInSeconds": "str (optional)",
                    "endTime": "datetime (optional)",
                    "farmerId": "str",
                    "id": "str (optional)",
                    "lastActionDateTime": "datetime (optional)",
                    "message": "str (optional)",
                    "name": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "resourceId": "str",
                    "resourceType": "str",
                    "startTime": "datetime (optional)",
                    "status": "str (optional)"
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_seasonal_fields.build_get_cascade_delete_job_details_request(
            job_id=job_id,
            template_url=self.get_cascade_delete_job_details.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_cascade_delete_job_details.metadata = {'url': '/seasonal-fields/cascade-delete/{jobId}'}  # type: ignore

    async def _create_cascade_delete_job_initial(
        self,
        job_id: str,
        *,
        farmer_id: str,
        seasonal_field_id: str,
        **kwargs: Any
    ) -> Any:
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_seasonal_fields.build_create_cascade_delete_job_request_initial(
            job_id=job_id,
            farmer_id=farmer_id,
            seasonal_field_id=seasonal_field_id,
            template_url=self._create_cascade_delete_job_initial.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    _create_cascade_delete_job_initial.metadata = {'url': '/seasonal-fields/cascade-delete/{jobId}'}  # type: ignore

    async def begin_create_cascade_delete_job(
        self,
        job_id: str,
        *,
        farmer_id: str,
        seasonal_field_id: str,
        **kwargs: Any
    ) -> AsyncLROPoller[Any]:
        """Create a cascade delete job for specified seasonal field.

        :param job_id: Job ID supplied by end user.
        :type job_id: str
        :keyword farmer_id: ID of the associated farmer.
        :paramtype farmer_id: str
        :keyword seasonal_field_id: ID of the seasonalField to be deleted.
        :paramtype seasonal_field_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling.
         Pass in False for this operation to not poll, or pass in your own initialized polling object for a personal polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns either Any or the result of cls(response)
        :rtype: ~azure.core.polling.AsyncLROPoller[Any]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python


                # response body for status code(s): 202
                response_body == {
                    "createdDateTime": "datetime (optional)",
                    "description": "str (optional)",
                    "durationInSeconds": "str (optional)",
                    "endTime": "datetime (optional)",
                    "farmerId": "str",
                    "id": "str (optional)",
                    "lastActionDateTime": "datetime (optional)",
                    "message": "str (optional)",
                    "name": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "resourceId": "str",
                    "resourceType": "str",
                    "startTime": "datetime (optional)",
                    "status": "str (optional)"
                }

        """
        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._create_cascade_delete_job_initial(
                job_id=job_id,

                farmer_id=farmer_id,

                seasonal_field_id=seasonal_field_id,


                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _loads(response.text())

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }

        if polling is True: polling_method = AsyncLROBasePolling(lro_delay, lro_options={'final-state-via': 'location'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_create_cascade_delete_job.metadata = {'url': '/seasonal-fields/cascade-delete/{jobId}'}  # type: ignore

