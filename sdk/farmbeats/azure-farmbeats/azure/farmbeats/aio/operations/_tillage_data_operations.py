# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, AsyncIterable, Callable, Dict, Generic, List, Optional, TYPE_CHECKING, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.farmbeats.core.rest import HttpRequest

from ..rest import tillage_data as rest_tillage_data

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class TillageDataOperations:
    """TillageDataOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_by_farmer_id(
        self,
        farmer_id: str,
        min_tillage_depth: Optional[float] = None,
        max_tillage_depth: Optional[float] = None,
        min_tillage_pressure: Optional[float] = None,
        max_tillage_pressure: Optional[float] = None,
        sources: Optional[List[str]] = None,
        associated_boundary_ids: Optional[List[str]] = None,
        operation_boundary_ids: Optional[List[str]] = None,
        min_operation_start_date_time: Optional[datetime.datetime] = None,
        max_operation_start_date_time: Optional[datetime.datetime] = None,
        min_operation_end_date_time: Optional[datetime.datetime] = None,
        max_operation_end_date_time: Optional[datetime.datetime] = None,
        min_operation_modified_date_time: Optional[datetime.datetime] = None,
        max_operation_modified_date_time: Optional[datetime.datetime] = None,
        min_area: Optional[float] = None,
        max_area: Optional[float] = None,
        ids: Optional[List[str]] = None,
        names: Optional[List[str]] = None,
        property_filters: Optional[List[str]] = None,
        statuses: Optional[List[str]] = None,
        min_created_date_time: Optional[datetime.datetime] = None,
        max_created_date_time: Optional[datetime.datetime] = None,
        min_last_modified_date_time: Optional[datetime.datetime] = None,
        max_last_modified_date_time: Optional[datetime.datetime] = None,
        max_page_size: Optional[int] = 50,
        skip_token: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable[Any]:
        """Returns a paginated list of tillage data resources under a particular farm.

        :param farmer_id: ID of the associated farmer.
        :type farmer_id: str
        :param min_tillage_depth: Minimum measured tillage depth (inclusive).
        :type min_tillage_depth: float
        :param max_tillage_depth: Maximum measured tillage depth (inclusive).
        :type max_tillage_depth: float
        :param min_tillage_pressure: Minimum downforce applied to a tillage implement (inclusive).
        :type min_tillage_pressure: float
        :param max_tillage_pressure: Maximum downforce applied to a tillage implement (inclusive).
        :type max_tillage_pressure: float
        :param sources: Sources of the operation data.
        :type sources: list[str]
        :param associated_boundary_ids: Boundary IDs associated with operation data.
        :type associated_boundary_ids: list[str]
        :param operation_boundary_ids: Operation boundary IDs associated with operation data.
        :type operation_boundary_ids: list[str]
        :param min_operation_start_date_time: Minimum start date-time of the operation data, sample
         format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type min_operation_start_date_time: ~datetime.datetime
        :param max_operation_start_date_time: Maximum start date-time of the operation data, sample
         format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type max_operation_start_date_time: ~datetime.datetime
        :param min_operation_end_date_time: Minimum end date-time of the operation data, sample format:
         yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type min_operation_end_date_time: ~datetime.datetime
        :param max_operation_end_date_time: Maximum end date-time of the operation data, sample format:
         yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type max_operation_end_date_time: ~datetime.datetime
        :param min_operation_modified_date_time: Minimum modified date-time of the operation data,
         sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type min_operation_modified_date_time: ~datetime.datetime
        :param max_operation_modified_date_time: Maximum modified date-time of the operation data,
         sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type max_operation_modified_date_time: ~datetime.datetime
        :param min_area: Minimum area for which operation was applied (inclusive).
        :type min_area: float
        :param max_area: Maximum area for which operation was applied (inclusive).
        :type max_area: float
        :param ids: Ids of the resource.
        :type ids: list[str]
        :param names: Names of the resource.
        :type names: list[str]
        :param property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testkey} eq {testvalue}".
        :type property_filters: list[str]
        :param statuses: Statuses of the resource.
        :type statuses: list[str]
        :param min_created_date_time: Minimum creation date of resource (inclusive).
        :type min_created_date_time: ~datetime.datetime
        :param max_created_date_time: Maximum creation date of resource (inclusive).
        :type max_created_date_time: ~datetime.datetime
        :param min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :type min_last_modified_date_time: ~datetime.datetime
        :param max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :type max_last_modified_date_time: ~datetime.datetime
        :param max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :type max_page_size: int
        :param skip_token: Skip token for getting next set of results.
        :type skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_tillage_data.build_list_by_farmer_id_request(
                    farmer_id=farmer_id,
                    min_tillage_depth=min_tillage_depth,
                    max_tillage_depth=max_tillage_depth,
                    min_tillage_pressure=min_tillage_pressure,
                    max_tillage_pressure=max_tillage_pressure,
                    sources=sources,
                    associated_boundary_ids=associated_boundary_ids,
                    operation_boundary_ids=operation_boundary_ids,
                    min_operation_start_date_time=min_operation_start_date_time,
                    max_operation_start_date_time=max_operation_start_date_time,
                    min_operation_end_date_time=min_operation_end_date_time,
                    max_operation_end_date_time=max_operation_end_date_time,
                    min_operation_modified_date_time=min_operation_modified_date_time,
                    max_operation_modified_date_time=max_operation_modified_date_time,
                    min_area=min_area,
                    max_area=max_area,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
            else:
                request = rest_tillage_data.build_list_by_farmer_id_request(
                    farmer_id=farmer_id,
                    min_tillage_depth=min_tillage_depth,
                    max_tillage_depth=max_tillage_depth,
                    min_tillage_pressure=min_tillage_pressure,
                    max_tillage_pressure=max_tillage_pressure,
                    sources=sources,
                    associated_boundary_ids=associated_boundary_ids,
                    operation_boundary_ids=operation_boundary_ids,
                    min_operation_start_date_time=min_operation_start_date_time,
                    max_operation_start_date_time=max_operation_start_date_time,
                    min_operation_end_date_time=min_operation_end_date_time,
                    max_operation_end_date_time=max_operation_end_date_time,
                    min_operation_modified_date_time=min_operation_modified_date_time,
                    max_operation_modified_date_time=max_operation_modified_date_time,
                    min_area=min_area,
                    max_area=max_area,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                request._internal_request.method = "GET"
                request.url = self._client.format_url(next_link)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('TillageDataListResponse', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_farmer_id.metadata = {'url': '/farmers/{farmerId}/tillage-data'}  # type: ignore

    def list(
        self,
        min_tillage_depth: Optional[float] = None,
        max_tillage_depth: Optional[float] = None,
        min_tillage_pressure: Optional[float] = None,
        max_tillage_pressure: Optional[float] = None,
        sources: Optional[List[str]] = None,
        associated_boundary_ids: Optional[List[str]] = None,
        operation_boundary_ids: Optional[List[str]] = None,
        min_operation_start_date_time: Optional[datetime.datetime] = None,
        max_operation_start_date_time: Optional[datetime.datetime] = None,
        min_operation_end_date_time: Optional[datetime.datetime] = None,
        max_operation_end_date_time: Optional[datetime.datetime] = None,
        min_operation_modified_date_time: Optional[datetime.datetime] = None,
        max_operation_modified_date_time: Optional[datetime.datetime] = None,
        min_area: Optional[float] = None,
        max_area: Optional[float] = None,
        ids: Optional[List[str]] = None,
        names: Optional[List[str]] = None,
        property_filters: Optional[List[str]] = None,
        statuses: Optional[List[str]] = None,
        min_created_date_time: Optional[datetime.datetime] = None,
        max_created_date_time: Optional[datetime.datetime] = None,
        min_last_modified_date_time: Optional[datetime.datetime] = None,
        max_last_modified_date_time: Optional[datetime.datetime] = None,
        max_page_size: Optional[int] = 50,
        skip_token: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable[Any]:
        """Returns a paginated list of tillage data resources across all farmers.

        :param min_tillage_depth: Minimum measured tillage depth (inclusive).
        :type min_tillage_depth: float
        :param max_tillage_depth: Maximum measured tillage depth (inclusive).
        :type max_tillage_depth: float
        :param min_tillage_pressure: Minimum downforce applied to a tillage implement (inclusive).
        :type min_tillage_pressure: float
        :param max_tillage_pressure: Maximum downforce applied to a tillage implement (inclusive).
        :type max_tillage_pressure: float
        :param sources: Sources of the operation data.
        :type sources: list[str]
        :param associated_boundary_ids: Boundary IDs associated with operation data.
        :type associated_boundary_ids: list[str]
        :param operation_boundary_ids: Operation boundary IDs associated with operation data.
        :type operation_boundary_ids: list[str]
        :param min_operation_start_date_time: Minimum start date-time of the operation data, sample
         format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type min_operation_start_date_time: ~datetime.datetime
        :param max_operation_start_date_time: Maximum start date-time of the operation data, sample
         format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type max_operation_start_date_time: ~datetime.datetime
        :param min_operation_end_date_time: Minimum end date-time of the operation data, sample format:
         yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type min_operation_end_date_time: ~datetime.datetime
        :param max_operation_end_date_time: Maximum end date-time of the operation data, sample format:
         yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type max_operation_end_date_time: ~datetime.datetime
        :param min_operation_modified_date_time: Minimum modified date-time of the operation data,
         sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type min_operation_modified_date_time: ~datetime.datetime
        :param max_operation_modified_date_time: Maximum modified date-time of the operation data,
         sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive).
        :type max_operation_modified_date_time: ~datetime.datetime
        :param min_area: Minimum area for which operation was applied (inclusive).
        :type min_area: float
        :param max_area: Maximum area for which operation was applied (inclusive).
        :type max_area: float
        :param ids: Ids of the resource.
        :type ids: list[str]
        :param names: Names of the resource.
        :type names: list[str]
        :param property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testkey} eq {testvalue}".
        :type property_filters: list[str]
        :param statuses: Statuses of the resource.
        :type statuses: list[str]
        :param min_created_date_time: Minimum creation date of resource (inclusive).
        :type min_created_date_time: ~datetime.datetime
        :param max_created_date_time: Maximum creation date of resource (inclusive).
        :type max_created_date_time: ~datetime.datetime
        :param min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :type min_last_modified_date_time: ~datetime.datetime
        :param max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :type max_last_modified_date_time: ~datetime.datetime
        :param max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :type max_page_size: int
        :param skip_token: Skip token for getting next set of results.
        :type skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_tillage_data.build_list_request(
                    min_tillage_depth=min_tillage_depth,
                    max_tillage_depth=max_tillage_depth,
                    min_tillage_pressure=min_tillage_pressure,
                    max_tillage_pressure=max_tillage_pressure,
                    sources=sources,
                    associated_boundary_ids=associated_boundary_ids,
                    operation_boundary_ids=operation_boundary_ids,
                    min_operation_start_date_time=min_operation_start_date_time,
                    max_operation_start_date_time=max_operation_start_date_time,
                    min_operation_end_date_time=min_operation_end_date_time,
                    max_operation_end_date_time=max_operation_end_date_time,
                    min_operation_modified_date_time=min_operation_modified_date_time,
                    max_operation_modified_date_time=max_operation_modified_date_time,
                    min_area=min_area,
                    max_area=max_area,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
            else:
                request = rest_tillage_data.build_list_request(
                    min_tillage_depth=min_tillage_depth,
                    max_tillage_depth=max_tillage_depth,
                    min_tillage_pressure=min_tillage_pressure,
                    max_tillage_pressure=max_tillage_pressure,
                    sources=sources,
                    associated_boundary_ids=associated_boundary_ids,
                    operation_boundary_ids=operation_boundary_ids,
                    min_operation_start_date_time=min_operation_start_date_time,
                    max_operation_start_date_time=max_operation_start_date_time,
                    min_operation_end_date_time=min_operation_end_date_time,
                    max_operation_end_date_time=max_operation_end_date_time,
                    min_operation_modified_date_time=min_operation_modified_date_time,
                    max_operation_modified_date_time=max_operation_modified_date_time,
                    min_area=min_area,
                    max_area=max_area,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                request._internal_request.method = "GET"
                request.url = self._client.format_url(next_link)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('TillageDataListResponse', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/tillage-data'}  # type: ignore

    async def get(
        self,
        farmer_id: str,
        tillage_data_id: str,
        **kwargs: Any
    ) -> Optional[Any]:
        """Get a specified tillage data resource under a particular farmer.

        :param farmer_id: ID of the associated farmer resource.
        :type farmer_id: str
        :param tillage_data_id: ID of the tillage data resource.
        :type tillage_data_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_tillage_data.build_get_request(
            farmer_id=farmer_id,
            tillage_data_id=tillage_data_id,
            template_url=self.get.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('TillageData', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/farmers/{farmerId}/tillage-data/{tillageDataId}'}  # type: ignore

    async def create_or_update(
        self,
        farmer_id: str,
        tillage_data_id: str,
        tillage_data: Any = None,
        **kwargs: Any
    ) -> Any:
        """Creates or updates an tillage data resource under a particular farmer.

        :param farmer_id: ID of the associated farmer.
        :type farmer_id: str
        :param tillage_data_id: ID of the tillage data resource.
        :type tillage_data_id: str
        :param tillage_data: Tillage data resource payload to create or update.
        :type tillage_data: Any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop("content_type", "application/merge-patch+json")
        if tillage_data is not None:
            json = tillage_data
        else:
            json = None


        request = rest_tillage_data.build_create_or_update_request(
            farmer_id=farmer_id,
            tillage_data_id=tillage_data_id,
            json=json,
            content_type=content_type,
            template_url=self.create_or_update.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize('TillageData', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('TillageData', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': '/farmers/{farmerId}/tillage-data/{tillageDataId}'}  # type: ignore

    async def delete(
        self,
        farmer_id: str,
        tillage_data_id: str,
        **kwargs: Any
    ) -> None:
        """Deletes a specified tillage data resource under a particular farmer.

        :param farmer_id: ID of the associated farmer resource.
        :type farmer_id: str
        :param tillage_data_id: ID of the tillage data.
        :type tillage_data_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_tillage_data.build_delete_request(
            farmer_id=farmer_id,
            tillage_data_id=tillage_data_id,
            template_url=self.delete.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/farmers/{farmerId}/tillage-data/{tillageDataId}'}  # type: ignore
