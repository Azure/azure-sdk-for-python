# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.farmbeats.core.rest import HttpRequest

from ..rest import oauth_tokens as rest_oauth_tokens

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class OAuthTokensOperations(object):
    """OAuthTokensOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Returns a list of OAuthToken documents.

        :keyword auth_provider_ids: Name of AuthProvider.
        :paramtype auth_provider_ids: list[str]
        :keyword farmer_ids: List of farmers.
        :paramtype farmer_ids: list[str]
        :keyword is_valid: If the token object is valid.
        :paramtype is_valid: bool
        :keyword min_created_date_time: Minimum creation date of resource (inclusive).
        :paramtype min_created_date_time: ~datetime.datetime
        :keyword max_created_date_time: Maximum creation date of resource (inclusive).
        :paramtype max_created_date_time: ~datetime.datetime
        :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :paramtype min_last_modified_date_time: ~datetime.datetime
        :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :paramtype max_last_modified_date_time: ~datetime.datetime
        :keyword max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :paramtype max_page_size: int
        :keyword skip_token: Skip token for getting next set of results.
        :paramtype skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                auth_provider_ids = kwargs.pop('auth_provider_ids', None)  # type: Optional[List[str]]
                farmer_ids = kwargs.pop('farmer_ids', None)  # type: Optional[List[str]]
                is_valid = kwargs.pop('is_valid', None)  # type: Optional[bool]
                min_created_date_time = kwargs.pop('min_created_date_time', None)  # type: Optional[datetime.datetime]
                max_created_date_time = kwargs.pop('max_created_date_time', None)  # type: Optional[datetime.datetime]
                min_last_modified_date_time = kwargs.pop('min_last_modified_date_time', None)  # type: Optional[datetime.datetime]
                max_last_modified_date_time = kwargs.pop('max_last_modified_date_time', None)  # type: Optional[datetime.datetime]
                max_page_size = kwargs.pop('max_page_size', 50)  # type: Optional[int]
                skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]
                request = rest_oauth_tokens.build_list_request(
                    auth_provider_ids=auth_provider_ids,
                    farmer_ids=farmer_ids,
                    is_valid=is_valid,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
            else:
                auth_provider_ids = kwargs.pop('auth_provider_ids', None)  # type: Optional[List[str]]
                farmer_ids = kwargs.pop('farmer_ids', None)  # type: Optional[List[str]]
                is_valid = kwargs.pop('is_valid', None)  # type: Optional[bool]
                min_created_date_time = kwargs.pop('min_created_date_time', None)  # type: Optional[datetime.datetime]
                max_created_date_time = kwargs.pop('max_created_date_time', None)  # type: Optional[datetime.datetime]
                min_last_modified_date_time = kwargs.pop('min_last_modified_date_time', None)  # type: Optional[datetime.datetime]
                max_last_modified_date_time = kwargs.pop('max_last_modified_date_time', None)  # type: Optional[datetime.datetime]
                max_page_size = kwargs.pop('max_page_size', 50)  # type: Optional[int]
                skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]
                request = rest_oauth_tokens.build_list_request(
                    auth_provider_ids=auth_provider_ids,
                    farmer_ids=farmer_ids,
                    is_valid=is_valid,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                request._internal_request.method = "GET"
                request.url = self._client.format_url(next_link)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('OAuthTokenListResponse', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/oauth/tokens'}  # type: ignore

    def delete(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes OAuth Token for given oauth provider Id and farmer Id.

        :keyword farmer_id: Id of the associated farmer.
        :paramtype farmer_id: str
        :keyword oauth_provider_id: Id of the associated oauth provider.
        :paramtype oauth_provider_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        farmer_id = kwargs.pop('farmer_id')  # type: str
        oauth_provider_id = kwargs.pop('oauth_provider_id')  # type: str
        request = rest_oauth_tokens.build_delete_request(
            farmer_id=farmer_id,
            oauth_provider_id=oauth_provider_id,
            template_url=self.delete.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in []:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/oauth/tokens/:remove'}  # type: ignore

    def get_o_auth_connection_link(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> str
        """Returns Connection link needed in the OAuth flow.

        :keyword oauth_connect_request: OAuth Connect Request.
        :paramtype oauth_connect_request: Any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop("content_type", "application/json")
        oauth_connect_request = kwargs.pop('oauth_connect_request', None)  # type: Any
        if oauth_connect_request is not None:
            json = oauth_connect_request
        else:
            json = None


        request = rest_oauth_tokens.build_get_o_auth_connection_link_request(
            json=json,
            content_type=content_type,
            template_url=self.get_o_auth_connection_link.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_o_auth_connection_link.metadata = {'url': '/oauth/tokens/:connect'}  # type: ignore
