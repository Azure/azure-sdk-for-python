# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.farmbeats.core.rest import HttpRequest

from ..rest import crop_varieties as rest_crop_varieties

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class CropVarietiesOperations(object):
    """CropVarietiesOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_by_crop_id(
        self,
        crop_id,  # type: str
        crop_ids=None,  # type: Optional[List[str]]
        brands=None,  # type: Optional[List[str]]
        products=None,  # type: Optional[List[str]]
        ids=None,  # type: Optional[List[str]]
        names=None,  # type: Optional[List[str]]
        property_filters=None,  # type: Optional[List[str]]
        statuses=None,  # type: Optional[List[str]]
        min_created_date_time=None,  # type: Optional[datetime.datetime]
        max_created_date_time=None,  # type: Optional[datetime.datetime]
        min_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        max_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        max_page_size=50,  # type: Optional[int]
        skip_token=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Returns a paginated list of crop variety resources under a particular crop.

        :param crop_id: Id of the associated crop.
        :type crop_id: str
        :param crop_ids: CropIds of the resource.
        :type crop_ids: list[str]
        :param brands: Brands of the resource.
        :type brands: list[str]
        :param products: Products of the resource.
        :type products: list[str]
        :param ids: Ids of the resource.
        :type ids: list[str]
        :param names: Names of the resource.
        :type names: list[str]
        :param property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testkey} eq {testvalue}".
        :type property_filters: list[str]
        :param statuses: Statuses of the resource.
        :type statuses: list[str]
        :param min_created_date_time: Minimum creation date of resource (inclusive).
        :type min_created_date_time: ~datetime.datetime
        :param max_created_date_time: Maximum creation date of resource (inclusive).
        :type max_created_date_time: ~datetime.datetime
        :param min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :type min_last_modified_date_time: ~datetime.datetime
        :param max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :type max_last_modified_date_time: ~datetime.datetime
        :param max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :type max_page_size: int
        :param skip_token: Skip token for getting next set of results.
        :type skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_crop_varieties.build_list_by_crop_id_request(
                    crop_id=crop_id,
                    crop_ids=crop_ids,
                    brands=brands,
                    products=products,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_crop_id.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
            else:
                request = rest_crop_varieties.build_list_by_crop_id_request(
                    crop_id=crop_id,
                    crop_ids=crop_ids,
                    brands=brands,
                    products=products,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_crop_id.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                request._internal_request.method = "GET"
                request.url = self._client.format_url(next_link)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CropVarietyListResponse', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_by_crop_id.metadata = {'url': '/crops/{cropId}/crop-varieties'}  # type: ignore

    def list(
        self,
        crop_ids=None,  # type: Optional[List[str]]
        brands=None,  # type: Optional[List[str]]
        products=None,  # type: Optional[List[str]]
        ids=None,  # type: Optional[List[str]]
        names=None,  # type: Optional[List[str]]
        property_filters=None,  # type: Optional[List[str]]
        statuses=None,  # type: Optional[List[str]]
        min_created_date_time=None,  # type: Optional[datetime.datetime]
        max_created_date_time=None,  # type: Optional[datetime.datetime]
        min_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        max_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        max_page_size=50,  # type: Optional[int]
        skip_token=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Returns a paginated list of crop variety resources across all crops.

        :param crop_ids: CropIds of the resource.
        :type crop_ids: list[str]
        :param brands: Brands of the resource.
        :type brands: list[str]
        :param products: Products of the resource.
        :type products: list[str]
        :param ids: Ids of the resource.
        :type ids: list[str]
        :param names: Names of the resource.
        :type names: list[str]
        :param property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testkey} eq {testvalue}".
        :type property_filters: list[str]
        :param statuses: Statuses of the resource.
        :type statuses: list[str]
        :param min_created_date_time: Minimum creation date of resource (inclusive).
        :type min_created_date_time: ~datetime.datetime
        :param max_created_date_time: Maximum creation date of resource (inclusive).
        :type max_created_date_time: ~datetime.datetime
        :param min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :type min_last_modified_date_time: ~datetime.datetime
        :param max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :type max_last_modified_date_time: ~datetime.datetime
        :param max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :type max_page_size: int
        :param skip_token: Skip token for getting next set of results.
        :type skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_crop_varieties.build_list_request(
                    crop_ids=crop_ids,
                    brands=brands,
                    products=products,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
            else:
                request = rest_crop_varieties.build_list_request(
                    crop_ids=crop_ids,
                    brands=brands,
                    products=products,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                request._internal_request.method = "GET"
                request.url = self._client.format_url(next_link)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('CropVarietyListResponse', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/crop-varieties'}  # type: ignore

    def get(
        self,
        crop_id,  # type: str
        crop_variety_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[Any]
        """Gets a specified crop variety resource under a particular crop.

        :param crop_id: Id of the associted crop.
        :type crop_id: str
        :param crop_variety_id: Id of the crop variety.
        :type crop_variety_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_crop_varieties.build_get_request(
            crop_id=crop_id,
            crop_variety_id=crop_variety_id,
            template_url=self.get.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('CropVariety', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/crops/{cropId}/crop-varieties/{cropVarietyId}'}  # type: ignore

    def create_or_update(
        self,
        crop_id,  # type: str
        crop_variety_id,  # type: str
        crop_variety=None,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        """Creates or updates a crop variety resource.

        :param crop_id: Id of the crop resource.
        :type crop_id: str
        :param crop_variety_id: Id of the crop variety resource.
        :type crop_variety_id: str
        :param crop_variety: Crop variety resource payload to create or update.
        :type crop_variety: Any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop("content_type", "application/merge-patch+json")
        if crop_variety is not None:
            json = crop_variety
        else:
            json = None


        request = rest_crop_varieties.build_create_or_update_request(
            crop_id=crop_id,
            crop_variety_id=crop_variety_id,
            json=json,
            content_type=content_type,
            template_url=self.create_or_update.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize('CropVariety', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('CropVariety', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': '/crops/{cropId}/crop-varieties/{cropVarietyId}'}  # type: ignore

    def delete(
        self,
        crop_id,  # type: str
        crop_variety_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a specified crop variety resource under a particular crop.

        :param crop_id: Id of the crop.
        :type crop_id: str
        :param crop_variety_id: Id of the crop variety.
        :type crop_variety_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_crop_varieties.build_delete_request(
            crop_id=crop_id,
            crop_variety_id=crop_variety_id,
            template_url=self.delete.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/crops/{cropId}/crop-varieties/{cropVarietyId}'}  # type: ignore
