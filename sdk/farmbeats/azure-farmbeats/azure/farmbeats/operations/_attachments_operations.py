# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.farmbeats.core.rest import HttpRequest

from ..rest import attachments as rest_attachments

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class AttachmentsOperations(object):
    """AttachmentsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_by_farmer_id(
        self,
        farmer_id,  # type: str
        resource_ids=None,  # type: Optional[List[str]]
        resource_types=None,  # type: Optional[List[str]]
        ids=None,  # type: Optional[List[str]]
        names=None,  # type: Optional[List[str]]
        property_filters=None,  # type: Optional[List[str]]
        statuses=None,  # type: Optional[List[str]]
        min_created_date_time=None,  # type: Optional[datetime.datetime]
        max_created_date_time=None,  # type: Optional[datetime.datetime]
        min_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        max_last_modified_date_time=None,  # type: Optional[datetime.datetime]
        max_page_size=50,  # type: Optional[int]
        skip_token=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Returns a paginated list of attachment resources under a particular farmer.

        :param farmer_id: Id of the associated farmer.
        :type farmer_id: str
        :param resource_ids: Resource Ids of the resource.
        :type resource_ids: list[str]
        :param resource_types: Resource Types of the resource.
        :type resource_types: list[str]
        :param ids: Ids of the resource.
        :type ids: list[str]
        :param names: Names of the resource.
        :type names: list[str]
        :param property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testkey} eq {testvalue}".
        :type property_filters: list[str]
        :param statuses: Statuses of the resource.
        :type statuses: list[str]
        :param min_created_date_time: Minimum creation date of resource (inclusive).
        :type min_created_date_time: ~datetime.datetime
        :param max_created_date_time: Maximum creation date of resource (inclusive).
        :type max_created_date_time: ~datetime.datetime
        :param min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :type min_last_modified_date_time: ~datetime.datetime
        :param max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :type max_last_modified_date_time: ~datetime.datetime
        :param max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :type max_page_size: int
        :param skip_token: Skip token for getting next set of results.
        :type skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_attachments.build_list_by_farmer_id_request(
                    farmer_id=farmer_id,
                    resource_ids=resource_ids,
                    resource_types=resource_types,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
            else:
                request = rest_attachments.build_list_by_farmer_id_request(
                    farmer_id=farmer_id,
                    resource_ids=resource_ids,
                    resource_types=resource_types,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                request.url = self._client.format_url(request.url)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                request._internal_request.method = "GET"
                request.url = self._client.format_url(next_link)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('AttachmentListResponse', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_by_farmer_id.metadata = {'url': '/farmers/{farmerId}/attachments'}  # type: ignore

    def get(
        self,
        farmer_id,  # type: str
        attachment_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[Any]
        """Gets a specified attachment resource under a particular farmer.

        :param farmer_id: Id of the associted farmer.
        :type farmer_id: str
        :param attachment_id: Id of the attachment.
        :type attachment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Any]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_attachments.build_get_request(
            farmer_id=farmer_id,
            attachment_id=attachment_id,
            template_url=self.get.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Attachment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/farmers/{farmerId}/attachments/{attachmentId}'}  # type: ignore

    def create_or_update(
        self,
        farmer_id,  # type: str
        attachment_id,  # type: str
        file=None,  # type: Optional[IO]
        farmer_id1=None,  # type: Optional[str]
        resource_id=None,  # type: Optional[str]
        resource_type=None,  # type: Optional[str]
        original_file_name=None,  # type: Optional[str]
        id=None,  # type: Optional[str]
        status=None,  # type: Optional[str]
        created_date_time=None,  # type: Optional[str]
        modified_date_time=None,  # type: Optional[str]
        name=None,  # type: Optional[str]
        description=None,  # type: Optional[str]
        e_tag=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        """Creates or updates an attachment resource under a particular farmer.

        :param farmer_id: Id of the associated farmer resource.
        :type farmer_id: str
        :param attachment_id: Id of the attachment resource.
        :type attachment_id: str
        :param file: File to be uploaded.
        :type file: IO
        :param farmer_id1: Farmer id for this attachment.
        :type farmer_id1: str
        :param resource_id: Associated Resource id for this attachment.
        :type resource_id: str
        :param resource_type: Associated Resource type for this attachment
         i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData,
         TillageData, PlantingData.
        :type resource_type: str
        :param original_file_name: Original File Name for this attachment.
        :type original_file_name: str
        :param id: Unique id.
        :type id: str
        :param status: Status of the resource.
        :type status: str
        :param created_date_time: Date when resource was created.
        :type created_date_time: str
        :param modified_date_time: Date when resource was last modified.
        :type modified_date_time: str
        :param name: Name to identify resource.
        :type name: str
        :param description: Textual description of resource.
        :type description: str
        :param e_tag: The ETag value to implement optimistic concurrency.
        :type e_tag: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop("content_type", "multipart/form-data")
        # Construct form data
        files = {
            'file': file,
            'FarmerId': farmer_id1,
            'ResourceId': resource_id,
            'ResourceType': resource_type,
            'OriginalFileName': original_file_name,
            'Id': id,
            'Status': status,
            'CreatedDateTime': created_date_time,
            'ModifiedDateTime': modified_date_time,
            'Name': name,
            'Description': description,
            'ETag': e_tag,
        }


        request = rest_attachments.build_create_or_update_request(
            farmer_id=farmer_id,
            attachment_id=attachment_id,
            files=files,
            content_type=content_type,
            template_url=self.create_or_update.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = self._deserialize('Attachment', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('Attachment', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': '/farmers/{farmerId}/attachments/{attachmentId}'}  # type: ignore

    def delete(
        self,
        farmer_id,  # type: str
        attachment_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a specified attachment resource under a particular farmer.

        :param farmer_id: Id of the farmer.
        :type farmer_id: str
        :param attachment_id: Id of the attachment.
        :type attachment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_attachments.build_delete_request(
            farmer_id=farmer_id,
            attachment_id=attachment_id,
            template_url=self.delete.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/farmers/{farmerId}/attachments/{attachmentId}'}  # type: ignore

    def download(
        self,
        farmer_id,  # type: str
        attachment_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> IO
        """Downloads and returns attachment as response for the given input filePath.

        :param farmer_id: Id of the associated farmer.
        :type farmer_id: str
        :param attachment_id: Id of attachment to be downloaded.
        :type attachment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IO, or the result of cls(response)
        :rtype: IO
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[IO]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_attachments.build_download_request(
            farmer_id=farmer_id,
            attachment_id=attachment_id,
            template_url=self.download.metadata['url'],
            **kwargs
        )._internal_request
        request.url = self._client.format_url(request.url)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = response.stream_download(self._client._pipeline)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    download.metadata = {'url': '/farmers/{farmerId}/attachments/{attachmentId}/file'}  # type: ignore
