# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from json import loads as _loads
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.farmbeats.core.rest import HttpRequest

from ..rest import boundaries as rest_boundaries

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class BoundariesOperations(object):
    """BoundariesOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_by_farmer_id(
        self,
        farmer_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Returns a paginated list of boundary resources under a particular farmer.

        :param farmer_id: Id of the associated farmer.
        :type farmer_id: str
        :keyword is_primary: Is the boundary primary.
        :paramtype is_primary: bool
        :keyword parent_type: Type of the parent it belongs to.
        :paramtype parent_type: str
        :keyword parent_ids: Parent Ids of the resource.
        :paramtype parent_ids: list[str]
        :keyword min_acreage: Minimum acreage of the boundary (inclusive).
        :paramtype min_acreage: float
        :keyword max_acreage: Maximum acreage of the boundary (inclusive).
        :paramtype max_acreage: float
        :keyword ids: Ids of the resource.
        :paramtype ids: list[str]
        :keyword names: Names of the resource.
        :paramtype names: list[str]
        :keyword property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testKey} eq {testValue}".
        :paramtype property_filters: list[str]
        :keyword statuses: Statuses of the resource.
        :paramtype statuses: list[str]
        :keyword min_created_date_time: Minimum creation date of resource (inclusive).
        :paramtype min_created_date_time: ~datetime.datetime
        :keyword max_created_date_time: Maximum creation date of resource (inclusive).
        :paramtype max_created_date_time: ~datetime.datetime
        :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :paramtype min_last_modified_date_time: ~datetime.datetime
        :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :paramtype max_last_modified_date_time: ~datetime.datetime
        :keyword max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :paramtype max_page_size: int
        :keyword skip_token: Skip token for getting next set of results.
        :paramtype skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python



                # response body for status code(s): 200
                response_body == {
                    "$skipToken": "str (optional)",
                    "nextLink": "str (optional)",
                    "value": [
                        {
                            "acreage": "float (optional)",
                            "createdDateTime": "datetime (optional)",
                            "description": "str (optional)",
                            "eTag": "str (optional)",
                            "farmerId": "str (optional)",
                            "geometry": "geometry",
                            "id": "str (optional)",
                            "isPrimary": "bool (optional)",
                            "modifiedDateTime": "datetime (optional)",
                            "name": "str (optional)",
                            "parentId": "str (optional)",
                            "parentType": "str (optional)",
                            "properties": {
                                "str": "object (optional)"
                            },
                            "status": "str (optional)"
                        }
                    ]
                }

        """

        is_primary = kwargs.pop('is_primary', None)  # type: Optional[bool]
        parent_type = kwargs.pop('parent_type', None)  # type: Optional[str]
        parent_ids = kwargs.pop('parent_ids', None)  # type: Optional[List[str]]
        min_acreage = kwargs.pop('min_acreage', None)  # type: Optional[float]
        max_acreage = kwargs.pop('max_acreage', None)  # type: Optional[float]
        ids = kwargs.pop('ids', None)  # type: Optional[List[str]]
        names = kwargs.pop('names', None)  # type: Optional[List[str]]
        property_filters = kwargs.pop('property_filters', None)  # type: Optional[List[str]]
        statuses = kwargs.pop('statuses', None)  # type: Optional[List[str]]
        min_created_date_time = kwargs.pop('min_created_date_time', None)  # type: Optional[datetime.datetime]
        max_created_date_time = kwargs.pop('max_created_date_time', None)  # type: Optional[datetime.datetime]
        min_last_modified_date_time = kwargs.pop('min_last_modified_date_time', None)  # type: Optional[datetime.datetime]
        max_last_modified_date_time = kwargs.pop('max_last_modified_date_time', None)  # type: Optional[datetime.datetime]
        max_page_size = kwargs.pop('max_page_size', 50)  # type: Optional[int]
        skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_boundaries.build_list_by_farmer_id_request(
                    farmer_id=farmer_id,
                    is_primary=is_primary,
                    parent_type=parent_type,
                    parent_ids=parent_ids,
                    min_acreage=min_acreage,
                    max_acreage=max_acreage,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
            else:
                request = rest_boundaries.build_list_by_farmer_id_request(
                    farmer_id=farmer_id,
                    is_primary=is_primary,
                    parent_type=parent_type,
                    parent_ids=parent_ids,
                    min_acreage=min_acreage,
                    max_acreage=max_acreage,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
                request.url = self._client.format_url(next_link, **path_format_arguments)
            return request

        def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.text())
            list_of_elem = deserialized.get('value', [])
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get('nextLink', None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_by_farmer_id.metadata = {'url': '/farmers/{farmerId}/boundaries'}  # type: ignore

    def search_by_farmer_id(
        self,
        farmer_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Search for boundaries by fields and intersecting geometry.

        :param farmer_id: Id of the farmer.
        :type farmer_id: str
        :keyword body: Query filters.
        :paramtype body: Any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python



                # 'intersects_with_geometry' can be defined the following ways:
                # MultiPolygon geometry.
                intersects_with_geometry = {
                    "coordinates": [
                        [
                            [
                                [
                                    "float"
                                ]
                            ]
                        ]
                    ],
                    "type": "MultiPolygon"
                }
                # OR
                # Point geometry.
                intersects_with_geometry = {
                    "coordinates": [
                        "float"
                    ],
                    "type": "Point"
                }
                # OR
                # Polygon geometry.
                intersects_with_geometry = {
                    "coordinates": [
                        [
                            [
                                "float"
                            ]
                        ]
                    ],
                    "type": "Polygon"
                }

                # JSON input template you can fill out and use as your `json` input.
                body = {
                    "$maxPageSize": "int (optional). Default value is 50",
                    "$skipToken": "str (optional)",
                    "ids": [
                        "str (optional)"
                    ],
                    "intersectsWithGeometry": "intersects_with_geometry",
                    "isPrimary": "bool (optional)",
                    "maxAcreage": "float (optional)",
                    "maxCreatedDateTime": "datetime (optional)",
                    "maxLastModifiedDateTime": "datetime (optional)",
                    "minAcreage": "float (optional)",
                    "minCreatedDateTime": "datetime (optional)",
                    "minLastModifiedDateTime": "datetime (optional)",
                    "names": [
                        "str (optional)"
                    ],
                    "parentIds": [
                        "str (optional)"
                    ],
                    "parentType": "str (optional)",
                    "propertyFilters": [
                        "str (optional)"
                    ],
                    "statuses": [
                        "str (optional)"
                    ]
                }



                # response body for status code(s): 200
                response_body == {
                    "$skipToken": "str (optional)",
                    "nextLink": "str (optional)",
                    "value": [
                        {
                            "acreage": "float (optional)",
                            "createdDateTime": "datetime (optional)",
                            "description": "str (optional)",
                            "eTag": "str (optional)",
                            "farmerId": "str (optional)",
                            "geometry": "geometry",
                            "id": "str (optional)",
                            "isPrimary": "bool (optional)",
                            "modifiedDateTime": "datetime (optional)",
                            "name": "str (optional)",
                            "parentId": "str (optional)",
                            "parentType": "str (optional)",
                            "properties": {
                                "str": "object (optional)"
                            },
                            "status": "str (optional)"
                        }
                    ]
                }

        """

        body = kwargs.pop('body', None)  # type: Any
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                content_type = kwargs.pop("content_type", "application/json")
                if body is not None:
                    json = self._serialize.body(body, 'object')
                else:
                    json = None


                request = rest_boundaries.build_search_by_farmer_id_request(
                    farmer_id=farmer_id,
                    json=json,
                    content_type=content_type,
                    template_url=self.search_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
            else:
                content_type = kwargs.pop("content_type", "application/json")
                if body is not None:
                    json = self._serialize.body(body, 'object')
                else:
                    json = None


                request = rest_boundaries.build_search_by_farmer_id_request(
                    farmer_id=farmer_id,
                    json=json,
                    content_type=content_type,
                    template_url=self.search_by_farmer_id.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
                request.url = self._client.format_url(next_link, **path_format_arguments)
            return request

        def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.text())
            list_of_elem = deserialized.get('value', [])
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get('nextLink', None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    search_by_farmer_id.metadata = {'url': '/farmers/{farmerId}/boundaries'}  # type: ignore

    def list(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Returns a paginated list of boundary resources across all farmers.

        :keyword is_primary: Is the boundary primary.
        :paramtype is_primary: bool
        :keyword parent_type: Type of the parent it belongs to.
        :paramtype parent_type: str
        :keyword parent_ids: Parent Ids of the resource.
        :paramtype parent_ids: list[str]
        :keyword min_acreage: Minimum acreage of the boundary (inclusive).
        :paramtype min_acreage: float
        :keyword max_acreage: Maximum acreage of the boundary (inclusive).
        :paramtype max_acreage: float
        :keyword ids: Ids of the resource.
        :paramtype ids: list[str]
        :keyword names: Names of the resource.
        :paramtype names: list[str]
        :keyword property_filters: Filters on key-value pairs within the Properties object.
         eg. "{testKey} eq {testValue}".
        :paramtype property_filters: list[str]
        :keyword statuses: Statuses of the resource.
        :paramtype statuses: list[str]
        :keyword min_created_date_time: Minimum creation date of resource (inclusive).
        :paramtype min_created_date_time: ~datetime.datetime
        :keyword max_created_date_time: Maximum creation date of resource (inclusive).
        :paramtype max_created_date_time: ~datetime.datetime
        :keyword min_last_modified_date_time: Minimum last modified date of resource (inclusive).
        :paramtype min_last_modified_date_time: ~datetime.datetime
        :keyword max_last_modified_date_time: Maximum last modified date of resource (inclusive).
        :paramtype max_last_modified_date_time: ~datetime.datetime
        :keyword max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :paramtype max_page_size: int
        :keyword skip_token: Skip token for getting next set of results.
        :paramtype skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python



                # response body for status code(s): 200
                response_body == {
                    "$skipToken": "str (optional)",
                    "nextLink": "str (optional)",
                    "value": [
                        {
                            "acreage": "float (optional)",
                            "createdDateTime": "datetime (optional)",
                            "description": "str (optional)",
                            "eTag": "str (optional)",
                            "farmerId": "str (optional)",
                            "geometry": "geometry",
                            "id": "str (optional)",
                            "isPrimary": "bool (optional)",
                            "modifiedDateTime": "datetime (optional)",
                            "name": "str (optional)",
                            "parentId": "str (optional)",
                            "parentType": "str (optional)",
                            "properties": {
                                "str": "object (optional)"
                            },
                            "status": "str (optional)"
                        }
                    ]
                }

        """

        is_primary = kwargs.pop('is_primary', None)  # type: Optional[bool]
        parent_type = kwargs.pop('parent_type', None)  # type: Optional[str]
        parent_ids = kwargs.pop('parent_ids', None)  # type: Optional[List[str]]
        min_acreage = kwargs.pop('min_acreage', None)  # type: Optional[float]
        max_acreage = kwargs.pop('max_acreage', None)  # type: Optional[float]
        ids = kwargs.pop('ids', None)  # type: Optional[List[str]]
        names = kwargs.pop('names', None)  # type: Optional[List[str]]
        property_filters = kwargs.pop('property_filters', None)  # type: Optional[List[str]]
        statuses = kwargs.pop('statuses', None)  # type: Optional[List[str]]
        min_created_date_time = kwargs.pop('min_created_date_time', None)  # type: Optional[datetime.datetime]
        max_created_date_time = kwargs.pop('max_created_date_time', None)  # type: Optional[datetime.datetime]
        min_last_modified_date_time = kwargs.pop('min_last_modified_date_time', None)  # type: Optional[datetime.datetime]
        max_last_modified_date_time = kwargs.pop('max_last_modified_date_time', None)  # type: Optional[datetime.datetime]
        max_page_size = kwargs.pop('max_page_size', 50)  # type: Optional[int]
        skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_boundaries.build_list_request(
                    is_primary=is_primary,
                    parent_type=parent_type,
                    parent_ids=parent_ids,
                    min_acreage=min_acreage,
                    max_acreage=max_acreage,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
            else:
                request = rest_boundaries.build_list_request(
                    is_primary=is_primary,
                    parent_type=parent_type,
                    parent_ids=parent_ids,
                    min_acreage=min_acreage,
                    max_acreage=max_acreage,
                    ids=ids,
                    names=names,
                    property_filters=property_filters,
                    statuses=statuses,
                    min_created_date_time=min_created_date_time,
                    max_created_date_time=max_created_date_time,
                    min_last_modified_date_time=min_last_modified_date_time,
                    max_last_modified_date_time=max_last_modified_date_time,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
                request.url = self._client.format_url(next_link, **path_format_arguments)
            return request

        def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.text())
            list_of_elem = deserialized.get('value', [])
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get('nextLink', None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/boundaries'}  # type: ignore

    def search(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Search for boundaries across all farmers by fields and intersecting geometry.

        :keyword body: Query filters.
        :paramtype body: Any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python



                # 'intersects_with_geometry' can be defined the following ways:
                # MultiPolygon geometry.
                intersects_with_geometry = {
                    "coordinates": [
                        [
                            [
                                [
                                    "float"
                                ]
                            ]
                        ]
                    ],
                    "type": "MultiPolygon"
                }
                # OR
                # Point geometry.
                intersects_with_geometry = {
                    "coordinates": [
                        "float"
                    ],
                    "type": "Point"
                }
                # OR
                # Polygon geometry.
                intersects_with_geometry = {
                    "coordinates": [
                        [
                            [
                                "float"
                            ]
                        ]
                    ],
                    "type": "Polygon"
                }

                # JSON input template you can fill out and use as your `json` input.
                body = {
                    "$maxPageSize": "int (optional). Default value is 50",
                    "$skipToken": "str (optional)",
                    "ids": [
                        "str (optional)"
                    ],
                    "intersectsWithGeometry": "intersects_with_geometry",
                    "isPrimary": "bool (optional)",
                    "maxAcreage": "float (optional)",
                    "maxCreatedDateTime": "datetime (optional)",
                    "maxLastModifiedDateTime": "datetime (optional)",
                    "minAcreage": "float (optional)",
                    "minCreatedDateTime": "datetime (optional)",
                    "minLastModifiedDateTime": "datetime (optional)",
                    "names": [
                        "str (optional)"
                    ],
                    "parentIds": [
                        "str (optional)"
                    ],
                    "parentType": "str (optional)",
                    "propertyFilters": [
                        "str (optional)"
                    ],
                    "statuses": [
                        "str (optional)"
                    ]
                }



                # response body for status code(s): 200
                response_body == {
                    "$skipToken": "str (optional)",
                    "nextLink": "str (optional)",
                    "value": [
                        {
                            "acreage": "float (optional)",
                            "createdDateTime": "datetime (optional)",
                            "description": "str (optional)",
                            "eTag": "str (optional)",
                            "farmerId": "str (optional)",
                            "geometry": "geometry",
                            "id": "str (optional)",
                            "isPrimary": "bool (optional)",
                            "modifiedDateTime": "datetime (optional)",
                            "name": "str (optional)",
                            "parentId": "str (optional)",
                            "parentType": "str (optional)",
                            "properties": {
                                "str": "object (optional)"
                            },
                            "status": "str (optional)"
                        }
                    ]
                }

        """

        body = kwargs.pop('body', None)  # type: Any
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                content_type = kwargs.pop("content_type", "application/json")
                if body is not None:
                    json = self._serialize.body(body, 'object')
                else:
                    json = None


                request = rest_boundaries.build_search_request(
                    json=json,
                    content_type=content_type,
                    template_url=self.search.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
            else:
                content_type = kwargs.pop("content_type", "application/json")
                if body is not None:
                    json = self._serialize.body(body, 'object')
                else:
                    json = None


                request = rest_boundaries.build_search_request(
                    json=json,
                    content_type=content_type,
                    template_url=self.search.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
                request.url = self._client.format_url(next_link, **path_format_arguments)
            return request

        def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.text())
            list_of_elem = deserialized.get('value', [])
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get('nextLink', None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    search.metadata = {'url': '/boundaries'}  # type: ignore

    def get_cascade_delete_job_details(
        self,
        job_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        """Get cascade delete job for specified boundary.

        :param job_id: Id of the job.
        :type job_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python


                # response body for status code(s): 200
                response_body == {
                    "createdDateTime": "datetime (optional)",
                    "description": "str (optional)",
                    "durationInSeconds": "str (optional)",
                    "endTime": "datetime (optional)",
                    "farmerId": "str",
                    "id": "str (optional)",
                    "lastActionDateTime": "datetime (optional)",
                    "message": "str (optional)",
                    "name": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "resourceId": "str",
                    "resourceType": "str",
                    "startTime": "datetime (optional)",
                    "status": "str (optional)"
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_boundaries.build_get_cascade_delete_job_details_request(
            job_id=job_id,
            template_url=self.get_cascade_delete_job_details.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_cascade_delete_job_details.metadata = {'url': '/boundaries/cascade-delete/{jobId}'}  # type: ignore

    def _create_cascade_delete_job_initial(
        self,
        job_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        farmer_id = kwargs.pop('farmer_id')  # type: str
        boundary_id = kwargs.pop('boundary_id')  # type: str

        request = rest_boundaries.build_create_cascade_delete_job_request_initial(
            job_id=job_id,
            farmer_id=farmer_id,
            boundary_id=boundary_id,
            template_url=self._create_cascade_delete_job_initial.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    _create_cascade_delete_job_initial.metadata = {'url': '/boundaries/cascade-delete/{jobId}'}  # type: ignore

    def begin_create_cascade_delete_job(
        self,
        job_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller[Any]
        """Create a cascade delete job for specified boundary.

        :param job_id: Job ID supplied by end user.
        :type job_id: str
        :keyword farmer_id: ID of the associated farmer.
        :paramtype farmer_id: str
        :keyword boundary_id: ID of the boundary to be deleted.
        :paramtype boundary_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling.
         Pass in False for this operation to not poll, or pass in your own initialized polling object for a personal polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either Any or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[Any]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python


                # response body for status code(s): 202
                response_body == {
                    "createdDateTime": "datetime (optional)",
                    "description": "str (optional)",
                    "durationInSeconds": "str (optional)",
                    "endTime": "datetime (optional)",
                    "farmerId": "str",
                    "id": "str (optional)",
                    "lastActionDateTime": "datetime (optional)",
                    "message": "str (optional)",
                    "name": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "resourceId": "str",
                    "resourceType": "str",
                    "startTime": "datetime (optional)",
                    "status": "str (optional)"
                }

        """

        farmer_id = kwargs.pop('farmer_id')  # type: str
        boundary_id = kwargs.pop('boundary_id')  # type: str
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._create_cascade_delete_job_initial(
                job_id=job_id,

                farmer_id=farmer_id,

                boundary_id=boundary_id,


                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _loads(response.text())

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }

        if polling is True: polling_method = LROBasePolling(lro_delay, lro_options={'final-state-via': 'location'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_create_cascade_delete_job.metadata = {'url': '/boundaries/cascade-delete/{jobId}'}  # type: ignore


    def get(
        self,
        farmer_id,  # type: str
        boundary_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        """Gets a specified boundary resource under a particular farmer.

        :param farmer_id: Id of the associated farmer.
        :type farmer_id: str
        :param boundary_id: Id of the boundary.
        :type boundary_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python


                # response body for status code(s): 200
                response_body == {
                    "acreage": "float (optional)",
                    "createdDateTime": "datetime (optional)",
                    "description": "str (optional)",
                    "eTag": "str (optional)",
                    "farmerId": "str (optional)",
                    "geometry": "geometry",
                    "id": "str (optional)",
                    "isPrimary": "bool (optional)",
                    "modifiedDateTime": "datetime (optional)",
                    "name": "str (optional)",
                    "parentId": "str (optional)",
                    "parentType": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "status": "str (optional)"
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_boundaries.build_get_request(
            farmer_id=farmer_id,
            boundary_id=boundary_id,
            template_url=self.get.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/farmers/{farmerId}/boundaries/{boundaryId}'}  # type: ignore

    def create_or_update(
        self,
        farmer_id,  # type: str
        boundary_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        """Creates or updates a boundary resource.

        :param farmer_id: Id of the farmer resource.
        :type farmer_id: str
        :param boundary_id: Id of the boundary resource.
        :type boundary_id: str
        :keyword body: Boundary resource payload to create or update.
        :paramtype body: Any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python


                # 'geometry' can be defined the following ways:
                # MultiPolygon geometry.
                geometry = {
                    "coordinates": [
                        [
                            [
                                [
                                    "float"
                                ]
                            ]
                        ]
                    ],
                    "type": "MultiPolygon"
                }
                # OR
                # Point geometry.
                geometry = {
                    "coordinates": [
                        "float"
                    ],
                    "type": "Point"
                }
                # OR
                # Polygon geometry.
                geometry = {
                    "coordinates": [
                        [
                            [
                                "float"
                            ]
                        ]
                    ],
                    "type": "Polygon"
                }

                # JSON input template you can fill out and use as your `json` input.
                body = {
                    "acreage": "float (optional)",
                    "createdDateTime": "datetime (optional)",
                    "description": "str (optional)",
                    "eTag": "str (optional)",
                    "farmerId": "str (optional)",
                    "geometry": "geometry",
                    "id": "str (optional)",
                    "isPrimary": "bool (optional)",
                    "modifiedDateTime": "datetime (optional)",
                    "name": "str (optional)",
                    "parentId": "str (optional)",
                    "parentType": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "status": "str (optional)"
                }


                # response body for status code(s): 200, 201
                response_body == {
                    "acreage": "float (optional)",
                    "createdDateTime": "datetime (optional)",
                    "description": "str (optional)",
                    "eTag": "str (optional)",
                    "farmerId": "str (optional)",
                    "geometry": "geometry",
                    "id": "str (optional)",
                    "isPrimary": "bool (optional)",
                    "modifiedDateTime": "datetime (optional)",
                    "name": "str (optional)",
                    "parentId": "str (optional)",
                    "parentType": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "status": "str (optional)"
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        body = kwargs.pop('body', None)  # type: Any

        content_type = kwargs.pop("content_type", "application/merge-patch+json")
        if body is not None:
            json = self._serialize.body(body, 'object')
        else:
            json = None


        request = rest_boundaries.build_create_or_update_request(
            farmer_id=farmer_id,
            boundary_id=boundary_id,
            json=json,
            content_type=content_type,
            template_url=self.create_or_update.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            deserialized = _loads(response.text())

        if response.status_code == 201:
            deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': '/farmers/{farmerId}/boundaries/{boundaryId}'}  # type: ignore

    def delete(
        self,
        farmer_id,  # type: str
        boundary_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a specified boundary resource under a particular farmer.

        :param farmer_id: Id of the farmer.
        :type farmer_id: str
        :param boundary_id: Id of the boundary.
        :type boundary_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_boundaries.build_delete_request(
            farmer_id=farmer_id,
            boundary_id=boundary_id,
            template_url=self.delete.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/farmers/{farmerId}/boundaries/{boundaryId}'}  # type: ignore

    def get_overlap(
        self,
        farmer_id,  # type: str
        boundary_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        """Returns overlapping acreage between two boundary Ids.

        :param farmer_id: Id of the farmer.
        :type farmer_id: str
        :param boundary_id: Id of the boundary.
        :type boundary_id: str
        :keyword other_farmer_id: FarmerId of the other field.
        :paramtype other_farmer_id: str
        :keyword other_boundary_id: Id of the other boundary.
        :paramtype other_boundary_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python


                # response body for status code(s): 200
                response_body == {
                    "boundaryAcreage": "float (optional)",
                    "intersectingAcreage": "float (optional)",
                    "otherBoundaryAcreage": "float (optional)"
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        other_farmer_id = kwargs.pop('other_farmer_id')  # type: str
        other_boundary_id = kwargs.pop('other_boundary_id')  # type: str

        request = rest_boundaries.build_get_overlap_request(
            farmer_id=farmer_id,
            boundary_id=boundary_id,
            other_farmer_id=other_farmer_id,
            other_boundary_id=other_boundary_id,
            template_url=self.get_overlap.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_overlap.metadata = {'url': '/farmers/{farmerId}/boundaries/{boundaryId}/overlap'}  # type: ignore
