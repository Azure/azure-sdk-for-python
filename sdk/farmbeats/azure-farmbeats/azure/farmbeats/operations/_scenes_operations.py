# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from json import loads as _loads
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.farmbeats.core.rest import HttpRequest

from ..rest import scenes as rest_scenes

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, Iterable, List, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class ScenesOperations(object):
    """ScenesOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable[Any]
        """Returns a paginated list of scene resources.

        :keyword farmer_id: FarmerId.
        :paramtype farmer_id: str
        :keyword boundary_id: BoundaryId.
        :paramtype boundary_id: str
        :keyword provider: Provider name of scene data.
        :paramtype provider: str
        :keyword source: Source name of scene data, default value Sentinel_2_L2A (Sentinel 2 L2A).
        :paramtype source: str
        :keyword start_date_time: Scene start UTC datetime (inclusive), sample format:
         yyyy-MM-ddThh:mm:ssZ.
        :paramtype start_date_time: ~datetime.datetime
        :keyword end_date_time: Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ.
        :paramtype end_date_time: ~datetime.datetime
        :keyword max_cloud_coverage_percentage: Filter scenes with cloud coverage percentage less than
         max value. Range [0 to 100.0].
        :paramtype max_cloud_coverage_percentage: float
        :keyword max_dark_pixel_coverage_percentage: Filter scenes with dark pixel coverage percentage
         less than max value. Range [0 to 100.0].
        :paramtype max_dark_pixel_coverage_percentage: float
        :keyword image_names: List of image names to be filtered.
        :paramtype image_names: list[str]
        :keyword image_resolutions: List of image resolutions in meters to be filtered.
        :paramtype image_resolutions: list[float]
        :keyword image_formats: List of image formats to be filtered.
        :paramtype image_formats: list[str]
        :keyword max_page_size: Maximum number of items needed (inclusive).
         Minimum = 10, Maximum = 1000, Default value = 50.
        :paramtype max_page_size: int
        :keyword skip_token: Skip token for getting next set of results.
        :paramtype skip_token: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Any or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python



                # response body for status code(s): 200
                response_body == {
                    "$skipToken": "str (optional)",
                    "nextLink": "str (optional)",
                    "value": [
                        {
                            "boundaryId": "str (optional)",
                            "cloudCoverPercentage": "float (optional)",
                            "darkPixelPercentage": "float (optional)",
                            "eTag": "str (optional)",
                            "farmerId": "str (optional)",
                            "id": "str (optional)",
                            "imageFiles": [
                                {
                                    "fileLink": "str (optional)",
                                    "imageFormat": "str (optional)",
                                    "name": "str",
                                    "resolution": "float (optional)"
                                }
                            ],
                            "imageFormat": "str (optional)",
                            "ndviMedianValue": "float (optional)",
                            "provider": "str (optional)",
                            "sceneDateTime": "datetime (optional)",
                            "source": "str (optional)"
                        }
                    ]
                }

        """

        farmer_id = kwargs.pop('farmer_id')  # type: str
        boundary_id = kwargs.pop('boundary_id')  # type: str
        provider = kwargs.pop('provider', "Microsoft")  # type: str
        source = kwargs.pop('source', "Sentinel_2_L2A")  # type: Optional[str]
        start_date_time = kwargs.pop('start_date_time', None)  # type: Optional[datetime.datetime]
        end_date_time = kwargs.pop('end_date_time', None)  # type: Optional[datetime.datetime]
        max_cloud_coverage_percentage = kwargs.pop('max_cloud_coverage_percentage', 100)  # type: Optional[float]
        max_dark_pixel_coverage_percentage = kwargs.pop('max_dark_pixel_coverage_percentage', 100)  # type: Optional[float]
        image_names = kwargs.pop('image_names', None)  # type: Optional[List[str]]
        image_resolutions = kwargs.pop('image_resolutions', None)  # type: Optional[List[float]]
        image_formats = kwargs.pop('image_formats', None)  # type: Optional[List[str]]
        max_page_size = kwargs.pop('max_page_size', 50)  # type: Optional[int]
        skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        def prepare_request(next_link=None):
            if not next_link:
                request = rest_scenes.build_list_request(
                    farmer_id=farmer_id,
                    boundary_id=boundary_id,
                    provider=provider,
                    source=source,
                    start_date_time=start_date_time,
                    end_date_time=end_date_time,
                    max_cloud_coverage_percentage=max_cloud_coverage_percentage,
                    max_dark_pixel_coverage_percentage=max_dark_pixel_coverage_percentage,
                    image_names=image_names,
                    image_resolutions=image_resolutions,
                    image_formats=image_formats,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
            else:
                request = rest_scenes.build_list_request(
                    farmer_id=farmer_id,
                    boundary_id=boundary_id,
                    provider=provider,
                    source=source,
                    start_date_time=start_date_time,
                    end_date_time=end_date_time,
                    max_cloud_coverage_percentage=max_cloud_coverage_percentage,
                    max_dark_pixel_coverage_percentage=max_dark_pixel_coverage_percentage,
                    image_names=image_names,
                    image_resolutions=image_resolutions,
                    image_formats=image_formats,
                    max_page_size=max_page_size,
                    skip_token=skip_token,
                    template_url=self.list.metadata['url'],
                    **kwargs
                )._internal_request
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)
                kwargs.pop("content_type", None)
                # little hacky, but this code will soon be replaced with code that won't need the hack
                path_format_arguments = {
                    'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
                }
                request.method = "GET"
                request.url = self._client.format_url(next_link, **path_format_arguments)
            return request

        def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.text())
            list_of_elem = deserialized.get('value', [])
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get('nextLink', None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/scenes'}  # type: ignore

    def _create_satellite_data_ingestion_job_initial(
        self,
        job_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        job = kwargs.pop('job', None)  # type: Any

        content_type = kwargs.pop("content_type", "application/json")
        if job is not None:
            json = self._serialize.body(job, 'object')
        else:
            json = None


        request = rest_scenes.build_create_satellite_data_ingestion_job_request_initial(
            job_id=job_id,
            json=json,
            content_type=content_type,
            template_url=self._create_satellite_data_ingestion_job_initial.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    _create_satellite_data_ingestion_job_initial.metadata = {'url': '/scenes/satellite/ingest-data/{jobId}'}  # type: ignore

    def begin_create_satellite_data_ingestion_job(
        self,
        job_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> LROPoller[Any]
        """Create a satellite data ingestion job.

        :param job_id: JobId provided by user.
        :type job_id: str
        :keyword job: Job parameters supplied by user.
        :paramtype job: Any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling.
         Pass in False for this operation to not poll, or pass in your own initialized polling object for a personal polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
        :return: An instance of LROPoller that returns either Any or the result of cls(response)
        :rtype: ~azure.core.polling.LROPoller[Any]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python


                # JSON input template you can fill out and use as your `json` input.
                job = {
                    "boundaryId": "str",
                    "createdDateTime": "datetime (optional)",
                    "data": {
                        "imageFormats": [
                            "str (optional)"
                        ],
                        "imageNames": [
                            "str (optional)"
                        ],
                        "imageResolutions": [
                            "float (optional)"
                        ]
                    },
                    "description": "str (optional)",
                    "durationInSeconds": "str (optional)",
                    "endDateTime": "datetime",
                    "endTime": "datetime (optional)",
                    "farmerId": "str",
                    "id": "str (optional)",
                    "lastActionDateTime": "datetime (optional)",
                    "message": "str (optional)",
                    "name": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "provider": "str (optional)",
                    "source": "str (optional)",
                    "startDateTime": "datetime",
                    "startTime": "datetime (optional)",
                    "status": "str (optional)"
                }


                # response body for status code(s): 202
                response_body == {
                    "boundaryId": "str",
                    "createdDateTime": "datetime (optional)",
                    "data": {
                        "imageFormats": [
                            "str (optional)"
                        ],
                        "imageNames": [
                            "str (optional)"
                        ],
                        "imageResolutions": [
                            "float (optional)"
                        ]
                    },
                    "description": "str (optional)",
                    "durationInSeconds": "str (optional)",
                    "endDateTime": "datetime",
                    "endTime": "datetime (optional)",
                    "farmerId": "str",
                    "id": "str (optional)",
                    "lastActionDateTime": "datetime (optional)",
                    "message": "str (optional)",
                    "name": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "provider": "str (optional)",
                    "source": "str (optional)",
                    "startDateTime": "datetime",
                    "startTime": "datetime (optional)",
                    "status": "str (optional)"
                }

        """

        job = kwargs.pop('job', None)  # type: Any
        polling = kwargs.pop('polling', True)  # type: Union[bool, PollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._create_satellite_data_ingestion_job_initial(
                job_id=job_id,

                job=job,


                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            deserialized = _loads(response.text())

            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }

        if polling is True: polling_method = LROBasePolling(lro_delay, lro_options={'final-state-via': 'location'}, path_format_arguments=path_format_arguments,  **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_create_satellite_data_ingestion_job.metadata = {'url': '/scenes/satellite/ingest-data/{jobId}'}  # type: ignore


    def get_satellite_data_ingestion_job_details(
        self,
        job_id,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Any
        """Get a satellite data ingestion job.

        :param job_id: Id of the job.
        :type job_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Any, or the result of cls(response)
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python


                # response body for status code(s): 200
                response_body == {
                    "boundaryId": "str",
                    "createdDateTime": "datetime (optional)",
                    "data": {
                        "imageFormats": [
                            "str (optional)"
                        ],
                        "imageNames": [
                            "str (optional)"
                        ],
                        "imageResolutions": [
                            "float (optional)"
                        ]
                    },
                    "description": "str (optional)",
                    "durationInSeconds": "str (optional)",
                    "endDateTime": "datetime",
                    "endTime": "datetime (optional)",
                    "farmerId": "str",
                    "id": "str (optional)",
                    "lastActionDateTime": "datetime (optional)",
                    "message": "str (optional)",
                    "name": "str (optional)",
                    "properties": {
                        "str": "object (optional)"
                    },
                    "provider": "str (optional)",
                    "source": "str (optional)",
                    "startDateTime": "datetime",
                    "startTime": "datetime (optional)",
                    "status": "str (optional)"
                }

        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        request = rest_scenes.build_get_satellite_data_ingestion_job_details_request(
            job_id=job_id,
            template_url=self.get_satellite_data_ingestion_job_details.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _loads(response.text())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_satellite_data_ingestion_job_details.metadata = {'url': '/scenes/satellite/ingest-data/{jobId}'}  # type: ignore

    def download(
        self,
        **kwargs  # type: Any
    ):
        # type: (...) -> IO
        """Downloads and returns file Stream as response for the given input filePath.

        :keyword file_path: cloud storage path of scene file.
        :paramtype file_path: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: IO, or the result of cls(response)
        :rtype: IO
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[IO]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        file_path = kwargs.pop('file_path')  # type: str

        request = rest_scenes.build_download_request(
            file_path=file_path,
            template_url=self.download.metadata['url'],
            **kwargs
        )._internal_request
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)
        kwargs.pop("content_type", None)

        pipeline_response = self._client._pipeline.run(request, stream=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = response.stream_download(self._client._pipeline)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    download.metadata = {'url': '/scenes/downloadFiles'}  # type: ignore
