# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource_py3 import Resource


class ClusterUpdate(Resource):
    """Class representing an update to a Kusto cluster.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Resource location.
    :type location: str
    :param sku: The SKU of the cluster.
    :type sku: ~azure.mgmt.kusto.models.AzureSku
    :ivar state: The state of the resource. Possible values include:
     'Creating', 'Unavailable', 'Running', 'Deleting', 'Deleted', 'Stopping',
     'Stopped', 'Starting', 'Updating'
    :vartype state: str or ~azure.mgmt.kusto.models.State
    :ivar provisioning_state: The provisioned state of the resource. Possible
     values include: 'Running', 'Creating', 'Deleting', 'Succeeded', 'Failed',
     'Moving'
    :vartype provisioning_state: str or
     ~azure.mgmt.kusto.models.ProvisioningState
    :ivar uri: The cluster URI.
    :vartype uri: str
    :ivar data_ingestion_uri: The cluster data ingestion URI.
    :vartype data_ingestion_uri: str
    :param trusted_external_tenants: The cluster's external tenants.
    :type trusted_external_tenants:
     list[~azure.mgmt.kusto.models.TrustedExternalTenant]
    :param optimized_autoscale: Optimized auto scale definition.
    :type optimized_autoscale: ~azure.mgmt.kusto.models.OptimizedAutoscale
    :param enable_disk_encryption: A boolean value that indicates if the
     cluster's disks are encrypted.
    :type enable_disk_encryption: bool
    :param enable_streaming_ingest: A boolean value that indicates if the
     streaming ingest is enabled. Default value: False .
    :type enable_streaming_ingest: bool
    :param virtual_network_configuration: Virtual network definition.
    :type virtual_network_configuration:
     ~azure.mgmt.kusto.models.VirtualNetworkConfiguration
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'state': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'uri': {'readonly': True},
        'data_ingestion_uri': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'AzureSku'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'uri': {'key': 'properties.uri', 'type': 'str'},
        'data_ingestion_uri': {'key': 'properties.dataIngestionUri', 'type': 'str'},
        'trusted_external_tenants': {'key': 'properties.trustedExternalTenants', 'type': '[TrustedExternalTenant]'},
        'optimized_autoscale': {'key': 'properties.optimizedAutoscale', 'type': 'OptimizedAutoscale'},
        'enable_disk_encryption': {'key': 'properties.enableDiskEncryption', 'type': 'bool'},
        'enable_streaming_ingest': {'key': 'properties.enableStreamingIngest', 'type': 'bool'},
        'virtual_network_configuration': {'key': 'properties.virtualNetworkConfiguration', 'type': 'VirtualNetworkConfiguration'},
    }

    def __init__(self, *, tags=None, location: str=None, sku=None, trusted_external_tenants=None, optimized_autoscale=None, enable_disk_encryption: bool=None, enable_streaming_ingest: bool=False, virtual_network_configuration=None, **kwargs) -> None:
        super(ClusterUpdate, self).__init__(**kwargs)
        self.tags = tags
        self.location = location
        self.sku = sku
        self.state = None
        self.provisioning_state = None
        self.uri = None
        self.data_ingestion_uri = None
        self.trusted_external_tenants = trusted_external_tenants
        self.optimized_autoscale = optimized_autoscale
        self.enable_disk_encryption = enable_disk_encryption
        self.enable_streaming_ingest = enable_streaming_ingest
        self.virtual_network_configuration = virtual_network_configuration
