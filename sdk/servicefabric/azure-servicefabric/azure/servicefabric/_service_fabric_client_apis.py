# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential
    from azure.core.pipeline.transport import HttpRequest, HttpResponse

from ._configuration import ServiceFabricClientAPIsConfiguration
from .operations import ServiceFabricClientAPIsOperationsMixin
from .operations import MeshSecretOperations
from .operations import MeshSecretValueOperations
from .operations import MeshVolumeOperations
from .operations import MeshNetworkOperations
from .operations import MeshApplicationOperations
from .operations import MeshServiceOperations
from .operations import MeshCodePackageOperations
from .operations import MeshServiceReplicaOperations
from .operations import MeshGatewayOperations
from . import models


class ServiceFabricClientAPIs(ServiceFabricClientAPIsOperationsMixin):
    """Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.

    :ivar mesh_secret: MeshSecretOperations operations
    :vartype mesh_secret: azure.servicefabric.operations.MeshSecretOperations
    :ivar mesh_secret_value: MeshSecretValueOperations operations
    :vartype mesh_secret_value: azure.servicefabric.operations.MeshSecretValueOperations
    :ivar mesh_volume: MeshVolumeOperations operations
    :vartype mesh_volume: azure.servicefabric.operations.MeshVolumeOperations
    :ivar mesh_network: MeshNetworkOperations operations
    :vartype mesh_network: azure.servicefabric.operations.MeshNetworkOperations
    :ivar mesh_application: MeshApplicationOperations operations
    :vartype mesh_application: azure.servicefabric.operations.MeshApplicationOperations
    :ivar mesh_service: MeshServiceOperations operations
    :vartype mesh_service: azure.servicefabric.operations.MeshServiceOperations
    :ivar mesh_code_package: MeshCodePackageOperations operations
    :vartype mesh_code_package: azure.servicefabric.operations.MeshCodePackageOperations
    :ivar mesh_service_replica: MeshServiceReplicaOperations operations
    :vartype mesh_service_replica: azure.servicefabric.operations.MeshServiceReplicaOperations
    :ivar mesh_gateway: MeshGatewayOperations operations
    :vartype mesh_gateway: azure.servicefabric.operations.MeshGatewayOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'http://localhost:19080/'
        self._config = ServiceFabricClientAPIsConfiguration(credential, **kwargs)
        self._client = PipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.mesh_secret = MeshSecretOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mesh_secret_value = MeshSecretValueOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mesh_volume = MeshVolumeOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mesh_network = MeshNetworkOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mesh_application = MeshApplicationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mesh_service = MeshServiceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mesh_code_package = MeshCodePackageOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mesh_service_replica = MeshServiceReplicaOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.mesh_gateway = MeshGatewayOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def _send_request(self, http_request, **kwargs):
        # type: (HttpRequest, Any) -> HttpResponse
        """Runs the network request through the client's chained policies.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.pipeline.transport.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to True.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.pipeline.transport.HttpResponse
        """
        http_request.url = self._client.format_url(http_request.url)
        stream = kwargs.pop("stream", True)
        pipeline_response = self._client._pipeline.run(http_request, stream=stream, **kwargs)
        return pipeline_response.http_response

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> ServiceFabricClientAPIs
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
