# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._services_operations import ServicesOperations
from ._private_endpoint_connections_operations import PrivateEndpointConnectionsOperations
from ._private_link_resources_operations import PrivateLinkResourcesOperations
from ._workspaces_operations import WorkspacesOperations
from ._dicom_services_operations import DicomServicesOperations
from ._iot_connectors_operations import IotConnectorsOperations
from ._fhir_destinations_operations import FhirDestinationsOperations
from ._iot_connector_fhir_destination_operations import IotConnectorFhirDestinationOperations
from ._fhir_services_operations import FhirServicesOperations
from ._workspace_private_endpoint_connections_operations import WorkspacePrivateEndpointConnectionsOperations
from ._workspace_private_link_resources_operations import WorkspacePrivateLinkResourcesOperations
from ._operations import Operations
from ._operation_results_operations import OperationResultsOperations

from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "ServicesOperations",
    "PrivateEndpointConnectionsOperations",
    "PrivateLinkResourcesOperations",
    "WorkspacesOperations",
    "DicomServicesOperations",
    "IotConnectorsOperations",
    "FhirDestinationsOperations",
    "IotConnectorFhirDestinationOperations",
    "FhirServicesOperations",
    "WorkspacePrivateEndpointConnectionsOperations",
    "WorkspacePrivateLinkResourcesOperations",
    "Operations",
    "OperationResultsOperations",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
