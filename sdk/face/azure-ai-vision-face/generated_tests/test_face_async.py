# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import FacePreparer
from testpreparer_async import FaceClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestFaceAsync(FaceClientTestBaseAsync):
    @FacePreparer()
    @recorded_by_proxy_async
    async def test_find_similar(self, face_endpoint):
        client = self.create_async_client(endpoint=face_endpoint)
        response = await client.find_similar(
            body={"faceId": "str", "faceIds": ["str"], "maxNumOfCandidatesReturned": 0, "mode": "str"},
            face_id="str",
            face_ids=["str"],
        )

        # please add some check logic here by yourself
        # ...

    @FacePreparer()
    @recorded_by_proxy_async
    async def test_verify_face_to_face(self, face_endpoint):
        client = self.create_async_client(endpoint=face_endpoint)
        response = await client.verify_face_to_face(
            body={"faceId1": "str", "faceId2": "str"},
            face_id1="str",
            face_id2="str",
        )

        # please add some check logic here by yourself
        # ...

    @FacePreparer()
    @recorded_by_proxy_async
    async def test_group(self, face_endpoint):
        client = self.create_async_client(endpoint=face_endpoint)
        response = await client.group(
            body={"faceIds": ["str"]},
            face_ids=["str"],
        )

        # please add some check logic here by yourself
        # ...

    @FacePreparer()
    @recorded_by_proxy_async
    async def test_find_similar_from_large_face_list(self, face_endpoint):
        client = self.create_async_client(endpoint=face_endpoint)
        response = await client.find_similar_from_large_face_list(
            body={"faceId": "str", "largeFaceListId": "str", "maxNumOfCandidatesReturned": 0, "mode": "str"},
            face_id="str",
            large_face_list_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FacePreparer()
    @recorded_by_proxy_async
    async def test_identify_from_large_person_group(self, face_endpoint):
        client = self.create_async_client(endpoint=face_endpoint)
        response = await client.identify_from_large_person_group(
            body={
                "faceIds": ["str"],
                "largePersonGroupId": "str",
                "confidenceThreshold": 0.0,
                "maxNumOfCandidatesReturned": 0,
            },
            face_ids=["str"],
            large_person_group_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FacePreparer()
    @recorded_by_proxy_async
    async def test_verify_from_large_person_group(self, face_endpoint):
        client = self.create_async_client(endpoint=face_endpoint)
        response = await client.verify_from_large_person_group(
            body={"faceId": "str", "largePersonGroupId": "str", "personId": "str"},
            face_id="str",
            large_person_group_id="str",
            person_id="str",
        )

        # please add some check logic here by yourself
        # ...
