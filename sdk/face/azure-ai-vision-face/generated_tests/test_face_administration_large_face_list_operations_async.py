# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import FaceAdministrationPreparer
from testpreparer_async import FaceAdministrationClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestFaceAdministrationLargeFaceListOperationsAsync(FaceAdministrationClientTestBaseAsync):
    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_create(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.create(
            large_face_list_id="str",
            body={"name": "str", "recognitionModel": "str", "userData": "str"},
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_delete(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.delete(
            large_face_list_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_get(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.get(
            large_face_list_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_update(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.update(
            large_face_list_id="str",
            body={"name": "str", "userData": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_get_large_face_lists(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.get_large_face_lists()

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_get_training_status(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.get_training_status(
            large_face_list_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_begin_train(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await (
            await client.large_face_list.begin_train(
                large_face_list_id="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_add_face_from_url(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.add_face_from_url(
            large_face_list_id="str",
            body={"url": "str"},
            url="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_add_face(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.add_face(
            large_face_list_id="str",
            image_content=bytes("bytes", encoding="utf-8"),
            content_type="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_delete_face(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.delete_face(
            large_face_list_id="str",
            persisted_face_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_get_face(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.get_face(
            large_face_list_id="str",
            persisted_face_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_update_face(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.update_face(
            large_face_list_id="str",
            persisted_face_id="str",
            body={"userData": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy_async
    async def test_large_face_list_get_faces(self, faceadministration_endpoint):
        client = self.create_async_client(endpoint=faceadministration_endpoint)
        response = await client.large_face_list.get_faces(
            large_face_list_id="str",
        )

        # please add some check logic here by yourself
        # ...
