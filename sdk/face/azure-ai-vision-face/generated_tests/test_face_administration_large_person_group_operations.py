# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import FaceAdministrationClientTestBase, FaceAdministrationPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestFaceAdministrationLargePersonGroupOperations(FaceAdministrationClientTestBase):
    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_create(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.create(
            large_person_group_id="str",
            body={"name": "str", "recognitionModel": "str", "userData": "str"},
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_delete(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.delete(
            large_person_group_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_get(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.get(
            large_person_group_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_update(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.update(
            large_person_group_id="str",
            body={"name": "str", "userData": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_get_large_person_groups(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.get_large_person_groups()

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_get_training_status(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.get_training_status(
            large_person_group_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_begin_train(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.begin_train(
            large_person_group_id="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_create_person(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.create_person(
            large_person_group_id="str",
            body={"name": "str", "userData": "str"},
            name="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_delete_person(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.delete_person(
            large_person_group_id="str",
            person_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_get_person(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.get_person(
            large_person_group_id="str",
            person_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_update_person(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.update_person(
            large_person_group_id="str",
            person_id="str",
            body={"name": "str", "userData": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_get_persons(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.get_persons(
            large_person_group_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_add_face_from_url(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.add_face_from_url(
            large_person_group_id="str",
            person_id="str",
            body={"url": "str"},
            url="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_add_face(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.add_face(
            large_person_group_id="str",
            person_id="str",
            image_content=bytes("bytes", encoding="utf-8"),
            content_type="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_delete_face(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.delete_face(
            large_person_group_id="str",
            person_id="str",
            persisted_face_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_get_face(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.get_face(
            large_person_group_id="str",
            person_id="str",
            persisted_face_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @FaceAdministrationPreparer()
    @recorded_by_proxy
    def test_large_person_group_update_face(self, faceadministration_endpoint):
        client = self.create_client(endpoint=faceadministration_endpoint)
        response = client.large_person_group.update_face(
            large_person_group_id="str",
            person_id="str",
            persisted_face_id="str",
            body={"userData": "str"},
        )

        # please add some check logic here by yourself
        # ...
