# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field
from .._vendor import FileType

if TYPE_CHECKING:
    from .. import models as _models


class AccessoryItem(_model_base.Model):
    """Accessory item and corresponding confidence level.

    :ivar type: Type of the accessory. Required. Known values are: "headwear", "glasses", and
     "mask".
    :vartype type: str or ~azure.ai.vision.face.models.AccessoryType
    :ivar confidence: Confidence level of the accessory type. Range between [0,1]. Required.
    :vartype confidence: float
    """

    type: Union[str, "_models.AccessoryType"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the accessory. Required. Known values are: \"headwear\", \"glasses\", and \"mask\"."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence level of the accessory type. Range between [0,1]. Required."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.AccessoryType"],
        confidence: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AddFaceResult(_model_base.Model):
    """Response body for adding face.

    :ivar persisted_face_id: Persisted Face ID of the added face, which is persisted and will not
     expire. Different from faceId which is created in "Detect" and will expire in 24 hours after
     the detection call. Required.
    :vartype persisted_face_id: str
    """

    persisted_face_id: str = rest_field(
        name="persistedFaceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Persisted Face ID of the added face, which is persisted and will not expire. Different from
     faceId which is created in \"Detect\" and will expire in 24 hours after the detection call.
     Required."""

    @overload
    def __init__(
        self,
        *,
        persisted_face_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlurProperties(_model_base.Model):
    """Properties describing any presence of blur within the image.

    :ivar blur_level: An enum value indicating level of blurriness. Required. Known values are:
     "low", "medium", and "high".
    :vartype blur_level: str or ~azure.ai.vision.face.models.BlurLevel
    :ivar value: A number indicating level of blurriness ranging from 0 to 1. Required.
    :vartype value: float
    """

    blur_level: Union[str, "_models.BlurLevel"] = rest_field(
        name="blurLevel", visibility=["read", "create", "update", "delete", "query"]
    )
    """An enum value indicating level of blurriness. Required. Known values are: \"low\", \"medium\",
     and \"high\"."""
    value: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A number indicating level of blurriness ranging from 0 to 1. Required."""

    @overload
    def __init__(
        self,
        *,
        blur_level: Union[str, "_models.BlurLevel"],
        value: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CreateLivenessSessionContent(_model_base.Model):
    """Request model for creating liveness session.

    :ivar liveness_operation_mode: Type of liveness mode the client should follow. Required. Known
     values are: "Passive" and "PassiveActive".
    :vartype liveness_operation_mode: str or ~azure.ai.vision.face.models.LivenessOperationMode
    :ivar device_correlation_id_set_in_client: Whether or not to allow client to set their own
     'deviceCorrelationId' via the Vision SDK. Default is false, and 'deviceCorrelationId' must be
     set in this request body.
    :vartype device_correlation_id_set_in_client: bool
    :ivar enable_session_image: Whether or not store the session image.
    :vartype enable_session_image: bool
    :ivar liveness_model_version: The model version used for liveness classification. This is an
     optional parameter, and if this is not specified, then the latest supported model version will
     be chosen. "2024-11-15"
    :vartype liveness_model_version: str or ~azure.ai.vision.face.models.LivenessModel
    :ivar device_correlation_id: Unique Guid per each end-user device. This is to provide rate
     limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this
     'deviceCorrelationId' must be null.
    :vartype device_correlation_id: str
    :ivar auth_token_time_to_live_in_seconds: Seconds the session should last for. Range is 60 to
     86400 seconds. Default value is 600.
    :vartype auth_token_time_to_live_in_seconds: int
    """

    liveness_operation_mode: Union[str, "_models.LivenessOperationMode"] = rest_field(
        name="livenessOperationMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of liveness mode the client should follow. Required. Known values are: \"Passive\" and
     \"PassiveActive\"."""
    device_correlation_id_set_in_client: Optional[bool] = rest_field(
        name="deviceCorrelationIdSetInClient", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether or not to allow client to set their own 'deviceCorrelationId' via the Vision SDK.
     Default is false, and 'deviceCorrelationId' must be set in this request body."""
    enable_session_image: Optional[bool] = rest_field(
        name="enableSessionImage", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether or not store the session image."""
    liveness_model_version: Optional[Union[str, "_models.LivenessModel"]] = rest_field(
        name="livenessModelVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The model version used for liveness classification. This is an optional parameter, and if this
     is not specified, then the latest supported model version will be chosen. \"2024-11-15\""""
    device_correlation_id: Optional[str] = rest_field(
        name="deviceCorrelationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If
     'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be
     null."""
    auth_token_time_to_live_in_seconds: Optional[int] = rest_field(
        name="authTokenTimeToLiveInSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600."""

    @overload
    def __init__(
        self,
        *,
        liveness_operation_mode: Union[str, "_models.LivenessOperationMode"],
        device_correlation_id_set_in_client: Optional[bool] = None,
        enable_session_image: Optional[bool] = None,
        liveness_model_version: Optional[Union[str, "_models.LivenessModel"]] = None,
        device_correlation_id: Optional[str] = None,
        auth_token_time_to_live_in_seconds: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CreateLivenessWithVerifySessionContent(_model_base.Model):
    """Request of liveness with verify session creation.

    :ivar liveness_operation_mode: Type of liveness mode the client should follow. Required. Known
     values are: "Passive" and "PassiveActive".
    :vartype liveness_operation_mode: str or ~azure.ai.vision.face.models.LivenessOperationMode
    :ivar device_correlation_id_set_in_client: Whether or not to allow client to set their own
     'deviceCorrelationId' via the Vision SDK. Default is false, and 'deviceCorrelationId' must be
     set in this request body.
    :vartype device_correlation_id_set_in_client: bool
    :ivar enable_session_image: Whether or not store the session image.
    :vartype enable_session_image: bool
    :ivar liveness_model_version: The model version used for liveness classification. This is an
     optional parameter, and if this is not specified, then the latest supported model version will
     be chosen. "2024-11-15"
    :vartype liveness_model_version: str or ~azure.ai.vision.face.models.LivenessModel
    :ivar return_verify_image_hash: Whether or not return the verify image hash.
    :vartype return_verify_image_hash: bool
    :ivar verify_confidence_threshold: Threshold for confidence of the face verification. Please
     refer to the documentation for more details.
     `https://learn.microsoft.com/legal/cognitive-services/face/characteristics-and-limitations?context=%2Fazure%2Fai-services%2Fcomputer-vision%2Fcontext%2Fcontext#recognition-confidence-score
     <https://learn.microsoft.com/legal/cognitive-services/face/characteristics-and-limitations?context=%2Fazure%2Fai-services%2Fcomputer-vision%2Fcontext%2Fcontext#recognition-confidence-score>`_.
    :vartype verify_confidence_threshold: float
    :ivar verify_image: The image stream for verify. Content-Disposition header field for this part
     must have filename. Required.
    :vartype verify_image: ~azure.ai.vision.face._vendor.FileType
    :ivar device_correlation_id: Unique Guid per each end-user device. This is to provide rate
     limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this
     'deviceCorrelationId' must be null.
    :vartype device_correlation_id: str
    :ivar auth_token_time_to_live_in_seconds: Seconds the session should last for. Range is 60 to
     86400 seconds. Default value is 600.
    :vartype auth_token_time_to_live_in_seconds: int
    """

    liveness_operation_mode: Union[str, "_models.LivenessOperationMode"] = rest_field(
        name="livenessOperationMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Type of liveness mode the client should follow. Required. Known values are: \"Passive\" and
     \"PassiveActive\"."""
    device_correlation_id_set_in_client: Optional[bool] = rest_field(
        name="deviceCorrelationIdSetInClient", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether or not to allow client to set their own 'deviceCorrelationId' via the Vision SDK.
     Default is false, and 'deviceCorrelationId' must be set in this request body."""
    enable_session_image: Optional[bool] = rest_field(
        name="enableSessionImage", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether or not store the session image."""
    liveness_model_version: Optional[Union[str, "_models.LivenessModel"]] = rest_field(
        name="livenessModelVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The model version used for liveness classification. This is an optional parameter, and if this
     is not specified, then the latest supported model version will be chosen. \"2024-11-15\""""
    return_verify_image_hash: Optional[bool] = rest_field(
        name="returnVerifyImageHash", visibility=["read", "create", "update", "delete", "query"]
    )
    """Whether or not return the verify image hash."""
    verify_confidence_threshold: Optional[float] = rest_field(
        name="verifyConfidenceThreshold", visibility=["read", "create", "update", "delete", "query"]
    )
    """Threshold for confidence of the face verification. Please refer to the documentation for more
     details.
     `https://learn.microsoft.com/legal/cognitive-services/face/characteristics-and-limitations?context=%2Fazure%2Fai-services%2Fcomputer-vision%2Fcontext%2Fcontext#recognition-confidence-score
     <https://learn.microsoft.com/legal/cognitive-services/face/characteristics-and-limitations?context=%2Fazure%2Fai-services%2Fcomputer-vision%2Fcontext%2Fcontext#recognition-confidence-score>`_."""
    verify_image: FileType = rest_field(
        name="verifyImage", visibility=["read", "create", "update", "delete", "query"], is_multipart_file_input=True
    )
    """The image stream for verify. Content-Disposition header field for this part must have filename.
     Required."""
    device_correlation_id: Optional[str] = rest_field(
        name="deviceCorrelationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If
     'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be
     null."""
    auth_token_time_to_live_in_seconds: Optional[int] = rest_field(
        name="authTokenTimeToLiveInSeconds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600."""

    @overload
    def __init__(
        self,
        *,
        liveness_operation_mode: Union[str, "_models.LivenessOperationMode"],
        verify_image: FileType,
        device_correlation_id_set_in_client: Optional[bool] = None,
        enable_session_image: Optional[bool] = None,
        liveness_model_version: Optional[Union[str, "_models.LivenessModel"]] = None,
        return_verify_image_hash: Optional[bool] = None,
        verify_confidence_threshold: Optional[float] = None,
        device_correlation_id: Optional[str] = None,
        auth_token_time_to_live_in_seconds: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CreatePersonResult(_model_base.Model):
    """Response of create person.

    :ivar person_id: Person ID of the person. Required.
    :vartype person_id: str
    """

    person_id: str = rest_field(name="personId", visibility=["read", "create", "update", "delete", "query"])
    """Person ID of the person. Required."""

    @overload
    def __init__(
        self,
        *,
        person_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExposureProperties(_model_base.Model):
    """Properties describing exposure level of the image.

    :ivar exposure_level: An enum value indicating level of exposure. Required. Known values are:
     "underExposure", "goodExposure", and "overExposure".
    :vartype exposure_level: str or ~azure.ai.vision.face.models.ExposureLevel
    :ivar value: A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is
     under exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. Required.
    :vartype value: float
    """

    exposure_level: Union[str, "_models.ExposureLevel"] = rest_field(
        name="exposureLevel", visibility=["read", "create", "update", "delete", "query"]
    )
    """An enum value indicating level of exposure. Required. Known values are: \"underExposure\",
     \"goodExposure\", and \"overExposure\"."""
    value: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A number indicating level of exposure level ranging from 0 to 1. [0, 0.25) is under exposure.
     [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. Required."""

    @overload
    def __init__(
        self,
        *,
        exposure_level: Union[str, "_models.ExposureLevel"],
        value: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceAttributes(_model_base.Model):
    """Face attributes for the detected face.

    :ivar age: Age in years.
    :vartype age: float
    :ivar smile: Smile intensity, a number between [0,1].
    :vartype smile: float
    :ivar facial_hair: Properties describing facial hair attributes.
    :vartype facial_hair: ~azure.ai.vision.face.models.FacialHair
    :ivar glasses: Glasses type if any of the face. Known values are: "noGlasses",
     "readingGlasses", "sunglasses", and "swimmingGoggles".
    :vartype glasses: str or ~azure.ai.vision.face.models.GlassesType
    :ivar head_pose: 3-D roll/yaw/pitch angles for face direction.
    :vartype head_pose: ~azure.ai.vision.face.models.HeadPose
    :ivar hair: Properties describing hair attributes.
    :vartype hair: ~azure.ai.vision.face.models.HairProperties
    :ivar occlusion: Properties describing occlusions on a given face.
    :vartype occlusion: ~azure.ai.vision.face.models.OcclusionProperties
    :ivar accessories: Properties describing any accessories on a given face.
    :vartype accessories: list[~azure.ai.vision.face.models.AccessoryItem]
    :ivar blur: Properties describing any presence of blur within the image.
    :vartype blur: ~azure.ai.vision.face.models.BlurProperties
    :ivar exposure: Properties describing exposure level of the image.
    :vartype exposure: ~azure.ai.vision.face.models.ExposureProperties
    :ivar noise: Properties describing noise level of the image.
    :vartype noise: ~azure.ai.vision.face.models.NoiseProperties
    :ivar mask: Properties describing the presence of a mask on a given face.
    :vartype mask: ~azure.ai.vision.face.models.MaskProperties
    :ivar quality_for_recognition: Properties describing the overall image quality regarding
     whether the image being used in the detection is of sufficient quality to attempt face
     recognition on. Known values are: "low", "medium", and "high".
    :vartype quality_for_recognition: str or ~azure.ai.vision.face.models.QualityForRecognition
    """

    age: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Age in years."""
    smile: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Smile intensity, a number between [0,1]."""
    facial_hair: Optional["_models.FacialHair"] = rest_field(
        name="facialHair", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties describing facial hair attributes."""
    glasses: Optional[Union[str, "_models.GlassesType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Glasses type if any of the face. Known values are: \"noGlasses\", \"readingGlasses\",
     \"sunglasses\", and \"swimmingGoggles\"."""
    head_pose: Optional["_models.HeadPose"] = rest_field(
        name="headPose", visibility=["read", "create", "update", "delete", "query"]
    )
    """3-D roll/yaw/pitch angles for face direction."""
    hair: Optional["_models.HairProperties"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties describing hair attributes."""
    occlusion: Optional["_models.OcclusionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties describing occlusions on a given face."""
    accessories: Optional[List["_models.AccessoryItem"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties describing any accessories on a given face."""
    blur: Optional["_models.BlurProperties"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties describing any presence of blur within the image."""
    exposure: Optional["_models.ExposureProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties describing exposure level of the image."""
    noise: Optional["_models.NoiseProperties"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties describing noise level of the image."""
    mask: Optional["_models.MaskProperties"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Properties describing the presence of a mask on a given face."""
    quality_for_recognition: Optional[Union[str, "_models.QualityForRecognition"]] = rest_field(
        name="qualityForRecognition", visibility=["read", "create", "update", "delete", "query"]
    )
    """Properties describing the overall image quality regarding whether the image being used in the
     detection is of sufficient quality to attempt face recognition on. Known values are: \"low\",
     \"medium\", and \"high\"."""

    @overload
    def __init__(
        self,
        *,
        age: Optional[float] = None,
        smile: Optional[float] = None,
        facial_hair: Optional["_models.FacialHair"] = None,
        glasses: Optional[Union[str, "_models.GlassesType"]] = None,
        head_pose: Optional["_models.HeadPose"] = None,
        hair: Optional["_models.HairProperties"] = None,
        occlusion: Optional["_models.OcclusionProperties"] = None,
        accessories: Optional[List["_models.AccessoryItem"]] = None,
        blur: Optional["_models.BlurProperties"] = None,
        exposure: Optional["_models.ExposureProperties"] = None,
        noise: Optional["_models.NoiseProperties"] = None,
        mask: Optional["_models.MaskProperties"] = None,
        quality_for_recognition: Optional[Union[str, "_models.QualityForRecognition"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceDetectionResult(_model_base.Model):
    """Response for detect API.

    :ivar face_id: Unique faceId of the detected face, created by detection API and it will expire
     24 hours after the detection call. To return this, it requires 'returnFaceId' parameter to be
     true.
    :vartype face_id: str
    :ivar recognition_model: The 'recognitionModel' associated with this faceId. This is only
     returned when 'returnRecognitionModel' is explicitly set as true. Known values are:
     "recognition_01", "recognition_02", "recognition_03", and "recognition_04".
    :vartype recognition_model: str or ~azure.ai.vision.face.models.FaceRecognitionModel
    :ivar face_rectangle: A rectangle area for the face location on image. Required.
    :vartype face_rectangle: ~azure.ai.vision.face.models.FaceRectangle
    :ivar face_landmarks: An array of 27-point face landmarks pointing to the important positions
     of face components. To return this, it requires 'returnFaceLandmarks' parameter to be true.
    :vartype face_landmarks: ~azure.ai.vision.face.models.FaceLandmarks
    :ivar face_attributes: Face attributes for detected face.
    :vartype face_attributes: ~azure.ai.vision.face.models.FaceAttributes
    """

    face_id: Optional[str] = rest_field(name="faceId", visibility=["read", "create", "update", "delete", "query"])
    """Unique faceId of the detected face, created by detection API and it will expire 24 hours after
     the detection call. To return this, it requires 'returnFaceId' parameter to be true."""
    recognition_model: Optional[Union[str, "_models.FaceRecognitionModel"]] = rest_field(
        name="recognitionModel", visibility=["read", "create", "update", "delete", "query"]
    )
    """The 'recognitionModel' associated with this faceId. This is only returned when
     'returnRecognitionModel' is explicitly set as true. Known values are: \"recognition_01\",
     \"recognition_02\", \"recognition_03\", and \"recognition_04\"."""
    face_rectangle: "_models.FaceRectangle" = rest_field(
        name="faceRectangle", visibility=["read", "create", "update", "delete", "query"]
    )
    """A rectangle area for the face location on image. Required."""
    face_landmarks: Optional["_models.FaceLandmarks"] = rest_field(
        name="faceLandmarks", visibility=["read", "create", "update", "delete", "query"]
    )
    """An array of 27-point face landmarks pointing to the important positions of face components. To
     return this, it requires 'returnFaceLandmarks' parameter to be true."""
    face_attributes: Optional["_models.FaceAttributes"] = rest_field(
        name="faceAttributes", visibility=["read", "create", "update", "delete", "query"]
    )
    """Face attributes for detected face."""

    @overload
    def __init__(
        self,
        *,
        face_rectangle: "_models.FaceRectangle",
        face_id: Optional[str] = None,
        recognition_model: Optional[Union[str, "_models.FaceRecognitionModel"]] = None,
        face_landmarks: Optional["_models.FaceLandmarks"] = None,
        face_attributes: Optional["_models.FaceAttributes"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceError(_model_base.Model):
    """The error object. For comprehensive details on error codes and messages returned by the Face
    Service, please refer to the following link: `https://aka.ms/face-error-codes-and-messages
    <https://aka.ms/face-error-codes-and-messages>`_.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    """

    code: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """One of a server-defined set of error codes. Required."""
    message: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A human-readable representation of the error. Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceErrorResponse(_model_base.Model):
    """A response containing error details.

    :ivar error: The error object. Required.
    :vartype error: ~azure.ai.vision.face.models.FaceError
    """

    error: "_models.FaceError" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object. Required."""

    @overload
    def __init__(
        self,
        *,
        error: "_models.FaceError",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceFindSimilarResult(_model_base.Model):
    """Response body for find similar face operation.

    :ivar confidence: Confidence value of the candidate. The higher confidence, the more similar.
     Range between [0,1]. Required.
    :vartype confidence: float
    :ivar face_id: faceId of candidate face when find by faceIds. faceId is created by "Detect" and
     will expire 24 hours after the detection call.
    :vartype face_id: str
    :ivar persisted_face_id: persistedFaceId of candidate face when find by faceListId or
     largeFaceListId. persistedFaceId in face list/large face list is persisted and will not expire.
    :vartype persisted_face_id: str
    """

    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence value of the candidate. The higher confidence, the more similar. Range between
     [0,1]. Required."""
    face_id: Optional[str] = rest_field(name="faceId", visibility=["read", "create", "update", "delete", "query"])
    """faceId of candidate face when find by faceIds. faceId is created by \"Detect\" and will expire
     24 hours after the detection call."""
    persisted_face_id: Optional[str] = rest_field(
        name="persistedFaceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """persistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId
     in face list/large face list is persisted and will not expire."""

    @overload
    def __init__(
        self,
        *,
        confidence: float,
        face_id: Optional[str] = None,
        persisted_face_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceGroupingResult(_model_base.Model):
    """Response body for group face operation.

    :ivar groups: A partition of the original faces based on face similarity. Groups are ranked by
     number of faces. Required.
    :vartype groups: list[list[str]]
    :ivar messy_group: Face ids array of faces that cannot find any similar faces from original
     faces. Required.
    :vartype messy_group: list[str]
    """

    groups: List[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A partition of the original faces based on face similarity. Groups are ranked by number of
     faces. Required."""
    messy_group: List[str] = rest_field(name="messyGroup", visibility=["read", "create", "update", "delete", "query"])
    """Face ids array of faces that cannot find any similar faces from original faces. Required."""

    @overload
    def __init__(
        self,
        *,
        groups: List[List[str]],
        messy_group: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceIdentificationCandidate(_model_base.Model):
    """Candidate for identify call.

    :ivar person_id: personId of candidate person. Required.
    :vartype person_id: str
    :ivar confidence: Confidence value of the candidate. The higher confidence, the more similar.
     Range between [0,1]. Required.
    :vartype confidence: float
    """

    person_id: str = rest_field(name="personId", visibility=["read", "create", "update", "delete", "query"])
    """personId of candidate person. Required."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence value of the candidate. The higher confidence, the more similar. Range between
     [0,1]. Required."""

    @overload
    def __init__(
        self,
        *,
        person_id: str,
        confidence: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceIdentificationResult(_model_base.Model):
    """Identify result.

    :ivar face_id: faceId of the query face. Required.
    :vartype face_id: str
    :ivar candidates: Identified person candidates for that face (ranked by confidence). Array size
     should be no larger than input maxNumOfCandidatesReturned. If no person is identified, will
     return an empty array. Required.
    :vartype candidates: list[~azure.ai.vision.face.models.FaceIdentificationCandidate]
    """

    face_id: str = rest_field(name="faceId", visibility=["read", "create", "update", "delete", "query"])
    """faceId of the query face. Required."""
    candidates: List["_models.FaceIdentificationCandidate"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Identified person candidates for that face (ranked by confidence). Array size should be no
     larger than input maxNumOfCandidatesReturned. If no person is identified, will return an empty
     array. Required."""

    @overload
    def __init__(
        self,
        *,
        face_id: str,
        candidates: List["_models.FaceIdentificationCandidate"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceLandmarks(_model_base.Model):
    """A collection of 27-point face landmarks pointing to the important positions of face components.

    :ivar pupil_left: The coordinates of the left eye pupil. Required.
    :vartype pupil_left: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar pupil_right: The coordinates of the right eye pupil. Required.
    :vartype pupil_right: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar nose_tip: The coordinates of the nose tip. Required.
    :vartype nose_tip: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar mouth_left: The coordinates of the mouth left. Required.
    :vartype mouth_left: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar mouth_right: The coordinates of the mouth right. Required.
    :vartype mouth_right: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eyebrow_left_outer: The coordinates of the left eyebrow outer. Required.
    :vartype eyebrow_left_outer: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eyebrow_left_inner: The coordinates of the left eyebrow inner. Required.
    :vartype eyebrow_left_inner: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eye_left_outer: The coordinates of the left eye outer. Required.
    :vartype eye_left_outer: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eye_left_top: The coordinates of the left eye top. Required.
    :vartype eye_left_top: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eye_left_bottom: The coordinates of the left eye bottom. Required.
    :vartype eye_left_bottom: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eye_left_inner: The coordinates of the left eye inner. Required.
    :vartype eye_left_inner: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eyebrow_right_inner: The coordinates of the right eyebrow inner. Required.
    :vartype eyebrow_right_inner: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eyebrow_right_outer: The coordinates of the right eyebrow outer. Required.
    :vartype eyebrow_right_outer: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eye_right_inner: The coordinates of the right eye inner. Required.
    :vartype eye_right_inner: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eye_right_top: The coordinates of the right eye top. Required.
    :vartype eye_right_top: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eye_right_bottom: The coordinates of the right eye bottom. Required.
    :vartype eye_right_bottom: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar eye_right_outer: The coordinates of the right eye outer. Required.
    :vartype eye_right_outer: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar nose_root_left: The coordinates of the nose root left. Required.
    :vartype nose_root_left: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar nose_root_right: The coordinates of the nose root right. Required.
    :vartype nose_root_right: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar nose_left_alar_top: The coordinates of the nose left alar top. Required.
    :vartype nose_left_alar_top: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar nose_right_alar_top: The coordinates of the nose right alar top. Required.
    :vartype nose_right_alar_top: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar nose_left_alar_out_tip: The coordinates of the nose left alar out tip. Required.
    :vartype nose_left_alar_out_tip: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar nose_right_alar_out_tip: The coordinates of the nose right alar out tip. Required.
    :vartype nose_right_alar_out_tip: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar upper_lip_top: The coordinates of the upper lip top. Required.
    :vartype upper_lip_top: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar upper_lip_bottom: The coordinates of the upper lip bottom. Required.
    :vartype upper_lip_bottom: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar under_lip_top: The coordinates of the under lip top. Required.
    :vartype under_lip_top: ~azure.ai.vision.face.models.LandmarkCoordinate
    :ivar under_lip_bottom: The coordinates of the under lip bottom. Required.
    :vartype under_lip_bottom: ~azure.ai.vision.face.models.LandmarkCoordinate
    """

    pupil_left: "_models.LandmarkCoordinate" = rest_field(
        name="pupilLeft", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the left eye pupil. Required."""
    pupil_right: "_models.LandmarkCoordinate" = rest_field(
        name="pupilRight", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the right eye pupil. Required."""
    nose_tip: "_models.LandmarkCoordinate" = rest_field(
        name="noseTip", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the nose tip. Required."""
    mouth_left: "_models.LandmarkCoordinate" = rest_field(
        name="mouthLeft", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the mouth left. Required."""
    mouth_right: "_models.LandmarkCoordinate" = rest_field(
        name="mouthRight", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the mouth right. Required."""
    eyebrow_left_outer: "_models.LandmarkCoordinate" = rest_field(
        name="eyebrowLeftOuter", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the left eyebrow outer. Required."""
    eyebrow_left_inner: "_models.LandmarkCoordinate" = rest_field(
        name="eyebrowLeftInner", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the left eyebrow inner. Required."""
    eye_left_outer: "_models.LandmarkCoordinate" = rest_field(
        name="eyeLeftOuter", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the left eye outer. Required."""
    eye_left_top: "_models.LandmarkCoordinate" = rest_field(
        name="eyeLeftTop", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the left eye top. Required."""
    eye_left_bottom: "_models.LandmarkCoordinate" = rest_field(
        name="eyeLeftBottom", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the left eye bottom. Required."""
    eye_left_inner: "_models.LandmarkCoordinate" = rest_field(
        name="eyeLeftInner", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the left eye inner. Required."""
    eyebrow_right_inner: "_models.LandmarkCoordinate" = rest_field(
        name="eyebrowRightInner", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the right eyebrow inner. Required."""
    eyebrow_right_outer: "_models.LandmarkCoordinate" = rest_field(
        name="eyebrowRightOuter", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the right eyebrow outer. Required."""
    eye_right_inner: "_models.LandmarkCoordinate" = rest_field(
        name="eyeRightInner", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the right eye inner. Required."""
    eye_right_top: "_models.LandmarkCoordinate" = rest_field(
        name="eyeRightTop", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the right eye top. Required."""
    eye_right_bottom: "_models.LandmarkCoordinate" = rest_field(
        name="eyeRightBottom", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the right eye bottom. Required."""
    eye_right_outer: "_models.LandmarkCoordinate" = rest_field(
        name="eyeRightOuter", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the right eye outer. Required."""
    nose_root_left: "_models.LandmarkCoordinate" = rest_field(
        name="noseRootLeft", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the nose root left. Required."""
    nose_root_right: "_models.LandmarkCoordinate" = rest_field(
        name="noseRootRight", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the nose root right. Required."""
    nose_left_alar_top: "_models.LandmarkCoordinate" = rest_field(
        name="noseLeftAlarTop", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the nose left alar top. Required."""
    nose_right_alar_top: "_models.LandmarkCoordinate" = rest_field(
        name="noseRightAlarTop", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the nose right alar top. Required."""
    nose_left_alar_out_tip: "_models.LandmarkCoordinate" = rest_field(
        name="noseLeftAlarOutTip", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the nose left alar out tip. Required."""
    nose_right_alar_out_tip: "_models.LandmarkCoordinate" = rest_field(
        name="noseRightAlarOutTip", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the nose right alar out tip. Required."""
    upper_lip_top: "_models.LandmarkCoordinate" = rest_field(
        name="upperLipTop", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the upper lip top. Required."""
    upper_lip_bottom: "_models.LandmarkCoordinate" = rest_field(
        name="upperLipBottom", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the upper lip bottom. Required."""
    under_lip_top: "_models.LandmarkCoordinate" = rest_field(
        name="underLipTop", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the under lip top. Required."""
    under_lip_bottom: "_models.LandmarkCoordinate" = rest_field(
        name="underLipBottom", visibility=["read", "create", "update", "delete", "query"]
    )
    """The coordinates of the under lip bottom. Required."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        pupil_left: "_models.LandmarkCoordinate",
        pupil_right: "_models.LandmarkCoordinate",
        nose_tip: "_models.LandmarkCoordinate",
        mouth_left: "_models.LandmarkCoordinate",
        mouth_right: "_models.LandmarkCoordinate",
        eyebrow_left_outer: "_models.LandmarkCoordinate",
        eyebrow_left_inner: "_models.LandmarkCoordinate",
        eye_left_outer: "_models.LandmarkCoordinate",
        eye_left_top: "_models.LandmarkCoordinate",
        eye_left_bottom: "_models.LandmarkCoordinate",
        eye_left_inner: "_models.LandmarkCoordinate",
        eyebrow_right_inner: "_models.LandmarkCoordinate",
        eyebrow_right_outer: "_models.LandmarkCoordinate",
        eye_right_inner: "_models.LandmarkCoordinate",
        eye_right_top: "_models.LandmarkCoordinate",
        eye_right_bottom: "_models.LandmarkCoordinate",
        eye_right_outer: "_models.LandmarkCoordinate",
        nose_root_left: "_models.LandmarkCoordinate",
        nose_root_right: "_models.LandmarkCoordinate",
        nose_left_alar_top: "_models.LandmarkCoordinate",
        nose_right_alar_top: "_models.LandmarkCoordinate",
        nose_left_alar_out_tip: "_models.LandmarkCoordinate",
        nose_right_alar_out_tip: "_models.LandmarkCoordinate",
        upper_lip_top: "_models.LandmarkCoordinate",
        upper_lip_bottom: "_models.LandmarkCoordinate",
        under_lip_top: "_models.LandmarkCoordinate",
        under_lip_bottom: "_models.LandmarkCoordinate",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceRectangle(_model_base.Model):
    """A rectangle within which a face can be found.

    :ivar top: The distance from the top edge if the image to the top edge of the rectangle, in
     pixels. Required.
    :vartype top: int
    :ivar left: The distance from the left edge if the image to the left edge of the rectangle, in
     pixels. Required.
    :vartype left: int
    :ivar width: The width of the rectangle, in pixels. Required.
    :vartype width: int
    :ivar height: The height of the rectangle, in pixels. Required.
    :vartype height: int
    """

    top: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The distance from the top edge if the image to the top edge of the rectangle, in pixels.
     Required."""
    left: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The distance from the left edge if the image to the left edge of the rectangle, in pixels.
     Required."""
    width: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The width of the rectangle, in pixels. Required."""
    height: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The height of the rectangle, in pixels. Required."""

    @overload
    def __init__(
        self,
        *,
        top: int,
        left: int,
        width: int,
        height: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceTrainingResult(_model_base.Model):
    """Training result of a container.

    :ivar status: Training status of the container. Required. Known values are: "notStarted",
     "running", "succeeded", and "failed".
    :vartype status: str or ~azure.ai.vision.face.models.FaceOperationStatus
    :ivar created_date_time: A combined UTC date and time string that describes the created time of
     the person group, large person group or large face list. Required.
    :vartype created_date_time: ~datetime.datetime
    :ivar last_action_date_time: A combined UTC date and time string that describes the last modify
     time of the person group, large person group or large face list, could be null value when the
     group is not successfully trained. Required.
    :vartype last_action_date_time: ~datetime.datetime
    :ivar last_successful_training_date_time: A combined UTC date and time string that describes
     the last successful training time of the person group, large person group or large face list.
     Required.
    :vartype last_successful_training_date_time: ~datetime.datetime
    :ivar message: Show failure message when training failed (omitted when training succeed).
    :vartype message: str
    """

    status: Union[str, "_models.FaceOperationStatus"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Training status of the container. Required. Known values are: \"notStarted\", \"running\",
     \"succeeded\", and \"failed\"."""
    created_date_time: datetime.datetime = rest_field(
        name="createdDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """A combined UTC date and time string that describes the created time of the person group, large
     person group or large face list. Required."""
    last_action_date_time: datetime.datetime = rest_field(
        name="lastActionDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """A combined UTC date and time string that describes the last modify time of the person group,
     large person group or large face list, could be null value when the group is not successfully
     trained. Required."""
    last_successful_training_date_time: datetime.datetime = rest_field(
        name="lastSuccessfulTrainingDateTime",
        visibility=["read", "create", "update", "delete", "query"],
        format="rfc3339",
    )
    """A combined UTC date and time string that describes the last successful training time of the
     person group, large person group or large face list. Required."""
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Show failure message when training failed (omitted when training succeed)."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.FaceOperationStatus"],
        created_date_time: datetime.datetime,
        last_action_date_time: datetime.datetime,
        last_successful_training_date_time: datetime.datetime,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceVerificationResult(_model_base.Model):
    """Verify result.

    :ivar is_identical: True if the two faces belong to the same person or the face belongs to the
     person, otherwise false. Required.
    :vartype is_identical: bool
    :ivar confidence: A number indicates the similarity confidence of whether two faces belong to
     the same person, or whether the face belongs to the person. By default, isIdentical is set to
     True if similarity confidence is greater than or equal to 0.5. This is useful for advanced
     users to override 'isIdentical' and fine-tune the result on their own data. Required.
    :vartype confidence: float
    """

    is_identical: bool = rest_field(name="isIdentical", visibility=["read", "create", "update", "delete", "query"])
    """True if the two faces belong to the same person or the face belongs to the person, otherwise
     false. Required."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A number indicates the similarity confidence of whether two faces belong to the same person, or
     whether the face belongs to the person. By default, isIdentical is set to True if similarity
     confidence is greater than or equal to 0.5. This is useful for advanced users to override
     'isIdentical' and fine-tune the result on their own data. Required."""

    @overload
    def __init__(
        self,
        *,
        is_identical: bool,
        confidence: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FacialHair(_model_base.Model):
    """Properties describing facial hair attributes.

    :ivar moustache: A number ranging from 0 to 1 indicating a level of confidence associated with
     a property. Required.
    :vartype moustache: float
    :ivar beard: A number ranging from 0 to 1 indicating a level of confidence associated with a
     property. Required.
    :vartype beard: float
    :ivar sideburns: A number ranging from 0 to 1 indicating a level of confidence associated with
     a property. Required.
    :vartype sideburns: float
    """

    moustache: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A number ranging from 0 to 1 indicating a level of confidence associated with a property.
     Required."""
    beard: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A number ranging from 0 to 1 indicating a level of confidence associated with a property.
     Required."""
    sideburns: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A number ranging from 0 to 1 indicating a level of confidence associated with a property.
     Required."""

    @overload
    def __init__(
        self,
        *,
        moustache: float,
        beard: float,
        sideburns: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HairColor(_model_base.Model):
    """An array of candidate colors and confidence level in the presence of each.

    :ivar color: Name of the hair color. Required. Known values are: "unknown", "white", "gray",
     "blond", "brown", "red", "black", and "other".
    :vartype color: str or ~azure.ai.vision.face.models.HairColorType
    :ivar confidence: Confidence level of the color. Range between [0,1]. Required.
    :vartype confidence: float
    """

    color: Union[str, "_models.HairColorType"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the hair color. Required. Known values are: \"unknown\", \"white\", \"gray\",
     \"blond\", \"brown\", \"red\", \"black\", and \"other\"."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence level of the color. Range between [0,1]. Required."""

    @overload
    def __init__(
        self,
        *,
        color: Union[str, "_models.HairColorType"],
        confidence: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HairProperties(_model_base.Model):
    """Properties describing hair attributes.

    :ivar bald: A number describing confidence level of whether the person is bald. Required.
    :vartype bald: float
    :ivar invisible: A boolean value describing whether the hair is visible in the image. Required.
    :vartype invisible: bool
    :ivar hair_color: An array of candidate colors and confidence level in the presence of each.
     Required.
    :vartype hair_color: list[~azure.ai.vision.face.models.HairColor]
    """

    bald: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A number describing confidence level of whether the person is bald. Required."""
    invisible: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A boolean value describing whether the hair is visible in the image. Required."""
    hair_color: List["_models.HairColor"] = rest_field(
        name="hairColor", visibility=["read", "create", "update", "delete", "query"]
    )
    """An array of candidate colors and confidence level in the presence of each. Required."""

    @overload
    def __init__(
        self,
        *,
        bald: float,
        invisible: bool,
        hair_color: List["_models.HairColor"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HeadPose(_model_base.Model):
    """3-D roll/yaw/pitch angles for face direction.

    :ivar pitch: Value of angles. Required.
    :vartype pitch: float
    :ivar roll: Value of angles. Required.
    :vartype roll: float
    :ivar yaw: Value of angles. Required.
    :vartype yaw: float
    """

    pitch: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Value of angles. Required."""
    roll: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Value of angles. Required."""
    yaw: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Value of angles. Required."""

    @overload
    def __init__(
        self,
        *,
        pitch: float,
        roll: float,
        yaw: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LandmarkCoordinate(_model_base.Model):
    """Landmark coordinates within an image.

    :ivar x: The horizontal component, in pixels. Required.
    :vartype x: float
    :ivar y: The vertical component, in pixels. Required.
    :vartype y: float
    """

    x: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The horizontal component, in pixels. Required."""
    y: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The vertical component, in pixels. Required."""

    @overload
    def __init__(
        self,
        *,
        x: float,
        y: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LargeFaceList(_model_base.Model):
    """Large face list is a list of faces, up to 1,000,000 faces.

    :ivar name: User defined name, maximum length is 128. Required.
    :vartype name: str
    :ivar user_data: Optional user defined data. Length should not exceed 16K.
    :vartype user_data: str
    :ivar recognition_model: Name of recognition model. Recognition model is used when the face
     features are extracted and associated with detected faceIds. Known values are:
     "recognition_01", "recognition_02", "recognition_03", and "recognition_04".
    :vartype recognition_model: str or ~azure.ai.vision.face.models.FaceRecognitionModel
    :ivar large_face_list_id: Valid character is letter in lower case or digit or '-' or '_',
     maximum length is 64. Required.
    :vartype large_face_list_id: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """User defined name, maximum length is 128. Required."""
    user_data: Optional[str] = rest_field(name="userData", visibility=["read", "create", "update", "delete", "query"])
    """Optional user defined data. Length should not exceed 16K."""
    recognition_model: Optional[Union[str, "_models.FaceRecognitionModel"]] = rest_field(
        name="recognitionModel", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of recognition model. Recognition model is used when the face features are extracted and
     associated with detected faceIds. Known values are: \"recognition_01\", \"recognition_02\",
     \"recognition_03\", and \"recognition_04\"."""
    large_face_list_id: str = rest_field(name="largeFaceListId", visibility=["read"])
    """Valid character is letter in lower case or digit or '-' or '_', maximum length is 64. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        user_data: Optional[str] = None,
        recognition_model: Optional[Union[str, "_models.FaceRecognitionModel"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LargeFaceListFace(_model_base.Model):
    """Face resource for large face list.

    :ivar persisted_face_id: Face ID of the face. Required.
    :vartype persisted_face_id: str
    :ivar user_data: User-provided data attached to the face. The length limit is 1K.
    :vartype user_data: str
    """

    persisted_face_id: str = rest_field(name="persistedFaceId", visibility=["read"])
    """Face ID of the face. Required."""
    user_data: Optional[str] = rest_field(name="userData", visibility=["read", "create", "update", "delete", "query"])
    """User-provided data attached to the face. The length limit is 1K."""

    @overload
    def __init__(
        self,
        *,
        user_data: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LargePersonGroup(_model_base.Model):
    """The container of the uploaded person data, including face recognition feature, and up to
    1,000,000 people.

    :ivar name: User defined name, maximum length is 128. Required.
    :vartype name: str
    :ivar user_data: Optional user defined data. Length should not exceed 16K.
    :vartype user_data: str
    :ivar recognition_model: Name of recognition model. Recognition model is used when the face
     features are extracted and associated with detected faceIds. Known values are:
     "recognition_01", "recognition_02", "recognition_03", and "recognition_04".
    :vartype recognition_model: str or ~azure.ai.vision.face.models.FaceRecognitionModel
    :ivar large_person_group_id: ID of the container. Required.
    :vartype large_person_group_id: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """User defined name, maximum length is 128. Required."""
    user_data: Optional[str] = rest_field(name="userData", visibility=["read", "create", "update", "delete", "query"])
    """Optional user defined data. Length should not exceed 16K."""
    recognition_model: Optional[Union[str, "_models.FaceRecognitionModel"]] = rest_field(
        name="recognitionModel", visibility=["read", "create", "update", "delete", "query"]
    )
    """Name of recognition model. Recognition model is used when the face features are extracted and
     associated with detected faceIds. Known values are: \"recognition_01\", \"recognition_02\",
     \"recognition_03\", and \"recognition_04\"."""
    large_person_group_id: str = rest_field(name="largePersonGroupId", visibility=["read"])
    """ID of the container. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        user_data: Optional[str] = None,
        recognition_model: Optional[Union[str, "_models.FaceRecognitionModel"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LargePersonGroupPerson(_model_base.Model):
    """The person in a specified large person group. To add face to this person, please call "Add
    Large Person Group Person Face".

    :ivar person_id: ID of the person. Required.
    :vartype person_id: str
    :ivar name: User defined name, maximum length is 128. Required.
    :vartype name: str
    :ivar user_data: Optional user defined data. Length should not exceed 16K.
    :vartype user_data: str
    :ivar persisted_face_ids: Face ids of registered faces in the person.
    :vartype persisted_face_ids: list[str]
    """

    person_id: str = rest_field(name="personId", visibility=["read"])
    """ID of the person. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """User defined name, maximum length is 128. Required."""
    user_data: Optional[str] = rest_field(name="userData", visibility=["read", "create", "update", "delete", "query"])
    """Optional user defined data. Length should not exceed 16K."""
    persisted_face_ids: Optional[List[str]] = rest_field(
        name="persistedFaceIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Face ids of registered faces in the person."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        user_data: Optional[str] = None,
        persisted_face_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LargePersonGroupPersonFace(_model_base.Model):
    """Face resource for large person group person.

    :ivar persisted_face_id: Face ID of the face. Required.
    :vartype persisted_face_id: str
    :ivar user_data: User-provided data attached to the face. The length limit is 1K.
    :vartype user_data: str
    """

    persisted_face_id: str = rest_field(name="persistedFaceId", visibility=["read"])
    """Face ID of the face. Required."""
    user_data: Optional[str] = rest_field(name="userData", visibility=["read", "create", "update", "delete", "query"])
    """User-provided data attached to the face. The length limit is 1K."""

    @overload
    def __init__(
        self,
        *,
        user_data: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessColorDecisionTarget(_model_base.Model):
    """The target from color image used for liveness classification.

    :ivar face_rectangle: The face region where the liveness classification was made on. Required.
    :vartype face_rectangle: ~azure.ai.vision.face.models.FaceRectangle
    """

    face_rectangle: "_models.FaceRectangle" = rest_field(
        name="faceRectangle", visibility=["read", "create", "update", "delete", "query"]
    )
    """The face region where the liveness classification was made on. Required."""

    @overload
    def __init__(
        self,
        *,
        face_rectangle: "_models.FaceRectangle",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessDecisionTargets(_model_base.Model):
    """The targets used for liveness classification.

    :ivar color: The target from color image used for liveness classification. Required.
    :vartype color: ~azure.ai.vision.face.models.LivenessColorDecisionTarget
    """

    color: "_models.LivenessColorDecisionTarget" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The target from color image used for liveness classification. Required."""

    @overload
    def __init__(
        self,
        *,
        color: "_models.LivenessColorDecisionTarget",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessError(_model_base.Model):
    """The error of the liveness classification.

    :ivar code: The error code. Required.
    :vartype code: str
    :ivar message: The error message. Required.
    :vartype message: str
    :ivar targets: Targets used for liveness classification. Required.
    :vartype targets: ~azure.ai.vision.face.models.LivenessDecisionTargets
    """

    code: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error code. Required."""
    message: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error message. Required."""
    targets: "_models.LivenessDecisionTargets" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Targets used for liveness classification. Required."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        targets: "_models.LivenessDecisionTargets",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessResult(_model_base.Model):
    """The results of the liveness classification.

    :ivar liveness_decision: The liveness classification for the target face. Known values are:
     "uncertain", "realface", and "spoofface".
    :vartype liveness_decision: str or ~azure.ai.vision.face.models.FaceLivenessDecision
    :ivar targets: Targets used for liveness classification. Required.
    :vartype targets: ~azure.ai.vision.face.models.LivenessDecisionTargets
    :ivar digest: The server calculated digest for this request. If the client reported digest
     differs from the server calculated digest, then the message integrity between the client and
     service has been compromised and the result should not be trusted. For more information, see
     how to guides on how to leverage this value to secure your end-to-end solution. Required.
    :vartype digest: str
    :ivar session_image_id: The image ID of the session request.
    :vartype session_image_id: str
    """

    liveness_decision: Optional[Union[str, "_models.FaceLivenessDecision"]] = rest_field(
        name="livenessDecision", visibility=["read", "create", "update", "delete", "query"]
    )
    """The liveness classification for the target face. Known values are: \"uncertain\", \"realface\",
     and \"spoofface\"."""
    targets: "_models.LivenessDecisionTargets" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Targets used for liveness classification. Required."""
    digest: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The server calculated digest for this request. If the client reported digest differs from the
     server calculated digest, then the message integrity between the client and service has been
     compromised and the result should not be trusted. For more information, see how to guides on
     how to leverage this value to secure your end-to-end solution. Required."""
    session_image_id: Optional[str] = rest_field(
        name="sessionImageId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The image ID of the session request."""

    @overload
    def __init__(
        self,
        *,
        targets: "_models.LivenessDecisionTargets",
        digest: str,
        liveness_decision: Optional[Union[str, "_models.FaceLivenessDecision"]] = None,
        session_image_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessSession(_model_base.Model):
    """Session result of detect liveness.

    :ivar session_id: The unique ID to reference this session. Required.
    :vartype session_id: str
    :ivar auth_token: Bearer token to provide authentication for the Vision SDK running on a client
     application. This Bearer token has limited permissions to perform only the required action and
     expires after the TTL time. It is also auditable. Required.
    :vartype auth_token: str
    :ivar status: The current status of the session. Required. Known values are: "NotStarted",
     "Running", "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.ai.vision.face.models.OperationState
    :ivar model_version: The model version used for liveness classification. This is an optional
     parameter, and if this is not specified, then the latest supported model version will be
     chosen. "2024-11-15"
    :vartype model_version: str or ~azure.ai.vision.face.models.LivenessModel
    :ivar results: The results of the liveness session. Required.
    :vartype results: ~azure.ai.vision.face.models.LivenessSessionResults
    """

    session_id: str = rest_field(name="sessionId", visibility=["read"])
    """The unique ID to reference this session. Required."""
    auth_token: str = rest_field(name="authToken", visibility=["read", "create", "update", "delete", "query"])
    """Bearer token to provide authentication for the Vision SDK running on a client application. This
     Bearer token has limited permissions to perform only the required action and expires after the
     TTL time. It is also auditable. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The current status of the session. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    model_version: Optional[Union[str, "_models.LivenessModel"]] = rest_field(
        name="modelVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The model version used for liveness classification. This is an optional parameter, and if this
     is not specified, then the latest supported model version will be chosen. \"2024-11-15\""""
    results: "_models.LivenessSessionResults" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The results of the liveness session. Required."""

    @overload
    def __init__(
        self,
        *,
        auth_token: str,
        status: Union[str, "_models.OperationState"],
        results: "_models.LivenessSessionResults",
        model_version: Optional[Union[str, "_models.LivenessModel"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessSessionAttempt(_model_base.Model):
    """The liveness session attempt.

    :ivar attempt_id: The attempt ID, start from 1. Required.
    :vartype attempt_id: int
    :ivar attempt_status: The status of the attempt. Required. Known values are: "NotStarted",
     "Running", "Succeeded", "Failed", and "Canceled".
    :vartype attempt_status: str or ~azure.ai.vision.face.models.OperationState
    :ivar result: The result of the liveness call, will be null if there is error.
    :vartype result: ~azure.ai.vision.face.models.LivenessResult
    :ivar error: The error of the liveness call, will be null if there is result.
    :vartype error: ~azure.ai.vision.face.models.LivenessError
    """

    attempt_id: int = rest_field(name="attemptId", visibility=["read", "create", "update", "delete", "query"])
    """The attempt ID, start from 1. Required."""
    attempt_status: Union[str, "_models.OperationState"] = rest_field(
        name="attemptStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the attempt. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    result: Optional["_models.LivenessResult"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The result of the liveness call, will be null if there is error."""
    error: Optional["_models.LivenessError"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error of the liveness call, will be null if there is result."""

    @overload
    def __init__(
        self,
        *,
        attempt_id: int,
        attempt_status: Union[str, "_models.OperationState"],
        result: Optional["_models.LivenessResult"] = None,
        error: Optional["_models.LivenessError"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessSessionResults(_model_base.Model):
    """The results of the liveness session.

    :ivar attempts: The attempts data of underlying liveness call with the session. Required.
    :vartype attempts: list[~azure.ai.vision.face.models.LivenessSessionAttempt]
    """

    attempts: List["_models.LivenessSessionAttempt"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The attempts data of underlying liveness call with the session. Required."""

    @overload
    def __init__(
        self,
        *,
        attempts: List["_models.LivenessSessionAttempt"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessWithVerifyOutputs(_model_base.Model):
    """The face verification output.

    :ivar match_confidence: The target face liveness face and comparison image face verification
     confidence. Required.
    :vartype match_confidence: float
    :ivar is_identical: Whether the target liveness face and comparison image face match. Required.
    :vartype is_identical: bool
    """

    match_confidence: float = rest_field(
        name="matchConfidence", visibility=["read", "create", "update", "delete", "query"]
    )
    """The target face liveness face and comparison image face verification confidence. Required."""
    is_identical: bool = rest_field(name="isIdentical", visibility=["read", "create", "update", "delete", "query"])
    """Whether the target liveness face and comparison image face match. Required."""

    @overload
    def __init__(
        self,
        *,
        match_confidence: float,
        is_identical: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessWithVerifyReference(_model_base.Model):
    """The detail of face for verification.

    :ivar reference_type: The image type which contains the face rectangle where the liveness
     classification was made on. Required. Known values are: "Color", "Infrared", and "Depth".
    :vartype reference_type: str or ~azure.ai.vision.face.models.FaceImageType
    :ivar face_rectangle: The face region where the comparison image's classification was made.
     Required.
    :vartype face_rectangle: ~azure.ai.vision.face.models.FaceRectangle
    :ivar quality_for_recognition: Quality of face image for recognition. Required. Known values
     are: "low", "medium", and "high".
    :vartype quality_for_recognition: str or ~azure.ai.vision.face.models.QualityForRecognition
    """

    reference_type: Union[str, "_models.FaceImageType"] = rest_field(
        name="referenceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The image type which contains the face rectangle where the liveness classification was made on.
     Required. Known values are: \"Color\", \"Infrared\", and \"Depth\"."""
    face_rectangle: "_models.FaceRectangle" = rest_field(
        name="faceRectangle", visibility=["read", "create", "update", "delete", "query"]
    )
    """The face region where the comparison image's classification was made. Required."""
    quality_for_recognition: Union[str, "_models.QualityForRecognition"] = rest_field(
        name="qualityForRecognition", visibility=["read", "create", "update", "delete", "query"]
    )
    """Quality of face image for recognition. Required. Known values are: \"low\", \"medium\", and
     \"high\"."""

    @overload
    def __init__(
        self,
        *,
        reference_type: Union[str, "_models.FaceImageType"],
        face_rectangle: "_models.FaceRectangle",
        quality_for_recognition: Union[str, "_models.QualityForRecognition"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessWithVerifyResult(_model_base.Model):
    """The results of the liveness with verify call.

    :ivar liveness_decision: The liveness classification for the target face. Known values are:
     "uncertain", "realface", and "spoofface".
    :vartype liveness_decision: str or ~azure.ai.vision.face.models.FaceLivenessDecision
    :ivar targets: Targets used for liveness classification. Required.
    :vartype targets: ~azure.ai.vision.face.models.LivenessDecisionTargets
    :ivar digest: The server calculated digest for this request. If the client reported digest
     differs from the server calculated digest, then the message integrity between the client and
     service has been compromised and the result should not be trusted. For more information, see
     how to guides on how to leverage this value to secure your end-to-end solution. Required.
    :vartype digest: str
    :ivar session_image_id: The image ID of the session request.
    :vartype session_image_id: str
    :ivar verify_result: The face verification output. Only available when the request is liveness
     with verify.
    :vartype verify_result: ~azure.ai.vision.face.models.LivenessWithVerifyOutputs
    :ivar verify_image_hash: The sha256 hash of the verify-image in the request.
    :vartype verify_image_hash: str
    """

    liveness_decision: Optional[Union[str, "_models.FaceLivenessDecision"]] = rest_field(
        name="livenessDecision", visibility=["read", "create", "update", "delete", "query"]
    )
    """The liveness classification for the target face. Known values are: \"uncertain\", \"realface\",
     and \"spoofface\"."""
    targets: "_models.LivenessDecisionTargets" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Targets used for liveness classification. Required."""
    digest: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The server calculated digest for this request. If the client reported digest differs from the
     server calculated digest, then the message integrity between the client and service has been
     compromised and the result should not be trusted. For more information, see how to guides on
     how to leverage this value to secure your end-to-end solution. Required."""
    session_image_id: Optional[str] = rest_field(
        name="sessionImageId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The image ID of the session request."""
    verify_result: Optional["_models.LivenessWithVerifyOutputs"] = rest_field(
        name="verifyResult", visibility=["read", "create", "update", "delete", "query"]
    )
    """The face verification output. Only available when the request is liveness with verify."""
    verify_image_hash: Optional[str] = rest_field(
        name="verifyImageHash", visibility=["read", "create", "update", "delete", "query"]
    )
    """The sha256 hash of the verify-image in the request."""

    @overload
    def __init__(
        self,
        *,
        targets: "_models.LivenessDecisionTargets",
        digest: str,
        liveness_decision: Optional[Union[str, "_models.FaceLivenessDecision"]] = None,
        session_image_id: Optional[str] = None,
        verify_result: Optional["_models.LivenessWithVerifyOutputs"] = None,
        verify_image_hash: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessWithVerifySession(_model_base.Model):
    """Session result of detect liveness with verify.

    :ivar session_id: The unique ID to reference this session. Required.
    :vartype session_id: str
    :ivar auth_token: Bearer token to provide authentication for the Vision SDK running on a client
     application. This Bearer token has limited permissions to perform only the required action and
     expires after the TTL time. It is also auditable. Required.
    :vartype auth_token: str
    :ivar status: The current status of the session. Required. Known values are: "NotStarted",
     "Running", "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.ai.vision.face.models.OperationState
    :ivar model_version: The model version used for liveness classification. This is an optional
     parameter, and if this is not specified, then the latest supported model version will be
     chosen. "2024-11-15"
    :vartype model_version: str or ~azure.ai.vision.face.models.LivenessModel
    :ivar results: The results of the liveness with verify session. Required.
    :vartype results: ~azure.ai.vision.face.models.LivenessWithVerifySessionResults
    """

    session_id: str = rest_field(name="sessionId", visibility=["read"])
    """The unique ID to reference this session. Required."""
    auth_token: str = rest_field(name="authToken", visibility=["read", "create", "update", "delete", "query"])
    """Bearer token to provide authentication for the Vision SDK running on a client application. This
     Bearer token has limited permissions to perform only the required action and expires after the
     TTL time. It is also auditable. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The current status of the session. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    model_version: Optional[Union[str, "_models.LivenessModel"]] = rest_field(
        name="modelVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The model version used for liveness classification. This is an optional parameter, and if this
     is not specified, then the latest supported model version will be chosen. \"2024-11-15\""""
    results: "_models.LivenessWithVerifySessionResults" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The results of the liveness with verify session. Required."""

    @overload
    def __init__(
        self,
        *,
        auth_token: str,
        status: Union[str, "_models.OperationState"],
        results: "_models.LivenessWithVerifySessionResults",
        model_version: Optional[Union[str, "_models.LivenessModel"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessWithVerifySessionAttempt(_model_base.Model):
    """The liveness with verify session attempt.

    :ivar attempt_id: The attempt ID, start from 1. Required.
    :vartype attempt_id: int
    :ivar attempt_status: The status of the attempt. Required. Known values are: "NotStarted",
     "Running", "Succeeded", "Failed", and "Canceled".
    :vartype attempt_status: str or ~azure.ai.vision.face.models.OperationState
    :ivar result: The result of the liveness with verify call, will be null if there is error.
    :vartype result: ~azure.ai.vision.face.models.LivenessWithVerifyResult
    :ivar error: The error of the liveness with verify call, will be null if there is result.
    :vartype error: ~azure.ai.vision.face.models.LivenessError
    """

    attempt_id: int = rest_field(name="attemptId", visibility=["read", "create", "update", "delete", "query"])
    """The attempt ID, start from 1. Required."""
    attempt_status: Union[str, "_models.OperationState"] = rest_field(
        name="attemptStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the attempt. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    result: Optional["_models.LivenessWithVerifyResult"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The result of the liveness with verify call, will be null if there is error."""
    error: Optional["_models.LivenessError"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error of the liveness with verify call, will be null if there is result."""

    @overload
    def __init__(
        self,
        *,
        attempt_id: int,
        attempt_status: Union[str, "_models.OperationState"],
        result: Optional["_models.LivenessWithVerifyResult"] = None,
        error: Optional["_models.LivenessError"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LivenessWithVerifySessionResults(_model_base.Model):
    """The results of the liveness with verify session.

    :ivar verify_references: The references used for face verification. Required.
    :vartype verify_references: list[~azure.ai.vision.face.models.LivenessWithVerifyReference]
    :ivar attempts: The attempts data of underlying liveness with verify call with the session.
     Required.
    :vartype attempts: list[~azure.ai.vision.face.models.LivenessWithVerifySessionAttempt]
    """

    verify_references: List["_models.LivenessWithVerifyReference"] = rest_field(
        name="verifyReferences", visibility=["read", "create", "update", "delete", "query"]
    )
    """The references used for face verification. Required."""
    attempts: List["_models.LivenessWithVerifySessionAttempt"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The attempts data of underlying liveness with verify call with the session. Required."""

    @overload
    def __init__(
        self,
        *,
        verify_references: List["_models.LivenessWithVerifyReference"],
        attempts: List["_models.LivenessWithVerifySessionAttempt"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MaskProperties(_model_base.Model):
    """Properties describing the presence of a mask on a given face.

    :ivar nose_and_mouth_covered: A boolean value indicating whether nose and mouth are covered.
     Required.
    :vartype nose_and_mouth_covered: bool
    :ivar type: Type of the mask. Required. Known values are: "faceMask", "noMask",
     "otherMaskOrOcclusion", and "uncertain".
    :vartype type: str or ~azure.ai.vision.face.models.MaskType
    """

    nose_and_mouth_covered: bool = rest_field(
        name="noseAndMouthCovered", visibility=["read", "create", "update", "delete", "query"]
    )
    """A boolean value indicating whether nose and mouth are covered. Required."""
    type: Union[str, "_models.MaskType"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the mask. Required. Known values are: \"faceMask\", \"noMask\",
     \"otherMaskOrOcclusion\", and \"uncertain\"."""

    @overload
    def __init__(
        self,
        *,
        nose_and_mouth_covered: bool,
        type: Union[str, "_models.MaskType"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NoiseProperties(_model_base.Model):
    """Properties describing noise level of the image.

    :ivar noise_level: An enum value indicating level of noise. Required. Known values are: "low",
     "medium", and "high".
    :vartype noise_level: str or ~azure.ai.vision.face.models.NoiseLevel
    :ivar value: A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under
     exposure. [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise
     level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise level. Required.
    :vartype value: float
    """

    noise_level: Union[str, "_models.NoiseLevel"] = rest_field(
        name="noiseLevel", visibility=["read", "create", "update", "delete", "query"]
    )
    """An enum value indicating level of noise. Required. Known values are: \"low\", \"medium\", and
     \"high\"."""
    value: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A number indicating level of noise level ranging from 0 to 1. [0, 0.25) is under exposure.
     [0.25, 0.75) is good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3,
     0.7) is medium noise level. [0.7, 1] is high noise level. Required."""

    @overload
    def __init__(
        self,
        *,
        noise_level: Union[str, "_models.NoiseLevel"],
        value: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OcclusionProperties(_model_base.Model):
    """Properties describing occlusions on a given face.

    :ivar forehead_occluded: A boolean value indicating whether forehead is occluded. Required.
    :vartype forehead_occluded: bool
    :ivar eye_occluded: A boolean value indicating whether eyes are occluded. Required.
    :vartype eye_occluded: bool
    :ivar mouth_occluded: A boolean value indicating whether the mouth is occluded. Required.
    :vartype mouth_occluded: bool
    """

    forehead_occluded: bool = rest_field(
        name="foreheadOccluded", visibility=["read", "create", "update", "delete", "query"]
    )
    """A boolean value indicating whether forehead is occluded. Required."""
    eye_occluded: bool = rest_field(name="eyeOccluded", visibility=["read", "create", "update", "delete", "query"])
    """A boolean value indicating whether eyes are occluded. Required."""
    mouth_occluded: bool = rest_field(name="mouthOccluded", visibility=["read", "create", "update", "delete", "query"])
    """A boolean value indicating whether the mouth is occluded. Required."""

    @overload
    def __init__(
        self,
        *,
        forehead_occluded: bool,
        eye_occluded: bool,
        mouth_occluded: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
