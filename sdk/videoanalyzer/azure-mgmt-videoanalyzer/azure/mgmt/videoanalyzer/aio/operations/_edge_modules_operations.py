# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._edge_modules_operations import (
    build_create_or_update_request,
    build_delete_request,
    build_get_request,
    build_list_provisioning_token_request,
    build_list_request,
)

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class EdgeModulesOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.videoanalyzer.aio.VideoAnalyzerManagementClient`'s
        :attr:`edge_modules` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(
        self, resource_group_name: str, account_name: str, top: Optional[int] = None, **kwargs: Any
    ) -> AsyncIterable["_models.EdgeModuleEntity"]:
        """List all existing edge module resources.

        List all existing edge module resources, along with their JSON representations.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param top: Specifies a non-negative integer n that limits the number of items returned from a
         collection. The service returns the number of available items up to but not greater than the
         specified value n. Default value is None.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either EdgeModuleEntity or the result of cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.videoanalyzer.models.EdgeModuleEntity]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: Literal["2021-11-01-preview"] = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )
        cls: ClsType[_models.EdgeModuleEntityCollection] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_list_request(
                    resource_group_name=resource_group_name,
                    account_name=account_name,
                    subscription_id=self._config.subscription_id,
                    top=top,
                    api_version=api_version,
                    template_url=self.list.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("EdgeModuleEntityCollection", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list.metadata = {
        "url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules"
    }

    @distributed_trace_async
    async def get(
        self, resource_group_name: str, account_name: str, edge_module_name: str, **kwargs: Any
    ) -> _models.EdgeModuleEntity:
        """Retrieves an existing edge module resource.

        Retrieves an existing edge module resource with the given name.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param edge_module_name: The Edge Module name. Required.
        :type edge_module_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EdgeModuleEntity or the result of cls(response)
        :rtype: ~azure.mgmt.videoanalyzer.models.EdgeModuleEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: Literal["2021-11-01-preview"] = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )
        cls: ClsType[_models.EdgeModuleEntity] = kwargs.pop("cls", None)

        request = build_get_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            edge_module_name=edge_module_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.get.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("EdgeModuleEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {
        "url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules/{edgeModuleName}"
    }

    @overload
    async def create_or_update(
        self,
        resource_group_name: str,
        account_name: str,
        edge_module_name: str,
        parameters: _models.EdgeModuleEntity,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.EdgeModuleEntity:
        """Creates a new edge module or updates an existing one.

        Creates a new edge module or updates an existing one. An edge module resource enables a single
        instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer
        Account. This is used for authorization and also to make sure that the particular edge module
        instance only has access to the data it requires from the Azure Video Analyzer service. A new
        edge module resource should be created for every new instance of an Azure Video Analyzer edge
        module deployed to you Azure IoT edge environment. Edge module resources can be deleted if the
        specific module is not in use anymore.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param edge_module_name: The Edge Module name. Required.
        :type edge_module_name: str
        :param parameters: The request parameters. Required.
        :type parameters: ~azure.mgmt.videoanalyzer.models.EdgeModuleEntity
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EdgeModuleEntity or the result of cls(response)
        :rtype: ~azure.mgmt.videoanalyzer.models.EdgeModuleEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_or_update(
        self,
        resource_group_name: str,
        account_name: str,
        edge_module_name: str,
        parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.EdgeModuleEntity:
        """Creates a new edge module or updates an existing one.

        Creates a new edge module or updates an existing one. An edge module resource enables a single
        instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer
        Account. This is used for authorization and also to make sure that the particular edge module
        instance only has access to the data it requires from the Azure Video Analyzer service. A new
        edge module resource should be created for every new instance of an Azure Video Analyzer edge
        module deployed to you Azure IoT edge environment. Edge module resources can be deleted if the
        specific module is not in use anymore.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param edge_module_name: The Edge Module name. Required.
        :type edge_module_name: str
        :param parameters: The request parameters. Required.
        :type parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EdgeModuleEntity or the result of cls(response)
        :rtype: ~azure.mgmt.videoanalyzer.models.EdgeModuleEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_or_update(
        self,
        resource_group_name: str,
        account_name: str,
        edge_module_name: str,
        parameters: Union[_models.EdgeModuleEntity, IO],
        **kwargs: Any
    ) -> _models.EdgeModuleEntity:
        """Creates a new edge module or updates an existing one.

        Creates a new edge module or updates an existing one. An edge module resource enables a single
        instance of an Azure Video Analyzer IoT edge module to interact with the Video Analyzer
        Account. This is used for authorization and also to make sure that the particular edge module
        instance only has access to the data it requires from the Azure Video Analyzer service. A new
        edge module resource should be created for every new instance of an Azure Video Analyzer edge
        module deployed to you Azure IoT edge environment. Edge module resources can be deleted if the
        specific module is not in use anymore.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param edge_module_name: The Edge Module name. Required.
        :type edge_module_name: str
        :param parameters: The request parameters. Is either a model type or a IO type. Required.
        :type parameters: ~azure.mgmt.videoanalyzer.models.EdgeModuleEntity or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EdgeModuleEntity or the result of cls(response)
        :rtype: ~azure.mgmt.videoanalyzer.models.EdgeModuleEntity
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: Literal["2021-11-01-preview"] = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.EdgeModuleEntity] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IO, bytes)):
            _content = parameters
        else:
            _json = self._serialize.body(parameters, "EdgeModuleEntity")

        request = build_create_or_update_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            edge_module_name=edge_module_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_or_update.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize("EdgeModuleEntity", pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize("EdgeModuleEntity", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    create_or_update.metadata = {
        "url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules/{edgeModuleName}"
    }

    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, account_name: str, edge_module_name: str, **kwargs: Any
    ) -> None:
        """Deletes an existing edge module resource.

        Deletes an existing edge module resource. Deleting the edge module resource will prevent an
        Azure Video Analyzer IoT edge module which was previously initiated with the module
        provisioning token from communicating with the cloud.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param edge_module_name: The Edge Module name. Required.
        :type edge_module_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: Literal["2021-11-01-preview"] = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )
        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_delete_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            edge_module_name=edge_module_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.delete.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {
        "url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules/{edgeModuleName}"
    }

    @overload
    async def list_provisioning_token(
        self,
        resource_group_name: str,
        account_name: str,
        edge_module_name: str,
        parameters: _models.ListProvisioningTokenInput,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.EdgeModuleProvisioningToken:
        """Creates a new provisioning token.

        Creates a new provisioning token. A provisioning token allows for a single instance of Azure
        Video analyzer IoT edge module to be initialized and authorized to the cloud account. The
        provisioning token itself is short lived and it is only used for the initial handshake between
        IoT edge module and the cloud. After the initial handshake, the IoT edge module will agree on a
        set of authentication keys which will be auto-rotated as long as the module is able to
        periodically connect to the cloud. A new provisioning token can be generated for the same IoT
        edge module in case the module state lost or reset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param edge_module_name: The Edge Module name. Required.
        :type edge_module_name: str
        :param parameters: The request parameters. Required.
        :type parameters: ~azure.mgmt.videoanalyzer.models.ListProvisioningTokenInput
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EdgeModuleProvisioningToken or the result of cls(response)
        :rtype: ~azure.mgmt.videoanalyzer.models.EdgeModuleProvisioningToken
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def list_provisioning_token(
        self,
        resource_group_name: str,
        account_name: str,
        edge_module_name: str,
        parameters: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.EdgeModuleProvisioningToken:
        """Creates a new provisioning token.

        Creates a new provisioning token. A provisioning token allows for a single instance of Azure
        Video analyzer IoT edge module to be initialized and authorized to the cloud account. The
        provisioning token itself is short lived and it is only used for the initial handshake between
        IoT edge module and the cloud. After the initial handshake, the IoT edge module will agree on a
        set of authentication keys which will be auto-rotated as long as the module is able to
        periodically connect to the cloud. A new provisioning token can be generated for the same IoT
        edge module in case the module state lost or reset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param edge_module_name: The Edge Module name. Required.
        :type edge_module_name: str
        :param parameters: The request parameters. Required.
        :type parameters: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EdgeModuleProvisioningToken or the result of cls(response)
        :rtype: ~azure.mgmt.videoanalyzer.models.EdgeModuleProvisioningToken
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def list_provisioning_token(
        self,
        resource_group_name: str,
        account_name: str,
        edge_module_name: str,
        parameters: Union[_models.ListProvisioningTokenInput, IO],
        **kwargs: Any
    ) -> _models.EdgeModuleProvisioningToken:
        """Creates a new provisioning token.

        Creates a new provisioning token. A provisioning token allows for a single instance of Azure
        Video analyzer IoT edge module to be initialized and authorized to the cloud account. The
        provisioning token itself is short lived and it is only used for the initial handshake between
        IoT edge module and the cloud. After the initial handshake, the IoT edge module will agree on a
        set of authentication keys which will be auto-rotated as long as the module is able to
        periodically connect to the cloud. A new provisioning token can be generated for the same IoT
        edge module in case the module state lost or reset.

        :param resource_group_name: The name of the resource group. The name is case insensitive.
         Required.
        :type resource_group_name: str
        :param account_name: The Azure Video Analyzer account name. Required.
        :type account_name: str
        :param edge_module_name: The Edge Module name. Required.
        :type edge_module_name: str
        :param parameters: The request parameters. Is either a model type or a IO type. Required.
        :type parameters: ~azure.mgmt.videoanalyzer.models.ListProvisioningTokenInput or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: EdgeModuleProvisioningToken or the result of cls(response)
        :rtype: ~azure.mgmt.videoanalyzer.models.EdgeModuleProvisioningToken
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version: Literal["2021-11-01-preview"] = kwargs.pop(
            "api_version", _params.pop("api-version", self._config.api_version)
        )
        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.EdgeModuleProvisioningToken] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(parameters, (IO, bytes)):
            _content = parameters
        else:
            _json = self._serialize.body(parameters, "ListProvisioningTokenInput")

        request = build_list_provisioning_token_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            edge_module_name=edge_module_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.list_provisioning_token.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("EdgeModuleProvisioningToken", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_provisioning_token.metadata = {
        "url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/videoAnalyzers/{accountName}/edgeModules/{edgeModuleName}/listProvisioningToken"
    }
