# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class GrpcExtensionDataTransferMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """How frame data should be transmitted to the inference engine.
    """

    #: Frames are transferred embedded into the gRPC messages.
    EMBEDDED = "embedded"
    #: Frames are transferred through shared memory.
    SHARED_MEMORY = "sharedMemory"

class ImageFormatRawPixelFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The pixel format that will be used to encode images.
    """

    #: Planar YUV 4:2:0, 12bpp, (1 Cr and Cb sample per 2x2 Y samples).
    YUV420_P = "yuv420p"
    #: Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), big-endian.
    RGB565_BE = "rgb565be"
    #: Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), little-endian.
    RGB565_LE = "rgb565le"
    #: Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), big-endian , X=unused/undefined.
    RGB555_BE = "rgb555be"
    #: Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), little-endian, X=unused/undefined.
    RGB555_LE = "rgb555le"
    #: Packed RGB 8:8:8, 24bpp, RGBRGB.
    RGB24 = "rgb24"
    #: Packed RGB 8:8:8, 24bpp, BGRBGR.
    BGR24 = "bgr24"
    #: Packed ARGB 8:8:8:8, 32bpp, ARGBARGB.
    ARGB = "argb"
    #: Packed RGBA 8:8:8:8, 32bpp, RGBARGBA.
    RGBA = "rgba"
    #: Packed ABGR 8:8:8:8, 32bpp, ABGRABGR.
    ABGR = "abgr"
    #: Packed BGRA 8:8:8:8, 32bpp, BGRABGRA.
    BGRA = "bgra"

class ImageScaleMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Describes the modes for scaling an input video frame into an image, before it is sent to an
    inference engine.
    """

    #: Use the same aspect ratio as the input frame.
    PRESERVE_ASPECT_RATIO = "preserveAspectRatio"
    #: Center pad the input frame to match the given dimensions.
    PAD = "pad"
    #: Stretch input frame to match given dimensions.
    STRETCH = "stretch"

class LivePipelineState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Allowed states for a live pipeline.
    """

    #: The live pipeline is idle and not processing media.
    INACTIVE = "inactive"
    #: The live pipeline is transitioning into the active state.
    ACTIVATING = "activating"
    #: The live pipeline is active and processing media.
    ACTIVE = "active"
    #: The live pipeline is transitioning into the inactive state.
    DEACTIVATING = "deactivating"

class MotionDetectionSensitivity(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enumeration that specifies the sensitivity of the motion detection processor.
    """

    #: Low Sensitivity.
    LOW = "low"
    #: Medium Sensitivity.
    MEDIUM = "medium"
    #: High Sensitivity.
    HIGH = "high"

class ObjectTrackingAccuracy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enumeration that controls the accuracy of the tracker.
    """

    #: Low Accuracy.
    LOW = "low"
    #: Medium Accuracy.
    MEDIUM = "medium"
    #: High Accuracy.
    HIGH = "high"

class OutputSelectorOperator(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The operator to compare streams by.
    """

    #: A media type is the same type or a subtype.
    IS_ENUM = "is"
    #: A media type is not the same type or a subtype.
    IS_NOT = "isNot"

class OutputSelectorProperty(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The stream property to compare with.
    """

    #: The stream's MIME type or subtype.
    MEDIA_TYPE = "mediaType"

class ParameterType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the parameter.
    """

    #: A string parameter value.
    STRING = "string"
    #: A string to hold sensitive information as parameter value.
    SECRET_STRING = "secretString"
    #: A 32-bit signed integer as parameter value.
    INT = "int"
    #: A 64-bit double-precision floating point type as parameter value.
    DOUBLE = "double"
    #: A boolean value that is either true or false.
    BOOL = "bool"

class RtspTransport(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Underlying RTSP transport. This is used to enable or disable HTTP tunneling.
    """

    #: HTTP/HTTPS transport. This should be used when HTTP tunneling is desired.
    HTTP = "http"
    #: TCP transport. This should be used when HTTP tunneling is NOT desired.
    TCP = "tcp"
