# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AccountPatchResource(_serialization.Model):
    """Account resource patch details.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Account resource patch properties.
    :vartype properties: ~azure.mgmt.recommendationsservice.models.AccountPatchResourceProperties
    :ivar identity: The identity used for the resource.
    :vartype identity: ~azure.mgmt.recommendationsservice.models.ManagedServiceIdentity
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "AccountPatchResourceProperties"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AccountPatchResourceProperties"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: Account resource patch properties.
        :paramtype properties: ~azure.mgmt.recommendationsservice.models.AccountPatchResourceProperties
        :keyword identity: The identity used for the resource.
        :paramtype identity: ~azure.mgmt.recommendationsservice.models.ManagedServiceIdentity
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties
        self.identity = identity


class AccountPatchResourceProperties(_serialization.Model):
    """Account resource patch properties.

    :ivar endpoint_authentications: The list of service endpoints authentication details.
    :vartype endpoint_authentications:
     list[~azure.mgmt.recommendationsservice.models.EndpointAuthentication]
    :ivar cors: The list of CORS details.
    :vartype cors: list[~azure.mgmt.recommendationsservice.models.CorsRule]
    :ivar reports_connection_string: Connection string to write Accounts reports to.
    :vartype reports_connection_string: str
    """

    _attribute_map = {
        "endpoint_authentications": {"key": "endpointAuthentications", "type": "[EndpointAuthentication]"},
        "cors": {"key": "cors", "type": "[CorsRule]"},
        "reports_connection_string": {"key": "reportsConnectionString", "type": "str"},
    }

    def __init__(
        self,
        *,
        endpoint_authentications: Optional[List["_models.EndpointAuthentication"]] = None,
        cors: Optional[List["_models.CorsRule"]] = None,
        reports_connection_string: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword endpoint_authentications: The list of service endpoints authentication details.
        :paramtype endpoint_authentications:
         list[~azure.mgmt.recommendationsservice.models.EndpointAuthentication]
        :keyword cors: The list of CORS details.
        :paramtype cors: list[~azure.mgmt.recommendationsservice.models.CorsRule]
        :keyword reports_connection_string: Connection string to write Accounts reports to.
        :paramtype reports_connection_string: str
        """
        super().__init__(**kwargs)
        self.endpoint_authentications = endpoint_authentications
        self.cors = cors
        self.reports_connection_string = reports_connection_string


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class AccountResource(TrackedResource):
    """Account resource details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Account resource properties.
    :vartype properties: ~azure.mgmt.recommendationsservice.models.AccountResourceProperties
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.recommendationsservice.models.SystemData
    :ivar identity: The identity used for the resource.
    :vartype identity: ~azure.mgmt.recommendationsservice.models.ManagedServiceIdentity
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "AccountResourceProperties"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AccountResourceProperties"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: Account resource properties.
        :paramtype properties: ~azure.mgmt.recommendationsservice.models.AccountResourceProperties
        :keyword identity: The identity used for the resource.
        :paramtype identity: ~azure.mgmt.recommendationsservice.models.ManagedServiceIdentity
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties
        self.system_data = None
        self.identity = identity


class AccountResourceList(_serialization.Model):
    """The list of RecommendationsService Account resources.

    :ivar next_link: The link used to get the next page of RecommendationsService Account resources
     list.
    :vartype next_link: str
    :ivar value: The list of RecommendationsService Account resources.
    :vartype value: list[~azure.mgmt.recommendationsservice.models.AccountResource]
    """

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[AccountResource]"},
    }

    def __init__(
        self, *, next_link: Optional[str] = None, value: Optional[List["_models.AccountResource"]] = None, **kwargs
    ):
        """
        :keyword next_link: The link used to get the next page of RecommendationsService Account
         resources list.
        :paramtype next_link: str
        :keyword value: The list of RecommendationsService Account resources.
        :paramtype value: list[~azure.mgmt.recommendationsservice.models.AccountResource]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class AccountResourceProperties(_serialization.Model):
    """Account resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar configuration: Account configuration. This can only be set at RecommendationsService
     Account creation. Known values are: "Free" and "Capacity".
    :vartype configuration: str or ~azure.mgmt.recommendationsservice.models.AccountConfiguration
    :ivar endpoint_authentications: The list of service endpoints authentication details.
    :vartype endpoint_authentications:
     list[~azure.mgmt.recommendationsservice.models.EndpointAuthentication]
    :ivar cors: The list of CORS details.
    :vartype cors: list[~azure.mgmt.recommendationsservice.models.CorsRule]
    :ivar reports_connection_string: Connection string to write Accounts reports to.
    :vartype reports_connection_string: str
    :ivar provisioning_state: The resource provisioning state.
    :vartype provisioning_state: str
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "configuration": {"key": "configuration", "type": "str"},
        "endpoint_authentications": {"key": "endpointAuthentications", "type": "[EndpointAuthentication]"},
        "cors": {"key": "cors", "type": "[CorsRule]"},
        "reports_connection_string": {"key": "reportsConnectionString", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        configuration: Optional[Union[str, "_models.AccountConfiguration"]] = None,
        endpoint_authentications: Optional[List["_models.EndpointAuthentication"]] = None,
        cors: Optional[List["_models.CorsRule"]] = None,
        reports_connection_string: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword configuration: Account configuration. This can only be set at RecommendationsService
         Account creation. Known values are: "Free" and "Capacity".
        :paramtype configuration: str or ~azure.mgmt.recommendationsservice.models.AccountConfiguration
        :keyword endpoint_authentications: The list of service endpoints authentication details.
        :paramtype endpoint_authentications:
         list[~azure.mgmt.recommendationsservice.models.EndpointAuthentication]
        :keyword cors: The list of CORS details.
        :paramtype cors: list[~azure.mgmt.recommendationsservice.models.CorsRule]
        :keyword reports_connection_string: Connection string to write Accounts reports to.
        :paramtype reports_connection_string: str
        """
        super().__init__(**kwargs)
        self.configuration = configuration
        self.endpoint_authentications = endpoint_authentications
        self.cors = cors
        self.reports_connection_string = reports_connection_string
        self.provisioning_state = None


class AccountStatus(_serialization.Model):
    """Account status.

    :ivar scopes_statuses: The list of scopes statuses.
    :vartype scopes_statuses: list[~azure.mgmt.recommendationsservice.models.ScopeStatuses]
    """

    _attribute_map = {
        "scopes_statuses": {"key": "scopesStatuses", "type": "[ScopeStatuses]"},
    }

    def __init__(self, *, scopes_statuses: Optional[List["_models.ScopeStatuses"]] = None, **kwargs):
        """
        :keyword scopes_statuses: The list of scopes statuses.
        :paramtype scopes_statuses: list[~azure.mgmt.recommendationsservice.models.ScopeStatuses]
        """
        super().__init__(**kwargs)
        self.scopes_statuses = scopes_statuses


class CheckNameAvailabilityRequest(_serialization.Model):
    """The check availability request body.

    :ivar name: The name of the resource for which availability needs to be checked.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, type: Optional[str] = None, **kwargs):
        """
        :keyword name: The name of the resource for which availability needs to be checked.
        :paramtype name: str
        :keyword type: The resource type.
        :paramtype type: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.type = type


class CheckNameAvailabilityResponse(_serialization.Model):
    """The check availability result.

    :ivar name_available: Indicates if the resource name is available.
    :vartype name_available: bool
    :ivar reason: The reason why the given name is not available. Known values are: "Invalid" and
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.recommendationsservice.models.CheckNameAvailabilityReason
    :ivar message: Detailed reason why the given name is available.
    :vartype message: str
    """

    _attribute_map = {
        "name_available": {"key": "nameAvailable", "type": "bool"},
        "reason": {"key": "reason", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(
        self,
        *,
        name_available: Optional[bool] = None,
        reason: Optional[Union[str, "_models.CheckNameAvailabilityReason"]] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name_available: Indicates if the resource name is available.
        :paramtype name_available: bool
        :keyword reason: The reason why the given name is not available. Known values are: "Invalid"
         and "AlreadyExists".
        :paramtype reason: str or ~azure.mgmt.recommendationsservice.models.CheckNameAvailabilityReason
        :keyword message: Detailed reason why the given name is available.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.name_available = name_available
        self.reason = reason
        self.message = message


class CorsRule(_serialization.Model):
    """CORS details.

    All required parameters must be populated in order to send to Azure.

    :ivar allowed_origins: The origin domains that are permitted to make a request against the
     service via CORS. Required.
    :vartype allowed_origins: list[str]
    :ivar allowed_methods: The methods (HTTP request verbs) that the origin domain may use for a
     CORS request.
    :vartype allowed_methods: list[str]
    :ivar allowed_headers: The request headers that the origin domain may specify on the CORS
     request.
    :vartype allowed_headers: list[str]
    :ivar exposed_headers: The response headers to expose to CORS clients.
    :vartype exposed_headers: list[str]
    :ivar max_age_in_seconds: The number of seconds that the client/browser should cache a
     preflight response.
    :vartype max_age_in_seconds: int
    """

    _validation = {
        "allowed_origins": {"required": True, "min_items": 1},
        "max_age_in_seconds": {"minimum": 0},
    }

    _attribute_map = {
        "allowed_origins": {"key": "allowedOrigins", "type": "[str]"},
        "allowed_methods": {"key": "allowedMethods", "type": "[str]"},
        "allowed_headers": {"key": "allowedHeaders", "type": "[str]"},
        "exposed_headers": {"key": "exposedHeaders", "type": "[str]"},
        "max_age_in_seconds": {"key": "maxAgeInSeconds", "type": "int"},
    }

    def __init__(
        self,
        *,
        allowed_origins: List[str],
        allowed_methods: Optional[List[str]] = None,
        allowed_headers: Optional[List[str]] = None,
        exposed_headers: Optional[List[str]] = None,
        max_age_in_seconds: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword allowed_origins: The origin domains that are permitted to make a request against the
         service via CORS. Required.
        :paramtype allowed_origins: list[str]
        :keyword allowed_methods: The methods (HTTP request verbs) that the origin domain may use for a
         CORS request.
        :paramtype allowed_methods: list[str]
        :keyword allowed_headers: The request headers that the origin domain may specify on the CORS
         request.
        :paramtype allowed_headers: list[str]
        :keyword exposed_headers: The response headers to expose to CORS clients.
        :paramtype exposed_headers: list[str]
        :keyword max_age_in_seconds: The number of seconds that the client/browser should cache a
         preflight response.
        :paramtype max_age_in_seconds: int
        """
        super().__init__(**kwargs)
        self.allowed_origins = allowed_origins
        self.allowed_methods = allowed_methods
        self.allowed_headers = allowed_headers
        self.exposed_headers = exposed_headers
        self.max_age_in_seconds = max_age_in_seconds


class EndpointAuthentication(_serialization.Model):
    """Service endpoints authentication details.

    :ivar aad_tenant_id: AAD tenant ID.
    :vartype aad_tenant_id: str
    :ivar principal_id: AAD principal ID.
    :vartype principal_id: str
    :ivar principal_type: AAD principal type. Known values are: "Application" and "User".
    :vartype principal_type: str or ~azure.mgmt.recommendationsservice.models.PrincipalType
    """

    _attribute_map = {
        "aad_tenant_id": {"key": "aadTenantID", "type": "str"},
        "principal_id": {"key": "principalID", "type": "str"},
        "principal_type": {"key": "principalType", "type": "str"},
    }

    def __init__(
        self,
        *,
        aad_tenant_id: Optional[str] = None,
        principal_id: Optional[str] = None,
        principal_type: Optional[Union[str, "_models.PrincipalType"]] = None,
        **kwargs
    ):
        """
        :keyword aad_tenant_id: AAD tenant ID.
        :paramtype aad_tenant_id: str
        :keyword principal_id: AAD principal ID.
        :paramtype principal_id: str
        :keyword principal_type: AAD principal type. Known values are: "Application" and "User".
        :paramtype principal_type: str or ~azure.mgmt.recommendationsservice.models.PrincipalType
        """
        super().__init__(**kwargs)
        self.aad_tenant_id = aad_tenant_id
        self.principal_id = principal_id
        self.principal_type = principal_type


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.recommendationsservice.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.recommendationsservice.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.recommendationsservice.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs):
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.recommendationsservice.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.recommendationsservice.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.recommendationsservice.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs
    ):
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.recommendationsservice.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.recommendationsservice.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class ModelingInputData(_serialization.Model):
    """The configuration to raw CDM data to be used as Modeling resource input.

    :ivar connection_string: Connection string to raw input data.
    :vartype connection_string: str
    """

    _attribute_map = {
        "connection_string": {"key": "connectionString", "type": "str"},
    }

    def __init__(self, *, connection_string: Optional[str] = None, **kwargs):
        """
        :keyword connection_string: Connection string to raw input data.
        :paramtype connection_string: str
        """
        super().__init__(**kwargs)
        self.connection_string = connection_string


class ModelingPatchResource(_serialization.Model):
    """Modeling resource patch details.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Modeling resource properties to update.
    :vartype properties: ~azure.mgmt.recommendationsservice.models.ModelingPatchResourceProperties
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "properties": {"key": "properties", "type": "ModelingPatchResourceProperties"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ModelingPatchResourceProperties"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword properties: Modeling resource properties to update.
        :paramtype properties:
         ~azure.mgmt.recommendationsservice.models.ModelingPatchResourceProperties
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.properties = properties


class ModelingPatchResourceProperties(_serialization.Model):
    """Modeling resource properties to update.

    :ivar input_data: The configuration to raw CDM data to be used as Modeling resource input.
    :vartype input_data: ~azure.mgmt.recommendationsservice.models.ModelingInputData
    """

    _attribute_map = {
        "input_data": {"key": "inputData", "type": "ModelingInputData"},
    }

    def __init__(self, *, input_data: Optional["_models.ModelingInputData"] = None, **kwargs):
        """
        :keyword input_data: The configuration to raw CDM data to be used as Modeling resource input.
        :paramtype input_data: ~azure.mgmt.recommendationsservice.models.ModelingInputData
        """
        super().__init__(**kwargs)
        self.input_data = input_data


class ModelingResource(TrackedResource):
    """Modeling resource details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Modeling resource properties.
    :vartype properties: ~azure.mgmt.recommendationsservice.models.ModelingResourceProperties
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.recommendationsservice.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "ModelingResourceProperties"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ModelingResourceProperties"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: Modeling resource properties.
        :paramtype properties: ~azure.mgmt.recommendationsservice.models.ModelingResourceProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties
        self.system_data = None


class ModelingResourceList(_serialization.Model):
    """The list of Modeling resources.

    :ivar next_link: The link used to get the next page of Modeling resources list.
    :vartype next_link: str
    :ivar value: The list of Modeling resources.
    :vartype value: list[~azure.mgmt.recommendationsservice.models.ModelingResource]
    """

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ModelingResource]"},
    }

    def __init__(
        self, *, next_link: Optional[str] = None, value: Optional[List["_models.ModelingResource"]] = None, **kwargs
    ):
        """
        :keyword next_link: The link used to get the next page of Modeling resources list.
        :paramtype next_link: str
        :keyword value: The list of Modeling resources.
        :paramtype value: list[~azure.mgmt.recommendationsservice.models.ModelingResource]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ModelingResourceProperties(_serialization.Model):
    """Modeling resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar features: Modeling features controls the set of supported scenarios\models being
     computed. This can only be set at Modeling creation. Known values are: "Basic", "Standard", and
     "Premium".
    :vartype features: str or ~azure.mgmt.recommendationsservice.models.ModelingFeatures
    :ivar frequency: Modeling frequency controls the modeling compute frequency. Known values are:
     "Low", "Medium", and "High".
    :vartype frequency: str or ~azure.mgmt.recommendationsservice.models.ModelingFrequency
    :ivar size: Modeling size controls the maximum supported input data size. Known values are:
     "Small", "Medium", and "Large".
    :vartype size: str or ~azure.mgmt.recommendationsservice.models.ModelingSize
    :ivar input_data: The configuration to raw CDM data to be used as Modeling resource input.
    :vartype input_data: ~azure.mgmt.recommendationsservice.models.ModelingInputData
    :ivar provisioning_state: The resource provisioning state.
    :vartype provisioning_state: str
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "features": {"key": "features", "type": "str"},
        "frequency": {"key": "frequency", "type": "str"},
        "size": {"key": "size", "type": "str"},
        "input_data": {"key": "inputData", "type": "ModelingInputData"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(
        self,
        *,
        features: Optional[Union[str, "_models.ModelingFeatures"]] = None,
        frequency: Optional[Union[str, "_models.ModelingFrequency"]] = None,
        size: Optional[Union[str, "_models.ModelingSize"]] = None,
        input_data: Optional["_models.ModelingInputData"] = None,
        **kwargs
    ):
        """
        :keyword features: Modeling features controls the set of supported scenarios\models being
         computed. This can only be set at Modeling creation. Known values are: "Basic", "Standard", and
         "Premium".
        :paramtype features: str or ~azure.mgmt.recommendationsservice.models.ModelingFeatures
        :keyword frequency: Modeling frequency controls the modeling compute frequency. Known values
         are: "Low", "Medium", and "High".
        :paramtype frequency: str or ~azure.mgmt.recommendationsservice.models.ModelingFrequency
        :keyword size: Modeling size controls the maximum supported input data size. Known values are:
         "Small", "Medium", and "Large".
        :paramtype size: str or ~azure.mgmt.recommendationsservice.models.ModelingSize
        :keyword input_data: The configuration to raw CDM data to be used as Modeling resource input.
        :paramtype input_data: ~azure.mgmt.recommendationsservice.models.ModelingInputData
        """
        super().__init__(**kwargs)
        self.features = features
        self.frequency = frequency
        self.size = size
        self.input_data = input_data
        self.provisioning_state = None


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.recommendationsservice.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.recommendationsservice.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.recommendationsservice.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs):
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.recommendationsservice.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.recommendationsservice.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationStatusResult(_serialization.Model):
    """The current status of an async operation.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified ID for the async operation.
    :vartype id: str
    :ivar name: Name of the async operation.
    :vartype name: str
    :ivar status: Operation status. Required.
    :vartype status: str
    :ivar percent_complete: Percent of the operation that is complete.
    :vartype percent_complete: float
    :ivar start_time: The start time of the operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the operation.
    :vartype end_time: ~datetime.datetime
    :ivar operations: The operations list.
    :vartype operations: list[~azure.mgmt.recommendationsservice.models.OperationStatusResult]
    :ivar error: If present, details of the operation error.
    :vartype error: ~azure.mgmt.recommendationsservice.models.ErrorDetail
    """

    _validation = {
        "status": {"required": True},
        "percent_complete": {"maximum": 100, "minimum": 0},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "percent_complete": {"key": "percentComplete", "type": "float"},
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "end_time": {"key": "endTime", "type": "iso-8601"},
        "operations": {"key": "operations", "type": "[OperationStatusResult]"},
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(
        self,
        *,
        status: str,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        percent_complete: Optional[float] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        operations: Optional[List["_models.OperationStatusResult"]] = None,
        error: Optional["_models.ErrorDetail"] = None,
        **kwargs
    ):
        """
        :keyword id: Fully qualified ID for the async operation.
        :paramtype id: str
        :keyword name: Name of the async operation.
        :paramtype name: str
        :keyword status: Operation status. Required.
        :paramtype status: str
        :keyword percent_complete: Percent of the operation that is complete.
        :paramtype percent_complete: float
        :keyword start_time: The start time of the operation.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: The end time of the operation.
        :paramtype end_time: ~datetime.datetime
        :keyword operations: The operations list.
        :paramtype operations: list[~azure.mgmt.recommendationsservice.models.OperationStatusResult]
        :keyword error: If present, details of the operation error.
        :paramtype error: ~azure.mgmt.recommendationsservice.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.id = id
        self.name = name
        self.status = status
        self.percent_complete = percent_complete
        self.start_time = start_time
        self.end_time = end_time
        self.operations = operations
        self.error = error


class ScopeStatuses(_serialization.Model):
    """Scope statuses.

    :ivar scope: The scope that the statuses refers to.
    :vartype scope: str
    :ivar statuses: Scope stage statuses.
    :vartype statuses: list[~azure.mgmt.recommendationsservice.models.StageStatus]
    """

    _attribute_map = {
        "scope": {"key": "scope", "type": "str"},
        "statuses": {"key": "statuses", "type": "[StageStatus]"},
    }

    def __init__(
        self, *, scope: Optional[str] = None, statuses: Optional[List["_models.StageStatus"]] = None, **kwargs
    ):
        """
        :keyword scope: The scope that the statuses refers to.
        :paramtype scope: str
        :keyword statuses: Scope stage statuses.
        :paramtype statuses: list[~azure.mgmt.recommendationsservice.models.StageStatus]
        """
        super().__init__(**kwargs)
        self.scope = scope
        self.statuses = statuses


class ServiceEndpointPatchResource(_serialization.Model):
    """ServiceEndpoint resource patch details.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class ServiceEndpointResource(TrackedResource):
    """ServiceEndpoint resource details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: ServiceEndpoint resource properties.
    :vartype properties:
     ~azure.mgmt.recommendationsservice.models.ServiceEndpointResourceProperties
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.recommendationsservice.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "location": {"required": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "ServiceEndpointResourceProperties"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ServiceEndpointResourceProperties"] = None,
        **kwargs
    ):
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: ServiceEndpoint resource properties.
        :paramtype properties:
         ~azure.mgmt.recommendationsservice.models.ServiceEndpointResourceProperties
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties
        self.system_data = None


class ServiceEndpointResourceList(_serialization.Model):
    """The list of ServiceEndpoint resources.

    :ivar next_link: The link used to get the next page of ServiceEndpoint resources list.
    :vartype next_link: str
    :ivar value: The list of ServiceEndpoint resources.
    :vartype value: list[~azure.mgmt.recommendationsservice.models.ServiceEndpointResource]
    """

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[ServiceEndpointResource]"},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["_models.ServiceEndpointResource"]] = None,
        **kwargs
    ):
        """
        :keyword next_link: The link used to get the next page of ServiceEndpoint resources list.
        :paramtype next_link: str
        :keyword value: The list of ServiceEndpoint resources.
        :paramtype value: list[~azure.mgmt.recommendationsservice.models.ServiceEndpointResource]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ServiceEndpointResourceProperties(_serialization.Model):
    """ServiceEndpoint resource properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar pre_allocated_capacity: ServiceEndpoint pre-allocated capacity controls the maximum
     requests-per-second allowed for that endpoint. Only applicable when Account configuration is
     Capacity.
    :vartype pre_allocated_capacity: int
    :ivar paired_location: The paired location that will be used by this ServiceEndpoint.
    :vartype paired_location: str
    :ivar url: The URL where the ServiceEndpoint API is accessible at.
    :vartype url: str
    :ivar provisioning_state: The resource provisioning state.
    :vartype provisioning_state: str
    """

    _validation = {
        "pre_allocated_capacity": {"minimum": 0},
        "paired_location": {"readonly": True},
        "url": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "pre_allocated_capacity": {"key": "preAllocatedCapacity", "type": "int"},
        "paired_location": {"key": "pairedLocation", "type": "str"},
        "url": {"key": "url", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(self, *, pre_allocated_capacity: Optional[int] = None, **kwargs):
        """
        :keyword pre_allocated_capacity: ServiceEndpoint pre-allocated capacity controls the maximum
         requests-per-second allowed for that endpoint. Only applicable when Account configuration is
         Capacity.
        :paramtype pre_allocated_capacity: int
        """
        super().__init__(**kwargs)
        self.pre_allocated_capacity = pre_allocated_capacity
        self.paired_location = None
        self.url = None
        self.provisioning_state = None


class StageStatus(_serialization.Model):
    """Stage status.

    :ivar stage: The stage name.
    :vartype stage: str
    :ivar status: The status of the stage.
    :vartype status: str
    :ivar time: The time of the status.
    :vartype time: ~datetime.datetime
    """

    _attribute_map = {
        "stage": {"key": "stage", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "time": {"key": "time", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        stage: Optional[str] = None,
        status: Optional[str] = None,
        time: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword stage: The stage name.
        :paramtype stage: str
        :keyword status: The status of the stage.
        :paramtype status: str
        :keyword time: The time of the status.
        :paramtype time: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.stage = stage
        self.status = status
        self.time = time


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.recommendationsservice.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.recommendationsservice.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.recommendationsservice.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or
         ~azure.mgmt.recommendationsservice.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.principal_id = None
        self.client_id = None
